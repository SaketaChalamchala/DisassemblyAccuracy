.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : C67D0D65830764C4E40D980E88F1423F
.rdata:00000000 ; Input CRC32 : A06A34D3
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\functionParser.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; wchar_t _SG154888
.rdata:00000000 $SG154888:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+47o
.rdata:00000000                 unicode 0, <mainExpr>,0
.rdata:00000012                 align 4
.rdata:00000014 ; wchar_t _SG154891
.rdata:00000014 $SG154891:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+8Ao
.rdata:00000014                                         ; .xdata$x:0000FEA0o ...
.rdata:00000014                 unicode 0, <openSymbole>,0
.rdata:0000002C ; wchar_t _SG154893
.rdata:0000002C $SG154893:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_364Eo
.rdata:0000002C                 unicode 0, <closeSymbole>,0
.rdata:00000046                 align 4
.rdata:00000048 ; wchar_t _SG154896
.rdata:00000048 $SG154896:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_368Ao
.rdata:00000048                 unicode 0, <className>,0
.rdata:0000005C ; wchar_t _SG154899
.rdata:0000005C $SG154899:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+11Co
.rdata:0000005C                 unicode 0, <nameExpr>,0
.rdata:0000006E                 align 10h
.rdata:00000070 ; wchar_t _SG154903
.rdata:00000070 $SG154903:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_36B6o
.rdata:00000070                                         ; .rdata:$SG156288o
.rdata:00000070                 unicode 0, <nameExpr>,0
.rdata:00000082                 align 4
.rdata:00000084 ; wchar_t _SG154905
.rdata:00000084 $SG154905:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+144o
.rdata:00000084                 unicode 0, <expr>,0
.rdata:0000008E                 align 10h
.rdata:00000090 ; wchar_t _SG154909
.rdata:00000090 $SG154909:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_372Co
.rdata:00000090                 unicode 0, <function>,0
.rdata:000000A2                 align 4
.rdata:000000A4 ; wchar_t _SG154911
.rdata:000000A4 $SG154911:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_3749o
.rdata:000000A4                 unicode 0, <mainExpr>,0
.rdata:000000B6                 align 4
.rdata:000000B8 ; wchar_t _SG154915
.rdata:000000B8 $SG154915:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+204o
.rdata:000000B8                 unicode 0, <functionName>,0
.rdata:000000D2                 align 4
.rdata:000000D4 ; wchar_t _SG154918
.rdata:000000D4 $SG154918:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+21Eo
.rdata:000000D4                 unicode 0, <funcNameExpr>,0
.rdata:000000EE                 align 10h
.rdata:000000F0 ; wchar_t _SG154922
.rdata:000000F0 $SG154922:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_37B8o
.rdata:000000F0                 unicode 0, <funcNameExpr>,0
.rdata:0000010A                 align 4
.rdata:0000010C ; wchar_t _SG154924
.rdata:0000010C $SG154924:                              ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+246o
.rdata:0000010C                 unicode 0, <expr>,0
.rdata:00000116                 align 4
.rdata:00000118 ; wchar_t _SG154943
.rdata:00000118 $SG154943:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+2Bo
.rdata:00000118                 unicode 0, <mainExpr>,0
.rdata:0000012A                 align 4
.rdata:0000012C ; wchar_t _SG154947
.rdata:0000012C $SG154947:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+6Eo
.rdata:0000012C                 unicode 0, <functionName>,0
.rdata:00000146                 align 4
.rdata:00000148 ; wchar_t _SG154950
.rdata:00000148 $SG154950:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+88o
.rdata:00000148                 unicode 0, <nameExpr>,0
.rdata:0000015A                 align 4
.rdata:0000015C ; wchar_t _SG154954
.rdata:0000015C $SG154954:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_38F2o
.rdata:0000015C                 unicode 0, <nameExpr>,0
.rdata:0000016E                 align 10h
.rdata:00000170 ; wchar_t _SG154956
.rdata:00000170 $SG154956:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+B0o
.rdata:00000170                 unicode 0, <expr>,0
.rdata:0000017A                 align 4
.rdata:0000017C ; wchar_t _SG154960
.rdata:0000017C $SG154960:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_3968o
.rdata:0000017C                 unicode 0, <className>,0
.rdata:00000190 ; wchar_t _SG154963
.rdata:00000190 $SG154963:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+12Ao
.rdata:00000190                 unicode 0, <nameExpr>,0
.rdata:000001A2                 align 4
.rdata:000001A4 ; wchar_t _SG154967
.rdata:000001A4 $SG154967:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_3994o
.rdata:000001A4                 unicode 0, <nameExpr>,0
.rdata:000001B6                 align 4
.rdata:000001B8 ; wchar_t _SG154969
.rdata:000001B8 $SG154969:                              ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+152o
.rdata:000001B8                 unicode 0, <expr>,0
.rdata:000001C2                 align 4
.rdata:000001C4 ; wchar_t _SG154979
.rdata:000001C4 $SG154979:                              ; DATA XREF: FunctionParsersManager::writeFunctionListXml(wchar_t const *)+3Eo
.rdata:000001C4                 unicode 0, <functionList.xml>,0
.rdata:000001E6                 align 4
.rdata:000001E8 ; wchar_t _SG154986
.rdata:000001E8 $SG154986:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_287Co
.rdata:000001E8                 unicode 0, <NotepadPlus>,0
.rdata:00000200 ; wchar_t _SG154988
.rdata:00000200 $SG154988:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_28A5o
.rdata:00000200                 unicode 0, <functionList>,0
.rdata:0000021A                 align 4
.rdata:0000021C ; wchar_t _SG154991
.rdata:0000021C $SG154991:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_28CBo
.rdata:0000021C                 unicode 0, <parsers>,0
.rdata:0000022C ; wchar_t _SG154994
.rdata:0000022C $SG154994:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_28F1o
.rdata:0000022C                 unicode 0, <parser>,0
.rdata:0000023A                 align 4
.rdata:0000023C ; wchar_t _SG154998
.rdata:0000023C $SG154998:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_2909o
.rdata:0000023C                 unicode 0, <parser>,0
.rdata:0000024A                 align 4
.rdata:0000024C ; wchar_t _SG155000
.rdata:0000024C $SG155000:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+F4o
.rdata:0000024C                 unicode 0, <id>,0
.rdata:00000252                 align 4
.rdata:00000254 ; wchar_t _SG155004
.rdata:00000254 $SG155004       dw 0                    ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_296Ao
.rdata:00000256                 db    0
.rdata:00000257                 db    0
.rdata:00000258 ; wchar_t _SG155006
.rdata:00000258 $SG155006:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+146o
.rdata:00000258                 unicode 0, <commentExpr>,0
.rdata:00000270 ; wchar_t _SG155019
.rdata:00000270 $SG155019:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+1AFo
.rdata:00000270                 unicode 0, <displayName>,0
.rdata:00000288 ; wchar_t _SG155023
.rdata:00000288 $SG155023:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_2A2Fo
.rdata:00000288                 unicode 0, <classRange>,0
.rdata:0000029E                 align 10h
.rdata:000002A0 ; wchar_t _SG155025
.rdata:000002A0 $SG155025:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+20Do
.rdata:000002A0                 unicode 0, <function>,0
.rdata:000002B2                 align 4
.rdata:000002B4 ; wchar_t _SG156085
.rdata:000002B4 $SG156085       dw 0                    ; DATA XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+53o
.rdata:000002B6                 db    0
.rdata:000002B7                 db    0
.rdata:000002B8 ; wchar_t _SG156087
.rdata:000002B8 $SG156087       dw 0                    ; DATA XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+8Fo
.rdata:000002BA                 db    0
.rdata:000002BB                 db    0
.rdata:000002BC ; wchar_t _SG156093
.rdata:000002BC $SG156093       dw 0                    ; DATA XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+140o
.rdata:000002BE                 db    0
.rdata:000002BF                 db    0
.rdata:000002C0 ; wchar_t _SG155090
.rdata:000002C0 $SG155090:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_3287o
.rdata:000002C0                 unicode 0, <associationMap>,0
.rdata:000002DE                 align 10h
.rdata:000002E0 ; wchar_t _SG155093
.rdata:000002E0 $SG155093:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+A72o
.rdata:000002E0                 unicode 0, <association>,0
.rdata:000002F8 ; wchar_t _SG155097
.rdata:000002F8 $SG155097:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_32C2o
.rdata:000002F8                 unicode 0, <association>,0
.rdata:00000310 ; wchar_t _SG155100
.rdata:00000310 $SG155100:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+AB4o
.rdata:00000310                 unicode 0, <langID>,0
.rdata:0000031E                 align 10h
.rdata:00000320 ; wchar_t _SG155102
.rdata:00000320 $SG155102:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+AD1o
.rdata:00000320                 unicode 0, <ext>,0
.rdata:00000328 ; wchar_t _SG155104
.rdata:00000328 $SG155104:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+AEEo
.rdata:00000328                 unicode 0, <id>,0
.rdata:0000032E                 align 10h
.rdata:00000330 ; wchar_t _SG155106
.rdata:00000330 $SG155106:                              ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+B0Bo
.rdata:00000330                 unicode 0, <userDefinedLangName>,0
.rdata:00000358 $SG155134       db    0                 ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_3479o
.rdata:00000359                 db    0
.rdata:0000035A                 db    0
.rdata:0000035B                 db    0
.rdata:0000035C $SG155135       db    0                 ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_349Ao
.rdata:0000035D                 db    0
.rdata:0000035E                 db    0
.rdata:0000035F                 db    0
.rdata:00000360 ; wchar_t _SG157235
.rdata:00000360 $SG157235       dw 0                    ; DATA XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+11o
.rdata:00000362                 db    0
.rdata:00000363                 db    0
.rdata:00000364 ; wchar_t _SG155198
.rdata:00000364 $SG155198       dw 0                    ; DATA XREF: FunctionParsersManager::getParser(AssociationInfo const &)+3Eo
.rdata:00000366                 db    0
.rdata:00000367                 db    0
.rdata:00000368 ; wchar_t _SG155217
.rdata:00000368 $SG155217       dw 0                    ; DATA XREF: FunctionParsersManager::getParser(AssociationInfo const &)+68o
.rdata:0000036A                 db    0
.rdata:0000036B                 db    0
.rdata:0000036C ; wchar_t _SG156267
.rdata:0000036C $SG156267       dw 0                    ; DATA XREF: FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)+65o
.rdata:0000036E                 db    0
.rdata:0000036F                 db    0
.rdata:00000370 ; wchar_t _SG156287
.rdata:00000370 $SG156287       dd offset $SG154891+14h ; DATA XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *):loc_1FC7o
.rdata:00000370                                         ; "e"
.rdata:00000374 ; wchar_t _SG156288
.rdata:00000374 $SG156288       dd offset $SG154903+0Ch ; DATA XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+6Fo
.rdata:00000374                                         ; "pr"
.rdata:00000378 ; wchar_t _SG156289
.rdata:00000378 $SG156289       dd offset $SG154891+15h ; DATA XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+88o
.rdata:00000378                                         ; ""
.rdata:0000037C ; wchar_t _SG155321
.rdata:0000037C $SG155321       dw 0                    ; DATA XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *):loc_138Fo
.rdata:0000037E                 db    0
.rdata:0000037F                 db    0
.rdata:00000380 ; wchar_t _SG156373
.rdata:00000380 $SG156373       dw 0                    ; DATA XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+11Fo
.rdata:00000382                 db    0
.rdata:00000383                 db    0
.rdata:00000384 ; wchar_t _SG156374
.rdata:00000384 $SG156374       dw 0                    ; DATA XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+13Do
.rdata:00000386                 db    0
.rdata:00000387                 db    0
.rdata:00000388 $SG145162       db '12 12 56 1',0       ; DATA XREF: .data:_acTop_xpmo
.rdata:00000393                 align 4
.rdata:00000394 $SG145163       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000DC0o
.rdata:000003A0 $SG145164       db '.',9,'c #8AB2E9',0  ; DATA XREF: .data:00000DC4o
.rdata:000003AC $SG145165       db '+',9,'c #CCDCF6',0  ; DATA XREF: .data:00000DC8o
.rdata:000003B8 $SG145166       db '@',9,'c #80ABEA',0  ; DATA XREF: .data:00000DCCo
.rdata:000003C4 $SG145167       db '#',9,'c #7DA9E8',0  ; DATA XREF: .data:00000DD0o
.rdata:000003D0 $SG145168       db '$',9,'c #C7DAF3',0  ; DATA XREF: .data:00000DD4o
.rdata:000003DC $SG145169       db '%',9,'c #79A7E6',0  ; DATA XREF: .data:00000DD8o
.rdata:000003E8 $SG145170       db '&',9,'c #ADC8EF',0  ; DATA XREF: .data:00000DDCo
.rdata:000003F4 $SG145171       db '*',9,'c #87B0E8',0  ; DATA XREF: .data:00000DE0o
.rdata:00000400 $SG145172       db '=',9,'c #BBD2F0',0  ; DATA XREF: .data:00000DE4o
.rdata:0000040C $SG145173       db '-',9,'c #6EA0E2',0  ; DATA XREF: .data:00000DE8o
.rdata:00000418 $SG145174       db ';',9,'c #A8C7EE',0  ; DATA XREF: .data:00000DECo
.rdata:00000424 $SG145175       db '>',9,'c #A3C2ED',0  ; DATA XREF: .data:00000DF0o
.rdata:00000430 $SG145176       db ',',9,'c #75A4E3',0  ; DATA XREF: .data:00000DF4o
.rdata:0000043C $SG145177       db 27h,9,'c #A7C4EB',0  ; DATA XREF: .data:00000DF8o
.rdata:00000448 $SG145178       db ')',9,'c #6297E1',0  ; DATA XREF: .data:00000DFCo
.rdata:00000454 $SG145179       db '!',9,'c #A1C1EC',0  ; DATA XREF: .data:00000E00o
.rdata:00000460 $SG145180       db '~',9,'c #92B7E8',0  ; DATA XREF: .data:00000E04o
.rdata:0000046C $SG145181       db '{',9,'c #99BBE9',0  ; DATA XREF: .data:00000E08o
.rdata:00000478 $SG145182       db ']',9,'c #6197DD',0  ; DATA XREF: .data:00000E0Co
.rdata:00000484 $SG145183       db '^',9,'c #96B9E6',0  ; DATA XREF: .data:00000E10o
.rdata:00000490 $SG145184       db '/',9,'c #538EDB',0  ; DATA XREF: .data:00000E14o
.rdata:0000049C $SG145185       db '(',9,'c #99BBEA',0  ; DATA XREF: .data:00000E18o
.rdata:000004A8 $SG145186       db '_',9,'c #80AAE3',0  ; DATA XREF: .data:00000E1Co
.rdata:000004B4 $SG145187       db ':',9,'c #81ABE3',0  ; DATA XREF: .data:00000E20o
.rdata:000004C0 $SG145188       db '<',9,'c #8AB1E4',0  ; DATA XREF: .data:00000E24o
.rdata:000004CC $SG145189       db '[',9,'c #4B88D6',0  ; DATA XREF: .data:00000E28o
.rdata:000004D8 $SG145190       db '}',9,'c #4882D1',0  ; DATA XREF: .data:00000E2Co
.rdata:000004E4 $SG145191       db '|',9,'c #4384D6',0  ; DATA XREF: .data:00000E30o
.rdata:000004F0 $SG145192       db '1',9,'c #90B5E7',0  ; DATA XREF: .data:00000E34o
.rdata:000004FC $SG145193       db '2',9,'c #74A3E0',0  ; DATA XREF: .data:00000E38o
.rdata:00000508 $SG145194       db '3',9,'c #77A4E0',0  ; DATA XREF: .data:00000E3Co
.rdata:00000514 $SG145195       db '4',9,'c #81ABE2',0  ; DATA XREF: .data:00000E40o
.rdata:00000520 $SG145196       db '5',9,'c #437FD3',0  ; DATA XREF: .data:00000E44o
.rdata:0000052C $SG145197       db '6',9,'c #7FA2DF',0  ; DATA XREF: .data:00000E48o
.rdata:00000538 $SG145198       db '7',9,'c #3577D2',0  ; DATA XREF: .data:00000E4Co
.rdata:00000544 $SG145199       db '8',9,'c #87AFE4',0  ; DATA XREF: .data:00000E50o
.rdata:00000550 $SG145200       db '9',9,'c #72A1DF',0  ; DATA XREF: .data:00000E54o
.rdata:0000055C $SG145201       db '0',9,'c #7CA9E1',0  ; DATA XREF: .data:00000E58o
.rdata:00000568 $SG145202       db 'a',9,'c #3F7AD0',0  ; DATA XREF: .data:00000E5Co
.rdata:00000574 $SG145203       db 'b',9,'c #85A4DE',0  ; DATA XREF: .data:00000E60o
.rdata:00000580 $SG145204       db 'c',9,'c #FBFCFE',0  ; DATA XREF: .data:00000E64o
.rdata:0000058C $SG145205       db 'd',9,'c #236ECD',0  ; DATA XREF: .data:00000E68o
.rdata:00000598 $SG145206       db 'e',9,'c #7EA8E1',0  ; DATA XREF: .data:00000E6Co
.rdata:000005A4 $SG145207       db 'f',9,'c #79A6E0',0  ; DATA XREF: .data:00000E70o
.rdata:000005B0 $SG145208       db 'g',9,'c #3D77D0',0  ; DATA XREF: .data:00000E74o
.rdata:000005BC $SG145209       db 'h',9,'c #87A4DC',0  ; DATA XREF: .data:00000E78o
.rdata:000005C8 $SG145210       db 'i',9,'c #1A62C9',0  ; DATA XREF: .data:00000E7Co
.rdata:000005D4 $SG145211       db 'j',9,'c #75A3DF',0  ; DATA XREF: .data:00000E80o
.rdata:000005E0 $SG145212       db 'k',9,'c #3C74CF',0  ; DATA XREF: .data:00000E84o
.rdata:000005EC $SG145213       db 'l',9,'c #8DA6DE',0  ; DATA XREF: .data:00000E88o
.rdata:000005F8 $SG145214       db 'm',9,'c #1859C4',0  ; DATA XREF: .data:00000E8Co
.rdata:00000604 $SG145215       db 'n',9,'c #3B71CC',0  ; DATA XREF: .data:00000E90o
.rdata:00000610 $SG145216       db 'o',9,'c #8EA5DD',0  ; DATA XREF: .data:00000E94o
.rdata:0000061C $SG145217       db 'p',9,'c #164EC0',0  ; DATA XREF: .data:00000E98o
.rdata:00000628 $SG145218       db 'q',9,'c #92A7DD',0  ; DATA XREF: .data:00000E9Co
.rdata:00000634 $SG145219       db '    .+      ',0     ; DATA XREF: .data:00000EA0o
.rdata:00000641                 align 4
.rdata:00000644 $SG145220       db '    @#$     ',0     ; DATA XREF: .data:00000EA4o
.rdata:00000651                 align 4
.rdata:00000654 $SG145221       db '    %&*=    ',0     ; DATA XREF: .data:00000EA8o
.rdata:00000661                 align 4
.rdata:00000664 $SG145222       db '    -;>,',27h,'   ',0 ; DATA XREF: .data:00000EACo
.rdata:00000671                 align 4
.rdata:00000674 $SG145223       db '    )!~{]^  ',0     ; DATA XREF: .data:00000EB0o
.rdata:00000681                 align 4
.rdata:00000684 $SG145224       db '    /(_:<[} ',0     ; DATA XREF: .data:00000EB4o
.rdata:00000691                 align 4
.rdata:00000694 $SG145225       db '    |123456 ',0     ; DATA XREF: .data:00000EB8o
.rdata:000006A1                 align 4
.rdata:000006A4 $SG145226       db '    7890abc ',0     ; DATA XREF: .data:00000EBCo
.rdata:000006B1                 align 4
.rdata:000006B4 $SG145227       db '    defgh   ',0     ; DATA XREF: .data:00000EC0o
.rdata:000006C1                 align 4
.rdata:000006C4 $SG145228       db '    ijkl    ',0     ; DATA XREF: .data:00000EC4o
.rdata:000006D1                 align 4
.rdata:000006D4 $SG145229       db '    mno     ',0     ; DATA XREF: .data:00000EC8o
.rdata:000006E1                 align 4
.rdata:000006E4 $SG145230       db '    pq      ',0     ; DATA XREF: .data:00000ECCo
.rdata:000006F1                 align 4
.rdata:000006F4 $SG145232       db '12 12 54 1',0       ; DATA XREF: .data:_acBottom_xpmo
.rdata:000006FF                 align 10h
.rdata:00000700 $SG145233       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000ED8o
.rdata:0000070C $SG145234       db '.',9,'c #C4D7F3',0  ; DATA XREF: .data:00000EDCo
.rdata:00000718 $SG145235       db '+',9,'c #72A1E3',0  ; DATA XREF: .data:00000EE0o
.rdata:00000724 $SG145236       db '@',9,'c #C1D6F2',0  ; DATA XREF: .data:00000EE4o
.rdata:00000730 $SG145237       db '#',9,'c #6397E1',0  ; DATA XREF: .data:00000EE8o
.rdata:0000073C $SG145238       db '$',9,'c #5990DD',0  ; DATA XREF: .data:00000EECo
.rdata:00000748 $SG145239       db '%',9,'c #BBD2F0',0  ; DATA XREF: .data:00000EF0o
.rdata:00000754 $SG145240       db '&',9,'c #7AA6E5',0  ; DATA XREF: .data:00000EF4o
.rdata:00000760 $SG145241       db '*',9,'c #9ABDEA',0  ; DATA XREF: .data:00000EF8o
.rdata:0000076C $SG145242       db '=',9,'c #4A87D9',0  ; DATA XREF: .data:00000EFCo
.rdata:00000778 $SG145243       db '-',9,'c #B1CAEE',0  ; DATA XREF: .data:00000F00o
.rdata:00000784 $SG145244       db ';',9,'c #75A4E3',0  ; DATA XREF: .data:00000F04o
.rdata:00000790 $SG145245       db '>',9,'c #99BBE9',0  ; DATA XREF: .data:00000F08o
.rdata:0000079C $SG145246       db ',',9,'c #95B9E8',0  ; DATA XREF: .data:00000F0Co
.rdata:000007A8 $SG145247       db 27h,9,'c #3A7CD4',0  ; DATA XREF: .data:00000F10o
.rdata:000007B4 $SG145248       db ')',9,'c #A9C6EC',0  ; DATA XREF: .data:00000F14o
.rdata:000007C0 $SG145249       db '!',9,'c #71A0E0',0  ; DATA XREF: .data:00000F18o
.rdata:000007CC $SG145250       db '~',9,'c #86AFE5',0  ; DATA XREF: .data:00000F1Co
.rdata:000007D8 $SG145251       db '{',9,'c #8DB2E6',0  ; DATA XREF: .data:00000F20o
.rdata:000007E4 $SG145252       db ']',9,'c #2A72CF',0  ; DATA XREF: .data:00000F24o
.rdata:000007F0 $SG145253       db '^',9,'c #73A0E0',0  ; DATA XREF: .data:00000F28o
.rdata:000007FC $SG145254       db '/',9,'c #6B9DE0',0  ; DATA XREF: .data:00000F2Co
.rdata:00000808 $SG145255       db '(',9,'c #95B8E8',0  ; DATA XREF: .data:00000F30o
.rdata:00000814 $SG145256       db '_',9,'c #81ABE3',0  ; DATA XREF: .data:00000F34o
.rdata:00000820 $SG145257       db ':',9,'c #72A1DF',0  ; DATA XREF: .data:00000F38o
.rdata:0000082C $SG145258       db '<',9,'c #83ADE3',0  ; DATA XREF: .data:00000F3Co
.rdata:00000838 $SG145259       db '[',9,'c #1B65C9',0  ; DATA XREF: .data:00000F40o
.rdata:00000844 $SG145260       db '}',9,'c #5F95DC',0  ; DATA XREF: .data:00000F44o
.rdata:00000850 $SG145261       db '|',9,'c #8BB3E5',0  ; DATA XREF: .data:00000F48o
.rdata:0000085C $SG145262       db '1',9,'c #77A4E0',0  ; DATA XREF: .data:00000F4Co
.rdata:00000868 $SG145263       db '2',9,'c #679ADC',0  ; DATA XREF: .data:00000F50o
.rdata:00000874 $SG145264       db '3',9,'c #7AA6E1',0  ; DATA XREF: .data:00000F54o
.rdata:00000880 $SG145265       db '4',9,'c #195CC6',0  ; DATA XREF: .data:00000F58o
.rdata:0000088C $SG145266       db '5',9,'c #FCFDFE',0  ; DATA XREF: .data:00000F5Co
.rdata:00000898 $SG145267       db '6',9,'c #8DB2E4',0  ; DATA XREF: .data:00000F60o
.rdata:000008A4 $SG145268       db '7',9,'c #4885D6',0  ; DATA XREF: .data:00000F64o
.rdata:000008B0 $SG145269       db '8',9,'c #7CA9E1',0  ; DATA XREF: .data:00000F68o
.rdata:000008BC $SG145270       db '9',9,'c #6698DB',0  ; DATA XREF: .data:00000F6Co
.rdata:000008C8 $SG145271       db '0',9,'c #71A1DE',0  ; DATA XREF: .data:00000F70o
.rdata:000008D4 $SG145272       db 'a',9,'c #1752C0',0  ; DATA XREF: .data:00000F74o
.rdata:000008E0 $SG145273       db 'b',9,'c #88ABE0',0  ; DATA XREF: .data:00000F78o
.rdata:000008EC $SG145274       db 'c',9,'c #3D77D0',0  ; DATA XREF: .data:00000F7Co
.rdata:000008F8 $SG145275       db 'd',9,'c #6E9FDD',0  ; DATA XREF: .data:00000F80o
.rdata:00000904 $SG145276       db 'e',9,'c #699BDC',0  ; DATA XREF: .data:00000F84o
.rdata:00000910 $SG145277       db 'f',9,'c #1547BD',0  ; DATA XREF: .data:00000F88o
.rdata:0000091C $SG145278       db 'g',9,'c #8DA6DE',0  ; DATA XREF: .data:00000F8Co
.rdata:00000928 $SG145279       db 'h',9,'c #376BC9',0  ; DATA XREF: .data:00000F90o
.rdata:00000934 $SG145280       db 'i',9,'c #6295DA',0  ; DATA XREF: .data:00000F94o
.rdata:00000940 $SG145281       db 'j',9,'c #1440B9',0  ; DATA XREF: .data:00000F98o
.rdata:0000094C $SG145282       db 'k',9,'c #8DA0DB',0  ; DATA XREF: .data:00000F9Co
.rdata:00000958 $SG145283       db 'l',9,'c #315FC4',0  ; DATA XREF: .data:00000FA0o
.rdata:00000964 $SG145284       db 'm',9,'c #1339B7',0  ; DATA XREF: .data:00000FA4o
.rdata:00000970 $SG145285       db 'n',9,'c #909FDA',0  ; DATA XREF: .data:00000FA8o
.rdata:0000097C $SG145286       db 'o',9,'c #1233B4',0  ; DATA XREF: .data:00000FACo
.rdata:00000988 $SG145287       db '         .+ ',0     ; DATA XREF: .data:00000FB0o
.rdata:00000995                 align 4
.rdata:00000998 $SG145288       db '        @#$ ',0     ; DATA XREF: .data:00000FB4o
.rdata:000009A5                 align 4
.rdata:000009A8 $SG145289       db '       %&*= L',0    ; DATA XREF: .data:00000FB8o
.rdata:000009B6                 align 4
.rdata:000009B8 $SG145290       db '      -;>,',27h,' ',0 ; DATA XREF: .data:00000FBCo
.rdata:000009C5                 align 4
.rdata:000009C8 $SG145291       db '     )!>~{] ',0     ; DATA XREF: .data:00000FC0o
.rdata:000009D5                 align 4
.rdata:000009D8 $SG145292       db '    ^/(_:<[ ',0     ; DATA XREF: .data:00000FC4o
.rdata:000009E5                 align 4
.rdata:000009E8 $SG145293       db '    (}|1234 ',0     ; DATA XREF: .data:00000FC8o
.rdata:000009F5                 align 4
.rdata:000009F8 $SG145294       db '    567890a ',0     ; DATA XREF: .data:00000FCCo
.rdata:00000A05                 align 4
.rdata:00000A08 $SG145295       db '      bcdef ',0     ; DATA XREF: .data:00000FD0o
.rdata:00000A15                 align 4
.rdata:00000A18 $SG145296       db '       ghij ',0     ; DATA XREF: .data:00000FD4o
.rdata:00000A25                 align 4
.rdata:00000A28 $SG145297       db '        klm ',0     ; DATA XREF: .data:00000FD8o
.rdata:00000A35                 align 4
.rdata:00000A38 $SG145298       db '         no ',0     ; DATA XREF: .data:00000FDCo
.rdata:00000A45                 align 4
.rdata:00000A48 $SG145300       db '13 14 54 1',0       ; DATA XREF: .data:_bookmark_xpmo
.rdata:00000A53                 align 4
.rdata:00000A54 $SG145301       db ' ',9,'c None',0     ; DATA XREF: .data:00000FE8o
.rdata:00000A5D                 align 10h
.rdata:00000A60 $SG145302       db '.',9,'c #545254',0  ; DATA XREF: .data:00000FECo
.rdata:00000A6C $SG145303       db '+',9,'c #3C3E3C',0  ; DATA XREF: .data:00000FF0o
.rdata:00000A78 $SG145304       db '@',9,'c #646464',0  ; DATA XREF: .data:00000FF4o
.rdata:00000A84 $SG145305       db '#',9,'c #A4A4A4',0  ; DATA XREF: .data:00000FF8o
.rdata:00000A90 $SG145306       db '$',9,'c #B7B8B7',0  ; DATA XREF: .data:00000FFCo
.rdata:00000A9C $SG145307       db '%',9,'c #747284',0  ; DATA XREF: .data:00001000o
.rdata:00000AA8 $SG145308       db '&',9,'c #B4B2C4',0  ; DATA XREF: .data:00001004o
.rdata:00000AB4 $SG145309       db '*',9,'c #DCD7E4',0  ; DATA XREF: .data:00001008o
.rdata:00000AC0 $SG145310       db '=',9,'c #1C1A1C',0  ; DATA XREF: .data:0000100Co
.rdata:00000ACC $SG145311       db '-',9,'c #403E58',0  ; DATA XREF: .data:00001010o
.rdata:00000AD8 $SG145312       db ';',9,'c #5C5A8C',0  ; DATA XREF: .data:00001014o
.rdata:00000AE4 $SG145313       db '>',9,'c #7C7EAC',0  ; DATA XREF: .data:00001018o
.rdata:00000AF0 $SG145314       db ',',9,'c #7C8EBC',0  ; DATA XREF: .data:0000101Co
.rdata:00000AFC $SG145315       db 27h,9,'c #242644',0  ; DATA XREF: .data:00001020o
.rdata:00000B08 $SG145316       db ')',9,'c #282668',0  ; DATA XREF: .data:00001024o
.rdata:00000B14 $SG145317       db '!',9,'c #24367C',0  ; DATA XREF: .data:00001028o
.rdata:00000B20 $SG145318       db '~',9,'c #244A84',0  ; DATA XREF: .data:0000102Co
.rdata:00000B2C $SG145319       db '{',9,'c #2C5098',0  ; DATA XREF: .data:00001030o
.rdata:00000B38 $SG145320       db ']',9,'c #14162C',0  ; DATA XREF: .data:00001034o
.rdata:00000B44 $SG145321       db '^',9,'c #142E7C',0  ; DATA XREF: .data:00001038o
.rdata:00000B50 $SG145322       db '/',9,'c #143789',0  ; DATA XREF: .data:0000103Co
.rdata:00000B5C $SG145323       db '(',9,'c #204990',0  ; DATA XREF: .data:00001040o
.rdata:00000B68 $SG145324       db '_',9,'c #174091',0  ; DATA XREF: .data:00001044o
.rdata:00000B74 $SG145325       db ':',9,'c #0C0630',0  ; DATA XREF: .data:00001048o
.rdata:00000B80 $SG145326       db '<',9,'c #24327C',0  ; DATA XREF: .data:0000104Co
.rdata:00000B8C $SG145327       db '[',9,'c #2450A0',0  ; DATA XREF: .data:00001050o
.rdata:00000B98 $SG145328       db '}',9,'c #345DB4',0  ; DATA XREF: .data:00001054o
.rdata:00000BA4 $SG145329       db '|',9,'c #3C68B8',0  ; DATA XREF: .data:00001058o
.rdata:00000BB0 $SG145330       db '1',9,'c #141244',0  ; DATA XREF: .data:0000105Co
.rdata:00000BBC $SG145331       db '2',9,'c #24428C',0  ; DATA XREF: .data:00001060o
.rdata:00000BC8 $SG145332       db '3',9,'c #3462B9',0  ; DATA XREF: .data:00001064o
.rdata:00000BD4 $SG145333       db '4',9,'c #4470C4',0  ; DATA XREF: .data:00001068o
.rdata:00000BE0 $SG145334       db '5',9,'c #4C7FD6',0  ; DATA XREF: .data:0000106Co
.rdata:00000BEC $SG145335       db '6',9,'c #4472CC',0  ; DATA XREF: .data:00001070o
.rdata:00000BF8 $SG145336       db '7',9,'c #24224C',0  ; DATA XREF: .data:00001074o
.rdata:00000C04 $SG145337       db '8',9,'c #5C8DEC',0  ; DATA XREF: .data:00001078o
.rdata:00000C10 $SG145338       db '9',9,'c #5C94F6',0  ; DATA XREF: .data:0000107Co
.rdata:00000C1C $SG145339       db '0',9,'c #5482DF',0  ; DATA XREF: .data:00001080o
.rdata:00000C28 $SG145340       db 'a',9,'c #619DF7',0  ; DATA XREF: .data:00001084o
.rdata:00000C34 $SG145341       db 'b',9,'c #6CA6FC',0  ; DATA XREF: .data:00001088o
.rdata:00000C40 $SG145342       db 'c',9,'c #64A2FC',0  ; DATA XREF: .data:0000108Co
.rdata:00000C4C $SG145343       db 'd',9,'c #1C2E5C',0  ; DATA XREF: .data:00001090o
.rdata:00000C58 $SG145344       db 'e',9,'c #6CA2FC',0  ; DATA XREF: .data:00001094o
.rdata:00000C64 $SG145345       db 'f',9,'c #74B2FC',0  ; DATA XREF: .data:00001098o
.rdata:00000C70 $SG145346       db 'g',9,'c #7CB8FC',0  ; DATA XREF: .data:0000109Co
.rdata:00000C7C $SG145347       db 'h',9,'c #1C3264',0  ; DATA XREF: .data:000010A0o
.rdata:00000C88 $SG145348       db 'i',9,'c #346AD4',0  ; DATA XREF: .data:000010A4o
.rdata:00000C94 $SG145349       db 'j',9,'c #7CBEFC',0  ; DATA XREF: .data:000010A8o
.rdata:00000CA0 $SG145350       db 'k',9,'c #3C72DC',0  ; DATA XREF: .data:000010ACo
.rdata:00000CAC $SG145351       db 'l',9,'c #243250',0  ; DATA XREF: .data:000010B0o
.rdata:00000CB8 $SG145352       db 'm',9,'c #346AB4',0  ; DATA XREF: .data:000010B4o
.rdata:00000CC4 $SG145353       db 'n',9,'c #3C82DC',0  ; DATA XREF: .data:000010B8o
.rdata:00000CD0 $SG145354       db 'o',9,'c #6C6A6C',0  ; DATA XREF: .data:000010BCo
.rdata:00000CDC $SG145355       db '     .+.     ',0    ; DATA XREF: .data:000010C0o
.rdata:00000CEA                 align 4
.rdata:00000CEC $SG145356       db '   @##$##@   ',0    ; DATA XREF: .data:000010C4o
.rdata:00000CFA                 align 4
.rdata:00000CFC $SG145357       db '  @%&***&%@  ',0    ; DATA XREF: .data:000010C8o
.rdata:00000D0A                 align 4
.rdata:00000D0C $SG145358       db ' =-;>,,,>;-= ',0    ; DATA XREF: .data:000010CCo
.rdata:00000D1A                 align 4
.rdata:00000D1C $SG145359       db ' ',27h,')!~{{{~!)',27h,' ',0
.rdata:00000D1C                                         ; DATA XREF: .data:000010D0o
.rdata:00000D2A                 align 4
.rdata:00000D2C $SG145360       db '])^/({{{(_^)]',0    ; DATA XREF: .data:000010D4o
.rdata:00000D3A                 align 4
.rdata:00000D3C $SG145361       db ':<_[}|||}[_<:',0    ; DATA XREF: .data:000010D8o
.rdata:00000D4A                 align 4
.rdata:00000D4C $SG145362       db '12[3455563[21',0    ; DATA XREF: .data:000010DCo
.rdata:00000D5A                 align 4
.rdata:00000D5C $SG145363       db '7_365899063_7',0    ; DATA XREF: .data:000010E0o
.rdata:00000D6A                 align 4
.rdata:00000D6C $SG145364       db ' /|09abc904/ ',0    ; DATA XREF: .data:000010E4o
.rdata:00000D7A                 align 4
.rdata:00000D7C $SG145365       db ' d}8efgfb83d ',0    ; DATA XREF: .data:000010E8o
.rdata:00000D8A                 align 4
.rdata:00000D8C $SG145366       db '  hiafjgakh  ',0    ; DATA XREF: .data:000010ECo
.rdata:00000D9A                 align 4
.rdata:00000D9C $SG145367       db '   l~mnm~l   ',0    ; DATA XREF: .data:000010F0o
.rdata:00000DAA                 align 4
.rdata:00000DAC $SG145368       db '     o@o     ',0    ; DATA XREF: .data:000010F4o
.rdata:00000DBA                 align 4
.rdata:00000DBA _rdata          ends
.rdata:00000DBA
.data:00000DBC ; ===========================================================================
.data:00000DBC
.data:00000DBC ; Segment type: Pure data
.data:00000DBC ; Segment permissions: Read/Write
.data:00000DBC ; Segment alignment 'qword' can not be represented in assembly
.data:00000DBC _data           segment para public 'DATA' use32
.data:00000DBC                 assume cs:_data
.data:00000DBC                 ;org 0DBCh
.data:00000DBC _acTop_xpm      dd offset $SG145162     ; "12 12 56 1"
.data:00000DC0                 dd offset $SG145163     ; " \tc #FFFFFF"
.data:00000DC4                 dd offset $SG145164     ; ".\tc #8AB2E9"
.data:00000DC8                 dd offset $SG145165     ; "+\tc #CCDCF6"
.data:00000DCC                 dd offset $SG145166     ; "@\tc #80ABEA"
.data:00000DD0                 dd offset $SG145167     ; "#\tc #7DA9E8"
.data:00000DD4                 dd offset $SG145168     ; "$\tc #C7DAF3"
.data:00000DD8                 dd offset $SG145169     ; "%\tc #79A7E6"
.data:00000DDC                 dd offset $SG145170     ; "&\tc #ADC8EF"
.data:00000DE0                 dd offset $SG145171     ; "*\tc #87B0E8"
.data:00000DE4                 dd offset $SG145172     ; "=\tc #BBD2F0"
.data:00000DE8                 dd offset $SG145173     ; "-\tc #6EA0E2"
.data:00000DEC                 dd offset $SG145174     ; ";\tc #A8C7EE"
.data:00000DF0                 dd offset $SG145175     ; ">\tc #A3C2ED"
.data:00000DF4                 dd offset $SG145176     ; ",\tc #75A4E3"
.data:00000DF8                 dd offset $SG145177     ; "'\tc #A7C4EB"
.data:00000DFC                 dd offset $SG145178     ; ")\tc #6297E1"
.data:00000E00                 dd offset $SG145179     ; "!\tc #A1C1EC"
.data:00000E04                 dd offset $SG145180     ; "~\tc #92B7E8"
.data:00000E08                 dd offset $SG145181     ; "{\tc #99BBE9"
.data:00000E0C                 dd offset $SG145182     ; "]\tc #6197DD"
.data:00000E10                 dd offset $SG145183     ; "^\tc #96B9E6"
.data:00000E14                 dd offset $SG145184     ; "/\tc #538EDB"
.data:00000E18                 dd offset $SG145185     ; "(\tc #99BBEA"
.data:00000E1C                 dd offset $SG145186     ; "_\tc #80AAE3"
.data:00000E20                 dd offset $SG145187     ; ":\tc #81ABE3"
.data:00000E24                 dd offset $SG145188     ; "<\tc #8AB1E4"
.data:00000E28                 dd offset $SG145189     ; "[\tc #4B88D6"
.data:00000E2C                 dd offset $SG145190     ; "}\tc #4882D1"
.data:00000E30                 dd offset $SG145191     ; "|\tc #4384D6"
.data:00000E34                 dd offset $SG145192     ; "1\tc #90B5E7"
.data:00000E38                 dd offset $SG145193     ; "2\tc #74A3E0"
.data:00000E3C                 dd offset $SG145194     ; "3\tc #77A4E0"
.data:00000E40                 dd offset $SG145195     ; "4\tc #81ABE2"
.data:00000E44                 dd offset $SG145196     ; "5\tc #437FD3"
.data:00000E48                 dd offset $SG145197     ; "6\tc #7FA2DF"
.data:00000E4C                 dd offset $SG145198     ; "7\tc #3577D2"
.data:00000E50                 dd offset $SG145199     ; "8\tc #87AFE4"
.data:00000E54                 dd offset $SG145200     ; "9\tc #72A1DF"
.data:00000E58                 dd offset $SG145201     ; "0\tc #7CA9E1"
.data:00000E5C                 dd offset $SG145202     ; "a\tc #3F7AD0"
.data:00000E60                 dd offset $SG145203     ; "b\tc #85A4DE"
.data:00000E64                 dd offset $SG145204     ; "c\tc #FBFCFE"
.data:00000E68                 dd offset $SG145205     ; "d\tc #236ECD"
.data:00000E6C                 dd offset $SG145206     ; "e\tc #7EA8E1"
.data:00000E70                 dd offset $SG145207     ; "f\tc #79A6E0"
.data:00000E74                 dd offset $SG145208     ; "g\tc #3D77D0"
.data:00000E78                 dd offset $SG145209     ; "h\tc #87A4DC"
.data:00000E7C                 dd offset $SG145210     ; "i\tc #1A62C9"
.data:00000E80                 dd offset $SG145211     ; "j\tc #75A3DF"
.data:00000E84                 dd offset $SG145212     ; "k\tc #3C74CF"
.data:00000E88                 dd offset $SG145213     ; "l\tc #8DA6DE"
.data:00000E8C                 dd offset $SG145214     ; "m\tc #1859C4"
.data:00000E90                 dd offset $SG145215     ; "n\tc #3B71CC"
.data:00000E94                 dd offset $SG145216     ; "o\tc #8EA5DD"
.data:00000E98                 dd offset $SG145217     ; "p\tc #164EC0"
.data:00000E9C                 dd offset $SG145218     ; "q\tc #92A7DD"
.data:00000EA0                 dd offset $SG145219     ; "    .+      "
.data:00000EA4                 dd offset $SG145220     ; "    @#$     "
.data:00000EA8                 dd offset $SG145221     ; "    %&*=    "
.data:00000EAC                 dd offset $SG145222     ; "    -;>,'   "
.data:00000EB0                 dd offset $SG145223     ; "    )!~{]^  "
.data:00000EB4                 dd offset $SG145224     ; "    /(_:<[} "
.data:00000EB8                 dd offset $SG145225     ; "    |123456 "
.data:00000EBC                 dd offset $SG145226     ; "    7890abc "
.data:00000EC0                 dd offset $SG145227     ; "    defgh   "
.data:00000EC4                 dd offset $SG145228     ; "    ijkl    "
.data:00000EC8                 dd offset $SG145229     ; "    mno     "
.data:00000ECC                 dd offset $SG145230     ; "    pq      "
.data:00000ED0                 db    0
.data:00000ED1                 db    0
.data:00000ED2                 db    0
.data:00000ED3                 db    0
.data:00000ED4 _acBottom_xpm   dd offset $SG145232     ; "12 12 54 1"
.data:00000ED8                 dd offset $SG145233     ; " \tc #FFFFFF"
.data:00000EDC                 dd offset $SG145234     ; ".\tc #C4D7F3"
.data:00000EE0                 dd offset $SG145235     ; "+\tc #72A1E3"
.data:00000EE4                 dd offset $SG145236     ; "@\tc #C1D6F2"
.data:00000EE8                 dd offset $SG145237     ; "#\tc #6397E1"
.data:00000EEC                 dd offset $SG145238     ; "$\tc #5990DD"
.data:00000EF0                 dd offset $SG145239     ; "%\tc #BBD2F0"
.data:00000EF4                 dd offset $SG145240     ; "&\tc #7AA6E5"
.data:00000EF8                 dd offset $SG145241     ; "*\tc #9ABDEA"
.data:00000EFC                 dd offset $SG145242     ; "=\tc #4A87D9"
.data:00000F00                 dd offset $SG145243     ; "-\tc #B1CAEE"
.data:00000F04                 dd offset $SG145244     ; ";\tc #75A4E3"
.data:00000F08                 dd offset $SG145245     ; ">\tc #99BBE9"
.data:00000F0C                 dd offset $SG145246     ; ",\tc #95B9E8"
.data:00000F10                 dd offset $SG145247     ; "'\tc #3A7CD4"
.data:00000F14                 dd offset $SG145248     ; ")\tc #A9C6EC"
.data:00000F18                 dd offset $SG145249     ; "!\tc #71A0E0"
.data:00000F1C                 dd offset $SG145250     ; "~\tc #86AFE5"
.data:00000F20                 dd offset $SG145251     ; "{\tc #8DB2E6"
.data:00000F24                 dd offset $SG145252     ; "]\tc #2A72CF"
.data:00000F28                 dd offset $SG145253     ; "^\tc #73A0E0"
.data:00000F2C                 dd offset $SG145254     ; "/\tc #6B9DE0"
.data:00000F30                 dd offset $SG145255     ; "(\tc #95B8E8"
.data:00000F34                 dd offset $SG145256     ; "_\tc #81ABE3"
.data:00000F38                 dd offset $SG145257     ; ":\tc #72A1DF"
.data:00000F3C                 dd offset $SG145258     ; "<\tc #83ADE3"
.data:00000F40                 dd offset $SG145259     ; "[\tc #1B65C9"
.data:00000F44                 dd offset $SG145260     ; "}\tc #5F95DC"
.data:00000F48                 dd offset $SG145261     ; "|\tc #8BB3E5"
.data:00000F4C                 dd offset $SG145262     ; "1\tc #77A4E0"
.data:00000F50                 dd offset $SG145263     ; "2\tc #679ADC"
.data:00000F54                 dd offset $SG145264     ; "3\tc #7AA6E1"
.data:00000F58                 dd offset $SG145265     ; "4\tc #195CC6"
.data:00000F5C                 dd offset $SG145266     ; "5\tc #FCFDFE"
.data:00000F60                 dd offset $SG145267     ; "6\tc #8DB2E4"
.data:00000F64                 dd offset $SG145268     ; "7\tc #4885D6"
.data:00000F68                 dd offset $SG145269     ; "8\tc #7CA9E1"
.data:00000F6C                 dd offset $SG145270     ; "9\tc #6698DB"
.data:00000F70                 dd offset $SG145271     ; "0\tc #71A1DE"
.data:00000F74                 dd offset $SG145272     ; "a\tc #1752C0"
.data:00000F78                 dd offset $SG145273     ; "b\tc #88ABE0"
.data:00000F7C                 dd offset $SG145274     ; "c\tc #3D77D0"
.data:00000F80                 dd offset $SG145275     ; "d\tc #6E9FDD"
.data:00000F84                 dd offset $SG145276     ; "e\tc #699BDC"
.data:00000F88                 dd offset $SG145277     ; "f\tc #1547BD"
.data:00000F8C                 dd offset $SG145278     ; "g\tc #8DA6DE"
.data:00000F90                 dd offset $SG145279     ; "h\tc #376BC9"
.data:00000F94                 dd offset $SG145280     ; "i\tc #6295DA"
.data:00000F98                 dd offset $SG145281     ; "j\tc #1440B9"
.data:00000F9C                 dd offset $SG145282     ; "k\tc #8DA0DB"
.data:00000FA0                 dd offset $SG145283     ; "l\tc #315FC4"
.data:00000FA4                 dd offset $SG145284     ; "m\tc #1339B7"
.data:00000FA8                 dd offset $SG145285     ; "n\tc #909FDA"
.data:00000FAC                 dd offset $SG145286     ; "o\tc #1233B4"
.data:00000FB0                 dd offset $SG145287     ; "         .+ "
.data:00000FB4                 dd offset $SG145288     ; "        @#$ "
.data:00000FB8                 dd offset $SG145289     ; "       %&*= L"
.data:00000FBC                 dd offset $SG145290     ; "      -;>,' "
.data:00000FC0                 dd offset $SG145291     ; "     )!>~{] "
.data:00000FC4                 dd offset $SG145292     ; "    ^/(_:<[ "
.data:00000FC8                 dd offset $SG145293     ; "    (}|1234 "
.data:00000FCC                 dd offset $SG145294     ; "    567890a "
.data:00000FD0                 dd offset $SG145295     ; "      bcdef "
.data:00000FD4                 dd offset $SG145296     ; "       ghij "
.data:00000FD8                 dd offset $SG145297     ; "        klm "
.data:00000FDC                 dd offset $SG145298     ; "         no "
.data:00000FE0                 db    0
.data:00000FE1                 db    0
.data:00000FE2                 db    0
.data:00000FE3                 db    0
.data:00000FE4 _bookmark_xpm   dd offset $SG145300     ; "13 14 54 1"
.data:00000FE8                 dd offset $SG145301     ; " \tc None"
.data:00000FEC                 dd offset $SG145302     ; ".\tc #545254"
.data:00000FF0                 dd offset $SG145303     ; "+\tc #3C3E3C"
.data:00000FF4                 dd offset $SG145304     ; "@\tc #646464"
.data:00000FF8                 dd offset $SG145305     ; "#\tc #A4A4A4"
.data:00000FFC                 dd offset $SG145306     ; "$\tc #B7B8B7"
.data:00001000                 dd offset $SG145307     ; "%\tc #747284"
.data:00001004                 dd offset $SG145308     ; "&\tc #B4B2C4"
.data:00001008                 dd offset $SG145309     ; "*\tc #DCD7E4"
.data:0000100C                 dd offset $SG145310     ; "=\tc #1C1A1C"
.data:00001010                 dd offset $SG145311     ; "-\tc #403E58"
.data:00001014                 dd offset $SG145312     ; ";\tc #5C5A8C"
.data:00001018                 dd offset $SG145313     ; ">\tc #7C7EAC"
.data:0000101C                 dd offset $SG145314     ; ",\tc #7C8EBC"
.data:00001020                 dd offset $SG145315     ; "'\tc #242644"
.data:00001024                 dd offset $SG145316     ; ")\tc #282668"
.data:00001028                 dd offset $SG145317     ; "!\tc #24367C"
.data:0000102C                 dd offset $SG145318     ; "~\tc #244A84"
.data:00001030                 dd offset $SG145319     ; "{\tc #2C5098"
.data:00001034                 dd offset $SG145320     ; "]\tc #14162C"
.data:00001038                 dd offset $SG145321     ; "^\tc #142E7C"
.data:0000103C                 dd offset $SG145322     ; "/\tc #143789"
.data:00001040                 dd offset $SG145323     ; "(\tc #204990"
.data:00001044                 dd offset $SG145324     ; "_\tc #174091"
.data:00001048                 dd offset $SG145325     ; ":\tc #0C0630"
.data:0000104C                 dd offset $SG145326     ; "<\tc #24327C"
.data:00001050                 dd offset $SG145327     ; "[\tc #2450A0"
.data:00001054                 dd offset $SG145328     ; "}\tc #345DB4"
.data:00001058                 dd offset $SG145329     ; "|\tc #3C68B8"
.data:0000105C                 dd offset $SG145330     ; "1\tc #141244"
.data:00001060                 dd offset $SG145331     ; "2\tc #24428C"
.data:00001064                 dd offset $SG145332     ; "3\tc #3462B9"
.data:00001068                 dd offset $SG145333     ; "4\tc #4470C4"
.data:0000106C                 dd offset $SG145334     ; "5\tc #4C7FD6"
.data:00001070                 dd offset $SG145335     ; "6\tc #4472CC"
.data:00001074                 dd offset $SG145336     ; "7\tc #24224C"
.data:00001078                 dd offset $SG145337     ; "8\tc #5C8DEC"
.data:0000107C                 dd offset $SG145338     ; "9\tc #5C94F6"
.data:00001080                 dd offset $SG145339     ; "0\tc #5482DF"
.data:00001084                 dd offset $SG145340     ; "a\tc #619DF7"
.data:00001088                 dd offset $SG145341     ; "b\tc #6CA6FC"
.data:0000108C                 dd offset $SG145342     ; "c\tc #64A2FC"
.data:00001090                 dd offset $SG145343     ; "d\tc #1C2E5C"
.data:00001094                 dd offset $SG145344     ; "e\tc #6CA2FC"
.data:00001098                 dd offset $SG145345     ; "f\tc #74B2FC"
.data:0000109C                 dd offset $SG145346     ; "g\tc #7CB8FC"
.data:000010A0                 dd offset $SG145347     ; "h\tc #1C3264"
.data:000010A4                 dd offset $SG145348     ; "i\tc #346AD4"
.data:000010A8                 dd offset $SG145349     ; "j\tc #7CBEFC"
.data:000010AC                 dd offset $SG145350     ; "k\tc #3C72DC"
.data:000010B0                 dd offset $SG145351     ; "l\tc #243250"
.data:000010B4                 dd offset $SG145352     ; "m\tc #346AB4"
.data:000010B8                 dd offset $SG145353     ; "n\tc #3C82DC"
.data:000010BC                 dd offset $SG145354     ; "o\tc #6C6A6C"
.data:000010C0                 dd offset $SG145355     ; "     .+.     "
.data:000010C4                 dd offset $SG145356     ; "   @##$##@   "
.data:000010C8                 dd offset $SG145357     ; "  @%&***&%@  "
.data:000010CC                 dd offset $SG145358     ; " =-;>,,,>;-= "
.data:000010D0                 dd offset $SG145359     ; " ')!~{{{~!)' "
.data:000010D4                 dd offset $SG145360     ; "])^/({{{(_^)]"
.data:000010D8                 dd offset $SG145361     ; ":<_[}|||}[_<:"
.data:000010DC                 dd offset $SG145362     ; "12[3455563[21"
.data:000010E0                 dd offset $SG145363     ; "7_365899063_7"
.data:000010E4                 dd offset $SG145364     ; " /|09abc904/ "
.data:000010E8                 dd offset $SG145365     ; " d}8efgfb83d "
.data:000010EC                 dd offset $SG145366     ; "  hiafjgakh  "
.data:000010F0                 dd offset $SG145367     ; "   l~mnm~l   "
.data:000010F4                 dd offset $SG145368     ; "     o@o     "
.data:000010F4 _data           ends
.data:000010F4
.text$mn:000010F8 ; ===========================================================================
.text$mn:000010F8
.text$mn:000010F8 ; Segment type: Pure code
.text$mn:000010F8 ; Segment permissions: Read/Execute
.text$mn:000010F8 _text$mn        segment para public 'CODE' use32
.text$mn:000010F8                 assume cs:_text$mn
.text$mn:000010F8                 ;org 10F8h
.text$mn:000010F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000010F8
.text$mn:000010F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000010F8
.text$mn:000010F8 ; Attributes: bp-based frame
.text$mn:000010F8
.text$mn:000010F8 ; public: void __thiscall FunctionParser::funcParse(class std::vector<struct foundInfo, class std::allocator<struct foundInfo>> &, unsigned int, unsigned int, class ScintillaEditView * *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>> const *)
.text$mn:000010F8                 public ?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z
.text$mn:000010F8 ?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z proc near
.text$mn:000010F8                                         ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+237p
.text$mn:000010F8                                         ; FunctionUnitParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+EAp ...
.text$mn:000010F8
.text$mn:000010F8 var_8C8         = dword ptr -8C8h
.text$mn:000010F8 var_8C4         = dword ptr -8C4h
.text$mn:000010F8 var_8C0         = dword ptr -8C0h
.text$mn:000010F8 var_8BC         = dword ptr -8BCh
.text$mn:000010F8 var_8B8         = dword ptr -8B8h
.text$mn:000010F8 var_8B4         = dword ptr -8B4h
.text$mn:000010F8 var_8B0         = dword ptr -8B0h
.text$mn:000010F8 var_8AC         = dword ptr -8ACh
.text$mn:000010F8 var_8A8         = dword ptr -8A8h
.text$mn:000010F8 var_8A4         = dword ptr -8A4h
.text$mn:000010F8 var_8A0         = dword ptr -8A0h
.text$mn:000010F8 var_89C         = dword ptr -89Ch
.text$mn:000010F8 var_898         = dword ptr -898h
.text$mn:000010F8 var_894         = dword ptr -894h
.text$mn:000010F8 var_890         = dword ptr -890h
.text$mn:000010F8 var_88C         = dword ptr -88Ch
.text$mn:000010F8 var_888         = byte ptr -888h
.text$mn:000010F8 var_86C         = byte ptr -86Ch
.text$mn:000010F8 var_850         = byte ptr -850h
.text$mn:000010F8 var_834         = byte ptr -834h
.text$mn:000010F8 var_818         = dword ptr -818h
.text$mn:000010F8 var_814         = dword ptr -814h
.text$mn:000010F8 Str             = word ptr -810h
.text$mn:000010F8 var_10          = dword ptr -10h
.text$mn:000010F8 var_C           = dword ptr -0Ch
.text$mn:000010F8 var_4           = dword ptr -4
.text$mn:000010F8 arg_0           = dword ptr  8
.text$mn:000010F8 arg_4           = dword ptr  0Ch
.text$mn:000010F8 arg_8           = dword ptr  10h
.text$mn:000010F8 arg_C           = dword ptr  14h
.text$mn:000010F8 arg_10          = dword ptr  18h
.text$mn:000010F8 arg_2C          = dword ptr  34h
.text$mn:000010F8
.text$mn:000010F8                 push    ebp
.text$mn:000010F9                 mov     ebp, esp
.text$mn:000010FB                 push    0FFFFFFFFh
.text$mn:000010FD                 push    offset __ehhandler$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z
.text$mn:00001102                 mov     eax, large fs:0
.text$mn:00001108                 push    eax
.text$mn:00001109                 sub     esp, 8BCh
.text$mn:0000110F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001114                 xor     eax, ebp
.text$mn:00001116                 mov     [ebp+var_10], eax
.text$mn:00001119                 push    eax
.text$mn:0000111A                 lea     eax, [ebp+var_C]
.text$mn:0000111D                 mov     large fs:0, eax
.text$mn:00001123                 mov     [ebp+var_88C], ecx
.text$mn:00001129                 mov     [ebp+var_4], 0
.text$mn:00001130                 mov     eax, [ebp+arg_4]
.text$mn:00001133                 cmp     eax, [ebp+arg_8]
.text$mn:00001136                 jb      short loc_114C
.text$mn:00001138                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000113F                 lea     ecx, [ebp+arg_10]
.text$mn:00001142                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001147                 jmp     loc_155C
.text$mn:0000114C ; ---------------------------------------------------------------------------
.text$mn:0000114C
.text$mn:0000114C loc_114C:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+3Ej
.text$mn:0000114C                 mov     ecx, [ebp+var_88C]
.text$mn:00001152                 add     ecx, 58h ; 'X'
.text$mn:00001155                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:0000115A                 test    eax, eax
.text$mn:0000115C                 jnz     short loc_1172
.text$mn:0000115E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001165                 lea     ecx, [ebp+arg_10]
.text$mn:00001168                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000116D                 jmp     loc_155C
.text$mn:00001172 ; ---------------------------------------------------------------------------
.text$mn:00001172
.text$mn:00001172 loc_1172:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+64j
.text$mn:00001172                 mov     [ebp+var_8B4], 10600000h
.text$mn:0000117C                 push    0               ; __int32
.text$mn:0000117E                 mov     ecx, [ebp+var_8B4]
.text$mn:00001184                 push    ecx             ; unsigned int
.text$mn:00001185                 push    896h            ; unsigned int
.text$mn:0000118A                 mov     edx, [ebp+arg_C]
.text$mn:0000118D                 mov     ecx, [edx]      ; this
.text$mn:0000118F                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001194                 mov     eax, [ebp+arg_8]
.text$mn:00001197                 push    eax             ; int
.text$mn:00001198                 mov     ecx, [ebp+arg_4]
.text$mn:0000119B                 push    ecx             ; int
.text$mn:0000119C                 mov     ecx, [ebp+var_88C]
.text$mn:000011A2                 add     ecx, 58h ; 'X'
.text$mn:000011A5                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000011AA                 push    eax             ; int
.text$mn:000011AB                 mov     ecx, [ebp+var_88C]
.text$mn:000011B1                 add     ecx, 58h ; 'X'
.text$mn:000011B4                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000011B9                 push    eax             ; wchar_t *
.text$mn:000011BA                 mov     edx, [ebp+arg_C]
.text$mn:000011BD                 mov     ecx, [edx]      ; this
.text$mn:000011BF                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:000011C4                 mov     [ebp+var_890], eax
.text$mn:000011CA                 mov     [ebp+var_894], 0
.text$mn:000011D4
.text$mn:000011D4 loc_11D4:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+450j
.text$mn:000011D4                 cmp     [ebp+var_890], 0FFFFFFFFh
.text$mn:000011DB                 jz      loc_154D
.text$mn:000011E1                 cmp     [ebp+var_890], 0FFFFFFFEh
.text$mn:000011E8                 jz      loc_154D
.text$mn:000011EE                 push    0               ; __int32
.text$mn:000011F0                 push    0               ; unsigned int
.text$mn:000011F2                 push    88Fh            ; unsigned int
.text$mn:000011F7                 mov     eax, [ebp+arg_C]
.text$mn:000011FA                 mov     ecx, [eax]      ; this
.text$mn:000011FC                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001201                 mov     [ebp+var_890], eax
.text$mn:00001207                 push    0               ; __int32
.text$mn:00001209                 push    0               ; unsigned int
.text$mn:0000120B                 push    891h            ; unsigned int
.text$mn:00001210                 mov     ecx, [ebp+arg_C]
.text$mn:00001213                 mov     ecx, [ecx]      ; this
.text$mn:00001215                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000121A                 mov     [ebp+var_894], eax
.text$mn:00001220                 mov     edx, [ebp+var_894]
.text$mn:00001226                 cmp     edx, [ebp+arg_8]
.text$mn:00001229                 jle     short loc_1230
.text$mn:0000122B                 jmp     loc_154D
.text$mn:00001230 ; ---------------------------------------------------------------------------
.text$mn:00001230
.text$mn:00001230 loc_1230:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+131j
.text$mn:00001230                 mov     eax, [ebp+var_894]
.text$mn:00001236                 sub     eax, [ebp+var_890]
.text$mn:0000123C                 mov     [ebp+var_89C], eax
.text$mn:00001242                 mov     ecx, [ebp+var_890]
.text$mn:00001248                 add     ecx, [ebp+var_89C]
.text$mn:0000124E                 cmp     ecx, [ebp+arg_8]
.text$mn:00001251                 jnz     short loc_1258
.text$mn:00001253                 jmp     loc_154D
.text$mn:00001258 ; ---------------------------------------------------------------------------
.text$mn:00001258
.text$mn:00001258 loc_1258:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+159j
.text$mn:00001258                 lea     ecx, [ebp+var_850]
.text$mn:0000125E                 call    ??0foundInfo@@QAE@XZ ; foundInfo::foundInfo(void)
.text$mn:00001263                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001267                 mov     ecx, [ebp+var_88C]
.text$mn:0000126D                 add     ecx, 74h ; 't'
.text$mn:00001270                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00001275                 test    eax, eax
.text$mn:00001277                 jnz     short loc_12D5
.text$mn:00001279                 mov     ecx, [ebp+var_88C]
.text$mn:0000127F                 add     ecx, 84h ; 'ä'
.text$mn:00001285                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000128A                 test    eax, eax
.text$mn:0000128C                 jnz     short loc_12D5
.text$mn:0000128E                 mov     edx, [ebp+var_894]
.text$mn:00001294                 push    edx             ; int
.text$mn:00001295                 mov     eax, [ebp+var_890]
.text$mn:0000129B                 push    eax             ; int
.text$mn:0000129C                 push    400h            ; unsigned int
.text$mn:000012A1                 lea     ecx, [ebp+Str]
.text$mn:000012A7                 push    ecx             ; wchar_t *
.text$mn:000012A8                 mov     edx, [ebp+arg_C]
.text$mn:000012AB                 mov     ecx, [edx]      ; this
.text$mn:000012AD                 call    ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText(wchar_t *,uint,int,int)
.text$mn:000012B2                 lea     eax, [ebp+Str]
.text$mn:000012B8                 push    eax             ; Str
.text$mn:000012B9                 lea     ecx, [ebp+var_850]
.text$mn:000012BF                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000012C4                 mov     ecx, [ebp+var_890]
.text$mn:000012CA                 mov     [ebp+var_818], ecx
.text$mn:000012D0                 jmp     loc_1482
.text$mn:000012D5 ; ---------------------------------------------------------------------------
.text$mn:000012D5
.text$mn:000012D5 loc_12D5:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+17Fj
.text$mn:000012D5                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+194j
.text$mn:000012D5                 mov     ecx, [ebp+var_88C]
.text$mn:000012DB                 add     ecx, 74h ; 't'
.text$mn:000012DE                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000012E3                 test    eax, eax
.text$mn:000012E5                 jz      loc_138F
.text$mn:000012EB                 mov     edx, [ebp+arg_C]
.text$mn:000012EE                 push    edx
.text$mn:000012EF                 lea     eax, [ebp+var_898]
.text$mn:000012F5                 push    eax
.text$mn:000012F6                 mov     ecx, [ebp+var_88C]
.text$mn:000012FC                 add     ecx, 74h ; 't'
.text$mn:000012FF                 sub     esp, 10h
.text$mn:00001302                 mov     edx, esp
.text$mn:00001304                 mov     [ebp+var_8C4], esp
.text$mn:0000130A                 push    ecx
.text$mn:0000130B                 mov     ecx, edx
.text$mn:0000130D                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00001312                 mov     [ebp+var_8A8], eax
.text$mn:00001318                 mov     eax, [ebp+var_8A8]
.text$mn:0000131E                 mov     [ebp+var_8C8], eax
.text$mn:00001324                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001328                 mov     ecx, [ebp+var_894]
.text$mn:0000132E                 push    ecx
.text$mn:0000132F                 mov     edx, [ebp+var_890]
.text$mn:00001335                 push    edx
.text$mn:00001336                 lea     eax, [ebp+var_888]
.text$mn:0000133C                 push    eax
.text$mn:0000133D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001341                 mov     ecx, [ebp+var_88C]
.text$mn:00001347                 call    ?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)
.text$mn:0000134C                 mov     [ebp+var_8B0], eax
.text$mn:00001352                 mov     ecx, [ebp+var_8B0]
.text$mn:00001358                 mov     [ebp+var_8B8], ecx
.text$mn:0000135E                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001362                 mov     edx, [ebp+var_8B8]
.text$mn:00001368                 push    edx
.text$mn:00001369                 lea     ecx, [ebp+var_850]
.text$mn:0000136F                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001374                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001378                 lea     ecx, [ebp+var_888]
.text$mn:0000137E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001383                 mov     eax, [ebp+var_898]
.text$mn:00001389                 mov     [ebp+var_818], eax
.text$mn:0000138F
.text$mn:0000138F loc_138F:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+1EDj
.text$mn:0000138F                 push    offset $SG155321 ; Str
.text$mn:00001394                 lea     ecx, [ebp+arg_10]
.text$mn:00001397                 push    ecx             ; int
.text$mn:00001398                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:0000139D                 add     esp, 8
.text$mn:000013A0                 movzx   edx, al
.text$mn:000013A3                 test    edx, edx
.text$mn:000013A5                 jz      short loc_13C5
.text$mn:000013A7                 lea     eax, [ebp+arg_10]
.text$mn:000013AA                 push    eax
.text$mn:000013AB                 lea     ecx, [ebp+var_834]
.text$mn:000013B1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000013B6                 mov     [ebp+var_814], 0FFFFFFFFh
.text$mn:000013C0                 jmp     loc_1482
.text$mn:000013C5 ; ---------------------------------------------------------------------------
.text$mn:000013C5
.text$mn:000013C5 loc_13C5:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+2ADj
.text$mn:000013C5                 mov     ecx, [ebp+var_88C]
.text$mn:000013CB                 add     ecx, 84h ; 'ä'
.text$mn:000013D1                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000013D6                 test    eax, eax
.text$mn:000013D8                 jz      loc_1482
.text$mn:000013DE                 mov     ecx, [ebp+arg_C]
.text$mn:000013E1                 push    ecx
.text$mn:000013E2                 lea     edx, [ebp+var_898]
.text$mn:000013E8                 push    edx
.text$mn:000013E9                 mov     eax, [ebp+var_88C]
.text$mn:000013EF                 add     eax, 84h ; 'ä'
.text$mn:000013F4                 sub     esp, 10h
.text$mn:000013F7                 mov     ecx, esp
.text$mn:000013F9                 mov     [ebp+var_8BC], esp
.text$mn:000013FF                 push    eax
.text$mn:00001400                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00001405                 mov     [ebp+var_8A0], eax
.text$mn:0000140B                 mov     ecx, [ebp+var_8A0]
.text$mn:00001411                 mov     [ebp+var_8C0], ecx
.text$mn:00001417                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000141B                 mov     edx, [ebp+var_894]
.text$mn:00001421                 push    edx
.text$mn:00001422                 mov     eax, [ebp+var_890]
.text$mn:00001428                 push    eax
.text$mn:00001429                 lea     ecx, [ebp+var_86C]
.text$mn:0000142F                 push    ecx
.text$mn:00001430                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001434                 mov     ecx, [ebp+var_88C]
.text$mn:0000143A                 call    ?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)
.text$mn:0000143F                 mov     [ebp+var_8A4], eax
.text$mn:00001445                 mov     edx, [ebp+var_8A4]
.text$mn:0000144B                 mov     [ebp+var_8AC], edx
.text$mn:00001451                 mov     byte ptr [ebp+var_4], 5
.text$mn:00001455                 mov     eax, [ebp+var_8AC]
.text$mn:0000145B                 push    eax
.text$mn:0000145C                 lea     ecx, [ebp+var_834]
.text$mn:00001462                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001467                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000146B                 lea     ecx, [ebp+var_86C]
.text$mn:00001471                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001476                 mov     ecx, [ebp+var_898]
.text$mn:0000147C                 mov     [ebp+var_814], ecx
.text$mn:00001482
.text$mn:00001482 loc_1482:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+1D8j
.text$mn:00001482                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+2C8j ...
.text$mn:00001482                 cmp     [ebp+var_818], 0FFFFFFFFh
.text$mn:00001489                 jnz     short loc_1494
.text$mn:0000148B                 cmp     [ebp+var_814], 0FFFFFFFFh
.text$mn:00001492                 jz      short loc_14F4
.text$mn:00001494
.text$mn:00001494 loc_1494:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+391j
.text$mn:00001494                 cmp     [ebp+arg_2C], 0
.text$mn:00001498                 jz      short loc_14E5
.text$mn:0000149A                 mov     edx, [ebp+arg_2C]
.text$mn:0000149D                 push    edx
.text$mn:0000149E                 mov     eax, [ebp+var_818]
.text$mn:000014A4                 push    eax
.text$mn:000014A5                 mov     ecx, [ebp+var_88C]
.text$mn:000014AB                 call    ?isInZones@FunctionParser@@QAE_NHABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@Z ; FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)
.text$mn:000014B0                 movzx   ecx, al
.text$mn:000014B3                 test    ecx, ecx
.text$mn:000014B5                 jnz     short loc_14E3
.text$mn:000014B7                 mov     edx, [ebp+arg_2C]
.text$mn:000014BA                 push    edx
.text$mn:000014BB                 mov     eax, [ebp+var_814]
.text$mn:000014C1                 push    eax
.text$mn:000014C2                 mov     ecx, [ebp+var_88C]
.text$mn:000014C8                 call    ?isInZones@FunctionParser@@QAE_NHABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@Z ; FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)
.text$mn:000014CD                 movzx   ecx, al
.text$mn:000014D0                 test    ecx, ecx
.text$mn:000014D2                 jnz     short loc_14E3
.text$mn:000014D4                 lea     edx, [ebp+var_850]
.text$mn:000014DA                 push    edx
.text$mn:000014DB                 mov     ecx, [ebp+arg_0]
.text$mn:000014DE                 call    ?push_back@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEXABUfoundInfo@@@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)
.text$mn:000014E3
.text$mn:000014E3 loc_14E3:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+3BDj
.text$mn:000014E3                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+3DAj
.text$mn:000014E3                 jmp     short loc_14F4
.text$mn:000014E5 ; ---------------------------------------------------------------------------
.text$mn:000014E5
.text$mn:000014E5 loc_14E5:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+3A0j
.text$mn:000014E5                 lea     eax, [ebp+var_850]
.text$mn:000014EB                 push    eax
.text$mn:000014EC                 mov     ecx, [ebp+arg_0]
.text$mn:000014EF                 call    ?push_back@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEXABUfoundInfo@@@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)
.text$mn:000014F4
.text$mn:000014F4 loc_14F4:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+39Aj
.text$mn:000014F4                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *):loc_14E3j
.text$mn:000014F4                 mov     ecx, [ebp+var_890]
.text$mn:000014FA                 add     ecx, [ebp+var_89C]
.text$mn:00001500                 mov     [ebp+arg_4], ecx
.text$mn:00001503                 mov     edx, [ebp+arg_8]
.text$mn:00001506                 push    edx             ; int
.text$mn:00001507                 mov     eax, [ebp+arg_4]
.text$mn:0000150A                 push    eax             ; int
.text$mn:0000150B                 mov     ecx, [ebp+var_88C]
.text$mn:00001511                 add     ecx, 58h ; 'X'
.text$mn:00001514                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001519                 push    eax             ; int
.text$mn:0000151A                 mov     ecx, [ebp+var_88C]
.text$mn:00001520                 add     ecx, 58h ; 'X'
.text$mn:00001523                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001528                 push    eax             ; wchar_t *
.text$mn:00001529                 mov     ecx, [ebp+arg_C]
.text$mn:0000152C                 mov     ecx, [ecx]      ; this
.text$mn:0000152E                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00001533                 mov     [ebp+var_890], eax
.text$mn:00001539                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000153D                 lea     ecx, [ebp+var_850] ; this
.text$mn:00001543                 call    ??1foundInfo@@QAE@XZ ; foundInfo::~foundInfo(void)
.text$mn:00001548                 jmp     loc_11D4
.text$mn:0000154D ; ---------------------------------------------------------------------------
.text$mn:0000154D
.text$mn:0000154D loc_154D:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+E3j
.text$mn:0000154D                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+F0j ...
.text$mn:0000154D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001554                 lea     ecx, [ebp+arg_10]
.text$mn:00001557                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000155C
.text$mn:0000155C loc_155C:                               ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+4Fj
.text$mn:0000155C                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+75j
.text$mn:0000155C                 mov     ecx, [ebp+var_C]
.text$mn:0000155F                 mov     large fs:0, ecx
.text$mn:00001566                 pop     ecx
.text$mn:00001567                 mov     ecx, [ebp+var_10]
.text$mn:0000156A                 xor     ecx, ebp
.text$mn:0000156C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001571                 mov     esp, ebp
.text$mn:00001573                 pop     ebp
.text$mn:00001574                 retn    30h
.text$mn:00001574 ?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z endp
.text$mn:00001574
.text$mn:00001574 ; ---------------------------------------------------------------------------
.text$mn:00001577                 align 4
.text$mn:00001578
.text$mn:00001578 ; =============== S U B R O U T I N E =======================================
.text$mn:00001578
.text$mn:00001578 ; Attributes: bp-based frame
.text$mn:00001578
.text$mn:00001578 ; public: bool __thiscall FunctionParser::isInZones(int, class std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>> const &)
.text$mn:00001578                 public ?isInZones@FunctionParser@@QAE_NHABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@Z
.text$mn:00001578 ?isInZones@FunctionParser@@QAE_NHABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@Z proc near
.text$mn:00001578                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+3B3p
.text$mn:00001578                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+3D0p ...
.text$mn:00001578
.text$mn:00001578 var_C           = dword ptr -0Ch
.text$mn:00001578 var_8           = dword ptr -8
.text$mn:00001578 var_4           = dword ptr -4
.text$mn:00001578 arg_0           = dword ptr  8
.text$mn:00001578 arg_4           = dword ptr  0Ch
.text$mn:00001578
.text$mn:00001578                 push    ebp
.text$mn:00001579                 mov     ebp, esp
.text$mn:0000157B                 sub     esp, 0Ch
.text$mn:0000157E                 mov     [ebp+var_C], ecx
.text$mn:00001581                 mov     [ebp+var_4], 0
.text$mn:00001588                 mov     ecx, [ebp+arg_4]
.text$mn:0000158B                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:00001590                 mov     [ebp+var_8], eax
.text$mn:00001593                 jmp     short loc_159E
.text$mn:00001595 ; ---------------------------------------------------------------------------
.text$mn:00001595
.text$mn:00001595 loc_1595:                               ; CODE XREF: FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &):loc_15D1j
.text$mn:00001595                 mov     eax, [ebp+var_4]
.text$mn:00001598                 add     eax, 1
.text$mn:0000159B                 mov     [ebp+var_4], eax
.text$mn:0000159E
.text$mn:0000159E loc_159E:                               ; CODE XREF: FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)+1Bj
.text$mn:0000159E                 mov     ecx, [ebp+var_4]
.text$mn:000015A1                 cmp     ecx, [ebp+var_8]
.text$mn:000015A4                 jnb     short loc_15D3
.text$mn:000015A6                 mov     edx, [ebp+var_4]
.text$mn:000015A9                 push    edx
.text$mn:000015AA                 mov     ecx, [ebp+arg_4]
.text$mn:000015AD                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEABU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:000015B2                 mov     ecx, [ebp+arg_0]
.text$mn:000015B5                 cmp     ecx, [eax]
.text$mn:000015B7                 jl      short loc_15D1
.text$mn:000015B9                 mov     edx, [ebp+var_4]
.text$mn:000015BC                 push    edx
.text$mn:000015BD                 mov     ecx, [ebp+arg_4]
.text$mn:000015C0                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEABU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:000015C5                 mov     ecx, [ebp+arg_0]
.text$mn:000015C8                 cmp     ecx, [eax+4]
.text$mn:000015CB                 jge     short loc_15D1
.text$mn:000015CD                 mov     al, 1
.text$mn:000015CF                 jmp     short loc_15D5
.text$mn:000015D1 ; ---------------------------------------------------------------------------
.text$mn:000015D1
.text$mn:000015D1 loc_15D1:                               ; CODE XREF: FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)+3Fj
.text$mn:000015D1                                         ; FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)+53j
.text$mn:000015D1                 jmp     short loc_1595
.text$mn:000015D3 ; ---------------------------------------------------------------------------
.text$mn:000015D3
.text$mn:000015D3 loc_15D3:                               ; CODE XREF: FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)+2Cj
.text$mn:000015D3                 xor     al, al
.text$mn:000015D5
.text$mn:000015D5 loc_15D5:                               ; CODE XREF: FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)+57j
.text$mn:000015D5                 mov     esp, ebp
.text$mn:000015D7                 pop     ebp
.text$mn:000015D8                 retn    8
.text$mn:000015D8 ?isInZones@FunctionParser@@QAE_NHABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@Z endp
.text$mn:000015D8
.text$mn:000015D8 ; ---------------------------------------------------------------------------
.text$mn:000015DB                 db 0Dh dup(0CCh)
.text$mn:000015E8
.text$mn:000015E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000015E8
.text$mn:000015E8 ; Attributes: bp-based frame
.text$mn:000015E8
.text$mn:000015E8 ; protected: void __thiscall FunctionParser::getCommentZones(class std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>> &, unsigned int, unsigned int, class ScintillaEditView * *)
.text$mn:000015E8                 public ?getCommentZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IIPAPAVScintillaEditView@@@Z
.text$mn:000015E8 ?getCommentZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IIPAPAVScintillaEditView@@@Z proc near
.text$mn:000015E8                                         ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+66p
.text$mn:000015E8                                         ; FunctionUnitParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5Ap ...
.text$mn:000015E8
.text$mn:000015E8 var_1C          = byte ptr -1Ch
.text$mn:000015E8 var_14          = dword ptr -14h
.text$mn:000015E8 var_10          = dword ptr -10h
.text$mn:000015E8 var_C           = dword ptr -0Ch
.text$mn:000015E8 var_8           = dword ptr -8
.text$mn:000015E8 var_4           = dword ptr -4
.text$mn:000015E8 arg_0           = dword ptr  8
.text$mn:000015E8 arg_4           = dword ptr  0Ch
.text$mn:000015E8 arg_8           = dword ptr  10h
.text$mn:000015E8 arg_C           = dword ptr  14h
.text$mn:000015E8
.text$mn:000015E8                 push    ebp
.text$mn:000015E9                 mov     ebp, esp
.text$mn:000015EB                 sub     esp, 1Ch
.text$mn:000015EE                 mov     [ebp+var_8], ecx
.text$mn:000015F1                 mov     eax, [ebp+arg_4]
.text$mn:000015F4                 cmp     eax, [ebp+arg_8]
.text$mn:000015F7                 jnb     short loc_1614
.text$mn:000015F9                 push    offset $SG157235 ; Str
.text$mn:000015FE                 mov     ecx, [ebp+var_8]
.text$mn:00001601                 add     ecx, 3Ch ; '<'
.text$mn:00001604                 push    ecx             ; int
.text$mn:00001605                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:0000160A                 add     esp, 8
.text$mn:0000160D                 movzx   edx, al
.text$mn:00001610                 test    edx, edx
.text$mn:00001612                 jz      short loc_1619
.text$mn:00001614
.text$mn:00001614 loc_1614:                               ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+Fj
.text$mn:00001614                 jmp     loc_171D
.text$mn:00001619 ; ---------------------------------------------------------------------------
.text$mn:00001619
.text$mn:00001619 loc_1619:                               ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+2Aj
.text$mn:00001619                 mov     [ebp+var_14], 10600000h
.text$mn:00001620                 push    0               ; __int32
.text$mn:00001622                 mov     eax, [ebp+var_14]
.text$mn:00001625                 push    eax             ; unsigned int
.text$mn:00001626                 push    896h            ; unsigned int
.text$mn:0000162B                 mov     ecx, [ebp+arg_C]
.text$mn:0000162E                 mov     ecx, [ecx]      ; this
.text$mn:00001630                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001635                 mov     edx, [ebp+arg_8]
.text$mn:00001638                 push    edx             ; int
.text$mn:00001639                 mov     eax, [ebp+arg_4]
.text$mn:0000163C                 push    eax             ; int
.text$mn:0000163D                 mov     ecx, [ebp+var_8]
.text$mn:00001640                 add     ecx, 3Ch ; '<'
.text$mn:00001643                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001648                 push    eax             ; int
.text$mn:00001649                 mov     ecx, [ebp+var_8]
.text$mn:0000164C                 add     ecx, 3Ch ; '<'
.text$mn:0000164F                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001654                 push    eax             ; wchar_t *
.text$mn:00001655                 mov     ecx, [ebp+arg_C]
.text$mn:00001658                 mov     ecx, [ecx]      ; this
.text$mn:0000165A                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:0000165F                 mov     [ebp+var_4], eax
.text$mn:00001662                 mov     [ebp+var_C], 0
.text$mn:00001669
.text$mn:00001669 loc_1669:                               ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+130j
.text$mn:00001669                 cmp     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000166D                 jz      loc_171D
.text$mn:00001673                 cmp     [ebp+var_4], 0FFFFFFFEh
.text$mn:00001677                 jz      loc_171D
.text$mn:0000167D                 push    0               ; __int32
.text$mn:0000167F                 push    0               ; unsigned int
.text$mn:00001681                 push    88Fh            ; unsigned int
.text$mn:00001686                 mov     edx, [ebp+arg_C]
.text$mn:00001689                 mov     ecx, [edx]      ; this
.text$mn:0000168B                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001690                 mov     [ebp+var_4], eax
.text$mn:00001693                 push    0               ; __int32
.text$mn:00001695                 push    0               ; unsigned int
.text$mn:00001697                 push    891h            ; unsigned int
.text$mn:0000169C                 mov     eax, [ebp+arg_C]
.text$mn:0000169F                 mov     ecx, [eax]      ; this
.text$mn:000016A1                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:000016A6                 mov     [ebp+var_C], eax
.text$mn:000016A9                 mov     ecx, [ebp+var_C]
.text$mn:000016AC                 cmp     ecx, [ebp+arg_8]
.text$mn:000016AF                 jle     short loc_16B3
.text$mn:000016B1                 jmp     short loc_171D
.text$mn:000016B3 ; ---------------------------------------------------------------------------
.text$mn:000016B3
.text$mn:000016B3 loc_16B3:                               ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+C7j
.text$mn:000016B3                 lea     edx, [ebp+var_C]
.text$mn:000016B6                 push    edx
.text$mn:000016B7                 lea     eax, [ebp+var_4]
.text$mn:000016BA                 push    eax
.text$mn:000016BB                 lea     ecx, [ebp+var_1C]
.text$mn:000016BE                 call    ??$?0AAHAAHX@?$pair@HH@std@@QAE@AAH0@Z ; std::pair<int,int>::pair<int,int>(int &,int &)
.text$mn:000016C3                 push    eax
.text$mn:000016C4                 mov     ecx, [ebp+arg_0]
.text$mn:000016C7                 call    ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)
.text$mn:000016CC                 mov     ecx, [ebp+var_C]
.text$mn:000016CF                 sub     ecx, [ebp+var_4]
.text$mn:000016D2                 mov     [ebp+var_10], ecx
.text$mn:000016D5                 mov     edx, [ebp+var_4]
.text$mn:000016D8                 add     edx, [ebp+var_10]
.text$mn:000016DB                 cmp     edx, [ebp+arg_8]
.text$mn:000016DE                 jnz     short loc_16E2
.text$mn:000016E0                 jmp     short loc_171D
.text$mn:000016E2 ; ---------------------------------------------------------------------------
.text$mn:000016E2
.text$mn:000016E2 loc_16E2:                               ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+F6j
.text$mn:000016E2                 mov     eax, [ebp+var_4]
.text$mn:000016E5                 add     eax, [ebp+var_10]
.text$mn:000016E8                 mov     [ebp+arg_4], eax
.text$mn:000016EB                 mov     ecx, [ebp+arg_8]
.text$mn:000016EE                 push    ecx             ; int
.text$mn:000016EF                 mov     edx, [ebp+arg_4]
.text$mn:000016F2                 push    edx             ; int
.text$mn:000016F3                 mov     ecx, [ebp+var_8]
.text$mn:000016F6                 add     ecx, 3Ch ; '<'
.text$mn:000016F9                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000016FE                 push    eax             ; int
.text$mn:000016FF                 mov     ecx, [ebp+var_8]
.text$mn:00001702                 add     ecx, 3Ch ; '<'
.text$mn:00001705                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000170A                 push    eax             ; wchar_t *
.text$mn:0000170B                 mov     eax, [ebp+arg_C]
.text$mn:0000170E                 mov     ecx, [eax]      ; this
.text$mn:00001710                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00001715                 mov     [ebp+var_4], eax
.text$mn:00001718                 jmp     loc_1669
.text$mn:0000171D ; ---------------------------------------------------------------------------
.text$mn:0000171D
.text$mn:0000171D loc_171D:                               ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *):loc_1614j
.text$mn:0000171D                                         ; FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+85j ...
.text$mn:0000171D                 mov     esp, ebp
.text$mn:0000171F                 pop     ebp
.text$mn:00001720                 retn    10h
.text$mn:00001720 ?getCommentZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IIPAPAVScintillaEditView@@@Z endp
.text$mn:00001720
.text$mn:00001720 ; ---------------------------------------------------------------------------
.text$mn:00001723                 align 8
.text$mn:00001728
.text$mn:00001728 ; =============== S U B R O U T I N E =======================================
.text$mn:00001728
.text$mn:00001728 ; Attributes: bp-based frame
.text$mn:00001728
.text$mn:00001728 ; protected: void __thiscall FunctionParser::getInvertZones(class std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>> &, class std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>> &, unsigned int, unsigned int)
.text$mn:00001728                 public ?getInvertZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@0II@Z
.text$mn:00001728 ?getInvertZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@0II@Z proc near
.text$mn:00001728                                         ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+7Ep
.text$mn:00001728                                         ; FunctionUnitParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+72p ...
.text$mn:00001728
.text$mn:00001728 var_3C          = byte ptr -3Ch
.text$mn:00001728 var_34          = byte ptr -34h
.text$mn:00001728 var_2C          = byte ptr -2Ch
.text$mn:00001728 var_24          = byte ptr -24h
.text$mn:00001728 var_1C          = dword ptr -1Ch
.text$mn:00001728 var_18          = dword ptr -18h
.text$mn:00001728 var_14          = dword ptr -14h
.text$mn:00001728 var_10          = dword ptr -10h
.text$mn:00001728 var_C           = dword ptr -0Ch
.text$mn:00001728 var_8           = dword ptr -8
.text$mn:00001728 var_4           = dword ptr -4
.text$mn:00001728 arg_0           = dword ptr  8
.text$mn:00001728 arg_4           = dword ptr  0Ch
.text$mn:00001728 arg_8           = dword ptr  10h
.text$mn:00001728 arg_C           = dword ptr  14h
.text$mn:00001728
.text$mn:00001728                 push    ebp
.text$mn:00001729                 mov     ebp, esp
.text$mn:0000172B                 sub     esp, 3Ch
.text$mn:0000172E                 mov     [ebp+var_1C], ecx
.text$mn:00001731                 mov     ecx, [ebp+arg_4]
.text$mn:00001734                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:00001739                 test    eax, eax
.text$mn:0000173B                 jnz     short loc_175B
.text$mn:0000173D                 lea     eax, [ebp+arg_C]
.text$mn:00001740                 push    eax
.text$mn:00001741                 lea     ecx, [ebp+arg_8]
.text$mn:00001744                 push    ecx
.text$mn:00001745                 lea     ecx, [ebp+var_24]
.text$mn:00001748                 call    ??$?0AAIAAIX@?$pair@HH@std@@QAE@AAI0@Z ; std::pair<int,int>::pair<int,int>(uint &,uint &)
.text$mn:0000174D                 push    eax
.text$mn:0000174E                 mov     ecx, [ebp+arg_0]
.text$mn:00001751                 call    ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)
.text$mn:00001756                 jmp     loc_1844
.text$mn:0000175B ; ---------------------------------------------------------------------------
.text$mn:0000175B
.text$mn:0000175B loc_175B:                               ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+13j
.text$mn:0000175B                 push    0
.text$mn:0000175D                 mov     ecx, [ebp+arg_4]
.text$mn:00001760                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00001765                 mov     edx, [ebp+arg_8]
.text$mn:00001768                 cmp     edx, [eax]
.text$mn:0000176A                 jge     short loc_1797
.text$mn:0000176C                 push    0
.text$mn:0000176E                 mov     ecx, [ebp+arg_4]
.text$mn:00001771                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00001776                 mov     eax, [eax]
.text$mn:00001778                 sub     eax, 1
.text$mn:0000177B                 mov     [ebp+var_14], eax
.text$mn:0000177E                 lea     ecx, [ebp+var_14]
.text$mn:00001781                 push    ecx
.text$mn:00001782                 lea     edx, [ebp+arg_8]
.text$mn:00001785                 push    edx
.text$mn:00001786                 lea     ecx, [ebp+var_2C]
.text$mn:00001789                 call    ??$?0AAIHX@?$pair@HH@std@@QAE@AAI$$QAH@Z ; std::pair<int,int>::pair<int,int>(uint &,int &&)
.text$mn:0000178E                 push    eax
.text$mn:0000178F                 mov     ecx, [ebp+arg_0]
.text$mn:00001792                 call    ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)
.text$mn:00001797
.text$mn:00001797 loc_1797:                               ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+42j
.text$mn:00001797                 mov     [ebp+var_4], 0
.text$mn:0000179E                 mov     ecx, [ebp+arg_4]
.text$mn:000017A1                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:000017A6                 sub     eax, 1
.text$mn:000017A9                 mov     [ebp+var_18], eax
.text$mn:000017AC                 jmp     short loc_17B7
.text$mn:000017AE ; ---------------------------------------------------------------------------
.text$mn:000017AE
.text$mn:000017AE loc_17AE:                               ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint):loc_180Cj
.text$mn:000017AE                 mov     eax, [ebp+var_4]
.text$mn:000017B1                 add     eax, 1
.text$mn:000017B4                 mov     [ebp+var_4], eax
.text$mn:000017B7
.text$mn:000017B7 loc_17B7:                               ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+84j
.text$mn:000017B7                 mov     ecx, [ebp+var_4]
.text$mn:000017BA                 cmp     ecx, [ebp+var_18]
.text$mn:000017BD                 jnb     short loc_180E
.text$mn:000017BF                 mov     edx, [ebp+var_4]
.text$mn:000017C2                 push    edx
.text$mn:000017C3                 mov     ecx, [ebp+arg_4]
.text$mn:000017C6                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:000017CB                 mov     eax, [eax+4]
.text$mn:000017CE                 add     eax, 1
.text$mn:000017D1                 mov     [ebp+var_C], eax
.text$mn:000017D4                 mov     ecx, [ebp+var_4]
.text$mn:000017D7                 add     ecx, 1
.text$mn:000017DA                 push    ecx
.text$mn:000017DB                 mov     ecx, [ebp+arg_4]
.text$mn:000017DE                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:000017E3                 mov     edx, [eax]
.text$mn:000017E5                 sub     edx, 1
.text$mn:000017E8                 mov     [ebp+var_8], edx
.text$mn:000017EB                 mov     eax, [ebp+var_C]
.text$mn:000017EE                 cmp     eax, [ebp+var_8]
.text$mn:000017F1                 jge     short loc_180C
.text$mn:000017F3                 lea     ecx, [ebp+var_8]
.text$mn:000017F6                 push    ecx
.text$mn:000017F7                 lea     edx, [ebp+var_C]
.text$mn:000017FA                 push    edx
.text$mn:000017FB                 lea     ecx, [ebp+var_34]
.text$mn:000017FE                 call    ??$?0AAHAAHX@?$pair@HH@std@@QAE@AAH0@Z ; std::pair<int,int>::pair<int,int>(int &,int &)
.text$mn:00001803                 push    eax
.text$mn:00001804                 mov     ecx, [ebp+arg_0]
.text$mn:00001807                 call    ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)
.text$mn:0000180C
.text$mn:0000180C loc_180C:                               ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+C9j
.text$mn:0000180C                 jmp     short loc_17AE
.text$mn:0000180E ; ---------------------------------------------------------------------------
.text$mn:0000180E
.text$mn:0000180E loc_180E:                               ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+95j
.text$mn:0000180E                 mov     eax, [ebp+var_4]
.text$mn:00001811                 push    eax
.text$mn:00001812                 mov     ecx, [ebp+arg_4]
.text$mn:00001815                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:0000181A                 mov     ecx, [eax+4]
.text$mn:0000181D                 add     ecx, 1
.text$mn:00001820                 mov     [ebp+var_10], ecx
.text$mn:00001823                 mov     edx, [ebp+var_10]
.text$mn:00001826                 cmp     edx, [ebp+arg_C]
.text$mn:00001829                 jge     short loc_1844
.text$mn:0000182B                 lea     eax, [ebp+arg_C]
.text$mn:0000182E                 push    eax
.text$mn:0000182F                 lea     ecx, [ebp+var_10]
.text$mn:00001832                 push    ecx
.text$mn:00001833                 lea     ecx, [ebp+var_3C]
.text$mn:00001836                 call    ??$?0AAHAAIX@?$pair@HH@std@@QAE@AAHAAI@Z ; std::pair<int,int>::pair<int,int>(int &,uint &)
.text$mn:0000183B                 push    eax
.text$mn:0000183C                 mov     ecx, [ebp+arg_0]
.text$mn:0000183F                 call    ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)
.text$mn:00001844
.text$mn:00001844 loc_1844:                               ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+2Ej
.text$mn:00001844                                         ; FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+101j
.text$mn:00001844                 mov     esp, ebp
.text$mn:00001846                 pop     ebp
.text$mn:00001847                 retn    10h
.text$mn:00001847 ?getInvertZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@0II@Z endp
.text$mn:00001847
.text$mn:00001847 ; ---------------------------------------------------------------------------
.text$mn:0000184A                 db 0Eh dup(0CCh)
.text$mn:00001858
.text$mn:00001858 ; =============== S U B R O U T I N E =======================================
.text$mn:00001858
.text$mn:00001858 ; Attributes: bp-based frame
.text$mn:00001858
.text$mn:00001858 ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall FunctionParser::parseSubLevel(unsigned int, unsigned int, class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>, int &, class ScintillaEditView * *)
.text$mn:00001858                 public ?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z
.text$mn:00001858 ?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z proc near
.text$mn:00001858                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+24Fp
.text$mn:00001858                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+342p ...
.text$mn:00001858
.text$mn:00001858 var_868         = byte ptr -868h
.text$mn:00001858 var_85C         = byte ptr -85Ch
.text$mn:00001858 var_850         = dword ptr -850h
.text$mn:00001858 var_84C         = dword ptr -84Ch
.text$mn:00001858 var_848         = dword ptr -848h
.text$mn:00001858 var_844         = dword ptr -844h
.text$mn:00001858 var_840         = dword ptr -840h
.text$mn:00001858 var_83C         = dword ptr -83Ch
.text$mn:00001858 var_838         = dword ptr -838h
.text$mn:00001858 var_834         = dword ptr -834h
.text$mn:00001858 var_830         = dword ptr -830h
.text$mn:00001858 var_82C         = dword ptr -82Ch
.text$mn:00001858 var_828         = dword ptr -828h
.text$mn:00001858 var_824         = dword ptr -824h
.text$mn:00001858 var_820         = dword ptr -820h
.text$mn:00001858 lpString        = dword ptr -81Ch
.text$mn:00001858 var_818         = dword ptr -818h
.text$mn:00001858 var_814         = dword ptr -814h
.text$mn:00001858 Str             = word ptr -810h
.text$mn:00001858 var_10          = dword ptr -10h
.text$mn:00001858 var_C           = dword ptr -0Ch
.text$mn:00001858 var_4           = dword ptr -4
.text$mn:00001858 arg_0           = dword ptr  8
.text$mn:00001858 arg_4           = dword ptr  0Ch
.text$mn:00001858 arg_8           = dword ptr  10h
.text$mn:00001858 arg_C           = byte ptr  14h
.text$mn:00001858 arg_1C          = dword ptr  24h
.text$mn:00001858 arg_20          = dword ptr  28h
.text$mn:00001858
.text$mn:00001858                 push    ebp
.text$mn:00001859                 mov     ebp, esp
.text$mn:0000185B                 push    0FFFFFFFFh
.text$mn:0000185D                 push    offset __ehhandler$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z
.text$mn:00001862                 mov     eax, large fs:0
.text$mn:00001868                 push    eax
.text$mn:00001869                 sub     esp, 85Ch
.text$mn:0000186F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001874                 xor     eax, ebp
.text$mn:00001876                 mov     [ebp+var_10], eax
.text$mn:00001879                 push    eax
.text$mn:0000187A                 lea     eax, [ebp+var_C]
.text$mn:0000187D                 mov     large fs:0, eax
.text$mn:00001883                 mov     [ebp+var_824], ecx
.text$mn:00001889                 mov     [ebp+var_814], 0
.text$mn:00001893                 mov     [ebp+var_4], 1
.text$mn:0000189A                 mov     eax, [ebp+arg_4]
.text$mn:0000189D                 cmp     eax, [ebp+arg_8]
.text$mn:000018A0                 jb      short loc_18DB
.text$mn:000018A2                 mov     ecx, [ebp+arg_1C]
.text$mn:000018A5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text$mn:000018AB                 push    offset $SG156085 ; Str
.text$mn:000018B0                 mov     ecx, [ebp+arg_0]
.text$mn:000018B3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000018B8                 mov     edx, [ebp+var_814]
.text$mn:000018BE                 or      edx, 1
.text$mn:000018C1                 mov     [ebp+var_814], edx
.text$mn:000018C7                 mov     byte ptr [ebp+var_4], 0
.text$mn:000018CB                 lea     ecx, [ebp+arg_C]
.text$mn:000018CE                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000018D3                 mov     eax, [ebp+arg_0]
.text$mn:000018D6                 jmp     loc_1B5C
.text$mn:000018DB ; ---------------------------------------------------------------------------
.text$mn:000018DB
.text$mn:000018DB loc_18DB:                               ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+48j
.text$mn:000018DB                 lea     ecx, [ebp+arg_C]
.text$mn:000018DE                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000018E3                 test    eax, eax
.text$mn:000018E5                 jnz     short loc_1917
.text$mn:000018E7                 push    offset $SG156087 ; Str
.text$mn:000018EC                 mov     ecx, [ebp+arg_0]
.text$mn:000018EF                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000018F4                 mov     eax, [ebp+var_814]
.text$mn:000018FA                 or      eax, 1
.text$mn:000018FD                 mov     [ebp+var_814], eax
.text$mn:00001903                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001907                 lea     ecx, [ebp+arg_C]
.text$mn:0000190A                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:0000190F                 mov     eax, [ebp+arg_0]
.text$mn:00001912                 jmp     loc_1B5C
.text$mn:00001917 ; ---------------------------------------------------------------------------
.text$mn:00001917
.text$mn:00001917 loc_1917:                               ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+8Dj
.text$mn:00001917                 mov     [ebp+var_830], 10600000h
.text$mn:00001921                 push    0               ; __int32
.text$mn:00001923                 mov     ecx, [ebp+var_830]
.text$mn:00001929                 push    ecx             ; unsigned int
.text$mn:0000192A                 push    896h            ; unsigned int
.text$mn:0000192F                 mov     edx, [ebp+arg_20]
.text$mn:00001932                 mov     ecx, [edx]      ; this
.text$mn:00001934                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001939                 push    0
.text$mn:0000193B                 lea     ecx, [ebp+arg_C]
.text$mn:0000193E                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00001943                 mov     ecx, eax
.text$mn:00001945                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000194A                 mov     [ebp+lpString], eax
.text$mn:00001950                 mov     eax, [ebp+arg_8]
.text$mn:00001953                 push    eax             ; int
.text$mn:00001954                 mov     ecx, [ebp+arg_4]
.text$mn:00001957                 push    ecx             ; int
.text$mn:00001958                 mov     edx, [ebp+lpString]
.text$mn:0000195E                 push    edx             ; lpString
.text$mn:0000195F                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00001965                 push    eax             ; int
.text$mn:00001966                 mov     eax, [ebp+lpString]
.text$mn:0000196C                 push    eax             ; wchar_t *
.text$mn:0000196D                 mov     ecx, [ebp+arg_20]
.text$mn:00001970                 mov     ecx, [ecx]      ; this
.text$mn:00001972                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00001977                 mov     [ebp+var_818], eax
.text$mn:0000197D                 cmp     [ebp+var_818], 0FFFFFFFFh
.text$mn:00001984                 jz      short loc_198F
.text$mn:00001986                 cmp     [ebp+var_818], 0FFFFFFFEh
.text$mn:0000198D                 jnz     short loc_19C8
.text$mn:0000198F
.text$mn:0000198F loc_198F:                               ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+12Cj
.text$mn:0000198F                 mov     edx, [ebp+arg_1C]
.text$mn:00001992                 mov     dword ptr [edx], 0FFFFFFFFh
.text$mn:00001998                 push    offset $SG156093 ; Str
.text$mn:0000199D                 mov     ecx, [ebp+arg_0]
.text$mn:000019A0                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000019A5                 mov     eax, [ebp+var_814]
.text$mn:000019AB                 or      eax, 1
.text$mn:000019AE                 mov     [ebp+var_814], eax
.text$mn:000019B4                 mov     byte ptr [ebp+var_4], 0
.text$mn:000019B8                 lea     ecx, [ebp+arg_C]
.text$mn:000019BB                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000019C0                 mov     eax, [ebp+arg_0]
.text$mn:000019C3                 jmp     loc_1B5C
.text$mn:000019C8 ; ---------------------------------------------------------------------------
.text$mn:000019C8
.text$mn:000019C8 loc_19C8:                               ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+135j
.text$mn:000019C8                 push    0               ; __int32
.text$mn:000019CA                 push    0               ; unsigned int
.text$mn:000019CC                 push    891h            ; unsigned int
.text$mn:000019D1                 mov     ecx, [ebp+arg_20]
.text$mn:000019D4                 mov     ecx, [ecx]      ; this
.text$mn:000019D6                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:000019DB                 mov     [ebp+var_820], eax
.text$mn:000019E1                 lea     ecx, [ebp+arg_C]
.text$mn:000019E4                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000019E9                 cmp     eax, 2
.text$mn:000019EC                 jb      loc_1AF2
.text$mn:000019F2                 lea     edx, [ebp+var_868]
.text$mn:000019F8                 push    edx
.text$mn:000019F9                 lea     ecx, [ebp+arg_C]
.text$mn:000019FC                 call    ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)
.text$mn:00001A01                 mov     [ebp+var_82C], eax
.text$mn:00001A07                 mov     eax, [ebp+var_82C]
.text$mn:00001A0D                 mov     [ebp+var_838], eax
.text$mn:00001A13                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001A17                 sub     esp, 0Ch
.text$mn:00001A1A                 mov     ecx, esp
.text$mn:00001A1C                 mov     [ebp+var_844], esp
.text$mn:00001A22                 mov     edx, [ebp+var_838]
.text$mn:00001A28                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00001A29                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00001A2E                 mov     [ebp+var_834], eax
.text$mn:00001A34                 mov     eax, [ebp+var_834]
.text$mn:00001A3A                 mov     [ebp+var_84C], eax
.text$mn:00001A40                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001A44                 lea     ecx, [ebp+var_85C]
.text$mn:00001A4A                 push    ecx
.text$mn:00001A4B                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001A4F                 lea     ecx, [ebp+arg_C]
.text$mn:00001A52                 call    ?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:00001A57                 mov     [ebp+var_83C], eax
.text$mn:00001A5D                 lea     ecx, [ebp+var_85C]
.text$mn:00001A63                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00001A68                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001A6C                 lea     ecx, [ebp+var_868]
.text$mn:00001A72                 call    ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00001A77                 mov     edx, [ebp+arg_20]
.text$mn:00001A7A                 push    edx
.text$mn:00001A7B                 mov     eax, [ebp+arg_1C]
.text$mn:00001A7E                 push    eax
.text$mn:00001A7F                 sub     esp, 10h
.text$mn:00001A82                 mov     ecx, esp
.text$mn:00001A84                 mov     [ebp+var_848], esp
.text$mn:00001A8A                 lea     edx, [ebp+arg_C]
.text$mn:00001A8D                 push    edx
.text$mn:00001A8E                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00001A93                 mov     [ebp+var_828], eax
.text$mn:00001A99                 mov     eax, [ebp+var_828]
.text$mn:00001A9F                 mov     [ebp+var_850], eax
.text$mn:00001AA5                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001AA9                 mov     ecx, [ebp+var_820]
.text$mn:00001AAF                 push    ecx
.text$mn:00001AB0                 mov     edx, [ebp+var_818]
.text$mn:00001AB6                 push    edx
.text$mn:00001AB7                 mov     eax, [ebp+arg_0]
.text$mn:00001ABA                 push    eax
.text$mn:00001ABB                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001ABF                 mov     ecx, [ebp+var_824]
.text$mn:00001AC5                 call    ?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)
.text$mn:00001ACA                 mov     [ebp+var_840], eax
.text$mn:00001AD0                 mov     ecx, [ebp+var_814]
.text$mn:00001AD6                 or      ecx, 1
.text$mn:00001AD9                 mov     [ebp+var_814], ecx
.text$mn:00001ADF                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001AE3                 lea     ecx, [ebp+arg_C]
.text$mn:00001AE6                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00001AEB                 mov     eax, [ebp+arg_0]
.text$mn:00001AEE                 jmp     short loc_1B5C
.text$mn:00001AF0 ; ---------------------------------------------------------------------------
.text$mn:00001AF0                 jmp     short loc_1B50
.text$mn:00001AF2 ; ---------------------------------------------------------------------------
.text$mn:00001AF2
.text$mn:00001AF2 loc_1AF2:                               ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+194j
.text$mn:00001AF2                 mov     edx, [ebp+var_820]
.text$mn:00001AF8                 push    edx             ; int
.text$mn:00001AF9                 mov     eax, [ebp+var_818]
.text$mn:00001AFF                 push    eax             ; int
.text$mn:00001B00                 push    400h            ; unsigned int
.text$mn:00001B05                 lea     ecx, [ebp+Str]
.text$mn:00001B0B                 push    ecx             ; wchar_t *
.text$mn:00001B0C                 mov     edx, [ebp+arg_20]
.text$mn:00001B0F                 mov     ecx, [edx]      ; this
.text$mn:00001B11                 call    ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z ; ScintillaEditView::getGenericText(wchar_t *,uint,int,int)
.text$mn:00001B16                 mov     eax, [ebp+arg_1C]
.text$mn:00001B19                 mov     ecx, [ebp+var_818]
.text$mn:00001B1F                 mov     [eax], ecx
.text$mn:00001B21                 lea     edx, [ebp+Str]
.text$mn:00001B27                 push    edx             ; Str
.text$mn:00001B28                 mov     ecx, [ebp+arg_0]
.text$mn:00001B2B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001B30                 mov     eax, [ebp+var_814]
.text$mn:00001B36                 or      eax, 1
.text$mn:00001B39                 mov     [ebp+var_814], eax
.text$mn:00001B3F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001B43                 lea     ecx, [ebp+arg_C]
.text$mn:00001B46                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00001B4B                 mov     eax, [ebp+arg_0]
.text$mn:00001B4E                 jmp     short loc_1B5C
.text$mn:00001B50 ; ---------------------------------------------------------------------------
.text$mn:00001B50
.text$mn:00001B50 loc_1B50:                               ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+298j
.text$mn:00001B50                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001B54                 lea     ecx, [ebp+arg_C]
.text$mn:00001B57                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00001B5C
.text$mn:00001B5C loc_1B5C:                               ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+7Ej
.text$mn:00001B5C                                         ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+BAj ...
.text$mn:00001B5C                 mov     ecx, [ebp+var_C]
.text$mn:00001B5F                 mov     large fs:0, ecx
.text$mn:00001B66                 pop     ecx
.text$mn:00001B67                 mov     ecx, [ebp+var_10]
.text$mn:00001B6A                 xor     ecx, ebp
.text$mn:00001B6C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001B71                 mov     esp, ebp
.text$mn:00001B73                 pop     ebp
.text$mn:00001B74                 retn    24h
.text$mn:00001B74 ?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z endp
.text$mn:00001B74
.text$mn:00001B74 ; ---------------------------------------------------------------------------
.text$mn:00001B77                 align 4
.text$mn:00001B78
.text$mn:00001B78 ; =============== S U B R O U T I N E =======================================
.text$mn:00001B78
.text$mn:00001B78 ; Attributes: bp-based frame
.text$mn:00001B78
.text$mn:00001B78 ; public: virtual void __thiscall FunctionZoneParser::parse(class std::vector<struct foundInfo, class std::allocator<struct foundInfo>> &, unsigned int, unsigned int, class ScintillaEditView * *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00001B78                 public ?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001B78 ?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00001B78                                         ; DATA XREF: .rdata:const FunctionZoneParser::`vftable'o
.text$mn:00001B78
.text$mn:00001B78 var_54          = byte ptr -54h
.text$mn:00001B78 var_44          = byte ptr -44h
.text$mn:00001B78 var_34          = byte ptr -34h
.text$mn:00001B78 var_24          = dword ptr -24h
.text$mn:00001B78 var_20          = dword ptr -20h
.text$mn:00001B78 var_1C          = dword ptr -1Ch
.text$mn:00001B78 var_18          = dword ptr -18h
.text$mn:00001B78 var_14          = dword ptr -14h
.text$mn:00001B78 var_10          = dword ptr -10h
.text$mn:00001B78 var_C           = dword ptr -0Ch
.text$mn:00001B78 var_4           = dword ptr -4
.text$mn:00001B78 arg_0           = dword ptr  8
.text$mn:00001B78 arg_4           = dword ptr  0Ch
.text$mn:00001B78 arg_8           = dword ptr  10h
.text$mn:00001B78 arg_C           = dword ptr  14h
.text$mn:00001B78 arg_10          = byte ptr  18h
.text$mn:00001B78
.text$mn:00001B78                 push    ebp
.text$mn:00001B79                 mov     ebp, esp
.text$mn:00001B7B                 push    0FFFFFFFFh
.text$mn:00001B7D                 push    offset __ehhandler$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001B82                 mov     eax, large fs:0
.text$mn:00001B88                 push    eax
.text$mn:00001B89                 sub     esp, 48h
.text$mn:00001B8C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001B91                 xor     eax, ebp
.text$mn:00001B93                 push    eax
.text$mn:00001B94                 lea     eax, [ebp+var_C]
.text$mn:00001B97                 mov     large fs:0, eax
.text$mn:00001B9D                 mov     [ebp+var_14], ecx
.text$mn:00001BA0                 mov     [ebp+var_4], 0
.text$mn:00001BA7                 lea     ecx, [ebp+var_54]
.text$mn:00001BAA                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00001BAF                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001BB3                 lea     ecx, [ebp+var_44]
.text$mn:00001BB6                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00001BBB                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001BBF                 lea     ecx, [ebp+var_34]
.text$mn:00001BC2                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00001BC7                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001BCB                 mov     eax, [ebp+arg_C]
.text$mn:00001BCE                 push    eax
.text$mn:00001BCF                 mov     ecx, [ebp+arg_8]
.text$mn:00001BD2                 push    ecx
.text$mn:00001BD3                 mov     edx, [ebp+arg_4]
.text$mn:00001BD6                 push    edx
.text$mn:00001BD7                 lea     eax, [ebp+var_44]
.text$mn:00001BDA                 push    eax
.text$mn:00001BDB                 mov     ecx, [ebp+var_14]
.text$mn:00001BDE                 call    ?getCommentZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IIPAPAVScintillaEditView@@@Z ; FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)
.text$mn:00001BE3                 mov     ecx, [ebp+arg_8]
.text$mn:00001BE6                 push    ecx
.text$mn:00001BE7                 mov     edx, [ebp+arg_4]
.text$mn:00001BEA                 push    edx
.text$mn:00001BEB                 lea     eax, [ebp+var_44]
.text$mn:00001BEE                 push    eax
.text$mn:00001BEF                 lea     ecx, [ebp+var_34]
.text$mn:00001BF2                 push    ecx
.text$mn:00001BF3                 mov     ecx, [ebp+var_14]
.text$mn:00001BF6                 call    ?getInvertZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@0II@Z ; FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)
.text$mn:00001BFB                 mov     [ebp+var_10], 0
.text$mn:00001C02                 lea     ecx, [ebp+var_34]
.text$mn:00001C05                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:00001C0A                 mov     [ebp+var_18], eax
.text$mn:00001C0D                 jmp     short loc_1C18
.text$mn:00001C0F ; ---------------------------------------------------------------------------
.text$mn:00001C0F
.text$mn:00001C0F loc_1C0F:                               ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+101j
.text$mn:00001C0F                 mov     edx, [ebp+var_10]
.text$mn:00001C12                 add     edx, 1
.text$mn:00001C15                 mov     [ebp+var_10], edx
.text$mn:00001C18
.text$mn:00001C18 loc_1C18:                               ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+95j
.text$mn:00001C18                 mov     eax, [ebp+var_10]
.text$mn:00001C1B                 cmp     eax, [ebp+var_18]
.text$mn:00001C1E                 jnb     short loc_1C7B
.text$mn:00001C20                 sub     esp, 1Ch
.text$mn:00001C23                 mov     ecx, esp
.text$mn:00001C25                 mov     [ebp+var_20], esp
.text$mn:00001C28                 lea     edx, [ebp+arg_10]
.text$mn:00001C2B                 push    edx
.text$mn:00001C2C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001C31                 mov     [ebp+var_1C], eax
.text$mn:00001C34                 mov     eax, [ebp+var_1C]
.text$mn:00001C37                 mov     [ebp+var_24], eax
.text$mn:00001C3A                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001C3E                 mov     ecx, [ebp+arg_C]
.text$mn:00001C41                 push    ecx
.text$mn:00001C42                 mov     edx, [ebp+var_10]
.text$mn:00001C45                 push    edx
.text$mn:00001C46                 lea     ecx, [ebp+var_34]
.text$mn:00001C49                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00001C4E                 mov     eax, [eax+4]
.text$mn:00001C51                 push    eax
.text$mn:00001C52                 mov     ecx, [ebp+var_10]
.text$mn:00001C55                 push    ecx
.text$mn:00001C56                 lea     ecx, [ebp+var_34]
.text$mn:00001C59                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00001C5E                 mov     edx, [eax]
.text$mn:00001C60                 push    edx
.text$mn:00001C61                 lea     eax, [ebp+var_44]
.text$mn:00001C64                 push    eax
.text$mn:00001C65                 lea     ecx, [ebp+var_54]
.text$mn:00001C68                 push    ecx
.text$mn:00001C69                 mov     edx, [ebp+arg_0]
.text$mn:00001C6C                 push    edx
.text$mn:00001C6D                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001C71                 mov     ecx, [ebp+var_14]
.text$mn:00001C74                 call    ?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001C79                 jmp     short loc_1C0F
.text$mn:00001C7B ; ---------------------------------------------------------------------------
.text$mn:00001C7B
.text$mn:00001C7B loc_1C7B:                               ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+A6j
.text$mn:00001C7B                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001C7F                 lea     ecx, [ebp+var_34]
.text$mn:00001C82                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00001C87                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001C8B                 lea     ecx, [ebp+var_44]
.text$mn:00001C8E                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00001C93                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001C97                 lea     ecx, [ebp+var_54]
.text$mn:00001C9A                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00001C9F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001CA6                 lea     ecx, [ebp+arg_10]
.text$mn:00001CA9                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001CAE                 mov     ecx, [ebp+var_C]
.text$mn:00001CB1                 mov     large fs:0, ecx
.text$mn:00001CB8                 pop     ecx
.text$mn:00001CB9                 mov     esp, ebp
.text$mn:00001CBB                 pop     ebp
.text$mn:00001CBC                 retn    2Ch
.text$mn:00001CBC ?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:00001CBC
.text$mn:00001CBC ; ---------------------------------------------------------------------------
.text$mn:00001CBF                 db 9 dup(0CCh)
.text$mn:00001CC8
.text$mn:00001CC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CC8
.text$mn:00001CC8 ; Attributes: bp-based frame
.text$mn:00001CC8
.text$mn:00001CC8 ; protected: void __thiscall FunctionZoneParser::classParse(class std::vector<struct foundInfo, class std::allocator<struct foundInfo>> &, class std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>> &, class std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>> const &, unsigned int, unsigned int, class ScintillaEditView * *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00001CC8                 public ?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001CC8 ?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00001CC8                                         ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+FCp
.text$mn:00001CC8                                         ; FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+BAp ...
.text$mn:00001CC8
.text$mn:00001CC8 var_68          = byte ptr -68h
.text$mn:00001CC8 var_60          = dword ptr -60h
.text$mn:00001CC8 var_5C          = dword ptr -5Ch
.text$mn:00001CC8 var_58          = dword ptr -58h
.text$mn:00001CC8 var_54          = dword ptr -54h
.text$mn:00001CC8 var_50          = dword ptr -50h
.text$mn:00001CC8 var_4C          = dword ptr -4Ch
.text$mn:00001CC8 var_48          = dword ptr -48h
.text$mn:00001CC8 var_44          = dword ptr -44h
.text$mn:00001CC8 var_40          = dword ptr -40h
.text$mn:00001CC8 var_3C          = dword ptr -3Ch
.text$mn:00001CC8 var_38          = dword ptr -38h
.text$mn:00001CC8 var_34          = dword ptr -34h
.text$mn:00001CC8 var_30          = dword ptr -30h
.text$mn:00001CC8 var_2C          = byte ptr -2Ch
.text$mn:00001CC8 var_10          = dword ptr -10h
.text$mn:00001CC8 var_C           = dword ptr -0Ch
.text$mn:00001CC8 var_4           = dword ptr -4
.text$mn:00001CC8 arg_0           = dword ptr  8
.text$mn:00001CC8 arg_4           = dword ptr  0Ch
.text$mn:00001CC8 arg_8           = dword ptr  10h
.text$mn:00001CC8 arg_C           = dword ptr  14h
.text$mn:00001CC8 arg_10          = dword ptr  18h
.text$mn:00001CC8 arg_14          = dword ptr  1Ch
.text$mn:00001CC8 arg_18          = byte ptr  20h
.text$mn:00001CC8
.text$mn:00001CC8                 push    ebp
.text$mn:00001CC9                 mov     ebp, esp
.text$mn:00001CCB                 push    0FFFFFFFFh
.text$mn:00001CCD                 push    offset __ehhandler$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00001CD2                 mov     eax, large fs:0
.text$mn:00001CD8                 push    eax
.text$mn:00001CD9                 sub     esp, 5Ch
.text$mn:00001CDC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001CE1                 xor     eax, ebp
.text$mn:00001CE3                 mov     [ebp+var_10], eax
.text$mn:00001CE6                 push    eax
.text$mn:00001CE7                 lea     eax, [ebp+var_C]
.text$mn:00001CEA                 mov     large fs:0, eax
.text$mn:00001CF0                 mov     [ebp+var_30], ecx
.text$mn:00001CF3                 mov     [ebp+var_4], 0
.text$mn:00001CFA                 mov     eax, [ebp+arg_C]
.text$mn:00001CFD                 cmp     eax, [ebp+arg_10]
.text$mn:00001D00                 jb      short loc_1D16
.text$mn:00001D02                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001D09                 lea     ecx, [ebp+arg_18]
.text$mn:00001D0C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D11                 jmp     loc_1F5D
.text$mn:00001D16 ; ---------------------------------------------------------------------------
.text$mn:00001D16
.text$mn:00001D16 loc_1D16:                               ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+38j
.text$mn:00001D16                 mov     [ebp+var_44], 10600000h
.text$mn:00001D1D                 push    0               ; __int32
.text$mn:00001D1F                 mov     ecx, [ebp+var_44]
.text$mn:00001D22                 push    ecx             ; unsigned int
.text$mn:00001D23                 push    896h            ; unsigned int
.text$mn:00001D28                 mov     edx, [ebp+arg_14]
.text$mn:00001D2B                 mov     ecx, [edx]      ; this
.text$mn:00001D2D                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001D32                 mov     eax, [ebp+arg_10]
.text$mn:00001D35                 push    eax             ; int
.text$mn:00001D36                 mov     ecx, [ebp+arg_C]
.text$mn:00001D39                 push    ecx             ; int
.text$mn:00001D3A                 mov     ecx, [ebp+var_30]
.text$mn:00001D3D                 add     ecx, 94h ; 'ö'
.text$mn:00001D43                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001D48                 push    eax             ; int
.text$mn:00001D49                 mov     ecx, [ebp+var_30]
.text$mn:00001D4C                 add     ecx, 94h ; 'ö'
.text$mn:00001D52                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001D57                 push    eax             ; wchar_t *
.text$mn:00001D58                 mov     edx, [ebp+arg_14]
.text$mn:00001D5B                 mov     ecx, [edx]      ; this
.text$mn:00001D5D                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00001D62                 mov     [ebp+var_34], eax
.text$mn:00001D65                 mov     [ebp+var_38], 0
.text$mn:00001D6C
.text$mn:00001D6C loc_1D6C:                               ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+281j
.text$mn:00001D6C                 cmp     [ebp+var_34], 0FFFFFFFFh
.text$mn:00001D70                 jz      loc_1F4E
.text$mn:00001D76                 cmp     [ebp+var_34], 0FFFFFFFEh
.text$mn:00001D7A                 jz      loc_1F4E
.text$mn:00001D80                 push    0               ; __int32
.text$mn:00001D82                 push    0               ; unsigned int
.text$mn:00001D84                 push    891h            ; unsigned int
.text$mn:00001D89                 mov     eax, [ebp+arg_14]
.text$mn:00001D8C                 mov     ecx, [eax]      ; this
.text$mn:00001D8E                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00001D93                 mov     [ebp+var_38], eax
.text$mn:00001D96                 mov     [ebp+var_48], 0
.text$mn:00001D9D                 mov     ecx, [ebp+arg_14]
.text$mn:00001DA0                 push    ecx
.text$mn:00001DA1                 lea     edx, [ebp+var_48]
.text$mn:00001DA4                 push    edx
.text$mn:00001DA5                 mov     eax, [ebp+var_30]
.text$mn:00001DA8                 add     eax, 84h ; 'ä'
.text$mn:00001DAD                 sub     esp, 10h
.text$mn:00001DB0                 mov     ecx, esp
.text$mn:00001DB2                 mov     [ebp+var_5C], esp
.text$mn:00001DB5                 push    eax
.text$mn:00001DB6                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00001DBB                 mov     [ebp+var_4C], eax
.text$mn:00001DBE                 mov     ecx, [ebp+var_4C]
.text$mn:00001DC1                 mov     [ebp+var_50], ecx
.text$mn:00001DC4                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001DC8                 mov     edx, [ebp+var_38]
.text$mn:00001DCB                 push    edx
.text$mn:00001DCC                 mov     eax, [ebp+var_34]
.text$mn:00001DCF                 push    eax
.text$mn:00001DD0                 lea     ecx, [ebp+var_2C]
.text$mn:00001DD3                 push    ecx
.text$mn:00001DD4                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001DD8                 mov     ecx, [ebp+var_30]
.text$mn:00001DDB                 call    ?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)
.text$mn:00001DE0                 mov     [ebp+var_58], eax
.text$mn:00001DE3                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001DE7                 push    offset $SG156373 ; Str
.text$mn:00001DEC                 mov     edx, [ebp+var_30]
.text$mn:00001DEF                 add     edx, 0B0h ; '¦'
.text$mn:00001DF5                 push    edx             ; int
.text$mn:00001DF6                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001DFB                 add     esp, 8
.text$mn:00001DFE                 movzx   eax, al
.text$mn:00001E01                 test    eax, eax
.text$mn:00001E03                 jz      short loc_1E58
.text$mn:00001E05                 push    offset $SG156374 ; Str
.text$mn:00001E0A                 mov     ecx, [ebp+var_30]
.text$mn:00001E0D                 add     ecx, 0CCh ; '¦'
.text$mn:00001E13                 push    ecx             ; int
.text$mn:00001E14                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001E19                 add     esp, 8
.text$mn:00001E1C                 movzx   edx, al
.text$mn:00001E1F                 test    edx, edx
.text$mn:00001E21                 jz      short loc_1E58
.text$mn:00001E23                 mov     eax, [ebp+arg_14]
.text$mn:00001E26                 push    eax             ; int
.text$mn:00001E27                 mov     ecx, [ebp+arg_8]
.text$mn:00001E2A                 push    ecx             ; int
.text$mn:00001E2B                 mov     ecx, [ebp+var_30]
.text$mn:00001E2E                 add     ecx, 0CCh ; '¦'
.text$mn:00001E34                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001E39                 push    eax             ; Str
.text$mn:00001E3A                 mov     ecx, [ebp+var_30]
.text$mn:00001E3D                 add     ecx, 0B0h ; '¦'
.text$mn:00001E43                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001E48                 push    eax             ; lpString
.text$mn:00001E49                 mov     edx, [ebp+var_38]
.text$mn:00001E4C                 push    edx             ; int
.text$mn:00001E4D                 mov     ecx, [ebp+var_30]
.text$mn:00001E50                 call    ?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z ; FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)
.text$mn:00001E55                 mov     [ebp+var_38], eax
.text$mn:00001E58
.text$mn:00001E58 loc_1E58:                               ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+13Bj
.text$mn:00001E58                                         ; FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+159j
.text$mn:00001E58                 mov     eax, [ebp+var_38]
.text$mn:00001E5B                 cmp     eax, [ebp+arg_10]
.text$mn:00001E5E                 jle     short loc_1E71
.text$mn:00001E60                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001E64                 lea     ecx, [ebp+var_2C]
.text$mn:00001E67                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001E6C                 jmp     loc_1F4E
.text$mn:00001E71 ; ---------------------------------------------------------------------------
.text$mn:00001E71
.text$mn:00001E71 loc_1E71:                               ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+196j
.text$mn:00001E71                 lea     ecx, [ebp+var_38]
.text$mn:00001E74                 push    ecx
.text$mn:00001E75                 lea     edx, [ebp+var_34]
.text$mn:00001E78                 push    edx
.text$mn:00001E79                 lea     ecx, [ebp+var_68]
.text$mn:00001E7C                 call    ??$?0AAHAAHX@?$pair@HH@std@@QAE@AAH0@Z ; std::pair<int,int>::pair<int,int>(int &,int &)
.text$mn:00001E81                 push    eax
.text$mn:00001E82                 mov     ecx, [ebp+arg_4]
.text$mn:00001E85                 call    ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)
.text$mn:00001E8A                 mov     eax, [ebp+var_38]
.text$mn:00001E8D                 sub     eax, [ebp+var_34]
.text$mn:00001E90                 mov     [ebp+var_40], eax
.text$mn:00001E93                 mov     ecx, [ebp+var_34]
.text$mn:00001E96                 add     ecx, [ebp+var_40]
.text$mn:00001E99                 cmp     ecx, [ebp+arg_10]
.text$mn:00001E9C                 jnz     short loc_1EAF
.text$mn:00001E9E                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001EA2                 lea     ecx, [ebp+var_2C]
.text$mn:00001EA5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001EAA                 jmp     loc_1F4E
.text$mn:00001EAF ; ---------------------------------------------------------------------------
.text$mn:00001EAF
.text$mn:00001EAF loc_1EAF:                               ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+1D4j
.text$mn:00001EAF                 mov     edx, [ebp+arg_8]
.text$mn:00001EB2                 push    edx
.text$mn:00001EB3                 mov     eax, [ebp+var_34]
.text$mn:00001EB6                 push    eax
.text$mn:00001EB7                 mov     ecx, [ebp+var_30]
.text$mn:00001EBA                 call    ?isInZones@FunctionParser@@QAE_NHABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@Z ; FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)
.text$mn:00001EBF                 movzx   ecx, al
.text$mn:00001EC2                 test    ecx, ecx
.text$mn:00001EC4                 jnz     short loc_1F04
.text$mn:00001EC6                 mov     edx, [ebp+arg_8]
.text$mn:00001EC9                 push    edx
.text$mn:00001ECA                 sub     esp, 1Ch
.text$mn:00001ECD                 mov     ecx, esp
.text$mn:00001ECF                 mov     [ebp+var_60], esp
.text$mn:00001ED2                 lea     eax, [ebp+var_2C]
.text$mn:00001ED5                 push    eax
.text$mn:00001ED6                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001EDB                 mov     [ebp+var_3C], eax
.text$mn:00001EDE                 mov     ecx, [ebp+var_3C]
.text$mn:00001EE1                 mov     [ebp+var_54], ecx
.text$mn:00001EE4                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001EE8                 mov     edx, [ebp+arg_14]
.text$mn:00001EEB                 push    edx
.text$mn:00001EEC                 mov     eax, [ebp+var_38]
.text$mn:00001EEF                 push    eax
.text$mn:00001EF0                 mov     ecx, [ebp+var_34]
.text$mn:00001EF3                 push    ecx
.text$mn:00001EF4                 mov     edx, [ebp+arg_0]
.text$mn:00001EF7                 push    edx
.text$mn:00001EF8                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001EFC                 mov     ecx, [ebp+var_30]
.text$mn:00001EFF                 call    ?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)
.text$mn:00001F04
.text$mn:00001F04 loc_1F04:                               ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+1FCj
.text$mn:00001F04                 mov     eax, [ebp+var_38]
.text$mn:00001F07                 mov     [ebp+arg_C], eax
.text$mn:00001F0A                 mov     ecx, [ebp+arg_10]
.text$mn:00001F0D                 push    ecx             ; int
.text$mn:00001F0E                 mov     edx, [ebp+arg_C]
.text$mn:00001F11                 push    edx             ; int
.text$mn:00001F12                 mov     ecx, [ebp+var_30]
.text$mn:00001F15                 add     ecx, 94h ; 'ö'
.text$mn:00001F1B                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00001F20                 push    eax             ; int
.text$mn:00001F21                 mov     ecx, [ebp+var_30]
.text$mn:00001F24                 add     ecx, 94h ; 'ö'
.text$mn:00001F2A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001F2F                 push    eax             ; wchar_t *
.text$mn:00001F30                 mov     eax, [ebp+arg_14]
.text$mn:00001F33                 mov     ecx, [eax]      ; this
.text$mn:00001F35                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00001F3A                 mov     [ebp+var_34], eax
.text$mn:00001F3D                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001F41                 lea     ecx, [ebp+var_2C]
.text$mn:00001F44                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001F49                 jmp     loc_1D6C
.text$mn:00001F4E ; ---------------------------------------------------------------------------
.text$mn:00001F4E
.text$mn:00001F4E loc_1F4E:                               ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+A8j
.text$mn:00001F4E                                         ; FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+B2j ...
.text$mn:00001F4E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001F55                 lea     ecx, [ebp+arg_18]
.text$mn:00001F58                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001F5D
.text$mn:00001F5D loc_1F5D:                               ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+49j
.text$mn:00001F5D                 mov     ecx, [ebp+var_C]
.text$mn:00001F60                 mov     large fs:0, ecx
.text$mn:00001F67                 pop     ecx
.text$mn:00001F68                 mov     ecx, [ebp+var_10]
.text$mn:00001F6B                 xor     ecx, ebp
.text$mn:00001F6D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001F72                 mov     esp, ebp
.text$mn:00001F74                 pop     ebp
.text$mn:00001F75                 retn    34h
.text$mn:00001F75 ?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:00001F75
.text$mn:00001F78
.text$mn:00001F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00001F78
.text$mn:00001F78 ; Attributes: bp-based frame
.text$mn:00001F78
.text$mn:00001F78 ; int __stdcall FunctionZoneParser::getBodyClosePos(int, LPCWSTR lpString, wchar_t *Str, int, int)
.text$mn:00001F78                 public ?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z
.text$mn:00001F78 ?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z proc near
.text$mn:00001F78                                         ; CODE XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+188p
.text$mn:00001F78
.text$mn:00001F78 var_4C          = dword ptr -4Ch
.text$mn:00001F78 var_48          = dword ptr -48h
.text$mn:00001F78 var_44          = dword ptr -44h
.text$mn:00001F78 var_40          = dword ptr -40h
.text$mn:00001F78 var_3C          = dword ptr -3Ch
.text$mn:00001F78 var_38          = dword ptr -38h
.text$mn:00001F78 var_34          = dword ptr -34h
.text$mn:00001F78 var_30          = dword ptr -30h
.text$mn:00001F78 var_2C          = byte ptr -2Ch
.text$mn:00001F78 var_10          = dword ptr -10h
.text$mn:00001F78 var_C           = dword ptr -0Ch
.text$mn:00001F78 var_4           = dword ptr -4
.text$mn:00001F78 arg_0           = dword ptr  8
.text$mn:00001F78 lpString        = dword ptr  0Ch
.text$mn:00001F78 Str             = dword ptr  10h
.text$mn:00001F78 arg_C           = dword ptr  14h
.text$mn:00001F78 arg_10          = dword ptr  18h
.text$mn:00001F78
.text$mn:00001F78                 push    ebp
.text$mn:00001F79                 mov     ebp, esp
.text$mn:00001F7B                 push    0FFFFFFFFh
.text$mn:00001F7D                 push    offset __ehhandler$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z
.text$mn:00001F82                 mov     eax, large fs:0
.text$mn:00001F88                 push    eax
.text$mn:00001F89                 sub     esp, 40h
.text$mn:00001F8C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001F91                 xor     eax, ebp
.text$mn:00001F93                 mov     [ebp+var_10], eax
.text$mn:00001F96                 push    eax
.text$mn:00001F97                 lea     eax, [ebp+var_C]
.text$mn:00001F9A                 mov     large fs:0, eax
.text$mn:00001FA0                 mov     [ebp+var_48], ecx
.text$mn:00001FA3                 mov     [ebp+var_30], 1
.text$mn:00001FAA                 mov     eax, [ebp+arg_10]
.text$mn:00001FAD                 mov     ecx, [eax]      ; this
.text$mn:00001FAF                 call    ?getCurrentDocLen@ScintillaEditView@@QBEHXZ ; ScintillaEditView::getCurrentDocLen(void)
.text$mn:00001FB4                 mov     [ebp+var_3C], eax
.text$mn:00001FB7                 mov     ecx, [ebp+arg_0]
.text$mn:00001FBA                 cmp     ecx, [ebp+var_3C]
.text$mn:00001FBD                 jb      short loc_1FC7
.text$mn:00001FBF                 mov     eax, [ebp+var_3C]
.text$mn:00001FC2                 jmp     loc_212C
.text$mn:00001FC7 ; ---------------------------------------------------------------------------
.text$mn:00001FC7
.text$mn:00001FC7 loc_1FC7:                               ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+45j
.text$mn:00001FC7                 push    offset $SG156287 ; Str
.text$mn:00001FCC                 lea     ecx, [ebp+var_2C]
.text$mn:00001FCF                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001FD4                 mov     [ebp+var_4], 0
.text$mn:00001FDB                 mov     edx, [ebp+lpString]
.text$mn:00001FDE                 push    edx             ; Str
.text$mn:00001FDF                 lea     ecx, [ebp+var_2C]
.text$mn:00001FE2                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00001FE7                 push    offset $SG156288 ; Str
.text$mn:00001FEC                 lea     ecx, [ebp+var_2C]
.text$mn:00001FEF                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00001FF4                 mov     eax, [ebp+Str]
.text$mn:00001FF7                 push    eax             ; Str
.text$mn:00001FF8                 lea     ecx, [ebp+var_2C]
.text$mn:00001FFB                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00002000                 push    offset $SG156289 ; Str
.text$mn:00002005                 lea     ecx, [ebp+var_2C]
.text$mn:00002008                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:0000200D                 mov     [ebp+var_4C], 10600000h
.text$mn:00002014                 push    0               ; __int32
.text$mn:00002016                 mov     ecx, [ebp+var_4C]
.text$mn:00002019                 push    ecx             ; unsigned int
.text$mn:0000201A                 push    896h            ; unsigned int
.text$mn:0000201F                 mov     edx, [ebp+arg_10]
.text$mn:00002022                 mov     ecx, [edx]      ; this
.text$mn:00002024                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002029                 mov     eax, [ebp+var_3C]
.text$mn:0000202C                 push    eax             ; int
.text$mn:0000202D                 mov     ecx, [ebp+arg_0]
.text$mn:00002030                 push    ecx             ; int
.text$mn:00002031                 lea     ecx, [ebp+var_2C]
.text$mn:00002034                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:00002039                 push    eax             ; int
.text$mn:0000203A                 lea     ecx, [ebp+var_2C]
.text$mn:0000203D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002042                 push    eax             ; wchar_t *
.text$mn:00002043                 mov     edx, [ebp+arg_10]
.text$mn:00002046                 mov     ecx, [edx]      ; this
.text$mn:00002048                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:0000204D                 mov     [ebp+var_38], eax
.text$mn:00002050                 mov     [ebp+var_34], 0
.text$mn:00002057
.text$mn:00002057 loc_2057:                               ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+196j
.text$mn:00002057                 cmp     [ebp+var_38], 0FFFFFFFFh
.text$mn:0000205B                 jz      short loc_20D6
.text$mn:0000205D                 cmp     [ebp+var_38], 0FFFFFFFEh
.text$mn:00002061                 jz      short loc_20D6
.text$mn:00002063                 push    0               ; __int32
.text$mn:00002065                 push    0               ; unsigned int
.text$mn:00002067                 push    891h            ; unsigned int
.text$mn:0000206C                 mov     eax, [ebp+arg_10]
.text$mn:0000206F                 mov     ecx, [eax]      ; this
.text$mn:00002071                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:00002076                 mov     [ebp+var_34], eax
.text$mn:00002079                 mov     ecx, [ebp+arg_C]
.text$mn:0000207C                 push    ecx
.text$mn:0000207D                 mov     edx, [ebp+var_38]
.text$mn:00002080                 push    edx
.text$mn:00002081                 mov     ecx, [ebp+var_48]
.text$mn:00002084                 call    ?isInZones@FunctionParser@@QAE_NHABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@Z ; FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)
.text$mn:00002089                 movzx   eax, al
.text$mn:0000208C                 test    eax, eax
.text$mn:0000208E                 jnz     short loc_20D4
.text$mn:00002090                 mov     ecx, [ebp+var_34]
.text$mn:00002093                 push    ecx             ; int
.text$mn:00002094                 mov     edx, [ebp+var_38]
.text$mn:00002097                 push    edx             ; int
.text$mn:00002098                 mov     eax, [ebp+lpString]
.text$mn:0000209B                 push    eax             ; lpString
.text$mn:0000209C                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:000020A2                 push    eax             ; int
.text$mn:000020A3                 mov     ecx, [ebp+lpString]
.text$mn:000020A6                 push    ecx             ; wchar_t *
.text$mn:000020A7                 mov     edx, [ebp+arg_10]
.text$mn:000020AA                 mov     ecx, [edx]      ; this
.text$mn:000020AC                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:000020B1                 mov     [ebp+var_40], eax
.text$mn:000020B4                 cmp     [ebp+var_40], 0FFFFFFFFh
.text$mn:000020B8                 jz      short loc_20CB
.text$mn:000020BA                 cmp     [ebp+var_40], 0FFFFFFFEh
.text$mn:000020BE                 jz      short loc_20CB
.text$mn:000020C0                 mov     eax, [ebp+var_30]
.text$mn:000020C3                 add     eax, 1
.text$mn:000020C6                 mov     [ebp+var_30], eax
.text$mn:000020C9                 jmp     short loc_20D4
.text$mn:000020CB ; ---------------------------------------------------------------------------
.text$mn:000020CB
.text$mn:000020CB loc_20CB:                               ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+140j
.text$mn:000020CB                                         ; FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+146j
.text$mn:000020CB                 mov     ecx, [ebp+var_30]
.text$mn:000020CE                 sub     ecx, 1
.text$mn:000020D1                 mov     [ebp+var_30], ecx
.text$mn:000020D4
.text$mn:000020D4 loc_20D4:                               ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+116j
.text$mn:000020D4                                         ; FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+151j
.text$mn:000020D4                 jmp     short loc_20E3
.text$mn:000020D6 ; ---------------------------------------------------------------------------
.text$mn:000020D6
.text$mn:000020D6 loc_20D6:                               ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+E3j
.text$mn:000020D6                                         ; FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+E9j
.text$mn:000020D6                 mov     [ebp+var_30], 0
.text$mn:000020DD                 mov     edx, [ebp+arg_0]
.text$mn:000020E0                 mov     [ebp+var_34], edx
.text$mn:000020E3
.text$mn:000020E3 loc_20E3:                               ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *):loc_20D4j
.text$mn:000020E3                 mov     eax, [ebp+var_3C]
.text$mn:000020E6                 push    eax             ; int
.text$mn:000020E7                 mov     ecx, [ebp+var_34]
.text$mn:000020EA                 push    ecx             ; int
.text$mn:000020EB                 lea     ecx, [ebp+var_2C]
.text$mn:000020EE                 call    ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::length(void)
.text$mn:000020F3                 push    eax             ; int
.text$mn:000020F4                 lea     ecx, [ebp+var_2C]
.text$mn:000020F7                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000020FC                 push    eax             ; wchar_t *
.text$mn:000020FD                 mov     edx, [ebp+arg_10]
.text$mn:00002100                 mov     ecx, [edx]      ; this
.text$mn:00002102                 call    ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z ; ScintillaEditView::searchInTarget(wchar_t const *,int,int,int)
.text$mn:00002107                 mov     [ebp+var_38], eax
.text$mn:0000210A                 cmp     [ebp+var_30], 0
.text$mn:0000210E                 jnz     loc_2057
.text$mn:00002114                 mov     eax, [ebp+var_34]
.text$mn:00002117                 mov     [ebp+var_44], eax
.text$mn:0000211A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002121                 lea     ecx, [ebp+var_2C]
.text$mn:00002124                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002129                 mov     eax, [ebp+var_44]
.text$mn:0000212C
.text$mn:0000212C loc_212C:                               ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+4Aj
.text$mn:0000212C                 mov     ecx, [ebp+var_C]
.text$mn:0000212F                 mov     large fs:0, ecx
.text$mn:00002136                 pop     ecx
.text$mn:00002137                 mov     ecx, [ebp+var_10]
.text$mn:0000213A                 xor     ecx, ebp
.text$mn:0000213C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002141                 mov     esp, ebp
.text$mn:00002143                 pop     ebp
.text$mn:00002144                 retn    14h
.text$mn:00002144 ?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z endp
.text$mn:00002144
.text$mn:00002144 ; ---------------------------------------------------------------------------
.text$mn:00002147                 align 4
.text$mn:00002148
.text$mn:00002148 ; =============== S U B R O U T I N E =======================================
.text$mn:00002148
.text$mn:00002148 ; Attributes: bp-based frame
.text$mn:00002148
.text$mn:00002148 ; public: virtual void __thiscall FunctionUnitParser::parse(class std::vector<struct foundInfo, class std::allocator<struct foundInfo>> &, unsigned int, unsigned int, class ScintillaEditView * *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00002148                 public ?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00002148 ?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00002148                                         ; DATA XREF: .rdata:const FunctionUnitParser::`vftable'o
.text$mn:00002148
.text$mn:00002148 var_44          = byte ptr -44h
.text$mn:00002148 var_34          = byte ptr -34h
.text$mn:00002148 var_24          = dword ptr -24h
.text$mn:00002148 var_20          = dword ptr -20h
.text$mn:00002148 var_1C          = dword ptr -1Ch
.text$mn:00002148 var_18          = dword ptr -18h
.text$mn:00002148 var_14          = dword ptr -14h
.text$mn:00002148 var_10          = dword ptr -10h
.text$mn:00002148 var_C           = dword ptr -0Ch
.text$mn:00002148 var_4           = dword ptr -4
.text$mn:00002148 arg_0           = dword ptr  8
.text$mn:00002148 arg_4           = dword ptr  0Ch
.text$mn:00002148 arg_8           = dword ptr  10h
.text$mn:00002148 arg_C           = dword ptr  14h
.text$mn:00002148 arg_10          = byte ptr  18h
.text$mn:00002148
.text$mn:00002148                 push    ebp
.text$mn:00002149                 mov     ebp, esp
.text$mn:0000214B                 push    0FFFFFFFFh
.text$mn:0000214D                 push    offset __ehhandler$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00002152                 mov     eax, large fs:0
.text$mn:00002158                 push    eax
.text$mn:00002159                 sub     esp, 38h
.text$mn:0000215C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002161                 xor     eax, ebp
.text$mn:00002163                 push    eax
.text$mn:00002164                 lea     eax, [ebp+var_C]
.text$mn:00002167                 mov     large fs:0, eax
.text$mn:0000216D                 mov     [ebp+var_14], ecx
.text$mn:00002170                 mov     [ebp+var_4], 0
.text$mn:00002177                 lea     ecx, [ebp+var_44]
.text$mn:0000217A                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:0000217F                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002183                 lea     ecx, [ebp+var_34]
.text$mn:00002186                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:0000218B                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000218F                 mov     eax, [ebp+arg_C]
.text$mn:00002192                 push    eax
.text$mn:00002193                 mov     ecx, [ebp+arg_8]
.text$mn:00002196                 push    ecx
.text$mn:00002197                 mov     edx, [ebp+arg_4]
.text$mn:0000219A                 push    edx
.text$mn:0000219B                 lea     eax, [ebp+var_44]
.text$mn:0000219E                 push    eax
.text$mn:0000219F                 mov     ecx, [ebp+var_14]
.text$mn:000021A2                 call    ?getCommentZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IIPAPAVScintillaEditView@@@Z ; FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)
.text$mn:000021A7                 mov     ecx, [ebp+arg_8]
.text$mn:000021AA                 push    ecx
.text$mn:000021AB                 mov     edx, [ebp+arg_4]
.text$mn:000021AE                 push    edx
.text$mn:000021AF                 lea     eax, [ebp+var_44]
.text$mn:000021B2                 push    eax
.text$mn:000021B3                 lea     ecx, [ebp+var_34]
.text$mn:000021B6                 push    ecx
.text$mn:000021B7                 mov     ecx, [ebp+var_14]
.text$mn:000021BA                 call    ?getInvertZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@0II@Z ; FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)
.text$mn:000021BF                 mov     [ebp+var_10], 0
.text$mn:000021C6                 lea     ecx, [ebp+var_34]
.text$mn:000021C9                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:000021CE                 mov     [ebp+var_18], eax
.text$mn:000021D1                 jmp     short loc_21DC
.text$mn:000021D3 ; ---------------------------------------------------------------------------
.text$mn:000021D3
.text$mn:000021D3 loc_21D3:                               ; CODE XREF: FunctionUnitParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+EFj
.text$mn:000021D3                 mov     edx, [ebp+var_10]
.text$mn:000021D6                 add     edx, 1
.text$mn:000021D9                 mov     [ebp+var_10], edx
.text$mn:000021DC
.text$mn:000021DC loc_21DC:                               ; CODE XREF: FunctionUnitParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+89j
.text$mn:000021DC                 mov     eax, [ebp+var_10]
.text$mn:000021DF                 cmp     eax, [ebp+var_18]
.text$mn:000021E2                 jnb     short loc_2239
.text$mn:000021E4                 push    0
.text$mn:000021E6                 sub     esp, 1Ch
.text$mn:000021E9                 mov     ecx, esp
.text$mn:000021EB                 mov     [ebp+var_20], esp
.text$mn:000021EE                 lea     edx, [ebp+arg_10]
.text$mn:000021F1                 push    edx
.text$mn:000021F2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000021F7                 mov     [ebp+var_1C], eax
.text$mn:000021FA                 mov     eax, [ebp+var_1C]
.text$mn:000021FD                 mov     [ebp+var_24], eax
.text$mn:00002200                 mov     byte ptr [ebp+var_4], 3
.text$mn:00002204                 mov     ecx, [ebp+arg_C]
.text$mn:00002207                 push    ecx
.text$mn:00002208                 mov     edx, [ebp+var_10]
.text$mn:0000220B                 push    edx
.text$mn:0000220C                 lea     ecx, [ebp+var_34]
.text$mn:0000220F                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00002214                 mov     eax, [eax+4]
.text$mn:00002217                 push    eax
.text$mn:00002218                 mov     ecx, [ebp+var_10]
.text$mn:0000221B                 push    ecx
.text$mn:0000221C                 lea     ecx, [ebp+var_34]
.text$mn:0000221F                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00002224                 mov     edx, [eax]
.text$mn:00002226                 push    edx
.text$mn:00002227                 mov     eax, [ebp+arg_0]
.text$mn:0000222A                 push    eax
.text$mn:0000222B                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000222F                 mov     ecx, [ebp+var_14]
.text$mn:00002232                 call    ?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)
.text$mn:00002237                 jmp     short loc_21D3
.text$mn:00002239 ; ---------------------------------------------------------------------------
.text$mn:00002239
.text$mn:00002239 loc_2239:                               ; CODE XREF: FunctionUnitParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+9Aj
.text$mn:00002239                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000223D                 lea     ecx, [ebp+var_34]
.text$mn:00002240                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00002245                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002249                 lea     ecx, [ebp+var_44]
.text$mn:0000224C                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00002251                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002258                 lea     ecx, [ebp+arg_10]
.text$mn:0000225B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002260                 mov     ecx, [ebp+var_C]
.text$mn:00002263                 mov     large fs:0, ecx
.text$mn:0000226A                 pop     ecx
.text$mn:0000226B                 mov     esp, ebp
.text$mn:0000226D                 pop     ebp
.text$mn:0000226E                 retn    2Ch
.text$mn:0000226E ?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:0000226E
.text$mn:0000226E ; ---------------------------------------------------------------------------
.text$mn:00002271                 align 8
.text$mn:00002278
.text$mn:00002278 ; =============== S U B R O U T I N E =======================================
.text$mn:00002278
.text$mn:00002278 ; Attributes: bp-based frame
.text$mn:00002278
.text$mn:00002278 ; public: virtual void __thiscall FunctionMixParser::parse(class std::vector<struct foundInfo, class std::allocator<struct foundInfo>> &, unsigned int, unsigned int, class ScintillaEditView * *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00002278                 public ?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00002278 ?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$mn:00002278                                         ; DATA XREF: .rdata:const FunctionMixParser::`vftable'o
.text$mn:00002278
.text$mn:00002278 var_94          = byte ptr -94h
.text$mn:00002278 var_84          = byte ptr -84h
.text$mn:00002278 var_74          = dword ptr -74h
.text$mn:00002278 var_70          = dword ptr -70h
.text$mn:00002278 var_6C          = dword ptr -6Ch
.text$mn:00002278 var_68          = dword ptr -68h
.text$mn:00002278 var_64          = dword ptr -64h
.text$mn:00002278 var_60          = dword ptr -60h
.text$mn:00002278 var_5C          = byte ptr -5Ch
.text$mn:00002278 var_4C          = byte ptr -4Ch
.text$mn:00002278 var_3C          = byte ptr -3Ch
.text$mn:00002278 var_2C          = dword ptr -2Ch
.text$mn:00002278 var_28          = dword ptr -28h
.text$mn:00002278 var_24          = dword ptr -24h
.text$mn:00002278 var_20          = dword ptr -20h
.text$mn:00002278 var_1C          = dword ptr -1Ch
.text$mn:00002278 var_18          = dword ptr -18h
.text$mn:00002278 var_14          = dword ptr -14h
.text$mn:00002278 var_10          = dword ptr -10h
.text$mn:00002278 var_C           = dword ptr -0Ch
.text$mn:00002278 var_4           = dword ptr -4
.text$mn:00002278 arg_0           = dword ptr  8
.text$mn:00002278 arg_4           = dword ptr  0Ch
.text$mn:00002278 arg_8           = dword ptr  10h
.text$mn:00002278 arg_C           = dword ptr  14h
.text$mn:00002278 arg_10          = byte ptr  18h
.text$mn:00002278
.text$mn:00002278                 push    ebp
.text$mn:00002279                 mov     ebp, esp
.text$mn:0000227B                 push    0FFFFFFFFh
.text$mn:0000227D                 push    offset __ehhandler$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$mn:00002282                 mov     eax, large fs:0
.text$mn:00002288                 push    eax
.text$mn:00002289                 sub     esp, 88h
.text$mn:0000228F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002294                 xor     eax, ebp
.text$mn:00002296                 push    eax
.text$mn:00002297                 lea     eax, [ebp+var_C]
.text$mn:0000229A                 mov     large fs:0, eax
.text$mn:000022A0                 mov     [ebp+var_10], ecx
.text$mn:000022A3                 mov     [ebp+var_4], 0
.text$mn:000022AA                 lea     ecx, [ebp+var_5C]
.text$mn:000022AD                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:000022B2                 mov     byte ptr [ebp+var_4], 1
.text$mn:000022B6                 lea     ecx, [ebp+var_3C]
.text$mn:000022B9                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:000022BE                 mov     byte ptr [ebp+var_4], 2
.text$mn:000022C2                 lea     ecx, [ebp+var_94]
.text$mn:000022C8                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:000022CD                 mov     byte ptr [ebp+var_4], 3
.text$mn:000022D1                 lea     ecx, [ebp+var_4C]
.text$mn:000022D4                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:000022D9                 mov     byte ptr [ebp+var_4], 4
.text$mn:000022DD                 mov     eax, [ebp+arg_C]
.text$mn:000022E0                 push    eax
.text$mn:000022E1                 mov     ecx, [ebp+arg_8]
.text$mn:000022E4                 push    ecx
.text$mn:000022E5                 mov     edx, [ebp+arg_4]
.text$mn:000022E8                 push    edx
.text$mn:000022E9                 lea     eax, [ebp+var_5C]
.text$mn:000022EC                 push    eax
.text$mn:000022ED                 mov     ecx, [ebp+var_10]
.text$mn:000022F0                 call    ?getCommentZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IIPAPAVScintillaEditView@@@Z ; FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)
.text$mn:000022F5                 sub     esp, 1Ch
.text$mn:000022F8                 mov     ecx, esp
.text$mn:000022FA                 mov     [ebp+var_70], esp
.text$mn:000022FD                 lea     edx, [ebp+arg_10]
.text$mn:00002300                 push    edx
.text$mn:00002301                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002306                 mov     [ebp+var_28], eax
.text$mn:00002309                 mov     eax, [ebp+var_28]
.text$mn:0000230C                 mov     [ebp+var_60], eax
.text$mn:0000230F                 mov     byte ptr [ebp+var_4], 5
.text$mn:00002313                 mov     ecx, [ebp+arg_C]
.text$mn:00002316                 push    ecx
.text$mn:00002317                 mov     edx, [ebp+arg_8]
.text$mn:0000231A                 push    edx
.text$mn:0000231B                 mov     eax, [ebp+arg_4]
.text$mn:0000231E                 push    eax
.text$mn:0000231F                 lea     ecx, [ebp+var_5C]
.text$mn:00002322                 push    ecx
.text$mn:00002323                 lea     edx, [ebp+var_3C]
.text$mn:00002326                 push    edx
.text$mn:00002327                 mov     eax, [ebp+arg_0]
.text$mn:0000232A                 push    eax
.text$mn:0000232B                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000232F                 mov     ecx, [ebp+var_10]
.text$mn:00002332                 call    ?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00002337                 mov     [ebp+var_14], 0
.text$mn:0000233E                 lea     ecx, [ebp+var_3C]
.text$mn:00002341                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:00002346                 mov     [ebp+var_24], eax
.text$mn:00002349                 jmp     short loc_2354
.text$mn:0000234B ; ---------------------------------------------------------------------------
.text$mn:0000234B
.text$mn:0000234B loc_234B:                               ; CODE XREF: FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+15Ej
.text$mn:0000234B                 mov     ecx, [ebp+var_14]
.text$mn:0000234E                 add     ecx, 1
.text$mn:00002351                 mov     [ebp+var_14], ecx
.text$mn:00002354
.text$mn:00002354 loc_2354:                               ; CODE XREF: FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+D1j
.text$mn:00002354                 mov     edx, [ebp+var_14]
.text$mn:00002357                 cmp     edx, [ebp+var_24]
.text$mn:0000235A                 jnb     short loc_23DB
.text$mn:0000235C                 lea     ecx, [ebp+var_84]
.text$mn:00002362                 call    ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:00002367                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000236B                 sub     esp, 1Ch
.text$mn:0000236E                 mov     ecx, esp
.text$mn:00002370                 mov     [ebp+var_64], esp
.text$mn:00002373                 lea     eax, [ebp+arg_10]
.text$mn:00002376                 push    eax
.text$mn:00002377                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000237C                 mov     [ebp+var_1C], eax
.text$mn:0000237F                 mov     ecx, [ebp+var_1C]
.text$mn:00002382                 mov     [ebp+var_6C], ecx
.text$mn:00002385                 mov     byte ptr [ebp+var_4], 7
.text$mn:00002389                 mov     edx, [ebp+arg_C]
.text$mn:0000238C                 push    edx
.text$mn:0000238D                 mov     eax, [ebp+var_14]
.text$mn:00002390                 push    eax
.text$mn:00002391                 lea     ecx, [ebp+var_3C]
.text$mn:00002394                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00002399                 mov     ecx, [eax+4]
.text$mn:0000239C                 push    ecx
.text$mn:0000239D                 mov     edx, [ebp+var_14]
.text$mn:000023A0                 push    edx
.text$mn:000023A1                 lea     ecx, [ebp+var_3C]
.text$mn:000023A4                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:000023A9                 mov     eax, [eax]
.text$mn:000023AB                 push    eax
.text$mn:000023AC                 lea     ecx, [ebp+var_5C]
.text$mn:000023AF                 push    ecx
.text$mn:000023B0                 lea     edx, [ebp+var_84]
.text$mn:000023B6                 push    edx
.text$mn:000023B7                 mov     eax, [ebp+arg_0]
.text$mn:000023BA                 push    eax
.text$mn:000023BB                 mov     byte ptr [ebp+var_4], 6
.text$mn:000023BF                 mov     ecx, [ebp+var_10]
.text$mn:000023C2                 call    ?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:000023C7                 mov     byte ptr [ebp+var_4], 4
.text$mn:000023CB                 lea     ecx, [ebp+var_84]
.text$mn:000023D1                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:000023D6                 jmp     loc_234B
.text$mn:000023DB ; ---------------------------------------------------------------------------
.text$mn:000023DB
.text$mn:000023DB loc_23DB:                               ; CODE XREF: FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+E2j
.text$mn:000023DB                 mov     ecx, [ebp+arg_8]
.text$mn:000023DE                 push    ecx
.text$mn:000023DF                 mov     edx, [ebp+arg_4]
.text$mn:000023E2                 push    edx
.text$mn:000023E3                 lea     eax, [ebp+var_3C]
.text$mn:000023E6                 push    eax
.text$mn:000023E7                 lea     ecx, [ebp+var_4C]
.text$mn:000023EA                 push    ecx
.text$mn:000023EB                 mov     ecx, [ebp+var_10]
.text$mn:000023EE                 call    ?getInvertZones@FunctionParser@@IAEXAAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@0II@Z ; FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)
.text$mn:000023F3                 mov     edx, [ebp+var_10]
.text$mn:000023F6                 cmp     dword ptr [edx+104h], 0
.text$mn:000023FD                 jz      loc_2483
.text$mn:00002403                 mov     [ebp+var_18], 0
.text$mn:0000240A                 lea     ecx, [ebp+var_4C]
.text$mn:0000240D                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:00002412                 mov     [ebp+var_2C], eax
.text$mn:00002415                 jmp     short loc_2420
.text$mn:00002417 ; ---------------------------------------------------------------------------
.text$mn:00002417
.text$mn:00002417 loc_2417:                               ; CODE XREF: FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+209j
.text$mn:00002417                 mov     eax, [ebp+var_18]
.text$mn:0000241A                 add     eax, 1
.text$mn:0000241D                 mov     [ebp+var_18], eax
.text$mn:00002420
.text$mn:00002420 loc_2420:                               ; CODE XREF: FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+19Dj
.text$mn:00002420                 mov     ecx, [ebp+var_18]
.text$mn:00002423                 cmp     ecx, [ebp+var_2C]
.text$mn:00002426                 jnb     short loc_2483
.text$mn:00002428                 push    0
.text$mn:0000242A                 sub     esp, 1Ch
.text$mn:0000242D                 mov     ecx, esp
.text$mn:0000242F                 mov     [ebp+var_68], esp
.text$mn:00002432                 lea     edx, [ebp+arg_10]
.text$mn:00002435                 push    edx
.text$mn:00002436                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000243B                 mov     [ebp+var_20], eax
.text$mn:0000243E                 mov     eax, [ebp+var_20]
.text$mn:00002441                 mov     [ebp+var_74], eax
.text$mn:00002444                 mov     byte ptr [ebp+var_4], 8
.text$mn:00002448                 mov     ecx, [ebp+arg_C]
.text$mn:0000244B                 push    ecx
.text$mn:0000244C                 mov     edx, [ebp+var_18]
.text$mn:0000244F                 push    edx
.text$mn:00002450                 lea     ecx, [ebp+var_4C]
.text$mn:00002453                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00002458                 mov     eax, [eax+4]
.text$mn:0000245B                 push    eax
.text$mn:0000245C                 mov     ecx, [ebp+var_18]
.text$mn:0000245F                 push    ecx
.text$mn:00002460                 lea     ecx, [ebp+var_4C]
.text$mn:00002463                 call    ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)
.text$mn:00002468                 mov     edx, [eax]
.text$mn:0000246A                 push    edx
.text$mn:0000246B                 mov     eax, [ebp+arg_0]
.text$mn:0000246E                 push    eax
.text$mn:0000246F                 mov     byte ptr [ebp+var_4], 4
.text$mn:00002473                 mov     ecx, [ebp+var_10]
.text$mn:00002476                 mov     ecx, [ecx+104h]
.text$mn:0000247C                 call    ?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)
.text$mn:00002481                 jmp     short loc_2417
.text$mn:00002483 ; ---------------------------------------------------------------------------
.text$mn:00002483
.text$mn:00002483 loc_2483:                               ; CODE XREF: FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+185j
.text$mn:00002483                                         ; FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+1AEj
.text$mn:00002483                 mov     byte ptr [ebp+var_4], 3
.text$mn:00002487                 lea     ecx, [ebp+var_4C]
.text$mn:0000248A                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:0000248F                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002493                 lea     ecx, [ebp+var_94]
.text$mn:00002499                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:0000249E                 mov     byte ptr [ebp+var_4], 1
.text$mn:000024A2                 lea     ecx, [ebp+var_3C]
.text$mn:000024A5                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:000024AA                 mov     byte ptr [ebp+var_4], 0
.text$mn:000024AE                 lea     ecx, [ebp+var_5C]
.text$mn:000024B1                 call    ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$mn:000024B6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000024BD                 lea     ecx, [ebp+arg_10]
.text$mn:000024C0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000024C5                 mov     ecx, [ebp+var_C]
.text$mn:000024C8                 mov     large fs:0, ecx
.text$mn:000024CF                 pop     ecx
.text$mn:000024D0                 mov     esp, ebp
.text$mn:000024D2                 pop     ebp
.text$mn:000024D3                 retn    2Ch
.text$mn:000024D3 ?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$mn:000024D3
.text$mn:000024D3 ; ---------------------------------------------------------------------------
.text$mn:000024D6                 align 4
.text$mn:000024D8
.text$mn:000024D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000024D8
.text$mn:000024D8 ; Attributes: bp-based frame
.text$mn:000024D8
.text$mn:000024D8 ; _DWORD __thiscall FunctionParsersManager::~FunctionParsersManager(FunctionParsersManager *__hidden this)
.text$mn:000024D8                 public ??1FunctionParsersManager@@QAE@XZ
.text$mn:000024D8 ??1FunctionParsersManager@@QAE@XZ proc near
.text$mn:000024D8
.text$mn:000024D8 var_30          = dword ptr -30h
.text$mn:000024D8 var_2C          = dword ptr -2Ch
.text$mn:000024D8 var_28          = dword ptr -28h
.text$mn:000024D8 var_24          = dword ptr -24h
.text$mn:000024D8 var_20          = dword ptr -20h
.text$mn:000024D8 var_1C          = dword ptr -1Ch
.text$mn:000024D8 var_18          = dword ptr -18h
.text$mn:000024D8 var_14          = dword ptr -14h
.text$mn:000024D8 var_10          = dword ptr -10h
.text$mn:000024D8 var_C           = dword ptr -0Ch
.text$mn:000024D8 var_4           = dword ptr -4
.text$mn:000024D8
.text$mn:000024D8                 push    ebp
.text$mn:000024D9                 mov     ebp, esp
.text$mn:000024DB                 push    0FFFFFFFFh
.text$mn:000024DD                 push    offset __ehhandler$??1FunctionParsersManager@@QAE@XZ
.text$mn:000024E2                 mov     eax, large fs:0
.text$mn:000024E8                 push    eax
.text$mn:000024E9                 sub     esp, 24h
.text$mn:000024EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000024F1                 xor     eax, ebp
.text$mn:000024F3                 push    eax
.text$mn:000024F4                 lea     eax, [ebp+var_C]
.text$mn:000024F7                 mov     large fs:0, eax
.text$mn:000024FD                 mov     [ebp+var_10], ecx
.text$mn:00002500                 mov     [ebp+var_4], 1
.text$mn:00002507                 mov     [ebp+var_14], 0
.text$mn:0000250E                 mov     ecx, [ebp+var_10]
.text$mn:00002511                 add     ecx, 4
.text$mn:00002514                 call    ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::size(void)
.text$mn:00002519                 mov     [ebp+var_20], eax
.text$mn:0000251C                 jmp     short loc_2527
.text$mn:0000251E ; ---------------------------------------------------------------------------
.text$mn:0000251E
.text$mn:0000251E loc_251E:                               ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void):loc_2565j
.text$mn:0000251E                 mov     eax, [ebp+var_14]
.text$mn:00002521                 add     eax, 1
.text$mn:00002524                 mov     [ebp+var_14], eax
.text$mn:00002527
.text$mn:00002527 loc_2527:                               ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+44j
.text$mn:00002527                 mov     ecx, [ebp+var_14]
.text$mn:0000252A                 cmp     ecx, [ebp+var_20]
.text$mn:0000252D                 jnb     short loc_2567
.text$mn:0000252F                 mov     edx, [ebp+var_14]
.text$mn:00002532                 push    edx
.text$mn:00002533                 mov     ecx, [ebp+var_10]
.text$mn:00002536                 add     ecx, 4
.text$mn:00002539                 call    ??A?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEAAPAVFunctionParser@@I@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)
.text$mn:0000253E                 mov     eax, [eax]
.text$mn:00002540                 mov     [ebp+var_24], eax
.text$mn:00002543                 mov     ecx, [ebp+var_24]
.text$mn:00002546                 mov     [ebp+var_1C], ecx
.text$mn:00002549                 cmp     [ebp+var_1C], 0
.text$mn:0000254D                 jz      short loc_255E
.text$mn:0000254F                 push    1
.text$mn:00002551                 mov     ecx, [ebp+var_1C]
.text$mn:00002554                 call    ??_GFunctionParser@@QAEPAXI@Z ; FunctionParser::`scalar deleting destructor'(uint)
.text$mn:00002559                 mov     [ebp+var_28], eax
.text$mn:0000255C                 jmp     short loc_2565
.text$mn:0000255E ; ---------------------------------------------------------------------------
.text$mn:0000255E
.text$mn:0000255E loc_255E:                               ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+75j
.text$mn:0000255E                 mov     [ebp+var_28], 0
.text$mn:00002565
.text$mn:00002565 loc_2565:                               ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+84j
.text$mn:00002565                 jmp     short loc_251E
.text$mn:00002567 ; ---------------------------------------------------------------------------
.text$mn:00002567
.text$mn:00002567 loc_2567:                               ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+55j
.text$mn:00002567                 mov     edx, [ebp+var_10]
.text$mn:0000256A                 cmp     dword ptr [edx+24h], 0
.text$mn:0000256E                 jz      short loc_259F
.text$mn:00002570                 mov     eax, [ebp+var_10]
.text$mn:00002573                 mov     ecx, [eax+24h]
.text$mn:00002576                 mov     [ebp+var_2C], ecx
.text$mn:00002579                 mov     edx, [ebp+var_2C]
.text$mn:0000257C                 mov     [ebp+var_18], edx
.text$mn:0000257F                 cmp     [ebp+var_18], 0
.text$mn:00002583                 jz      short loc_2598
.text$mn:00002585                 push    1
.text$mn:00002587                 mov     eax, [ebp+var_18]
.text$mn:0000258A                 mov     edx, [eax]
.text$mn:0000258C                 mov     ecx, [ebp+var_18]
.text$mn:0000258F                 mov     eax, [edx]
.text$mn:00002591                 call    eax
.text$mn:00002593                 mov     [ebp+var_30], eax
.text$mn:00002596                 jmp     short loc_259F
.text$mn:00002598 ; ---------------------------------------------------------------------------
.text$mn:00002598
.text$mn:00002598 loc_2598:                               ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+ABj
.text$mn:00002598                 mov     [ebp+var_30], 0
.text$mn:0000259F
.text$mn:0000259F loc_259F:                               ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+96j
.text$mn:0000259F                                         ; FunctionParsersManager::~FunctionParsersManager(void)+BEj
.text$mn:0000259F                 mov     byte ptr [ebp+var_4], 0
.text$mn:000025A3                 mov     ecx, [ebp+var_10]
.text$mn:000025A6                 add     ecx, 14h
.text$mn:000025A9                 call    ??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::~vector<AssociationInfo,std::allocator<AssociationInfo>>(void)
.text$mn:000025AE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000025B5                 mov     ecx, [ebp+var_10]
.text$mn:000025B8                 add     ecx, 4
.text$mn:000025BB                 call    ??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::~vector<FunctionParser *,std::allocator<FunctionParser *>>(void)
.text$mn:000025C0                 mov     ecx, [ebp+var_C]
.text$mn:000025C3                 mov     large fs:0, ecx
.text$mn:000025CA                 pop     ecx
.text$mn:000025CB                 mov     esp, ebp
.text$mn:000025CD                 pop     ebp
.text$mn:000025CE                 retn
.text$mn:000025CE ??1FunctionParsersManager@@QAE@XZ endp
.text$mn:000025CE
.text$mn:000025CE ; ---------------------------------------------------------------------------
.text$mn:000025CF                 db 9 dup(0CCh)
.text$mn:000025D8
.text$mn:000025D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000025D8
.text$mn:000025D8 ; Attributes: bp-based frame
.text$mn:000025D8
.text$mn:000025D8 ; public: bool __thiscall FunctionParsersManager::init(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class ScintillaEditView * *)
.text$mn:000025D8                 public ?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z
.text$mn:000025D8 ?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z proc near
.text$mn:000025D8
.text$mn:000025D8 var_20          = dword ptr -20h
.text$mn:000025D8 var_1C          = dword ptr -1Ch
.text$mn:000025D8 var_18          = dword ptr -18h
.text$mn:000025D8 var_14          = dword ptr -14h
.text$mn:000025D8 var_E           = byte ptr -0Eh
.text$mn:000025D8 var_D           = byte ptr -0Dh
.text$mn:000025D8 var_C           = dword ptr -0Ch
.text$mn:000025D8 var_4           = dword ptr -4
.text$mn:000025D8 arg_0           = byte ptr  8
.text$mn:000025D8 arg_1C          = dword ptr  24h
.text$mn:000025D8
.text$mn:000025D8                 push    ebp
.text$mn:000025D9                 mov     ebp, esp
.text$mn:000025DB                 push    0FFFFFFFFh
.text$mn:000025DD                 push    offset __ehhandler$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z
.text$mn:000025E2                 mov     eax, large fs:0
.text$mn:000025E8                 push    eax
.text$mn:000025E9                 sub     esp, 14h
.text$mn:000025EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000025F1                 xor     eax, ebp
.text$mn:000025F3                 push    eax
.text$mn:000025F4                 lea     eax, [ebp+var_C]
.text$mn:000025F7                 mov     large fs:0, eax
.text$mn:000025FD                 mov     [ebp+var_14], ecx
.text$mn:00002600                 mov     [ebp+var_4], 0
.text$mn:00002607                 mov     eax, [ebp+var_14]
.text$mn:0000260A                 mov     ecx, [ebp+arg_1C]
.text$mn:0000260D                 mov     [eax], ecx
.text$mn:0000260F                 mov     [ebp+var_D], 0
.text$mn:00002613                 lea     ecx, [ebp+arg_0]
.text$mn:00002616                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000261B                 push    eax             ; pszPath
.text$mn:0000261C                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00002622                 test    eax, eax
.text$mn:00002624                 jz      short loc_2689
.text$mn:00002626                 push    74h ; 't'       ; unsigned int
.text$mn:00002628                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000262D                 add     esp, 4
.text$mn:00002630                 mov     [ebp+var_18], eax
.text$mn:00002633                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002637                 cmp     [ebp+var_18], 0
.text$mn:0000263B                 jz      short loc_264E
.text$mn:0000263D                 lea     edx, [ebp+arg_0]
.text$mn:00002640                 push    edx
.text$mn:00002641                 mov     ecx, [ebp+var_18]
.text$mn:00002644                 call    ??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; TiXmlDocument::TiXmlDocument(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002649                 mov     [ebp+var_1C], eax
.text$mn:0000264C                 jmp     short loc_2655
.text$mn:0000264E ; ---------------------------------------------------------------------------
.text$mn:0000264E
.text$mn:0000264E loc_264E:                               ; CODE XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+63j
.text$mn:0000264E                 mov     [ebp+var_1C], 0
.text$mn:00002655
.text$mn:00002655 loc_2655:                               ; CODE XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+74j
.text$mn:00002655                 mov     eax, [ebp+var_1C]
.text$mn:00002658                 mov     [ebp+var_20], eax
.text$mn:0000265B                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000265F                 mov     ecx, [ebp+var_14]
.text$mn:00002662                 mov     edx, [ebp+var_20]
.text$mn:00002665                 mov     [ecx+24h], edx
.text$mn:00002668                 mov     eax, [ebp+var_14]
.text$mn:0000266B                 mov     ecx, [eax+24h]  ; this
.text$mn:0000266E                 call    ?LoadFile@TiXmlDocument@@QAE_NXZ ; TiXmlDocument::LoadFile(void)
.text$mn:00002673                 mov     [ebp+var_D], al
.text$mn:00002676                 movzx   ecx, [ebp+var_D]
.text$mn:0000267A                 test    ecx, ecx
.text$mn:0000267C                 jz      short loc_2689
.text$mn:0000267E                 mov     ecx, [ebp+var_14] ; this
.text$mn:00002681                 call    ?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ ; FunctionParsersManager::getFuncListFromXmlTree(void)
.text$mn:00002686                 mov     [ebp+var_D], al
.text$mn:00002689
.text$mn:00002689 loc_2689:                               ; CODE XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+4Cj
.text$mn:00002689                                         ; FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+A4j
.text$mn:00002689                 mov     dl, [ebp+var_D]
.text$mn:0000268C                 mov     [ebp+var_E], dl
.text$mn:0000268F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002696                 lea     ecx, [ebp+arg_0]
.text$mn:00002699                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000269E                 mov     al, [ebp+var_E]
.text$mn:000026A1                 mov     ecx, [ebp+var_C]
.text$mn:000026A4                 mov     large fs:0, ecx
.text$mn:000026AB                 pop     ecx
.text$mn:000026AC                 mov     esp, ebp
.text$mn:000026AE                 pop     ebp
.text$mn:000026AF                 retn    20h
.text$mn:000026AF ?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z endp
.text$mn:000026AF
.text$mn:000026AF ; ---------------------------------------------------------------------------
.text$mn:000026B2                 align 8
.text$mn:000026B8
.text$mn:000026B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000026B8
.text$mn:000026B8 ; Attributes: bp-based frame
.text$mn:000026B8
.text$mn:000026B8 ; int __stdcall FunctionParsersManager::parse(int, struct AssociationInfo *)
.text$mn:000026B8                 public ?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z
.text$mn:000026B8 ?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z proc near
.text$mn:000026B8
.text$mn:000026B8 var_24          = dword ptr -24h
.text$mn:000026B8 var_20          = dword ptr -20h
.text$mn:000026B8 var_1C          = dword ptr -1Ch
.text$mn:000026B8 var_18          = dword ptr -18h
.text$mn:000026B8 var_14          = dword ptr -14h
.text$mn:000026B8 var_10          = dword ptr -10h
.text$mn:000026B8 var_C           = dword ptr -0Ch
.text$mn:000026B8 var_4           = dword ptr -4
.text$mn:000026B8 arg_0           = dword ptr  8
.text$mn:000026B8 arg_4           = dword ptr  0Ch
.text$mn:000026B8
.text$mn:000026B8                 push    ebp
.text$mn:000026B9                 mov     ebp, esp
.text$mn:000026BB                 push    0FFFFFFFFh
.text$mn:000026BD                 push    offset __ehhandler$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z
.text$mn:000026C2                 mov     eax, large fs:0
.text$mn:000026C8                 push    eax
.text$mn:000026C9                 sub     esp, 18h
.text$mn:000026CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000026D1                 xor     eax, ebp
.text$mn:000026D3                 push    eax
.text$mn:000026D4                 lea     eax, [ebp+var_C]
.text$mn:000026D7                 mov     large fs:0, eax
.text$mn:000026DD                 mov     [ebp+var_10], ecx
.text$mn:000026E0                 mov     eax, [ebp+var_10]
.text$mn:000026E3                 cmp     dword ptr [eax+24h], 0
.text$mn:000026E7                 jnz     short loc_26ED
.text$mn:000026E9                 xor     al, al
.text$mn:000026EB                 jmp     short loc_275C
.text$mn:000026ED ; ---------------------------------------------------------------------------
.text$mn:000026ED
.text$mn:000026ED loc_26ED:                               ; CODE XREF: FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)+2Fj
.text$mn:000026ED                 mov     ecx, [ebp+arg_4]
.text$mn:000026F0                 push    ecx             ; struct AssociationInfo *
.text$mn:000026F1                 mov     ecx, [ebp+var_10] ; this
.text$mn:000026F4                 call    ?getParser@FunctionParsersManager@@AAEPAVFunctionParser@@ABUAssociationInfo@@@Z ; FunctionParsersManager::getParser(AssociationInfo const &)
.text$mn:000026F9                 mov     [ebp+var_14], eax
.text$mn:000026FC                 cmp     [ebp+var_14], 0
.text$mn:00002700                 jnz     short loc_2706
.text$mn:00002702                 xor     al, al
.text$mn:00002704                 jmp     short loc_275C
.text$mn:00002706 ; ---------------------------------------------------------------------------
.text$mn:00002706
.text$mn:00002706 loc_2706:                               ; CODE XREF: FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)+48j
.text$mn:00002706                 mov     edx, [ebp+var_10]
.text$mn:00002709                 mov     eax, [edx]
.text$mn:0000270B                 mov     ecx, [eax]      ; this
.text$mn:0000270D                 call    ?getCurrentDocLen@ScintillaEditView@@QBEHXZ ; ScintillaEditView::getCurrentDocLen(void)
.text$mn:00002712                 mov     [ebp+var_1C], eax
.text$mn:00002715                 sub     esp, 1Ch
.text$mn:00002718                 mov     ecx, esp
.text$mn:0000271A                 mov     [ebp+var_20], esp
.text$mn:0000271D                 push    offset $SG156267 ; Str
.text$mn:00002722                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002727                 mov     [ebp+var_18], eax
.text$mn:0000272A                 mov     ecx, [ebp+var_18]
.text$mn:0000272D                 mov     [ebp+var_24], ecx
.text$mn:00002730                 mov     [ebp+var_4], 0
.text$mn:00002737                 mov     edx, [ebp+var_10]
.text$mn:0000273A                 mov     eax, [edx]
.text$mn:0000273C                 push    eax
.text$mn:0000273D                 mov     ecx, [ebp+var_1C]
.text$mn:00002740                 push    ecx
.text$mn:00002741                 push    0
.text$mn:00002743                 mov     edx, [ebp+arg_0]
.text$mn:00002746                 push    edx
.text$mn:00002747                 mov     eax, [ebp+var_14]
.text$mn:0000274A                 mov     edx, [eax]
.text$mn:0000274C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002753                 mov     ecx, [ebp+var_14]
.text$mn:00002756                 mov     eax, [edx]
.text$mn:00002758                 call    eax
.text$mn:0000275A                 mov     al, 1
.text$mn:0000275C
.text$mn:0000275C loc_275C:                               ; CODE XREF: FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)+33j
.text$mn:0000275C                                         ; FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)+4Cj
.text$mn:0000275C                 mov     ecx, [ebp+var_C]
.text$mn:0000275F                 mov     large fs:0, ecx
.text$mn:00002766                 pop     ecx
.text$mn:00002767                 mov     esp, ebp
.text$mn:00002769                 pop     ebp
.text$mn:0000276A                 retn    8
.text$mn:0000276A ?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z endp
.text$mn:0000276A
.text$mn:0000276A ; ---------------------------------------------------------------------------
.text$mn:0000276D                 db 0Bh dup(0CCh)
.text$mn:00002778
.text$mn:00002778 ; =============== S U B R O U T I N E =======================================
.text$mn:00002778
.text$mn:00002778 ; Attributes: bp-based frame
.text$mn:00002778
.text$mn:00002778 ; void __thiscall FunctionParsersManager::writeFunctionListXml(FunctionParsersManager *this, const wchar_t *)
.text$mn:00002778                 public ?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z
.text$mn:00002778 ?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z proc near
.text$mn:00002778
.text$mn:00002778 var_68          = dword ptr -68h
.text$mn:00002778 var_64          = byte ptr -64h
.text$mn:00002778 var_48          = byte ptr -48h
.text$mn:00002778 var_2C          = byte ptr -2Ch
.text$mn:00002778 var_10          = dword ptr -10h
.text$mn:00002778 var_C           = dword ptr -0Ch
.text$mn:00002778 var_4           = dword ptr -4
.text$mn:00002778 Str             = dword ptr  8
.text$mn:00002778
.text$mn:00002778                 push    ebp
.text$mn:00002779                 mov     ebp, esp
.text$mn:0000277B                 push    0FFFFFFFFh
.text$mn:0000277D                 push    offset __ehhandler$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z
.text$mn:00002782                 mov     eax, large fs:0
.text$mn:00002788                 push    eax
.text$mn:00002789                 sub     esp, 5Ch
.text$mn:0000278C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002791                 xor     eax, ebp
.text$mn:00002793                 mov     [ebp+var_10], eax
.text$mn:00002796                 push    eax
.text$mn:00002797                 lea     eax, [ebp+var_C]
.text$mn:0000279A                 mov     large fs:0, eax
.text$mn:000027A0                 mov     [ebp+var_68], ecx
.text$mn:000027A3                 mov     eax, [ebp+Str]
.text$mn:000027A6                 push    eax             ; Str
.text$mn:000027A7                 lea     ecx, [ebp+var_2C]
.text$mn:000027AA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000027AF                 mov     [ebp+var_4], 0
.text$mn:000027B6                 push    offset $SG154979 ; "functionList.xml"
.text$mn:000027BB                 lea     ecx, [ebp+var_48]
.text$mn:000027BE                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000027C3                 mov     byte ptr [ebp+var_4], 1
.text$mn:000027C7                 lea     ecx, [ebp+var_48]
.text$mn:000027CA                 push    ecx
.text$mn:000027CB                 lea     edx, [ebp+var_2C]
.text$mn:000027CE                 push    edx
.text$mn:000027CF                 lea     eax, [ebp+var_64]
.text$mn:000027D2                 push    eax
.text$mn:000027D3                 call    ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z ; PathAppendW(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000027D8                 add     esp, 0Ch
.text$mn:000027DB                 lea     ecx, [ebp+var_64]
.text$mn:000027DE                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000027E3                 mov     byte ptr [ebp+var_4], 0
.text$mn:000027E7                 lea     ecx, [ebp+var_48]
.text$mn:000027EA                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000027EF                 mov     ecx, [ebp+var_68]
.text$mn:000027F2                 cmp     dword ptr [ecx+24h], 0
.text$mn:000027F6                 jz      short loc_280C
.text$mn:000027F8                 lea     ecx, [ebp+var_2C]
.text$mn:000027FB                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002800                 push    eax             ; wchar_t *
.text$mn:00002801                 mov     edx, [ebp+var_68]
.text$mn:00002804                 mov     ecx, [edx+24h]  ; this
.text$mn:00002807                 call    ?SaveFile@TiXmlDocument@@QBE_NPB_W@Z ; TiXmlDocument::SaveFile(wchar_t const *)
.text$mn:0000280C
.text$mn:0000280C loc_280C:                               ; CODE XREF: FunctionParsersManager::writeFunctionListXml(wchar_t const *)+7Ej
.text$mn:0000280C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002813                 lea     ecx, [ebp+var_2C]
.text$mn:00002816                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000281B                 mov     ecx, [ebp+var_C]
.text$mn:0000281E                 mov     large fs:0, ecx
.text$mn:00002825                 pop     ecx
.text$mn:00002826                 mov     ecx, [ebp+var_10]
.text$mn:00002829                 xor     ecx, ebp
.text$mn:0000282B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00002830                 mov     esp, ebp
.text$mn:00002832                 pop     ebp
.text$mn:00002833                 retn    4
.text$mn:00002833 ?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z endp
.text$mn:00002833
.text$mn:00002833 ; ---------------------------------------------------------------------------
.text$mn:00002836                 align 4
.text$mn:00002838
.text$mn:00002838 ; =============== S U B R O U T I N E =======================================
.text$mn:00002838
.text$mn:00002838 ; Attributes: bp-based frame
.text$mn:00002838
.text$mn:00002838 ; bool __thiscall FunctionParsersManager::getFuncListFromXmlTree(FunctionParsersManager *__hidden this)
.text$mn:00002838                 public ?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ
.text$mn:00002838 ?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ proc near
.text$mn:00002838                                         ; CODE XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+A9p
.text$mn:00002838
.text$mn:00002838 var_34C         = dword ptr -34Ch
.text$mn:00002838 var_348         = dword ptr -348h
.text$mn:00002838 var_344         = dword ptr -344h
.text$mn:00002838 var_340         = dword ptr -340h
.text$mn:00002838 var_33C         = dword ptr -33Ch
.text$mn:00002838 var_338         = dword ptr -338h
.text$mn:00002838 var_334         = dword ptr -334h
.text$mn:00002838 var_330         = dword ptr -330h
.text$mn:00002838 var_32C         = dword ptr -32Ch
.text$mn:00002838 var_328         = dword ptr -328h
.text$mn:00002838 var_324         = dword ptr -324h
.text$mn:00002838 var_320         = dword ptr -320h
.text$mn:00002838 var_31C         = dword ptr -31Ch
.text$mn:00002838 var_318         = dword ptr -318h
.text$mn:00002838 var_314         = dword ptr -314h
.text$mn:00002838 var_310         = dword ptr -310h
.text$mn:00002838 var_30C         = dword ptr -30Ch
.text$mn:00002838 var_308         = dword ptr -308h
.text$mn:00002838 var_304         = dword ptr -304h
.text$mn:00002838 var_300         = dword ptr -300h
.text$mn:00002838 var_2FC         = dword ptr -2FCh
.text$mn:00002838 var_2F8         = dword ptr -2F8h
.text$mn:00002838 var_2F4         = dword ptr -2F4h
.text$mn:00002838 var_2F0         = dword ptr -2F0h
.text$mn:00002838 var_2EC         = dword ptr -2ECh
.text$mn:00002838 var_2DC         = dword ptr -2DCh
.text$mn:00002838 var_2D8         = dword ptr -2D8h
.text$mn:00002838 var_2C8         = dword ptr -2C8h
.text$mn:00002838 var_2C4         = dword ptr -2C4h
.text$mn:00002838 var_2C0         = dword ptr -2C0h
.text$mn:00002838 var_2BC         = dword ptr -2BCh
.text$mn:00002838 var_2B8         = dword ptr -2B8h
.text$mn:00002838 var_2B4         = dword ptr -2B4h
.text$mn:00002838 var_2B0         = dword ptr -2B0h
.text$mn:00002838 var_2AC         = dword ptr -2ACh
.text$mn:00002838 var_2A8         = dword ptr -2A8h
.text$mn:00002838 var_2A4         = dword ptr -2A4h
.text$mn:00002838 var_2A0         = dword ptr -2A0h
.text$mn:00002838 var_29C         = dword ptr -29Ch
.text$mn:00002838 var_298         = dword ptr -298h
.text$mn:00002838 var_294         = dword ptr -294h
.text$mn:00002838 var_290         = dword ptr -290h
.text$mn:00002838 var_28C         = dword ptr -28Ch
.text$mn:00002838 var_288         = dword ptr -288h
.text$mn:00002838 var_284         = dword ptr -284h
.text$mn:00002838 var_280         = dword ptr -280h
.text$mn:00002838 var_27C         = dword ptr -27Ch
.text$mn:00002838 var_278         = dword ptr -278h
.text$mn:00002838 var_274         = dword ptr -274h
.text$mn:00002838 var_270         = dword ptr -270h
.text$mn:00002838 var_26C         = dword ptr -26Ch
.text$mn:00002838 var_268         = dword ptr -268h
.text$mn:00002838 var_264         = dword ptr -264h
.text$mn:00002838 var_260         = dword ptr -260h
.text$mn:00002838 var_25C         = dword ptr -25Ch
.text$mn:00002838 var_258         = dword ptr -258h
.text$mn:00002838 var_254         = dword ptr -254h
.text$mn:00002838 var_250         = dword ptr -250h
.text$mn:00002838 var_24C         = dword ptr -24Ch
.text$mn:00002838 var_248         = dword ptr -248h
.text$mn:00002838 var_244         = byte ptr -244h
.text$mn:00002838 var_234         = dword ptr -234h
.text$mn:00002838 var_230         = dword ptr -230h
.text$mn:00002838 var_220         = dword ptr -220h
.text$mn:00002838 var_21C         = dword ptr -21Ch
.text$mn:00002838 var_218         = dword ptr -218h
.text$mn:00002838 var_214         = dword ptr -214h
.text$mn:00002838 var_210         = dword ptr -210h
.text$mn:00002838 var_20C         = dword ptr -20Ch
.text$mn:00002838 var_208         = dword ptr -208h
.text$mn:00002838 var_204         = dword ptr -204h
.text$mn:00002838 var_200         = dword ptr -200h
.text$mn:00002838 var_1FC         = dword ptr -1FCh
.text$mn:00002838 var_1F8         = dword ptr -1F8h
.text$mn:00002838 var_1F4         = dword ptr -1F4h
.text$mn:00002838 var_1F0         = dword ptr -1F0h
.text$mn:00002838 var_1EC         = dword ptr -1ECh
.text$mn:00002838 var_1E8         = dword ptr -1E8h
.text$mn:00002838 var_1E4         = dword ptr -1E4h
.text$mn:00002838 var_1E0         = dword ptr -1E0h
.text$mn:00002838 var_1DC         = dword ptr -1DCh
.text$mn:00002838 var_1D8         = dword ptr -1D8h
.text$mn:00002838 var_1D4         = dword ptr -1D4h
.text$mn:00002838 var_1D0         = dword ptr -1D0h
.text$mn:00002838 var_1CC         = dword ptr -1CCh
.text$mn:00002838 var_1C8         = dword ptr -1C8h
.text$mn:00002838 var_1C4         = dword ptr -1C4h
.text$mn:00002838 var_1C0         = dword ptr -1C0h
.text$mn:00002838 var_1BC         = dword ptr -1BCh
.text$mn:00002838 var_1B8         = dword ptr -1B8h
.text$mn:00002838 Str             = dword ptr -1B4h
.text$mn:00002838 var_1B0         = dword ptr -1B0h
.text$mn:00002838 var_1AC         = dword ptr -1ACh
.text$mn:00002838 var_1A8         = dword ptr -1A8h
.text$mn:00002838 var_1A4         = dword ptr -1A4h
.text$mn:00002838 var_1A0         = dword ptr -1A0h
.text$mn:00002838 var_19C         = dword ptr -19Ch
.text$mn:00002838 var_198         = dword ptr -198h
.text$mn:00002838 var_194         = dword ptr -194h
.text$mn:00002838 var_190         = dword ptr -190h
.text$mn:00002838 var_18C         = dword ptr -18Ch
.text$mn:00002838 var_188         = dword ptr -188h
.text$mn:00002838 var_184         = byte ptr -184h
.text$mn:00002838 var_144         = dword ptr -144h
.text$mn:00002838 var_128         = dword ptr -128h
.text$mn:00002838 var_10C         = dword ptr -10Ch
.text$mn:00002838 var_F0          = dword ptr -0F0h
.text$mn:00002838 var_D4          = dword ptr -0D4h
.text$mn:00002838 var_B8          = dword ptr -0B8h
.text$mn:00002838 var_9C          = dword ptr -9Ch
.text$mn:00002838 var_80          = dword ptr -80h
.text$mn:00002838 var_64          = dword ptr -64h
.text$mn:00002838 var_48          = dword ptr -48h
.text$mn:00002838 var_2C          = byte ptr -2Ch
.text$mn:00002838 var_10          = dword ptr -10h
.text$mn:00002838 var_C           = dword ptr -0Ch
.text$mn:00002838 var_4           = dword ptr -4
.text$mn:00002838
.text$mn:00002838                 push    ebp
.text$mn:00002839                 mov     ebp, esp
.text$mn:0000283B                 push    0FFFFFFFFh
.text$mn:0000283D                 push    offset __ehhandler$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ
.text$mn:00002842                 mov     eax, large fs:0
.text$mn:00002848                 push    eax
.text$mn:00002849                 sub     esp, 340h
.text$mn:0000284F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002854                 xor     eax, ebp
.text$mn:00002856                 mov     [ebp+var_10], eax
.text$mn:00002859                 push    eax
.text$mn:0000285A                 lea     eax, [ebp+var_C]
.text$mn:0000285D                 mov     large fs:0, eax
.text$mn:00002863                 mov     [ebp+var_188], ecx
.text$mn:00002869                 mov     eax, [ebp+var_188]
.text$mn:0000286F                 cmp     dword ptr [eax+24h], 0
.text$mn:00002873                 jnz     short loc_287C
.text$mn:00002875                 xor     al, al
.text$mn:00002877                 jmp     loc_3566
.text$mn:0000287C ; ---------------------------------------------------------------------------
.text$mn:0000287C
.text$mn:0000287C loc_287C:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+3Bj
.text$mn:0000287C                 push    offset $SG154986 ; "NotepadPlus"
.text$mn:00002881                 mov     ecx, [ebp+var_188]
.text$mn:00002887                 mov     ecx, [ecx+24h]  ; this
.text$mn:0000288A                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:0000288F                 mov     [ebp+var_19C], eax
.text$mn:00002895                 cmp     [ebp+var_19C], 0
.text$mn:0000289C                 jnz     short loc_28A5
.text$mn:0000289E                 xor     al, al
.text$mn:000028A0                 jmp     loc_3566
.text$mn:000028A5 ; ---------------------------------------------------------------------------
.text$mn:000028A5
.text$mn:000028A5 loc_28A5:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+64j
.text$mn:000028A5                 push    offset $SG154988 ; "functionList"
.text$mn:000028AA                 mov     ecx, [ebp+var_19C] ; this
.text$mn:000028B0                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:000028B5                 mov     [ebp+var_19C], eax
.text$mn:000028BB                 cmp     [ebp+var_19C], 0
.text$mn:000028C2                 jnz     short loc_28CB
.text$mn:000028C4                 xor     al, al
.text$mn:000028C6                 jmp     loc_3566
.text$mn:000028CB ; ---------------------------------------------------------------------------
.text$mn:000028CB
.text$mn:000028CB loc_28CB:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+8Aj
.text$mn:000028CB                 push    offset $SG154991 ; "parsers"
.text$mn:000028D0                 mov     ecx, [ebp+var_19C] ; this
.text$mn:000028D6                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:000028DB                 mov     [ebp+var_1E8], eax
.text$mn:000028E1                 cmp     [ebp+var_1E8], 0
.text$mn:000028E8                 jnz     short loc_28F1
.text$mn:000028EA                 xor     al, al
.text$mn:000028EC                 jmp     loc_3566
.text$mn:000028F1 ; ---------------------------------------------------------------------------
.text$mn:000028F1
.text$mn:000028F1 loc_28F1:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+B0j
.text$mn:000028F1                 push    offset $SG154994 ; "parser"
.text$mn:000028F6                 mov     ecx, [ebp+var_1E8] ; this
.text$mn:000028FC                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:00002901                 mov     [ebp+var_18C], eax
.text$mn:00002907                 jmp     short loc_291F
.text$mn:00002909 ; ---------------------------------------------------------------------------
.text$mn:00002909
.text$mn:00002909 loc_2909:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_2968j
.text$mn:00002909                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+A4Aj
.text$mn:00002909                 push    offset $SG154998 ; "parser"
.text$mn:0000290E                 mov     ecx, [ebp+var_18C] ; this
.text$mn:00002914                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:00002919                 mov     [ebp+var_18C], eax
.text$mn:0000291F
.text$mn:0000291F loc_291F:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+CFj
.text$mn:0000291F                 cmp     [ebp+var_18C], 0
.text$mn:00002926                 jz      loc_3287
.text$mn:0000292C                 push    offset $SG155000 ; "id"
.text$mn:00002931                 mov     ecx, [ebp+var_18C] ; this
.text$mn:00002937                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:0000293C                 mov     ecx, eax        ; this
.text$mn:0000293E                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00002943                 mov     [ebp+var_198], eax
.text$mn:00002949                 cmp     [ebp+var_198], 0
.text$mn:00002950                 jz      short loc_2968
.text$mn:00002952                 mov     edx, 2
.text$mn:00002957                 imul    eax, edx, 0
.text$mn:0000295A                 mov     ecx, [ebp+var_198]
.text$mn:00002960                 movzx   edx, word ptr [ecx+eax]
.text$mn:00002964                 test    edx, edx
.text$mn:00002966                 jnz     short loc_296A
.text$mn:00002968
.text$mn:00002968 loc_2968:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+118j
.text$mn:00002968                 jmp     short loc_2909
.text$mn:0000296A ; ---------------------------------------------------------------------------
.text$mn:0000296A
.text$mn:0000296A loc_296A:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+12Ej
.text$mn:0000296A                 push    offset $SG155004 ; Str
.text$mn:0000296F                 lea     ecx, [ebp+var_2C]
.text$mn:00002972                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002977                 mov     [ebp+var_4], 0
.text$mn:0000297E                 push    offset $SG155006 ; "commentExpr"
.text$mn:00002983                 mov     ecx, [ebp+var_18C] ; this
.text$mn:00002989                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:0000298E                 mov     ecx, eax        ; this
.text$mn:00002990                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00002995                 mov     [ebp+var_1B8], eax
.text$mn:0000299B                 cmp     [ebp+var_1B8], 0
.text$mn:000029A2                 jz      short loc_29C9
.text$mn:000029A4                 mov     eax, 2
.text$mn:000029A9                 imul    ecx, eax, 0
.text$mn:000029AC                 mov     edx, [ebp+var_1B8]
.text$mn:000029B2                 movzx   eax, word ptr [edx+ecx]
.text$mn:000029B6                 test    eax, eax
.text$mn:000029B8                 jz      short loc_29C9
.text$mn:000029BA                 mov     ecx, [ebp+var_1B8]
.text$mn:000029C0                 push    ecx             ; Str
.text$mn:000029C1                 lea     ecx, [ebp+var_2C]
.text$mn:000029C4                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000029C9
.text$mn:000029C9 loc_29C9:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+16Aj
.text$mn:000029C9                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+180j
.text$mn:000029C9                 lea     ecx, [ebp+var_244]
.text$mn:000029CF                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000029D4                 mov     byte ptr [ebp+var_4], 1
.text$mn:000029D8                 lea     ecx, [ebp+var_230]
.text$mn:000029DE                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000029E3                 mov     byte ptr [ebp+var_4], 2
.text$mn:000029E7                 push    offset $SG155019 ; "displayName"
.text$mn:000029EC                 mov     ecx, [ebp+var_18C] ; this
.text$mn:000029F2                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000029F7                 mov     ecx, eax        ; this
.text$mn:000029F9                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:000029FE                 mov     [ebp+var_194], eax
.text$mn:00002A04                 cmp     [ebp+var_194], 0
.text$mn:00002A0B                 jz      short loc_2A23
.text$mn:00002A0D                 mov     edx, 2
.text$mn:00002A12                 imul    eax, edx, 0
.text$mn:00002A15                 mov     ecx, [ebp+var_194]
.text$mn:00002A1B                 movzx   edx, word ptr [ecx+eax]
.text$mn:00002A1F                 test    edx, edx
.text$mn:00002A21                 jnz     short loc_2A2F
.text$mn:00002A23
.text$mn:00002A23 loc_2A23:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+1D3j
.text$mn:00002A23                 mov     eax, [ebp+var_198]
.text$mn:00002A29                 mov     [ebp+var_194], eax
.text$mn:00002A2F
.text$mn:00002A2F loc_2A2F:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+1E9j
.text$mn:00002A2F                 push    offset $SG155023 ; "classRange"
.text$mn:00002A34                 mov     ecx, [ebp+var_18C] ; this
.text$mn:00002A3A                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00002A3F                 mov     [ebp+var_1B0], eax
.text$mn:00002A45                 push    offset $SG155025 ; "function"
.text$mn:00002A4A                 mov     ecx, [ebp+var_18C] ; this
.text$mn:00002A50                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00002A55                 mov     [ebp+var_1AC], eax
.text$mn:00002A5B                 cmp     [ebp+var_1B0], 0
.text$mn:00002A62                 jz      loc_2E75
.text$mn:00002A68                 cmp     [ebp+var_1AC], 0
.text$mn:00002A6F                 jz      loc_2E75
.text$mn:00002A75                 lea     ecx, [ebp+var_D4]
.text$mn:00002A7B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A80                 mov     byte ptr [ebp+var_4], 3
.text$mn:00002A84                 lea     ecx, [ebp+var_9C]
.text$mn:00002A8A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A8F                 mov     byte ptr [ebp+var_4], 4
.text$mn:00002A93                 lea     ecx, [ebp+var_64]
.text$mn:00002A96                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002A9B                 mov     byte ptr [ebp+var_4], 5
.text$mn:00002A9F                 lea     ecx, [ebp+var_128]
.text$mn:00002AA5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002AAA                 mov     byte ptr [ebp+var_4], 6
.text$mn:00002AAE                 lea     ecx, [ebp+var_230]
.text$mn:00002AB4                 push    ecx             ; int
.text$mn:00002AB5                 lea     edx, [ebp+var_128]
.text$mn:00002ABB                 push    edx             ; int
.text$mn:00002ABC                 lea     eax, [ebp+var_244]
.text$mn:00002AC2                 push    eax             ; int
.text$mn:00002AC3                 lea     ecx, [ebp+var_64]
.text$mn:00002AC6                 push    ecx             ; int
.text$mn:00002AC7                 lea     edx, [ebp+var_9C]
.text$mn:00002ACD                 push    edx             ; int
.text$mn:00002ACE                 lea     eax, [ebp+var_D4]
.text$mn:00002AD4                 push    eax             ; int
.text$mn:00002AD5                 mov     ecx, [ebp+var_1B0]
.text$mn:00002ADB                 push    ecx             ; int
.text$mn:00002ADC                 mov     ecx, [ebp+var_188]
.text$mn:00002AE2                 call    ?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00002AE7                 lea     ecx, [ebp+var_B8]
.text$mn:00002AED                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002AF2                 mov     byte ptr [ebp+var_4], 7
.text$mn:00002AF6                 lea     ecx, [ebp+var_2EC]
.text$mn:00002AFC                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00002B01                 mov     byte ptr [ebp+var_4], 8
.text$mn:00002B05                 lea     ecx, [ebp+var_2D8]
.text$mn:00002B0B                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00002B10                 mov     byte ptr [ebp+var_4], 9
.text$mn:00002B14                 lea     edx, [ebp+var_2EC]
.text$mn:00002B1A                 push    edx             ; int
.text$mn:00002B1B                 lea     eax, [ebp+var_2D8]
.text$mn:00002B21                 push    eax             ; int
.text$mn:00002B22                 lea     ecx, [ebp+var_B8]
.text$mn:00002B28                 push    ecx             ; int
.text$mn:00002B29                 mov     edx, [ebp+var_1AC]
.text$mn:00002B2F                 push    edx             ; int
.text$mn:00002B30                 mov     ecx, [ebp+var_188]
.text$mn:00002B36                 call    ?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z ; FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00002B3B                 push    94h ; 'ö'       ; int
.text$mn:00002B40                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00002B45                 add     esp, 4
.text$mn:00002B48                 mov     [ebp+var_1E0], eax
.text$mn:00002B4E                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00002B52                 cmp     [ebp+var_1E0], 0
.text$mn:00002B59                 jz      loc_2C25
.text$mn:00002B5F                 sub     esp, 10h
.text$mn:00002B62                 mov     ecx, esp
.text$mn:00002B64                 mov     [ebp+var_2A8], esp
.text$mn:00002B6A                 lea     eax, [ebp+var_2EC]
.text$mn:00002B70                 push    eax             ; int
.text$mn:00002B71                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00002B76                 mov     [ebp+var_278], eax
.text$mn:00002B7C                 mov     ecx, [ebp+var_278]
.text$mn:00002B82                 mov     [ebp+var_2BC], ecx
.text$mn:00002B88                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00002B8C                 sub     esp, 10h
.text$mn:00002B8F                 mov     ecx, esp
.text$mn:00002B91                 mov     [ebp+var_2C4], esp
.text$mn:00002B97                 lea     edx, [ebp+var_2D8]
.text$mn:00002B9D                 push    edx             ; int
.text$mn:00002B9E                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00002BA3                 mov     [ebp+var_24C], eax
.text$mn:00002BA9                 mov     eax, [ebp+var_24C]
.text$mn:00002BAF                 mov     [ebp+var_2F4], eax
.text$mn:00002BB5                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00002BB9                 lea     ecx, [ebp+var_B8]
.text$mn:00002BBF                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002BC4                 sub     esp, 1Ch
.text$mn:00002BC7                 mov     ecx, esp
.text$mn:00002BC9                 mov     [ebp+var_2FC], esp
.text$mn:00002BCF                 push    eax             ; Str
.text$mn:00002BD0                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002BD5                 mov     [ebp+var_254], eax
.text$mn:00002BDB                 mov     ecx, [ebp+var_254]
.text$mn:00002BE1                 mov     [ebp+var_304], ecx
.text$mn:00002BE7                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00002BEB                 lea     ecx, [ebp+var_2C]
.text$mn:00002BEE                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002BF3                 push    eax             ; int
.text$mn:00002BF4                 mov     edx, [ebp+var_194]
.text$mn:00002BFA                 push    edx             ; wchar_t *
.text$mn:00002BFB                 mov     eax, [ebp+var_198]
.text$mn:00002C01                 push    eax             ; Str
.text$mn:00002C02                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00002C06                 mov     ecx, [ebp+var_1E0]
.text$mn:00002C0C                 call    ??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z ; FunctionUnitParser::FunctionUnitParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)
.text$mn:00002C11                 mov     [ebp+var_25C], eax
.text$mn:00002C17                 mov     ecx, [ebp+var_25C]
.text$mn:00002C1D                 mov     [ebp+var_1D0], ecx
.text$mn:00002C23                 jmp     short loc_2C2F
.text$mn:00002C25 ; ---------------------------------------------------------------------------
.text$mn:00002C25
.text$mn:00002C25 loc_2C25:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+321j
.text$mn:00002C25                 mov     [ebp+var_1D0], 0
.text$mn:00002C2F
.text$mn:00002C2F loc_2C2F:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+3EBj
.text$mn:00002C2F                 mov     edx, [ebp+var_1D0]
.text$mn:00002C35                 mov     [ebp+var_264], edx
.text$mn:00002C3B                 mov     byte ptr [ebp+var_4], 9
.text$mn:00002C3F                 mov     eax, [ebp+var_264]
.text$mn:00002C45                 mov     [ebp+var_26C], eax
.text$mn:00002C4B                 push    108h            ; unsigned int
.text$mn:00002C50                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00002C55                 add     esp, 4
.text$mn:00002C58                 mov     [ebp+var_1F0], eax
.text$mn:00002C5E                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00002C62                 cmp     [ebp+var_1F0], 0
.text$mn:00002C69                 jz      loc_2DCF
.text$mn:00002C6F                 mov     ecx, [ebp+var_26C]
.text$mn:00002C75                 push    ecx             ; int
.text$mn:00002C76                 sub     esp, 10h
.text$mn:00002C79                 mov     ecx, esp
.text$mn:00002C7B                 mov     [ebp+var_30C], esp
.text$mn:00002C81                 lea     edx, [ebp+var_230]
.text$mn:00002C87                 push    edx             ; int
.text$mn:00002C88                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00002C8D                 mov     [ebp+var_274], eax
.text$mn:00002C93                 mov     eax, [ebp+var_274]
.text$mn:00002C99                 mov     [ebp+var_314], eax
.text$mn:00002C9F                 mov     byte ptr [ebp+var_4], 0Fh
.text$mn:00002CA3                 lea     ecx, [ebp+var_128]
.text$mn:00002CA9                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002CAE                 sub     esp, 1Ch
.text$mn:00002CB1                 mov     ecx, esp
.text$mn:00002CB3                 mov     [ebp+var_31C], esp
.text$mn:00002CB9                 push    eax             ; char
.text$mn:00002CBA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002CBF                 mov     [ebp+var_27C], eax
.text$mn:00002CC5                 mov     ecx, [ebp+var_27C]
.text$mn:00002CCB                 mov     [ebp+var_324], ecx
.text$mn:00002CD1                 mov     byte ptr [ebp+var_4], 10h
.text$mn:00002CD5                 sub     esp, 10h
.text$mn:00002CD8                 mov     ecx, esp
.text$mn:00002CDA                 mov     [ebp+var_32C], esp
.text$mn:00002CE0                 lea     edx, [ebp+var_244]
.text$mn:00002CE6                 push    edx             ; int
.text$mn:00002CE7                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00002CEC                 mov     [ebp+var_284], eax
.text$mn:00002CF2                 mov     eax, [ebp+var_284]
.text$mn:00002CF8                 mov     [ebp+var_334], eax
.text$mn:00002CFE                 mov     byte ptr [ebp+var_4], 11h
.text$mn:00002D02                 lea     ecx, [ebp+var_64]
.text$mn:00002D05                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002D0A                 sub     esp, 1Ch
.text$mn:00002D0D                 mov     ecx, esp
.text$mn:00002D0F                 mov     [ebp+var_33C], esp
.text$mn:00002D15                 push    eax             ; int
.text$mn:00002D16                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002D1B                 mov     [ebp+var_28C], eax
.text$mn:00002D21                 mov     ecx, [ebp+var_28C]
.text$mn:00002D27                 mov     [ebp+var_344], ecx
.text$mn:00002D2D                 mov     byte ptr [ebp+var_4], 12h
.text$mn:00002D31                 lea     ecx, [ebp+var_9C]
.text$mn:00002D37                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002D3C                 sub     esp, 1Ch
.text$mn:00002D3F                 mov     ecx, esp
.text$mn:00002D41                 mov     [ebp+var_34C], esp
.text$mn:00002D47                 push    eax             ; int
.text$mn:00002D48                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002D4D                 mov     [ebp+var_294], eax
.text$mn:00002D53                 mov     edx, [ebp+var_294]
.text$mn:00002D59                 mov     [ebp+var_2A0], edx
.text$mn:00002D5F                 mov     byte ptr [ebp+var_4], 13h
.text$mn:00002D63                 lea     ecx, [ebp+var_D4]
.text$mn:00002D69                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002D6E                 sub     esp, 1Ch
.text$mn:00002D71                 mov     ecx, esp
.text$mn:00002D73                 mov     [ebp+var_308], esp
.text$mn:00002D79                 push    eax             ; Str
.text$mn:00002D7A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002D7F                 mov     [ebp+var_29C], eax
.text$mn:00002D85                 mov     eax, [ebp+var_29C]
.text$mn:00002D8B                 mov     [ebp+var_2B0], eax
.text$mn:00002D91                 mov     byte ptr [ebp+var_4], 14h
.text$mn:00002D95                 lea     ecx, [ebp+var_2C]
.text$mn:00002D98                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002D9D                 push    eax             ; int
.text$mn:00002D9E                 mov     ecx, [ebp+var_194]
.text$mn:00002DA4                 push    ecx             ; wchar_t *
.text$mn:00002DA5                 mov     edx, [ebp+var_198]
.text$mn:00002DAB                 push    edx             ; Str
.text$mn:00002DAC                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00002DB0                 mov     ecx, [ebp+var_1F0]
.text$mn:00002DB6                 call    ??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z ; FunctionMixParser::FunctionMixParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,FunctionUnitParser *)
.text$mn:00002DBB                 mov     [ebp+var_200], eax
.text$mn:00002DC1                 mov     eax, [ebp+var_200]
.text$mn:00002DC7                 mov     [ebp+var_1D8], eax
.text$mn:00002DCD                 jmp     short loc_2DD9
.text$mn:00002DCF ; ---------------------------------------------------------------------------
.text$mn:00002DCF
.text$mn:00002DCF loc_2DCF:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+431j
.text$mn:00002DCF                 mov     [ebp+var_1D8], 0
.text$mn:00002DD9
.text$mn:00002DD9 loc_2DD9:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+595j
.text$mn:00002DD9                 mov     ecx, [ebp+var_1D8]
.text$mn:00002DDF                 mov     [ebp+var_21C], ecx
.text$mn:00002DE5                 mov     byte ptr [ebp+var_4], 9
.text$mn:00002DE9                 mov     edx, [ebp+var_21C]
.text$mn:00002DEF                 mov     [ebp+var_298], edx
.text$mn:00002DF5                 lea     eax, [ebp+var_298]
.text$mn:00002DFB                 push    eax
.text$mn:00002DFC                 mov     ecx, [ebp+var_188]
.text$mn:00002E02                 add     ecx, 4
.text$mn:00002E05                 call    ?push_back@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEX$$QAPAVFunctionParser@@@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)
.text$mn:00002E0A                 mov     byte ptr [ebp+var_4], 8
.text$mn:00002E0E                 lea     ecx, [ebp+var_2D8]
.text$mn:00002E14                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00002E19                 mov     byte ptr [ebp+var_4], 7
.text$mn:00002E1D                 lea     ecx, [ebp+var_2EC]
.text$mn:00002E23                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00002E28                 mov     byte ptr [ebp+var_4], 6
.text$mn:00002E2C                 lea     ecx, [ebp+var_B8]
.text$mn:00002E32                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E37                 mov     byte ptr [ebp+var_4], 5
.text$mn:00002E3B                 lea     ecx, [ebp+var_128]
.text$mn:00002E41                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E46                 mov     byte ptr [ebp+var_4], 4
.text$mn:00002E4A                 lea     ecx, [ebp+var_64]
.text$mn:00002E4D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E52                 mov     byte ptr [ebp+var_4], 3
.text$mn:00002E56                 lea     ecx, [ebp+var_9C]
.text$mn:00002E5C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E61                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002E65                 lea     ecx, [ebp+var_D4]
.text$mn:00002E6B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E70                 jmp     loc_3255
.text$mn:00002E75 ; ---------------------------------------------------------------------------
.text$mn:00002E75
.text$mn:00002E75 loc_2E75:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+22Aj
.text$mn:00002E75                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+237j
.text$mn:00002E75                 cmp     [ebp+var_1B0], 0
.text$mn:00002E7C                 jz      loc_30EA
.text$mn:00002E82                 lea     ecx, [ebp+var_F0]
.text$mn:00002E88                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E8D                 mov     byte ptr [ebp+var_4], 15h
.text$mn:00002E91                 lea     ecx, [ebp+var_80]
.text$mn:00002E94                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002E99                 mov     byte ptr [ebp+var_4], 16h
.text$mn:00002E9D                 lea     ecx, [ebp+var_144]
.text$mn:00002EA3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002EA8                 mov     byte ptr [ebp+var_4], 17h
.text$mn:00002EAC                 lea     ecx, [ebp+var_10C]
.text$mn:00002EB2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00002EB7                 mov     byte ptr [ebp+var_4], 18h
.text$mn:00002EBB                 lea     ecx, [ebp+var_230]
.text$mn:00002EC1                 push    ecx             ; int
.text$mn:00002EC2                 lea     edx, [ebp+var_10C]
.text$mn:00002EC8                 push    edx             ; int
.text$mn:00002EC9                 lea     eax, [ebp+var_244]
.text$mn:00002ECF                 push    eax             ; int
.text$mn:00002ED0                 lea     ecx, [ebp+var_144]
.text$mn:00002ED6                 push    ecx             ; int
.text$mn:00002ED7                 lea     edx, [ebp+var_80]
.text$mn:00002EDA                 push    edx             ; int
.text$mn:00002EDB                 lea     eax, [ebp+var_F0]
.text$mn:00002EE1                 push    eax             ; int
.text$mn:00002EE2                 mov     ecx, [ebp+var_1B0]
.text$mn:00002EE8                 push    ecx             ; int
.text$mn:00002EE9                 mov     ecx, [ebp+var_188]
.text$mn:00002EEF                 call    ?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00002EF4                 push    104h            ; int
.text$mn:00002EF9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00002EFE                 add     esp, 4
.text$mn:00002F01                 mov     [ebp+var_1C0], eax
.text$mn:00002F07                 mov     byte ptr [ebp+var_4], 19h
.text$mn:00002F0B                 cmp     [ebp+var_1C0], 0
.text$mn:00002F12                 jz      loc_3071
.text$mn:00002F18                 sub     esp, 10h
.text$mn:00002F1B                 mov     ecx, esp
.text$mn:00002F1D                 mov     [ebp+var_348], esp
.text$mn:00002F23                 lea     edx, [ebp+var_230]
.text$mn:00002F29                 push    edx             ; int
.text$mn:00002F2A                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00002F2F                 mov     [ebp+var_208], eax
.text$mn:00002F35                 mov     eax, [ebp+var_208]
.text$mn:00002F3B                 mov     [ebp+var_2B8], eax
.text$mn:00002F41                 mov     byte ptr [ebp+var_4], 1Ah
.text$mn:00002F45                 lea     ecx, [ebp+var_10C]
.text$mn:00002F4B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002F50                 sub     esp, 1Ch
.text$mn:00002F53                 mov     ecx, esp
.text$mn:00002F55                 mov     [ebp+var_310], esp
.text$mn:00002F5B                 push    eax             ; char
.text$mn:00002F5C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002F61                 mov     [ebp+var_260], eax
.text$mn:00002F67                 mov     ecx, [ebp+var_260]
.text$mn:00002F6D                 mov     [ebp+var_2C0], ecx
.text$mn:00002F73                 mov     byte ptr [ebp+var_4], 1Bh
.text$mn:00002F77                 sub     esp, 10h
.text$mn:00002F7A                 mov     ecx, esp
.text$mn:00002F7C                 mov     [ebp+var_330], esp
.text$mn:00002F82                 lea     edx, [ebp+var_244]
.text$mn:00002F88                 push    edx             ; char
.text$mn:00002F89                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00002F8E                 mov     [ebp+var_210], eax
.text$mn:00002F94                 mov     eax, [ebp+var_210]
.text$mn:00002F9A                 mov     [ebp+var_2C8], eax
.text$mn:00002FA0                 mov     byte ptr [ebp+var_4], 1Ch
.text$mn:00002FA4                 lea     ecx, [ebp+var_144]
.text$mn:00002FAA                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002FAF                 sub     esp, 1Ch
.text$mn:00002FB2                 mov     ecx, esp
.text$mn:00002FB4                 mov     [ebp+var_318], esp
.text$mn:00002FBA                 push    eax             ; int
.text$mn:00002FBB                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002FC0                 mov     [ebp+var_280], eax
.text$mn:00002FC6                 mov     ecx, [ebp+var_280]
.text$mn:00002FCC                 mov     [ebp+var_2DC], ecx
.text$mn:00002FD2                 mov     byte ptr [ebp+var_4], 1Dh
.text$mn:00002FD6                 lea     ecx, [ebp+var_80]
.text$mn:00002FD9                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00002FDE                 sub     esp, 1Ch
.text$mn:00002FE1                 mov     ecx, esp
.text$mn:00002FE3                 mov     [ebp+var_340], esp
.text$mn:00002FE9                 push    eax             ; int
.text$mn:00002FEA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002FEF                 mov     [ebp+var_218], eax
.text$mn:00002FF5                 mov     edx, [ebp+var_218]
.text$mn:00002FFB                 mov     [ebp+var_2F0], edx
.text$mn:00003001                 mov     byte ptr [ebp+var_4], 1Eh
.text$mn:00003005                 lea     ecx, [ebp+var_F0]
.text$mn:0000300B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00003010                 sub     esp, 1Ch
.text$mn:00003013                 mov     ecx, esp
.text$mn:00003015                 mov     [ebp+var_320], esp
.text$mn:0000301B                 push    eax             ; Str
.text$mn:0000301C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003021                 mov     [ebp+var_268], eax
.text$mn:00003027                 mov     eax, [ebp+var_268]
.text$mn:0000302D                 mov     [ebp+var_2F8], eax
.text$mn:00003033                 mov     byte ptr [ebp+var_4], 1Fh
.text$mn:00003037                 lea     ecx, [ebp+var_2C]
.text$mn:0000303A                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000303F                 push    eax             ; int
.text$mn:00003040                 mov     ecx, [ebp+var_194]
.text$mn:00003046                 push    ecx             ; wchar_t *
.text$mn:00003047                 mov     edx, [ebp+var_198]
.text$mn:0000304D                 push    edx             ; Str
.text$mn:0000304E                 mov     byte ptr [ebp+var_4], 19h
.text$mn:00003052                 mov     ecx, [ebp+var_1C0]
.text$mn:00003058                 call    ??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z ; FunctionZoneParser::FunctionZoneParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)
.text$mn:0000305D                 mov     [ebp+var_220], eax
.text$mn:00003063                 mov     eax, [ebp+var_220]
.text$mn:00003069                 mov     [ebp+var_1C4], eax
.text$mn:0000306F                 jmp     short loc_307B
.text$mn:00003071 ; ---------------------------------------------------------------------------
.text$mn:00003071
.text$mn:00003071 loc_3071:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+6DAj
.text$mn:00003071                 mov     [ebp+var_1C4], 0
.text$mn:0000307B
.text$mn:0000307B loc_307B:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+837j
.text$mn:0000307B                 mov     ecx, [ebp+var_1C4]
.text$mn:00003081                 mov     [ebp+var_290], ecx
.text$mn:00003087                 mov     byte ptr [ebp+var_4], 18h
.text$mn:0000308B                 mov     edx, [ebp+var_290]
.text$mn:00003091                 mov     [ebp+var_234], edx
.text$mn:00003097                 lea     eax, [ebp+var_234]
.text$mn:0000309D                 push    eax
.text$mn:0000309E                 mov     ecx, [ebp+var_188]
.text$mn:000030A4                 add     ecx, 4
.text$mn:000030A7                 call    ?push_back@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEX$$QAPAVFunctionParser@@@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)
.text$mn:000030AC                 mov     byte ptr [ebp+var_4], 17h
.text$mn:000030B0                 lea     ecx, [ebp+var_10C]
.text$mn:000030B6                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000030BB                 mov     byte ptr [ebp+var_4], 16h
.text$mn:000030BF                 lea     ecx, [ebp+var_144]
.text$mn:000030C5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000030CA                 mov     byte ptr [ebp+var_4], 15h
.text$mn:000030CE                 lea     ecx, [ebp+var_80]
.text$mn:000030D1                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000030D6                 mov     byte ptr [ebp+var_4], 2
.text$mn:000030DA                 lea     ecx, [ebp+var_F0]
.text$mn:000030E0                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000030E5                 jmp     loc_3255
.text$mn:000030EA ; ---------------------------------------------------------------------------
.text$mn:000030EA
.text$mn:000030EA loc_30EA:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+644j
.text$mn:000030EA                 cmp     [ebp+var_1AC], 0
.text$mn:000030F1                 jz      loc_3255
.text$mn:000030F7                 lea     ecx, [ebp+var_48]
.text$mn:000030FA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000030FF                 mov     byte ptr [ebp+var_4], 20h ; ' '
.text$mn:00003103                 lea     ecx, [ebp+var_244]
.text$mn:00003109                 push    ecx             ; int
.text$mn:0000310A                 lea     edx, [ebp+var_230]
.text$mn:00003110                 push    edx             ; int
.text$mn:00003111                 lea     eax, [ebp+var_48]
.text$mn:00003114                 push    eax             ; int
.text$mn:00003115                 mov     ecx, [ebp+var_1AC]
.text$mn:0000311B                 push    ecx             ; char
.text$mn:0000311C                 mov     ecx, [ebp+var_188]
.text$mn:00003122                 call    ?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z ; FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00003127                 push    94h ; 'ö'       ; int
.text$mn:0000312C                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00003131                 add     esp, 4
.text$mn:00003134                 mov     [ebp+var_1CC], eax
.text$mn:0000313A                 mov     byte ptr [ebp+var_4], 21h ; '!'
.text$mn:0000313E                 cmp     [ebp+var_1CC], 0
.text$mn:00003145                 jz      loc_320E
.text$mn:0000314B                 sub     esp, 10h
.text$mn:0000314E                 mov     ecx, esp
.text$mn:00003150                 mov     [ebp+var_338], esp
.text$mn:00003156                 lea     edx, [ebp+var_244]
.text$mn:0000315C                 push    edx             ; int
.text$mn:0000315D                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00003162                 mov     [ebp+var_270], eax
.text$mn:00003168                 mov     eax, [ebp+var_270]
.text$mn:0000316E                 mov     [ebp+var_300], eax
.text$mn:00003174                 mov     byte ptr [ebp+var_4], 22h ; '"'
.text$mn:00003178                 sub     esp, 10h
.text$mn:0000317B                 mov     ecx, esp
.text$mn:0000317D                 mov     [ebp+var_328], esp
.text$mn:00003183                 lea     edx, [ebp+var_230]
.text$mn:00003189                 push    edx             ; int
.text$mn:0000318A                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:0000318F                 mov     [ebp+var_248], eax
.text$mn:00003195                 mov     eax, [ebp+var_248]
.text$mn:0000319B                 mov     [ebp+var_2A4], eax
.text$mn:000031A1                 mov     byte ptr [ebp+var_4], 23h ; '#'
.text$mn:000031A5                 lea     ecx, [ebp+var_48]
.text$mn:000031A8                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000031AD                 sub     esp, 1Ch
.text$mn:000031B0                 mov     ecx, esp
.text$mn:000031B2                 mov     [ebp+var_2AC], esp
.text$mn:000031B8                 push    eax             ; Str
.text$mn:000031B9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000031BE                 mov     [ebp+var_288], eax
.text$mn:000031C4                 mov     ecx, [ebp+var_288]
.text$mn:000031CA                 mov     [ebp+var_2B4], ecx
.text$mn:000031D0                 mov     byte ptr [ebp+var_4], 24h ; '$'
.text$mn:000031D4                 lea     ecx, [ebp+var_2C]
.text$mn:000031D7                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000031DC                 push    eax             ; int
.text$mn:000031DD                 mov     edx, [ebp+var_194]
.text$mn:000031E3                 push    edx             ; wchar_t *
.text$mn:000031E4                 mov     eax, [ebp+var_198]
.text$mn:000031EA                 push    eax             ; Str
.text$mn:000031EB                 mov     byte ptr [ebp+var_4], 21h ; '!'
.text$mn:000031EF                 mov     ecx, [ebp+var_1CC]
.text$mn:000031F5                 call    ??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z ; FunctionUnitParser::FunctionUnitParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)
.text$mn:000031FA                 mov     [ebp+var_250], eax
.text$mn:00003200                 mov     ecx, [ebp+var_250]
.text$mn:00003206                 mov     [ebp+var_1D4], ecx
.text$mn:0000320C                 jmp     short loc_3218
.text$mn:0000320E ; ---------------------------------------------------------------------------
.text$mn:0000320E
.text$mn:0000320E loc_320E:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+90Dj
.text$mn:0000320E                 mov     [ebp+var_1D4], 0
.text$mn:00003218
.text$mn:00003218 loc_3218:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+9D4j
.text$mn:00003218                 mov     edx, [ebp+var_1D4]
.text$mn:0000321E                 mov     [ebp+var_1F8], edx
.text$mn:00003224                 mov     byte ptr [ebp+var_4], 20h ; ' '
.text$mn:00003228                 mov     eax, [ebp+var_1F8]
.text$mn:0000322E                 mov     [ebp+var_258], eax
.text$mn:00003234                 lea     ecx, [ebp+var_258]
.text$mn:0000323A                 push    ecx
.text$mn:0000323B                 mov     ecx, [ebp+var_188]
.text$mn:00003241                 add     ecx, 4
.text$mn:00003244                 call    ?push_back@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEX$$QAPAVFunctionParser@@@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)
.text$mn:00003249                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000324D                 lea     ecx, [ebp+var_48]
.text$mn:00003250                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003255
.text$mn:00003255 loc_3255:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+638j
.text$mn:00003255                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+8ADj ...
.text$mn:00003255                 mov     byte ptr [ebp+var_4], 1
.text$mn:00003259                 lea     ecx, [ebp+var_230]
.text$mn:0000325F                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00003264                 mov     byte ptr [ebp+var_4], 0
.text$mn:00003268                 lea     ecx, [ebp+var_244]
.text$mn:0000326E                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00003273                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000327A                 lea     ecx, [ebp+var_2C]
.text$mn:0000327D                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003282                 jmp     loc_2909
.text$mn:00003287 ; ---------------------------------------------------------------------------
.text$mn:00003287
.text$mn:00003287 loc_3287:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+EEj
.text$mn:00003287                 push    offset $SG155090 ; "associationMap"
.text$mn:0000328C                 mov     ecx, [ebp+var_19C] ; this
.text$mn:00003292                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00003297                 mov     [ebp+var_1DC], eax
.text$mn:0000329D                 cmp     [ebp+var_1DC], 0
.text$mn:000032A4                 jz      loc_3538
.text$mn:000032AA                 push    offset $SG155093 ; "association"
.text$mn:000032AF                 mov     ecx, [ebp+var_1DC] ; this
.text$mn:000032B5                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000032BA                 mov     [ebp+var_190], eax
.text$mn:000032C0                 jmp     short loc_32D8
.text$mn:000032C2 ; ---------------------------------------------------------------------------
.text$mn:000032C2
.text$mn:000032C2 loc_32C2:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_3533j
.text$mn:000032C2                 push    offset $SG155097 ; "association"
.text$mn:000032C7                 mov     ecx, [ebp+var_190] ; this
.text$mn:000032CD                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:000032D2                 mov     [ebp+var_190], eax
.text$mn:000032D8
.text$mn:000032D8 loc_32D8:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+A88j
.text$mn:000032D8                 cmp     [ebp+var_190], 0
.text$mn:000032DF                 jz      loc_3538
.text$mn:000032E5                 lea     edx, [ebp+var_204]
.text$mn:000032EB                 push    edx             ; int *
.text$mn:000032EC                 push    offset $SG155100 ; "langID"
.text$mn:000032F1                 mov     ecx, [ebp+var_190] ; this
.text$mn:000032F7                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000032FC                 mov     ecx, eax        ; this
.text$mn:000032FE                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_WPAH@Z ; TiXmlElement::Attribute(wchar_t const *,int *)
.text$mn:00003303                 mov     [ebp+var_1BC], eax
.text$mn:00003309                 push    offset $SG155102 ; "ext"
.text$mn:0000330E                 mov     ecx, [ebp+var_190] ; this
.text$mn:00003314                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00003319                 mov     ecx, eax        ; this
.text$mn:0000331B                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00003320                 mov     [ebp+var_1A8], eax
.text$mn:00003326                 push    offset $SG155104 ; "id"
.text$mn:0000332B                 mov     ecx, [ebp+var_190] ; this
.text$mn:00003331                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00003336                 mov     ecx, eax        ; this
.text$mn:00003338                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:0000333D                 mov     [ebp+Str], eax
.text$mn:00003343                 push    offset $SG155106 ; "userDefinedLangName"
.text$mn:00003348                 mov     ecx, [ebp+var_190] ; this
.text$mn:0000334E                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00003353                 mov     ecx, eax        ; this
.text$mn:00003355                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:0000335A                 mov     [ebp+var_1A4], eax
.text$mn:00003360                 cmp     [ebp+var_1BC], 0
.text$mn:00003367                 jz      short loc_337F
.text$mn:00003369                 mov     eax, 2
.text$mn:0000336E                 imul    ecx, eax, 0
.text$mn:00003371                 mov     edx, [ebp+var_1BC]
.text$mn:00003377                 movzx   eax, word ptr [edx+ecx]
.text$mn:0000337B                 test    eax, eax
.text$mn:0000337D                 jnz     short loc_33C5
.text$mn:0000337F
.text$mn:0000337F loc_337F:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+B2Fj
.text$mn:0000337F                 cmp     [ebp+var_1A8], 0
.text$mn:00003386                 jz      short loc_339E
.text$mn:00003388                 mov     ecx, 2
.text$mn:0000338D                 imul    edx, ecx, 0
.text$mn:00003390                 mov     eax, [ebp+var_1A8]
.text$mn:00003396                 movzx   ecx, word ptr [eax+edx]
.text$mn:0000339A                 test    ecx, ecx
.text$mn:0000339C                 jnz     short loc_33C5
.text$mn:0000339E
.text$mn:0000339E loc_339E:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+B4Ej
.text$mn:0000339E                 cmp     [ebp+var_1A4], 0
.text$mn:000033A5                 jz      loc_3533
.text$mn:000033AB                 mov     edx, 2
.text$mn:000033B0                 imul    eax, edx, 0
.text$mn:000033B3                 mov     ecx, [ebp+var_1A4]
.text$mn:000033B9                 movzx   edx, word ptr [ecx+eax]
.text$mn:000033BD                 test    edx, edx
.text$mn:000033BF                 jz      loc_3533
.text$mn:000033C5
.text$mn:000033C5 loc_33C5:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+B45j
.text$mn:000033C5                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+B64j
.text$mn:000033C5                 cmp     [ebp+Str], 0
.text$mn:000033CC                 jz      loc_3533
.text$mn:000033D2                 mov     eax, 2
.text$mn:000033D7                 imul    ecx, eax, 0
.text$mn:000033DA                 mov     edx, [ebp+Str]
.text$mn:000033E0                 movzx   eax, word ptr [edx+ecx]
.text$mn:000033E4                 test    eax, eax
.text$mn:000033E6                 jz      loc_3533
.text$mn:000033EC                 mov     [ebp+var_1A0], 0
.text$mn:000033F6                 mov     ecx, [ebp+var_188]
.text$mn:000033FC                 add     ecx, 4
.text$mn:000033FF                 call    ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::size(void)
.text$mn:00003404                 mov     [ebp+var_1FC], eax
.text$mn:0000340A                 jmp     short loc_341B
.text$mn:0000340C ; ---------------------------------------------------------------------------
.text$mn:0000340C
.text$mn:0000340C loc_340C:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void):loc_352Ej
.text$mn:0000340C                 mov     ecx, [ebp+var_1A0]
.text$mn:00003412                 add     ecx, 1
.text$mn:00003415                 mov     [ebp+var_1A0], ecx
.text$mn:0000341B
.text$mn:0000341B loc_341B:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+BD2j
.text$mn:0000341B                 mov     edx, [ebp+var_1A0]
.text$mn:00003421                 cmp     edx, [ebp+var_1FC]
.text$mn:00003427                 jnb     loc_3533
.text$mn:0000342D                 mov     eax, [ebp+Str]
.text$mn:00003433                 push    eax             ; Str
.text$mn:00003434                 mov     ecx, [ebp+var_1A0]
.text$mn:0000343A                 push    ecx
.text$mn:0000343B                 mov     ecx, [ebp+var_188]
.text$mn:00003441                 add     ecx, 4
.text$mn:00003444                 call    ??A?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEAAPAVFunctionParser@@I@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)
.text$mn:00003449                 mov     edx, [eax]
.text$mn:0000344B                 add     edx, 4
.text$mn:0000344E                 push    edx             ; int
.text$mn:0000344F                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00003454                 add     esp, 8
.text$mn:00003457                 movzx   eax, al
.text$mn:0000345A                 test    eax, eax
.text$mn:0000345C                 jz      loc_352E
.text$mn:00003462                 cmp     [ebp+var_1A4], 0
.text$mn:00003469                 jz      short loc_3479
.text$mn:0000346B                 mov     ecx, [ebp+var_1A4]
.text$mn:00003471                 mov     [ebp+var_1E4], ecx
.text$mn:00003477                 jmp     short loc_3483
.text$mn:00003479 ; ---------------------------------------------------------------------------
.text$mn:00003479
.text$mn:00003479 loc_3479:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+C31j
.text$mn:00003479                 mov     [ebp+var_1E4], offset $SG155134
.text$mn:00003483
.text$mn:00003483 loc_3483:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+C3Fj
.text$mn:00003483                 cmp     [ebp+var_1A8], 0
.text$mn:0000348A                 jz      short loc_349A
.text$mn:0000348C                 mov     edx, [ebp+var_1A8]
.text$mn:00003492                 mov     [ebp+var_1EC], edx
.text$mn:00003498                 jmp     short loc_34A4
.text$mn:0000349A ; ---------------------------------------------------------------------------
.text$mn:0000349A
.text$mn:0000349A loc_349A:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+C52j
.text$mn:0000349A                 mov     [ebp+var_1EC], offset $SG155135
.text$mn:000034A4
.text$mn:000034A4 loc_34A4:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+C60j
.text$mn:000034A4                 cmp     [ebp+var_1BC], 0
.text$mn:000034AB                 jz      short loc_34BB
.text$mn:000034AD                 mov     eax, [ebp+var_204]
.text$mn:000034B3                 mov     [ebp+var_1F4], eax
.text$mn:000034B9                 jmp     short loc_34C5
.text$mn:000034BB ; ---------------------------------------------------------------------------
.text$mn:000034BB
.text$mn:000034BB loc_34BB:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+C73j
.text$mn:000034BB                 mov     [ebp+var_1F4], 0FFFFFFFFh
.text$mn:000034C5
.text$mn:000034C5 loc_34C5:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+C81j
.text$mn:000034C5                 mov     ecx, [ebp+var_1E4]
.text$mn:000034CB                 push    ecx             ; wchar_t *
.text$mn:000034CC                 mov     edx, [ebp+var_1EC]
.text$mn:000034D2                 push    edx             ; Str
.text$mn:000034D3                 mov     eax, [ebp+var_1F4]
.text$mn:000034D9                 push    eax             ; int
.text$mn:000034DA                 mov     ecx, [ebp+var_1A0]
.text$mn:000034E0                 push    ecx             ; int
.text$mn:000034E1                 lea     ecx, [ebp+var_184]
.text$mn:000034E7                 call    ??0AssociationInfo@@QAE@HHPB_W0@Z ; AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)
.text$mn:000034EC                 mov     [ebp+var_20C], eax
.text$mn:000034F2                 mov     edx, [ebp+var_20C]
.text$mn:000034F8                 mov     [ebp+var_214], edx
.text$mn:000034FE                 mov     [ebp+var_4], 25h ; '%'
.text$mn:00003505                 mov     eax, [ebp+var_214]
.text$mn:0000350B                 push    eax
.text$mn:0000350C                 mov     ecx, [ebp+var_188]
.text$mn:00003512                 add     ecx, 14h
.text$mn:00003515                 call    ?push_back@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEX$$QAUAssociationInfo@@@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)
.text$mn:0000351A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003521                 lea     ecx, [ebp+var_184] ; this
.text$mn:00003527                 call    ??1AssociationInfo@@QAE@XZ ; AssociationInfo::~AssociationInfo(void)
.text$mn:0000352C                 jmp     short loc_3533
.text$mn:0000352E ; ---------------------------------------------------------------------------
.text$mn:0000352E
.text$mn:0000352E loc_352E:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+C24j
.text$mn:0000352E                 jmp     loc_340C
.text$mn:00003533 ; ---------------------------------------------------------------------------
.text$mn:00003533
.text$mn:00003533 loc_3533:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+B6Dj
.text$mn:00003533                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+B87j ...
.text$mn:00003533                 jmp     loc_32C2
.text$mn:00003538 ; ---------------------------------------------------------------------------
.text$mn:00003538
.text$mn:00003538 loc_3538:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+A6Cj
.text$mn:00003538                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+AA7j
.text$mn:00003538                 mov     ecx, [ebp+var_188]
.text$mn:0000353E                 add     ecx, 4
.text$mn:00003541                 call    ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::size(void)
.text$mn:00003546                 test    eax, eax
.text$mn:00003548                 jz      short loc_3556
.text$mn:0000354A                 mov     [ebp+var_1C8], 1
.text$mn:00003554                 jmp     short loc_3560
.text$mn:00003556 ; ---------------------------------------------------------------------------
.text$mn:00003556
.text$mn:00003556 loc_3556:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+D10j
.text$mn:00003556                 mov     [ebp+var_1C8], 0
.text$mn:00003560
.text$mn:00003560 loc_3560:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+D1Cj
.text$mn:00003560                 mov     al, byte ptr [ebp+var_1C8]
.text$mn:00003566
.text$mn:00003566 loc_3566:                               ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+3Fj
.text$mn:00003566                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+68j ...
.text$mn:00003566                 mov     ecx, [ebp+var_C]
.text$mn:00003569                 mov     large fs:0, ecx
.text$mn:00003570                 pop     ecx
.text$mn:00003571                 mov     ecx, [ebp+var_10]
.text$mn:00003574                 xor     ecx, ebp
.text$mn:00003576                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000357B                 mov     esp, ebp
.text$mn:0000357D                 pop     ebp
.text$mn:0000357E                 retn
.text$mn:0000357E ?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ endp
.text$mn:0000357E
.text$mn:0000357E ; ---------------------------------------------------------------------------
.text$mn:0000357F                 db 9 dup(0CCh)
.text$mn:00003588
.text$mn:00003588 ; =============== S U B R O U T I N E =======================================
.text$mn:00003588
.text$mn:00003588 ; Attributes: bp-based frame
.text$mn:00003588
.text$mn:00003588 ; int __stdcall FunctionParsersManager::getZonePaserParameters(TiXmlNode *, int, int, int, int, int, int)
.text$mn:00003588                 public ?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z
.text$mn:00003588 ?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z proc near
.text$mn:00003588                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+2AAp
.text$mn:00003588                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+6B7p
.text$mn:00003588
.text$mn:00003588 var_78          = dword ptr -78h
.text$mn:00003588 var_74          = dword ptr -74h
.text$mn:00003588 var_70          = dword ptr -70h
.text$mn:00003588 var_6C          = dword ptr -6Ch
.text$mn:00003588 var_68          = dword ptr -68h
.text$mn:00003588 Str             = dword ptr -64h
.text$mn:00003588 var_60          = dword ptr -60h
.text$mn:00003588 var_5C          = dword ptr -5Ch
.text$mn:00003588 var_58          = dword ptr -58h
.text$mn:00003588 var_54          = dword ptr -54h
.text$mn:00003588 var_50          = dword ptr -50h
.text$mn:00003588 var_4C          = dword ptr -4Ch
.text$mn:00003588 var_48          = byte ptr -48h
.text$mn:00003588 var_2C          = byte ptr -2Ch
.text$mn:00003588 var_10          = dword ptr -10h
.text$mn:00003588 var_C           = dword ptr -0Ch
.text$mn:00003588 var_4           = dword ptr -4
.text$mn:00003588 arg_0           = dword ptr  8
.text$mn:00003588 arg_4           = dword ptr  0Ch
.text$mn:00003588 arg_8           = dword ptr  10h
.text$mn:00003588 arg_C           = dword ptr  14h
.text$mn:00003588 arg_10          = dword ptr  18h
.text$mn:00003588 arg_14          = dword ptr  1Ch
.text$mn:00003588 arg_18          = dword ptr  20h
.text$mn:00003588
.text$mn:00003588                 push    ebp
.text$mn:00003589                 mov     ebp, esp
.text$mn:0000358B                 push    0FFFFFFFFh
.text$mn:0000358D                 push    offset __ehhandler$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z
.text$mn:00003592                 mov     eax, large fs:0
.text$mn:00003598                 push    eax
.text$mn:00003599                 sub     esp, 6Ch
.text$mn:0000359C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000035A1                 xor     eax, ebp
.text$mn:000035A3                 mov     [ebp+var_10], eax
.text$mn:000035A6                 push    eax
.text$mn:000035A7                 lea     eax, [ebp+var_C]
.text$mn:000035AA                 mov     large fs:0, eax
.text$mn:000035B0                 mov     [ebp+var_78], ecx
.text$mn:000035B3                 mov     [ebp+var_58], 0
.text$mn:000035BA                 mov     [ebp+var_54], 0
.text$mn:000035C1                 mov     [ebp+var_60], 0
.text$mn:000035C8                 mov     [ebp+var_5C], 0
.text$mn:000035CF                 push    offset $SG154888 ; "mainExpr"
.text$mn:000035D4                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000035D7                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000035DC                 mov     ecx, eax        ; this
.text$mn:000035DE                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:000035E3                 mov     [ebp+var_58], eax
.text$mn:000035E6                 cmp     [ebp+var_58], 0
.text$mn:000035EA                 jz      short loc_35FF
.text$mn:000035EC                 mov     eax, 2
.text$mn:000035F1                 imul    ecx, eax, 0
.text$mn:000035F4                 mov     edx, [ebp+var_58]
.text$mn:000035F7                 movzx   eax, word ptr [edx+ecx]
.text$mn:000035FB                 test    eax, eax
.text$mn:000035FD                 jnz     short loc_3606
.text$mn:000035FF
.text$mn:000035FF loc_35FF:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+62j
.text$mn:000035FF                 xor     al, al
.text$mn:00003601                 jmp     loc_3830
.text$mn:00003606 ; ---------------------------------------------------------------------------
.text$mn:00003606
.text$mn:00003606 loc_3606:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+75j
.text$mn:00003606                 mov     ecx, [ebp+var_58]
.text$mn:00003609                 push    ecx             ; Str
.text$mn:0000360A                 mov     ecx, [ebp+arg_4]
.text$mn:0000360D                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00003612                 push    offset $SG154891 ; "openSymbole"
.text$mn:00003617                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000361A                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:0000361F                 mov     ecx, eax        ; this
.text$mn:00003621                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00003626                 mov     [ebp+var_54], eax
.text$mn:00003629                 cmp     [ebp+var_54], 0
.text$mn:0000362D                 jz      short loc_364E
.text$mn:0000362F                 mov     edx, 2
.text$mn:00003634                 imul    eax, edx, 0
.text$mn:00003637                 mov     ecx, [ebp+var_54]
.text$mn:0000363A                 movzx   edx, word ptr [ecx+eax]
.text$mn:0000363E                 test    edx, edx
.text$mn:00003640                 jz      short loc_364E
.text$mn:00003642                 mov     eax, [ebp+var_54]
.text$mn:00003645                 push    eax             ; Str
.text$mn:00003646                 mov     ecx, [ebp+arg_8]
.text$mn:00003649                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000364E
.text$mn:0000364E loc_364E:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+A5j
.text$mn:0000364E                                         ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+B8j
.text$mn:0000364E                 push    offset $SG154893 ; "closeSymbole"
.text$mn:00003653                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003656                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:0000365B                 mov     ecx, eax        ; this
.text$mn:0000365D                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00003662                 mov     [ebp+var_60], eax
.text$mn:00003665                 cmp     [ebp+var_60], 0
.text$mn:00003669                 jz      short loc_368A
.text$mn:0000366B                 mov     ecx, 2
.text$mn:00003670                 imul    edx, ecx, 0
.text$mn:00003673                 mov     eax, [ebp+var_60]
.text$mn:00003676                 movzx   ecx, word ptr [eax+edx]
.text$mn:0000367A                 test    ecx, ecx
.text$mn:0000367C                 jz      short loc_368A
.text$mn:0000367E                 mov     edx, [ebp+var_60]
.text$mn:00003681                 push    edx             ; Str
.text$mn:00003682                 mov     ecx, [ebp+arg_C]
.text$mn:00003685                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000368A
.text$mn:0000368A loc_368A:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+E1j
.text$mn:0000368A                                         ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+F4j
.text$mn:0000368A                 push    offset $SG154896 ; "className"
.text$mn:0000368F                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003692                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00003697                 mov     [ebp+var_74], eax
.text$mn:0000369A                 cmp     [ebp+var_74], 0
.text$mn:0000369E                 jz      loc_372C
.text$mn:000036A4                 push    offset $SG154899 ; "nameExpr"
.text$mn:000036A9                 mov     ecx, [ebp+var_74] ; this
.text$mn:000036AC                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000036B1                 mov     [ebp+var_4C], eax
.text$mn:000036B4                 jmp     short loc_36C6
.text$mn:000036B6 ; ---------------------------------------------------------------------------
.text$mn:000036B6
.text$mn:000036B6 loc_36B6:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_372Aj
.text$mn:000036B6                 push    offset $SG154903 ; "nameExpr"
.text$mn:000036BB                 mov     ecx, [ebp+var_4C] ; this
.text$mn:000036BE                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:000036C3                 mov     [ebp+var_4C], eax
.text$mn:000036C6
.text$mn:000036C6 loc_36C6:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+12Cj
.text$mn:000036C6                 cmp     [ebp+var_4C], 0
.text$mn:000036CA                 jz      short loc_372C
.text$mn:000036CC                 push    offset $SG154905 ; "expr"
.text$mn:000036D1                 mov     ecx, [ebp+var_4C] ; this
.text$mn:000036D4                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000036D9                 mov     ecx, eax        ; this
.text$mn:000036DB                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:000036E0                 mov     [ebp+Str], eax
.text$mn:000036E3                 cmp     [ebp+Str], 0
.text$mn:000036E7                 jz      short loc_372A
.text$mn:000036E9                 mov     eax, 2
.text$mn:000036EE                 imul    ecx, eax, 0
.text$mn:000036F1                 mov     edx, [ebp+Str]
.text$mn:000036F4                 movzx   eax, word ptr [edx+ecx]
.text$mn:000036F8                 test    eax, eax
.text$mn:000036FA                 jz      short loc_372A
.text$mn:000036FC                 mov     ecx, [ebp+Str]
.text$mn:000036FF                 push    ecx             ; Str
.text$mn:00003700                 lea     ecx, [ebp+var_2C]
.text$mn:00003703                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003708                 mov     [ebp+var_4], 0
.text$mn:0000370F                 lea     edx, [ebp+var_2C]
.text$mn:00003712                 push    edx
.text$mn:00003713                 mov     ecx, [ebp+arg_10]
.text$mn:00003716                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000371B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003722                 lea     ecx, [ebp+var_2C]
.text$mn:00003725                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000372A
.text$mn:0000372A loc_372A:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+15Fj
.text$mn:0000372A                                         ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+172j
.text$mn:0000372A                 jmp     short loc_36B6
.text$mn:0000372C ; ---------------------------------------------------------------------------
.text$mn:0000372C
.text$mn:0000372C loc_372C:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+116j
.text$mn:0000372C                                         ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+142j
.text$mn:0000372C                 push    offset $SG154909 ; "function"
.text$mn:00003731                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003734                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00003739                 mov     [ebp+var_68], eax
.text$mn:0000373C                 cmp     [ebp+var_68], 0
.text$mn:00003740                 jnz     short loc_3749
.text$mn:00003742                 xor     al, al
.text$mn:00003744                 jmp     loc_3830
.text$mn:00003749 ; ---------------------------------------------------------------------------
.text$mn:00003749
.text$mn:00003749 loc_3749:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+1B8j
.text$mn:00003749                 push    offset $SG154911 ; "mainExpr"
.text$mn:0000374E                 mov     ecx, [ebp+var_68] ; this
.text$mn:00003751                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00003756                 mov     ecx, eax        ; this
.text$mn:00003758                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:0000375D                 mov     [ebp+var_5C], eax
.text$mn:00003760                 cmp     [ebp+var_5C], 0
.text$mn:00003764                 jz      short loc_3779
.text$mn:00003766                 mov     eax, 2
.text$mn:0000376B                 imul    ecx, eax, 0
.text$mn:0000376E                 mov     edx, [ebp+var_5C]
.text$mn:00003771                 movzx   eax, word ptr [edx+ecx]
.text$mn:00003775                 test    eax, eax
.text$mn:00003777                 jnz     short loc_3780
.text$mn:00003779
.text$mn:00003779 loc_3779:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+1DCj
.text$mn:00003779                 xor     al, al
.text$mn:0000377B                 jmp     loc_3830
.text$mn:00003780 ; ---------------------------------------------------------------------------
.text$mn:00003780
.text$mn:00003780 loc_3780:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+1EFj
.text$mn:00003780                 mov     ecx, [ebp+var_5C]
.text$mn:00003783                 push    ecx             ; Str
.text$mn:00003784                 mov     ecx, [ebp+arg_14]
.text$mn:00003787                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:0000378C                 push    offset $SG154915 ; "functionName"
.text$mn:00003791                 mov     ecx, [ebp+var_68] ; this
.text$mn:00003794                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00003799                 mov     [ebp+var_70], eax
.text$mn:0000379C                 cmp     [ebp+var_70], 0
.text$mn:000037A0                 jz      loc_382E
.text$mn:000037A6                 push    offset $SG154918 ; "funcNameExpr"
.text$mn:000037AB                 mov     ecx, [ebp+var_70] ; this
.text$mn:000037AE                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000037B3                 mov     [ebp+var_50], eax
.text$mn:000037B6                 jmp     short loc_37C8
.text$mn:000037B8 ; ---------------------------------------------------------------------------
.text$mn:000037B8
.text$mn:000037B8 loc_37B8:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_382Cj
.text$mn:000037B8                 push    offset $SG154922 ; "funcNameExpr"
.text$mn:000037BD                 mov     ecx, [ebp+var_50] ; this
.text$mn:000037C0                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:000037C5                 mov     [ebp+var_50], eax
.text$mn:000037C8
.text$mn:000037C8 loc_37C8:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+22Ej
.text$mn:000037C8                 cmp     [ebp+var_50], 0
.text$mn:000037CC                 jz      short loc_382E
.text$mn:000037CE                 push    offset $SG154924 ; "expr"
.text$mn:000037D3                 mov     ecx, [ebp+var_50] ; this
.text$mn:000037D6                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000037DB                 mov     ecx, eax        ; this
.text$mn:000037DD                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:000037E2                 mov     [ebp+var_6C], eax
.text$mn:000037E5                 cmp     [ebp+var_6C], 0
.text$mn:000037E9                 jz      short loc_382C
.text$mn:000037EB                 mov     edx, 2
.text$mn:000037F0                 imul    eax, edx, 0
.text$mn:000037F3                 mov     ecx, [ebp+var_6C]
.text$mn:000037F6                 movzx   edx, word ptr [ecx+eax]
.text$mn:000037FA                 test    edx, edx
.text$mn:000037FC                 jz      short loc_382C
.text$mn:000037FE                 mov     eax, [ebp+var_6C]
.text$mn:00003801                 push    eax             ; Str
.text$mn:00003802                 lea     ecx, [ebp+var_48]
.text$mn:00003805                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000380A                 mov     [ebp+var_4], 1
.text$mn:00003811                 lea     ecx, [ebp+var_48]
.text$mn:00003814                 push    ecx
.text$mn:00003815                 mov     ecx, [ebp+arg_18]
.text$mn:00003818                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000381D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003824                 lea     ecx, [ebp+var_48]
.text$mn:00003827                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000382C
.text$mn:0000382C loc_382C:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+261j
.text$mn:0000382C                                         ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+274j
.text$mn:0000382C                 jmp     short loc_37B8
.text$mn:0000382E ; ---------------------------------------------------------------------------
.text$mn:0000382E
.text$mn:0000382E loc_382E:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+218j
.text$mn:0000382E                                         ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+244j
.text$mn:0000382E                 mov     al, 1
.text$mn:00003830
.text$mn:00003830 loc_3830:                               ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+79j
.text$mn:00003830                                         ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+1BCj ...
.text$mn:00003830                 mov     ecx, [ebp+var_C]
.text$mn:00003833                 mov     large fs:0, ecx
.text$mn:0000383A                 pop     ecx
.text$mn:0000383B                 mov     ecx, [ebp+var_10]
.text$mn:0000383E                 xor     ecx, ebp
.text$mn:00003840                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003845                 mov     esp, ebp
.text$mn:00003847                 pop     ebp
.text$mn:00003848                 retn    1Ch
.text$mn:00003848 ?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z endp
.text$mn:00003848
.text$mn:00003848 ; ---------------------------------------------------------------------------
.text$mn:0000384B                 db 0Dh dup(0CCh)
.text$mn:00003858
.text$mn:00003858 ; =============== S U B R O U T I N E =======================================
.text$mn:00003858
.text$mn:00003858 ; Attributes: bp-based frame
.text$mn:00003858
.text$mn:00003858 ; int __stdcall FunctionParsersManager::getUnitPaserParameters(TiXmlNode *, int, int, int)
.text$mn:00003858                 public ?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z
.text$mn:00003858 ?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z proc near
.text$mn:00003858                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+2FEp
.text$mn:00003858                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+8EAp
.text$mn:00003858
.text$mn:00003858 var_68          = dword ptr -68h
.text$mn:00003858 var_64          = dword ptr -64h
.text$mn:00003858 var_60          = dword ptr -60h
.text$mn:00003858 var_5C          = dword ptr -5Ch
.text$mn:00003858 Str             = dword ptr -58h
.text$mn:00003858 var_54          = dword ptr -54h
.text$mn:00003858 var_50          = dword ptr -50h
.text$mn:00003858 var_4C          = dword ptr -4Ch
.text$mn:00003858 var_48          = byte ptr -48h
.text$mn:00003858 var_2C          = byte ptr -2Ch
.text$mn:00003858 var_10          = dword ptr -10h
.text$mn:00003858 var_C           = dword ptr -0Ch
.text$mn:00003858 var_4           = dword ptr -4
.text$mn:00003858 arg_0           = dword ptr  8
.text$mn:00003858 arg_4           = dword ptr  0Ch
.text$mn:00003858 arg_8           = dword ptr  10h
.text$mn:00003858 arg_C           = dword ptr  14h
.text$mn:00003858
.text$mn:00003858                 push    ebp
.text$mn:00003859                 mov     ebp, esp
.text$mn:0000385B                 push    0FFFFFFFFh
.text$mn:0000385D                 push    offset __ehhandler$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z
.text$mn:00003862                 mov     eax, large fs:0
.text$mn:00003868                 push    eax
.text$mn:00003869                 sub     esp, 5Ch
.text$mn:0000386C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003871                 xor     eax, ebp
.text$mn:00003873                 mov     [ebp+var_10], eax
.text$mn:00003876                 push    eax
.text$mn:00003877                 lea     eax, [ebp+var_C]
.text$mn:0000387A                 mov     large fs:0, eax
.text$mn:00003880                 mov     [ebp+var_68], ecx
.text$mn:00003883                 push    offset $SG154943 ; "mainExpr"
.text$mn:00003888                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000388B                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00003890                 mov     ecx, eax        ; this
.text$mn:00003892                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:00003897                 mov     [ebp+var_5C], eax
.text$mn:0000389A                 cmp     [ebp+var_5C], 0
.text$mn:0000389E                 jz      short loc_38B3
.text$mn:000038A0                 mov     eax, 2
.text$mn:000038A5                 imul    ecx, eax, 0
.text$mn:000038A8                 mov     edx, [ebp+var_5C]
.text$mn:000038AB                 movzx   eax, word ptr [edx+ecx]
.text$mn:000038AF                 test    eax, eax
.text$mn:000038B1                 jnz     short loc_38BA
.text$mn:000038B3
.text$mn:000038B3 loc_38B3:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+46j
.text$mn:000038B3                 xor     al, al
.text$mn:000038B5                 jmp     loc_3A0C
.text$mn:000038BA ; ---------------------------------------------------------------------------
.text$mn:000038BA
.text$mn:000038BA loc_38BA:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+59j
.text$mn:000038BA                 mov     ecx, [ebp+var_5C]
.text$mn:000038BD                 push    ecx             ; Str
.text$mn:000038BE                 mov     ecx, [ebp+arg_4]
.text$mn:000038C1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000038C6                 push    offset $SG154947 ; "functionName"
.text$mn:000038CB                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000038CE                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:000038D3                 mov     [ebp+var_64], eax
.text$mn:000038D6                 cmp     [ebp+var_64], 0
.text$mn:000038DA                 jz      loc_3968
.text$mn:000038E0                 push    offset $SG154950 ; "nameExpr"
.text$mn:000038E5                 mov     ecx, [ebp+var_64] ; this
.text$mn:000038E8                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:000038ED                 mov     [ebp+var_50], eax
.text$mn:000038F0                 jmp     short loc_3902
.text$mn:000038F2 ; ---------------------------------------------------------------------------
.text$mn:000038F2
.text$mn:000038F2 loc_38F2:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_3966j
.text$mn:000038F2                 push    offset $SG154954 ; "nameExpr"
.text$mn:000038F7                 mov     ecx, [ebp+var_50] ; this
.text$mn:000038FA                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:000038FF                 mov     [ebp+var_50], eax
.text$mn:00003902
.text$mn:00003902 loc_3902:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+98j
.text$mn:00003902                 cmp     [ebp+var_50], 0
.text$mn:00003906                 jz      short loc_3968
.text$mn:00003908                 push    offset $SG154956 ; "expr"
.text$mn:0000390D                 mov     ecx, [ebp+var_50] ; this
.text$mn:00003910                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:00003915                 mov     ecx, eax        ; this
.text$mn:00003917                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:0000391C                 mov     [ebp+Str], eax
.text$mn:0000391F                 cmp     [ebp+Str], 0
.text$mn:00003923                 jz      short loc_3966
.text$mn:00003925                 mov     edx, 2
.text$mn:0000392A                 imul    eax, edx, 0
.text$mn:0000392D                 mov     ecx, [ebp+Str]
.text$mn:00003930                 movzx   edx, word ptr [ecx+eax]
.text$mn:00003934                 test    edx, edx
.text$mn:00003936                 jz      short loc_3966
.text$mn:00003938                 mov     eax, [ebp+Str]
.text$mn:0000393B                 push    eax             ; Str
.text$mn:0000393C                 lea     ecx, [ebp+var_2C]
.text$mn:0000393F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003944                 mov     [ebp+var_4], 0
.text$mn:0000394B                 lea     ecx, [ebp+var_2C]
.text$mn:0000394E                 push    ecx
.text$mn:0000394F                 mov     ecx, [ebp+arg_8]
.text$mn:00003952                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003957                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000395E                 lea     ecx, [ebp+var_2C]
.text$mn:00003961                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003966
.text$mn:00003966 loc_3966:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+CBj
.text$mn:00003966                                         ; FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+DEj
.text$mn:00003966                 jmp     short loc_38F2
.text$mn:00003968 ; ---------------------------------------------------------------------------
.text$mn:00003968
.text$mn:00003968 loc_3968:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+82j
.text$mn:00003968                                         ; FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+AEj
.text$mn:00003968                 push    offset $SG154960 ; "className"
.text$mn:0000396D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003970                 call    ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::FirstChild(wchar_t const *)
.text$mn:00003975                 mov     [ebp+var_60], eax
.text$mn:00003978                 cmp     [ebp+var_60], 0
.text$mn:0000397C                 jz      loc_3A0A
.text$mn:00003982                 push    offset $SG154963 ; "nameExpr"
.text$mn:00003987                 mov     ecx, [ebp+var_60] ; this
.text$mn:0000398A                 call    ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z ; TiXmlNode::FirstChildElement(wchar_t const *)
.text$mn:0000398F                 mov     [ebp+var_4C], eax
.text$mn:00003992                 jmp     short loc_39A4
.text$mn:00003994 ; ---------------------------------------------------------------------------
.text$mn:00003994
.text$mn:00003994 loc_3994:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &):loc_3A08j
.text$mn:00003994                 push    offset $SG154967 ; "nameExpr"
.text$mn:00003999                 mov     ecx, [ebp+var_4C] ; this
.text$mn:0000399C                 call    ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z ; TiXmlNode::NextSibling(wchar_t const *)
.text$mn:000039A1                 mov     [ebp+var_4C], eax
.text$mn:000039A4
.text$mn:000039A4 loc_39A4:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+13Aj
.text$mn:000039A4                 cmp     [ebp+var_4C], 0
.text$mn:000039A8                 jz      short loc_3A0A
.text$mn:000039AA                 push    offset $SG154969 ; "expr"
.text$mn:000039AF                 mov     ecx, [ebp+var_4C] ; this
.text$mn:000039B2                 call    ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ ; TiXmlNode::ToElement(void)
.text$mn:000039B7                 mov     ecx, eax        ; this
.text$mn:000039B9                 call    ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z ; TiXmlElement::Attribute(wchar_t const *)
.text$mn:000039BE                 mov     [ebp+var_54], eax
.text$mn:000039C1                 cmp     [ebp+var_54], 0
.text$mn:000039C5                 jz      short loc_3A08
.text$mn:000039C7                 mov     edx, 2
.text$mn:000039CC                 imul    eax, edx, 0
.text$mn:000039CF                 mov     ecx, [ebp+var_54]
.text$mn:000039D2                 movzx   edx, word ptr [ecx+eax]
.text$mn:000039D6                 test    edx, edx
.text$mn:000039D8                 jz      short loc_3A08
.text$mn:000039DA                 mov     eax, [ebp+var_54]
.text$mn:000039DD                 push    eax             ; Str
.text$mn:000039DE                 lea     ecx, [ebp+var_48]
.text$mn:000039E1                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000039E6                 mov     [ebp+var_4], 1
.text$mn:000039ED                 lea     ecx, [ebp+var_48]
.text$mn:000039F0                 push    ecx
.text$mn:000039F1                 mov     ecx, [ebp+arg_C]
.text$mn:000039F4                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000039F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003A00                 lea     ecx, [ebp+var_48]
.text$mn:00003A03                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00003A08
.text$mn:00003A08 loc_3A08:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+16Dj
.text$mn:00003A08                                         ; FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+180j
.text$mn:00003A08                 jmp     short loc_3994
.text$mn:00003A0A ; ---------------------------------------------------------------------------
.text$mn:00003A0A
.text$mn:00003A0A loc_3A0A:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+124j
.text$mn:00003A0A                                         ; FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+150j
.text$mn:00003A0A                 mov     al, 1
.text$mn:00003A0C
.text$mn:00003A0C loc_3A0C:                               ; CODE XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+5Dj
.text$mn:00003A0C                 mov     ecx, [ebp+var_C]
.text$mn:00003A0F                 mov     large fs:0, ecx
.text$mn:00003A16                 pop     ecx
.text$mn:00003A17                 mov     ecx, [ebp+var_10]
.text$mn:00003A1A                 xor     ecx, ebp
.text$mn:00003A1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003A21                 mov     esp, ebp
.text$mn:00003A23                 pop     ebp
.text$mn:00003A24                 retn    10h
.text$mn:00003A24 ?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z endp
.text$mn:00003A24
.text$mn:00003A24 ; ---------------------------------------------------------------------------
.text$mn:00003A27                 align 4
.text$mn:00003A28
.text$mn:00003A28 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A28
.text$mn:00003A28 ; Attributes: bp-based frame
.text$mn:00003A28
.text$mn:00003A28 ; struct FunctionParser *__thiscall FunctionParsersManager::getParser(FunctionParsersManager *this, const struct AssociationInfo *)
.text$mn:00003A28                 public ?getParser@FunctionParsersManager@@AAEPAVFunctionParser@@ABUAssociationInfo@@@Z
.text$mn:00003A28 ?getParser@FunctionParsersManager@@AAEPAVFunctionParser@@ABUAssociationInfo@@@Z proc near
.text$mn:00003A28                                         ; CODE XREF: FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)+3Cp
.text$mn:00003A28
.text$mn:00003A28 var_18          = dword ptr -18h
.text$mn:00003A28 var_14          = byte ptr -14h
.text$mn:00003A28 var_10          = dword ptr -10h
.text$mn:00003A28 var_C           = dword ptr -0Ch
.text$mn:00003A28 var_5           = byte ptr -5
.text$mn:00003A28 var_4           = byte ptr -4
.text$mn:00003A28 var_3           = byte ptr -3
.text$mn:00003A28 var_2           = byte ptr -2
.text$mn:00003A28 var_1           = byte ptr -1
.text$mn:00003A28 arg_0           = dword ptr  8
.text$mn:00003A28
.text$mn:00003A28                 push    ebp
.text$mn:00003A29                 mov     ebp, esp
.text$mn:00003A2B                 sub     esp, 18h
.text$mn:00003A2E                 mov     [ebp+var_C], ecx
.text$mn:00003A31                 mov     [ebp+var_2], 0
.text$mn:00003A35                 mov     [ebp+var_3], 1
.text$mn:00003A39                 mov     [ebp+var_4], 2
.text$mn:00003A3D                 mov     [ebp+var_5], 3
.text$mn:00003A41                 mov     [ebp+var_1], 0
.text$mn:00003A45                 mov     eax, [ebp+arg_0]
.text$mn:00003A48                 cmp     dword ptr [eax+4], 0FFFFFFFFh
.text$mn:00003A4C                 jz      short loc_3A5D
.text$mn:00003A4E                 mov     ecx, [ebp+arg_0]
.text$mn:00003A51                 cmp     dword ptr [ecx+4], 0Fh
.text$mn:00003A55                 jz      short loc_3A5D
.text$mn:00003A57                 mov     [ebp+var_1], 1
.text$mn:00003A5B                 jmp     short loc_3AB8
.text$mn:00003A5D ; ---------------------------------------------------------------------------
.text$mn:00003A5D
.text$mn:00003A5D loc_3A5D:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+24j
.text$mn:00003A5D                                         ; FunctionParsersManager::getParser(AssociationInfo const &)+2Dj
.text$mn:00003A5D                 mov     edx, [ebp+arg_0]
.text$mn:00003A60                 cmp     dword ptr [edx+4], 0Fh
.text$mn:00003A64                 jnz     short loc_3A87
.text$mn:00003A66                 push    offset $SG155198 ; Str
.text$mn:00003A6B                 mov     eax, [ebp+arg_0]
.text$mn:00003A6E                 add     eax, 24h ; '$'
.text$mn:00003A71                 push    eax             ; int
.text$mn:00003A72                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00003A77                 add     esp, 8
.text$mn:00003A7A                 movzx   ecx, al
.text$mn:00003A7D                 test    ecx, ecx
.text$mn:00003A7F                 jz      short loc_3A87
.text$mn:00003A81                 mov     [ebp+var_1], 2
.text$mn:00003A85                 jmp     short loc_3AB8
.text$mn:00003A87 ; ---------------------------------------------------------------------------
.text$mn:00003A87
.text$mn:00003A87 loc_3A87:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+3Cj
.text$mn:00003A87                                         ; FunctionParsersManager::getParser(AssociationInfo const &)+57j
.text$mn:00003A87                 mov     edx, [ebp+arg_0]
.text$mn:00003A8A                 cmp     dword ptr [edx+4], 0FFFFFFFFh
.text$mn:00003A8E                 jnz     short loc_3AB1
.text$mn:00003A90                 push    offset $SG155217 ; Str
.text$mn:00003A95                 mov     eax, [ebp+arg_0]
.text$mn:00003A98                 add     eax, 8
.text$mn:00003A9B                 push    eax             ; int
.text$mn:00003A9C                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00003AA1                 add     esp, 8
.text$mn:00003AA4                 movzx   ecx, al
.text$mn:00003AA7                 test    ecx, ecx
.text$mn:00003AA9                 jz      short loc_3AB1
.text$mn:00003AAB                 mov     [ebp+var_1], 3
.text$mn:00003AAF                 jmp     short loc_3AB8
.text$mn:00003AB1 ; ---------------------------------------------------------------------------
.text$mn:00003AB1
.text$mn:00003AB1 loc_3AB1:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+66j
.text$mn:00003AB1                                         ; FunctionParsersManager::getParser(AssociationInfo const &)+81j
.text$mn:00003AB1                 xor     eax, eax
.text$mn:00003AB3                 jmp     loc_3BE5
.text$mn:00003AB8 ; ---------------------------------------------------------------------------
.text$mn:00003AB8
.text$mn:00003AB8 loc_3AB8:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+33j
.text$mn:00003AB8                                         ; FunctionParsersManager::getParser(AssociationInfo const &)+5Dj ...
.text$mn:00003AB8                 mov     [ebp+var_10], 0
.text$mn:00003ABF                 mov     ecx, [ebp+var_C]
.text$mn:00003AC2                 add     ecx, 14h
.text$mn:00003AC5                 call    ?size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::size(void)
.text$mn:00003ACA                 mov     [ebp+var_18], eax
.text$mn:00003ACD                 jmp     short loc_3AD8
.text$mn:00003ACF ; ---------------------------------------------------------------------------
.text$mn:00003ACF
.text$mn:00003ACF loc_3ACF:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &):loc_3BDEj
.text$mn:00003ACF                 mov     edx, [ebp+var_10]
.text$mn:00003AD2                 add     edx, 1
.text$mn:00003AD5                 mov     [ebp+var_10], edx
.text$mn:00003AD8
.text$mn:00003AD8 loc_3AD8:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+A5j
.text$mn:00003AD8                 mov     eax, [ebp+var_10]
.text$mn:00003ADB                 cmp     eax, [ebp+var_18]
.text$mn:00003ADE                 jnb     loc_3BE3
.text$mn:00003AE4                 mov     cl, [ebp+var_1]
.text$mn:00003AE7                 mov     [ebp+var_14], cl
.text$mn:00003AEA                 cmp     [ebp+var_14], 1
.text$mn:00003AEE                 jz      short loc_3B05
.text$mn:00003AF0                 cmp     [ebp+var_14], 2
.text$mn:00003AF4                 jz      short loc_3B48
.text$mn:00003AF6                 cmp     [ebp+var_14], 3
.text$mn:00003AFA                 jz      loc_3B94
.text$mn:00003B00                 jmp     loc_3BDE
.text$mn:00003B05 ; ---------------------------------------------------------------------------
.text$mn:00003B05
.text$mn:00003B05 loc_3B05:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+C6j
.text$mn:00003B05                 mov     edx, [ebp+var_10]
.text$mn:00003B08                 push    edx
.text$mn:00003B09                 mov     ecx, [ebp+var_C]
.text$mn:00003B0C                 add     ecx, 14h
.text$mn:00003B0F                 call    ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)
.text$mn:00003B14                 mov     ecx, [ebp+arg_0]
.text$mn:00003B17                 mov     edx, [ecx+4]
.text$mn:00003B1A                 cmp     edx, [eax+4]
.text$mn:00003B1D                 jnz     short loc_3B43
.text$mn:00003B1F                 mov     eax, [ebp+var_10]
.text$mn:00003B22                 push    eax
.text$mn:00003B23                 mov     ecx, [ebp+var_C]
.text$mn:00003B26                 add     ecx, 14h
.text$mn:00003B29                 call    ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)
.text$mn:00003B2E                 mov     ecx, [eax]
.text$mn:00003B30                 push    ecx
.text$mn:00003B31                 mov     ecx, [ebp+var_C]
.text$mn:00003B34                 add     ecx, 4
.text$mn:00003B37                 call    ??A?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEAAPAVFunctionParser@@I@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)
.text$mn:00003B3C                 mov     eax, [eax]
.text$mn:00003B3E                 jmp     loc_3BE5
.text$mn:00003B43 ; ---------------------------------------------------------------------------
.text$mn:00003B43
.text$mn:00003B43 loc_3B43:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+F5j
.text$mn:00003B43                 jmp     loc_3BDE
.text$mn:00003B48 ; ---------------------------------------------------------------------------
.text$mn:00003B48
.text$mn:00003B48 loc_3B48:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+CCj
.text$mn:00003B48                 mov     edx, [ebp+var_10]
.text$mn:00003B4B                 push    edx
.text$mn:00003B4C                 mov     ecx, [ebp+var_C]
.text$mn:00003B4F                 add     ecx, 14h
.text$mn:00003B52                 call    ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)
.text$mn:00003B57                 add     eax, 24h ; '$'
.text$mn:00003B5A                 push    eax
.text$mn:00003B5B                 mov     eax, [ebp+arg_0]
.text$mn:00003B5E                 add     eax, 24h ; '$'
.text$mn:00003B61                 push    eax
.text$mn:00003B62                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003B67                 add     esp, 8
.text$mn:00003B6A                 movzx   ecx, al
.text$mn:00003B6D                 test    ecx, ecx
.text$mn:00003B6F                 jz      short loc_3B92
.text$mn:00003B71                 mov     edx, [ebp+var_10]
.text$mn:00003B74                 push    edx
.text$mn:00003B75                 mov     ecx, [ebp+var_C]
.text$mn:00003B78                 add     ecx, 14h
.text$mn:00003B7B                 call    ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)
.text$mn:00003B80                 mov     eax, [eax]
.text$mn:00003B82                 push    eax
.text$mn:00003B83                 mov     ecx, [ebp+var_C]
.text$mn:00003B86                 add     ecx, 4
.text$mn:00003B89                 call    ??A?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEAAPAVFunctionParser@@I@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)
.text$mn:00003B8E                 mov     eax, [eax]
.text$mn:00003B90                 jmp     short loc_3BE5
.text$mn:00003B92 ; ---------------------------------------------------------------------------
.text$mn:00003B92
.text$mn:00003B92 loc_3B92:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+147j
.text$mn:00003B92                 jmp     short loc_3BDE
.text$mn:00003B94 ; ---------------------------------------------------------------------------
.text$mn:00003B94
.text$mn:00003B94 loc_3B94:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+D2j
.text$mn:00003B94                 mov     ecx, [ebp+var_10]
.text$mn:00003B97                 push    ecx
.text$mn:00003B98                 mov     ecx, [ebp+var_C]
.text$mn:00003B9B                 add     ecx, 14h
.text$mn:00003B9E                 call    ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)
.text$mn:00003BA3                 add     eax, 8
.text$mn:00003BA6                 push    eax
.text$mn:00003BA7                 mov     edx, [ebp+arg_0]
.text$mn:00003BAA                 add     edx, 8
.text$mn:00003BAD                 push    edx
.text$mn:00003BAE                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00003BB3                 add     esp, 8
.text$mn:00003BB6                 movzx   eax, al
.text$mn:00003BB9                 test    eax, eax
.text$mn:00003BBB                 jz      short loc_3BDE
.text$mn:00003BBD                 mov     ecx, [ebp+var_10]
.text$mn:00003BC0                 push    ecx
.text$mn:00003BC1                 mov     ecx, [ebp+var_C]
.text$mn:00003BC4                 add     ecx, 14h
.text$mn:00003BC7                 call    ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)
.text$mn:00003BCC                 mov     edx, [eax]
.text$mn:00003BCE                 push    edx
.text$mn:00003BCF                 mov     ecx, [ebp+var_C]
.text$mn:00003BD2                 add     ecx, 4
.text$mn:00003BD5                 call    ??A?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEAAPAVFunctionParser@@I@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)
.text$mn:00003BDA                 mov     eax, [eax]
.text$mn:00003BDC                 jmp     short loc_3BE5
.text$mn:00003BDE ; ---------------------------------------------------------------------------
.text$mn:00003BDE
.text$mn:00003BDE loc_3BDE:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+D8j
.text$mn:00003BDE                                         ; FunctionParsersManager::getParser(AssociationInfo const &):loc_3B43j ...
.text$mn:00003BDE                 jmp     loc_3ACF
.text$mn:00003BE3 ; ---------------------------------------------------------------------------
.text$mn:00003BE3
.text$mn:00003BE3 loc_3BE3:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+B6j
.text$mn:00003BE3                 xor     eax, eax
.text$mn:00003BE5
.text$mn:00003BE5 loc_3BE5:                               ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+8Bj
.text$mn:00003BE5                                         ; FunctionParsersManager::getParser(AssociationInfo const &)+116j ...
.text$mn:00003BE5                 mov     esp, ebp
.text$mn:00003BE7                 pop     ebp
.text$mn:00003BE8                 retn    4
.text$mn:00003BE8 ?getParser@FunctionParsersManager@@AAEPAVFunctionParser@@ABUAssociationInfo@@@Z endp
.text$mn:00003BE8
.text$mn:00003BE8 ; ---------------------------------------------------------------------------
.text$mn:00003BEB                 align 4
.text$mn:00003BEB _text$mn        ends
.text$mn:00003BEB
.text$x:00003BEC ; ===========================================================================
.text$x:00003BEC
.text$x:00003BEC ; Segment type: Pure code
.text$x:00003BEC ; Segment permissions: Read/Execute
.text$x:00003BEC _text$x         segment para public 'CODE' use32
.text$x:00003BEC                 assume cs:_text$x
.text$x:00003BEC                 ;org 3BECh
.text$x:00003BEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003BEC
.text$x:00003BEC ; =============== S U B R O U T I N E =======================================
.text$x:00003BEC
.text$x:00003BEC
.text$x:00003BEC __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$0 proc near
.text$x:00003BEC                                         ; DATA XREF: .xdata$x:0000FD24o
.text$x:00003BEC                 lea     ecx, [ebp+18h]
.text$x:00003BEF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003BEF __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$0 endp
.text$x:00003BEF
.text$x:00003BF4
.text$x:00003BF4 ; =============== S U B R O U T I N E =======================================
.text$x:00003BF4
.text$x:00003BF4
.text$x:00003BF4 __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$1 proc near
.text$x:00003BF4                                         ; DATA XREF: .xdata$x:0000FD2Co
.text$x:00003BF4                 lea     ecx, [ebp-850h] ; this
.text$x:00003BFA                 jmp     ??1foundInfo@@QAE@XZ ; foundInfo::~foundInfo(void)
.text$x:00003BFA __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$1 endp
.text$x:00003BFA
.text$x:00003BFF
.text$x:00003BFF ; =============== S U B R O U T I N E =======================================
.text$x:00003BFF
.text$x:00003BFF
.text$x:00003BFF __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$2 proc near
.text$x:00003BFF                                         ; DATA XREF: .xdata$x:0000FD34o
.text$x:00003BFF                 mov     ecx, [ebp-8C4h]
.text$x:00003C05                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003C05 __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$2 endp
.text$x:00003C05
.text$x:00003C0A
.text$x:00003C0A ; =============== S U B R O U T I N E =======================================
.text$x:00003C0A
.text$x:00003C0A
.text$x:00003C0A __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$3 proc near
.text$x:00003C0A                                         ; DATA XREF: .xdata$x:0000FD3Co
.text$x:00003C0A                 lea     ecx, [ebp-888h]
.text$x:00003C10                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003C10 __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$3 endp
.text$x:00003C10
.text$x:00003C15
.text$x:00003C15 ; =============== S U B R O U T I N E =======================================
.text$x:00003C15
.text$x:00003C15
.text$x:00003C15 __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$4 proc near
.text$x:00003C15                                         ; DATA XREF: .xdata$x:0000FD44o
.text$x:00003C15                 mov     ecx, [ebp-8BCh]
.text$x:00003C1B                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003C1B __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$4 endp
.text$x:00003C1B
.text$x:00003C20
.text$x:00003C20 ; =============== S U B R O U T I N E =======================================
.text$x:00003C20
.text$x:00003C20
.text$x:00003C20 __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$5 proc near
.text$x:00003C20                                         ; DATA XREF: .xdata$x:0000FD4Co
.text$x:00003C20                 lea     ecx, [ebp-86Ch]
.text$x:00003C26                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003C26 __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$5 endp
.text$x:00003C26
.text$x:00003C2B
.text$x:00003C2B ; =============== S U B R O U T I N E =======================================
.text$x:00003C2B
.text$x:00003C2B
.text$x:00003C2B __ehhandler$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z proc near
.text$x:00003C2B                                         ; DATA XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+5o
.text$x:00003C2B
.text$x:00003C2B arg_4           = dword ptr  8
.text$x:00003C2B
.text$x:00003C2B                 mov     edx, [esp+arg_4]
.text$x:00003C2F                 lea     eax, [edx+0Ch]
.text$x:00003C32                 mov     ecx, [edx-8C0h]
.text$x:00003C38                 xor     ecx, eax
.text$x:00003C3A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C3F                 mov     ecx, [edx-4]
.text$x:00003C42                 xor     ecx, eax
.text$x:00003C44                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C49                 mov     eax, offset __ehfuncinfo$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z
.text$x:00003C4E                 jmp     ___CxxFrameHandler3
.text$x:00003C4E __ehhandler$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z endp
.text$x:00003C4E
.text$x:00003C53
.text$x:00003C53 ; =============== S U B R O U T I N E =======================================
.text$x:00003C53
.text$x:00003C53
.text$x:00003C53 __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$0 proc near
.text$x:00003C53                                         ; DATA XREF: .xdata$x:0000FD04o
.text$x:00003C53                 lea     ecx, [ebp+14h]
.text$x:00003C56                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003C56 __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$0 endp
.text$x:00003C56
.text$x:00003C5B
.text$x:00003C5B ; =============== S U B R O U T I N E =======================================
.text$x:00003C5B
.text$x:00003C5B
.text$x:00003C5B __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$1 proc near
.text$x:00003C5B                                         ; DATA XREF: .xdata$x:0000FCFCo
.text$x:00003C5B                 mov     eax, [ebp-814h]
.text$x:00003C61                 and     eax, 1
.text$x:00003C64                 jz      locret_3C79
.text$x:00003C6A                 and     dword ptr [ebp-814h], 0FFFFFFFEh
.text$x:00003C71                 mov     ecx, [ebp+8]
.text$x:00003C74                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003C79 ; ---------------------------------------------------------------------------
.text$x:00003C79
.text$x:00003C79 locret_3C79:                            ; CODE XREF: __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$1+9j
.text$x:00003C79                 retn
.text$x:00003C79 __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$1 endp
.text$x:00003C79
.text$x:00003C7A
.text$x:00003C7A ; =============== S U B R O U T I N E =======================================
.text$x:00003C7A
.text$x:00003C7A
.text$x:00003C7A __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$2 proc near
.text$x:00003C7A                                         ; DATA XREF: .xdata$x:0000FD0Co
.text$x:00003C7A                 lea     ecx, [ebp-868h]
.text$x:00003C80                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00003C80 __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$2 endp
.text$x:00003C80
.text$x:00003C85
.text$x:00003C85 ; =============== S U B R O U T I N E =======================================
.text$x:00003C85
.text$x:00003C85
.text$x:00003C85 __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$3 proc near
.text$x:00003C85                                         ; DATA XREF: .xdata$x:0000FD14o
.text$x:00003C85                 mov     ecx, [ebp-844h]
.text$x:00003C8B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00003C8B __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$3 endp
.text$x:00003C8B
.text$x:00003C90
.text$x:00003C90 ; =============== S U B R O U T I N E =======================================
.text$x:00003C90
.text$x:00003C90
.text$x:00003C90 __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$5 proc near
.text$x:00003C90                                         ; DATA XREF: .xdata$x:0000FD1Co
.text$x:00003C90                 mov     ecx, [ebp-848h]
.text$x:00003C96                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003C96 __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$5 endp
.text$x:00003C96
.text$x:00003C9B
.text$x:00003C9B ; =============== S U B R O U T I N E =======================================
.text$x:00003C9B
.text$x:00003C9B
.text$x:00003C9B __ehhandler$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z proc near
.text$x:00003C9B                                         ; DATA XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+5o
.text$x:00003C9B
.text$x:00003C9B arg_4           = dword ptr  8
.text$x:00003C9B
.text$x:00003C9B                 mov     edx, [esp+arg_4]
.text$x:00003C9F                 lea     eax, [edx+0Ch]
.text$x:00003CA2                 mov     ecx, [edx-860h]
.text$x:00003CA8                 xor     ecx, eax
.text$x:00003CAA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CAF                 mov     ecx, [edx-4]
.text$x:00003CB2                 xor     ecx, eax
.text$x:00003CB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CB9                 mov     eax, offset __ehfuncinfo$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z
.text$x:00003CBE                 jmp     ___CxxFrameHandler3
.text$x:00003CBE __ehhandler$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z endp
.text$x:00003CBE
.text$x:00003CC3
.text$x:00003CC3 ; =============== S U B R O U T I N E =======================================
.text$x:00003CC3
.text$x:00003CC3
.text$x:00003CC3 __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 proc near
.text$x:00003CC3                                         ; DATA XREF: .xdata$x:0000FCD4o
.text$x:00003CC3                 lea     ecx, [ebp+18h]
.text$x:00003CC6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003CC6 __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 endp
.text$x:00003CC6
.text$x:00003CCB
.text$x:00003CCB ; =============== S U B R O U T I N E =======================================
.text$x:00003CCB
.text$x:00003CCB
.text$x:00003CCB __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1 proc near
.text$x:00003CCB                                         ; DATA XREF: .xdata$x:0000FCDCo
.text$x:00003CCB                 lea     ecx, [ebp-54h]
.text$x:00003CCE                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003CCE __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1 endp
.text$x:00003CCE
.text$x:00003CD3
.text$x:00003CD3 ; =============== S U B R O U T I N E =======================================
.text$x:00003CD3
.text$x:00003CD3
.text$x:00003CD3 __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2 proc near
.text$x:00003CD3                                         ; DATA XREF: .xdata$x:0000FCE4o
.text$x:00003CD3                 lea     ecx, [ebp-44h]
.text$x:00003CD6                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003CD6 __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2 endp
.text$x:00003CD6
.text$x:00003CDB
.text$x:00003CDB ; =============== S U B R O U T I N E =======================================
.text$x:00003CDB
.text$x:00003CDB
.text$x:00003CDB __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3 proc near
.text$x:00003CDB                                         ; DATA XREF: .xdata$x:0000FCECo
.text$x:00003CDB                 lea     ecx, [ebp-34h]
.text$x:00003CDE                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003CDE __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3 endp
.text$x:00003CDE
.text$x:00003CE3
.text$x:00003CE3 ; =============== S U B R O U T I N E =======================================
.text$x:00003CE3
.text$x:00003CE3
.text$x:00003CE3 __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$4 proc near
.text$x:00003CE3                                         ; DATA XREF: .xdata$x:0000FCF4o
.text$x:00003CE3                 mov     ecx, [ebp-20h]
.text$x:00003CE6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003CE6 __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$4 endp
.text$x:00003CE6
.text$x:00003CEB
.text$x:00003CEB ; =============== S U B R O U T I N E =======================================
.text$x:00003CEB
.text$x:00003CEB
.text$x:00003CEB __ehhandler$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$x:00003CEB                                         ; DATA XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00003CEB
.text$x:00003CEB arg_4           = dword ptr  8
.text$x:00003CEB
.text$x:00003CEB                 mov     edx, [esp+arg_4]
.text$x:00003CEF                 lea     eax, [edx+0Ch]
.text$x:00003CF2                 mov     ecx, [edx-4Ch]
.text$x:00003CF5                 xor     ecx, eax
.text$x:00003CF7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003CFC                 mov     eax, offset __ehfuncinfo$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$x:00003D01                 jmp     ___CxxFrameHandler3
.text$x:00003D01 __ehhandler$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$x:00003D01
.text$x:00003D06
.text$x:00003D06 ; =============== S U B R O U T I N E =======================================
.text$x:00003D06
.text$x:00003D06
.text$x:00003D06 __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 proc near
.text$x:00003D06                                         ; DATA XREF: .xdata$x:0000FABCo
.text$x:00003D06                 lea     ecx, [ebp+20h]
.text$x:00003D09                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D09 __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 endp
.text$x:00003D09
.text$x:00003D0E
.text$x:00003D0E ; =============== S U B R O U T I N E =======================================
.text$x:00003D0E
.text$x:00003D0E
.text$x:00003D0E __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1 proc near
.text$x:00003D0E                                         ; DATA XREF: .xdata$x:0000FAC4o
.text$x:00003D0E                 mov     ecx, [ebp-5Ch]
.text$x:00003D11                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003D11 __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1 endp
.text$x:00003D11
.text$x:00003D16
.text$x:00003D16 ; =============== S U B R O U T I N E =======================================
.text$x:00003D16
.text$x:00003D16
.text$x:00003D16 __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2 proc near
.text$x:00003D16                                         ; DATA XREF: .xdata$x:0000FACCo
.text$x:00003D16                 lea     ecx, [ebp-2Ch]
.text$x:00003D19                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D19 __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2 endp
.text$x:00003D19
.text$x:00003D1E
.text$x:00003D1E ; =============== S U B R O U T I N E =======================================
.text$x:00003D1E
.text$x:00003D1E
.text$x:00003D1E __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3 proc near
.text$x:00003D1E                                         ; DATA XREF: .xdata$x:0000FAD4o
.text$x:00003D1E                 mov     ecx, [ebp-60h]
.text$x:00003D21                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D21 __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3 endp
.text$x:00003D21
.text$x:00003D26
.text$x:00003D26 ; =============== S U B R O U T I N E =======================================
.text$x:00003D26
.text$x:00003D26
.text$x:00003D26 __ehhandler$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$x:00003D26                                         ; DATA XREF: FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00003D26
.text$x:00003D26 arg_4           = dword ptr  8
.text$x:00003D26
.text$x:00003D26                 mov     edx, [esp+arg_4]
.text$x:00003D2A                 lea     eax, [edx+0Ch]
.text$x:00003D2D                 mov     ecx, [edx-60h]
.text$x:00003D30                 xor     ecx, eax
.text$x:00003D32                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D37                 mov     ecx, [edx-4]
.text$x:00003D3A                 xor     ecx, eax
.text$x:00003D3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D41                 mov     eax, offset __ehfuncinfo$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$x:00003D46                 jmp     ___CxxFrameHandler3
.text$x:00003D46 __ehhandler$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$x:00003D46
.text$x:00003D4B
.text$x:00003D4B ; =============== S U B R O U T I N E =======================================
.text$x:00003D4B
.text$x:00003D4B
.text$x:00003D4B __unwindfunclet$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z$0 proc near
.text$x:00003D4B                                         ; DATA XREF: .xdata$x:0000FA44o
.text$x:00003D4B                 lea     ecx, [ebp-2Ch]
.text$x:00003D4E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D4E __unwindfunclet$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z$0 endp
.text$x:00003D4E
.text$x:00003D53
.text$x:00003D53 ; =============== S U B R O U T I N E =======================================
.text$x:00003D53
.text$x:00003D53
.text$x:00003D53 __ehhandler$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z proc near
.text$x:00003D53                                         ; DATA XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+5o
.text$x:00003D53
.text$x:00003D53 arg_4           = dword ptr  8
.text$x:00003D53
.text$x:00003D53                 mov     edx, [esp+arg_4]
.text$x:00003D57                 lea     eax, [edx+0Ch]
.text$x:00003D5A                 mov     ecx, [edx-44h]
.text$x:00003D5D                 xor     ecx, eax
.text$x:00003D5F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D64                 mov     ecx, [edx-4]
.text$x:00003D67                 xor     ecx, eax
.text$x:00003D69                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D6E                 mov     eax, offset __ehfuncinfo$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z
.text$x:00003D73                 jmp     ___CxxFrameHandler3
.text$x:00003D73 __ehhandler$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z endp
.text$x:00003D73
.text$x:00003D78
.text$x:00003D78 ; =============== S U B R O U T I N E =======================================
.text$x:00003D78
.text$x:00003D78
.text$x:00003D78 __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 proc near
.text$x:00003D78                                         ; DATA XREF: .xdata$x:0000FA9Co
.text$x:00003D78                 lea     ecx, [ebp+18h]
.text$x:00003D7B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D7B __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 endp
.text$x:00003D7B
.text$x:00003D80
.text$x:00003D80 ; =============== S U B R O U T I N E =======================================
.text$x:00003D80
.text$x:00003D80
.text$x:00003D80 __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1 proc near
.text$x:00003D80                                         ; DATA XREF: .xdata$x:0000FAA4o
.text$x:00003D80                 lea     ecx, [ebp-44h]
.text$x:00003D83                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003D83 __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1 endp
.text$x:00003D83
.text$x:00003D88
.text$x:00003D88 ; =============== S U B R O U T I N E =======================================
.text$x:00003D88
.text$x:00003D88
.text$x:00003D88 __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2 proc near
.text$x:00003D88                                         ; DATA XREF: .xdata$x:0000FAACo
.text$x:00003D88                 lea     ecx, [ebp-34h]
.text$x:00003D8B                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003D8B __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2 endp
.text$x:00003D8B
.text$x:00003D90
.text$x:00003D90 ; =============== S U B R O U T I N E =======================================
.text$x:00003D90
.text$x:00003D90
.text$x:00003D90 __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3 proc near
.text$x:00003D90                                         ; DATA XREF: .xdata$x:0000FAB4o
.text$x:00003D90                 mov     ecx, [ebp-20h]
.text$x:00003D93                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003D93 __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3 endp
.text$x:00003D93
.text$x:00003D98
.text$x:00003D98 ; =============== S U B R O U T I N E =======================================
.text$x:00003D98
.text$x:00003D98
.text$x:00003D98 __ehhandler$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$x:00003D98                                         ; DATA XREF: FunctionUnitParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00003D98
.text$x:00003D98 arg_4           = dword ptr  8
.text$x:00003D98
.text$x:00003D98                 mov     edx, [esp+arg_4]
.text$x:00003D9C                 lea     eax, [edx+0Ch]
.text$x:00003D9F                 mov     ecx, [edx-3Ch]
.text$x:00003DA2                 xor     ecx, eax
.text$x:00003DA4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003DA9                 mov     eax, offset __ehfuncinfo$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$x:00003DAE                 jmp     ___CxxFrameHandler3
.text$x:00003DAE __ehhandler$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$x:00003DAE
.text$x:00003DB3
.text$x:00003DB3 ; =============== S U B R O U T I N E =======================================
.text$x:00003DB3
.text$x:00003DB3
.text$x:00003DB3 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 proc near
.text$x:00003DB3                                         ; DATA XREF: .xdata$x:0000FD54o
.text$x:00003DB3                 lea     ecx, [ebp+18h]
.text$x:00003DB6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003DB6 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0 endp
.text$x:00003DB6
.text$x:00003DBB
.text$x:00003DBB ; =============== S U B R O U T I N E =======================================
.text$x:00003DBB
.text$x:00003DBB
.text$x:00003DBB __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1 proc near
.text$x:00003DBB                                         ; DATA XREF: .xdata$x:0000FD5Co
.text$x:00003DBB                 lea     ecx, [ebp-5Ch]
.text$x:00003DBE                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003DBE __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1 endp
.text$x:00003DBE
.text$x:00003DC3
.text$x:00003DC3 ; =============== S U B R O U T I N E =======================================
.text$x:00003DC3
.text$x:00003DC3
.text$x:00003DC3 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2 proc near
.text$x:00003DC3                                         ; DATA XREF: .xdata$x:0000FD64o
.text$x:00003DC3                 lea     ecx, [ebp-3Ch]
.text$x:00003DC6                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003DC6 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2 endp
.text$x:00003DC6
.text$x:00003DCB
.text$x:00003DCB ; =============== S U B R O U T I N E =======================================
.text$x:00003DCB
.text$x:00003DCB
.text$x:00003DCB __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3 proc near
.text$x:00003DCB                                         ; DATA XREF: .xdata$x:0000FD6Co
.text$x:00003DCB                 lea     ecx, [ebp-94h]
.text$x:00003DD1                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003DD1 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3 endp
.text$x:00003DD1
.text$x:00003DD6
.text$x:00003DD6 ; =============== S U B R O U T I N E =======================================
.text$x:00003DD6
.text$x:00003DD6
.text$x:00003DD6 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$4 proc near
.text$x:00003DD6                                         ; DATA XREF: .xdata$x:0000FD74o
.text$x:00003DD6                 lea     ecx, [ebp-4Ch]
.text$x:00003DD9                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003DD9 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$4 endp
.text$x:00003DD9
.text$x:00003DDE
.text$x:00003DDE ; =============== S U B R O U T I N E =======================================
.text$x:00003DDE
.text$x:00003DDE
.text$x:00003DDE __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$5 proc near
.text$x:00003DDE                                         ; DATA XREF: .xdata$x:0000FD7Co
.text$x:00003DDE                 mov     ecx, [ebp-70h]
.text$x:00003DE1                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003DE1 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$5 endp
.text$x:00003DE1
.text$x:00003DE6
.text$x:00003DE6 ; =============== S U B R O U T I N E =======================================
.text$x:00003DE6
.text$x:00003DE6
.text$x:00003DE6 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$6 proc near
.text$x:00003DE6                                         ; DATA XREF: .xdata$x:0000FD84o
.text$x:00003DE6                 lea     ecx, [ebp-84h]
.text$x:00003DEC                 jmp     ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)
.text$x:00003DEC __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$6 endp
.text$x:00003DEC
.text$x:00003DF1
.text$x:00003DF1 ; =============== S U B R O U T I N E =======================================
.text$x:00003DF1
.text$x:00003DF1
.text$x:00003DF1 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$7 proc near
.text$x:00003DF1                                         ; DATA XREF: .xdata$x:0000FD8Co
.text$x:00003DF1                 mov     ecx, [ebp-64h]
.text$x:00003DF4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003DF4 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$7 endp
.text$x:00003DF4
.text$x:00003DF9
.text$x:00003DF9 ; =============== S U B R O U T I N E =======================================
.text$x:00003DF9
.text$x:00003DF9
.text$x:00003DF9 __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$8 proc near
.text$x:00003DF9                                         ; DATA XREF: .xdata$x:0000FD94o
.text$x:00003DF9                 mov     ecx, [ebp-68h]
.text$x:00003DFC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003DFC __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$8 endp
.text$x:00003DFC
.text$x:00003E01
.text$x:00003E01 ; =============== S U B R O U T I N E =======================================
.text$x:00003E01
.text$x:00003E01
.text$x:00003E01 __ehhandler$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z proc near
.text$x:00003E01                                         ; DATA XREF: FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00003E01
.text$x:00003E01 arg_4           = dword ptr  8
.text$x:00003E01
.text$x:00003E01                 mov     edx, [esp+arg_4]
.text$x:00003E05                 lea     eax, [edx+0Ch]
.text$x:00003E08                 mov     ecx, [edx-8Ch]
.text$x:00003E0E                 xor     ecx, eax
.text$x:00003E10                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E15                 mov     eax, offset __ehfuncinfo$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.text$x:00003E1A                 jmp     ___CxxFrameHandler3
.text$x:00003E1A __ehhandler$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z endp
.text$x:00003E1A
.text$x:00003E1F
.text$x:00003E1F ; =============== S U B R O U T I N E =======================================
.text$x:00003E1F
.text$x:00003E1F
.text$x:00003E1F __unwindfunclet$??1FunctionParsersManager@@QAE@XZ$0 proc near
.text$x:00003E1F                                         ; DATA XREF: .xdata$x:0000FA8Co
.text$x:00003E1F                 mov     ecx, [ebp-10h]
.text$x:00003E22                 add     ecx, 4
.text$x:00003E25                 jmp     ??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::~vector<FunctionParser *,std::allocator<FunctionParser *>>(void)
.text$x:00003E25 __unwindfunclet$??1FunctionParsersManager@@QAE@XZ$0 endp
.text$x:00003E25
.text$x:00003E2A
.text$x:00003E2A ; =============== S U B R O U T I N E =======================================
.text$x:00003E2A
.text$x:00003E2A
.text$x:00003E2A __unwindfunclet$??1FunctionParsersManager@@QAE@XZ$1 proc near
.text$x:00003E2A                                         ; DATA XREF: .xdata$x:0000FA94o
.text$x:00003E2A                 mov     ecx, [ebp-10h]
.text$x:00003E2D                 add     ecx, 14h
.text$x:00003E30                 jmp     ??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::~vector<AssociationInfo,std::allocator<AssociationInfo>>(void)
.text$x:00003E30 __unwindfunclet$??1FunctionParsersManager@@QAE@XZ$1 endp
.text$x:00003E30
.text$x:00003E35
.text$x:00003E35 ; =============== S U B R O U T I N E =======================================
.text$x:00003E35
.text$x:00003E35
.text$x:00003E35 __ehhandler$??1FunctionParsersManager@@QAE@XZ proc near
.text$x:00003E35                                         ; DATA XREF: FunctionParsersManager::~FunctionParsersManager(void)+5o
.text$x:00003E35
.text$x:00003E35 arg_4           = dword ptr  8
.text$x:00003E35
.text$x:00003E35                 mov     edx, [esp+arg_4]
.text$x:00003E39                 lea     eax, [edx+0Ch]
.text$x:00003E3C                 mov     ecx, [edx-28h]
.text$x:00003E3F                 xor     ecx, eax
.text$x:00003E41                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E46                 mov     eax, offset __ehfuncinfo$??1FunctionParsersManager@@QAE@XZ
.text$x:00003E4B                 jmp     ___CxxFrameHandler3
.text$x:00003E4B __ehhandler$??1FunctionParsersManager@@QAE@XZ endp
.text$x:00003E4B
.text$x:00003E50
.text$x:00003E50 ; =============== S U B R O U T I N E =======================================
.text$x:00003E50
.text$x:00003E50
.text$x:00003E50 __unwindfunclet$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z$0 proc near
.text$x:00003E50                                         ; DATA XREF: .xdata$x:0000FA7Co
.text$x:00003E50                 lea     ecx, [ebp+8]
.text$x:00003E53                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003E53 __unwindfunclet$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z$0 endp
.text$x:00003E53
.text$x:00003E58
.text$x:00003E58 ; =============== S U B R O U T I N E =======================================
.text$x:00003E58
.text$x:00003E58
.text$x:00003E58 __unwindfunclet$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z$1 proc near
.text$x:00003E58                                         ; DATA XREF: .xdata$x:0000FA84o
.text$x:00003E58                 mov     eax, [ebp-18h]
.text$x:00003E5B                 push    eax             ; void *
.text$x:00003E5C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003E61                 pop     ecx
.text$x:00003E62                 retn
.text$x:00003E62 __unwindfunclet$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z$1 endp
.text$x:00003E62
.text$x:00003E63
.text$x:00003E63 ; =============== S U B R O U T I N E =======================================
.text$x:00003E63
.text$x:00003E63
.text$x:00003E63 __ehhandler$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z proc near
.text$x:00003E63                                         ; DATA XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+5o
.text$x:00003E63
.text$x:00003E63 arg_4           = dword ptr  8
.text$x:00003E63
.text$x:00003E63                 mov     edx, [esp+arg_4]
.text$x:00003E67                 lea     eax, [edx+0Ch]
.text$x:00003E6A                 mov     ecx, [edx-18h]
.text$x:00003E6D                 xor     ecx, eax
.text$x:00003E6F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E74                 mov     eax, offset __ehfuncinfo$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z
.text$x:00003E79                 jmp     ___CxxFrameHandler3
.text$x:00003E79 __ehhandler$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z endp
.text$x:00003E79
.text$x:00003E7E
.text$x:00003E7E ; =============== S U B R O U T I N E =======================================
.text$x:00003E7E
.text$x:00003E7E
.text$x:00003E7E __unwindfunclet$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z$0 proc near
.text$x:00003E7E                                         ; DATA XREF: .xdata$x:0000FA3Co
.text$x:00003E7E                 mov     ecx, [ebp-20h]
.text$x:00003E81                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003E81 __unwindfunclet$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z$0 endp
.text$x:00003E81
.text$x:00003E86
.text$x:00003E86 ; =============== S U B R O U T I N E =======================================
.text$x:00003E86
.text$x:00003E86
.text$x:00003E86 __ehhandler$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z proc near
.text$x:00003E86                                         ; DATA XREF: FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)+5o
.text$x:00003E86
.text$x:00003E86 arg_4           = dword ptr  8
.text$x:00003E86
.text$x:00003E86                 mov     edx, [esp+arg_4]
.text$x:00003E8A                 lea     eax, [edx+0Ch]
.text$x:00003E8D                 mov     ecx, [edx-1Ch]
.text$x:00003E90                 xor     ecx, eax
.text$x:00003E92                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E97                 mov     eax, offset __ehfuncinfo$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z
.text$x:00003E9C                 jmp     ___CxxFrameHandler3
.text$x:00003E9C __ehhandler$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z endp
.text$x:00003E9C
.text$x:00003EA1
.text$x:00003EA1 ; =============== S U B R O U T I N E =======================================
.text$x:00003EA1
.text$x:00003EA1
.text$x:00003EA1 __unwindfunclet$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z$0 proc near
.text$x:00003EA1                                         ; DATA XREF: .xdata$x:0000FA6Co
.text$x:00003EA1                 lea     ecx, [ebp-2Ch]
.text$x:00003EA4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003EA4 __unwindfunclet$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z$0 endp
.text$x:00003EA4
.text$x:00003EA9
.text$x:00003EA9 ; =============== S U B R O U T I N E =======================================
.text$x:00003EA9
.text$x:00003EA9
.text$x:00003EA9 __unwindfunclet$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z$1 proc near
.text$x:00003EA9                                         ; DATA XREF: .xdata$x:0000FA74o
.text$x:00003EA9                 lea     ecx, [ebp-48h]
.text$x:00003EAC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003EAC __unwindfunclet$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z$1 endp
.text$x:00003EAC
.text$x:00003EB1
.text$x:00003EB1 ; =============== S U B R O U T I N E =======================================
.text$x:00003EB1
.text$x:00003EB1
.text$x:00003EB1 __ehhandler$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z proc near
.text$x:00003EB1                                         ; DATA XREF: FunctionParsersManager::writeFunctionListXml(wchar_t const *)+5o
.text$x:00003EB1
.text$x:00003EB1 arg_4           = dword ptr  8
.text$x:00003EB1
.text$x:00003EB1                 mov     edx, [esp+arg_4]
.text$x:00003EB5                 lea     eax, [edx+0Ch]
.text$x:00003EB8                 mov     ecx, [edx-60h]
.text$x:00003EBB                 xor     ecx, eax
.text$x:00003EBD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003EC2                 mov     ecx, [edx-4]
.text$x:00003EC5                 xor     ecx, eax
.text$x:00003EC7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003ECC                 mov     eax, offset __ehfuncinfo$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z
.text$x:00003ED1                 jmp     ___CxxFrameHandler3
.text$x:00003ED1 __ehhandler$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z endp
.text$x:00003ED1
.text$x:00003ED6
.text$x:00003ED6 ; =============== S U B R O U T I N E =======================================
.text$x:00003ED6
.text$x:00003ED6
.text$x:00003ED6 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$0 proc near
.text$x:00003ED6                                         ; DATA XREF: .xdata$x:0000FD9Co
.text$x:00003ED6                 lea     ecx, [ebp-2Ch]
.text$x:00003ED9                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003ED9 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$0 endp
.text$x:00003ED9
.text$x:00003EDE
.text$x:00003EDE ; =============== S U B R O U T I N E =======================================
.text$x:00003EDE
.text$x:00003EDE
.text$x:00003EDE __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$1 proc near
.text$x:00003EDE                                         ; DATA XREF: .xdata$x:0000FDA4o
.text$x:00003EDE                 lea     ecx, [ebp-244h]
.text$x:00003EE4                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003EE4 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$1 endp
.text$x:00003EE4
.text$x:00003EE9
.text$x:00003EE9 ; =============== S U B R O U T I N E =======================================
.text$x:00003EE9
.text$x:00003EE9
.text$x:00003EE9 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$2 proc near
.text$x:00003EE9                                         ; DATA XREF: .xdata$x:0000FDACo
.text$x:00003EE9                 lea     ecx, [ebp-230h]
.text$x:00003EEF                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003EEF __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$2 endp
.text$x:00003EEF
.text$x:00003EF4
.text$x:00003EF4 ; =============== S U B R O U T I N E =======================================
.text$x:00003EF4
.text$x:00003EF4
.text$x:00003EF4 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$3 proc near
.text$x:00003EF4                                         ; DATA XREF: .xdata$x:0000FDB4o
.text$x:00003EF4                 lea     ecx, [ebp-0D4h]
.text$x:00003EFA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003EFA __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$3 endp
.text$x:00003EFA
.text$x:00003EFF
.text$x:00003EFF ; =============== S U B R O U T I N E =======================================
.text$x:00003EFF
.text$x:00003EFF
.text$x:00003EFF __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$4 proc near
.text$x:00003EFF                                         ; DATA XREF: .xdata$x:0000FDBCo
.text$x:00003EFF                 lea     ecx, [ebp-9Ch]
.text$x:00003F05                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003F05 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$4 endp
.text$x:00003F05
.text$x:00003F0A
.text$x:00003F0A ; =============== S U B R O U T I N E =======================================
.text$x:00003F0A
.text$x:00003F0A
.text$x:00003F0A __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$5 proc near
.text$x:00003F0A                                         ; DATA XREF: .xdata$x:0000FDC4o
.text$x:00003F0A                 lea     ecx, [ebp-64h]
.text$x:00003F0D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003F0D __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$5 endp
.text$x:00003F0D
.text$x:00003F12
.text$x:00003F12 ; =============== S U B R O U T I N E =======================================
.text$x:00003F12
.text$x:00003F12
.text$x:00003F12 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$6 proc near
.text$x:00003F12                                         ; DATA XREF: .xdata$x:0000FDCCo
.text$x:00003F12                 lea     ecx, [ebp-128h]
.text$x:00003F18                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003F18 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$6 endp
.text$x:00003F18
.text$x:00003F1D
.text$x:00003F1D ; =============== S U B R O U T I N E =======================================
.text$x:00003F1D
.text$x:00003F1D
.text$x:00003F1D __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$7 proc near
.text$x:00003F1D                                         ; DATA XREF: .xdata$x:0000FDD4o
.text$x:00003F1D                 lea     ecx, [ebp-0B8h]
.text$x:00003F23                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003F23 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$7 endp
.text$x:00003F23
.text$x:00003F28
.text$x:00003F28 ; =============== S U B R O U T I N E =======================================
.text$x:00003F28
.text$x:00003F28
.text$x:00003F28 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$8 proc near
.text$x:00003F28                                         ; DATA XREF: .xdata$x:0000FDDCo
.text$x:00003F28                 lea     ecx, [ebp-2ECh]
.text$x:00003F2E                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003F2E __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$8 endp
.text$x:00003F2E
.text$x:00003F33
.text$x:00003F33 ; =============== S U B R O U T I N E =======================================
.text$x:00003F33
.text$x:00003F33
.text$x:00003F33 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$9 proc near
.text$x:00003F33                                         ; DATA XREF: .xdata$x:0000FDE4o
.text$x:00003F33                 lea     ecx, [ebp-2D8h]
.text$x:00003F39                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003F39 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$9 endp
.text$x:00003F39
.text$x:00003F3E
.text$x:00003F3E ; =============== S U B R O U T I N E =======================================
.text$x:00003F3E
.text$x:00003F3E
.text$x:00003F3E __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$10 proc near
.text$x:00003F3E                                         ; DATA XREF: .xdata$x:0000FDECo
.text$x:00003F3E                 mov     eax, [ebp-1E0h]
.text$x:00003F44                 push    eax             ; void *
.text$x:00003F45                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003F4A                 pop     ecx
.text$x:00003F4B                 retn
.text$x:00003F4B __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$10 endp
.text$x:00003F4B
.text$x:00003F4C
.text$x:00003F4C ; =============== S U B R O U T I N E =======================================
.text$x:00003F4C
.text$x:00003F4C
.text$x:00003F4C __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$11 proc near
.text$x:00003F4C                                         ; DATA XREF: .xdata$x:0000FDF4o
.text$x:00003F4C                 mov     ecx, [ebp-2A8h]
.text$x:00003F52                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003F52 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$11 endp
.text$x:00003F52
.text$x:00003F57
.text$x:00003F57 ; =============== S U B R O U T I N E =======================================
.text$x:00003F57
.text$x:00003F57
.text$x:00003F57 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$12 proc near
.text$x:00003F57                                         ; DATA XREF: .xdata$x:0000FDFCo
.text$x:00003F57                 mov     ecx, [ebp-2C4h]
.text$x:00003F5D                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003F5D __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$12 endp
.text$x:00003F5D
.text$x:00003F62
.text$x:00003F62 ; =============== S U B R O U T I N E =======================================
.text$x:00003F62
.text$x:00003F62
.text$x:00003F62 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$13 proc near
.text$x:00003F62                                         ; DATA XREF: .xdata$x:0000FE04o
.text$x:00003F62                 mov     ecx, [ebp-2FCh]
.text$x:00003F68                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003F68 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$13 endp
.text$x:00003F68
.text$x:00003F6D
.text$x:00003F6D ; =============== S U B R O U T I N E =======================================
.text$x:00003F6D
.text$x:00003F6D
.text$x:00003F6D __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$14 proc near
.text$x:00003F6D                                         ; DATA XREF: .xdata$x:0000FE0Co
.text$x:00003F6D                 mov     eax, [ebp-1F0h]
.text$x:00003F73                 push    eax             ; void *
.text$x:00003F74                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003F79                 pop     ecx
.text$x:00003F7A                 retn
.text$x:00003F7A __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$14 endp
.text$x:00003F7A
.text$x:00003F7B
.text$x:00003F7B ; =============== S U B R O U T I N E =======================================
.text$x:00003F7B
.text$x:00003F7B
.text$x:00003F7B __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$15 proc near
.text$x:00003F7B                                         ; DATA XREF: .xdata$x:0000FE14o
.text$x:00003F7B                 mov     ecx, [ebp-30Ch]
.text$x:00003F81                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003F81 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$15 endp
.text$x:00003F81
.text$x:00003F86
.text$x:00003F86 ; =============== S U B R O U T I N E =======================================
.text$x:00003F86
.text$x:00003F86
.text$x:00003F86 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$16 proc near
.text$x:00003F86                                         ; DATA XREF: .xdata$x:0000FE1Co
.text$x:00003F86                 mov     ecx, [ebp-31Ch]
.text$x:00003F8C                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003F8C __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$16 endp
.text$x:00003F8C
.text$x:00003F91
.text$x:00003F91 ; =============== S U B R O U T I N E =======================================
.text$x:00003F91
.text$x:00003F91
.text$x:00003F91 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$17 proc near
.text$x:00003F91                                         ; DATA XREF: .xdata$x:0000FE24o
.text$x:00003F91                 mov     ecx, [ebp-32Ch]
.text$x:00003F97                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003F97 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$17 endp
.text$x:00003F97
.text$x:00003F9C
.text$x:00003F9C ; =============== S U B R O U T I N E =======================================
.text$x:00003F9C
.text$x:00003F9C
.text$x:00003F9C __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$18 proc near
.text$x:00003F9C                                         ; DATA XREF: .xdata$x:0000FE2Co
.text$x:00003F9C                 mov     ecx, [ebp-33Ch]
.text$x:00003FA2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003FA2 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$18 endp
.text$x:00003FA2
.text$x:00003FA7
.text$x:00003FA7 ; =============== S U B R O U T I N E =======================================
.text$x:00003FA7
.text$x:00003FA7
.text$x:00003FA7 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$19 proc near
.text$x:00003FA7                                         ; DATA XREF: .xdata$x:0000FE34o
.text$x:00003FA7                 mov     ecx, [ebp-34Ch]
.text$x:00003FAD                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003FAD __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$19 endp
.text$x:00003FAD
.text$x:00003FB2
.text$x:00003FB2 ; =============== S U B R O U T I N E =======================================
.text$x:00003FB2
.text$x:00003FB2
.text$x:00003FB2 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$20 proc near
.text$x:00003FB2                                         ; DATA XREF: .xdata$x:0000FE3Co
.text$x:00003FB2                 mov     ecx, [ebp-308h]
.text$x:00003FB8                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003FB8 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$20 endp
.text$x:00003FB8
.text$x:00003FBD
.text$x:00003FBD ; =============== S U B R O U T I N E =======================================
.text$x:00003FBD
.text$x:00003FBD
.text$x:00003FBD __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$21 proc near
.text$x:00003FBD                                         ; DATA XREF: .xdata$x:0000FE44o
.text$x:00003FBD                 lea     ecx, [ebp-0F0h]
.text$x:00003FC3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003FC3 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$21 endp
.text$x:00003FC3
.text$x:00003FC8
.text$x:00003FC8 ; =============== S U B R O U T I N E =======================================
.text$x:00003FC8
.text$x:00003FC8
.text$x:00003FC8 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$22 proc near
.text$x:00003FC8                                         ; DATA XREF: .xdata$x:0000FE4Co
.text$x:00003FC8                 lea     ecx, [ebp-80h]
.text$x:00003FCB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003FCB __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$22 endp
.text$x:00003FCB
.text$x:00003FD0
.text$x:00003FD0 ; =============== S U B R O U T I N E =======================================
.text$x:00003FD0
.text$x:00003FD0
.text$x:00003FD0 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$23 proc near
.text$x:00003FD0                                         ; DATA XREF: .xdata$x:0000FE54o
.text$x:00003FD0                 lea     ecx, [ebp-144h]
.text$x:00003FD6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003FD6 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$23 endp
.text$x:00003FD6
.text$x:00003FDB
.text$x:00003FDB ; =============== S U B R O U T I N E =======================================
.text$x:00003FDB
.text$x:00003FDB
.text$x:00003FDB __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$24 proc near
.text$x:00003FDB                                         ; DATA XREF: .xdata$x:0000FE5Co
.text$x:00003FDB                 lea     ecx, [ebp-10Ch]
.text$x:00003FE1                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00003FE1 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$24 endp
.text$x:00003FE1
.text$x:00003FE6
.text$x:00003FE6 ; =============== S U B R O U T I N E =======================================
.text$x:00003FE6
.text$x:00003FE6
.text$x:00003FE6 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$25 proc near
.text$x:00003FE6                                         ; DATA XREF: .xdata$x:0000FE64o
.text$x:00003FE6                 mov     eax, [ebp-1C0h]
.text$x:00003FEC                 push    eax             ; void *
.text$x:00003FED                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00003FF2                 pop     ecx
.text$x:00003FF3                 retn
.text$x:00003FF3 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$25 endp
.text$x:00003FF3
.text$x:00003FF4
.text$x:00003FF4 ; =============== S U B R O U T I N E =======================================
.text$x:00003FF4
.text$x:00003FF4
.text$x:00003FF4 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$26 proc near
.text$x:00003FF4                                         ; DATA XREF: .xdata$x:0000FE6Co
.text$x:00003FF4                 mov     ecx, [ebp-348h]
.text$x:00003FFA                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003FFA __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$26 endp
.text$x:00003FFA
.text$x:00003FFF
.text$x:00003FFF ; =============== S U B R O U T I N E =======================================
.text$x:00003FFF
.text$x:00003FFF
.text$x:00003FFF __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$27 proc near
.text$x:00003FFF                                         ; DATA XREF: .xdata$x:0000FE74o
.text$x:00003FFF                 mov     ecx, [ebp-310h]
.text$x:00004005                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004005 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$27 endp
.text$x:00004005
.text$x:0000400A
.text$x:0000400A ; =============== S U B R O U T I N E =======================================
.text$x:0000400A
.text$x:0000400A
.text$x:0000400A __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$28 proc near
.text$x:0000400A                                         ; DATA XREF: .xdata$x:0000FE7Co
.text$x:0000400A                 mov     ecx, [ebp-330h]
.text$x:00004010                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00004010 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$28 endp
.text$x:00004010
.text$x:00004015
.text$x:00004015 ; =============== S U B R O U T I N E =======================================
.text$x:00004015
.text$x:00004015
.text$x:00004015 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$29 proc near
.text$x:00004015                                         ; DATA XREF: .xdata$x:0000FE84o
.text$x:00004015                 mov     ecx, [ebp-318h]
.text$x:0000401B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000401B __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$29 endp
.text$x:0000401B
.text$x:00004020
.text$x:00004020 ; =============== S U B R O U T I N E =======================================
.text$x:00004020
.text$x:00004020
.text$x:00004020 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$30 proc near
.text$x:00004020                                         ; DATA XREF: .xdata$x:0000FE8Co
.text$x:00004020                 mov     ecx, [ebp-340h]
.text$x:00004026                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004026 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$30 endp
.text$x:00004026
.text$x:0000402B
.text$x:0000402B ; =============== S U B R O U T I N E =======================================
.text$x:0000402B
.text$x:0000402B
.text$x:0000402B __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$31 proc near
.text$x:0000402B                                         ; DATA XREF: .xdata$x:0000FE94o
.text$x:0000402B                 mov     ecx, [ebp-320h]
.text$x:00004031                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004031 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$31 endp
.text$x:00004031
.text$x:00004036
.text$x:00004036 ; =============== S U B R O U T I N E =======================================
.text$x:00004036
.text$x:00004036
.text$x:00004036 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$32 proc near
.text$x:00004036                                         ; DATA XREF: .xdata$x:0000FE9Co
.text$x:00004036                 lea     ecx, [ebp-48h]
.text$x:00004039                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004039 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$32 endp
.text$x:00004039
.text$x:0000403E
.text$x:0000403E ; =============== S U B R O U T I N E =======================================
.text$x:0000403E
.text$x:0000403E
.text$x:0000403E __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$33 proc near
.text$x:0000403E                                         ; DATA XREF: .xdata$x:0000FEA4o
.text$x:0000403E                 mov     eax, [ebp-1CCh]
.text$x:00004044                 push    eax             ; void *
.text$x:00004045                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:0000404A                 pop     ecx
.text$x:0000404B                 retn
.text$x:0000404B __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$33 endp
.text$x:0000404B
.text$x:0000404C
.text$x:0000404C ; =============== S U B R O U T I N E =======================================
.text$x:0000404C
.text$x:0000404C
.text$x:0000404C __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$34 proc near
.text$x:0000404C                                         ; DATA XREF: .xdata$x:0000FEACo
.text$x:0000404C                 mov     ecx, [ebp-338h]
.text$x:00004052                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00004052 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$34 endp
.text$x:00004052
.text$x:00004057
.text$x:00004057 ; =============== S U B R O U T I N E =======================================
.text$x:00004057
.text$x:00004057
.text$x:00004057 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$35 proc near
.text$x:00004057                                         ; DATA XREF: .xdata$x:0000FEB4o
.text$x:00004057                 mov     ecx, [ebp-328h]
.text$x:0000405D                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:0000405D __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$35 endp
.text$x:0000405D
.text$x:00004062
.text$x:00004062 ; =============== S U B R O U T I N E =======================================
.text$x:00004062
.text$x:00004062
.text$x:00004062 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$36 proc near
.text$x:00004062                                         ; DATA XREF: .xdata$x:0000FEBCo
.text$x:00004062                 mov     ecx, [ebp-2ACh]
.text$x:00004068                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004068 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$36 endp
.text$x:00004068
.text$x:0000406D
.text$x:0000406D ; =============== S U B R O U T I N E =======================================
.text$x:0000406D
.text$x:0000406D
.text$x:0000406D __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$37 proc near
.text$x:0000406D                                         ; DATA XREF: .xdata$x:0000FEC4o
.text$x:0000406D                 lea     ecx, [ebp-184h] ; this
.text$x:00004073                 jmp     ??1AssociationInfo@@QAE@XZ ; AssociationInfo::~AssociationInfo(void)
.text$x:00004073 __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$37 endp
.text$x:00004073
.text$x:00004078
.text$x:00004078 ; =============== S U B R O U T I N E =======================================
.text$x:00004078
.text$x:00004078
.text$x:00004078 __ehhandler$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ proc near
.text$x:00004078                                         ; DATA XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+5o
.text$x:00004078
.text$x:00004078 arg_4           = dword ptr  8
.text$x:00004078
.text$x:00004078                 mov     edx, [esp+arg_4]
.text$x:0000407C                 lea     eax, [edx+0Ch]
.text$x:0000407F                 mov     ecx, [edx-344h]
.text$x:00004085                 xor     ecx, eax
.text$x:00004087                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000408C                 mov     ecx, [edx-4]
.text$x:0000408F                 xor     ecx, eax
.text$x:00004091                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004096                 mov     eax, offset __ehfuncinfo$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ
.text$x:0000409B                 jmp     ___CxxFrameHandler3
.text$x:0000409B __ehhandler$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ endp
.text$x:0000409B
.text$x:000040A0
.text$x:000040A0 ; =============== S U B R O U T I N E =======================================
.text$x:000040A0
.text$x:000040A0
.text$x:000040A0 __unwindfunclet$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z$0 proc near
.text$x:000040A0                                         ; DATA XREF: .xdata$x:0000FA5Co
.text$x:000040A0                 lea     ecx, [ebp-2Ch]
.text$x:000040A3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000040A3 __unwindfunclet$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z$0 endp
.text$x:000040A3
.text$x:000040A8
.text$x:000040A8 ; =============== S U B R O U T I N E =======================================
.text$x:000040A8
.text$x:000040A8
.text$x:000040A8 __unwindfunclet$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z$1 proc near
.text$x:000040A8                                         ; DATA XREF: .xdata$x:0000FA64o
.text$x:000040A8                 lea     ecx, [ebp-48h]
.text$x:000040AB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000040AB __unwindfunclet$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z$1 endp
.text$x:000040AB
.text$x:000040B0
.text$x:000040B0 ; =============== S U B R O U T I N E =======================================
.text$x:000040B0
.text$x:000040B0
.text$x:000040B0 __ehhandler$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z proc near
.text$x:000040B0                                         ; DATA XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+5o
.text$x:000040B0
.text$x:000040B0 arg_4           = dword ptr  8
.text$x:000040B0
.text$x:000040B0                 mov     edx, [esp+arg_4]
.text$x:000040B4                 lea     eax, [edx+0Ch]
.text$x:000040B7                 mov     ecx, [edx-70h]
.text$x:000040BA                 xor     ecx, eax
.text$x:000040BC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040C1                 mov     ecx, [edx-4]
.text$x:000040C4                 xor     ecx, eax
.text$x:000040C6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040CB                 mov     eax, offset __ehfuncinfo$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z
.text$x:000040D0                 jmp     ___CxxFrameHandler3
.text$x:000040D0 __ehhandler$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z endp
.text$x:000040D0
.text$x:000040D5
.text$x:000040D5 ; =============== S U B R O U T I N E =======================================
.text$x:000040D5
.text$x:000040D5
.text$x:000040D5 __unwindfunclet$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z$0 proc near
.text$x:000040D5                                         ; DATA XREF: .xdata$x:0000FA4Co
.text$x:000040D5                 lea     ecx, [ebp-2Ch]
.text$x:000040D8                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000040D8 __unwindfunclet$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z$0 endp
.text$x:000040D8
.text$x:000040DD
.text$x:000040DD ; =============== S U B R O U T I N E =======================================
.text$x:000040DD
.text$x:000040DD
.text$x:000040DD __unwindfunclet$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z$1 proc near
.text$x:000040DD                                         ; DATA XREF: .xdata$x:0000FA54o
.text$x:000040DD                 lea     ecx, [ebp-48h]
.text$x:000040E0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000040E0 __unwindfunclet$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z$1 endp
.text$x:000040E0
.text$x:000040E5
.text$x:000040E5 ; =============== S U B R O U T I N E =======================================
.text$x:000040E5
.text$x:000040E5
.text$x:000040E5 __ehhandler$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z proc near
.text$x:000040E5                                         ; DATA XREF: FunctionParsersManager::getUnitPaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+5o
.text$x:000040E5
.text$x:000040E5 arg_4           = dword ptr  8
.text$x:000040E5
.text$x:000040E5                 mov     edx, [esp+arg_4]
.text$x:000040E9                 lea     eax, [edx+0Ch]
.text$x:000040EC                 mov     ecx, [edx-60h]
.text$x:000040EF                 xor     ecx, eax
.text$x:000040F1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000040F6                 mov     ecx, [edx-4]
.text$x:000040F9                 xor     ecx, eax
.text$x:000040FB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004100                 mov     eax, offset __ehfuncinfo$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z
.text$x:00004105                 jmp     ___CxxFrameHandler3
.text$x:00004105 __ehhandler$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z endp
.text$x:00004105
.text$x:00004105 ; ---------------------------------------------------------------------------
.text$x:0000410A                 align 4
.text$x:0000410A _text$x         ends
.text$x:0000410A
.text$mn:0000410C ; ===========================================================================
.text$mn:0000410C
.text$mn:0000410C ; Segment type: Pure code
.text$mn:0000410C ; Segment permissions: Read/Execute
.text$mn:0000410C _text$mn        segment para public 'CODE' use32
.text$mn:0000410C                 assume cs:_text$mn
.text$mn:0000410C                 ;org 410Ch
.text$mn:0000410C ; COMDAT (pick any)
.text$mn:0000410C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000410C
.text$mn:0000410C ; =============== S U B R O U T I N E =======================================
.text$mn:0000410C
.text$mn:0000410C ; Attributes: bp-based frame
.text$mn:0000410C
.text$mn:0000410C ; public: __thiscall std::pair<int, int>::pair<int, int>(int &, int &)
.text$mn:0000410C                 public ??$?0AAHAAHX@?$pair@HH@std@@QAE@AAH0@Z
.text$mn:0000410C ??$?0AAHAAHX@?$pair@HH@std@@QAE@AAH0@Z proc near
.text$mn:0000410C                                         ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+D6p
.text$mn:0000410C                                         ; FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+D6p ...
.text$mn:0000410C
.text$mn:0000410C var_4           = dword ptr -4
.text$mn:0000410C arg_0           = dword ptr  8
.text$mn:0000410C arg_4           = dword ptr  0Ch
.text$mn:0000410C
.text$mn:0000410C                 push    ebp
.text$mn:0000410D                 mov     ebp, esp
.text$mn:0000410F                 push    ecx
.text$mn:00004110                 mov     [ebp+var_4], ecx
.text$mn:00004113                 mov     eax, [ebp+arg_0]
.text$mn:00004116                 push    eax
.text$mn:00004117                 call    ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>(int &)
.text$mn:0000411C                 add     esp, 4
.text$mn:0000411F                 mov     ecx, [ebp+var_4]
.text$mn:00004122                 mov     edx, [eax]
.text$mn:00004124                 mov     [ecx], edx
.text$mn:00004126                 mov     eax, [ebp+arg_4]
.text$mn:00004129                 push    eax
.text$mn:0000412A                 call    ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>(int &)
.text$mn:0000412F                 add     esp, 4
.text$mn:00004132                 mov     ecx, [ebp+var_4]
.text$mn:00004135                 mov     edx, [eax]
.text$mn:00004137                 mov     [ecx+4], edx
.text$mn:0000413A                 mov     eax, [ebp+var_4]
.text$mn:0000413D                 mov     esp, ebp
.text$mn:0000413F                 pop     ebp
.text$mn:00004140                 retn    8
.text$mn:00004140 ??$?0AAHAAHX@?$pair@HH@std@@QAE@AAH0@Z endp
.text$mn:00004140
.text$mn:00004140 ; ---------------------------------------------------------------------------
.text$mn:00004143                 align 4
.text$mn:00004143 _text$mn        ends
.text$mn:00004143
.text$mn:00004144 ; ===========================================================================
.text$mn:00004144
.text$mn:00004144 ; Segment type: Pure code
.text$mn:00004144 ; Segment permissions: Read/Execute
.text$mn:00004144 _text$mn        segment para public 'CODE' use32
.text$mn:00004144                 assume cs:_text$mn
.text$mn:00004144                 ;org 4144h
.text$mn:00004144 ; COMDAT (pick any)
.text$mn:00004144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004144
.text$mn:00004144 ; =============== S U B R O U T I N E =======================================
.text$mn:00004144
.text$mn:00004144 ; Attributes: bp-based frame
.text$mn:00004144
.text$mn:00004144 ; public: __thiscall std::pair<int, int>::pair<int, int>(int &, unsigned int &)
.text$mn:00004144                 public ??$?0AAHAAIX@?$pair@HH@std@@QAE@AAHAAI@Z
.text$mn:00004144 ??$?0AAHAAIX@?$pair@HH@std@@QAE@AAHAAI@Z proc near
.text$mn:00004144                                         ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+10Ep
.text$mn:00004144
.text$mn:00004144 var_4           = dword ptr -4
.text$mn:00004144 arg_0           = dword ptr  8
.text$mn:00004144 arg_4           = dword ptr  0Ch
.text$mn:00004144
.text$mn:00004144                 push    ebp
.text$mn:00004145                 mov     ebp, esp
.text$mn:00004147                 push    ecx
.text$mn:00004148                 mov     [ebp+var_4], ecx
.text$mn:0000414B                 mov     eax, [ebp+arg_0]
.text$mn:0000414E                 push    eax
.text$mn:0000414F                 call    ??$forward@AAH@std@@YAAAHAAH@Z ; std::forward<int &>(int &)
.text$mn:00004154                 add     esp, 4
.text$mn:00004157                 mov     ecx, [ebp+var_4]
.text$mn:0000415A                 mov     edx, [eax]
.text$mn:0000415C                 mov     [ecx], edx
.text$mn:0000415E                 mov     eax, [ebp+arg_4]
.text$mn:00004161                 push    eax
.text$mn:00004162                 call    ??$forward@AAI@std@@YAAAIAAI@Z ; std::forward<uint &>(uint &)
.text$mn:00004167                 add     esp, 4
.text$mn:0000416A                 mov     ecx, [ebp+var_4]
.text$mn:0000416D                 mov     edx, [eax]
.text$mn:0000416F                 mov     [ecx+4], edx
.text$mn:00004172                 mov     eax, [ebp+var_4]
.text$mn:00004175                 mov     esp, ebp
.text$mn:00004177                 pop     ebp
.text$mn:00004178                 retn    8
.text$mn:00004178 ??$?0AAHAAIX@?$pair@HH@std@@QAE@AAHAAI@Z endp
.text$mn:00004178
.text$mn:00004178 ; ---------------------------------------------------------------------------
.text$mn:0000417B                 align 4
.text$mn:0000417B _text$mn        ends
.text$mn:0000417B
.text$mn:0000417C ; ===========================================================================
.text$mn:0000417C
.text$mn:0000417C ; Segment type: Pure code
.text$mn:0000417C ; Segment permissions: Read/Execute
.text$mn:0000417C _text$mn        segment para public 'CODE' use32
.text$mn:0000417C                 assume cs:_text$mn
.text$mn:0000417C                 ;org 417Ch
.text$mn:0000417C ; COMDAT (pick any)
.text$mn:0000417C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000417C
.text$mn:0000417C ; =============== S U B R O U T I N E =======================================
.text$mn:0000417C
.text$mn:0000417C ; Attributes: bp-based frame
.text$mn:0000417C
.text$mn:0000417C ; public: __thiscall std::pair<int, int>::pair<int, int>(unsigned int &, unsigned int &)
.text$mn:0000417C                 public ??$?0AAIAAIX@?$pair@HH@std@@QAE@AAI0@Z
.text$mn:0000417C ??$?0AAIAAIX@?$pair@HH@std@@QAE@AAI0@Z proc near
.text$mn:0000417C                                         ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+20p
.text$mn:0000417C
.text$mn:0000417C var_4           = dword ptr -4
.text$mn:0000417C arg_0           = dword ptr  8
.text$mn:0000417C arg_4           = dword ptr  0Ch
.text$mn:0000417C
.text$mn:0000417C                 push    ebp
.text$mn:0000417D                 mov     ebp, esp
.text$mn:0000417F                 push    ecx
.text$mn:00004180                 mov     [ebp+var_4], ecx
.text$mn:00004183                 mov     eax, [ebp+arg_0]
.text$mn:00004186                 push    eax
.text$mn:00004187                 call    ??$forward@AAI@std@@YAAAIAAI@Z ; std::forward<uint &>(uint &)
.text$mn:0000418C                 add     esp, 4
.text$mn:0000418F                 mov     ecx, [ebp+var_4]
.text$mn:00004192                 mov     edx, [eax]
.text$mn:00004194                 mov     [ecx], edx
.text$mn:00004196                 mov     eax, [ebp+arg_4]
.text$mn:00004199                 push    eax
.text$mn:0000419A                 call    ??$forward@AAI@std@@YAAAIAAI@Z ; std::forward<uint &>(uint &)
.text$mn:0000419F                 add     esp, 4
.text$mn:000041A2                 mov     ecx, [ebp+var_4]
.text$mn:000041A5                 mov     edx, [eax]
.text$mn:000041A7                 mov     [ecx+4], edx
.text$mn:000041AA                 mov     eax, [ebp+var_4]
.text$mn:000041AD                 mov     esp, ebp
.text$mn:000041AF                 pop     ebp
.text$mn:000041B0                 retn    8
.text$mn:000041B0 ??$?0AAIAAIX@?$pair@HH@std@@QAE@AAI0@Z endp
.text$mn:000041B0
.text$mn:000041B0 ; ---------------------------------------------------------------------------
.text$mn:000041B3                 align 4
.text$mn:000041B3 _text$mn        ends
.text$mn:000041B3
.text$mn:000041B4 ; ===========================================================================
.text$mn:000041B4
.text$mn:000041B4 ; Segment type: Pure code
.text$mn:000041B4 ; Segment permissions: Read/Execute
.text$mn:000041B4 _text$mn        segment para public 'CODE' use32
.text$mn:000041B4                 assume cs:_text$mn
.text$mn:000041B4                 ;org 41B4h
.text$mn:000041B4 ; COMDAT (pick any)
.text$mn:000041B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041B4
.text$mn:000041B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000041B4
.text$mn:000041B4 ; Attributes: bp-based frame
.text$mn:000041B4
.text$mn:000041B4 ; public: __thiscall std::pair<int, int>::pair<int, int>(unsigned int &, int &&)
.text$mn:000041B4                 public ??$?0AAIHX@?$pair@HH@std@@QAE@AAI$$QAH@Z
.text$mn:000041B4 ??$?0AAIHX@?$pair@HH@std@@QAE@AAI$$QAH@Z proc near
.text$mn:000041B4                                         ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+61p
.text$mn:000041B4
.text$mn:000041B4 var_4           = dword ptr -4
.text$mn:000041B4 arg_0           = dword ptr  8
.text$mn:000041B4 arg_4           = dword ptr  0Ch
.text$mn:000041B4
.text$mn:000041B4                 push    ebp
.text$mn:000041B5                 mov     ebp, esp
.text$mn:000041B7                 push    ecx
.text$mn:000041B8                 mov     [ebp+var_4], ecx
.text$mn:000041BB                 mov     eax, [ebp+arg_0]
.text$mn:000041BE                 push    eax
.text$mn:000041BF                 call    ??$forward@AAI@std@@YAAAIAAI@Z ; std::forward<uint &>(uint &)
.text$mn:000041C4                 add     esp, 4
.text$mn:000041C7                 mov     ecx, [ebp+var_4]
.text$mn:000041CA                 mov     edx, [eax]
.text$mn:000041CC                 mov     [ecx], edx
.text$mn:000041CE                 mov     eax, [ebp+arg_4]
.text$mn:000041D1                 push    eax
.text$mn:000041D2                 call    ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>(int &)
.text$mn:000041D7                 add     esp, 4
.text$mn:000041DA                 mov     ecx, [ebp+var_4]
.text$mn:000041DD                 mov     edx, [eax]
.text$mn:000041DF                 mov     [ecx+4], edx
.text$mn:000041E2                 mov     eax, [ebp+var_4]
.text$mn:000041E5                 mov     esp, ebp
.text$mn:000041E7                 pop     ebp
.text$mn:000041E8                 retn    8
.text$mn:000041E8 ??$?0AAIHX@?$pair@HH@std@@QAE@AAI$$QAH@Z endp
.text$mn:000041E8
.text$mn:000041E8 ; ---------------------------------------------------------------------------
.text$mn:000041EB                 align 4
.text$mn:000041EB _text$mn        ends
.text$mn:000041EB
.text$mn:000041EC ; ===========================================================================
.text$mn:000041EC
.text$mn:000041EC ; Segment type: Pure code
.text$mn:000041EC ; Segment permissions: Read/Execute
.text$mn:000041EC _text$mn        segment para public 'CODE' use32
.text$mn:000041EC                 assume cs:_text$mn
.text$mn:000041EC                 ;org 41ECh
.text$mn:000041EC ; COMDAT (pick any)
.text$mn:000041EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041EC
.text$mn:000041EC ; =============== S U B R O U T I N E =======================================
.text$mn:000041EC
.text$mn:000041EC ; Attributes: bp-based frame
.text$mn:000041EC
.text$mn:000041EC ; public: __thiscall std::pair<int, int>::pair<int, int>(struct std::pair<int, int> &&)
.text$mn:000041EC                 public ??$?0HHX@?$pair@HH@std@@QAE@$$QAU01@@Z
.text$mn:000041EC ??$?0HHX@?$pair@HH@std@@QAE@$$QAU01@@Z proc near
.text$mn:000041EC                                         ; CODE XREF: std::allocator<std::pair<int,int>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)+56p
.text$mn:000041EC
.text$mn:000041EC var_4           = dword ptr -4
.text$mn:000041EC arg_0           = dword ptr  8
.text$mn:000041EC
.text$mn:000041EC                 push    ebp
.text$mn:000041ED                 mov     ebp, esp
.text$mn:000041EF                 push    ecx
.text$mn:000041F0                 mov     [ebp+var_4], ecx
.text$mn:000041F3                 mov     eax, [ebp+arg_0]
.text$mn:000041F6                 push    eax
.text$mn:000041F7                 call    ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>(int &)
.text$mn:000041FC                 add     esp, 4
.text$mn:000041FF                 mov     ecx, [ebp+var_4]
.text$mn:00004202                 mov     edx, [eax]
.text$mn:00004204                 mov     [ecx], edx
.text$mn:00004206                 mov     eax, [ebp+arg_0]
.text$mn:00004209                 add     eax, 4
.text$mn:0000420C                 push    eax
.text$mn:0000420D                 call    ??$forward@H@std@@YA$$QAHAAH@Z ; std::forward<int>(int &)
.text$mn:00004212                 add     esp, 4
.text$mn:00004215                 mov     ecx, [ebp+var_4]
.text$mn:00004218                 mov     edx, [eax]
.text$mn:0000421A                 mov     [ecx+4], edx
.text$mn:0000421D                 mov     eax, [ebp+var_4]
.text$mn:00004220                 mov     esp, ebp
.text$mn:00004222                 pop     ebp
.text$mn:00004223                 retn    4
.text$mn:00004223 ??$?0HHX@?$pair@HH@std@@QAE@$$QAU01@@Z endp
.text$mn:00004223
.text$mn:00004223 ; ---------------------------------------------------------------------------
.text$mn:00004226                 align 4
.text$mn:00004226 _text$mn        ends
.text$mn:00004226
.text$mn:00004228 ; ===========================================================================
.text$mn:00004228
.text$mn:00004228 ; Segment type: Pure code
.text$mn:00004228 ; Segment permissions: Read/Execute
.text$mn:00004228 _text$mn        segment para public 'CODE' use32
.text$mn:00004228                 assume cs:_text$mn
.text$mn:00004228                 ;org 4228h
.text$mn:00004228 ; COMDAT (pick any)
.text$mn:00004228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004228
.text$mn:00004228 ; =============== S U B R O U T I N E =======================================
.text$mn:00004228
.text$mn:00004228 ; Attributes: bp-based frame
.text$mn:00004228
.text$mn:00004228 ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00004228                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00004228 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00004228                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:00004228
.text$mn:00004228 var_2           = byte ptr -2
.text$mn:00004228 var_1           = byte ptr -1
.text$mn:00004228 arg_0           = dword ptr  8
.text$mn:00004228 arg_4           = dword ptr  0Ch
.text$mn:00004228
.text$mn:00004228                 push    ebp
.text$mn:00004229                 mov     ebp, esp
.text$mn:0000422B                 push    ecx
.text$mn:0000422C                 mov     eax, [ebp+arg_4]
.text$mn:0000422F                 push    eax
.text$mn:00004230                 lea     ecx, [ebp+var_1]
.text$mn:00004233                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00004238                 push    eax
.text$mn:00004239                 mov     ecx, [ebp+arg_0]
.text$mn:0000423C                 push    ecx
.text$mn:0000423D                 lea     ecx, [ebp+var_2]
.text$mn:00004240                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00004245                 push    eax
.text$mn:00004246                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:0000424B                 add     esp, 8
.text$mn:0000424E                 mov     esp, ebp
.text$mn:00004250                 pop     ebp
.text$mn:00004251                 retn
.text$mn:00004251 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00004251
.text$mn:00004251 ; ---------------------------------------------------------------------------
.text$mn:00004252                 align 4
.text$mn:00004252 _text$mn        ends
.text$mn:00004252
.text$mn:00004254 ; ===========================================================================
.text$mn:00004254
.text$mn:00004254 ; Segment type: Pure code
.text$mn:00004254 ; Segment permissions: Read/Execute
.text$mn:00004254 _text$mn        segment para public 'CODE' use32
.text$mn:00004254                 assume cs:_text$mn
.text$mn:00004254                 ;org 4254h
.text$mn:00004254 ; COMDAT (pick any)
.text$mn:00004254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004254
.text$mn:00004254 ; =============== S U B R O U T I N E =======================================
.text$mn:00004254
.text$mn:00004254 ; Attributes: bp-based frame
.text$mn:00004254
.text$mn:00004254 ; bool __cdecl std::operator==<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00004254                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00004254 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00004254                                         ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+13Ap
.text$mn:00004254                                         ; FunctionParsersManager::getParser(AssociationInfo const &)+186p
.text$mn:00004254
.text$mn:00004254 var_4           = dword ptr -4
.text$mn:00004254 arg_0           = dword ptr  8
.text$mn:00004254 arg_4           = dword ptr  0Ch
.text$mn:00004254
.text$mn:00004254                 push    ebp
.text$mn:00004255                 mov     ebp, esp
.text$mn:00004257                 push    ecx
.text$mn:00004258                 mov     eax, [ebp+arg_4]
.text$mn:0000425B                 push    eax
.text$mn:0000425C                 mov     ecx, [ebp+arg_0]
.text$mn:0000425F                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004264                 test    eax, eax
.text$mn:00004266                 jnz     short loc_4271
.text$mn:00004268                 mov     [ebp+var_4], 1
.text$mn:0000426F                 jmp     short loc_4278
.text$mn:00004271 ; ---------------------------------------------------------------------------
.text$mn:00004271
.text$mn:00004271 loc_4271:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+12j
.text$mn:00004271                 mov     [ebp+var_4], 0
.text$mn:00004278
.text$mn:00004278 loc_4278:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Bj
.text$mn:00004278                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000427B                 mov     esp, ebp
.text$mn:0000427D                 pop     ebp
.text$mn:0000427E                 retn
.text$mn:0000427E ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:0000427E
.text$mn:0000427E ; ---------------------------------------------------------------------------
.text$mn:0000427F                 align 10h
.text$mn:0000427F _text$mn        ends
.text$mn:0000427F
.text$mn:00004280 ; ===========================================================================
.text$mn:00004280
.text$mn:00004280 ; Segment type: Pure code
.text$mn:00004280 ; Segment permissions: Read/Execute
.text$mn:00004280 _text$mn        segment para public 'CODE' use32
.text$mn:00004280                 assume cs:_text$mn
.text$mn:00004280                 ;org 4280h
.text$mn:00004280 ; COMDAT (pick any)
.text$mn:00004280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004280
.text$mn:00004280 ; =============== S U B R O U T I N E =======================================
.text$mn:00004280
.text$mn:00004280 ; Attributes: bp-based frame
.text$mn:00004280
.text$mn:00004280 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00004280                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00004280 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00004280                                         ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+1Dp
.text$mn:00004280                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+C17p ...
.text$mn:00004280
.text$mn:00004280 var_4           = dword ptr -4
.text$mn:00004280 arg_0           = dword ptr  8
.text$mn:00004280 Str             = dword ptr  0Ch
.text$mn:00004280
.text$mn:00004280                 push    ebp
.text$mn:00004281                 mov     ebp, esp
.text$mn:00004283                 push    ecx
.text$mn:00004284                 mov     eax, [ebp+Str]
.text$mn:00004287                 push    eax             ; Str
.text$mn:00004288                 mov     ecx, [ebp+arg_0]
.text$mn:0000428B                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:00004290                 test    eax, eax
.text$mn:00004292                 jnz     short loc_429D
.text$mn:00004294                 mov     [ebp+var_4], 1
.text$mn:0000429B                 jmp     short loc_42A4
.text$mn:0000429D ; ---------------------------------------------------------------------------
.text$mn:0000429D
.text$mn:0000429D loc_429D:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:0000429D                 mov     [ebp+var_4], 0
.text$mn:000042A4
.text$mn:000042A4 loc_42A4:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:000042A4                 mov     al, byte ptr [ebp+var_4]
.text$mn:000042A7                 mov     esp, ebp
.text$mn:000042A9                 pop     ebp
.text$mn:000042AA                 retn
.text$mn:000042AA ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:000042AA
.text$mn:000042AA ; ---------------------------------------------------------------------------
.text$mn:000042AB                 align 4
.text$mn:000042AB _text$mn        ends
.text$mn:000042AB
.text$mn:000042AC ; ===========================================================================
.text$mn:000042AC
.text$mn:000042AC ; Segment type: Pure code
.text$mn:000042AC ; Segment permissions: Read/Execute
.text$mn:000042AC _text$mn        segment para public 'CODE' use32
.text$mn:000042AC                 assume cs:_text$mn
.text$mn:000042AC                 ;org 42ACh
.text$mn:000042AC ; COMDAT (pick any)
.text$mn:000042AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042AC
.text$mn:000042AC ; =============== S U B R O U T I N E =======================================
.text$mn:000042AC
.text$mn:000042AC ; Attributes: bp-based frame
.text$mn:000042AC
.text$mn:000042AC ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:000042AC                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:000042AC ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:000042AC                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:000042AC                 push    ebp
.text$mn:000042AD                 mov     ebp, esp
.text$mn:000042AF                 mov     al, 1
.text$mn:000042B1                 pop     ebp
.text$mn:000042B2                 retn
.text$mn:000042B2 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:000042B2
.text$mn:000042B2 ; ---------------------------------------------------------------------------
.text$mn:000042B3                 align 4
.text$mn:000042B3 _text$mn        ends
.text$mn:000042B3
.text$mn:000042B4 ; ===========================================================================
.text$mn:000042B4
.text$mn:000042B4 ; Segment type: Pure code
.text$mn:000042B4 ; Segment permissions: Read/Execute
.text$mn:000042B4 _text$mn        segment para public 'CODE' use32
.text$mn:000042B4                 assume cs:_text$mn
.text$mn:000042B4                 ;org 42B4h
.text$mn:000042B4 ; COMDAT (pick any)
.text$mn:000042B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042B4
.text$mn:000042B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000042B4
.text$mn:000042B4 ; Attributes: bp-based frame
.text$mn:000042B4
.text$mn:000042B4 ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:000042B4                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:000042B4 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:000042B4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+73p
.text$mn:000042B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
.text$mn:000042B4
.text$mn:000042B4 var_4           = dword ptr -4
.text$mn:000042B4 arg_0           = dword ptr  8
.text$mn:000042B4 arg_4           = dword ptr  0Ch
.text$mn:000042B4
.text$mn:000042B4                 push    ebp
.text$mn:000042B5                 mov     ebp, esp
.text$mn:000042B7                 push    ecx
.text$mn:000042B8                 mov     eax, [ebp+arg_4]
.text$mn:000042BB                 push    eax
.text$mn:000042BC                 mov     ecx, [ebp+arg_0]
.text$mn:000042BF                 push    ecx
.text$mn:000042C0                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:000042C5                 add     esp, 8
.text$mn:000042C8                 movzx   edx, al
.text$mn:000042CB                 test    edx, edx
.text$mn:000042CD                 jnz     short loc_42D8
.text$mn:000042CF                 mov     [ebp+var_4], 1
.text$mn:000042D6                 jmp     short loc_42DF
.text$mn:000042D8 ; ---------------------------------------------------------------------------
.text$mn:000042D8
.text$mn:000042D8 loc_42D8:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:000042D8                 mov     [ebp+var_4], 0
.text$mn:000042DF
.text$mn:000042DF loc_42DF:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:000042DF                 mov     al, byte ptr [ebp+var_4]
.text$mn:000042E2                 mov     esp, ebp
.text$mn:000042E4                 pop     ebp
.text$mn:000042E5                 retn
.text$mn:000042E5 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:000042E5
.text$mn:000042E5 ; ---------------------------------------------------------------------------
.text$mn:000042E6                 align 4
.text$mn:000042E6 _text$mn        ends
.text$mn:000042E6
.text$mn:000042E8 ; ===========================================================================
.text$mn:000042E8
.text$mn:000042E8 ; Segment type: Pure code
.text$mn:000042E8 ; Segment permissions: Read/Execute
.text$mn:000042E8 _text$mn        segment para public 'CODE' use32
.text$mn:000042E8                 assume cs:_text$mn
.text$mn:000042E8                 ;org 42E8h
.text$mn:000042E8 ; COMDAT (pick any)
.text$mn:000042E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042E8
.text$mn:000042E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000042E8
.text$mn:000042E8 ; Attributes: bp-based frame
.text$mn:000042E8
.text$mn:000042E8 ; int __cdecl std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:000042E8                 public ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:000042E8 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:000042E8                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+2A0p
.text$mn:000042E8                                         ; FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+12Ep ...
.text$mn:000042E8
.text$mn:000042E8 var_4           = dword ptr -4
.text$mn:000042E8 arg_0           = dword ptr  8
.text$mn:000042E8 Str             = dword ptr  0Ch
.text$mn:000042E8
.text$mn:000042E8                 push    ebp
.text$mn:000042E9                 mov     ebp, esp
.text$mn:000042EB                 push    ecx
.text$mn:000042EC                 mov     eax, [ebp+Str]
.text$mn:000042EF                 push    eax             ; Str
.text$mn:000042F0                 mov     ecx, [ebp+arg_0]
.text$mn:000042F3                 push    ecx             ; int
.text$mn:000042F4                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:000042F9                 add     esp, 8
.text$mn:000042FC                 movzx   edx, al
.text$mn:000042FF                 test    edx, edx
.text$mn:00004301                 jnz     short loc_430C
.text$mn:00004303                 mov     [ebp+var_4], 1
.text$mn:0000430A                 jmp     short loc_4313
.text$mn:0000430C ; ---------------------------------------------------------------------------
.text$mn:0000430C
.text$mn:0000430C loc_430C:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+19j
.text$mn:0000430C                 mov     [ebp+var_4], 0
.text$mn:00004313
.text$mn:00004313 loc_4313:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+22j
.text$mn:00004313                 mov     al, byte ptr [ebp+var_4]
.text$mn:00004316                 mov     esp, ebp
.text$mn:00004318                 pop     ebp
.text$mn:00004319                 retn
.text$mn:00004319 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00004319
.text$mn:00004319 ; ---------------------------------------------------------------------------
.text$mn:0000431A                 align 4
.text$mn:0000431A _text$mn        ends
.text$mn:0000431A
.text$mn:0000431C ; ===========================================================================
.text$mn:0000431C
.text$mn:0000431C ; Segment type: Pure code
.text$mn:0000431C ; Segment permissions: Read/Execute
.text$mn:0000431C _text$mn        segment para public 'CODE' use32
.text$mn:0000431C                 assume cs:_text$mn
.text$mn:0000431C                 ;org 431Ch
.text$mn:0000431C ; COMDAT (pick any)
.text$mn:0000431C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000431C
.text$mn:0000431C ; =============== S U B R O U T I N E =======================================
.text$mn:0000431C
.text$mn:0000431C ; Attributes: bp-based frame
.text$mn:0000431C
.text$mn:0000431C ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:0000431C                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:0000431C ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:0000431C                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:0000431C
.text$mn:0000431C var_4           = dword ptr -4
.text$mn:0000431C arg_0           = dword ptr  8
.text$mn:0000431C
.text$mn:0000431C                 push    ebp
.text$mn:0000431D                 mov     ebp, esp
.text$mn:0000431F                 push    ecx
.text$mn:00004320                 mov     [ebp+var_4], 0
.text$mn:00004327                 cmp     [ebp+arg_0], 0
.text$mn:0000432B                 jnz     short loc_432F
.text$mn:0000432D                 jmp     short loc_434F
.text$mn:0000432F ; ---------------------------------------------------------------------------
.text$mn:0000432F
.text$mn:0000432F loc_432F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:0000432F                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:00004333                 ja      short loc_434A
.text$mn:00004335                 mov     eax, [ebp+arg_0]
.text$mn:00004338                 push    eax             ; unsigned int
.text$mn:00004339                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000433E                 add     esp, 4
.text$mn:00004341                 mov     [ebp+var_4], eax
.text$mn:00004344                 cmp     [ebp+var_4], 0
.text$mn:00004348                 jnz     short loc_434F
.text$mn:0000434A
.text$mn:0000434A loc_434A:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:0000434A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000434F
.text$mn:0000434F loc_434F:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:0000434F                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:0000434F                 mov     eax, [ebp+var_4]
.text$mn:00004352                 mov     esp, ebp
.text$mn:00004354                 pop     ebp
.text$mn:00004355                 retn
.text$mn:00004355 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:00004355
.text$mn:00004355 ; ---------------------------------------------------------------------------
.text$mn:00004356                 align 4
.text$mn:00004356 _text$mn        ends
.text$mn:00004356
.text$mn:00004358 ; ===========================================================================
.text$mn:00004358
.text$mn:00004358 ; Segment type: Pure code
.text$mn:00004358 ; Segment permissions: Read/Execute
.text$mn:00004358 _text$mn        segment para public 'CODE' use32
.text$mn:00004358                 assume cs:_text$mn
.text$mn:00004358                 ;org 4358h
.text$mn:00004358 ; COMDAT (pick any)
.text$mn:00004358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004358
.text$mn:00004358 ; =============== S U B R O U T I N E =======================================
.text$mn:00004358
.text$mn:00004358 ; Attributes: bp-based frame
.text$mn:00004358
.text$mn:00004358 ; class FunctionParser * * __cdecl std::_Allocate<class FunctionParser *>(unsigned int, class FunctionParser * *)
.text$mn:00004358                 public ??$_Allocate@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@IPAPAV1@@Z
.text$mn:00004358 ??$_Allocate@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@IPAPAV1@@Z proc near
.text$mn:00004358                                         ; CODE XREF: std::allocator<FunctionParser *>::allocate(uint)+Dp
.text$mn:00004358
.text$mn:00004358 var_4           = dword ptr -4
.text$mn:00004358 arg_0           = dword ptr  8
.text$mn:00004358
.text$mn:00004358                 push    ebp
.text$mn:00004359                 mov     ebp, esp
.text$mn:0000435B                 push    ecx
.text$mn:0000435C                 mov     [ebp+var_4], 0
.text$mn:00004363                 cmp     [ebp+arg_0], 0
.text$mn:00004367                 jnz     short loc_436B
.text$mn:00004369                 jmp     short loc_4391
.text$mn:0000436B ; ---------------------------------------------------------------------------
.text$mn:0000436B
.text$mn:0000436B loc_436B:                               ; CODE XREF: std::_Allocate<FunctionParser *>(uint,FunctionParser * *)+Fj
.text$mn:0000436B                 cmp     [ebp+arg_0], 3FFFFFFFh
.text$mn:00004372                 ja      short loc_438C
.text$mn:00004374                 mov     eax, [ebp+arg_0]
.text$mn:00004377                 shl     eax, 2
.text$mn:0000437A                 push    eax             ; unsigned int
.text$mn:0000437B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00004380                 add     esp, 4
.text$mn:00004383                 mov     [ebp+var_4], eax
.text$mn:00004386                 cmp     [ebp+var_4], 0
.text$mn:0000438A                 jnz     short loc_4391
.text$mn:0000438C
.text$mn:0000438C loc_438C:                               ; CODE XREF: std::_Allocate<FunctionParser *>(uint,FunctionParser * *)+1Aj
.text$mn:0000438C                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004391
.text$mn:00004391 loc_4391:                               ; CODE XREF: std::_Allocate<FunctionParser *>(uint,FunctionParser * *)+11j
.text$mn:00004391                                         ; std::_Allocate<FunctionParser *>(uint,FunctionParser * *)+32j
.text$mn:00004391                 mov     eax, [ebp+var_4]
.text$mn:00004394                 mov     esp, ebp
.text$mn:00004396                 pop     ebp
.text$mn:00004397                 retn
.text$mn:00004397 ??$_Allocate@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@IPAPAV1@@Z endp
.text$mn:00004397
.text$mn:00004397 _text$mn        ends
.text$mn:00004397
.text$mn:00004398 ; ===========================================================================
.text$mn:00004398
.text$mn:00004398 ; Segment type: Pure code
.text$mn:00004398 ; Segment permissions: Read/Execute
.text$mn:00004398 _text$mn        segment para public 'CODE' use32
.text$mn:00004398                 assume cs:_text$mn
.text$mn:00004398                 ;org 4398h
.text$mn:00004398 ; COMDAT (pick any)
.text$mn:00004398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004398
.text$mn:00004398 ; =============== S U B R O U T I N E =======================================
.text$mn:00004398
.text$mn:00004398 ; Attributes: bp-based frame
.text$mn:00004398
.text$mn:00004398 ; struct std::pair<int, int> * __cdecl std::_Allocate<struct std::pair<int, int>>(unsigned int, struct std::pair<int, int> *)
.text$mn:00004398                 public ??$_Allocate@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@IPAU10@@Z
.text$mn:00004398 ??$_Allocate@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@IPAU10@@Z proc near
.text$mn:00004398                                         ; CODE XREF: std::allocator<std::pair<int,int>>::allocate(uint)+Dp
.text$mn:00004398
.text$mn:00004398 var_4           = dword ptr -4
.text$mn:00004398 arg_0           = dword ptr  8
.text$mn:00004398
.text$mn:00004398                 push    ebp
.text$mn:00004399                 mov     ebp, esp
.text$mn:0000439B                 push    ecx
.text$mn:0000439C                 mov     [ebp+var_4], 0
.text$mn:000043A3                 cmp     [ebp+arg_0], 0
.text$mn:000043A7                 jnz     short loc_43AB
.text$mn:000043A9                 jmp     short loc_43D1
.text$mn:000043AB ; ---------------------------------------------------------------------------
.text$mn:000043AB
.text$mn:000043AB loc_43AB:                               ; CODE XREF: std::_Allocate<std::pair<int,int>>(uint,std::pair<int,int> *)+Fj
.text$mn:000043AB                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:000043B2                 ja      short loc_43CC
.text$mn:000043B4                 mov     eax, [ebp+arg_0]
.text$mn:000043B7                 shl     eax, 3
.text$mn:000043BA                 push    eax             ; unsigned int
.text$mn:000043BB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000043C0                 add     esp, 4
.text$mn:000043C3                 mov     [ebp+var_4], eax
.text$mn:000043C6                 cmp     [ebp+var_4], 0
.text$mn:000043CA                 jnz     short loc_43D1
.text$mn:000043CC
.text$mn:000043CC loc_43CC:                               ; CODE XREF: std::_Allocate<std::pair<int,int>>(uint,std::pair<int,int> *)+1Aj
.text$mn:000043CC                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000043D1
.text$mn:000043D1 loc_43D1:                               ; CODE XREF: std::_Allocate<std::pair<int,int>>(uint,std::pair<int,int> *)+11j
.text$mn:000043D1                                         ; std::_Allocate<std::pair<int,int>>(uint,std::pair<int,int> *)+32j
.text$mn:000043D1                 mov     eax, [ebp+var_4]
.text$mn:000043D4                 mov     esp, ebp
.text$mn:000043D6                 pop     ebp
.text$mn:000043D7                 retn
.text$mn:000043D7 ??$_Allocate@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@IPAU10@@Z endp
.text$mn:000043D7
.text$mn:000043D7 _text$mn        ends
.text$mn:000043D7
.text$mn:000043D8 ; ===========================================================================
.text$mn:000043D8
.text$mn:000043D8 ; Segment type: Pure code
.text$mn:000043D8 ; Segment permissions: Read/Execute
.text$mn:000043D8 _text$mn        segment para public 'CODE' use32
.text$mn:000043D8                 assume cs:_text$mn
.text$mn:000043D8                 ;org 43D8h
.text$mn:000043D8 ; COMDAT (pick any)
.text$mn:000043D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043D8
.text$mn:000043D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000043D8
.text$mn:000043D8 ; Attributes: bp-based frame
.text$mn:000043D8
.text$mn:000043D8 ; struct AssociationInfo * __cdecl std::_Allocate<struct AssociationInfo>(unsigned int, struct AssociationInfo *)
.text$mn:000043D8                 public ??$_Allocate@UAssociationInfo@@@std@@YAPAUAssociationInfo@@IPAU1@@Z
.text$mn:000043D8 ??$_Allocate@UAssociationInfo@@@std@@YAPAUAssociationInfo@@IPAU1@@Z proc near
.text$mn:000043D8                                         ; CODE XREF: std::allocator<AssociationInfo>::allocate(uint)+Dp
.text$mn:000043D8
.text$mn:000043D8 var_4           = dword ptr -4
.text$mn:000043D8 arg_0           = dword ptr  8
.text$mn:000043D8
.text$mn:000043D8                 push    ebp
.text$mn:000043D9                 mov     ebp, esp
.text$mn:000043DB                 push    ecx
.text$mn:000043DC                 mov     [ebp+var_4], 0
.text$mn:000043E3                 cmp     [ebp+arg_0], 0
.text$mn:000043E7                 jnz     short loc_43EB
.text$mn:000043E9                 jmp     short loc_4411
.text$mn:000043EB ; ---------------------------------------------------------------------------
.text$mn:000043EB
.text$mn:000043EB loc_43EB:                               ; CODE XREF: std::_Allocate<AssociationInfo>(uint,AssociationInfo *)+Fj
.text$mn:000043EB                 cmp     [ebp+arg_0], 3FFFFFFh
.text$mn:000043F2                 ja      short loc_440C
.text$mn:000043F4                 mov     eax, [ebp+arg_0]
.text$mn:000043F7                 shl     eax, 6
.text$mn:000043FA                 push    eax             ; unsigned int
.text$mn:000043FB                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00004400                 add     esp, 4
.text$mn:00004403                 mov     [ebp+var_4], eax
.text$mn:00004406                 cmp     [ebp+var_4], 0
.text$mn:0000440A                 jnz     short loc_4411
.text$mn:0000440C
.text$mn:0000440C loc_440C:                               ; CODE XREF: std::_Allocate<AssociationInfo>(uint,AssociationInfo *)+1Aj
.text$mn:0000440C                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004411
.text$mn:00004411 loc_4411:                               ; CODE XREF: std::_Allocate<AssociationInfo>(uint,AssociationInfo *)+11j
.text$mn:00004411                                         ; std::_Allocate<AssociationInfo>(uint,AssociationInfo *)+32j
.text$mn:00004411                 mov     eax, [ebp+var_4]
.text$mn:00004414                 mov     esp, ebp
.text$mn:00004416                 pop     ebp
.text$mn:00004417                 retn
.text$mn:00004417 ??$_Allocate@UAssociationInfo@@@std@@YAPAUAssociationInfo@@IPAU1@@Z endp
.text$mn:00004417
.text$mn:00004417 _text$mn        ends
.text$mn:00004417
.text$mn:00004418 ; ===========================================================================
.text$mn:00004418
.text$mn:00004418 ; Segment type: Pure code
.text$mn:00004418 ; Segment permissions: Read/Execute
.text$mn:00004418 _text$mn        segment para public 'CODE' use32
.text$mn:00004418                 assume cs:_text$mn
.text$mn:00004418                 ;org 4418h
.text$mn:00004418 ; COMDAT (pick any)
.text$mn:00004418                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004418
.text$mn:00004418 ; =============== S U B R O U T I N E =======================================
.text$mn:00004418
.text$mn:00004418 ; Attributes: bp-based frame
.text$mn:00004418
.text$mn:00004418 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00004418                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00004418 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00004418                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00004418
.text$mn:00004418 var_4           = dword ptr -4
.text$mn:00004418 arg_0           = dword ptr  8
.text$mn:00004418
.text$mn:00004418                 push    ebp
.text$mn:00004419                 mov     ebp, esp
.text$mn:0000441B                 push    ecx
.text$mn:0000441C                 mov     [ebp+var_4], 0
.text$mn:00004423                 cmp     [ebp+arg_0], 0
.text$mn:00004427                 jnz     short loc_442B
.text$mn:00004429                 jmp     short loc_4451
.text$mn:0000442B ; ---------------------------------------------------------------------------
.text$mn:0000442B
.text$mn:0000442B loc_442B:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:0000442B                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:00004432                 ja      short loc_444C
.text$mn:00004434                 mov     eax, [ebp+arg_0]
.text$mn:00004437                 shl     eax, 3
.text$mn:0000443A                 push    eax             ; unsigned int
.text$mn:0000443B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00004440                 add     esp, 4
.text$mn:00004443                 mov     [ebp+var_4], eax
.text$mn:00004446                 cmp     [ebp+var_4], 0
.text$mn:0000444A                 jnz     short loc_4451
.text$mn:0000444C
.text$mn:0000444C loc_444C:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:0000444C                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004451
.text$mn:00004451 loc_4451:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00004451                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00004451                 mov     eax, [ebp+var_4]
.text$mn:00004454                 mov     esp, ebp
.text$mn:00004456                 pop     ebp
.text$mn:00004457                 retn
.text$mn:00004457 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:00004457
.text$mn:00004457 _text$mn        ends
.text$mn:00004457
.text$mn:00004458 ; ===========================================================================
.text$mn:00004458
.text$mn:00004458 ; Segment type: Pure code
.text$mn:00004458 ; Segment permissions: Read/Execute
.text$mn:00004458 _text$mn        segment para public 'CODE' use32
.text$mn:00004458                 assume cs:_text$mn
.text$mn:00004458                 ;org 4458h
.text$mn:00004458 ; COMDAT (pick any)
.text$mn:00004458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004458
.text$mn:00004458 ; =============== S U B R O U T I N E =======================================
.text$mn:00004458
.text$mn:00004458 ; Attributes: bp-based frame
.text$mn:00004458
.text$mn:00004458 ; struct foundInfo * __cdecl std::_Allocate<struct foundInfo>(unsigned int, struct foundInfo *)
.text$mn:00004458                 public ??$_Allocate@UfoundInfo@@@std@@YAPAUfoundInfo@@IPAU1@@Z
.text$mn:00004458 ??$_Allocate@UfoundInfo@@@std@@YAPAUfoundInfo@@IPAU1@@Z proc near
.text$mn:00004458                                         ; CODE XREF: std::allocator<foundInfo>::allocate(uint)+Dp
.text$mn:00004458
.text$mn:00004458 var_4           = dword ptr -4
.text$mn:00004458 arg_0           = dword ptr  8
.text$mn:00004458
.text$mn:00004458                 push    ebp
.text$mn:00004459                 mov     ebp, esp
.text$mn:0000445B                 push    ecx
.text$mn:0000445C                 mov     [ebp+var_4], 0
.text$mn:00004463                 cmp     [ebp+arg_0], 0
.text$mn:00004467                 jnz     short loc_446B
.text$mn:00004469                 jmp     short loc_4491
.text$mn:0000446B ; ---------------------------------------------------------------------------
.text$mn:0000446B
.text$mn:0000446B loc_446B:                               ; CODE XREF: std::_Allocate<foundInfo>(uint,foundInfo *)+Fj
.text$mn:0000446B                 cmp     [ebp+arg_0], 3FFFFFFh
.text$mn:00004472                 ja      short loc_448C
.text$mn:00004474                 mov     eax, [ebp+arg_0]
.text$mn:00004477                 shl     eax, 6
.text$mn:0000447A                 push    eax             ; unsigned int
.text$mn:0000447B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00004480                 add     esp, 4
.text$mn:00004483                 mov     [ebp+var_4], eax
.text$mn:00004486                 cmp     [ebp+var_4], 0
.text$mn:0000448A                 jnz     short loc_4491
.text$mn:0000448C
.text$mn:0000448C loc_448C:                               ; CODE XREF: std::_Allocate<foundInfo>(uint,foundInfo *)+1Aj
.text$mn:0000448C                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004491
.text$mn:00004491 loc_4491:                               ; CODE XREF: std::_Allocate<foundInfo>(uint,foundInfo *)+11j
.text$mn:00004491                                         ; std::_Allocate<foundInfo>(uint,foundInfo *)+32j
.text$mn:00004491                 mov     eax, [ebp+var_4]
.text$mn:00004494                 mov     esp, ebp
.text$mn:00004496                 pop     ebp
.text$mn:00004497                 retn
.text$mn:00004497 ??$_Allocate@UfoundInfo@@@std@@YAPAUfoundInfo@@IPAU1@@Z endp
.text$mn:00004497
.text$mn:00004497 _text$mn        ends
.text$mn:00004497
.text$mn:00004498 ; ===========================================================================
.text$mn:00004498
.text$mn:00004498 ; Segment type: Pure code
.text$mn:00004498 ; Segment permissions: Read/Execute
.text$mn:00004498 _text$mn        segment para public 'CODE' use32
.text$mn:00004498                 assume cs:_text$mn
.text$mn:00004498                 ;org 4498h
.text$mn:00004498 ; COMDAT (pick any)
.text$mn:00004498                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004498
.text$mn:00004498 ; =============== S U B R O U T I N E =======================================
.text$mn:00004498
.text$mn:00004498 ; Attributes: bp-based frame
.text$mn:00004498
.text$mn:00004498 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Allocate<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004498                 public ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z
.text$mn:00004498 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z proc near
.text$mn:00004498                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)+Dp
.text$mn:00004498
.text$mn:00004498 var_4           = dword ptr -4
.text$mn:00004498 arg_0           = dword ptr  8
.text$mn:00004498
.text$mn:00004498                 push    ebp
.text$mn:00004499                 mov     ebp, esp
.text$mn:0000449B                 push    ecx
.text$mn:0000449C                 mov     [ebp+var_4], 0
.text$mn:000044A3                 cmp     [ebp+arg_0], 0
.text$mn:000044A7                 jnz     short loc_44AB
.text$mn:000044A9                 jmp     short loc_44CF
.text$mn:000044AB ; ---------------------------------------------------------------------------
.text$mn:000044AB
.text$mn:000044AB loc_44AB:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fj
.text$mn:000044AB                 cmp     [ebp+arg_0], 9249249h
.text$mn:000044B2                 ja      short loc_44CA
.text$mn:000044B4                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:000044B8                 push    eax             ; unsigned int
.text$mn:000044B9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000044BE                 add     esp, 4
.text$mn:000044C1                 mov     [ebp+var_4], eax
.text$mn:000044C4                 cmp     [ebp+var_4], 0
.text$mn:000044C8                 jnz     short loc_44CF
.text$mn:000044CA
.text$mn:000044CA loc_44CA:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Aj
.text$mn:000044CA                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000044CF
.text$mn:000044CF loc_44CF:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11j
.text$mn:000044CF                                         ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+30j
.text$mn:000044CF                 mov     eax, [ebp+var_4]
.text$mn:000044D2                 mov     esp, ebp
.text$mn:000044D4                 pop     ebp
.text$mn:000044D5                 retn
.text$mn:000044D5 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z endp
.text$mn:000044D5
.text$mn:000044D5 ; ---------------------------------------------------------------------------
.text$mn:000044D6                 align 4
.text$mn:000044D6 _text$mn        ends
.text$mn:000044D6
.text$mn:000044D8 ; ===========================================================================
.text$mn:000044D8
.text$mn:000044D8 ; Segment type: Pure code
.text$mn:000044D8 ; Segment permissions: Read/Execute
.text$mn:000044D8 _text$mn        segment para public 'CODE' use32
.text$mn:000044D8                 assume cs:_text$mn
.text$mn:000044D8                 ;org 44D8h
.text$mn:000044D8 ; COMDAT (pick any)
.text$mn:000044D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044D8
.text$mn:000044D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000044D8
.text$mn:000044D8 ; Attributes: bp-based frame
.text$mn:000044D8
.text$mn:000044D8 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:000044D8                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:000044D8 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:000044D8                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:000044D8
.text$mn:000044D8 var_4           = dword ptr -4
.text$mn:000044D8 arg_0           = dword ptr  8
.text$mn:000044D8
.text$mn:000044D8                 push    ebp
.text$mn:000044D9                 mov     ebp, esp
.text$mn:000044DB                 push    ecx
.text$mn:000044DC                 mov     [ebp+var_4], 0
.text$mn:000044E3                 cmp     [ebp+arg_0], 0
.text$mn:000044E7                 jnz     short loc_44EB
.text$mn:000044E9                 jmp     short loc_4510
.text$mn:000044EB ; ---------------------------------------------------------------------------
.text$mn:000044EB
.text$mn:000044EB loc_44EB:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:000044EB                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:000044F2                 ja      short loc_450B
.text$mn:000044F4                 mov     eax, [ebp+arg_0]
.text$mn:000044F7                 shl     eax, 1
.text$mn:000044F9                 push    eax             ; unsigned int
.text$mn:000044FA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000044FF                 add     esp, 4
.text$mn:00004502                 mov     [ebp+var_4], eax
.text$mn:00004505                 cmp     [ebp+var_4], 0
.text$mn:00004509                 jnz     short loc_4510
.text$mn:0000450B
.text$mn:0000450B loc_450B:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:0000450B                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00004510
.text$mn:00004510 loc_4510:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00004510                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00004510                 mov     eax, [ebp+var_4]
.text$mn:00004513                 mov     esp, ebp
.text$mn:00004515                 pop     ebp
.text$mn:00004516                 retn
.text$mn:00004516 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:00004516
.text$mn:00004516 ; ---------------------------------------------------------------------------
.text$mn:00004517                 align 4
.text$mn:00004517 _text$mn        ends
.text$mn:00004517
.text$mn:00004518 ; ===========================================================================
.text$mn:00004518
.text$mn:00004518 ; Segment type: Pure code
.text$mn:00004518 ; Segment permissions: Read/Execute
.text$mn:00004518 _text$mn        segment para public 'CODE' use32
.text$mn:00004518                 assume cs:_text$mn
.text$mn:00004518                 ;org 4518h
.text$mn:00004518 ; COMDAT (pick any)
.text$mn:00004518                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004518
.text$mn:00004518 ; =============== S U B R O U T I N E =======================================
.text$mn:00004518
.text$mn:00004518 ; Attributes: bp-based frame
.text$mn:00004518
.text$mn:00004518 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00004518                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00004518 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00004518                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00004518                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00004518
.text$mn:00004518 arg_0           = dword ptr  8
.text$mn:00004518 arg_4           = dword ptr  0Ch
.text$mn:00004518 arg_8           = dword ptr  10h
.text$mn:00004518
.text$mn:00004518                 push    ebp
.text$mn:00004519                 mov     ebp, esp
.text$mn:0000451B                 cmp     [ebp+arg_0], 0
.text$mn:0000451F                 jnz     short loc_4536
.text$mn:00004521                 mov     eax, [ebp+arg_8]
.text$mn:00004524                 push    eax             ; unsigned int
.text$mn:00004525                 mov     ecx, [ebp+arg_4]
.text$mn:00004528                 push    ecx             ; wchar_t *
.text$mn:00004529                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000452E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004533                 add     esp, 0Ch
.text$mn:00004536
.text$mn:00004536 loc_4536:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:00004536                 pop     ebp
.text$mn:00004537                 retn
.text$mn:00004537 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:00004537
.text$mn:00004537 _text$mn        ends
.text$mn:00004537
.text$mn:00004538 ; ===========================================================================
.text$mn:00004538
.text$mn:00004538 ; Segment type: Pure code
.text$mn:00004538 ; Segment permissions: Read/Execute
.text$mn:00004538 _text$mn        segment para public 'CODE' use32
.text$mn:00004538                 assume cs:_text$mn
.text$mn:00004538                 ;org 4538h
.text$mn:00004538 ; COMDAT (pick any)
.text$mn:00004538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004538
.text$mn:00004538 ; =============== S U B R O U T I N E =======================================
.text$mn:00004538
.text$mn:00004538 ; Attributes: bp-based frame
.text$mn:00004538
.text$mn:00004538 ; int __cdecl std::_Debug_pointer<FunctionParser *>(int, wchar_t *, unsigned int)
.text$mn:00004538                 public ??$_Debug_pointer@PAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@PB_WI@Z
.text$mn:00004538 ??$_Debug_pointer@PAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@PB_WI@Z proc near
.text$mn:00004538                                         ; CODE XREF: std::_Debug_range2<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004538                                         ; std::_Debug_range2<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004538
.text$mn:00004538 arg_0           = dword ptr  8
.text$mn:00004538 arg_4           = dword ptr  0Ch
.text$mn:00004538 arg_8           = dword ptr  10h
.text$mn:00004538
.text$mn:00004538                 push    ebp
.text$mn:00004539                 mov     ebp, esp
.text$mn:0000453B                 cmp     [ebp+arg_0], 0
.text$mn:0000453F                 jnz     short loc_4556
.text$mn:00004541                 mov     eax, [ebp+arg_8]
.text$mn:00004544                 push    eax             ; unsigned int
.text$mn:00004545                 mov     ecx, [ebp+arg_4]
.text$mn:00004548                 push    ecx             ; wchar_t *
.text$mn:00004549                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000454E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004553                 add     esp, 0Ch
.text$mn:00004556
.text$mn:00004556 loc_4556:                               ; CODE XREF: std::_Debug_pointer<FunctionParser *>(FunctionParser * *,wchar_t const *,uint)+7j
.text$mn:00004556                 pop     ebp
.text$mn:00004557                 retn
.text$mn:00004557 ??$_Debug_pointer@PAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@PB_WI@Z endp
.text$mn:00004557
.text$mn:00004557 _text$mn        ends
.text$mn:00004557
.text$mn:00004558 ; ===========================================================================
.text$mn:00004558
.text$mn:00004558 ; Segment type: Pure code
.text$mn:00004558 ; Segment permissions: Read/Execute
.text$mn:00004558 _text$mn        segment para public 'CODE' use32
.text$mn:00004558                 assume cs:_text$mn
.text$mn:00004558                 ;org 4558h
.text$mn:00004558 ; COMDAT (pick any)
.text$mn:00004558                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004558
.text$mn:00004558 ; =============== S U B R O U T I N E =======================================
.text$mn:00004558
.text$mn:00004558 ; Attributes: bp-based frame
.text$mn:00004558
.text$mn:00004558 ; int __cdecl std::_Debug_pointer<std::pair<int,int>>(int, wchar_t *, unsigned int)
.text$mn:00004558                 public ??$_Debug_pointer@U?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@PB_WI@Z
.text$mn:00004558 ??$_Debug_pointer@U?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@PB_WI@Z proc near
.text$mn:00004558                                         ; CODE XREF: std::_Debug_range2<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004558                                         ; std::_Debug_range2<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004558
.text$mn:00004558 arg_0           = dword ptr  8
.text$mn:00004558 arg_4           = dword ptr  0Ch
.text$mn:00004558 arg_8           = dword ptr  10h
.text$mn:00004558
.text$mn:00004558                 push    ebp
.text$mn:00004559                 mov     ebp, esp
.text$mn:0000455B                 cmp     [ebp+arg_0], 0
.text$mn:0000455F                 jnz     short loc_4576
.text$mn:00004561                 mov     eax, [ebp+arg_8]
.text$mn:00004564                 push    eax             ; unsigned int
.text$mn:00004565                 mov     ecx, [ebp+arg_4]
.text$mn:00004568                 push    ecx             ; wchar_t *
.text$mn:00004569                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000456E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004573                 add     esp, 0Ch
.text$mn:00004576
.text$mn:00004576 loc_4576:                               ; CODE XREF: std::_Debug_pointer<std::pair<int,int>>(std::pair<int,int> *,wchar_t const *,uint)+7j
.text$mn:00004576                 pop     ebp
.text$mn:00004577                 retn
.text$mn:00004577 ??$_Debug_pointer@U?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@PB_WI@Z endp
.text$mn:00004577
.text$mn:00004577 _text$mn        ends
.text$mn:00004577
.text$mn:00004578 ; ===========================================================================
.text$mn:00004578
.text$mn:00004578 ; Segment type: Pure code
.text$mn:00004578 ; Segment permissions: Read/Execute
.text$mn:00004578 _text$mn        segment para public 'CODE' use32
.text$mn:00004578                 assume cs:_text$mn
.text$mn:00004578                 ;org 4578h
.text$mn:00004578 ; COMDAT (pick any)
.text$mn:00004578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004578
.text$mn:00004578 ; =============== S U B R O U T I N E =======================================
.text$mn:00004578
.text$mn:00004578 ; Attributes: bp-based frame
.text$mn:00004578
.text$mn:00004578 ; int __cdecl std::_Debug_pointer<AssociationInfo>(int, wchar_t *, unsigned int)
.text$mn:00004578                 public ??$_Debug_pointer@UAssociationInfo@@@std@@YAXPAUAssociationInfo@@PB_WI@Z
.text$mn:00004578 ??$_Debug_pointer@UAssociationInfo@@@std@@YAXPAUAssociationInfo@@PB_WI@Z proc near
.text$mn:00004578                                         ; CODE XREF: std::_Debug_range2<AssociationInfo *>(AssociationInfo *,AssociationInfo *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004578                                         ; std::_Debug_range2<AssociationInfo *>(AssociationInfo *,AssociationInfo *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004578
.text$mn:00004578 arg_0           = dword ptr  8
.text$mn:00004578 arg_4           = dword ptr  0Ch
.text$mn:00004578 arg_8           = dword ptr  10h
.text$mn:00004578
.text$mn:00004578                 push    ebp
.text$mn:00004579                 mov     ebp, esp
.text$mn:0000457B                 cmp     [ebp+arg_0], 0
.text$mn:0000457F                 jnz     short loc_4596
.text$mn:00004581                 mov     eax, [ebp+arg_8]
.text$mn:00004584                 push    eax             ; unsigned int
.text$mn:00004585                 mov     ecx, [ebp+arg_4]
.text$mn:00004588                 push    ecx             ; wchar_t *
.text$mn:00004589                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000458E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004593                 add     esp, 0Ch
.text$mn:00004596
.text$mn:00004596 loc_4596:                               ; CODE XREF: std::_Debug_pointer<AssociationInfo>(AssociationInfo *,wchar_t const *,uint)+7j
.text$mn:00004596                 pop     ebp
.text$mn:00004597                 retn
.text$mn:00004597 ??$_Debug_pointer@UAssociationInfo@@@std@@YAXPAUAssociationInfo@@PB_WI@Z endp
.text$mn:00004597
.text$mn:00004597 _text$mn        ends
.text$mn:00004597
.text$mn:00004598 ; ===========================================================================
.text$mn:00004598
.text$mn:00004598 ; Segment type: Pure code
.text$mn:00004598 ; Segment permissions: Read/Execute
.text$mn:00004598 _text$mn        segment para public 'CODE' use32
.text$mn:00004598                 assume cs:_text$mn
.text$mn:00004598                 ;org 4598h
.text$mn:00004598 ; COMDAT (pick any)
.text$mn:00004598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004598
.text$mn:00004598 ; =============== S U B R O U T I N E =======================================
.text$mn:00004598
.text$mn:00004598 ; Attributes: bp-based frame
.text$mn:00004598
.text$mn:00004598 ; int __cdecl std::_Debug_pointer<foundInfo>(int, wchar_t *, unsigned int)
.text$mn:00004598                 public ??$_Debug_pointer@UfoundInfo@@@std@@YAXPAUfoundInfo@@PB_WI@Z
.text$mn:00004598 ??$_Debug_pointer@UfoundInfo@@@std@@YAXPAUfoundInfo@@PB_WI@Z proc near
.text$mn:00004598                                         ; CODE XREF: std::_Debug_range2<foundInfo *>(foundInfo *,foundInfo *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00004598                                         ; std::_Debug_range2<foundInfo *>(foundInfo *,foundInfo *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00004598
.text$mn:00004598 arg_0           = dword ptr  8
.text$mn:00004598 arg_4           = dword ptr  0Ch
.text$mn:00004598 arg_8           = dword ptr  10h
.text$mn:00004598
.text$mn:00004598                 push    ebp
.text$mn:00004599                 mov     ebp, esp
.text$mn:0000459B                 cmp     [ebp+arg_0], 0
.text$mn:0000459F                 jnz     short loc_45B6
.text$mn:000045A1                 mov     eax, [ebp+arg_8]
.text$mn:000045A4                 push    eax             ; unsigned int
.text$mn:000045A5                 mov     ecx, [ebp+arg_4]
.text$mn:000045A8                 push    ecx             ; wchar_t *
.text$mn:000045A9                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000045AE                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000045B3                 add     esp, 0Ch
.text$mn:000045B6
.text$mn:000045B6 loc_45B6:                               ; CODE XREF: std::_Debug_pointer<foundInfo>(foundInfo *,wchar_t const *,uint)+7j
.text$mn:000045B6                 pop     ebp
.text$mn:000045B7                 retn
.text$mn:000045B7 ??$_Debug_pointer@UfoundInfo@@@std@@YAXPAUfoundInfo@@PB_WI@Z endp
.text$mn:000045B7
.text$mn:000045B7 _text$mn        ends
.text$mn:000045B7
.text$mn:000045B8 ; ===========================================================================
.text$mn:000045B8
.text$mn:000045B8 ; Segment type: Pure code
.text$mn:000045B8 ; Segment permissions: Read/Execute
.text$mn:000045B8 _text$mn        segment para public 'CODE' use32
.text$mn:000045B8                 assume cs:_text$mn
.text$mn:000045B8                 ;org 45B8h
.text$mn:000045B8 ; COMDAT (pick any)
.text$mn:000045B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045B8
.text$mn:000045B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000045B8
.text$mn:000045B8 ; Attributes: bp-based frame
.text$mn:000045B8
.text$mn:000045B8 ; int __cdecl std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, wchar_t *, unsigned int)
.text$mn:000045B8                 public ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z
.text$mn:000045B8 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z proc near
.text$mn:000045B8                                         ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000045B8                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:000045B8
.text$mn:000045B8 arg_0           = dword ptr  8
.text$mn:000045B8 arg_4           = dword ptr  0Ch
.text$mn:000045B8 arg_8           = dword ptr  10h
.text$mn:000045B8
.text$mn:000045B8                 push    ebp
.text$mn:000045B9                 mov     ebp, esp
.text$mn:000045BB                 cmp     [ebp+arg_0], 0
.text$mn:000045BF                 jnz     short loc_45D6
.text$mn:000045C1                 mov     eax, [ebp+arg_8]
.text$mn:000045C4                 push    eax             ; unsigned int
.text$mn:000045C5                 mov     ecx, [ebp+arg_4]
.text$mn:000045C8                 push    ecx             ; wchar_t *
.text$mn:000045C9                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000045CE                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000045D3                 add     esp, 0Ch
.text$mn:000045D6
.text$mn:000045D6 loc_45D6:                               ; CODE XREF: std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+7j
.text$mn:000045D6                 pop     ebp
.text$mn:000045D7                 retn
.text$mn:000045D7 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z endp
.text$mn:000045D7
.text$mn:000045D7 _text$mn        ends
.text$mn:000045D7
.text$mn:000045D8 ; ===========================================================================
.text$mn:000045D8
.text$mn:000045D8 ; Segment type: Pure code
.text$mn:000045D8 ; Segment permissions: Read/Execute
.text$mn:000045D8 _text$mn        segment para public 'CODE' use32
.text$mn:000045D8                 assume cs:_text$mn
.text$mn:000045D8                 ;org 45D8h
.text$mn:000045D8 ; COMDAT (pick any)
.text$mn:000045D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045D8
.text$mn:000045D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000045D8
.text$mn:000045D8 ; Attributes: bp-based frame
.text$mn:000045D8
.text$mn:000045D8 ; int __cdecl std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, wchar_t *, unsigned int)
.text$mn:000045D8                 public ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z
.text$mn:000045D8 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z proc near
.text$mn:000045D8                                         ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000045D8                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp
.text$mn:000045D8
.text$mn:000045D8 arg_0           = dword ptr  8
.text$mn:000045D8 arg_4           = dword ptr  0Ch
.text$mn:000045D8 arg_8           = dword ptr  10h
.text$mn:000045D8
.text$mn:000045D8                 push    ebp
.text$mn:000045D9                 mov     ebp, esp
.text$mn:000045DB                 cmp     [ebp+arg_0], 0
.text$mn:000045DF                 jnz     short loc_45F6
.text$mn:000045E1                 mov     eax, [ebp+arg_8]
.text$mn:000045E4                 push    eax             ; unsigned int
.text$mn:000045E5                 mov     ecx, [ebp+arg_4]
.text$mn:000045E8                 push    ecx             ; wchar_t *
.text$mn:000045E9                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000045EE                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000045F3                 add     esp, 0Ch
.text$mn:000045F6
.text$mn:000045F6 loc_45F6:                               ; CODE XREF: std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)+7j
.text$mn:000045F6                 pop     ebp
.text$mn:000045F7                 retn
.text$mn:000045F7 ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z endp
.text$mn:000045F7
.text$mn:000045F7 _text$mn        ends
.text$mn:000045F7
.text$mn:000045F8 ; ===========================================================================
.text$mn:000045F8
.text$mn:000045F8 ; Segment type: Pure code
.text$mn:000045F8 ; Segment permissions: Read/Execute
.text$mn:000045F8 _text$mn        segment para public 'CODE' use32
.text$mn:000045F8                 assume cs:_text$mn
.text$mn:000045F8                 ;org 45F8h
.text$mn:000045F8 ; COMDAT (pick any)
.text$mn:000045F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045F8
.text$mn:000045F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000045F8
.text$mn:000045F8 ; Attributes: bp-based frame
.text$mn:000045F8
.text$mn:000045F8 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:000045F8                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:000045F8 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:000045F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+15p
.text$mn:000045F8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+1Dp ...
.text$mn:000045F8
.text$mn:000045F8 arg_0           = dword ptr  8
.text$mn:000045F8 arg_4           = dword ptr  0Ch
.text$mn:000045F8 arg_8           = dword ptr  10h
.text$mn:000045F8
.text$mn:000045F8                 push    ebp
.text$mn:000045F9                 mov     ebp, esp
.text$mn:000045FB                 cmp     [ebp+arg_0], 0
.text$mn:000045FF                 jnz     short loc_4616
.text$mn:00004601                 mov     eax, [ebp+arg_8]
.text$mn:00004604                 push    eax             ; unsigned int
.text$mn:00004605                 mov     ecx, [ebp+arg_4]
.text$mn:00004608                 push    ecx             ; wchar_t *
.text$mn:00004609                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000460E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004613                 add     esp, 0Ch
.text$mn:00004616
.text$mn:00004616 loc_4616:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:00004616                 pop     ebp
.text$mn:00004617                 retn
.text$mn:00004617 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:00004617
.text$mn:00004617 _text$mn        ends
.text$mn:00004617
.text$mn:00004618 ; ===========================================================================
.text$mn:00004618
.text$mn:00004618 ; Segment type: Pure code
.text$mn:00004618 ; Segment permissions: Read/Execute
.text$mn:00004618 _text$mn        segment para public 'CODE' use32
.text$mn:00004618                 assume cs:_text$mn
.text$mn:00004618                 ;org 4618h
.text$mn:00004618 ; COMDAT (pick any)
.text$mn:00004618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004618
.text$mn:00004618 ; =============== S U B R O U T I N E =======================================
.text$mn:00004618
.text$mn:00004618 ; Attributes: bp-based frame
.text$mn:00004618
.text$mn:00004618 ; int __cdecl std::_Debug_range2<FunctionParser * *>(int, int, wchar_t *, unsigned int)
.text$mn:00004618                 public ??$_Debug_range2@PAPAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00004618 ??$_Debug_range2@PAPAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004618                                         ; CODE XREF: std::_Debug_range<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint)+2Ap
.text$mn:00004618
.text$mn:00004618 arg_0           = dword ptr  8
.text$mn:00004618 arg_4           = dword ptr  0Ch
.text$mn:00004618 arg_8           = dword ptr  10h
.text$mn:00004618 arg_C           = dword ptr  14h
.text$mn:00004618
.text$mn:00004618                 push    ebp
.text$mn:00004619                 mov     ebp, esp
.text$mn:0000461B                 mov     eax, [ebp+arg_0]
.text$mn:0000461E                 cmp     eax, [ebp+arg_4]
.text$mn:00004621                 jz      short loc_4668
.text$mn:00004623                 mov     ecx, [ebp+arg_C]
.text$mn:00004626                 push    ecx             ; unsigned int
.text$mn:00004627                 mov     edx, [ebp+arg_8]
.text$mn:0000462A                 push    edx             ; wchar_t *
.text$mn:0000462B                 mov     eax, [ebp+arg_0]
.text$mn:0000462E                 push    eax             ; int
.text$mn:0000462F                 call    ??$_Debug_pointer@PAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@PB_WI@Z ; std::_Debug_pointer<FunctionParser *>(FunctionParser * *,wchar_t const *,uint)
.text$mn:00004634                 add     esp, 0Ch
.text$mn:00004637                 mov     ecx, [ebp+arg_C]
.text$mn:0000463A                 push    ecx             ; unsigned int
.text$mn:0000463B                 mov     edx, [ebp+arg_8]
.text$mn:0000463E                 push    edx             ; wchar_t *
.text$mn:0000463F                 mov     eax, [ebp+arg_4]
.text$mn:00004642                 push    eax             ; int
.text$mn:00004643                 call    ??$_Debug_pointer@PAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@PB_WI@Z ; std::_Debug_pointer<FunctionParser *>(FunctionParser * *,wchar_t const *,uint)
.text$mn:00004648                 add     esp, 0Ch
.text$mn:0000464B                 mov     ecx, [ebp+arg_4]
.text$mn:0000464E                 cmp     ecx, [ebp+arg_0]
.text$mn:00004651                 jnb     short loc_4668
.text$mn:00004653                 mov     edx, [ebp+arg_C]
.text$mn:00004656                 push    edx             ; unsigned int
.text$mn:00004657                 mov     eax, [ebp+arg_8]
.text$mn:0000465A                 push    eax             ; wchar_t *
.text$mn:0000465B                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004660                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004665                 add     esp, 0Ch
.text$mn:00004668
.text$mn:00004668 loc_4668:                               ; CODE XREF: std::_Debug_range2<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004668                                         ; std::_Debug_range2<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004668                 pop     ebp
.text$mn:00004669                 retn
.text$mn:00004669 ??$_Debug_range2@PAPAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004669
.text$mn:00004669 ; ---------------------------------------------------------------------------
.text$mn:0000466A                 align 4
.text$mn:0000466A _text$mn        ends
.text$mn:0000466A
.text$mn:0000466C ; ===========================================================================
.text$mn:0000466C
.text$mn:0000466C ; Segment type: Pure code
.text$mn:0000466C ; Segment permissions: Read/Execute
.text$mn:0000466C _text$mn        segment para public 'CODE' use32
.text$mn:0000466C                 assume cs:_text$mn
.text$mn:0000466C                 ;org 466Ch
.text$mn:0000466C ; COMDAT (pick any)
.text$mn:0000466C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000466C
.text$mn:0000466C ; =============== S U B R O U T I N E =======================================
.text$mn:0000466C
.text$mn:0000466C ; Attributes: bp-based frame
.text$mn:0000466C
.text$mn:0000466C ; int __cdecl std::_Debug_range2<std::pair<int,int> *>(int, int, wchar_t *, unsigned int)
.text$mn:0000466C                 public ??$_Debug_range2@PAU?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:0000466C ??$_Debug_range2@PAU?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:0000466C                                         ; CODE XREF: std::_Debug_range<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint)+2Ap
.text$mn:0000466C
.text$mn:0000466C arg_0           = dword ptr  8
.text$mn:0000466C arg_4           = dword ptr  0Ch
.text$mn:0000466C arg_8           = dword ptr  10h
.text$mn:0000466C arg_C           = dword ptr  14h
.text$mn:0000466C
.text$mn:0000466C                 push    ebp
.text$mn:0000466D                 mov     ebp, esp
.text$mn:0000466F                 mov     eax, [ebp+arg_0]
.text$mn:00004672                 cmp     eax, [ebp+arg_4]
.text$mn:00004675                 jz      short loc_46BC
.text$mn:00004677                 mov     ecx, [ebp+arg_C]
.text$mn:0000467A                 push    ecx             ; unsigned int
.text$mn:0000467B                 mov     edx, [ebp+arg_8]
.text$mn:0000467E                 push    edx             ; wchar_t *
.text$mn:0000467F                 mov     eax, [ebp+arg_0]
.text$mn:00004682                 push    eax             ; int
.text$mn:00004683                 call    ??$_Debug_pointer@U?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@PB_WI@Z ; std::_Debug_pointer<std::pair<int,int>>(std::pair<int,int> *,wchar_t const *,uint)
.text$mn:00004688                 add     esp, 0Ch
.text$mn:0000468B                 mov     ecx, [ebp+arg_C]
.text$mn:0000468E                 push    ecx             ; unsigned int
.text$mn:0000468F                 mov     edx, [ebp+arg_8]
.text$mn:00004692                 push    edx             ; wchar_t *
.text$mn:00004693                 mov     eax, [ebp+arg_4]
.text$mn:00004696                 push    eax             ; int
.text$mn:00004697                 call    ??$_Debug_pointer@U?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@PB_WI@Z ; std::_Debug_pointer<std::pair<int,int>>(std::pair<int,int> *,wchar_t const *,uint)
.text$mn:0000469C                 add     esp, 0Ch
.text$mn:0000469F                 mov     ecx, [ebp+arg_4]
.text$mn:000046A2                 cmp     ecx, [ebp+arg_0]
.text$mn:000046A5                 jnb     short loc_46BC
.text$mn:000046A7                 mov     edx, [ebp+arg_C]
.text$mn:000046AA                 push    edx             ; unsigned int
.text$mn:000046AB                 mov     eax, [ebp+arg_8]
.text$mn:000046AE                 push    eax             ; wchar_t *
.text$mn:000046AF                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:000046B4                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000046B9                 add     esp, 0Ch
.text$mn:000046BC
.text$mn:000046BC loc_46BC:                               ; CODE XREF: std::_Debug_range2<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:000046BC                                         ; std::_Debug_range2<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:000046BC                 pop     ebp
.text$mn:000046BD                 retn
.text$mn:000046BD ??$_Debug_range2@PAU?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:000046BD
.text$mn:000046BD ; ---------------------------------------------------------------------------
.text$mn:000046BE                 align 10h
.text$mn:000046BE _text$mn        ends
.text$mn:000046BE
.text$mn:000046C0 ; ===========================================================================
.text$mn:000046C0
.text$mn:000046C0 ; Segment type: Pure code
.text$mn:000046C0 ; Segment permissions: Read/Execute
.text$mn:000046C0 _text$mn        segment para public 'CODE' use32
.text$mn:000046C0                 assume cs:_text$mn
.text$mn:000046C0                 ;org 46C0h
.text$mn:000046C0 ; COMDAT (pick any)
.text$mn:000046C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046C0
.text$mn:000046C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000046C0
.text$mn:000046C0 ; Attributes: bp-based frame
.text$mn:000046C0
.text$mn:000046C0 ; int __cdecl std::_Debug_range2<AssociationInfo *>(int, int, wchar_t *, unsigned int)
.text$mn:000046C0                 public ??$_Debug_range2@PAUAssociationInfo@@@std@@YAXPAUAssociationInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000046C0 ??$_Debug_range2@PAUAssociationInfo@@@std@@YAXPAUAssociationInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000046C0                                         ; CODE XREF: std::_Debug_range<AssociationInfo *>(AssociationInfo *,AssociationInfo *,wchar_t const *,uint)+2Ap
.text$mn:000046C0
.text$mn:000046C0 arg_0           = dword ptr  8
.text$mn:000046C0 arg_4           = dword ptr  0Ch
.text$mn:000046C0 arg_8           = dword ptr  10h
.text$mn:000046C0 arg_C           = dword ptr  14h
.text$mn:000046C0
.text$mn:000046C0                 push    ebp
.text$mn:000046C1                 mov     ebp, esp
.text$mn:000046C3                 mov     eax, [ebp+arg_0]
.text$mn:000046C6                 cmp     eax, [ebp+arg_4]
.text$mn:000046C9                 jz      short loc_4710
.text$mn:000046CB                 mov     ecx, [ebp+arg_C]
.text$mn:000046CE                 push    ecx             ; unsigned int
.text$mn:000046CF                 mov     edx, [ebp+arg_8]
.text$mn:000046D2                 push    edx             ; wchar_t *
.text$mn:000046D3                 mov     eax, [ebp+arg_0]
.text$mn:000046D6                 push    eax             ; int
.text$mn:000046D7                 call    ??$_Debug_pointer@UAssociationInfo@@@std@@YAXPAUAssociationInfo@@PB_WI@Z ; std::_Debug_pointer<AssociationInfo>(AssociationInfo *,wchar_t const *,uint)
.text$mn:000046DC                 add     esp, 0Ch
.text$mn:000046DF                 mov     ecx, [ebp+arg_C]
.text$mn:000046E2                 push    ecx             ; unsigned int
.text$mn:000046E3                 mov     edx, [ebp+arg_8]
.text$mn:000046E6                 push    edx             ; wchar_t *
.text$mn:000046E7                 mov     eax, [ebp+arg_4]
.text$mn:000046EA                 push    eax             ; int
.text$mn:000046EB                 call    ??$_Debug_pointer@UAssociationInfo@@@std@@YAXPAUAssociationInfo@@PB_WI@Z ; std::_Debug_pointer<AssociationInfo>(AssociationInfo *,wchar_t const *,uint)
.text$mn:000046F0                 add     esp, 0Ch
.text$mn:000046F3                 mov     ecx, [ebp+arg_4]
.text$mn:000046F6                 cmp     ecx, [ebp+arg_0]
.text$mn:000046F9                 jnb     short loc_4710
.text$mn:000046FB                 mov     edx, [ebp+arg_C]
.text$mn:000046FE                 push    edx             ; unsigned int
.text$mn:000046FF                 mov     eax, [ebp+arg_8]
.text$mn:00004702                 push    eax             ; wchar_t *
.text$mn:00004703                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004708                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000470D                 add     esp, 0Ch
.text$mn:00004710
.text$mn:00004710 loc_4710:                               ; CODE XREF: std::_Debug_range2<AssociationInfo *>(AssociationInfo *,AssociationInfo *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004710                                         ; std::_Debug_range2<AssociationInfo *>(AssociationInfo *,AssociationInfo *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004710                 pop     ebp
.text$mn:00004711                 retn
.text$mn:00004711 ??$_Debug_range2@PAUAssociationInfo@@@std@@YAXPAUAssociationInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004711
.text$mn:00004711 ; ---------------------------------------------------------------------------
.text$mn:00004712                 align 4
.text$mn:00004712 _text$mn        ends
.text$mn:00004712
.text$mn:00004714 ; ===========================================================================
.text$mn:00004714
.text$mn:00004714 ; Segment type: Pure code
.text$mn:00004714 ; Segment permissions: Read/Execute
.text$mn:00004714 _text$mn        segment para public 'CODE' use32
.text$mn:00004714                 assume cs:_text$mn
.text$mn:00004714                 ;org 4714h
.text$mn:00004714 ; COMDAT (pick any)
.text$mn:00004714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004714
.text$mn:00004714 ; =============== S U B R O U T I N E =======================================
.text$mn:00004714
.text$mn:00004714 ; Attributes: bp-based frame
.text$mn:00004714
.text$mn:00004714 ; int __cdecl std::_Debug_range2<foundInfo *>(int, int, wchar_t *, unsigned int)
.text$mn:00004714                 public ??$_Debug_range2@PAUfoundInfo@@@std@@YAXPAUfoundInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00004714 ??$_Debug_range2@PAUfoundInfo@@@std@@YAXPAUfoundInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004714                                         ; CODE XREF: std::_Debug_range<foundInfo *>(foundInfo *,foundInfo *,wchar_t const *,uint)+2Ap
.text$mn:00004714
.text$mn:00004714 arg_0           = dword ptr  8
.text$mn:00004714 arg_4           = dword ptr  0Ch
.text$mn:00004714 arg_8           = dword ptr  10h
.text$mn:00004714 arg_C           = dword ptr  14h
.text$mn:00004714
.text$mn:00004714                 push    ebp
.text$mn:00004715                 mov     ebp, esp
.text$mn:00004717                 mov     eax, [ebp+arg_0]
.text$mn:0000471A                 cmp     eax, [ebp+arg_4]
.text$mn:0000471D                 jz      short loc_4764
.text$mn:0000471F                 mov     ecx, [ebp+arg_C]
.text$mn:00004722                 push    ecx             ; unsigned int
.text$mn:00004723                 mov     edx, [ebp+arg_8]
.text$mn:00004726                 push    edx             ; wchar_t *
.text$mn:00004727                 mov     eax, [ebp+arg_0]
.text$mn:0000472A                 push    eax             ; int
.text$mn:0000472B                 call    ??$_Debug_pointer@UfoundInfo@@@std@@YAXPAUfoundInfo@@PB_WI@Z ; std::_Debug_pointer<foundInfo>(foundInfo *,wchar_t const *,uint)
.text$mn:00004730                 add     esp, 0Ch
.text$mn:00004733                 mov     ecx, [ebp+arg_C]
.text$mn:00004736                 push    ecx             ; unsigned int
.text$mn:00004737                 mov     edx, [ebp+arg_8]
.text$mn:0000473A                 push    edx             ; wchar_t *
.text$mn:0000473B                 mov     eax, [ebp+arg_4]
.text$mn:0000473E                 push    eax             ; int
.text$mn:0000473F                 call    ??$_Debug_pointer@UfoundInfo@@@std@@YAXPAUfoundInfo@@PB_WI@Z ; std::_Debug_pointer<foundInfo>(foundInfo *,wchar_t const *,uint)
.text$mn:00004744                 add     esp, 0Ch
.text$mn:00004747                 mov     ecx, [ebp+arg_4]
.text$mn:0000474A                 cmp     ecx, [ebp+arg_0]
.text$mn:0000474D                 jnb     short loc_4764
.text$mn:0000474F                 mov     edx, [ebp+arg_C]
.text$mn:00004752                 push    edx             ; unsigned int
.text$mn:00004753                 mov     eax, [ebp+arg_8]
.text$mn:00004756                 push    eax             ; wchar_t *
.text$mn:00004757                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:0000475C                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004761                 add     esp, 0Ch
.text$mn:00004764
.text$mn:00004764 loc_4764:                               ; CODE XREF: std::_Debug_range2<foundInfo *>(foundInfo *,foundInfo *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:00004764                                         ; std::_Debug_range2<foundInfo *>(foundInfo *,foundInfo *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:00004764                 pop     ebp
.text$mn:00004765                 retn
.text$mn:00004765 ??$_Debug_range2@PAUfoundInfo@@@std@@YAXPAUfoundInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00004765
.text$mn:00004765 ; ---------------------------------------------------------------------------
.text$mn:00004766                 align 4
.text$mn:00004766 _text$mn        ends
.text$mn:00004766
.text$mn:00004768 ; ===========================================================================
.text$mn:00004768
.text$mn:00004768 ; Segment type: Pure code
.text$mn:00004768 ; Segment permissions: Read/Execute
.text$mn:00004768 _text$mn        segment para public 'CODE' use32
.text$mn:00004768                 assume cs:_text$mn
.text$mn:00004768                 ;org 4768h
.text$mn:00004768 ; COMDAT (pick any)
.text$mn:00004768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004768
.text$mn:00004768 ; =============== S U B R O U T I N E =======================================
.text$mn:00004768
.text$mn:00004768 ; Attributes: bp-based frame
.text$mn:00004768
.text$mn:00004768 ; int __cdecl std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:00004768                 public ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00004768 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00004768                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+2Ap
.text$mn:00004768
.text$mn:00004768 arg_0           = dword ptr  8
.text$mn:00004768 arg_4           = dword ptr  0Ch
.text$mn:00004768 arg_8           = dword ptr  10h
.text$mn:00004768 arg_C           = dword ptr  14h
.text$mn:00004768
.text$mn:00004768                 push    ebp
.text$mn:00004769                 mov     ebp, esp
.text$mn:0000476B                 mov     eax, [ebp+arg_0]
.text$mn:0000476E                 cmp     eax, [ebp+arg_4]
.text$mn:00004771                 jz      short loc_47B8
.text$mn:00004773                 mov     ecx, [ebp+arg_C]
.text$mn:00004776                 push    ecx             ; unsigned int
.text$mn:00004777                 mov     edx, [ebp+arg_8]
.text$mn:0000477A                 push    edx             ; wchar_t *
.text$mn:0000477B                 mov     eax, [ebp+arg_0]
.text$mn:0000477E                 push    eax             ; int
.text$mn:0000477F                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00004784                 add     esp, 0Ch
.text$mn:00004787                 mov     ecx, [ebp+arg_C]
.text$mn:0000478A                 push    ecx             ; unsigned int
.text$mn:0000478B                 mov     edx, [ebp+arg_8]
.text$mn:0000478E                 push    edx             ; wchar_t *
.text$mn:0000478F                 mov     eax, [ebp+arg_4]
.text$mn:00004792                 push    eax             ; int
.text$mn:00004793                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00004798                 add     esp, 0Ch
.text$mn:0000479B                 mov     ecx, [ebp+arg_4]
.text$mn:0000479E                 cmp     ecx, [ebp+arg_0]
.text$mn:000047A1                 jnb     short loc_47B8
.text$mn:000047A3                 mov     edx, [ebp+arg_C]
.text$mn:000047A6                 push    edx             ; unsigned int
.text$mn:000047A7                 mov     eax, [ebp+arg_8]
.text$mn:000047AA                 push    eax             ; wchar_t *
.text$mn:000047AB                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:000047B0                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000047B5                 add     esp, 0Ch
.text$mn:000047B8
.text$mn:000047B8 loc_47B8:                               ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:000047B8                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:000047B8                 pop     ebp
.text$mn:000047B9                 retn
.text$mn:000047B9 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:000047B9
.text$mn:000047B9 ; ---------------------------------------------------------------------------
.text$mn:000047BA                 align 4
.text$mn:000047BA _text$mn        ends
.text$mn:000047BA
.text$mn:000047BC ; ===========================================================================
.text$mn:000047BC
.text$mn:000047BC ; Segment type: Pure code
.text$mn:000047BC ; Segment permissions: Read/Execute
.text$mn:000047BC _text$mn        segment para public 'CODE' use32
.text$mn:000047BC                 assume cs:_text$mn
.text$mn:000047BC                 ;org 47BCh
.text$mn:000047BC ; COMDAT (pick any)
.text$mn:000047BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047BC
.text$mn:000047BC ; =============== S U B R O U T I N E =======================================
.text$mn:000047BC
.text$mn:000047BC ; Attributes: bp-based frame
.text$mn:000047BC
.text$mn:000047BC ; int __cdecl std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(int, int, wchar_t *, unsigned int)
.text$mn:000047BC                 public ??$_Debug_range2@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000047BC ??$_Debug_range2@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000047BC                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)+2Ap
.text$mn:000047BC
.text$mn:000047BC arg_0           = dword ptr  8
.text$mn:000047BC arg_4           = dword ptr  0Ch
.text$mn:000047BC arg_8           = dword ptr  10h
.text$mn:000047BC arg_C           = dword ptr  14h
.text$mn:000047BC
.text$mn:000047BC                 push    ebp
.text$mn:000047BD                 mov     ebp, esp
.text$mn:000047BF                 mov     eax, [ebp+arg_0]
.text$mn:000047C2                 cmp     eax, [ebp+arg_4]
.text$mn:000047C5                 jz      short loc_480C
.text$mn:000047C7                 mov     ecx, [ebp+arg_C]
.text$mn:000047CA                 push    ecx             ; unsigned int
.text$mn:000047CB                 mov     edx, [ebp+arg_8]
.text$mn:000047CE                 push    edx             ; wchar_t *
.text$mn:000047CF                 mov     eax, [ebp+arg_0]
.text$mn:000047D2                 push    eax             ; int
.text$mn:000047D3                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)
.text$mn:000047D8                 add     esp, 0Ch
.text$mn:000047DB                 mov     ecx, [ebp+arg_C]
.text$mn:000047DE                 push    ecx             ; unsigned int
.text$mn:000047DF                 mov     edx, [ebp+arg_8]
.text$mn:000047E2                 push    edx             ; wchar_t *
.text$mn:000047E3                 mov     eax, [ebp+arg_4]
.text$mn:000047E6                 push    eax             ; int
.text$mn:000047E7                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)
.text$mn:000047EC                 add     esp, 0Ch
.text$mn:000047EF                 mov     ecx, [ebp+arg_4]
.text$mn:000047F2                 cmp     ecx, [ebp+arg_0]
.text$mn:000047F5                 jnb     short loc_480C
.text$mn:000047F7                 mov     edx, [ebp+arg_C]
.text$mn:000047FA                 push    edx             ; unsigned int
.text$mn:000047FB                 mov     eax, [ebp+arg_8]
.text$mn:000047FE                 push    eax             ; wchar_t *
.text$mn:000047FF                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00004804                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00004809                 add     esp, 0Ch
.text$mn:0000480C
.text$mn:0000480C loc_480C:                               ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:0000480C                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:0000480C                 pop     ebp
.text$mn:0000480D                 retn
.text$mn:0000480D ??$_Debug_range2@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:0000480D
.text$mn:0000480D ; ---------------------------------------------------------------------------
.text$mn:0000480E                 align 10h
.text$mn:0000480E _text$mn        ends
.text$mn:0000480E
.text$mn:00004810 ; ===========================================================================
.text$mn:00004810
.text$mn:00004810 ; Segment type: Pure code
.text$mn:00004810 ; Segment permissions: Read/Execute
.text$mn:00004810 _text$mn        segment para public 'CODE' use32
.text$mn:00004810                 assume cs:_text$mn
.text$mn:00004810                 ;org 4810h
.text$mn:00004810 ; COMDAT (pick any)
.text$mn:00004810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004810
.text$mn:00004810 ; =============== S U B R O U T I N E =======================================
.text$mn:00004810
.text$mn:00004810 ; Attributes: bp-based frame
.text$mn:00004810
.text$mn:00004810 ; int __cdecl std::_Debug_range<FunctionParser * *>(int, int, wchar_t *, unsigned int)
.text$mn:00004810                 public ??$_Debug_range@PAPAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@0PB_WI@Z
.text$mn:00004810 ??$_Debug_range@PAPAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@0PB_WI@Z proc near
.text$mn:00004810                                         ; CODE XREF: std::_Uninit_move<FunctionParser *,FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &,FunctionParser * *,std::_Scalar_ptr_iterator_tag)+16p
.text$mn:00004810
.text$mn:00004810 var_1           = byte ptr -1
.text$mn:00004810 arg_0           = dword ptr  8
.text$mn:00004810 arg_4           = dword ptr  0Ch
.text$mn:00004810 arg_8           = dword ptr  10h
.text$mn:00004810 arg_C           = dword ptr  14h
.text$mn:00004810
.text$mn:00004810                 push    ebp
.text$mn:00004811                 mov     ebp, esp
.text$mn:00004813                 push    ecx
.text$mn:00004814                 lea     eax, [ebp+arg_0]
.text$mn:00004817                 push    eax
.text$mn:00004818                 lea     ecx, [ebp+var_1]
.text$mn:0000481B                 push    ecx
.text$mn:0000481C                 call    ??$_Iter_cat@PAPAVFunctionParser@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFunctionParser@@@Z ; std::_Iter_cat<FunctionParser * *>(FunctionParser * * const &)
.text$mn:00004821                 add     esp, 8
.text$mn:00004824                 mov     dl, [eax]
.text$mn:00004826                 movzx   eax, dl
.text$mn:00004829                 push    eax
.text$mn:0000482A                 mov     ecx, [ebp+arg_C]
.text$mn:0000482D                 push    ecx             ; unsigned int
.text$mn:0000482E                 mov     edx, [ebp+arg_8]
.text$mn:00004831                 push    edx             ; wchar_t *
.text$mn:00004832                 mov     eax, [ebp+arg_4]
.text$mn:00004835                 push    eax             ; int
.text$mn:00004836                 mov     ecx, [ebp+arg_0]
.text$mn:00004839                 push    ecx             ; int
.text$mn:0000483A                 call    ??$_Debug_range2@PAPAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:0000483F                 add     esp, 14h
.text$mn:00004842                 mov     esp, ebp
.text$mn:00004844                 pop     ebp
.text$mn:00004845                 retn
.text$mn:00004845 ??$_Debug_range@PAPAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@0PB_WI@Z endp
.text$mn:00004845
.text$mn:00004845 ; ---------------------------------------------------------------------------
.text$mn:00004846                 align 4
.text$mn:00004846 _text$mn        ends
.text$mn:00004846
.text$mn:00004848 ; ===========================================================================
.text$mn:00004848
.text$mn:00004848 ; Segment type: Pure code
.text$mn:00004848 ; Segment permissions: Read/Execute
.text$mn:00004848 _text$mn        segment para public 'CODE' use32
.text$mn:00004848                 assume cs:_text$mn
.text$mn:00004848                 ;org 4848h
.text$mn:00004848 ; COMDAT (pick any)
.text$mn:00004848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004848
.text$mn:00004848 ; =============== S U B R O U T I N E =======================================
.text$mn:00004848
.text$mn:00004848 ; Attributes: bp-based frame
.text$mn:00004848
.text$mn:00004848 ; int __cdecl std::_Debug_range<std::pair<int,int> *>(int, int, wchar_t *, unsigned int)
.text$mn:00004848                 public ??$_Debug_range@PAU?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@0PB_WI@Z
.text$mn:00004848 ??$_Debug_range@PAU?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@0PB_WI@Z proc near
.text$mn:00004848                                         ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00004848
.text$mn:00004848 var_1           = byte ptr -1
.text$mn:00004848 arg_0           = dword ptr  8
.text$mn:00004848 arg_4           = dword ptr  0Ch
.text$mn:00004848 arg_8           = dword ptr  10h
.text$mn:00004848 arg_C           = dword ptr  14h
.text$mn:00004848
.text$mn:00004848                 push    ebp
.text$mn:00004849                 mov     ebp, esp
.text$mn:0000484B                 push    ecx
.text$mn:0000484C                 lea     eax, [ebp+arg_0]
.text$mn:0000484F                 push    eax
.text$mn:00004850                 lea     ecx, [ebp+var_1]
.text$mn:00004853                 push    ecx
.text$mn:00004854                 call    ??$_Iter_cat@PAU?$pair@HH@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@HH@0@@Z ; std::_Iter_cat<std::pair<int,int> *>(std::pair<int,int> * const &)
.text$mn:00004859                 add     esp, 8
.text$mn:0000485C                 mov     dl, [eax]
.text$mn:0000485E                 movzx   eax, dl
.text$mn:00004861                 push    eax
.text$mn:00004862                 mov     ecx, [ebp+arg_C]
.text$mn:00004865                 push    ecx             ; unsigned int
.text$mn:00004866                 mov     edx, [ebp+arg_8]
.text$mn:00004869                 push    edx             ; wchar_t *
.text$mn:0000486A                 mov     eax, [ebp+arg_4]
.text$mn:0000486D                 push    eax             ; int
.text$mn:0000486E                 mov     ecx, [ebp+arg_0]
.text$mn:00004871                 push    ecx             ; int
.text$mn:00004872                 call    ??$_Debug_range2@PAU?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004877                 add     esp, 14h
.text$mn:0000487A                 mov     esp, ebp
.text$mn:0000487C                 pop     ebp
.text$mn:0000487D                 retn
.text$mn:0000487D ??$_Debug_range@PAU?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@0PB_WI@Z endp
.text$mn:0000487D
.text$mn:0000487D ; ---------------------------------------------------------------------------
.text$mn:0000487E                 align 10h
.text$mn:0000487E _text$mn        ends
.text$mn:0000487E
.text$mn:00004880 ; ===========================================================================
.text$mn:00004880
.text$mn:00004880 ; Segment type: Pure code
.text$mn:00004880 ; Segment permissions: Read/Execute
.text$mn:00004880 _text$mn        segment para public 'CODE' use32
.text$mn:00004880                 assume cs:_text$mn
.text$mn:00004880                 ;org 4880h
.text$mn:00004880 ; COMDAT (pick any)
.text$mn:00004880                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004880
.text$mn:00004880 ; =============== S U B R O U T I N E =======================================
.text$mn:00004880
.text$mn:00004880 ; Attributes: bp-based frame
.text$mn:00004880
.text$mn:00004880 ; int __cdecl std::_Debug_range<AssociationInfo *>(int, int, wchar_t *, unsigned int)
.text$mn:00004880                 public ??$_Debug_range@PAUAssociationInfo@@@std@@YAXPAUAssociationInfo@@0PB_WI@Z
.text$mn:00004880 ??$_Debug_range@PAUAssociationInfo@@@std@@YAXPAUAssociationInfo@@0PB_WI@Z proc near
.text$mn:00004880                                         ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00004880
.text$mn:00004880 var_1           = byte ptr -1
.text$mn:00004880 arg_0           = dword ptr  8
.text$mn:00004880 arg_4           = dword ptr  0Ch
.text$mn:00004880 arg_8           = dword ptr  10h
.text$mn:00004880 arg_C           = dword ptr  14h
.text$mn:00004880
.text$mn:00004880                 push    ebp
.text$mn:00004881                 mov     ebp, esp
.text$mn:00004883                 push    ecx
.text$mn:00004884                 lea     eax, [ebp+arg_0]
.text$mn:00004887                 push    eax
.text$mn:00004888                 lea     ecx, [ebp+var_1]
.text$mn:0000488B                 push    ecx
.text$mn:0000488C                 call    ??$_Iter_cat@PAUAssociationInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAssociationInfo@@@Z ; std::_Iter_cat<AssociationInfo *>(AssociationInfo * const &)
.text$mn:00004891                 add     esp, 8
.text$mn:00004894                 mov     dl, [eax]
.text$mn:00004896                 movzx   eax, dl
.text$mn:00004899                 push    eax
.text$mn:0000489A                 mov     ecx, [ebp+arg_C]
.text$mn:0000489D                 push    ecx             ; unsigned int
.text$mn:0000489E                 mov     edx, [ebp+arg_8]
.text$mn:000048A1                 push    edx             ; wchar_t *
.text$mn:000048A2                 mov     eax, [ebp+arg_4]
.text$mn:000048A5                 push    eax             ; int
.text$mn:000048A6                 mov     ecx, [ebp+arg_0]
.text$mn:000048A9                 push    ecx             ; int
.text$mn:000048AA                 call    ??$_Debug_range2@PAUAssociationInfo@@@std@@YAXPAUAssociationInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<AssociationInfo *>(AssociationInfo *,AssociationInfo *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:000048AF                 add     esp, 14h
.text$mn:000048B2                 mov     esp, ebp
.text$mn:000048B4                 pop     ebp
.text$mn:000048B5                 retn
.text$mn:000048B5 ??$_Debug_range@PAUAssociationInfo@@@std@@YAXPAUAssociationInfo@@0PB_WI@Z endp
.text$mn:000048B5
.text$mn:000048B5 ; ---------------------------------------------------------------------------
.text$mn:000048B6                 align 4
.text$mn:000048B6 _text$mn        ends
.text$mn:000048B6
.text$mn:000048B8 ; ===========================================================================
.text$mn:000048B8
.text$mn:000048B8 ; Segment type: Pure code
.text$mn:000048B8 ; Segment permissions: Read/Execute
.text$mn:000048B8 _text$mn        segment para public 'CODE' use32
.text$mn:000048B8                 assume cs:_text$mn
.text$mn:000048B8                 ;org 48B8h
.text$mn:000048B8 ; COMDAT (pick any)
.text$mn:000048B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048B8
.text$mn:000048B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000048B8
.text$mn:000048B8 ; Attributes: bp-based frame
.text$mn:000048B8
.text$mn:000048B8 ; int __cdecl std::_Debug_range<foundInfo *>(int, int, wchar_t *, unsigned int)
.text$mn:000048B8                 public ??$_Debug_range@PAUfoundInfo@@@std@@YAXPAUfoundInfo@@0PB_WI@Z
.text$mn:000048B8 ??$_Debug_range@PAUfoundInfo@@@std@@YAXPAUfoundInfo@@0PB_WI@Z proc near
.text$mn:000048B8                                         ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:000048B8
.text$mn:000048B8 var_1           = byte ptr -1
.text$mn:000048B8 arg_0           = dword ptr  8
.text$mn:000048B8 arg_4           = dword ptr  0Ch
.text$mn:000048B8 arg_8           = dword ptr  10h
.text$mn:000048B8 arg_C           = dword ptr  14h
.text$mn:000048B8
.text$mn:000048B8                 push    ebp
.text$mn:000048B9                 mov     ebp, esp
.text$mn:000048BB                 push    ecx
.text$mn:000048BC                 lea     eax, [ebp+arg_0]
.text$mn:000048BF                 push    eax
.text$mn:000048C0                 lea     ecx, [ebp+var_1]
.text$mn:000048C3                 push    ecx
.text$mn:000048C4                 call    ??$_Iter_cat@PAUfoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUfoundInfo@@@Z ; std::_Iter_cat<foundInfo *>(foundInfo * const &)
.text$mn:000048C9                 add     esp, 8
.text$mn:000048CC                 mov     dl, [eax]
.text$mn:000048CE                 movzx   eax, dl
.text$mn:000048D1                 push    eax
.text$mn:000048D2                 mov     ecx, [ebp+arg_C]
.text$mn:000048D5                 push    ecx             ; unsigned int
.text$mn:000048D6                 mov     edx, [ebp+arg_8]
.text$mn:000048D9                 push    edx             ; wchar_t *
.text$mn:000048DA                 mov     eax, [ebp+arg_4]
.text$mn:000048DD                 push    eax             ; int
.text$mn:000048DE                 mov     ecx, [ebp+arg_0]
.text$mn:000048E1                 push    ecx             ; int
.text$mn:000048E2                 call    ??$_Debug_range2@PAUfoundInfo@@@std@@YAXPAUfoundInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<foundInfo *>(foundInfo *,foundInfo *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:000048E7                 add     esp, 14h
.text$mn:000048EA                 mov     esp, ebp
.text$mn:000048EC                 pop     ebp
.text$mn:000048ED                 retn
.text$mn:000048ED ??$_Debug_range@PAUfoundInfo@@@std@@YAXPAUfoundInfo@@0PB_WI@Z endp
.text$mn:000048ED
.text$mn:000048ED ; ---------------------------------------------------------------------------
.text$mn:000048EE                 align 10h
.text$mn:000048EE _text$mn        ends
.text$mn:000048EE
.text$mn:000048F0 ; ===========================================================================
.text$mn:000048F0
.text$mn:000048F0 ; Segment type: Pure code
.text$mn:000048F0 ; Segment permissions: Read/Execute
.text$mn:000048F0 _text$mn        segment para public 'CODE' use32
.text$mn:000048F0                 assume cs:_text$mn
.text$mn:000048F0                 ;org 48F0h
.text$mn:000048F0 ; COMDAT (pick any)
.text$mn:000048F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048F0
.text$mn:000048F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000048F0
.text$mn:000048F0 ; Attributes: bp-based frame
.text$mn:000048F0
.text$mn:000048F0 ; int __cdecl std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:000048F0                 public ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z
.text$mn:000048F0 ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z proc near
.text$mn:000048F0                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:000048F0
.text$mn:000048F0 var_1           = byte ptr -1
.text$mn:000048F0 arg_0           = dword ptr  8
.text$mn:000048F0 arg_4           = dword ptr  0Ch
.text$mn:000048F0 arg_8           = dword ptr  10h
.text$mn:000048F0 arg_C           = dword ptr  14h
.text$mn:000048F0
.text$mn:000048F0                 push    ebp
.text$mn:000048F1                 mov     ebp, esp
.text$mn:000048F3                 push    ecx
.text$mn:000048F4                 lea     eax, [ebp+arg_0]
.text$mn:000048F7                 push    eax
.text$mn:000048F8                 lea     ecx, [ebp+var_1]
.text$mn:000048FB                 push    ecx
.text$mn:000048FC                 call    ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * const &)
.text$mn:00004901                 add     esp, 8
.text$mn:00004904                 mov     dl, [eax]
.text$mn:00004906                 movzx   eax, dl
.text$mn:00004909                 push    eax
.text$mn:0000490A                 mov     ecx, [ebp+arg_C]
.text$mn:0000490D                 push    ecx             ; unsigned int
.text$mn:0000490E                 mov     edx, [ebp+arg_8]
.text$mn:00004911                 push    edx             ; wchar_t *
.text$mn:00004912                 mov     eax, [ebp+arg_4]
.text$mn:00004915                 push    eax             ; int
.text$mn:00004916                 mov     ecx, [ebp+arg_0]
.text$mn:00004919                 push    ecx             ; int
.text$mn:0000491A                 call    ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:0000491F                 add     esp, 14h
.text$mn:00004922                 mov     esp, ebp
.text$mn:00004924                 pop     ebp
.text$mn:00004925                 retn
.text$mn:00004925 ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z endp
.text$mn:00004925
.text$mn:00004925 ; ---------------------------------------------------------------------------
.text$mn:00004926                 align 4
.text$mn:00004926 _text$mn        ends
.text$mn:00004926
.text$mn:00004928 ; ===========================================================================
.text$mn:00004928
.text$mn:00004928 ; Segment type: Pure code
.text$mn:00004928 ; Segment permissions: Read/Execute
.text$mn:00004928 _text$mn        segment para public 'CODE' use32
.text$mn:00004928                 assume cs:_text$mn
.text$mn:00004928                 ;org 4928h
.text$mn:00004928 ; COMDAT (pick any)
.text$mn:00004928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004928
.text$mn:00004928 ; =============== S U B R O U T I N E =======================================
.text$mn:00004928
.text$mn:00004928 ; Attributes: bp-based frame
.text$mn:00004928
.text$mn:00004928 ; int __cdecl std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(int, int, wchar_t *, unsigned int)
.text$mn:00004928                 public ??$_Debug_range@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z
.text$mn:00004928 ??$_Debug_range@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z proc near
.text$mn:00004928                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00004928
.text$mn:00004928 var_1           = byte ptr -1
.text$mn:00004928 arg_0           = dword ptr  8
.text$mn:00004928 arg_4           = dword ptr  0Ch
.text$mn:00004928 arg_8           = dword ptr  10h
.text$mn:00004928 arg_C           = dword ptr  14h
.text$mn:00004928
.text$mn:00004928                 push    ebp
.text$mn:00004929                 mov     ebp, esp
.text$mn:0000492B                 push    ecx
.text$mn:0000492C                 lea     eax, [ebp+arg_0]
.text$mn:0000492F                 push    eax
.text$mn:00004930                 lea     ecx, [ebp+var_1]
.text$mn:00004933                 push    ecx
.text$mn:00004934                 call    ??$_Iter_cat@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const * const &)
.text$mn:00004939                 add     esp, 8
.text$mn:0000493C                 mov     dl, [eax]
.text$mn:0000493E                 movzx   eax, dl
.text$mn:00004941                 push    eax
.text$mn:00004942                 mov     ecx, [ebp+arg_C]
.text$mn:00004945                 push    ecx             ; unsigned int
.text$mn:00004946                 mov     edx, [ebp+arg_8]
.text$mn:00004949                 push    edx             ; wchar_t *
.text$mn:0000494A                 mov     eax, [ebp+arg_4]
.text$mn:0000494D                 push    eax             ; int
.text$mn:0000494E                 mov     ecx, [ebp+arg_0]
.text$mn:00004951                 push    ecx             ; int
.text$mn:00004952                 call    ??$_Debug_range2@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:00004957                 add     esp, 14h
.text$mn:0000495A                 mov     esp, ebp
.text$mn:0000495C                 pop     ebp
.text$mn:0000495D                 retn
.text$mn:0000495D ??$_Debug_range@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z endp
.text$mn:0000495D
.text$mn:0000495D ; ---------------------------------------------------------------------------
.text$mn:0000495E                 align 10h
.text$mn:0000495E _text$mn        ends
.text$mn:0000495E
.text$mn:00004960 ; ===========================================================================
.text$mn:00004960
.text$mn:00004960 ; Segment type: Pure code
.text$mn:00004960 ; Segment permissions: Read/Execute
.text$mn:00004960 _text$mn        segment para public 'CODE' use32
.text$mn:00004960                 assume cs:_text$mn
.text$mn:00004960                 ;org 4960h
.text$mn:00004960 ; COMDAT (pick any)
.text$mn:00004960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004960
.text$mn:00004960 ; =============== S U B R O U T I N E =======================================
.text$mn:00004960
.text$mn:00004960 ; Attributes: bp-based frame
.text$mn:00004960
.text$mn:00004960 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class FunctionParser *>>>(class FunctionParser * *, class FunctionParser * *, struct std::_Wrap_alloc<class std::allocator<class FunctionParser *>> &)
.text$mn:00004960                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAXPAPAVFunctionParser@@0AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z
.text$mn:00004960 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAXPAPAVFunctionParser@@0AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z proc near
.text$mn:00004960                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Destroy(FunctionParser * *,FunctionParser * *)+21p
.text$mn:00004960
.text$mn:00004960 var_1           = byte ptr -1
.text$mn:00004960 arg_0           = dword ptr  8
.text$mn:00004960 arg_4           = dword ptr  0Ch
.text$mn:00004960 arg_8           = dword ptr  10h
.text$mn:00004960
.text$mn:00004960                 push    ebp
.text$mn:00004961                 mov     ebp, esp
.text$mn:00004963                 push    ecx
.text$mn:00004964                 mov     eax, [ebp+arg_4]
.text$mn:00004967                 push    eax
.text$mn:00004968                 mov     ecx, [ebp+arg_0]
.text$mn:0000496B                 push    ecx
.text$mn:0000496C                 call    ??$_Ptr_cat@PAVFunctionParser@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFunctionParser@@0@Z ; std::_Ptr_cat<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * *)
.text$mn:00004971                 add     esp, 8
.text$mn:00004974                 mov     [ebp+var_1], al
.text$mn:00004977                 movzx   edx, [ebp+var_1]
.text$mn:0000497B                 push    edx
.text$mn:0000497C                 mov     eax, [ebp+arg_8]
.text$mn:0000497F                 push    eax
.text$mn:00004980                 mov     ecx, [ebp+arg_4]
.text$mn:00004983                 push    ecx
.text$mn:00004984                 mov     edx, [ebp+arg_0]
.text$mn:00004987                 push    edx
.text$mn:00004988                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAXPAPAVFunctionParser@@0AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &,std::_Scalar_ptr_iterator_tag)
.text$mn:0000498D                 add     esp, 10h
.text$mn:00004990                 mov     esp, ebp
.text$mn:00004992                 pop     ebp
.text$mn:00004993                 retn
.text$mn:00004993 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAXPAPAVFunctionParser@@0AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z endp
.text$mn:00004993
.text$mn:00004993 _text$mn        ends
.text$mn:00004993
.text$mn:00004994 ; ===========================================================================
.text$mn:00004994
.text$mn:00004994 ; Segment type: Pure code
.text$mn:00004994 ; Segment permissions: Read/Execute
.text$mn:00004994 _text$mn        segment para public 'CODE' use32
.text$mn:00004994                 assume cs:_text$mn
.text$mn:00004994                 ;org 4994h
.text$mn:00004994 ; COMDAT (pick any)
.text$mn:00004994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004994
.text$mn:00004994 ; =============== S U B R O U T I N E =======================================
.text$mn:00004994
.text$mn:00004994 ; Attributes: bp-based frame
.text$mn:00004994
.text$mn:00004994 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class FunctionParser *>>>(class FunctionParser * *, class FunctionParser * *, struct std::_Wrap_alloc<class std::allocator<class FunctionParser *>> &, struct std::_Scalar_ptr_iterator_tag)
.text$mn:00004994                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAXPAPAVFunctionParser@@0AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:00004994 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAXPAPAVFunctionParser@@0AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004994                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+28p
.text$mn:00004994                 push    ebp
.text$mn:00004995                 mov     ebp, esp
.text$mn:00004997                 pop     ebp
.text$mn:00004998                 retn
.text$mn:00004998 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAXPAPAVFunctionParser@@0AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:00004998
.text$mn:00004998 ; ---------------------------------------------------------------------------
.text$mn:00004999                 align 4
.text$mn:00004999 _text$mn        ends
.text$mn:00004999
.text$mn:0000499C ; ===========================================================================
.text$mn:0000499C
.text$mn:0000499C ; Segment type: Pure code
.text$mn:0000499C ; Segment permissions: Read/Execute
.text$mn:0000499C _text$mn        segment para public 'CODE' use32
.text$mn:0000499C                 assume cs:_text$mn
.text$mn:0000499C                 ;org 499Ch
.text$mn:0000499C ; COMDAT (pick any)
.text$mn:0000499C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000499C
.text$mn:0000499C ; =============== S U B R O U T I N E =======================================
.text$mn:0000499C
.text$mn:0000499C ; Attributes: bp-based frame
.text$mn:0000499C
.text$mn:0000499C ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>>>(struct std::pair<int, int> *, struct std::pair<int, int> *, struct std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>> &)
.text$mn:0000499C                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@@std@@YAXPAU?$pair@HH@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z
.text$mn:0000499C ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@@std@@YAXPAU?$pair@HH@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z proc near
.text$mn:0000499C                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Destroy(std::pair<int,int> *,std::pair<int,int> *)+21p
.text$mn:0000499C
.text$mn:0000499C var_1           = byte ptr -1
.text$mn:0000499C arg_0           = dword ptr  8
.text$mn:0000499C arg_4           = dword ptr  0Ch
.text$mn:0000499C arg_8           = dword ptr  10h
.text$mn:0000499C
.text$mn:0000499C                 push    ebp
.text$mn:0000499D                 mov     ebp, esp
.text$mn:0000499F                 push    ecx
.text$mn:000049A0                 mov     eax, [ebp+arg_4]
.text$mn:000049A3                 push    eax
.text$mn:000049A4                 mov     ecx, [ebp+arg_0]
.text$mn:000049A7                 push    ecx
.text$mn:000049A8                 call    ??$_Ptr_cat@U?$pair@HH@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@HH@0@0@Z ; std::_Ptr_cat<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *)
.text$mn:000049AD                 add     esp, 8
.text$mn:000049B0                 mov     [ebp+var_1], al
.text$mn:000049B3                 movzx   edx, [ebp+var_1]
.text$mn:000049B7                 push    edx
.text$mn:000049B8                 mov     eax, [ebp+arg_8]
.text$mn:000049BB                 push    eax
.text$mn:000049BC                 mov     ecx, [ebp+arg_4]
.text$mn:000049BF                 push    ecx
.text$mn:000049C0                 mov     edx, [ebp+arg_0]
.text$mn:000049C3                 push    edx
.text$mn:000049C4                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@@std@@YAXPAU?$pair@HH@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000049C9                 add     esp, 10h
.text$mn:000049CC                 mov     esp, ebp
.text$mn:000049CE                 pop     ebp
.text$mn:000049CF                 retn
.text$mn:000049CF ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@@std@@YAXPAU?$pair@HH@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z endp
.text$mn:000049CF
.text$mn:000049CF _text$mn        ends
.text$mn:000049CF
.text$mn:000049D0 ; ===========================================================================
.text$mn:000049D0
.text$mn:000049D0 ; Segment type: Pure code
.text$mn:000049D0 ; Segment permissions: Read/Execute
.text$mn:000049D0 _text$mn        segment para public 'CODE' use32
.text$mn:000049D0                 assume cs:_text$mn
.text$mn:000049D0                 ;org 49D0h
.text$mn:000049D0 ; COMDAT (pick any)
.text$mn:000049D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049D0
.text$mn:000049D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000049D0
.text$mn:000049D0 ; Attributes: bp-based frame
.text$mn:000049D0
.text$mn:000049D0 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>>>(struct std::pair<int, int> *, struct std::pair<int, int> *, struct std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:000049D0                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@@std@@YAXPAU?$pair@HH@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000049D0 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@@std@@YAXPAU?$pair@HH@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000049D0                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+28p
.text$mn:000049D0
.text$mn:000049D0 arg_0           = dword ptr  8
.text$mn:000049D0 arg_4           = dword ptr  0Ch
.text$mn:000049D0 arg_8           = dword ptr  10h
.text$mn:000049D0
.text$mn:000049D0                 push    ebp
.text$mn:000049D1                 mov     ebp, esp
.text$mn:000049D3                 jmp     short loc_49DE
.text$mn:000049D5 ; ---------------------------------------------------------------------------
.text$mn:000049D5
.text$mn:000049D5 loc_49D5:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:000049D5                 mov     eax, [ebp+arg_0]
.text$mn:000049D8                 add     eax, 8
.text$mn:000049DB                 mov     [ebp+arg_0], eax
.text$mn:000049DE
.text$mn:000049DE loc_49DE:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:000049DE                 mov     ecx, [ebp+arg_0]
.text$mn:000049E1                 cmp     ecx, [ebp+arg_4]
.text$mn:000049E4                 jz      short loc_49F4
.text$mn:000049E6                 mov     edx, [ebp+arg_0]
.text$mn:000049E9                 push    edx
.text$mn:000049EA                 mov     ecx, [ebp+arg_8]
.text$mn:000049ED                 call    ??$destroy@U?$pair@HH@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::destroy<std::pair<int,int>>(std::pair<int,int> *)
.text$mn:000049F2                 jmp     short loc_49D5
.text$mn:000049F4 ; ---------------------------------------------------------------------------
.text$mn:000049F4
.text$mn:000049F4 loc_49F4:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:000049F4                 pop     ebp
.text$mn:000049F5                 retn
.text$mn:000049F5 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@@std@@YAXPAU?$pair@HH@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:000049F5
.text$mn:000049F5 ; ---------------------------------------------------------------------------
.text$mn:000049F6                 align 4
.text$mn:000049F6 _text$mn        ends
.text$mn:000049F6
.text$mn:000049F8 ; ===========================================================================
.text$mn:000049F8
.text$mn:000049F8 ; Segment type: Pure code
.text$mn:000049F8 ; Segment permissions: Read/Execute
.text$mn:000049F8 _text$mn        segment para public 'CODE' use32
.text$mn:000049F8                 assume cs:_text$mn
.text$mn:000049F8                 ;org 49F8h
.text$mn:000049F8 ; COMDAT (pick any)
.text$mn:000049F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049F8
.text$mn:000049F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000049F8
.text$mn:000049F8 ; Attributes: bp-based frame
.text$mn:000049F8
.text$mn:000049F8 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct AssociationInfo>>>(struct AssociationInfo *, struct AssociationInfo *, struct std::_Wrap_alloc<class std::allocator<struct AssociationInfo>> &)
.text$mn:000049F8                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAXPAUAssociationInfo@@0AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z
.text$mn:000049F8 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAXPAUAssociationInfo@@0AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z proc near
.text$mn:000049F8                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Destroy(AssociationInfo *,AssociationInfo *)+21p
.text$mn:000049F8
.text$mn:000049F8 var_1           = byte ptr -1
.text$mn:000049F8 arg_0           = dword ptr  8
.text$mn:000049F8 arg_4           = dword ptr  0Ch
.text$mn:000049F8 arg_8           = dword ptr  10h
.text$mn:000049F8
.text$mn:000049F8                 push    ebp
.text$mn:000049F9                 mov     ebp, esp
.text$mn:000049FB                 push    ecx
.text$mn:000049FC                 mov     eax, [ebp+arg_4]
.text$mn:000049FF                 push    eax
.text$mn:00004A00                 mov     ecx, [ebp+arg_0]
.text$mn:00004A03                 push    ecx
.text$mn:00004A04                 call    ??$_Ptr_cat@UAssociationInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAssociationInfo@@0@Z ; std::_Ptr_cat<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo *)
.text$mn:00004A09                 add     esp, 8
.text$mn:00004A0C                 mov     [ebp+var_1], al
.text$mn:00004A0F                 movzx   edx, [ebp+var_1]
.text$mn:00004A13                 push    edx
.text$mn:00004A14                 mov     eax, [ebp+arg_8]
.text$mn:00004A17                 push    eax
.text$mn:00004A18                 mov     ecx, [ebp+arg_4]
.text$mn:00004A1B                 push    ecx
.text$mn:00004A1C                 mov     edx, [ebp+arg_0]
.text$mn:00004A1F                 push    edx
.text$mn:00004A20                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAXPAUAssociationInfo@@0AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004A25                 add     esp, 10h
.text$mn:00004A28                 mov     esp, ebp
.text$mn:00004A2A                 pop     ebp
.text$mn:00004A2B                 retn
.text$mn:00004A2B ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAXPAUAssociationInfo@@0AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z endp
.text$mn:00004A2B
.text$mn:00004A2B _text$mn        ends
.text$mn:00004A2B
.text$mn:00004A2C ; ===========================================================================
.text$mn:00004A2C
.text$mn:00004A2C ; Segment type: Pure code
.text$mn:00004A2C ; Segment permissions: Read/Execute
.text$mn:00004A2C _text$mn        segment para public 'CODE' use32
.text$mn:00004A2C                 assume cs:_text$mn
.text$mn:00004A2C                 ;org 4A2Ch
.text$mn:00004A2C ; COMDAT (pick any)
.text$mn:00004A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A2C
.text$mn:00004A2C ; =============== S U B R O U T I N E =======================================
.text$mn:00004A2C
.text$mn:00004A2C ; Attributes: bp-based frame
.text$mn:00004A2C
.text$mn:00004A2C ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct AssociationInfo>>>(struct AssociationInfo *, struct AssociationInfo *, struct std::_Wrap_alloc<class std::allocator<struct AssociationInfo>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004A2C                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAXPAUAssociationInfo@@0AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004A2C ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAXPAUAssociationInfo@@0AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004A2C                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+28p
.text$mn:00004A2C
.text$mn:00004A2C arg_0           = dword ptr  8
.text$mn:00004A2C arg_4           = dword ptr  0Ch
.text$mn:00004A2C arg_8           = dword ptr  10h
.text$mn:00004A2C
.text$mn:00004A2C                 push    ebp
.text$mn:00004A2D                 mov     ebp, esp
.text$mn:00004A2F                 jmp     short loc_4A3A
.text$mn:00004A31 ; ---------------------------------------------------------------------------
.text$mn:00004A31
.text$mn:00004A31 loc_4A31:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00004A31                 mov     eax, [ebp+arg_0]
.text$mn:00004A34                 add     eax, 40h ; '@'
.text$mn:00004A37                 mov     [ebp+arg_0], eax
.text$mn:00004A3A
.text$mn:00004A3A loc_4A3A:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00004A3A                 mov     ecx, [ebp+arg_0]
.text$mn:00004A3D                 cmp     ecx, [ebp+arg_4]
.text$mn:00004A40                 jz      short loc_4A50
.text$mn:00004A42                 mov     edx, [ebp+arg_0]
.text$mn:00004A45                 push    edx
.text$mn:00004A46                 mov     ecx, [ebp+arg_8]
.text$mn:00004A49                 call    ??$destroy@UAssociationInfo@@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::destroy<AssociationInfo>(AssociationInfo *)
.text$mn:00004A4E                 jmp     short loc_4A31
.text$mn:00004A50 ; ---------------------------------------------------------------------------
.text$mn:00004A50
.text$mn:00004A50 loc_4A50:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00004A50                 pop     ebp
.text$mn:00004A51                 retn
.text$mn:00004A51 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAXPAUAssociationInfo@@0AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00004A51
.text$mn:00004A51 ; ---------------------------------------------------------------------------
.text$mn:00004A52                 align 4
.text$mn:00004A52 _text$mn        ends
.text$mn:00004A52
.text$mn:00004A54 ; ===========================================================================
.text$mn:00004A54
.text$mn:00004A54 ; Segment type: Pure code
.text$mn:00004A54 ; Segment permissions: Read/Execute
.text$mn:00004A54 _text$mn        segment para public 'CODE' use32
.text$mn:00004A54                 assume cs:_text$mn
.text$mn:00004A54                 ;org 4A54h
.text$mn:00004A54 ; COMDAT (pick any)
.text$mn:00004A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A54
.text$mn:00004A54 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A54
.text$mn:00004A54 ; Attributes: bp-based frame
.text$mn:00004A54
.text$mn:00004A54 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct foundInfo>>>(struct foundInfo *, struct foundInfo *, struct std::_Wrap_alloc<class std::allocator<struct foundInfo>> &)
.text$mn:00004A54                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z
.text$mn:00004A54 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z proc near
.text$mn:00004A54                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Destroy(foundInfo *,foundInfo *)+21p
.text$mn:00004A54
.text$mn:00004A54 var_1           = byte ptr -1
.text$mn:00004A54 arg_0           = dword ptr  8
.text$mn:00004A54 arg_4           = dword ptr  0Ch
.text$mn:00004A54 arg_8           = dword ptr  10h
.text$mn:00004A54
.text$mn:00004A54                 push    ebp
.text$mn:00004A55                 mov     ebp, esp
.text$mn:00004A57                 push    ecx
.text$mn:00004A58                 mov     eax, [ebp+arg_4]
.text$mn:00004A5B                 push    eax
.text$mn:00004A5C                 mov     ecx, [ebp+arg_0]
.text$mn:00004A5F                 push    ecx
.text$mn:00004A60                 call    ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z ; std::_Ptr_cat<foundInfo,foundInfo>(foundInfo *,foundInfo *)
.text$mn:00004A65                 add     esp, 8
.text$mn:00004A68                 mov     [ebp+var_1], al
.text$mn:00004A6B                 movzx   edx, [ebp+var_1]
.text$mn:00004A6F                 push    edx
.text$mn:00004A70                 mov     eax, [ebp+arg_8]
.text$mn:00004A73                 push    eax
.text$mn:00004A74                 mov     ecx, [ebp+arg_4]
.text$mn:00004A77                 push    ecx
.text$mn:00004A78                 mov     edx, [ebp+arg_0]
.text$mn:00004A7B                 push    edx
.text$mn:00004A7C                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004A81                 add     esp, 10h
.text$mn:00004A84                 mov     esp, ebp
.text$mn:00004A86                 pop     ebp
.text$mn:00004A87                 retn
.text$mn:00004A87 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z endp
.text$mn:00004A87
.text$mn:00004A87 _text$mn        ends
.text$mn:00004A87
.text$mn:00004A88 ; ===========================================================================
.text$mn:00004A88
.text$mn:00004A88 ; Segment type: Pure code
.text$mn:00004A88 ; Segment permissions: Read/Execute
.text$mn:00004A88 _text$mn        segment para public 'CODE' use32
.text$mn:00004A88                 assume cs:_text$mn
.text$mn:00004A88                 ;org 4A88h
.text$mn:00004A88 ; COMDAT (pick any)
.text$mn:00004A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A88
.text$mn:00004A88 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A88
.text$mn:00004A88 ; Attributes: bp-based frame
.text$mn:00004A88
.text$mn:00004A88 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct foundInfo>>>(struct foundInfo *, struct foundInfo *, struct std::_Wrap_alloc<class std::allocator<struct foundInfo>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004A88                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004A88 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004A88                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+28p
.text$mn:00004A88
.text$mn:00004A88 arg_0           = dword ptr  8
.text$mn:00004A88 arg_4           = dword ptr  0Ch
.text$mn:00004A88 arg_8           = dword ptr  10h
.text$mn:00004A88
.text$mn:00004A88                 push    ebp
.text$mn:00004A89                 mov     ebp, esp
.text$mn:00004A8B                 jmp     short loc_4A96
.text$mn:00004A8D ; ---------------------------------------------------------------------------
.text$mn:00004A8D
.text$mn:00004A8D loc_4A8D:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00004A8D                 mov     eax, [ebp+arg_0]
.text$mn:00004A90                 add     eax, 40h ; '@'
.text$mn:00004A93                 mov     [ebp+arg_0], eax
.text$mn:00004A96
.text$mn:00004A96 loc_4A96:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00004A96                 mov     ecx, [ebp+arg_0]
.text$mn:00004A99                 cmp     ecx, [ebp+arg_4]
.text$mn:00004A9C                 jz      short loc_4AAC
.text$mn:00004A9E                 mov     edx, [ebp+arg_0]
.text$mn:00004AA1                 push    edx
.text$mn:00004AA2                 mov     ecx, [ebp+arg_8]
.text$mn:00004AA5                 call    ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::destroy<foundInfo>(foundInfo *)
.text$mn:00004AAA                 jmp     short loc_4A8D
.text$mn:00004AAC ; ---------------------------------------------------------------------------
.text$mn:00004AAC
.text$mn:00004AAC loc_4AAC:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00004AAC                 pop     ebp
.text$mn:00004AAD                 retn
.text$mn:00004AAD ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00004AAD
.text$mn:00004AAD ; ---------------------------------------------------------------------------
.text$mn:00004AAE                 align 10h
.text$mn:00004AAE _text$mn        ends
.text$mn:00004AAE
.text$mn:00004AB0 ; ===========================================================================
.text$mn:00004AB0
.text$mn:00004AB0 ; Segment type: Pure code
.text$mn:00004AB0 ; Segment permissions: Read/Execute
.text$mn:00004AB0 _text$mn        segment para public 'CODE' use32
.text$mn:00004AB0                 assume cs:_text$mn
.text$mn:00004AB0                 ;org 4AB0h
.text$mn:00004AB0 ; COMDAT (pick any)
.text$mn:00004AB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AB0
.text$mn:00004AB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AB0
.text$mn:00004AB0 ; Attributes: bp-based frame
.text$mn:00004AB0
.text$mn:00004AB0 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:00004AB0                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00004AB0 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00004AB0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+21p
.text$mn:00004AB0
.text$mn:00004AB0 var_1           = byte ptr -1
.text$mn:00004AB0 arg_0           = dword ptr  8
.text$mn:00004AB0 arg_4           = dword ptr  0Ch
.text$mn:00004AB0 arg_8           = dword ptr  10h
.text$mn:00004AB0
.text$mn:00004AB0                 push    ebp
.text$mn:00004AB1                 mov     ebp, esp
.text$mn:00004AB3                 push    ecx
.text$mn:00004AB4                 mov     eax, [ebp+arg_4]
.text$mn:00004AB7                 push    eax
.text$mn:00004AB8                 mov     ecx, [ebp+arg_0]
.text$mn:00004ABB                 push    ecx
.text$mn:00004ABC                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00004AC1                 add     esp, 8
.text$mn:00004AC4                 mov     [ebp+var_1], al
.text$mn:00004AC7                 movzx   edx, [ebp+var_1]
.text$mn:00004ACB                 push    edx
.text$mn:00004ACC                 mov     eax, [ebp+arg_8]
.text$mn:00004ACF                 push    eax
.text$mn:00004AD0                 mov     ecx, [ebp+arg_4]
.text$mn:00004AD3                 push    ecx
.text$mn:00004AD4                 mov     edx, [ebp+arg_0]
.text$mn:00004AD7                 push    edx
.text$mn:00004AD8                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004ADD                 add     esp, 10h
.text$mn:00004AE0                 mov     esp, ebp
.text$mn:00004AE2                 pop     ebp
.text$mn:00004AE3                 retn
.text$mn:00004AE3 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00004AE3
.text$mn:00004AE3 _text$mn        ends
.text$mn:00004AE3
.text$mn:00004AE4 ; ===========================================================================
.text$mn:00004AE4
.text$mn:00004AE4 ; Segment type: Pure code
.text$mn:00004AE4 ; Segment permissions: Read/Execute
.text$mn:00004AE4 _text$mn        segment para public 'CODE' use32
.text$mn:00004AE4                 assume cs:_text$mn
.text$mn:00004AE4                 ;org 4AE4h
.text$mn:00004AE4 ; COMDAT (pick any)
.text$mn:00004AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AE4
.text$mn:00004AE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004AE4
.text$mn:00004AE4 ; Attributes: bp-based frame
.text$mn:00004AE4
.text$mn:00004AE4 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004AE4                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004AE4 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004AE4                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+28p
.text$mn:00004AE4
.text$mn:00004AE4 arg_0           = dword ptr  8
.text$mn:00004AE4 arg_4           = dword ptr  0Ch
.text$mn:00004AE4 arg_8           = dword ptr  10h
.text$mn:00004AE4
.text$mn:00004AE4                 push    ebp
.text$mn:00004AE5                 mov     ebp, esp
.text$mn:00004AE7                 jmp     short loc_4AF2
.text$mn:00004AE9 ; ---------------------------------------------------------------------------
.text$mn:00004AE9
.text$mn:00004AE9 loc_4AE9:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00004AE9                 mov     eax, [ebp+arg_0]
.text$mn:00004AEC                 add     eax, 1Ch
.text$mn:00004AEF                 mov     [ebp+arg_0], eax
.text$mn:00004AF2
.text$mn:00004AF2 loc_4AF2:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00004AF2                 mov     ecx, [ebp+arg_0]
.text$mn:00004AF5                 cmp     ecx, [ebp+arg_4]
.text$mn:00004AF8                 jz      short loc_4B08
.text$mn:00004AFA                 mov     edx, [ebp+arg_0]
.text$mn:00004AFD                 push    edx
.text$mn:00004AFE                 mov     ecx, [ebp+arg_8]
.text$mn:00004B01                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00004B06                 jmp     short loc_4AE9
.text$mn:00004B08 ; ---------------------------------------------------------------------------
.text$mn:00004B08
.text$mn:00004B08 loc_4B08:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00004B08                 pop     ebp
.text$mn:00004B09                 retn
.text$mn:00004B09 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00004B09
.text$mn:00004B09 ; ---------------------------------------------------------------------------
.text$mn:00004B0A                 align 4
.text$mn:00004B0A _text$mn        ends
.text$mn:00004B0A
.text$mn:00004B0C ; ===========================================================================
.text$mn:00004B0C
.text$mn:00004B0C ; Segment type: Pure code
.text$mn:00004B0C ; Segment permissions: Read/Execute
.text$mn:00004B0C _text$mn        segment para public 'CODE' use32
.text$mn:00004B0C                 assume cs:_text$mn
.text$mn:00004B0C                 ;org 4B0Ch
.text$mn:00004B0C ; COMDAT (pick any)
.text$mn:00004B0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B0C
.text$mn:00004B0C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B0C
.text$mn:00004B0C ; Attributes: bp-based frame
.text$mn:00004B0C
.text$mn:00004B0C ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class FunctionParser * *>(class FunctionParser * * const &)
.text$mn:00004B0C                 public ??$_Iter_cat@PAPAVFunctionParser@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFunctionParser@@@Z
.text$mn:00004B0C ??$_Iter_cat@PAPAVFunctionParser@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFunctionParser@@@Z proc near
.text$mn:00004B0C                                         ; CODE XREF: std::_Debug_range<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint)+Cp
.text$mn:00004B0C
.text$mn:00004B0C var_1           = byte ptr -1
.text$mn:00004B0C arg_0           = dword ptr  8
.text$mn:00004B0C
.text$mn:00004B0C                 push    ebp
.text$mn:00004B0D                 mov     ebp, esp
.text$mn:00004B0F                 push    ecx
.text$mn:00004B10                 mov     eax, [ebp+arg_0]
.text$mn:00004B13                 mov     cl, [ebp+var_1]
.text$mn:00004B16                 mov     [eax], cl
.text$mn:00004B18                 mov     eax, [ebp+arg_0]
.text$mn:00004B1B                 mov     esp, ebp
.text$mn:00004B1D                 pop     ebp
.text$mn:00004B1E                 retn
.text$mn:00004B1E ??$_Iter_cat@PAPAVFunctionParser@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVFunctionParser@@@Z endp
.text$mn:00004B1E
.text$mn:00004B1E ; ---------------------------------------------------------------------------
.text$mn:00004B1F                 align 10h
.text$mn:00004B1F _text$mn        ends
.text$mn:00004B1F
.text$mn:00004B20 ; ===========================================================================
.text$mn:00004B20
.text$mn:00004B20 ; Segment type: Pure code
.text$mn:00004B20 ; Segment permissions: Read/Execute
.text$mn:00004B20 _text$mn        segment para public 'CODE' use32
.text$mn:00004B20                 assume cs:_text$mn
.text$mn:00004B20                 ;org 4B20h
.text$mn:00004B20 ; COMDAT (pick any)
.text$mn:00004B20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B20
.text$mn:00004B20 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B20
.text$mn:00004B20 ; Attributes: bp-based frame
.text$mn:00004B20
.text$mn:00004B20 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct std::pair<int, int> *>(struct std::pair<int, int> * const &)
.text$mn:00004B20                 public ??$_Iter_cat@PAU?$pair@HH@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@HH@0@@Z
.text$mn:00004B20 ??$_Iter_cat@PAU?$pair@HH@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@HH@0@@Z proc near
.text$mn:00004B20                                         ; CODE XREF: std::_Debug_range<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint)+Cp
.text$mn:00004B20
.text$mn:00004B20 var_1           = byte ptr -1
.text$mn:00004B20 arg_0           = dword ptr  8
.text$mn:00004B20
.text$mn:00004B20                 push    ebp
.text$mn:00004B21                 mov     ebp, esp
.text$mn:00004B23                 push    ecx
.text$mn:00004B24                 mov     eax, [ebp+arg_0]
.text$mn:00004B27                 mov     cl, [ebp+var_1]
.text$mn:00004B2A                 mov     [eax], cl
.text$mn:00004B2C                 mov     eax, [ebp+arg_0]
.text$mn:00004B2F                 mov     esp, ebp
.text$mn:00004B31                 pop     ebp
.text$mn:00004B32                 retn
.text$mn:00004B32 ??$_Iter_cat@PAU?$pair@HH@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@HH@0@@Z endp
.text$mn:00004B32
.text$mn:00004B32 ; ---------------------------------------------------------------------------
.text$mn:00004B33                 align 4
.text$mn:00004B33 _text$mn        ends
.text$mn:00004B33
.text$mn:00004B34 ; ===========================================================================
.text$mn:00004B34
.text$mn:00004B34 ; Segment type: Pure code
.text$mn:00004B34 ; Segment permissions: Read/Execute
.text$mn:00004B34 _text$mn        segment para public 'CODE' use32
.text$mn:00004B34                 assume cs:_text$mn
.text$mn:00004B34                 ;org 4B34h
.text$mn:00004B34 ; COMDAT (pick any)
.text$mn:00004B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B34
.text$mn:00004B34 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B34
.text$mn:00004B34 ; Attributes: bp-based frame
.text$mn:00004B34
.text$mn:00004B34 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct AssociationInfo *>(struct AssociationInfo * const &)
.text$mn:00004B34                 public ??$_Iter_cat@PAUAssociationInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAssociationInfo@@@Z
.text$mn:00004B34 ??$_Iter_cat@PAUAssociationInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAssociationInfo@@@Z proc near
.text$mn:00004B34                                         ; CODE XREF: std::_Debug_range<AssociationInfo *>(AssociationInfo *,AssociationInfo *,wchar_t const *,uint)+Cp
.text$mn:00004B34
.text$mn:00004B34 var_1           = byte ptr -1
.text$mn:00004B34 arg_0           = dword ptr  8
.text$mn:00004B34
.text$mn:00004B34                 push    ebp
.text$mn:00004B35                 mov     ebp, esp
.text$mn:00004B37                 push    ecx
.text$mn:00004B38                 mov     eax, [ebp+arg_0]
.text$mn:00004B3B                 mov     cl, [ebp+var_1]
.text$mn:00004B3E                 mov     [eax], cl
.text$mn:00004B40                 mov     eax, [ebp+arg_0]
.text$mn:00004B43                 mov     esp, ebp
.text$mn:00004B45                 pop     ebp
.text$mn:00004B46                 retn
.text$mn:00004B46 ??$_Iter_cat@PAUAssociationInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUAssociationInfo@@@Z endp
.text$mn:00004B46
.text$mn:00004B46 ; ---------------------------------------------------------------------------
.text$mn:00004B47                 align 4
.text$mn:00004B47 _text$mn        ends
.text$mn:00004B47
.text$mn:00004B48 ; ===========================================================================
.text$mn:00004B48
.text$mn:00004B48 ; Segment type: Pure code
.text$mn:00004B48 ; Segment permissions: Read/Execute
.text$mn:00004B48 _text$mn        segment para public 'CODE' use32
.text$mn:00004B48                 assume cs:_text$mn
.text$mn:00004B48                 ;org 4B48h
.text$mn:00004B48 ; COMDAT (pick any)
.text$mn:00004B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B48
.text$mn:00004B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B48
.text$mn:00004B48 ; Attributes: bp-based frame
.text$mn:00004B48
.text$mn:00004B48 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct foundInfo *>(struct foundInfo * const &)
.text$mn:00004B48                 public ??$_Iter_cat@PAUfoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUfoundInfo@@@Z
.text$mn:00004B48 ??$_Iter_cat@PAUfoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUfoundInfo@@@Z proc near
.text$mn:00004B48                                         ; CODE XREF: std::_Debug_range<foundInfo *>(foundInfo *,foundInfo *,wchar_t const *,uint)+Cp
.text$mn:00004B48
.text$mn:00004B48 var_1           = byte ptr -1
.text$mn:00004B48 arg_0           = dword ptr  8
.text$mn:00004B48
.text$mn:00004B48                 push    ebp
.text$mn:00004B49                 mov     ebp, esp
.text$mn:00004B4B                 push    ecx
.text$mn:00004B4C                 mov     eax, [ebp+arg_0]
.text$mn:00004B4F                 mov     cl, [ebp+var_1]
.text$mn:00004B52                 mov     [eax], cl
.text$mn:00004B54                 mov     eax, [ebp+arg_0]
.text$mn:00004B57                 mov     esp, ebp
.text$mn:00004B59                 pop     ebp
.text$mn:00004B5A                 retn
.text$mn:00004B5A ??$_Iter_cat@PAUfoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUfoundInfo@@@Z endp
.text$mn:00004B5A
.text$mn:00004B5A ; ---------------------------------------------------------------------------
.text$mn:00004B5B                 align 4
.text$mn:00004B5B _text$mn        ends
.text$mn:00004B5B
.text$mn:00004B5C ; ===========================================================================
.text$mn:00004B5C
.text$mn:00004B5C ; Segment type: Pure code
.text$mn:00004B5C ; Segment permissions: Read/Execute
.text$mn:00004B5C _text$mn        segment para public 'CODE' use32
.text$mn:00004B5C                 assume cs:_text$mn
.text$mn:00004B5C                 ;org 4B5Ch
.text$mn:00004B5C ; COMDAT (pick any)
.text$mn:00004B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B5C
.text$mn:00004B5C ; =============== S U B R O U T I N E =======================================
.text$mn:00004B5C
.text$mn:00004B5C ; Attributes: bp-based frame
.text$mn:00004B5C
.text$mn:00004B5C ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * const &)
.text$mn:00004B5C                 public ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00004B5C ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:00004B5C                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+Cp
.text$mn:00004B5C
.text$mn:00004B5C var_1           = byte ptr -1
.text$mn:00004B5C arg_0           = dword ptr  8
.text$mn:00004B5C
.text$mn:00004B5C                 push    ebp
.text$mn:00004B5D                 mov     ebp, esp
.text$mn:00004B5F                 push    ecx
.text$mn:00004B60                 mov     eax, [ebp+arg_0]
.text$mn:00004B63                 mov     cl, [ebp+var_1]
.text$mn:00004B66                 mov     [eax], cl
.text$mn:00004B68                 mov     eax, [ebp+arg_0]
.text$mn:00004B6B                 mov     esp, ebp
.text$mn:00004B6D                 pop     ebp
.text$mn:00004B6E                 retn
.text$mn:00004B6E ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:00004B6E
.text$mn:00004B6E ; ---------------------------------------------------------------------------
.text$mn:00004B6F                 align 10h
.text$mn:00004B6F _text$mn        ends
.text$mn:00004B6F
.text$mn:00004B70 ; ===========================================================================
.text$mn:00004B70
.text$mn:00004B70 ; Segment type: Pure code
.text$mn:00004B70 ; Segment permissions: Read/Execute
.text$mn:00004B70 _text$mn        segment para public 'CODE' use32
.text$mn:00004B70                 assume cs:_text$mn
.text$mn:00004B70                 ;org 4B70h
.text$mn:00004B70 ; COMDAT (pick any)
.text$mn:00004B70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B70
.text$mn:00004B70 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B70
.text$mn:00004B70 ; Attributes: bp-based frame
.text$mn:00004B70
.text$mn:00004B70 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const * const &)
.text$mn:00004B70                 public ??$_Iter_cat@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00004B70 ??$_Iter_cat@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:00004B70                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)+Cp
.text$mn:00004B70
.text$mn:00004B70 var_1           = byte ptr -1
.text$mn:00004B70 arg_0           = dword ptr  8
.text$mn:00004B70
.text$mn:00004B70                 push    ebp
.text$mn:00004B71                 mov     ebp, esp
.text$mn:00004B73                 push    ecx
.text$mn:00004B74                 mov     eax, [ebp+arg_0]
.text$mn:00004B77                 mov     cl, [ebp+var_1]
.text$mn:00004B7A                 mov     [eax], cl
.text$mn:00004B7C                 mov     eax, [ebp+arg_0]
.text$mn:00004B7F                 mov     esp, ebp
.text$mn:00004B81                 pop     ebp
.text$mn:00004B82                 retn
.text$mn:00004B82 ??$_Iter_cat@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:00004B82
.text$mn:00004B82 ; ---------------------------------------------------------------------------
.text$mn:00004B83                 align 4
.text$mn:00004B83 _text$mn        ends
.text$mn:00004B83
.text$mn:00004B84 ; ===========================================================================
.text$mn:00004B84
.text$mn:00004B84 ; Segment type: Pure code
.text$mn:00004B84 ; Segment permissions: Read/Execute
.text$mn:00004B84 _text$mn        segment para public 'CODE' use32
.text$mn:00004B84                 assume cs:_text$mn
.text$mn:00004B84                 ;org 4B84h
.text$mn:00004B84 ; COMDAT (pick any)
.text$mn:00004B84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B84
.text$mn:00004B84 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B84
.text$mn:00004B84 ; Attributes: bp-based frame
.text$mn:00004B84
.text$mn:00004B84 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004B84                 public ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z
.text$mn:00004B84 ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z proc near
.text$mn:00004B84                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+82p
.text$mn:00004B84
.text$mn:00004B84 var_1           = byte ptr -1
.text$mn:00004B84 arg_0           = dword ptr  8
.text$mn:00004B84 arg_4           = dword ptr  0Ch
.text$mn:00004B84 arg_8           = dword ptr  10h
.text$mn:00004B84
.text$mn:00004B84                 push    ebp
.text$mn:00004B85                 mov     ebp, esp
.text$mn:00004B87                 push    ecx
.text$mn:00004B88                 mov     eax, [ebp+arg_8]
.text$mn:00004B8B                 push    eax
.text$mn:00004B8C                 mov     ecx, [ebp+arg_0]
.text$mn:00004B8F                 push    ecx
.text$mn:00004B90                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00004B95                 add     esp, 8
.text$mn:00004B98                 mov     [ebp+var_1], al
.text$mn:00004B9B                 movzx   edx, [ebp+var_1]
.text$mn:00004B9F                 push    edx
.text$mn:00004BA0                 mov     eax, [ebp+arg_8]
.text$mn:00004BA3                 push    eax
.text$mn:00004BA4                 mov     ecx, [ebp+arg_4]
.text$mn:00004BA7                 push    ecx
.text$mn:00004BA8                 mov     edx, [ebp+arg_0]
.text$mn:00004BAB                 push    edx
.text$mn:00004BAC                 call    ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004BB1                 add     esp, 10h
.text$mn:00004BB4                 mov     esp, ebp
.text$mn:00004BB6                 pop     ebp
.text$mn:00004BB7                 retn
.text$mn:00004BB7 ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z endp
.text$mn:00004BB7
.text$mn:00004BB7 _text$mn        ends
.text$mn:00004BB7
.text$mn:00004BB8 ; ===========================================================================
.text$mn:00004BB8
.text$mn:00004BB8 ; Segment type: Pure code
.text$mn:00004BB8 ; Segment permissions: Read/Execute
.text$mn:00004BB8 _text$mn        segment para public 'CODE' use32
.text$mn:00004BB8                 assume cs:_text$mn
.text$mn:00004BB8                 ;org 4BB8h
.text$mn:00004BB8 ; COMDAT (pick any)
.text$mn:00004BB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BB8
.text$mn:00004BB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BB8
.text$mn:00004BB8 ; Attributes: bp-based frame
.text$mn:00004BB8
.text$mn:00004BB8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004BB8                 public ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004BB8 ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004BB8                                         ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+28p
.text$mn:00004BB8
.text$mn:00004BB8 arg_0           = dword ptr  8
.text$mn:00004BB8 arg_4           = dword ptr  0Ch
.text$mn:00004BB8 arg_8           = dword ptr  10h
.text$mn:00004BB8
.text$mn:00004BB8                 push    ebp
.text$mn:00004BB9                 mov     ebp, esp
.text$mn:00004BBB                 jmp     short loc_4BCF
.text$mn:00004BBD ; ---------------------------------------------------------------------------
.text$mn:00004BBD
.text$mn:00004BBD loc_4BBD:                               ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+34j
.text$mn:00004BBD                 mov     eax, [ebp+arg_8]
.text$mn:00004BC0                 add     eax, 1Ch
.text$mn:00004BC3                 mov     [ebp+arg_8], eax
.text$mn:00004BC6                 mov     ecx, [ebp+arg_0]
.text$mn:00004BC9                 add     ecx, 1Ch
.text$mn:00004BCC                 mov     [ebp+arg_0], ecx
.text$mn:00004BCF
.text$mn:00004BCF loc_4BCF:                               ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00004BCF                 mov     edx, [ebp+arg_0]
.text$mn:00004BD2                 cmp     edx, [ebp+arg_4]
.text$mn:00004BD5                 jz      short loc_4BEE
.text$mn:00004BD7                 mov     eax, [ebp+arg_0]
.text$mn:00004BDA                 push    eax
.text$mn:00004BDB                 call    ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004BE0                 add     esp, 4
.text$mn:00004BE3                 push    eax
.text$mn:00004BE4                 mov     ecx, [ebp+arg_8]
.text$mn:00004BE7                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00004BEC                 jmp     short loc_4BBD
.text$mn:00004BEE ; ---------------------------------------------------------------------------
.text$mn:00004BEE
.text$mn:00004BEE loc_4BEE:                               ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+1Dj
.text$mn:00004BEE                 mov     eax, [ebp+arg_8]
.text$mn:00004BF1                 pop     ebp
.text$mn:00004BF2                 retn
.text$mn:00004BF2 ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00004BF2
.text$mn:00004BF2 ; ---------------------------------------------------------------------------
.text$mn:00004BF3                 align 4
.text$mn:00004BF3 _text$mn        ends
.text$mn:00004BF3
.text$mn:00004BF4 ; ===========================================================================
.text$mn:00004BF4
.text$mn:00004BF4 ; Segment type: Pure code
.text$mn:00004BF4 ; Segment permissions: Read/Execute
.text$mn:00004BF4 _text$mn        segment para public 'CODE' use32
.text$mn:00004BF4                 assume cs:_text$mn
.text$mn:00004BF4                 ;org 4BF4h
.text$mn:00004BF4 ; COMDAT (pick any)
.text$mn:00004BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BF4
.text$mn:00004BF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BF4
.text$mn:00004BF4 ; Attributes: bp-based frame
.text$mn:00004BF4
.text$mn:00004BF4 ; struct std::_Scalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class FunctionParser *, class FunctionParser *>(class FunctionParser * *, class FunctionParser * *)
.text$mn:00004BF4                 public ??$_Ptr_cat@PAVFunctionParser@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFunctionParser@@0@Z
.text$mn:00004BF4 ??$_Ptr_cat@PAVFunctionParser@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFunctionParser@@0@Z proc near
.text$mn:00004BF4                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+Cp
.text$mn:00004BF4                                         ; std::_Uninit_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+Cp
.text$mn:00004BF4
.text$mn:00004BF4 var_1           = byte ptr -1
.text$mn:00004BF4
.text$mn:00004BF4                 push    ebp
.text$mn:00004BF5                 mov     ebp, esp
.text$mn:00004BF7                 push    ecx
.text$mn:00004BF8                 mov     al, [ebp+var_1]
.text$mn:00004BFB                 mov     esp, ebp
.text$mn:00004BFD                 pop     ebp
.text$mn:00004BFE                 retn
.text$mn:00004BFE ??$_Ptr_cat@PAVFunctionParser@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFunctionParser@@0@Z endp
.text$mn:00004BFE
.text$mn:00004BFE ; ---------------------------------------------------------------------------
.text$mn:00004BFF                 align 10h
.text$mn:00004BFF _text$mn        ends
.text$mn:00004BFF
.text$mn:00004C00 ; ===========================================================================
.text$mn:00004C00
.text$mn:00004C00 ; Segment type: Pure code
.text$mn:00004C00 ; Segment permissions: Read/Execute
.text$mn:00004C00 _text$mn        segment para public 'CODE' use32
.text$mn:00004C00                 assume cs:_text$mn
.text$mn:00004C00                 ;org 4C00h
.text$mn:00004C00 ; COMDAT (pick any)
.text$mn:00004C00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C00
.text$mn:00004C00 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C00
.text$mn:00004C00 ; Attributes: bp-based frame
.text$mn:00004C00
.text$mn:00004C00 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct std::pair<int, int>, struct std::pair<int, int>>(struct std::pair<int, int> *, struct std::pair<int, int> *)
.text$mn:00004C00                 public ??$_Ptr_cat@U?$pair@HH@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@HH@0@0@Z
.text$mn:00004C00 ??$_Ptr_cat@U?$pair@HH@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@HH@0@0@Z proc near
.text$mn:00004C00                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+Cp
.text$mn:00004C00                                         ; std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+Cp
.text$mn:00004C00
.text$mn:00004C00 var_1           = byte ptr -1
.text$mn:00004C00
.text$mn:00004C00                 push    ebp
.text$mn:00004C01                 mov     ebp, esp
.text$mn:00004C03                 push    ecx
.text$mn:00004C04                 mov     al, [ebp+var_1]
.text$mn:00004C07                 mov     esp, ebp
.text$mn:00004C09                 pop     ebp
.text$mn:00004C0A                 retn
.text$mn:00004C0A ??$_Ptr_cat@U?$pair@HH@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@HH@0@0@Z endp
.text$mn:00004C0A
.text$mn:00004C0A ; ---------------------------------------------------------------------------
.text$mn:00004C0B                 align 4
.text$mn:00004C0B _text$mn        ends
.text$mn:00004C0B
.text$mn:00004C0C ; ===========================================================================
.text$mn:00004C0C
.text$mn:00004C0C ; Segment type: Pure code
.text$mn:00004C0C ; Segment permissions: Read/Execute
.text$mn:00004C0C _text$mn        segment para public 'CODE' use32
.text$mn:00004C0C                 assume cs:_text$mn
.text$mn:00004C0C                 ;org 4C0Ch
.text$mn:00004C0C ; COMDAT (pick any)
.text$mn:00004C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C0C
.text$mn:00004C0C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C0C
.text$mn:00004C0C ; Attributes: bp-based frame
.text$mn:00004C0C
.text$mn:00004C0C ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct AssociationInfo, struct AssociationInfo>(struct AssociationInfo *, struct AssociationInfo *)
.text$mn:00004C0C                 public ??$_Ptr_cat@UAssociationInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAssociationInfo@@0@Z
.text$mn:00004C0C ??$_Ptr_cat@UAssociationInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAssociationInfo@@0@Z proc near
.text$mn:00004C0C                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+Cp
.text$mn:00004C0C                                         ; std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+Cp
.text$mn:00004C0C
.text$mn:00004C0C var_1           = byte ptr -1
.text$mn:00004C0C
.text$mn:00004C0C                 push    ebp
.text$mn:00004C0D                 mov     ebp, esp
.text$mn:00004C0F                 push    ecx
.text$mn:00004C10                 mov     al, [ebp+var_1]
.text$mn:00004C13                 mov     esp, ebp
.text$mn:00004C15                 pop     ebp
.text$mn:00004C16                 retn
.text$mn:00004C16 ??$_Ptr_cat@UAssociationInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAssociationInfo@@0@Z endp
.text$mn:00004C16
.text$mn:00004C16 ; ---------------------------------------------------------------------------
.text$mn:00004C17                 align 4
.text$mn:00004C17 _text$mn        ends
.text$mn:00004C17
.text$mn:00004C18 ; ===========================================================================
.text$mn:00004C18
.text$mn:00004C18 ; Segment type: Pure code
.text$mn:00004C18 ; Segment permissions: Read/Execute
.text$mn:00004C18 _text$mn        segment para public 'CODE' use32
.text$mn:00004C18                 assume cs:_text$mn
.text$mn:00004C18                 ;org 4C18h
.text$mn:00004C18 ; COMDAT (pick any)
.text$mn:00004C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C18
.text$mn:00004C18 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C18
.text$mn:00004C18 ; Attributes: bp-based frame
.text$mn:00004C18
.text$mn:00004C18 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct foundInfo, struct foundInfo>(struct foundInfo *, struct foundInfo *)
.text$mn:00004C18                 public ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z
.text$mn:00004C18 ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z proc near
.text$mn:00004C18                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+Cp
.text$mn:00004C18                                         ; std::_Uninit_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+Cp
.text$mn:00004C18
.text$mn:00004C18 var_1           = byte ptr -1
.text$mn:00004C18
.text$mn:00004C18                 push    ebp
.text$mn:00004C19                 mov     ebp, esp
.text$mn:00004C1B                 push    ecx
.text$mn:00004C1C                 mov     al, [ebp+var_1]
.text$mn:00004C1F                 mov     esp, ebp
.text$mn:00004C21                 pop     ebp
.text$mn:00004C22                 retn
.text$mn:00004C22 ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z endp
.text$mn:00004C22
.text$mn:00004C22 ; ---------------------------------------------------------------------------
.text$mn:00004C23                 align 4
.text$mn:00004C23 _text$mn        ends
.text$mn:00004C23
.text$mn:00004C24 ; ===========================================================================
.text$mn:00004C24
.text$mn:00004C24 ; Segment type: Pure code
.text$mn:00004C24 ; Segment permissions: Read/Execute
.text$mn:00004C24 _text$mn        segment para public 'CODE' use32
.text$mn:00004C24                 assume cs:_text$mn
.text$mn:00004C24                 ;org 4C24h
.text$mn:00004C24 ; COMDAT (pick any)
.text$mn:00004C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C24
.text$mn:00004C24 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C24
.text$mn:00004C24 ; Attributes: bp-based frame
.text$mn:00004C24
.text$mn:00004C24 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004C24                 public ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00004C24 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00004C24                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00004C24                                         ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp ...
.text$mn:00004C24
.text$mn:00004C24 var_1           = byte ptr -1
.text$mn:00004C24
.text$mn:00004C24                 push    ebp
.text$mn:00004C25                 mov     ebp, esp
.text$mn:00004C27                 push    ecx
.text$mn:00004C28                 mov     al, [ebp+var_1]
.text$mn:00004C2B                 mov     esp, ebp
.text$mn:00004C2D                 pop     ebp
.text$mn:00004C2E                 retn
.text$mn:00004C2E ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:00004C2E
.text$mn:00004C2E ; ---------------------------------------------------------------------------
.text$mn:00004C2F                 align 10h
.text$mn:00004C2F _text$mn        ends
.text$mn:00004C2F
.text$mn:00004C30 ; ===========================================================================
.text$mn:00004C30
.text$mn:00004C30 ; Segment type: Pure code
.text$mn:00004C30 ; Segment permissions: Read/Execute
.text$mn:00004C30 _text$mn        segment para public 'CODE' use32
.text$mn:00004C30                 assume cs:_text$mn
.text$mn:00004C30                 ;org 4C30h
.text$mn:00004C30 ; COMDAT (pick any)
.text$mn:00004C30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C30
.text$mn:00004C30 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C30
.text$mn:00004C30 ; Attributes: bp-based frame
.text$mn:00004C30
.text$mn:00004C30 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004C30                 public ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV20@@Z
.text$mn:00004C30 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV20@@Z proc near
.text$mn:00004C30                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00004C30
.text$mn:00004C30 var_1           = byte ptr -1
.text$mn:00004C30
.text$mn:00004C30                 push    ebp
.text$mn:00004C31                 mov     ebp, esp
.text$mn:00004C33                 push    ecx
.text$mn:00004C34                 mov     al, [ebp+var_1]
.text$mn:00004C37                 mov     esp, ebp
.text$mn:00004C39                 pop     ebp
.text$mn:00004C3A                 retn
.text$mn:00004C3A ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV20@@Z endp
.text$mn:00004C3A
.text$mn:00004C3A ; ---------------------------------------------------------------------------
.text$mn:00004C3B                 align 4
.text$mn:00004C3B _text$mn        ends
.text$mn:00004C3B
.text$mn:00004C3C ; ===========================================================================
.text$mn:00004C3C
.text$mn:00004C3C ; Segment type: Pure code
.text$mn:00004C3C ; Segment permissions: Read/Execute
.text$mn:00004C3C _text$mn        segment para public 'CODE' use32
.text$mn:00004C3C                 assume cs:_text$mn
.text$mn:00004C3C                 ;org 4C3Ch
.text$mn:00004C3C ; COMDAT (pick any)
.text$mn:00004C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C3C
.text$mn:00004C3C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C3C
.text$mn:00004C3C ; Attributes: bp-based frame
.text$mn:00004C3C
.text$mn:00004C3C ; class FunctionParser * * & __cdecl std::_Rechecked<class FunctionParser * *, class FunctionParser * *>(class FunctionParser * * &, class FunctionParser * *)
.text$mn:00004C3C                 public ??$_Rechecked@PAPAVFunctionParser@@PAPAV1@@std@@YAAAPAPAVFunctionParser@@AAPAPAV1@PAPAV1@@Z
.text$mn:00004C3C ??$_Rechecked@PAPAVFunctionParser@@PAPAV1@@std@@YAAAPAPAVFunctionParser@@AAPAPAV1@PAPAV1@@Z proc near
.text$mn:00004C3C                                         ; CODE XREF: std::_Uninitialized_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+3Bp
.text$mn:00004C3C
.text$mn:00004C3C arg_0           = dword ptr  8
.text$mn:00004C3C arg_4           = dword ptr  0Ch
.text$mn:00004C3C
.text$mn:00004C3C                 push    ebp
.text$mn:00004C3D                 mov     ebp, esp
.text$mn:00004C3F                 mov     eax, [ebp+arg_0]
.text$mn:00004C42                 mov     ecx, [ebp+arg_4]
.text$mn:00004C45                 mov     [eax], ecx
.text$mn:00004C47                 mov     eax, [ebp+arg_0]
.text$mn:00004C4A                 pop     ebp
.text$mn:00004C4B                 retn
.text$mn:00004C4B ??$_Rechecked@PAPAVFunctionParser@@PAPAV1@@std@@YAAAPAPAVFunctionParser@@AAPAPAV1@PAPAV1@@Z endp
.text$mn:00004C4B
.text$mn:00004C4B _text$mn        ends
.text$mn:00004C4B
.text$mn:00004C4C ; ===========================================================================
.text$mn:00004C4C
.text$mn:00004C4C ; Segment type: Pure code
.text$mn:00004C4C ; Segment permissions: Read/Execute
.text$mn:00004C4C _text$mn        segment para public 'CODE' use32
.text$mn:00004C4C                 assume cs:_text$mn
.text$mn:00004C4C                 ;org 4C4Ch
.text$mn:00004C4C ; COMDAT (pick any)
.text$mn:00004C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C4C
.text$mn:00004C4C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C4C
.text$mn:00004C4C ; Attributes: bp-based frame
.text$mn:00004C4C
.text$mn:00004C4C ; struct std::pair<int, int> * & __cdecl std::_Rechecked<struct std::pair<int, int> *, struct std::pair<int, int> *>(struct std::pair<int, int> * &, struct std::pair<int, int> *)
.text$mn:00004C4C                 public ??$_Rechecked@PAU?$pair@HH@std@@PAU12@@std@@YAAAPAU?$pair@HH@0@AAPAU10@PAU10@@Z
.text$mn:00004C4C ??$_Rechecked@PAU?$pair@HH@std@@PAU12@@std@@YAAAPAU?$pair@HH@0@AAPAU10@PAU10@@Z proc near
.text$mn:00004C4C                                         ; CODE XREF: std::_Uninitialized_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+3Bp
.text$mn:00004C4C
.text$mn:00004C4C arg_0           = dword ptr  8
.text$mn:00004C4C arg_4           = dword ptr  0Ch
.text$mn:00004C4C
.text$mn:00004C4C                 push    ebp
.text$mn:00004C4D                 mov     ebp, esp
.text$mn:00004C4F                 mov     eax, [ebp+arg_0]
.text$mn:00004C52                 mov     ecx, [ebp+arg_4]
.text$mn:00004C55                 mov     [eax], ecx
.text$mn:00004C57                 mov     eax, [ebp+arg_0]
.text$mn:00004C5A                 pop     ebp
.text$mn:00004C5B                 retn
.text$mn:00004C5B ??$_Rechecked@PAU?$pair@HH@std@@PAU12@@std@@YAAAPAU?$pair@HH@0@AAPAU10@PAU10@@Z endp
.text$mn:00004C5B
.text$mn:00004C5B _text$mn        ends
.text$mn:00004C5B
.text$mn:00004C5C ; ===========================================================================
.text$mn:00004C5C
.text$mn:00004C5C ; Segment type: Pure code
.text$mn:00004C5C ; Segment permissions: Read/Execute
.text$mn:00004C5C _text$mn        segment para public 'CODE' use32
.text$mn:00004C5C                 assume cs:_text$mn
.text$mn:00004C5C                 ;org 4C5Ch
.text$mn:00004C5C ; COMDAT (pick any)
.text$mn:00004C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C5C
.text$mn:00004C5C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C5C
.text$mn:00004C5C ; Attributes: bp-based frame
.text$mn:00004C5C
.text$mn:00004C5C ; struct AssociationInfo * & __cdecl std::_Rechecked<struct AssociationInfo *, struct AssociationInfo *>(struct AssociationInfo * &, struct AssociationInfo *)
.text$mn:00004C5C                 public ??$_Rechecked@PAUAssociationInfo@@PAU1@@std@@YAAAPAUAssociationInfo@@AAPAU1@PAU1@@Z
.text$mn:00004C5C ??$_Rechecked@PAUAssociationInfo@@PAU1@@std@@YAAAPAUAssociationInfo@@AAPAU1@PAU1@@Z proc near
.text$mn:00004C5C                                         ; CODE XREF: std::_Uninitialized_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+3Bp
.text$mn:00004C5C
.text$mn:00004C5C arg_0           = dword ptr  8
.text$mn:00004C5C arg_4           = dword ptr  0Ch
.text$mn:00004C5C
.text$mn:00004C5C                 push    ebp
.text$mn:00004C5D                 mov     ebp, esp
.text$mn:00004C5F                 mov     eax, [ebp+arg_0]
.text$mn:00004C62                 mov     ecx, [ebp+arg_4]
.text$mn:00004C65                 mov     [eax], ecx
.text$mn:00004C67                 mov     eax, [ebp+arg_0]
.text$mn:00004C6A                 pop     ebp
.text$mn:00004C6B                 retn
.text$mn:00004C6B ??$_Rechecked@PAUAssociationInfo@@PAU1@@std@@YAAAPAUAssociationInfo@@AAPAU1@PAU1@@Z endp
.text$mn:00004C6B
.text$mn:00004C6B _text$mn        ends
.text$mn:00004C6B
.text$mn:00004C6C ; ===========================================================================
.text$mn:00004C6C
.text$mn:00004C6C ; Segment type: Pure code
.text$mn:00004C6C ; Segment permissions: Read/Execute
.text$mn:00004C6C _text$mn        segment para public 'CODE' use32
.text$mn:00004C6C                 assume cs:_text$mn
.text$mn:00004C6C                 ;org 4C6Ch
.text$mn:00004C6C ; COMDAT (pick any)
.text$mn:00004C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C6C
.text$mn:00004C6C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C6C
.text$mn:00004C6C ; Attributes: bp-based frame
.text$mn:00004C6C
.text$mn:00004C6C ; struct foundInfo * & __cdecl std::_Rechecked<struct foundInfo *, struct foundInfo *>(struct foundInfo * &, struct foundInfo *)
.text$mn:00004C6C                 public ??$_Rechecked@PAUfoundInfo@@PAU1@@std@@YAAAPAUfoundInfo@@AAPAU1@PAU1@@Z
.text$mn:00004C6C ??$_Rechecked@PAUfoundInfo@@PAU1@@std@@YAAAPAUfoundInfo@@AAPAU1@PAU1@@Z proc near
.text$mn:00004C6C                                         ; CODE XREF: std::_Uninitialized_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+3Bp
.text$mn:00004C6C
.text$mn:00004C6C arg_0           = dword ptr  8
.text$mn:00004C6C arg_4           = dword ptr  0Ch
.text$mn:00004C6C
.text$mn:00004C6C                 push    ebp
.text$mn:00004C6D                 mov     ebp, esp
.text$mn:00004C6F                 mov     eax, [ebp+arg_0]
.text$mn:00004C72                 mov     ecx, [ebp+arg_4]
.text$mn:00004C75                 mov     [eax], ecx
.text$mn:00004C77                 mov     eax, [ebp+arg_0]
.text$mn:00004C7A                 pop     ebp
.text$mn:00004C7B                 retn
.text$mn:00004C7B ??$_Rechecked@PAUfoundInfo@@PAU1@@std@@YAAAPAUfoundInfo@@AAPAU1@PAU1@@Z endp
.text$mn:00004C7B
.text$mn:00004C7B _text$mn        ends
.text$mn:00004C7B
.text$mn:00004C7C ; ===========================================================================
.text$mn:00004C7C
.text$mn:00004C7C ; Segment type: Pure code
.text$mn:00004C7C ; Segment permissions: Read/Execute
.text$mn:00004C7C _text$mn        segment para public 'CODE' use32
.text$mn:00004C7C                 assume cs:_text$mn
.text$mn:00004C7C                 ;org 4C7Ch
.text$mn:00004C7C ; COMDAT (pick any)
.text$mn:00004C7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C7C
.text$mn:00004C7C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C7C
.text$mn:00004C7C ; Attributes: bp-based frame
.text$mn:00004C7C
.text$mn:00004C7C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * & __cdecl std::_Rechecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004C7C                 public ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z
.text$mn:00004C7C ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z proc near
.text$mn:00004C7C                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+B2p
.text$mn:00004C7C                                         ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+3Bp
.text$mn:00004C7C
.text$mn:00004C7C arg_0           = dword ptr  8
.text$mn:00004C7C arg_4           = dword ptr  0Ch
.text$mn:00004C7C
.text$mn:00004C7C                 push    ebp
.text$mn:00004C7D                 mov     ebp, esp
.text$mn:00004C7F                 mov     eax, [ebp+arg_0]
.text$mn:00004C82                 mov     ecx, [ebp+arg_4]
.text$mn:00004C85                 mov     [eax], ecx
.text$mn:00004C87                 mov     eax, [ebp+arg_0]
.text$mn:00004C8A                 pop     ebp
.text$mn:00004C8B                 retn
.text$mn:00004C8B ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z endp
.text$mn:00004C8B
.text$mn:00004C8B _text$mn        ends
.text$mn:00004C8B
.text$mn:00004C8C ; ===========================================================================
.text$mn:00004C8C
.text$mn:00004C8C ; Segment type: Pure code
.text$mn:00004C8C ; Segment permissions: Read/Execute
.text$mn:00004C8C _text$mn        segment para public 'CODE' use32
.text$mn:00004C8C                 assume cs:_text$mn
.text$mn:00004C8C                 ;org 4C8Ch
.text$mn:00004C8C ; COMDAT (pick any)
.text$mn:00004C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C8C
.text$mn:00004C8C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C8C
.text$mn:00004C8C ; Attributes: bp-based frame
.text$mn:00004C8C
.text$mn:00004C8C ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Ucopy<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004C8C                 public ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z
.text$mn:00004C8C ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z proc near
.text$mn:00004C8C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+C0p
.text$mn:00004C8C
.text$mn:00004C8C var_34          = dword ptr -34h
.text$mn:00004C8C var_30          = dword ptr -30h
.text$mn:00004C8C var_2C          = dword ptr -2Ch
.text$mn:00004C8C var_28          = dword ptr -28h
.text$mn:00004C8C var_24          = dword ptr -24h
.text$mn:00004C8C var_20          = dword ptr -20h
.text$mn:00004C8C var_1C          = dword ptr -1Ch
.text$mn:00004C8C var_18          = dword ptr -18h
.text$mn:00004C8C var_14          = dword ptr -14h
.text$mn:00004C8C var_D           = byte ptr -0Dh
.text$mn:00004C8C var_C           = dword ptr -0Ch
.text$mn:00004C8C var_4           = dword ptr -4
.text$mn:00004C8C arg_0           = byte ptr  8
.text$mn:00004C8C arg_C           = byte ptr  14h
.text$mn:00004C8C arg_18          = dword ptr  20h
.text$mn:00004C8C
.text$mn:00004C8C                 push    ebp
.text$mn:00004C8D                 mov     ebp, esp
.text$mn:00004C8F                 push    0FFFFFFFFh
.text$mn:00004C91                 push    offset __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z
.text$mn:00004C96                 mov     eax, large fs:0
.text$mn:00004C9C                 push    eax
.text$mn:00004C9D                 sub     esp, 28h
.text$mn:00004CA0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004CA5                 xor     eax, ebp
.text$mn:00004CA7                 push    eax
.text$mn:00004CA8                 lea     eax, [ebp+var_C]
.text$mn:00004CAB                 mov     large fs:0, eax
.text$mn:00004CB1                 mov     [ebp+var_14], ecx
.text$mn:00004CB4                 mov     [ebp+var_4], 1
.text$mn:00004CBB                 lea     eax, [ebp+var_D]
.text$mn:00004CBE                 push    eax
.text$mn:00004CBF                 mov     ecx, [ebp+var_14]
.text$mn:00004CC2                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00004CC7                 lea     ecx, [ebp+var_D]
.text$mn:00004CCA                 push    ecx
.text$mn:00004CCB                 mov     edx, [ebp+arg_18]
.text$mn:00004CCE                 push    edx
.text$mn:00004CCF                 sub     esp, 0Ch
.text$mn:00004CD2                 mov     ecx, esp
.text$mn:00004CD4                 mov     [ebp+var_28], esp
.text$mn:00004CD7                 lea     eax, [ebp+arg_C]
.text$mn:00004CDA                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00004CDB                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00004CE0                 mov     [ebp+var_18], eax
.text$mn:00004CE3                 mov     ecx, [ebp+var_18]
.text$mn:00004CE6                 mov     [ebp+var_2C], ecx
.text$mn:00004CE9                 mov     byte ptr [ebp+var_4], 2
.text$mn:00004CED                 sub     esp, 0Ch
.text$mn:00004CF0                 mov     ecx, esp
.text$mn:00004CF2                 mov     [ebp+var_30], esp
.text$mn:00004CF5                 lea     edx, [ebp+arg_0]
.text$mn:00004CF8                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00004CF9                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:00004CFE                 mov     [ebp+var_1C], eax
.text$mn:00004D01                 mov     eax, [ebp+var_1C]
.text$mn:00004D04                 mov     [ebp+var_34], eax
.text$mn:00004D07                 mov     byte ptr [ebp+var_4], 3
.text$mn:00004D0B                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004D0F                 call    ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00004D14                 add     esp, 20h
.text$mn:00004D17                 mov     [ebp+var_20], eax
.text$mn:00004D1A                 mov     ecx, [ebp+var_20]
.text$mn:00004D1D                 mov     [ebp+var_24], ecx
.text$mn:00004D20                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004D24                 lea     ecx, [ebp+arg_0]
.text$mn:00004D27                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00004D2C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004D33                 lea     ecx, [ebp+arg_C]
.text$mn:00004D36                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00004D3B                 mov     eax, [ebp+var_24]
.text$mn:00004D3E                 mov     ecx, [ebp+var_C]
.text$mn:00004D41                 mov     large fs:0, ecx
.text$mn:00004D48                 pop     ecx
.text$mn:00004D49                 mov     esp, ebp
.text$mn:00004D4B                 pop     ebp
.text$mn:00004D4C                 retn    1Ch
.text$mn:00004D4C ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z endp
.text$mn:00004D4C
.text$mn:00004D4C ; ---------------------------------------------------------------------------
.text$mn:00004D4F                 align 10h
.text$mn:00004D4F _text$mn        ends
.text$mn:00004D4F
.text$x:00004D50 ; ===========================================================================
.text$x:00004D50
.text$x:00004D50 ; Segment type: Pure code
.text$x:00004D50 ; Segment permissions: Read/Execute
.text$x:00004D50 _text$x         segment para public 'CODE' use32
.text$x:00004D50                 assume cs:_text$x
.text$x:00004D50                 ;org 4D50h
.text$x:00004D50 ; COMDAT (pick associative to section at 4C8C)
.text$x:00004D50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D50
.text$x:00004D50 ; =============== S U B R O U T I N E =======================================
.text$x:00004D50
.text$x:00004D50
.text$x:00004D50 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$0 proc near
.text$x:00004D50                                         ; DATA XREF: .xdata$x:0001095Co
.text$x:00004D50                 lea     ecx, [ebp+14h]
.text$x:00004D53                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004D53 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$0 endp
.text$x:00004D53
.text$x:00004D58
.text$x:00004D58 ; =============== S U B R O U T I N E =======================================
.text$x:00004D58
.text$x:00004D58
.text$x:00004D58 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$1 proc near
.text$x:00004D58                                         ; DATA XREF: .xdata$x:00010964o
.text$x:00004D58                 lea     ecx, [ebp+8]
.text$x:00004D5B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004D5B __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$1 endp
.text$x:00004D5B
.text$x:00004D60
.text$x:00004D60 ; =============== S U B R O U T I N E =======================================
.text$x:00004D60
.text$x:00004D60
.text$x:00004D60 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$2 proc near
.text$x:00004D60                                         ; DATA XREF: .xdata$x:0001096Co
.text$x:00004D60                 mov     ecx, [ebp-28h]
.text$x:00004D63                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004D63 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$2 endp
.text$x:00004D63
.text$x:00004D68
.text$x:00004D68 ; =============== S U B R O U T I N E =======================================
.text$x:00004D68
.text$x:00004D68
.text$x:00004D68 __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$3 proc near
.text$x:00004D68                                         ; DATA XREF: .xdata$x:00010974o
.text$x:00004D68                 mov     ecx, [ebp-30h]
.text$x:00004D6B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004D6B __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$3 endp
.text$x:00004D6B
.text$x:00004D70
.text$x:00004D70 ; =============== S U B R O U T I N E =======================================
.text$x:00004D70
.text$x:00004D70
.text$x:00004D70 __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z proc near
.text$x:00004D70                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:00004D70
.text$x:00004D70 arg_4           = dword ptr  8
.text$x:00004D70
.text$x:00004D70                 mov     edx, [esp+arg_4]
.text$x:00004D74                 lea     eax, [edx+0Ch]
.text$x:00004D77                 mov     ecx, [edx-2Ch]
.text$x:00004D7A                 xor     ecx, eax
.text$x:00004D7C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004D81                 mov     eax, offset __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z
.text$x:00004D86                 jmp     ___CxxFrameHandler3
.text$x:00004D86 __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z endp
.text$x:00004D86
.text$x:00004D86 ; ---------------------------------------------------------------------------
.text$x:00004D8B                 align 4
.text$x:00004D8B _text$x         ends
.text$x:00004D8B
.text$mn:00004D8C ; ===========================================================================
.text$mn:00004D8C
.text$mn:00004D8C ; Segment type: Pure code
.text$mn:00004D8C ; Segment permissions: Read/Execute
.text$mn:00004D8C _text$mn        segment para public 'CODE' use32
.text$mn:00004D8C                 assume cs:_text$mn
.text$mn:00004D8C                 ;org 4D8Ch
.text$mn:00004D8C ; COMDAT (pick any)
.text$mn:00004D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D8C
.text$mn:00004D8C ; =============== S U B R O U T I N E =======================================
.text$mn:00004D8C
.text$mn:00004D8C ; Attributes: bp-based frame
.text$mn:00004D8C
.text$mn:00004D8C ; protected: class FunctionParser * * __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Umove<class FunctionParser * *>(class FunctionParser * *, class FunctionParser * *, class FunctionParser * *)
.text$mn:00004D8C                 public ??$_Umove@PAPAVFunctionParser@@@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEPAPAVFunctionParser@@PAPAV2@00@Z
.text$mn:00004D8C ??$_Umove@PAPAVFunctionParser@@@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEPAPAVFunctionParser@@PAPAV2@00@Z proc near
.text$mn:00004D8C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)+65p
.text$mn:00004D8C
.text$mn:00004D8C var_8           = dword ptr -8
.text$mn:00004D8C var_1           = byte ptr -1
.text$mn:00004D8C arg_0           = dword ptr  8
.text$mn:00004D8C arg_4           = dword ptr  0Ch
.text$mn:00004D8C arg_8           = dword ptr  10h
.text$mn:00004D8C
.text$mn:00004D8C                 push    ebp
.text$mn:00004D8D                 mov     ebp, esp
.text$mn:00004D8F                 sub     esp, 8
.text$mn:00004D92                 mov     [ebp+var_8], ecx
.text$mn:00004D95                 lea     eax, [ebp+var_1]
.text$mn:00004D98                 push    eax
.text$mn:00004D99                 mov     ecx, [ebp+var_8]
.text$mn:00004D9C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:00004DA1                 lea     ecx, [ebp+var_1]
.text$mn:00004DA4                 push    ecx
.text$mn:00004DA5                 mov     edx, [ebp+arg_8]
.text$mn:00004DA8                 push    edx
.text$mn:00004DA9                 mov     eax, [ebp+arg_4]
.text$mn:00004DAC                 push    eax
.text$mn:00004DAD                 mov     ecx, [ebp+arg_0]
.text$mn:00004DB0                 push    ecx
.text$mn:00004DB1                 call    ??$_Uninitialized_move@PAPAVFunctionParser@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z ; std::_Uninitialized_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)
.text$mn:00004DB6                 add     esp, 10h
.text$mn:00004DB9                 mov     esp, ebp
.text$mn:00004DBB                 pop     ebp
.text$mn:00004DBC                 retn    0Ch
.text$mn:00004DBC ??$_Umove@PAPAVFunctionParser@@@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEPAPAVFunctionParser@@PAPAV2@00@Z endp
.text$mn:00004DBC
.text$mn:00004DBC ; ---------------------------------------------------------------------------
.text$mn:00004DBF                 align 10h
.text$mn:00004DBF _text$mn        ends
.text$mn:00004DBF
.text$mn:00004DC0 ; ===========================================================================
.text$mn:00004DC0
.text$mn:00004DC0 ; Segment type: Pure code
.text$mn:00004DC0 ; Segment permissions: Read/Execute
.text$mn:00004DC0 _text$mn        segment para public 'CODE' use32
.text$mn:00004DC0                 assume cs:_text$mn
.text$mn:00004DC0                 ;org 4DC0h
.text$mn:00004DC0 ; COMDAT (pick any)
.text$mn:00004DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004DC0
.text$mn:00004DC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004DC0
.text$mn:00004DC0 ; Attributes: bp-based frame
.text$mn:00004DC0
.text$mn:00004DC0 ; protected: struct std::pair<int, int> * __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Umove<struct std::pair<int, int> *>(struct std::pair<int, int> *, struct std::pair<int, int> *, struct std::pair<int, int> *)
.text$mn:00004DC0                 public ??$_Umove@PAU?$pair@HH@std@@@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEPAU?$pair@HH@1@PAU21@00@Z
.text$mn:00004DC0 ??$_Umove@PAU?$pair@HH@std@@@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEPAU?$pair@HH@1@PAU21@00@Z proc near
.text$mn:00004DC0                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)+65p
.text$mn:00004DC0
.text$mn:00004DC0 var_8           = dword ptr -8
.text$mn:00004DC0 var_1           = byte ptr -1
.text$mn:00004DC0 arg_0           = dword ptr  8
.text$mn:00004DC0 arg_4           = dword ptr  0Ch
.text$mn:00004DC0 arg_8           = dword ptr  10h
.text$mn:00004DC0
.text$mn:00004DC0                 push    ebp
.text$mn:00004DC1                 mov     ebp, esp
.text$mn:00004DC3                 sub     esp, 8
.text$mn:00004DC6                 mov     [ebp+var_8], ecx
.text$mn:00004DC9                 lea     eax, [ebp+var_1]
.text$mn:00004DCC                 push    eax
.text$mn:00004DCD                 mov     ecx, [ebp+var_8]
.text$mn:00004DD0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:00004DD5                 lea     ecx, [ebp+var_1]
.text$mn:00004DD8                 push    ecx
.text$mn:00004DD9                 mov     edx, [ebp+arg_8]
.text$mn:00004DDC                 push    edx
.text$mn:00004DDD                 mov     eax, [ebp+arg_4]
.text$mn:00004DE0                 push    eax
.text$mn:00004DE1                 mov     ecx, [ebp+arg_0]
.text$mn:00004DE4                 push    ecx
.text$mn:00004DE5                 call    ??$_Uninitialized_move@PAU?$pair@HH@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)
.text$mn:00004DEA                 add     esp, 10h
.text$mn:00004DED                 mov     esp, ebp
.text$mn:00004DEF                 pop     ebp
.text$mn:00004DF0                 retn    0Ch
.text$mn:00004DF0 ??$_Umove@PAU?$pair@HH@std@@@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEPAU?$pair@HH@1@PAU21@00@Z endp
.text$mn:00004DF0
.text$mn:00004DF0 ; ---------------------------------------------------------------------------
.text$mn:00004DF3                 align 4
.text$mn:00004DF3 _text$mn        ends
.text$mn:00004DF3
.text$mn:00004DF4 ; ===========================================================================
.text$mn:00004DF4
.text$mn:00004DF4 ; Segment type: Pure code
.text$mn:00004DF4 ; Segment permissions: Read/Execute
.text$mn:00004DF4 _text$mn        segment para public 'CODE' use32
.text$mn:00004DF4                 assume cs:_text$mn
.text$mn:00004DF4                 ;org 4DF4h
.text$mn:00004DF4 ; COMDAT (pick any)
.text$mn:00004DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004DF4
.text$mn:00004DF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004DF4
.text$mn:00004DF4 ; Attributes: bp-based frame
.text$mn:00004DF4
.text$mn:00004DF4 ; protected: struct AssociationInfo * __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Umove<struct AssociationInfo *>(struct AssociationInfo *, struct AssociationInfo *, struct AssociationInfo *)
.text$mn:00004DF4                 public ??$_Umove@PAUAssociationInfo@@@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEPAUAssociationInfo@@PAU2@00@Z
.text$mn:00004DF4 ??$_Umove@PAUAssociationInfo@@@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEPAUAssociationInfo@@PAU2@00@Z proc near
.text$mn:00004DF4                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)+65p
.text$mn:00004DF4
.text$mn:00004DF4 var_8           = dword ptr -8
.text$mn:00004DF4 var_1           = byte ptr -1
.text$mn:00004DF4 arg_0           = dword ptr  8
.text$mn:00004DF4 arg_4           = dword ptr  0Ch
.text$mn:00004DF4 arg_8           = dword ptr  10h
.text$mn:00004DF4
.text$mn:00004DF4                 push    ebp
.text$mn:00004DF5                 mov     ebp, esp
.text$mn:00004DF7                 sub     esp, 8
.text$mn:00004DFA                 mov     [ebp+var_8], ecx
.text$mn:00004DFD                 lea     eax, [ebp+var_1]
.text$mn:00004E00                 push    eax
.text$mn:00004E01                 mov     ecx, [ebp+var_8]
.text$mn:00004E04                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:00004E09                 lea     ecx, [ebp+var_1]
.text$mn:00004E0C                 push    ecx
.text$mn:00004E0D                 mov     edx, [ebp+arg_8]
.text$mn:00004E10                 push    edx
.text$mn:00004E11                 mov     eax, [ebp+arg_4]
.text$mn:00004E14                 push    eax
.text$mn:00004E15                 mov     ecx, [ebp+arg_0]
.text$mn:00004E18                 push    ecx
.text$mn:00004E19                 call    ??$_Uninitialized_move@PAUAssociationInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z ; std::_Uninitialized_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)
.text$mn:00004E1E                 add     esp, 10h
.text$mn:00004E21                 mov     esp, ebp
.text$mn:00004E23                 pop     ebp
.text$mn:00004E24                 retn    0Ch
.text$mn:00004E24 ??$_Umove@PAUAssociationInfo@@@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEPAUAssociationInfo@@PAU2@00@Z endp
.text$mn:00004E24
.text$mn:00004E24 ; ---------------------------------------------------------------------------
.text$mn:00004E27                 align 4
.text$mn:00004E27 _text$mn        ends
.text$mn:00004E27
.text$mn:00004E28 ; ===========================================================================
.text$mn:00004E28
.text$mn:00004E28 ; Segment type: Pure code
.text$mn:00004E28 ; Segment permissions: Read/Execute
.text$mn:00004E28 _text$mn        segment para public 'CODE' use32
.text$mn:00004E28                 assume cs:_text$mn
.text$mn:00004E28                 ;org 4E28h
.text$mn:00004E28 ; COMDAT (pick any)
.text$mn:00004E28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E28
.text$mn:00004E28 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E28
.text$mn:00004E28 ; Attributes: bp-based frame
.text$mn:00004E28
.text$mn:00004E28 ; protected: struct foundInfo * __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Umove<struct foundInfo *>(struct foundInfo *, struct foundInfo *, struct foundInfo *)
.text$mn:00004E28                 public ??$_Umove@PAUfoundInfo@@@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEPAUfoundInfo@@PAU2@00@Z
.text$mn:00004E28 ??$_Umove@PAUfoundInfo@@@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEPAUfoundInfo@@PAU2@00@Z proc near
.text$mn:00004E28                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+65p
.text$mn:00004E28
.text$mn:00004E28 var_8           = dword ptr -8
.text$mn:00004E28 var_1           = byte ptr -1
.text$mn:00004E28 arg_0           = dword ptr  8
.text$mn:00004E28 arg_4           = dword ptr  0Ch
.text$mn:00004E28 arg_8           = dword ptr  10h
.text$mn:00004E28
.text$mn:00004E28                 push    ebp
.text$mn:00004E29                 mov     ebp, esp
.text$mn:00004E2B                 sub     esp, 8
.text$mn:00004E2E                 mov     [ebp+var_8], ecx
.text$mn:00004E31                 lea     eax, [ebp+var_1]
.text$mn:00004E34                 push    eax
.text$mn:00004E35                 mov     ecx, [ebp+var_8]
.text$mn:00004E38                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:00004E3D                 lea     ecx, [ebp+var_1]
.text$mn:00004E40                 push    ecx
.text$mn:00004E41                 mov     edx, [ebp+arg_8]
.text$mn:00004E44                 push    edx
.text$mn:00004E45                 mov     eax, [ebp+arg_4]
.text$mn:00004E48                 push    eax
.text$mn:00004E49                 mov     ecx, [ebp+arg_0]
.text$mn:00004E4C                 push    ecx
.text$mn:00004E4D                 call    ??$_Uninitialized_move@PAUfoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z ; std::_Uninitialized_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)
.text$mn:00004E52                 add     esp, 10h
.text$mn:00004E55                 mov     esp, ebp
.text$mn:00004E57                 pop     ebp
.text$mn:00004E58                 retn    0Ch
.text$mn:00004E58 ??$_Umove@PAUfoundInfo@@@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEPAUfoundInfo@@PAU2@00@Z endp
.text$mn:00004E58
.text$mn:00004E58 ; ---------------------------------------------------------------------------
.text$mn:00004E5B                 align 4
.text$mn:00004E5B _text$mn        ends
.text$mn:00004E5B
.text$mn:00004E5C ; ===========================================================================
.text$mn:00004E5C
.text$mn:00004E5C ; Segment type: Pure code
.text$mn:00004E5C ; Segment permissions: Read/Execute
.text$mn:00004E5C _text$mn        segment para public 'CODE' use32
.text$mn:00004E5C                 assume cs:_text$mn
.text$mn:00004E5C                 ;org 4E5Ch
.text$mn:00004E5C ; COMDAT (pick any)
.text$mn:00004E5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E5C
.text$mn:00004E5C ; =============== S U B R O U T I N E =======================================
.text$mn:00004E5C
.text$mn:00004E5C ; Attributes: bp-based frame
.text$mn:00004E5C
.text$mn:00004E5C ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Umove<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004E5C                 public ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z
.text$mn:00004E5C ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z proc near
.text$mn:00004E5C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+65p
.text$mn:00004E5C
.text$mn:00004E5C var_8           = dword ptr -8
.text$mn:00004E5C var_1           = byte ptr -1
.text$mn:00004E5C arg_0           = dword ptr  8
.text$mn:00004E5C arg_4           = dword ptr  0Ch
.text$mn:00004E5C arg_8           = dword ptr  10h
.text$mn:00004E5C
.text$mn:00004E5C                 push    ebp
.text$mn:00004E5D                 mov     ebp, esp
.text$mn:00004E5F                 sub     esp, 8
.text$mn:00004E62                 mov     [ebp+var_8], ecx
.text$mn:00004E65                 lea     eax, [ebp+var_1]
.text$mn:00004E68                 push    eax
.text$mn:00004E69                 mov     ecx, [ebp+var_8]
.text$mn:00004E6C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00004E71                 lea     ecx, [ebp+var_1]
.text$mn:00004E74                 push    ecx
.text$mn:00004E75                 mov     edx, [ebp+arg_8]
.text$mn:00004E78                 push    edx
.text$mn:00004E79                 mov     eax, [ebp+arg_4]
.text$mn:00004E7C                 push    eax
.text$mn:00004E7D                 mov     ecx, [ebp+arg_0]
.text$mn:00004E80                 push    ecx
.text$mn:00004E81                 call    ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00004E86                 add     esp, 10h
.text$mn:00004E89                 mov     esp, ebp
.text$mn:00004E8B                 pop     ebp
.text$mn:00004E8C                 retn    0Ch
.text$mn:00004E8C ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z endp
.text$mn:00004E8C
.text$mn:00004E8C ; ---------------------------------------------------------------------------
.text$mn:00004E8F                 align 10h
.text$mn:00004E8F _text$mn        ends
.text$mn:00004E8F
.text$mn:00004E90 ; ===========================================================================
.text$mn:00004E90
.text$mn:00004E90 ; Segment type: Pure code
.text$mn:00004E90 ; Segment permissions: Read/Execute
.text$mn:00004E90 _text$mn        segment para public 'CODE' use32
.text$mn:00004E90                 assume cs:_text$mn
.text$mn:00004E90                 ;org 4E90h
.text$mn:00004E90 ; COMDAT (pick any)
.text$mn:00004E90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E90
.text$mn:00004E90 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E90
.text$mn:00004E90 ; Attributes: bp-based frame
.text$mn:00004E90
.text$mn:00004E90 ; class FunctionParser * * __cdecl std::_Unchecked<class FunctionParser * *>(class FunctionParser * *)
.text$mn:00004E90                 public ??$_Unchecked@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z
.text$mn:00004E90 ??$_Unchecked@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z proc near
.text$mn:00004E90                                         ; CODE XREF: std::_Uninitialized_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+Bp
.text$mn:00004E90                                         ; std::_Uninitialized_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+18p ...
.text$mn:00004E90
.text$mn:00004E90 arg_0           = dword ptr  8
.text$mn:00004E90
.text$mn:00004E90                 push    ebp
.text$mn:00004E91                 mov     ebp, esp
.text$mn:00004E93                 mov     eax, [ebp+arg_0]
.text$mn:00004E96                 pop     ebp
.text$mn:00004E97                 retn
.text$mn:00004E97 ??$_Unchecked@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z endp
.text$mn:00004E97
.text$mn:00004E97 _text$mn        ends
.text$mn:00004E97
.text$mn:00004E98 ; ===========================================================================
.text$mn:00004E98
.text$mn:00004E98 ; Segment type: Pure code
.text$mn:00004E98 ; Segment permissions: Read/Execute
.text$mn:00004E98 _text$mn        segment para public 'CODE' use32
.text$mn:00004E98                 assume cs:_text$mn
.text$mn:00004E98                 ;org 4E98h
.text$mn:00004E98 ; COMDAT (pick any)
.text$mn:00004E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E98
.text$mn:00004E98 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E98
.text$mn:00004E98 ; Attributes: bp-based frame
.text$mn:00004E98
.text$mn:00004E98 ; struct std::pair<int, int> * __cdecl std::_Unchecked<struct std::pair<int, int> *>(struct std::pair<int, int> *)
.text$mn:00004E98                 public ??$_Unchecked@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z
.text$mn:00004E98 ??$_Unchecked@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z proc near
.text$mn:00004E98                                         ; CODE XREF: std::_Uninitialized_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+Bp
.text$mn:00004E98                                         ; std::_Uninitialized_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+18p ...
.text$mn:00004E98
.text$mn:00004E98 arg_0           = dword ptr  8
.text$mn:00004E98
.text$mn:00004E98                 push    ebp
.text$mn:00004E99                 mov     ebp, esp
.text$mn:00004E9B                 mov     eax, [ebp+arg_0]
.text$mn:00004E9E                 pop     ebp
.text$mn:00004E9F                 retn
.text$mn:00004E9F ??$_Unchecked@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z endp
.text$mn:00004E9F
.text$mn:00004E9F _text$mn        ends
.text$mn:00004E9F
.text$mn:00004EA0 ; ===========================================================================
.text$mn:00004EA0
.text$mn:00004EA0 ; Segment type: Pure code
.text$mn:00004EA0 ; Segment permissions: Read/Execute
.text$mn:00004EA0 _text$mn        segment para public 'CODE' use32
.text$mn:00004EA0                 assume cs:_text$mn
.text$mn:00004EA0                 ;org 4EA0h
.text$mn:00004EA0 ; COMDAT (pick any)
.text$mn:00004EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EA0
.text$mn:00004EA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EA0
.text$mn:00004EA0 ; Attributes: bp-based frame
.text$mn:00004EA0
.text$mn:00004EA0 ; struct AssociationInfo * __cdecl std::_Unchecked<struct AssociationInfo *>(struct AssociationInfo *)
.text$mn:00004EA0                 public ??$_Unchecked@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z
.text$mn:00004EA0 ??$_Unchecked@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z proc near
.text$mn:00004EA0                                         ; CODE XREF: std::_Uninitialized_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+Bp
.text$mn:00004EA0                                         ; std::_Uninitialized_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+18p ...
.text$mn:00004EA0
.text$mn:00004EA0 arg_0           = dword ptr  8
.text$mn:00004EA0
.text$mn:00004EA0                 push    ebp
.text$mn:00004EA1                 mov     ebp, esp
.text$mn:00004EA3                 mov     eax, [ebp+arg_0]
.text$mn:00004EA6                 pop     ebp
.text$mn:00004EA7                 retn
.text$mn:00004EA7 ??$_Unchecked@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z endp
.text$mn:00004EA7
.text$mn:00004EA7 _text$mn        ends
.text$mn:00004EA7
.text$mn:00004EA8 ; ===========================================================================
.text$mn:00004EA8
.text$mn:00004EA8 ; Segment type: Pure code
.text$mn:00004EA8 ; Segment permissions: Read/Execute
.text$mn:00004EA8 _text$mn        segment para public 'CODE' use32
.text$mn:00004EA8                 assume cs:_text$mn
.text$mn:00004EA8                 ;org 4EA8h
.text$mn:00004EA8 ; COMDAT (pick any)
.text$mn:00004EA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EA8
.text$mn:00004EA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EA8
.text$mn:00004EA8 ; Attributes: bp-based frame
.text$mn:00004EA8
.text$mn:00004EA8 ; struct foundInfo * __cdecl std::_Unchecked<struct foundInfo *>(struct foundInfo *)
.text$mn:00004EA8                 public ??$_Unchecked@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z
.text$mn:00004EA8 ??$_Unchecked@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z proc near
.text$mn:00004EA8                                         ; CODE XREF: std::_Uninitialized_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+Bp
.text$mn:00004EA8                                         ; std::_Uninitialized_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+18p ...
.text$mn:00004EA8
.text$mn:00004EA8 arg_0           = dword ptr  8
.text$mn:00004EA8
.text$mn:00004EA8                 push    ebp
.text$mn:00004EA9                 mov     ebp, esp
.text$mn:00004EAB                 mov     eax, [ebp+arg_0]
.text$mn:00004EAE                 pop     ebp
.text$mn:00004EAF                 retn
.text$mn:00004EAF ??$_Unchecked@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z endp
.text$mn:00004EAF
.text$mn:00004EAF _text$mn        ends
.text$mn:00004EAF
.text$mn:00004EB0 ; ===========================================================================
.text$mn:00004EB0
.text$mn:00004EB0 ; Segment type: Pure code
.text$mn:00004EB0 ; Segment permissions: Read/Execute
.text$mn:00004EB0 _text$mn        segment para public 'CODE' use32
.text$mn:00004EB0                 assume cs:_text$mn
.text$mn:00004EB0                 ;org 4EB0h
.text$mn:00004EB0 ; COMDAT (pick any)
.text$mn:00004EB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EB0
.text$mn:00004EB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EB0
.text$mn:00004EB0 ; Attributes: bp-based frame
.text$mn:00004EB0
.text$mn:00004EB0 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Unchecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00004EB0                 public ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00004EB0 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00004EB0                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+34p
.text$mn:00004EB0                                         ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Bp ...
.text$mn:00004EB0
.text$mn:00004EB0 arg_0           = dword ptr  8
.text$mn:00004EB0
.text$mn:00004EB0                 push    ebp
.text$mn:00004EB1                 mov     ebp, esp
.text$mn:00004EB3                 mov     eax, [ebp+arg_0]
.text$mn:00004EB6                 pop     ebp
.text$mn:00004EB7                 retn
.text$mn:00004EB7 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00004EB7
.text$mn:00004EB7 _text$mn        ends
.text$mn:00004EB7
.text$mn:00004EB8 ; ===========================================================================
.text$mn:00004EB8
.text$mn:00004EB8 ; Segment type: Pure code
.text$mn:00004EB8 ; Segment permissions: Read/Execute
.text$mn:00004EB8 _text$mn        segment para public 'CODE' use32
.text$mn:00004EB8                 assume cs:_text$mn
.text$mn:00004EB8                 ;org 4EB8h
.text$mn:00004EB8 ; COMDAT (pick any)
.text$mn:00004EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EB8
.text$mn:00004EB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EB8
.text$mn:00004EB8 ; Attributes: bp-based frame
.text$mn:00004EB8
.text$mn:00004EB8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const * __cdecl std::_Unchecked<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>)
.text$mn:00004EB8                 public ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$mn:00004EB8 ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z proc near
.text$mn:00004EB8                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+5Fp
.text$mn:00004EB8                                         ; std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+90p
.text$mn:00004EB8
.text$mn:00004EB8 var_10          = dword ptr -10h
.text$mn:00004EB8 var_C           = dword ptr -0Ch
.text$mn:00004EB8 var_4           = dword ptr -4
.text$mn:00004EB8 arg_0           = byte ptr  8
.text$mn:00004EB8
.text$mn:00004EB8                 push    ebp
.text$mn:00004EB9                 mov     ebp, esp
.text$mn:00004EBB                 push    0FFFFFFFFh
.text$mn:00004EBD                 push    offset __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$mn:00004EC2                 mov     eax, large fs:0
.text$mn:00004EC8                 push    eax
.text$mn:00004EC9                 push    ecx
.text$mn:00004ECA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004ECF                 xor     eax, ebp
.text$mn:00004ED1                 push    eax
.text$mn:00004ED2                 lea     eax, [ebp+var_C]
.text$mn:00004ED5                 mov     large fs:0, eax
.text$mn:00004EDB                 mov     [ebp+var_4], 0
.text$mn:00004EE2                 lea     ecx, [ebp+arg_0]
.text$mn:00004EE5                 call    ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Unchecked(void)
.text$mn:00004EEA                 mov     [ebp+var_10], eax
.text$mn:00004EED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004EF4                 lea     ecx, [ebp+arg_0]
.text$mn:00004EF7                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00004EFC                 mov     eax, [ebp+var_10]
.text$mn:00004EFF                 mov     ecx, [ebp+var_C]
.text$mn:00004F02                 mov     large fs:0, ecx
.text$mn:00004F09                 pop     ecx
.text$mn:00004F0A                 mov     esp, ebp
.text$mn:00004F0C                 pop     ebp
.text$mn:00004F0D                 retn
.text$mn:00004F0D ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z endp
.text$mn:00004F0D
.text$mn:00004F0D ; ---------------------------------------------------------------------------
.text$mn:00004F0E                 align 10h
.text$mn:00004F0E _text$mn        ends
.text$mn:00004F0E
.text$x:00004F10 ; ===========================================================================
.text$x:00004F10
.text$x:00004F10 ; Segment type: Pure code
.text$x:00004F10 ; Segment permissions: Read/Execute
.text$x:00004F10 _text$x         segment para public 'CODE' use32
.text$x:00004F10                 assume cs:_text$x
.text$x:00004F10                 ;org 4F10h
.text$x:00004F10 ; COMDAT (pick associative to section at 4EB8)
.text$x:00004F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004F10
.text$x:00004F10 ; =============== S U B R O U T I N E =======================================
.text$x:00004F10
.text$x:00004F10
.text$x:00004F10 __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0 proc near
.text$x:00004F10                                         ; DATA XREF: .xdata$x:00010A10o
.text$x:00004F10                 lea     ecx, [ebp+8]
.text$x:00004F13                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004F13 __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0 endp
.text$x:00004F13
.text$x:00004F18
.text$x:00004F18 ; =============== S U B R O U T I N E =======================================
.text$x:00004F18
.text$x:00004F18
.text$x:00004F18 __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z proc near
.text$x:00004F18                                         ; DATA XREF: std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+5o
.text$x:00004F18
.text$x:00004F18 arg_4           = dword ptr  8
.text$x:00004F18
.text$x:00004F18                 mov     edx, [esp+arg_4]
.text$x:00004F1C                 lea     eax, [edx+0Ch]
.text$x:00004F1F                 mov     ecx, [edx-8]
.text$x:00004F22                 xor     ecx, eax
.text$x:00004F24                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004F29                 mov     eax, offset __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.text$x:00004F2E                 jmp     ___CxxFrameHandler3
.text$x:00004F2E __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z endp
.text$x:00004F2E
.text$x:00004F2E ; ---------------------------------------------------------------------------
.text$x:00004F33                 align 4
.text$x:00004F33 _text$x         ends
.text$x:00004F33
.text$mn:00004F34 ; ===========================================================================
.text$mn:00004F34
.text$mn:00004F34 ; Segment type: Pure code
.text$mn:00004F34 ; Segment permissions: Read/Execute
.text$mn:00004F34 _text$mn        segment para public 'CODE' use32
.text$mn:00004F34                 assume cs:_text$mn
.text$mn:00004F34                 ;org 4F34h
.text$mn:00004F34 ; COMDAT (pick any)
.text$mn:00004F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F34
.text$mn:00004F34 ; =============== S U B R O U T I N E =======================================
.text$mn:00004F34
.text$mn:00004F34 ; Attributes: bp-based frame
.text$mn:00004F34
.text$mn:00004F34 ; int __cdecl std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, int, void *, int)
.text$mn:00004F34                 public ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00004F34 ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00004F34                                         ; CODE XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+9Fp
.text$mn:00004F34
.text$mn:00004F34 var_1           = byte ptr -1
.text$mn:00004F34 arg_0           = dword ptr  8
.text$mn:00004F34 arg_4           = dword ptr  0Ch
.text$mn:00004F34 arg_8           = dword ptr  10h
.text$mn:00004F34 arg_C           = dword ptr  14h
.text$mn:00004F34
.text$mn:00004F34                 push    ebp
.text$mn:00004F35                 mov     ebp, esp
.text$mn:00004F37                 push    ecx
.text$mn:00004F38                 mov     eax, [ebp+arg_8]
.text$mn:00004F3B                 push    eax
.text$mn:00004F3C                 mov     ecx, [ebp+arg_0]
.text$mn:00004F3F                 push    ecx
.text$mn:00004F40                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV20@@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00004F45                 add     esp, 8
.text$mn:00004F48                 mov     [ebp+var_1], al
.text$mn:00004F4B                 movzx   edx, [ebp+var_1]
.text$mn:00004F4F                 push    edx
.text$mn:00004F50                 mov     eax, [ebp+arg_C]
.text$mn:00004F53                 push    eax             ; int
.text$mn:00004F54                 mov     ecx, [ebp+arg_8]
.text$mn:00004F57                 push    ecx             ; void *
.text$mn:00004F58                 mov     edx, [ebp+arg_4]
.text$mn:00004F5B                 push    edx             ; int
.text$mn:00004F5C                 mov     eax, [ebp+arg_0]
.text$mn:00004F5F                 push    eax             ; int
.text$mn:00004F60                 call    ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00004F65                 add     esp, 14h
.text$mn:00004F68                 mov     esp, ebp
.text$mn:00004F6A                 pop     ebp
.text$mn:00004F6B                 retn
.text$mn:00004F6B ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00004F6B
.text$mn:00004F6B _text$mn        ends
.text$mn:00004F6B
.text$mn:00004F6C ; ===========================================================================
.text$mn:00004F6C
.text$mn:00004F6C ; Segment type: Pure code
.text$mn:00004F6C ; Segment permissions: Read/Execute
.text$mn:00004F6C _text$mn        segment para public 'CODE' use32
.text$mn:00004F6C                 assume cs:_text$mn
.text$mn:00004F6C                 ;org 4F6Ch
.text$mn:00004F6C ; COMDAT (pick any)
.text$mn:00004F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004F6C
.text$mn:00004F6C ; =============== S U B R O U T I N E =======================================
.text$mn:00004F6C
.text$mn:00004F6C ; Attributes: bp-based frame
.text$mn:00004F6C
.text$mn:00004F6C ; int __cdecl std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(int, int, void *, int)
.text$mn:00004F6C                 public ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004F6C ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00004F6C                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+2Cp
.text$mn:00004F6C
.text$mn:00004F6C var_14          = dword ptr -14h
.text$mn:00004F6C var_10          = dword ptr -10h
.text$mn:00004F6C var_C           = dword ptr -0Ch
.text$mn:00004F6C var_4           = dword ptr -4
.text$mn:00004F6C arg_0           = dword ptr  8
.text$mn:00004F6C arg_4           = dword ptr  0Ch
.text$mn:00004F6C arg_8           = dword ptr  10h
.text$mn:00004F6C arg_C           = dword ptr  14h
.text$mn:00004F6C
.text$mn:00004F6C ; FUNCTION CHUNK AT .text$mn:00005033 SIZE 00000009 BYTES
.text$mn:00004F6C ; FUNCTION CHUNK AT .text$mn:00005043 SIZE 00000015 BYTES
.text$mn:00004F6C
.text$mn:00004F6C                 push    ebp
.text$mn:00004F6D                 mov     ebp, esp
.text$mn:00004F6F                 push    0FFFFFFFFh
.text$mn:00004F71                 push    offset __ehhandler$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00004F76                 mov     eax, large fs:0
.text$mn:00004F7C                 push    eax
.text$mn:00004F7D                 push    ecx
.text$mn:00004F7E                 push    ecx
.text$mn:00004F7F                 push    ebx
.text$mn:00004F80                 push    esi
.text$mn:00004F81                 push    edi
.text$mn:00004F82                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004F87                 xor     eax, ebp
.text$mn:00004F89                 push    eax
.text$mn:00004F8A                 lea     eax, [ebp+var_C]
.text$mn:00004F8D                 mov     large fs:0, eax
.text$mn:00004F93                 mov     [ebp+var_10], esp
.text$mn:00004F96                 push    174h            ; unsigned int
.text$mn:00004F9B                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004FA0                 mov     eax, [ebp+arg_4]
.text$mn:00004FA3                 push    eax             ; int
.text$mn:00004FA4                 mov     ecx, [ebp+arg_0]
.text$mn:00004FA7                 push    ecx             ; int
.text$mn:00004FA8                 call    ??$_Debug_range@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,wchar_t const *,uint)
.text$mn:00004FAD                 add     esp, 10h
.text$mn:00004FB0                 push    175h            ; unsigned int
.text$mn:00004FB5                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00004FBA                 mov     edx, [ebp+arg_8]
.text$mn:00004FBD                 push    edx             ; int
.text$mn:00004FBE                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00004FC3                 add     esp, 0Ch
.text$mn:00004FC6                 mov     eax, [ebp+arg_8]
.text$mn:00004FC9                 mov     [ebp+var_14], eax
.text$mn:00004FCC                 mov     [ebp+var_4], 0
.text$mn:00004FD3                 jmp     short loc_4FE7
.text$mn:00004FD5 ; ---------------------------------------------------------------------------
.text$mn:00004FD5
.text$mn:00004FD5 loc_4FD5:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00004FD5                 mov     ecx, [ebp+arg_8]
.text$mn:00004FD8                 add     ecx, 1Ch
.text$mn:00004FDB                 mov     [ebp+arg_8], ecx
.text$mn:00004FDE                 mov     edx, [ebp+arg_0]
.text$mn:00004FE1                 add     edx, 1Ch
.text$mn:00004FE4                 mov     [ebp+arg_0], edx
.text$mn:00004FE7
.text$mn:00004FE7 loc_4FE7:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00004FE7                 mov     eax, [ebp+arg_0]
.text$mn:00004FEA                 cmp     eax, [ebp+arg_4]
.text$mn:00004FED                 jz      short loc_5001
.text$mn:00004FEF                 mov     ecx, [ebp+arg_0]
.text$mn:00004FF2                 push    ecx             ; int
.text$mn:00004FF3                 mov     edx, [ebp+arg_8]
.text$mn:00004FF6                 push    edx             ; void *
.text$mn:00004FF7                 mov     ecx, [ebp+arg_C]
.text$mn:00004FFA                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004FFF                 jmp     short loc_4FD5
.text$mn:00005001 ; ---------------------------------------------------------------------------
.text$mn:00005001
.text$mn:00005001 loc_5001:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00005001                 jmp     short loc_5033
.text$mn:00005001 ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005001
.text$mn:00005003
.text$mn:00005003 ; =============== S U B R O U T I N E =======================================
.text$mn:00005003
.text$mn:00005003 ; Attributes: noreturn
.text$mn:00005003
.text$mn:00005003 __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:00005003                                         ; DATA XREF: .xdata$x:00010B78o
.text$mn:00005003                 jmp     short loc_500E
.text$mn:00005005 ; ---------------------------------------------------------------------------
.text$mn:00005005
.text$mn:00005005 loc_5005:                               ; CODE XREF: __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00005005                 mov     eax, [ebp-14h]
.text$mn:00005008                 add     eax, 1Ch
.text$mn:0000500B                 mov     [ebp-14h], eax
.text$mn:0000500E
.text$mn:0000500E loc_500E:                               ; CODE XREF: __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:0000500E                 mov     ecx, [ebp-14h]
.text$mn:00005011                 cmp     ecx, [ebp+10h]
.text$mn:00005014                 jz      short loc_5024
.text$mn:00005016                 mov     edx, [ebp-14h]
.text$mn:00005019                 push    edx
.text$mn:0000501A                 mov     ecx, [ebp+14h]
.text$mn:0000501D                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005022                 jmp     short loc_5005
.text$mn:00005024 ; ---------------------------------------------------------------------------
.text$mn:00005024
.text$mn:00005024 loc_5024:                               ; CODE XREF: __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00005024                 push    0
.text$mn:00005026                 push    0
.text$mn:00005028                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005028 __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00005028
.text$mn:0000502D ; ---------------------------------------------------------------------------
.text$mn:0000502D                 mov     eax, offset $LN13
.text$mn:00005032                 retn
.text$mn:00005033 ; ---------------------------------------------------------------------------
.text$mn:00005033 ; START OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005033
.text$mn:00005033 loc_5033:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag):loc_5001j
.text$mn:00005033                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000503A                 jmp     short loc_5043
.text$mn:0000503A ; END OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000503C
.text$mn:0000503C ; =============== S U B R O U T I N E =======================================
.text$mn:0000503C
.text$mn:0000503C
.text$mn:0000503C $LN13           proc near               ; DATA XREF: .text$mn:0000502Do
.text$mn:0000503C                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000503C $LN13           endp ; sp-analysis failed
.text$mn:0000503C
.text$mn:00005043 ; START OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005043
.text$mn:00005043 loc_5043:                               ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:00005043                 mov     eax, [ebp+arg_8]
.text$mn:00005046                 mov     ecx, [ebp+var_C]
.text$mn:00005049                 mov     large fs:0, ecx
.text$mn:00005050                 pop     ecx
.text$mn:00005051                 pop     edi
.text$mn:00005052                 pop     esi
.text$mn:00005053                 pop     ebx
.text$mn:00005054                 mov     esp, ebp
.text$mn:00005056                 pop     ebp
.text$mn:00005057                 retn
.text$mn:00005057 ; END OF FUNCTION CHUNK FOR ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005057 _text$mn        ends
.text$mn:00005057
.text$x:00005058 ; ===========================================================================
.text$x:00005058
.text$x:00005058 ; Segment type: Pure code
.text$x:00005058 ; Segment permissions: Read/Execute
.text$x:00005058 _text$x         segment para public 'CODE' use32
.text$x:00005058                 assume cs:_text$x
.text$x:00005058                 ;org 5058h
.text$x:00005058 ; COMDAT (pick associative to section at 4F6C)
.text$x:00005058                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005058
.text$x:00005058 ; =============== S U B R O U T I N E =======================================
.text$x:00005058
.text$x:00005058
.text$x:00005058 __ehhandler$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00005058                                         ; DATA XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00005058
.text$x:00005058 arg_4           = dword ptr  8
.text$x:00005058
.text$x:00005058                 mov     edx, [esp+arg_4]
.text$x:0000505C                 lea     eax, [edx+0Ch]
.text$x:0000505F                 mov     ecx, [edx-18h]
.text$x:00005062                 xor     ecx, eax
.text$x:00005064                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005069                 mov     eax, offset __ehfuncinfo$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:0000506E                 jmp     ___CxxFrameHandler3
.text$x:0000506E __ehhandler$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:0000506E
.text$x:0000506E ; ---------------------------------------------------------------------------
.text$x:00005073                 align 4
.text$x:00005073 _text$x         ends
.text$x:00005073
.text$mn:00005074 ; ===========================================================================
.text$mn:00005074
.text$mn:00005074 ; Segment type: Pure code
.text$mn:00005074 ; Segment permissions: Read/Execute
.text$mn:00005074 _text$mn        segment para public 'CODE' use32
.text$mn:00005074                 assume cs:_text$mn
.text$mn:00005074                 ;org 5074h
.text$mn:00005074 ; COMDAT (pick any)
.text$mn:00005074                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005074
.text$mn:00005074 ; =============== S U B R O U T I N E =======================================
.text$mn:00005074
.text$mn:00005074 ; Attributes: bp-based frame
.text$mn:00005074
.text$mn:00005074 ; int __cdecl std::_Uninit_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(void *Src, int, void *Dst, int)
.text$mn:00005074                 public ??$_Uninit_move@PAPAVFunctionParser@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z
.text$mn:00005074 ??$_Uninit_move@PAPAVFunctionParser@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z proc near
.text$mn:00005074                                         ; CODE XREF: std::_Uninitialized_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+2Ep
.text$mn:00005074
.text$mn:00005074 var_1           = byte ptr -1
.text$mn:00005074 Src             = dword ptr  8
.text$mn:00005074 arg_4           = dword ptr  0Ch
.text$mn:00005074 Dst             = dword ptr  10h
.text$mn:00005074 arg_C           = dword ptr  14h
.text$mn:00005074
.text$mn:00005074                 push    ebp
.text$mn:00005075                 mov     ebp, esp
.text$mn:00005077                 push    ecx
.text$mn:00005078                 mov     eax, [ebp+Dst]
.text$mn:0000507B                 push    eax
.text$mn:0000507C                 mov     ecx, [ebp+Src]
.text$mn:0000507F                 push    ecx
.text$mn:00005080                 call    ??$_Ptr_cat@PAVFunctionParser@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVFunctionParser@@0@Z ; std::_Ptr_cat<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * *)
.text$mn:00005085                 add     esp, 8
.text$mn:00005088                 mov     [ebp+var_1], al
.text$mn:0000508B                 movzx   edx, [ebp+var_1]
.text$mn:0000508F                 push    edx
.text$mn:00005090                 mov     eax, [ebp+Src]
.text$mn:00005093                 push    eax
.text$mn:00005094                 call    ??$_Val_type@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z ; std::_Val_type<FunctionParser * *>(FunctionParser * *)
.text$mn:00005099                 add     esp, 4
.text$mn:0000509C                 push    eax
.text$mn:0000509D                 mov     ecx, [ebp+arg_C]
.text$mn:000050A0                 push    ecx
.text$mn:000050A1                 mov     edx, [ebp+Dst]
.text$mn:000050A4                 push    edx             ; Dst
.text$mn:000050A5                 mov     eax, [ebp+arg_4]
.text$mn:000050A8                 push    eax             ; int
.text$mn:000050A9                 mov     ecx, [ebp+Src]
.text$mn:000050AC                 push    ecx             ; Src
.text$mn:000050AD                 call    ??$_Uninit_move@PAVFunctionParser@@PAV1@PAV1@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<FunctionParser *,FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &,FunctionParser * *,std::_Scalar_ptr_iterator_tag)
.text$mn:000050B2                 add     esp, 18h
.text$mn:000050B5                 mov     esp, ebp
.text$mn:000050B7                 pop     ebp
.text$mn:000050B8                 retn
.text$mn:000050B8 ??$_Uninit_move@PAPAVFunctionParser@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z endp
.text$mn:000050B8
.text$mn:000050B8 ; ---------------------------------------------------------------------------
.text$mn:000050B9                 align 4
.text$mn:000050B9 _text$mn        ends
.text$mn:000050B9
.text$mn:000050BC ; ===========================================================================
.text$mn:000050BC
.text$mn:000050BC ; Segment type: Pure code
.text$mn:000050BC ; Segment permissions: Read/Execute
.text$mn:000050BC _text$mn        segment para public 'CODE' use32
.text$mn:000050BC                 assume cs:_text$mn
.text$mn:000050BC                 ;org 50BCh
.text$mn:000050BC ; COMDAT (pick any)
.text$mn:000050BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050BC
.text$mn:000050BC ; =============== S U B R O U T I N E =======================================
.text$mn:000050BC
.text$mn:000050BC ; Attributes: bp-based frame
.text$mn:000050BC
.text$mn:000050BC ; int __cdecl std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(int, int, void *, int)
.text$mn:000050BC                 public ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z
.text$mn:000050BC ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z proc near
.text$mn:000050BC                                         ; CODE XREF: std::_Uninitialized_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+2Ep
.text$mn:000050BC
.text$mn:000050BC var_1           = byte ptr -1
.text$mn:000050BC arg_0           = dword ptr  8
.text$mn:000050BC arg_4           = dword ptr  0Ch
.text$mn:000050BC arg_8           = dword ptr  10h
.text$mn:000050BC arg_C           = dword ptr  14h
.text$mn:000050BC
.text$mn:000050BC                 push    ebp
.text$mn:000050BD                 mov     ebp, esp
.text$mn:000050BF                 push    ecx
.text$mn:000050C0                 mov     eax, [ebp+arg_8]
.text$mn:000050C3                 push    eax
.text$mn:000050C4                 mov     ecx, [ebp+arg_0]
.text$mn:000050C7                 push    ecx
.text$mn:000050C8                 call    ??$_Ptr_cat@U?$pair@HH@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@HH@0@0@Z ; std::_Ptr_cat<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *)
.text$mn:000050CD                 add     esp, 8
.text$mn:000050D0                 mov     [ebp+var_1], al
.text$mn:000050D3                 movzx   edx, [ebp+var_1]
.text$mn:000050D7                 push    edx
.text$mn:000050D8                 mov     eax, [ebp+arg_0]
.text$mn:000050DB                 push    eax
.text$mn:000050DC                 call    ??$_Val_type@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z ; std::_Val_type<std::pair<int,int> *>(std::pair<int,int> *)
.text$mn:000050E1                 add     esp, 4
.text$mn:000050E4                 push    eax
.text$mn:000050E5                 mov     ecx, [ebp+arg_C]
.text$mn:000050E8                 push    ecx             ; int
.text$mn:000050E9                 mov     edx, [ebp+arg_8]
.text$mn:000050EC                 push    edx             ; void *
.text$mn:000050ED                 mov     eax, [ebp+arg_4]
.text$mn:000050F0                 push    eax             ; int
.text$mn:000050F1                 mov     ecx, [ebp+arg_0]
.text$mn:000050F4                 push    ecx             ; int
.text$mn:000050F5                 call    ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000050FA                 add     esp, 18h
.text$mn:000050FD                 mov     esp, ebp
.text$mn:000050FF                 pop     ebp
.text$mn:00005100                 retn
.text$mn:00005100 ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z endp
.text$mn:00005100
.text$mn:00005100 ; ---------------------------------------------------------------------------
.text$mn:00005101                 align 4
.text$mn:00005101 _text$mn        ends
.text$mn:00005101
.text$mn:00005104 ; ===========================================================================
.text$mn:00005104
.text$mn:00005104 ; Segment type: Pure code
.text$mn:00005104 ; Segment permissions: Read/Execute
.text$mn:00005104 _text$mn        segment para public 'CODE' use32
.text$mn:00005104                 assume cs:_text$mn
.text$mn:00005104                 ;org 5104h
.text$mn:00005104 ; COMDAT (pick any)
.text$mn:00005104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005104
.text$mn:00005104 ; =============== S U B R O U T I N E =======================================
.text$mn:00005104
.text$mn:00005104 ; Attributes: bp-based frame
.text$mn:00005104
.text$mn:00005104 ; int __cdecl std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(int, int, void *, int)
.text$mn:00005104                 public ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005104 ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00005104                                         ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+39p
.text$mn:00005104
.text$mn:00005104 var_14          = dword ptr -14h
.text$mn:00005104 var_10          = dword ptr -10h
.text$mn:00005104 var_C           = dword ptr -0Ch
.text$mn:00005104 var_4           = dword ptr -4
.text$mn:00005104 arg_0           = dword ptr  8
.text$mn:00005104 arg_4           = dword ptr  0Ch
.text$mn:00005104 arg_8           = dword ptr  10h
.text$mn:00005104 arg_C           = dword ptr  14h
.text$mn:00005104
.text$mn:00005104 ; FUNCTION CHUNK AT .text$mn:000051CB SIZE 00000009 BYTES
.text$mn:00005104 ; FUNCTION CHUNK AT .text$mn:000051DB SIZE 00000015 BYTES
.text$mn:00005104
.text$mn:00005104                 push    ebp
.text$mn:00005105                 mov     ebp, esp
.text$mn:00005107                 push    0FFFFFFFFh
.text$mn:00005109                 push    offset __ehhandler$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000510E                 mov     eax, large fs:0
.text$mn:00005114                 push    eax
.text$mn:00005115                 push    ecx
.text$mn:00005116                 push    ecx
.text$mn:00005117                 push    ebx
.text$mn:00005118                 push    esi
.text$mn:00005119                 push    edi
.text$mn:0000511A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000511F                 xor     eax, ebp
.text$mn:00005121                 push    eax
.text$mn:00005122                 lea     eax, [ebp+var_C]
.text$mn:00005125                 mov     large fs:0, eax
.text$mn:0000512B                 mov     [ebp+var_10], esp
.text$mn:0000512E                 push    1B6h            ; unsigned int
.text$mn:00005133                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005138                 mov     eax, [ebp+arg_4]
.text$mn:0000513B                 push    eax             ; int
.text$mn:0000513C                 mov     ecx, [ebp+arg_0]
.text$mn:0000513F                 push    ecx             ; int
.text$mn:00005140                 call    ??$_Debug_range@PAU?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@0PB_WI@Z ; std::_Debug_range<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint)
.text$mn:00005145                 add     esp, 10h
.text$mn:00005148                 push    1B7h            ; unsigned int
.text$mn:0000514D                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005152                 mov     edx, [ebp+arg_8]
.text$mn:00005155                 push    edx             ; int
.text$mn:00005156                 call    ??$_Debug_pointer@U?$pair@HH@std@@@std@@YAXPAU?$pair@HH@0@PB_WI@Z ; std::_Debug_pointer<std::pair<int,int>>(std::pair<int,int> *,wchar_t const *,uint)
.text$mn:0000515B                 add     esp, 0Ch
.text$mn:0000515E                 mov     eax, [ebp+arg_8]
.text$mn:00005161                 mov     [ebp+var_14], eax
.text$mn:00005164                 mov     [ebp+var_4], 0
.text$mn:0000516B                 jmp     short loc_517F
.text$mn:0000516D ; ---------------------------------------------------------------------------
.text$mn:0000516D
.text$mn:0000516D loc_516D:                               ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:0000516D                 mov     ecx, [ebp+arg_8]
.text$mn:00005170                 add     ecx, 8
.text$mn:00005173                 mov     [ebp+arg_8], ecx
.text$mn:00005176                 mov     edx, [ebp+arg_0]
.text$mn:00005179                 add     edx, 8
.text$mn:0000517C                 mov     [ebp+arg_0], edx
.text$mn:0000517F
.text$mn:0000517F loc_517F:                               ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:0000517F                 mov     eax, [ebp+arg_0]
.text$mn:00005182                 cmp     eax, [ebp+arg_4]
.text$mn:00005185                 jz      short loc_5199
.text$mn:00005187                 mov     ecx, [ebp+arg_0]
.text$mn:0000518A                 push    ecx             ; int
.text$mn:0000518B                 mov     edx, [ebp+arg_8]
.text$mn:0000518E                 push    edx             ; void *
.text$mn:0000518F                 mov     ecx, [ebp+arg_C]
.text$mn:00005192                 call    ??$construct@U?$pair@HH@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)
.text$mn:00005197                 jmp     short loc_516D
.text$mn:00005199 ; ---------------------------------------------------------------------------
.text$mn:00005199
.text$mn:00005199 loc_5199:                               ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00005199                 jmp     short loc_51CB
.text$mn:00005199 ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005199
.text$mn:0000519B
.text$mn:0000519B ; =============== S U B R O U T I N E =======================================
.text$mn:0000519B
.text$mn:0000519B ; Attributes: noreturn
.text$mn:0000519B
.text$mn:0000519B __catch$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:0000519B                                         ; DATA XREF: .xdata$x:00010CD8o
.text$mn:0000519B                 jmp     short loc_51A6
.text$mn:0000519D ; ---------------------------------------------------------------------------
.text$mn:0000519D
.text$mn:0000519D loc_519D:                               ; CODE XREF: __catch$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:0000519D                 mov     eax, [ebp-14h]
.text$mn:000051A0                 add     eax, 8
.text$mn:000051A3                 mov     [ebp-14h], eax
.text$mn:000051A6
.text$mn:000051A6 loc_51A6:                               ; CODE XREF: __catch$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:000051A6                 mov     ecx, [ebp-14h]
.text$mn:000051A9                 cmp     ecx, [ebp+10h]
.text$mn:000051AC                 jz      short loc_51BC
.text$mn:000051AE                 mov     edx, [ebp-14h]
.text$mn:000051B1                 push    edx
.text$mn:000051B2                 mov     ecx, [ebp+14h]
.text$mn:000051B5                 call    ??$destroy@U?$pair@HH@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::destroy<std::pair<int,int>>(std::pair<int,int> *)
.text$mn:000051BA                 jmp     short loc_519D
.text$mn:000051BC ; ---------------------------------------------------------------------------
.text$mn:000051BC
.text$mn:000051BC loc_51BC:                               ; CODE XREF: __catch$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:000051BC                 push    0
.text$mn:000051BE                 push    0
.text$mn:000051C0                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000051C0 __catch$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:000051C0
.text$mn:000051C5 ; ---------------------------------------------------------------------------
.text$mn:000051C5                 mov     eax, offset $LN13_3
.text$mn:000051CA                 retn
.text$mn:000051CB ; ---------------------------------------------------------------------------
.text$mn:000051CB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000051CB
.text$mn:000051CB loc_51CB:                               ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag):loc_5199j
.text$mn:000051CB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000051D2                 jmp     short loc_51DB
.text$mn:000051D2 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000051D4
.text$mn:000051D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000051D4
.text$mn:000051D4
.text$mn:000051D4 $LN13_3         proc near               ; DATA XREF: .text$mn:000051C5o
.text$mn:000051D4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000051D4 $LN13_3         endp ; sp-analysis failed
.text$mn:000051D4
.text$mn:000051DB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000051DB
.text$mn:000051DB loc_51DB:                               ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:000051DB                 mov     eax, [ebp+arg_8]
.text$mn:000051DE                 mov     ecx, [ebp+var_C]
.text$mn:000051E1                 mov     large fs:0, ecx
.text$mn:000051E8                 pop     ecx
.text$mn:000051E9                 pop     edi
.text$mn:000051EA                 pop     esi
.text$mn:000051EB                 pop     ebx
.text$mn:000051EC                 mov     esp, ebp
.text$mn:000051EE                 pop     ebp
.text$mn:000051EF                 retn
.text$mn:000051EF ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000051EF _text$mn        ends
.text$mn:000051EF
.text$x:000051F0 ; ===========================================================================
.text$x:000051F0
.text$x:000051F0 ; Segment type: Pure code
.text$x:000051F0 ; Segment permissions: Read/Execute
.text$x:000051F0 _text$x         segment para public 'CODE' use32
.text$x:000051F0                 assume cs:_text$x
.text$x:000051F0                 ;org 51F0h
.text$x:000051F0 ; COMDAT (pick associative to section at 5104)
.text$x:000051F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000051F0
.text$x:000051F0 ; =============== S U B R O U T I N E =======================================
.text$x:000051F0
.text$x:000051F0
.text$x:000051F0 __ehhandler$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:000051F0                                         ; DATA XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:000051F0
.text$x:000051F0 arg_4           = dword ptr  8
.text$x:000051F0
.text$x:000051F0                 mov     edx, [esp+arg_4]
.text$x:000051F4                 lea     eax, [edx+0Ch]
.text$x:000051F7                 mov     ecx, [edx-18h]
.text$x:000051FA                 xor     ecx, eax
.text$x:000051FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005201                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:00005206                 jmp     ___CxxFrameHandler3
.text$x:00005206 __ehhandler$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:00005206
.text$x:00005206 ; ---------------------------------------------------------------------------
.text$x:0000520B                 align 4
.text$x:0000520B _text$x         ends
.text$x:0000520B
.text$mn:0000520C ; ===========================================================================
.text$mn:0000520C
.text$mn:0000520C ; Segment type: Pure code
.text$mn:0000520C ; Segment permissions: Read/Execute
.text$mn:0000520C _text$mn        segment para public 'CODE' use32
.text$mn:0000520C                 assume cs:_text$mn
.text$mn:0000520C                 ;org 520Ch
.text$mn:0000520C ; COMDAT (pick any)
.text$mn:0000520C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000520C
.text$mn:0000520C ; =============== S U B R O U T I N E =======================================
.text$mn:0000520C
.text$mn:0000520C ; Attributes: bp-based frame
.text$mn:0000520C
.text$mn:0000520C ; int __cdecl std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(int, int, void *, int)
.text$mn:0000520C                 public ??$_Uninit_move@PAUAssociationInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z
.text$mn:0000520C ??$_Uninit_move@PAUAssociationInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z proc near
.text$mn:0000520C                                         ; CODE XREF: std::_Uninitialized_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+2Ep
.text$mn:0000520C
.text$mn:0000520C var_1           = byte ptr -1
.text$mn:0000520C arg_0           = dword ptr  8
.text$mn:0000520C arg_4           = dword ptr  0Ch
.text$mn:0000520C arg_8           = dword ptr  10h
.text$mn:0000520C arg_C           = dword ptr  14h
.text$mn:0000520C
.text$mn:0000520C                 push    ebp
.text$mn:0000520D                 mov     ebp, esp
.text$mn:0000520F                 push    ecx
.text$mn:00005210                 mov     eax, [ebp+arg_8]
.text$mn:00005213                 push    eax
.text$mn:00005214                 mov     ecx, [ebp+arg_0]
.text$mn:00005217                 push    ecx
.text$mn:00005218                 call    ??$_Ptr_cat@UAssociationInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUAssociationInfo@@0@Z ; std::_Ptr_cat<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo *)
.text$mn:0000521D                 add     esp, 8
.text$mn:00005220                 mov     [ebp+var_1], al
.text$mn:00005223                 movzx   edx, [ebp+var_1]
.text$mn:00005227                 push    edx
.text$mn:00005228                 mov     eax, [ebp+arg_0]
.text$mn:0000522B                 push    eax
.text$mn:0000522C                 call    ??$_Val_type@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z ; std::_Val_type<AssociationInfo *>(AssociationInfo *)
.text$mn:00005231                 add     esp, 4
.text$mn:00005234                 push    eax
.text$mn:00005235                 mov     ecx, [ebp+arg_C]
.text$mn:00005238                 push    ecx             ; int
.text$mn:00005239                 mov     edx, [ebp+arg_8]
.text$mn:0000523C                 push    edx             ; void *
.text$mn:0000523D                 mov     eax, [ebp+arg_4]
.text$mn:00005240                 push    eax             ; int
.text$mn:00005241                 mov     ecx, [ebp+arg_0]
.text$mn:00005244                 push    ecx             ; int
.text$mn:00005245                 call    ??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:0000524A                 add     esp, 18h
.text$mn:0000524D                 mov     esp, ebp
.text$mn:0000524F                 pop     ebp
.text$mn:00005250                 retn
.text$mn:00005250 ??$_Uninit_move@PAUAssociationInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z endp
.text$mn:00005250
.text$mn:00005250 ; ---------------------------------------------------------------------------
.text$mn:00005251                 align 4
.text$mn:00005251 _text$mn        ends
.text$mn:00005251
.text$mn:00005254 ; ===========================================================================
.text$mn:00005254
.text$mn:00005254 ; Segment type: Pure code
.text$mn:00005254 ; Segment permissions: Read/Execute
.text$mn:00005254 _text$mn        segment para public 'CODE' use32
.text$mn:00005254                 assume cs:_text$mn
.text$mn:00005254                 ;org 5254h
.text$mn:00005254 ; COMDAT (pick any)
.text$mn:00005254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005254
.text$mn:00005254 ; =============== S U B R O U T I N E =======================================
.text$mn:00005254
.text$mn:00005254 ; Attributes: bp-based frame
.text$mn:00005254
.text$mn:00005254 ; int __cdecl std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(int, int, void *, int)
.text$mn:00005254                 public ??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005254 ??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00005254                                         ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+39p
.text$mn:00005254
.text$mn:00005254 var_14          = dword ptr -14h
.text$mn:00005254 var_10          = dword ptr -10h
.text$mn:00005254 var_C           = dword ptr -0Ch
.text$mn:00005254 var_4           = dword ptr -4
.text$mn:00005254 arg_0           = dword ptr  8
.text$mn:00005254 arg_4           = dword ptr  0Ch
.text$mn:00005254 arg_8           = dword ptr  10h
.text$mn:00005254 arg_C           = dword ptr  14h
.text$mn:00005254
.text$mn:00005254 ; FUNCTION CHUNK AT .text$mn:0000531B SIZE 00000009 BYTES
.text$mn:00005254 ; FUNCTION CHUNK AT .text$mn:0000532B SIZE 00000015 BYTES
.text$mn:00005254
.text$mn:00005254                 push    ebp
.text$mn:00005255                 mov     ebp, esp
.text$mn:00005257                 push    0FFFFFFFFh
.text$mn:00005259                 push    offset __ehhandler$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000525E                 mov     eax, large fs:0
.text$mn:00005264                 push    eax
.text$mn:00005265                 push    ecx
.text$mn:00005266                 push    ecx
.text$mn:00005267                 push    ebx
.text$mn:00005268                 push    esi
.text$mn:00005269                 push    edi
.text$mn:0000526A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000526F                 xor     eax, ebp
.text$mn:00005271                 push    eax
.text$mn:00005272                 lea     eax, [ebp+var_C]
.text$mn:00005275                 mov     large fs:0, eax
.text$mn:0000527B                 mov     [ebp+var_10], esp
.text$mn:0000527E                 push    1B6h            ; unsigned int
.text$mn:00005283                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005288                 mov     eax, [ebp+arg_4]
.text$mn:0000528B                 push    eax             ; int
.text$mn:0000528C                 mov     ecx, [ebp+arg_0]
.text$mn:0000528F                 push    ecx             ; int
.text$mn:00005290                 call    ??$_Debug_range@PAUAssociationInfo@@@std@@YAXPAUAssociationInfo@@0PB_WI@Z ; std::_Debug_range<AssociationInfo *>(AssociationInfo *,AssociationInfo *,wchar_t const *,uint)
.text$mn:00005295                 add     esp, 10h
.text$mn:00005298                 push    1B7h            ; unsigned int
.text$mn:0000529D                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000052A2                 mov     edx, [ebp+arg_8]
.text$mn:000052A5                 push    edx             ; int
.text$mn:000052A6                 call    ??$_Debug_pointer@UAssociationInfo@@@std@@YAXPAUAssociationInfo@@PB_WI@Z ; std::_Debug_pointer<AssociationInfo>(AssociationInfo *,wchar_t const *,uint)
.text$mn:000052AB                 add     esp, 0Ch
.text$mn:000052AE                 mov     eax, [ebp+arg_8]
.text$mn:000052B1                 mov     [ebp+var_14], eax
.text$mn:000052B4                 mov     [ebp+var_4], 0
.text$mn:000052BB                 jmp     short loc_52CF
.text$mn:000052BD ; ---------------------------------------------------------------------------
.text$mn:000052BD
.text$mn:000052BD loc_52BD:                               ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:000052BD                 mov     ecx, [ebp+arg_8]
.text$mn:000052C0                 add     ecx, 40h ; '@'
.text$mn:000052C3                 mov     [ebp+arg_8], ecx
.text$mn:000052C6                 mov     edx, [ebp+arg_0]
.text$mn:000052C9                 add     edx, 40h ; '@'
.text$mn:000052CC                 mov     [ebp+arg_0], edx
.text$mn:000052CF
.text$mn:000052CF loc_52CF:                               ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:000052CF                 mov     eax, [ebp+arg_0]
.text$mn:000052D2                 cmp     eax, [ebp+arg_4]
.text$mn:000052D5                 jz      short loc_52E9
.text$mn:000052D7                 mov     ecx, [ebp+arg_0]
.text$mn:000052DA                 push    ecx             ; int
.text$mn:000052DB                 mov     edx, [ebp+arg_8]
.text$mn:000052DE                 push    edx             ; void *
.text$mn:000052DF                 mov     ecx, [ebp+arg_C]
.text$mn:000052E2                 call    ??$construct@UAssociationInfo@@U1@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)
.text$mn:000052E7                 jmp     short loc_52BD
.text$mn:000052E9 ; ---------------------------------------------------------------------------
.text$mn:000052E9
.text$mn:000052E9 loc_52E9:                               ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:000052E9                 jmp     short loc_531B
.text$mn:000052E9 ??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:000052E9
.text$mn:000052EB
.text$mn:000052EB ; =============== S U B R O U T I N E =======================================
.text$mn:000052EB
.text$mn:000052EB ; Attributes: noreturn
.text$mn:000052EB
.text$mn:000052EB __catch$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:000052EB                                         ; DATA XREF: .xdata$x:00010C28o
.text$mn:000052EB                 jmp     short loc_52F6
.text$mn:000052ED ; ---------------------------------------------------------------------------
.text$mn:000052ED
.text$mn:000052ED loc_52ED:                               ; CODE XREF: __catch$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:000052ED                 mov     eax, [ebp-14h]
.text$mn:000052F0                 add     eax, 40h ; '@'
.text$mn:000052F3                 mov     [ebp-14h], eax
.text$mn:000052F6
.text$mn:000052F6 loc_52F6:                               ; CODE XREF: __catch$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:000052F6                 mov     ecx, [ebp-14h]
.text$mn:000052F9                 cmp     ecx, [ebp+10h]
.text$mn:000052FC                 jz      short loc_530C
.text$mn:000052FE                 mov     edx, [ebp-14h]
.text$mn:00005301                 push    edx
.text$mn:00005302                 mov     ecx, [ebp+14h]
.text$mn:00005305                 call    ??$destroy@UAssociationInfo@@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::destroy<AssociationInfo>(AssociationInfo *)
.text$mn:0000530A                 jmp     short loc_52ED
.text$mn:0000530C ; ---------------------------------------------------------------------------
.text$mn:0000530C
.text$mn:0000530C loc_530C:                               ; CODE XREF: __catch$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:0000530C                 push    0
.text$mn:0000530E                 push    0
.text$mn:00005310                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005310 __catch$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00005310
.text$mn:00005315 ; ---------------------------------------------------------------------------
.text$mn:00005315                 mov     eax, offset $LN13_1
.text$mn:0000531A                 retn
.text$mn:0000531B ; ---------------------------------------------------------------------------
.text$mn:0000531B ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000531B
.text$mn:0000531B loc_531B:                               ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag):loc_52E9j
.text$mn:0000531B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005322                 jmp     short loc_532B
.text$mn:00005322 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005324
.text$mn:00005324 ; =============== S U B R O U T I N E =======================================
.text$mn:00005324
.text$mn:00005324
.text$mn:00005324 $LN13_1         proc near               ; DATA XREF: .text$mn:00005315o
.text$mn:00005324                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00005324 $LN13_1         endp ; sp-analysis failed
.text$mn:00005324
.text$mn:0000532B ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000532B
.text$mn:0000532B loc_532B:                               ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:0000532B                 mov     eax, [ebp+arg_8]
.text$mn:0000532E                 mov     ecx, [ebp+var_C]
.text$mn:00005331                 mov     large fs:0, ecx
.text$mn:00005338                 pop     ecx
.text$mn:00005339                 pop     edi
.text$mn:0000533A                 pop     esi
.text$mn:0000533B                 pop     ebx
.text$mn:0000533C                 mov     esp, ebp
.text$mn:0000533E                 pop     ebp
.text$mn:0000533F                 retn
.text$mn:0000533F ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000533F _text$mn        ends
.text$mn:0000533F
.text$x:00005340 ; ===========================================================================
.text$x:00005340
.text$x:00005340 ; Segment type: Pure code
.text$x:00005340 ; Segment permissions: Read/Execute
.text$x:00005340 _text$x         segment para public 'CODE' use32
.text$x:00005340                 assume cs:_text$x
.text$x:00005340                 ;org 5340h
.text$x:00005340 ; COMDAT (pick associative to section at 5254)
.text$x:00005340                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005340
.text$x:00005340 ; =============== S U B R O U T I N E =======================================
.text$x:00005340
.text$x:00005340
.text$x:00005340 __ehhandler$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00005340                                         ; DATA XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00005340
.text$x:00005340 arg_4           = dword ptr  8
.text$x:00005340
.text$x:00005340                 mov     edx, [esp+arg_4]
.text$x:00005344                 lea     eax, [edx+0Ch]
.text$x:00005347                 mov     ecx, [edx-18h]
.text$x:0000534A                 xor     ecx, eax
.text$x:0000534C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005351                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:00005356                 jmp     ___CxxFrameHandler3
.text$x:00005356 __ehhandler$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:00005356
.text$x:00005356 ; ---------------------------------------------------------------------------
.text$x:0000535B                 align 4
.text$x:0000535B _text$x         ends
.text$x:0000535B
.text$mn:0000535C ; ===========================================================================
.text$mn:0000535C
.text$mn:0000535C ; Segment type: Pure code
.text$mn:0000535C ; Segment permissions: Read/Execute
.text$mn:0000535C _text$mn        segment para public 'CODE' use32
.text$mn:0000535C                 assume cs:_text$mn
.text$mn:0000535C                 ;org 535Ch
.text$mn:0000535C ; COMDAT (pick any)
.text$mn:0000535C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000535C
.text$mn:0000535C ; =============== S U B R O U T I N E =======================================
.text$mn:0000535C
.text$mn:0000535C ; Attributes: bp-based frame
.text$mn:0000535C
.text$mn:0000535C ; int __cdecl std::_Uninit_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(int, int, void *, int)
.text$mn:0000535C                 public ??$_Uninit_move@PAUfoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z
.text$mn:0000535C ??$_Uninit_move@PAUfoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z proc near
.text$mn:0000535C                                         ; CODE XREF: std::_Uninitialized_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+2Ep
.text$mn:0000535C
.text$mn:0000535C var_1           = byte ptr -1
.text$mn:0000535C arg_0           = dword ptr  8
.text$mn:0000535C arg_4           = dword ptr  0Ch
.text$mn:0000535C arg_8           = dword ptr  10h
.text$mn:0000535C arg_C           = dword ptr  14h
.text$mn:0000535C
.text$mn:0000535C                 push    ebp
.text$mn:0000535D                 mov     ebp, esp
.text$mn:0000535F                 push    ecx
.text$mn:00005360                 mov     eax, [ebp+arg_8]
.text$mn:00005363                 push    eax
.text$mn:00005364                 mov     ecx, [ebp+arg_0]
.text$mn:00005367                 push    ecx
.text$mn:00005368                 call    ??$_Ptr_cat@UfoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUfoundInfo@@0@Z ; std::_Ptr_cat<foundInfo,foundInfo>(foundInfo *,foundInfo *)
.text$mn:0000536D                 add     esp, 8
.text$mn:00005370                 mov     [ebp+var_1], al
.text$mn:00005373                 movzx   edx, [ebp+var_1]
.text$mn:00005377                 push    edx
.text$mn:00005378                 mov     eax, [ebp+arg_0]
.text$mn:0000537B                 push    eax
.text$mn:0000537C                 call    ??$_Val_type@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z ; std::_Val_type<foundInfo *>(foundInfo *)
.text$mn:00005381                 add     esp, 4
.text$mn:00005384                 push    eax
.text$mn:00005385                 mov     ecx, [ebp+arg_C]
.text$mn:00005388                 push    ecx             ; int
.text$mn:00005389                 mov     edx, [ebp+arg_8]
.text$mn:0000538C                 push    edx             ; void *
.text$mn:0000538D                 mov     eax, [ebp+arg_4]
.text$mn:00005390                 push    eax             ; int
.text$mn:00005391                 mov     ecx, [ebp+arg_0]
.text$mn:00005394                 push    ecx             ; int
.text$mn:00005395                 call    ??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:0000539A                 add     esp, 18h
.text$mn:0000539D                 mov     esp, ebp
.text$mn:0000539F                 pop     ebp
.text$mn:000053A0                 retn
.text$mn:000053A0 ??$_Uninit_move@PAUfoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z endp
.text$mn:000053A0
.text$mn:000053A0 ; ---------------------------------------------------------------------------
.text$mn:000053A1                 align 4
.text$mn:000053A1 _text$mn        ends
.text$mn:000053A1
.text$mn:000053A4 ; ===========================================================================
.text$mn:000053A4
.text$mn:000053A4 ; Segment type: Pure code
.text$mn:000053A4 ; Segment permissions: Read/Execute
.text$mn:000053A4 _text$mn        segment para public 'CODE' use32
.text$mn:000053A4                 assume cs:_text$mn
.text$mn:000053A4                 ;org 53A4h
.text$mn:000053A4 ; COMDAT (pick any)
.text$mn:000053A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053A4
.text$mn:000053A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000053A4
.text$mn:000053A4 ; Attributes: bp-based frame
.text$mn:000053A4
.text$mn:000053A4 ; int __cdecl std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(int, int, void *, int)
.text$mn:000053A4                 public ??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000053A4 ??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000053A4                                         ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+39p
.text$mn:000053A4
.text$mn:000053A4 var_14          = dword ptr -14h
.text$mn:000053A4 var_10          = dword ptr -10h
.text$mn:000053A4 var_C           = dword ptr -0Ch
.text$mn:000053A4 var_4           = dword ptr -4
.text$mn:000053A4 arg_0           = dword ptr  8
.text$mn:000053A4 arg_4           = dword ptr  0Ch
.text$mn:000053A4 arg_8           = dword ptr  10h
.text$mn:000053A4 arg_C           = dword ptr  14h
.text$mn:000053A4
.text$mn:000053A4 ; FUNCTION CHUNK AT .text$mn:0000546B SIZE 00000009 BYTES
.text$mn:000053A4 ; FUNCTION CHUNK AT .text$mn:0000547B SIZE 00000015 BYTES
.text$mn:000053A4
.text$mn:000053A4                 push    ebp
.text$mn:000053A5                 mov     ebp, esp
.text$mn:000053A7                 push    0FFFFFFFFh
.text$mn:000053A9                 push    offset __ehhandler$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000053AE                 mov     eax, large fs:0
.text$mn:000053B4                 push    eax
.text$mn:000053B5                 push    ecx
.text$mn:000053B6                 push    ecx
.text$mn:000053B7                 push    ebx
.text$mn:000053B8                 push    esi
.text$mn:000053B9                 push    edi
.text$mn:000053BA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000053BF                 xor     eax, ebp
.text$mn:000053C1                 push    eax
.text$mn:000053C2                 lea     eax, [ebp+var_C]
.text$mn:000053C5                 mov     large fs:0, eax
.text$mn:000053CB                 mov     [ebp+var_10], esp
.text$mn:000053CE                 push    1B6h            ; unsigned int
.text$mn:000053D3                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000053D8                 mov     eax, [ebp+arg_4]
.text$mn:000053DB                 push    eax             ; int
.text$mn:000053DC                 mov     ecx, [ebp+arg_0]
.text$mn:000053DF                 push    ecx             ; int
.text$mn:000053E0                 call    ??$_Debug_range@PAUfoundInfo@@@std@@YAXPAUfoundInfo@@0PB_WI@Z ; std::_Debug_range<foundInfo *>(foundInfo *,foundInfo *,wchar_t const *,uint)
.text$mn:000053E5                 add     esp, 10h
.text$mn:000053E8                 push    1B7h            ; unsigned int
.text$mn:000053ED                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000053F2                 mov     edx, [ebp+arg_8]
.text$mn:000053F5                 push    edx             ; int
.text$mn:000053F6                 call    ??$_Debug_pointer@UfoundInfo@@@std@@YAXPAUfoundInfo@@PB_WI@Z ; std::_Debug_pointer<foundInfo>(foundInfo *,wchar_t const *,uint)
.text$mn:000053FB                 add     esp, 0Ch
.text$mn:000053FE                 mov     eax, [ebp+arg_8]
.text$mn:00005401                 mov     [ebp+var_14], eax
.text$mn:00005404                 mov     [ebp+var_4], 0
.text$mn:0000540B                 jmp     short loc_541F
.text$mn:0000540D ; ---------------------------------------------------------------------------
.text$mn:0000540D
.text$mn:0000540D loc_540D:                               ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:0000540D                 mov     ecx, [ebp+arg_8]
.text$mn:00005410                 add     ecx, 40h ; '@'
.text$mn:00005413                 mov     [ebp+arg_8], ecx
.text$mn:00005416                 mov     edx, [ebp+arg_0]
.text$mn:00005419                 add     edx, 40h ; '@'
.text$mn:0000541C                 mov     [ebp+arg_0], edx
.text$mn:0000541F
.text$mn:0000541F loc_541F:                               ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:0000541F                 mov     eax, [ebp+arg_0]
.text$mn:00005422                 cmp     eax, [ebp+arg_4]
.text$mn:00005425                 jz      short loc_5439
.text$mn:00005427                 mov     ecx, [ebp+arg_0]
.text$mn:0000542A                 push    ecx             ; int
.text$mn:0000542B                 mov     edx, [ebp+arg_8]
.text$mn:0000542E                 push    edx             ; void *
.text$mn:0000542F                 mov     ecx, [ebp+arg_C]
.text$mn:00005432                 call    ??$construct@UfoundInfo@@U1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)
.text$mn:00005437                 jmp     short loc_540D
.text$mn:00005439 ; ---------------------------------------------------------------------------
.text$mn:00005439
.text$mn:00005439 loc_5439:                               ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00005439                 jmp     short loc_546B
.text$mn:00005439 ??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005439
.text$mn:0000543B
.text$mn:0000543B ; =============== S U B R O U T I N E =======================================
.text$mn:0000543B
.text$mn:0000543B ; Attributes: noreturn
.text$mn:0000543B
.text$mn:0000543B __catch$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:0000543B                                         ; DATA XREF: .xdata$x:00010C80o
.text$mn:0000543B                 jmp     short loc_5446
.text$mn:0000543D ; ---------------------------------------------------------------------------
.text$mn:0000543D
.text$mn:0000543D loc_543D:                               ; CODE XREF: __catch$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:0000543D                 mov     eax, [ebp-14h]
.text$mn:00005440                 add     eax, 40h ; '@'
.text$mn:00005443                 mov     [ebp-14h], eax
.text$mn:00005446
.text$mn:00005446 loc_5446:                               ; CODE XREF: __catch$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:00005446                 mov     ecx, [ebp-14h]
.text$mn:00005449                 cmp     ecx, [ebp+10h]
.text$mn:0000544C                 jz      short loc_545C
.text$mn:0000544E                 mov     edx, [ebp-14h]
.text$mn:00005451                 push    edx
.text$mn:00005452                 mov     ecx, [ebp+14h]
.text$mn:00005455                 call    ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::destroy<foundInfo>(foundInfo *)
.text$mn:0000545A                 jmp     short loc_543D
.text$mn:0000545C ; ---------------------------------------------------------------------------
.text$mn:0000545C
.text$mn:0000545C loc_545C:                               ; CODE XREF: __catch$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:0000545C                 push    0
.text$mn:0000545E                 push    0
.text$mn:00005460                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005460 __catch$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00005460
.text$mn:00005465 ; ---------------------------------------------------------------------------
.text$mn:00005465                 mov     eax, offset $LN13_2
.text$mn:0000546A                 retn
.text$mn:0000546B ; ---------------------------------------------------------------------------
.text$mn:0000546B ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000546B
.text$mn:0000546B loc_546B:                               ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag):loc_5439j
.text$mn:0000546B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005472                 jmp     short loc_547B
.text$mn:00005472 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00005474
.text$mn:00005474 ; =============== S U B R O U T I N E =======================================
.text$mn:00005474
.text$mn:00005474
.text$mn:00005474 $LN13_2         proc near               ; DATA XREF: .text$mn:00005465o
.text$mn:00005474                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00005474 $LN13_2         endp ; sp-analysis failed
.text$mn:00005474
.text$mn:0000547B ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000547B
.text$mn:0000547B loc_547B:                               ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:0000547B                 mov     eax, [ebp+arg_8]
.text$mn:0000547E                 mov     ecx, [ebp+var_C]
.text$mn:00005481                 mov     large fs:0, ecx
.text$mn:00005488                 pop     ecx
.text$mn:00005489                 pop     edi
.text$mn:0000548A                 pop     esi
.text$mn:0000548B                 pop     ebx
.text$mn:0000548C                 mov     esp, ebp
.text$mn:0000548E                 pop     ebp
.text$mn:0000548F                 retn
.text$mn:0000548F ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000548F _text$mn        ends
.text$mn:0000548F
.text$x:00005490 ; ===========================================================================
.text$x:00005490
.text$x:00005490 ; Segment type: Pure code
.text$x:00005490 ; Segment permissions: Read/Execute
.text$x:00005490 _text$x         segment para public 'CODE' use32
.text$x:00005490                 assume cs:_text$x
.text$x:00005490                 ;org 5490h
.text$x:00005490 ; COMDAT (pick associative to section at 53A4)
.text$x:00005490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005490
.text$x:00005490 ; =============== S U B R O U T I N E =======================================
.text$x:00005490
.text$x:00005490
.text$x:00005490 __ehhandler$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00005490                                         ; DATA XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00005490
.text$x:00005490 arg_4           = dword ptr  8
.text$x:00005490
.text$x:00005490                 mov     edx, [esp+arg_4]
.text$x:00005494                 lea     eax, [edx+0Ch]
.text$x:00005497                 mov     ecx, [edx-18h]
.text$x:0000549A                 xor     ecx, eax
.text$x:0000549C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000054A1                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:000054A6                 jmp     ___CxxFrameHandler3
.text$x:000054A6 __ehhandler$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:000054A6
.text$x:000054A6 ; ---------------------------------------------------------------------------
.text$x:000054AB                 align 4
.text$x:000054AB _text$x         ends
.text$x:000054AB
.text$mn:000054AC ; ===========================================================================
.text$mn:000054AC
.text$mn:000054AC ; Segment type: Pure code
.text$mn:000054AC ; Segment permissions: Read/Execute
.text$mn:000054AC _text$mn        segment para public 'CODE' use32
.text$mn:000054AC                 assume cs:_text$mn
.text$mn:000054AC                 ;org 54ACh
.text$mn:000054AC ; COMDAT (pick any)
.text$mn:000054AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054AC
.text$mn:000054AC ; =============== S U B R O U T I N E =======================================
.text$mn:000054AC
.text$mn:000054AC ; Attributes: bp-based frame
.text$mn:000054AC
.text$mn:000054AC ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, int, void *, int)
.text$mn:000054AC                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:000054AC ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:000054AC                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+2Ep
.text$mn:000054AC
.text$mn:000054AC var_1           = byte ptr -1
.text$mn:000054AC arg_0           = dword ptr  8
.text$mn:000054AC arg_4           = dword ptr  0Ch
.text$mn:000054AC arg_8           = dword ptr  10h
.text$mn:000054AC arg_C           = dword ptr  14h
.text$mn:000054AC
.text$mn:000054AC                 push    ebp
.text$mn:000054AD                 mov     ebp, esp
.text$mn:000054AF                 push    ecx
.text$mn:000054B0                 mov     eax, [ebp+arg_8]
.text$mn:000054B3                 push    eax
.text$mn:000054B4                 mov     ecx, [ebp+arg_0]
.text$mn:000054B7                 push    ecx
.text$mn:000054B8                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000054BD                 add     esp, 8
.text$mn:000054C0                 mov     [ebp+var_1], al
.text$mn:000054C3                 movzx   edx, [ebp+var_1]
.text$mn:000054C7                 push    edx
.text$mn:000054C8                 mov     eax, [ebp+arg_0]
.text$mn:000054CB                 push    eax
.text$mn:000054CC                 call    ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000054D1                 add     esp, 4
.text$mn:000054D4                 push    eax
.text$mn:000054D5                 mov     ecx, [ebp+arg_C]
.text$mn:000054D8                 push    ecx             ; int
.text$mn:000054D9                 mov     edx, [ebp+arg_8]
.text$mn:000054DC                 push    edx             ; void *
.text$mn:000054DD                 mov     eax, [ebp+arg_4]
.text$mn:000054E0                 push    eax             ; int
.text$mn:000054E1                 mov     ecx, [ebp+arg_0]
.text$mn:000054E4                 push    ecx             ; int
.text$mn:000054E5                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000054EA                 add     esp, 18h
.text$mn:000054ED                 mov     esp, ebp
.text$mn:000054EF                 pop     ebp
.text$mn:000054F0                 retn
.text$mn:000054F0 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:000054F0
.text$mn:000054F0 ; ---------------------------------------------------------------------------
.text$mn:000054F1                 align 4
.text$mn:000054F1 _text$mn        ends
.text$mn:000054F1
.text$mn:000054F4 ; ===========================================================================
.text$mn:000054F4
.text$mn:000054F4 ; Segment type: Pure code
.text$mn:000054F4 ; Segment permissions: Read/Execute
.text$mn:000054F4 _text$mn        segment para public 'CODE' use32
.text$mn:000054F4                 assume cs:_text$mn
.text$mn:000054F4                 ;org 54F4h
.text$mn:000054F4 ; COMDAT (pick any)
.text$mn:000054F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054F4
.text$mn:000054F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000054F4
.text$mn:000054F4 ; Attributes: bp-based frame
.text$mn:000054F4
.text$mn:000054F4 ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, int, void *, int)
.text$mn:000054F4                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000054F4 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000054F4                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+39p
.text$mn:000054F4
.text$mn:000054F4 var_14          = dword ptr -14h
.text$mn:000054F4 var_10          = dword ptr -10h
.text$mn:000054F4 var_C           = dword ptr -0Ch
.text$mn:000054F4 var_4           = dword ptr -4
.text$mn:000054F4 arg_0           = dword ptr  8
.text$mn:000054F4 arg_4           = dword ptr  0Ch
.text$mn:000054F4 arg_8           = dword ptr  10h
.text$mn:000054F4 arg_C           = dword ptr  14h
.text$mn:000054F4
.text$mn:000054F4 ; FUNCTION CHUNK AT .text$mn:000055BB SIZE 00000009 BYTES
.text$mn:000054F4 ; FUNCTION CHUNK AT .text$mn:000055CB SIZE 00000015 BYTES
.text$mn:000054F4
.text$mn:000054F4                 push    ebp
.text$mn:000054F5                 mov     ebp, esp
.text$mn:000054F7                 push    0FFFFFFFFh
.text$mn:000054F9                 push    offset __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000054FE                 mov     eax, large fs:0
.text$mn:00005504                 push    eax
.text$mn:00005505                 push    ecx
.text$mn:00005506                 push    ecx
.text$mn:00005507                 push    ebx
.text$mn:00005508                 push    esi
.text$mn:00005509                 push    edi
.text$mn:0000550A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000550F                 xor     eax, ebp
.text$mn:00005511                 push    eax
.text$mn:00005512                 lea     eax, [ebp+var_C]
.text$mn:00005515                 mov     large fs:0, eax
.text$mn:0000551B                 mov     [ebp+var_10], esp
.text$mn:0000551E                 push    1B6h            ; unsigned int
.text$mn:00005523                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005528                 mov     eax, [ebp+arg_4]
.text$mn:0000552B                 push    eax             ; int
.text$mn:0000552C                 mov     ecx, [ebp+arg_0]
.text$mn:0000552F                 push    ecx             ; int
.text$mn:00005530                 call    ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00005535                 add     esp, 10h
.text$mn:00005538                 push    1B7h            ; unsigned int
.text$mn:0000553D                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005542                 mov     edx, [ebp+arg_8]
.text$mn:00005545                 push    edx             ; int
.text$mn:00005546                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:0000554B                 add     esp, 0Ch
.text$mn:0000554E                 mov     eax, [ebp+arg_8]
.text$mn:00005551                 mov     [ebp+var_14], eax
.text$mn:00005554                 mov     [ebp+var_4], 0
.text$mn:0000555B                 jmp     short loc_556F
.text$mn:0000555D ; ---------------------------------------------------------------------------
.text$mn:0000555D
.text$mn:0000555D loc_555D:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:0000555D                 mov     ecx, [ebp+arg_8]
.text$mn:00005560                 add     ecx, 1Ch
.text$mn:00005563                 mov     [ebp+arg_8], ecx
.text$mn:00005566                 mov     edx, [ebp+arg_0]
.text$mn:00005569                 add     edx, 1Ch
.text$mn:0000556C                 mov     [ebp+arg_0], edx
.text$mn:0000556F
.text$mn:0000556F loc_556F:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:0000556F                 mov     eax, [ebp+arg_0]
.text$mn:00005572                 cmp     eax, [ebp+arg_4]
.text$mn:00005575                 jz      short loc_5589
.text$mn:00005577                 mov     ecx, [ebp+arg_0]
.text$mn:0000557A                 push    ecx             ; int
.text$mn:0000557B                 mov     edx, [ebp+arg_8]
.text$mn:0000557E                 push    edx             ; void *
.text$mn:0000557F                 mov     ecx, [ebp+arg_C]
.text$mn:00005582                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00005587                 jmp     short loc_555D
.text$mn:00005589 ; ---------------------------------------------------------------------------
.text$mn:00005589
.text$mn:00005589 loc_5589:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00005589                 jmp     short loc_55BB
.text$mn:00005589 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00005589
.text$mn:0000558B
.text$mn:0000558B ; =============== S U B R O U T I N E =======================================
.text$mn:0000558B
.text$mn:0000558B ; Attributes: noreturn
.text$mn:0000558B
.text$mn:0000558B __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:0000558B                                         ; DATA XREF: .xdata$x:00010BD0o
.text$mn:0000558B                 jmp     short loc_5596
.text$mn:0000558D ; ---------------------------------------------------------------------------
.text$mn:0000558D
.text$mn:0000558D loc_558D:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:0000558D                 mov     eax, [ebp-14h]
.text$mn:00005590                 add     eax, 1Ch
.text$mn:00005593                 mov     [ebp-14h], eax
.text$mn:00005596
.text$mn:00005596 loc_5596:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:00005596                 mov     ecx, [ebp-14h]
.text$mn:00005599                 cmp     ecx, [ebp+10h]
.text$mn:0000559C                 jz      short loc_55AC
.text$mn:0000559E                 mov     edx, [ebp-14h]
.text$mn:000055A1                 push    edx
.text$mn:000055A2                 mov     ecx, [ebp+14h]
.text$mn:000055A5                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000055AA                 jmp     short loc_558D
.text$mn:000055AC ; ---------------------------------------------------------------------------
.text$mn:000055AC
.text$mn:000055AC loc_55AC:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:000055AC                 push    0
.text$mn:000055AE                 push    0
.text$mn:000055B0                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000055B0 __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:000055B0
.text$mn:000055B5 ; ---------------------------------------------------------------------------
.text$mn:000055B5                 mov     eax, offset $LN13_0
.text$mn:000055BA                 retn
.text$mn:000055BB ; ---------------------------------------------------------------------------
.text$mn:000055BB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000055BB
.text$mn:000055BB loc_55BB:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag):loc_5589j
.text$mn:000055BB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000055C2                 jmp     short loc_55CB
.text$mn:000055C2 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000055C4
.text$mn:000055C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000055C4
.text$mn:000055C4
.text$mn:000055C4 $LN13_0         proc near               ; DATA XREF: .text$mn:000055B5o
.text$mn:000055C4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000055C4 $LN13_0         endp ; sp-analysis failed
.text$mn:000055C4
.text$mn:000055CB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000055CB
.text$mn:000055CB loc_55CB:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:000055CB                 mov     eax, [ebp+arg_8]
.text$mn:000055CE                 mov     ecx, [ebp+var_C]
.text$mn:000055D1                 mov     large fs:0, ecx
.text$mn:000055D8                 pop     ecx
.text$mn:000055D9                 pop     edi
.text$mn:000055DA                 pop     esi
.text$mn:000055DB                 pop     ebx
.text$mn:000055DC                 mov     esp, ebp
.text$mn:000055DE                 pop     ebp
.text$mn:000055DF                 retn
.text$mn:000055DF ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000055DF _text$mn        ends
.text$mn:000055DF
.text$x:000055E0 ; ===========================================================================
.text$x:000055E0
.text$x:000055E0 ; Segment type: Pure code
.text$x:000055E0 ; Segment permissions: Read/Execute
.text$x:000055E0 _text$x         segment para public 'CODE' use32
.text$x:000055E0                 assume cs:_text$x
.text$x:000055E0                 ;org 55E0h
.text$x:000055E0 ; COMDAT (pick associative to section at 54F4)
.text$x:000055E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000055E0
.text$x:000055E0 ; =============== S U B R O U T I N E =======================================
.text$x:000055E0
.text$x:000055E0
.text$x:000055E0 __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:000055E0                                         ; DATA XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:000055E0
.text$x:000055E0 arg_4           = dword ptr  8
.text$x:000055E0
.text$x:000055E0                 mov     edx, [esp+arg_4]
.text$x:000055E4                 lea     eax, [edx+0Ch]
.text$x:000055E7                 mov     ecx, [edx-18h]
.text$x:000055EA                 xor     ecx, eax
.text$x:000055EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000055F1                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:000055F6                 jmp     ___CxxFrameHandler3
.text$x:000055F6 __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:000055F6
.text$x:000055F6 ; ---------------------------------------------------------------------------
.text$x:000055FB                 align 4
.text$x:000055FB _text$x         ends
.text$x:000055FB
.text$mn:000055FC ; ===========================================================================
.text$mn:000055FC
.text$mn:000055FC ; Segment type: Pure code
.text$mn:000055FC ; Segment permissions: Read/Execute
.text$mn:000055FC _text$mn        segment para public 'CODE' use32
.text$mn:000055FC                 assume cs:_text$mn
.text$mn:000055FC                 ;org 55FCh
.text$mn:000055FC ; COMDAT (pick any)
.text$mn:000055FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055FC
.text$mn:000055FC ; =============== S U B R O U T I N E =======================================
.text$mn:000055FC
.text$mn:000055FC ; Attributes: bp-based frame
.text$mn:000055FC
.text$mn:000055FC ; int __cdecl std::_Uninit_move<FunctionParser *,FunctionParser *,FunctionParser *>(void *Src, int, void *Dst)
.text$mn:000055FC                 public ??$_Uninit_move@PAVFunctionParser@@PAV1@PAV1@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
.text$mn:000055FC ??$_Uninit_move@PAVFunctionParser@@PAV1@PAV1@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000055FC                                         ; CODE XREF: std::_Uninit_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+39p
.text$mn:000055FC
.text$mn:000055FC var_4           = dword ptr -4
.text$mn:000055FC Src             = dword ptr  8
.text$mn:000055FC arg_4           = dword ptr  0Ch
.text$mn:000055FC Dst             = dword ptr  10h
.text$mn:000055FC
.text$mn:000055FC                 push    ebp
.text$mn:000055FD                 mov     ebp, esp
.text$mn:000055FF                 push    ecx
.text$mn:00005600                 push    1D6h            ; unsigned int
.text$mn:00005605                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000560A                 mov     eax, [ebp+arg_4]
.text$mn:0000560D                 push    eax             ; int
.text$mn:0000560E                 mov     ecx, [ebp+Src]
.text$mn:00005611                 push    ecx             ; int
.text$mn:00005612                 call    ??$_Debug_range@PAPAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@0PB_WI@Z ; std::_Debug_range<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint)
.text$mn:00005617                 add     esp, 10h
.text$mn:0000561A                 push    1D7h            ; unsigned int
.text$mn:0000561F                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005624                 mov     edx, [ebp+Dst]
.text$mn:00005627                 push    edx             ; int
.text$mn:00005628                 call    ??$_Debug_pointer@PAVFunctionParser@@@std@@YAXPAPAVFunctionParser@@PB_WI@Z ; std::_Debug_pointer<FunctionParser *>(FunctionParser * *,wchar_t const *,uint)
.text$mn:0000562D                 add     esp, 0Ch
.text$mn:00005630                 mov     eax, [ebp+arg_4]
.text$mn:00005633                 sub     eax, [ebp+Src]
.text$mn:00005636                 sar     eax, 2
.text$mn:00005639                 mov     [ebp+var_4], eax
.text$mn:0000563C                 mov     ecx, [ebp+var_4]
.text$mn:0000563F                 shl     ecx, 2
.text$mn:00005642                 push    ecx             ; Size
.text$mn:00005643                 mov     edx, [ebp+Src]
.text$mn:00005646                 push    edx             ; Src
.text$mn:00005647                 mov     eax, [ebp+Dst]
.text$mn:0000564A                 push    eax             ; Dst
.text$mn:0000564B                 call    _memmove
.text$mn:00005650                 add     esp, 0Ch
.text$mn:00005653                 mov     ecx, [ebp+var_4]
.text$mn:00005656                 lea     eax, [eax+ecx*4]
.text$mn:00005659                 mov     esp, ebp
.text$mn:0000565B                 pop     ebp
.text$mn:0000565C                 retn
.text$mn:0000565C ??$_Uninit_move@PAVFunctionParser@@PAV1@PAV1@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z endp
.text$mn:0000565C
.text$mn:0000565C ; ---------------------------------------------------------------------------
.text$mn:0000565D                 align 10h
.text$mn:0000565D _text$mn        ends
.text$mn:0000565D
.text$mn:00005660 ; ===========================================================================
.text$mn:00005660
.text$mn:00005660 ; Segment type: Pure code
.text$mn:00005660 ; Segment permissions: Read/Execute
.text$mn:00005660 _text$mn        segment para public 'CODE' use32
.text$mn:00005660                 assume cs:_text$mn
.text$mn:00005660                 ;org 5660h
.text$mn:00005660 ; COMDAT (pick any)
.text$mn:00005660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005660
.text$mn:00005660 ; =============== S U B R O U T I N E =======================================
.text$mn:00005660
.text$mn:00005660 ; Attributes: bp-based frame
.text$mn:00005660
.text$mn:00005660 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Uninitialized_copy<class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::alloca
.text$mn:00005660                 public ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00005660 ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00005660                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+83p
.text$mn:00005660
.text$mn:00005660 var_34          = dword ptr -34h
.text$mn:00005660 var_30          = dword ptr -30h
.text$mn:00005660 var_2C          = dword ptr -2Ch
.text$mn:00005660 var_28          = dword ptr -28h
.text$mn:00005660 var_24          = dword ptr -24h
.text$mn:00005660 var_20          = dword ptr -20h
.text$mn:00005660 var_1C          = dword ptr -1Ch
.text$mn:00005660 var_18          = dword ptr -18h
.text$mn:00005660 var_14          = dword ptr -14h
.text$mn:00005660 var_10          = dword ptr -10h
.text$mn:00005660 var_C           = dword ptr -0Ch
.text$mn:00005660 var_4           = dword ptr -4
.text$mn:00005660 arg_0           = byte ptr  8
.text$mn:00005660 arg_C           = byte ptr  14h
.text$mn:00005660 arg_18          = dword ptr  20h
.text$mn:00005660 arg_1C          = dword ptr  24h
.text$mn:00005660
.text$mn:00005660                 push    ebp
.text$mn:00005661                 mov     ebp, esp
.text$mn:00005663                 push    0FFFFFFFFh
.text$mn:00005665                 push    offset __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:0000566A                 mov     eax, large fs:0
.text$mn:00005670                 push    eax
.text$mn:00005671                 sub     esp, 28h
.text$mn:00005674                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005679                 xor     eax, ebp
.text$mn:0000567B                 push    eax
.text$mn:0000567C                 lea     eax, [ebp+var_C]
.text$mn:0000567F                 mov     large fs:0, eax
.text$mn:00005685                 mov     [ebp+var_4], 1
.text$mn:0000568C                 mov     eax, [ebp+arg_1C]
.text$mn:0000568F                 push    eax             ; int
.text$mn:00005690                 mov     ecx, [ebp+arg_18]
.text$mn:00005693                 push    ecx
.text$mn:00005694                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005699                 add     esp, 4
.text$mn:0000569C                 push    eax             ; void *
.text$mn:0000569D                 sub     esp, 0Ch
.text$mn:000056A0                 mov     ecx, esp
.text$mn:000056A2                 mov     [ebp+var_28], esp
.text$mn:000056A5                 lea     edx, [ebp+arg_C]
.text$mn:000056A8                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000056A9                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:000056AE                 mov     [ebp+var_10], eax
.text$mn:000056B1                 mov     eax, [ebp+var_10]
.text$mn:000056B4                 mov     [ebp+var_2C], eax
.text$mn:000056B7                 mov     byte ptr [ebp+var_4], 2
.text$mn:000056BB                 mov     byte ptr [ebp+var_4], 1
.text$mn:000056BF                 call    ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:000056C4                 add     esp, 0Ch
.text$mn:000056C7                 mov     [ebp+var_14], eax
.text$mn:000056CA                 mov     ecx, [ebp+var_14]
.text$mn:000056CD                 push    ecx             ; int
.text$mn:000056CE                 sub     esp, 0Ch
.text$mn:000056D1                 mov     ecx, esp
.text$mn:000056D3                 mov     [ebp+var_30], esp
.text$mn:000056D6                 lea     edx, [ebp+arg_0]
.text$mn:000056D9                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000056DA                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:000056DF                 mov     [ebp+var_18], eax
.text$mn:000056E2                 mov     eax, [ebp+var_18]
.text$mn:000056E5                 mov     [ebp+var_34], eax
.text$mn:000056E8                 mov     byte ptr [ebp+var_4], 3
.text$mn:000056EC                 mov     byte ptr [ebp+var_4], 1
.text$mn:000056F0                 call    ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:000056F5                 add     esp, 0Ch
.text$mn:000056F8                 mov     [ebp+var_1C], eax
.text$mn:000056FB                 mov     ecx, [ebp+var_1C]
.text$mn:000056FE                 push    ecx             ; int
.text$mn:000056FF                 call    ??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00005704                 add     esp, 10h
.text$mn:00005707                 mov     [ebp+var_20], eax
.text$mn:0000570A                 mov     edx, [ebp+var_20]
.text$mn:0000570D                 push    edx
.text$mn:0000570E                 lea     eax, [ebp+arg_18]
.text$mn:00005711                 push    eax
.text$mn:00005712                 call    ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00005717                 add     esp, 8
.text$mn:0000571A                 mov     ecx, [eax]
.text$mn:0000571C                 mov     [ebp+var_24], ecx
.text$mn:0000571F                 mov     byte ptr [ebp+var_4], 0
.text$mn:00005723                 lea     ecx, [ebp+arg_0]
.text$mn:00005726                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:0000572B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005732                 lea     ecx, [ebp+arg_C]
.text$mn:00005735                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:0000573A                 mov     eax, [ebp+var_24]
.text$mn:0000573D                 mov     ecx, [ebp+var_C]
.text$mn:00005740                 mov     large fs:0, ecx
.text$mn:00005747                 pop     ecx
.text$mn:00005748                 mov     esp, ebp
.text$mn:0000574A                 pop     ebp
.text$mn:0000574B                 retn
.text$mn:0000574B ??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:0000574B
.text$mn:0000574B _text$mn        ends
.text$mn:0000574B
.text$x:0000574C ; ===========================================================================
.text$x:0000574C
.text$x:0000574C ; Segment type: Pure code
.text$x:0000574C ; Segment permissions: Read/Execute
.text$x:0000574C _text$x         segment para public 'CODE' use32
.text$x:0000574C                 assume cs:_text$x
.text$x:0000574C                 ;org 574Ch
.text$x:0000574C ; COMDAT (pick associative to section at 5660)
.text$x:0000574C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000574C
.text$x:0000574C ; =============== S U B R O U T I N E =======================================
.text$x:0000574C
.text$x:0000574C
.text$x:0000574C __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$0 proc near
.text$x:0000574C                                         ; DATA XREF: .xdata$x:000109CCo
.text$x:0000574C                 lea     ecx, [ebp+14h]
.text$x:0000574F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000574F __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$0 endp
.text$x:0000574F
.text$x:00005754
.text$x:00005754 ; =============== S U B R O U T I N E =======================================
.text$x:00005754
.text$x:00005754
.text$x:00005754 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$1 proc near
.text$x:00005754                                         ; DATA XREF: .xdata$x:000109D4o
.text$x:00005754                 lea     ecx, [ebp+8]
.text$x:00005757                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00005757 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$1 endp
.text$x:00005757
.text$x:0000575C
.text$x:0000575C ; =============== S U B R O U T I N E =======================================
.text$x:0000575C
.text$x:0000575C
.text$x:0000575C __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$2 proc near
.text$x:0000575C                                         ; DATA XREF: .xdata$x:000109DCo
.text$x:0000575C                 mov     ecx, [ebp-28h]
.text$x:0000575F                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000575F __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$2 endp
.text$x:0000575F
.text$x:00005764
.text$x:00005764 ; =============== S U B R O U T I N E =======================================
.text$x:00005764
.text$x:00005764
.text$x:00005764 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$3 proc near
.text$x:00005764                                         ; DATA XREF: .xdata$x:000109E4o
.text$x:00005764                 mov     ecx, [ebp-30h]
.text$x:00005767                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00005767 __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$3 endp
.text$x:00005767
.text$x:0000576C
.text$x:0000576C ; =============== S U B R O U T I N E =======================================
.text$x:0000576C
.text$x:0000576C
.text$x:0000576C __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$x:0000576C                                         ; DATA XREF: std::_Uninitialized_copy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+5o
.text$x:0000576C
.text$x:0000576C arg_4           = dword ptr  8
.text$x:0000576C
.text$x:0000576C                 mov     edx, [esp+arg_4]
.text$x:00005770                 lea     eax, [edx+0Ch]
.text$x:00005773                 mov     ecx, [edx-2Ch]
.text$x:00005776                 xor     ecx, eax
.text$x:00005778                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000577D                 mov     eax, offset __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$x:00005782                 jmp     ___CxxFrameHandler3
.text$x:00005782 __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$x:00005782
.text$x:00005782 ; ---------------------------------------------------------------------------
.text$x:00005787                 align 4
.text$x:00005787 _text$x         ends
.text$x:00005787
.text$mn:00005788 ; ===========================================================================
.text$mn:00005788
.text$mn:00005788 ; Segment type: Pure code
.text$mn:00005788 ; Segment permissions: Read/Execute
.text$mn:00005788 _text$mn        segment para public 'CODE' use32
.text$mn:00005788                 assume cs:_text$mn
.text$mn:00005788                 ;org 5788h
.text$mn:00005788 ; COMDAT (pick any)
.text$mn:00005788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005788
.text$mn:00005788 ; =============== S U B R O U T I N E =======================================
.text$mn:00005788
.text$mn:00005788 ; Attributes: bp-based frame
.text$mn:00005788
.text$mn:00005788 ; class FunctionParser * * __cdecl std::_Uninitialized_move<class FunctionParser * *, class FunctionParser * *, struct std::_Wrap_alloc<class std::allocator<class FunctionParser *>>>(class FunctionParser * *, class FunctionParser * *, class FunctionParser * *, struct std::_Wrap_alloc<class std::allocator<class FunctionParser *>> &)
.text$mn:00005788                 public ??$_Uninitialized_move@PAPAVFunctionParser@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z
.text$mn:00005788 ??$_Uninitialized_move@PAPAVFunctionParser@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z proc near
.text$mn:00005788                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Umove<FunctionParser * *>(FunctionParser * *,FunctionParser * *,FunctionParser * *)+25p
.text$mn:00005788
.text$mn:00005788 arg_0           = dword ptr  8
.text$mn:00005788 arg_4           = dword ptr  0Ch
.text$mn:00005788 arg_8           = dword ptr  10h
.text$mn:00005788 arg_C           = dword ptr  14h
.text$mn:00005788
.text$mn:00005788                 push    ebp
.text$mn:00005789                 mov     ebp, esp
.text$mn:0000578B                 mov     eax, [ebp+arg_C]
.text$mn:0000578E                 push    eax             ; int
.text$mn:0000578F                 mov     ecx, [ebp+arg_8]
.text$mn:00005792                 push    ecx
.text$mn:00005793                 call    ??$_Unchecked@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z ; std::_Unchecked<FunctionParser * *>(FunctionParser * *)
.text$mn:00005798                 add     esp, 4
.text$mn:0000579B                 push    eax             ; Dst
.text$mn:0000579C                 mov     edx, [ebp+arg_4]
.text$mn:0000579F                 push    edx
.text$mn:000057A0                 call    ??$_Unchecked@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z ; std::_Unchecked<FunctionParser * *>(FunctionParser * *)
.text$mn:000057A5                 add     esp, 4
.text$mn:000057A8                 push    eax             ; int
.text$mn:000057A9                 mov     eax, [ebp+arg_0]
.text$mn:000057AC                 push    eax
.text$mn:000057AD                 call    ??$_Unchecked@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z ; std::_Unchecked<FunctionParser * *>(FunctionParser * *)
.text$mn:000057B2                 add     esp, 4
.text$mn:000057B5                 push    eax             ; Src
.text$mn:000057B6                 call    ??$_Uninit_move@PAPAVFunctionParser@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z ; std::_Uninit_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)
.text$mn:000057BB                 add     esp, 10h
.text$mn:000057BE                 push    eax
.text$mn:000057BF                 lea     ecx, [ebp+arg_8]
.text$mn:000057C2                 push    ecx
.text$mn:000057C3                 call    ??$_Rechecked@PAPAVFunctionParser@@PAPAV1@@std@@YAAAPAPAVFunctionParser@@AAPAPAV1@PAPAV1@@Z ; std::_Rechecked<FunctionParser * *,FunctionParser * *>(FunctionParser * * &,FunctionParser * *)
.text$mn:000057C8                 add     esp, 8
.text$mn:000057CB                 mov     eax, [eax]
.text$mn:000057CD                 pop     ebp
.text$mn:000057CE                 retn
.text$mn:000057CE ??$_Uninitialized_move@PAPAVFunctionParser@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAPAPAVFunctionParser@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z endp
.text$mn:000057CE
.text$mn:000057CE ; ---------------------------------------------------------------------------
.text$mn:000057CF                 align 10h
.text$mn:000057CF _text$mn        ends
.text$mn:000057CF
.text$mn:000057D0 ; ===========================================================================
.text$mn:000057D0
.text$mn:000057D0 ; Segment type: Pure code
.text$mn:000057D0 ; Segment permissions: Read/Execute
.text$mn:000057D0 _text$mn        segment para public 'CODE' use32
.text$mn:000057D0                 assume cs:_text$mn
.text$mn:000057D0                 ;org 57D0h
.text$mn:000057D0 ; COMDAT (pick any)
.text$mn:000057D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057D0
.text$mn:000057D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000057D0
.text$mn:000057D0 ; Attributes: bp-based frame
.text$mn:000057D0
.text$mn:000057D0 ; struct std::pair<int, int> * __cdecl std::_Uninitialized_move<struct std::pair<int, int> *, struct std::pair<int, int> *, struct std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>>>(struct std::pair<int, int> *, struct std::pair<int, int> *, struct std::pair<int, int> *, struct std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>> &)
.text$mn:000057D0                 public ??$_Uninitialized_move@PAU?$pair@HH@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z
.text$mn:000057D0 ??$_Uninitialized_move@PAU?$pair@HH@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z proc near
.text$mn:000057D0                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Umove<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *)+25p
.text$mn:000057D0
.text$mn:000057D0 arg_0           = dword ptr  8
.text$mn:000057D0 arg_4           = dword ptr  0Ch
.text$mn:000057D0 arg_8           = dword ptr  10h
.text$mn:000057D0 arg_C           = dword ptr  14h
.text$mn:000057D0
.text$mn:000057D0                 push    ebp
.text$mn:000057D1                 mov     ebp, esp
.text$mn:000057D3                 mov     eax, [ebp+arg_C]
.text$mn:000057D6                 push    eax             ; int
.text$mn:000057D7                 mov     ecx, [ebp+arg_8]
.text$mn:000057DA                 push    ecx
.text$mn:000057DB                 call    ??$_Unchecked@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z ; std::_Unchecked<std::pair<int,int> *>(std::pair<int,int> *)
.text$mn:000057E0                 add     esp, 4
.text$mn:000057E3                 push    eax             ; void *
.text$mn:000057E4                 mov     edx, [ebp+arg_4]
.text$mn:000057E7                 push    edx
.text$mn:000057E8                 call    ??$_Unchecked@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z ; std::_Unchecked<std::pair<int,int> *>(std::pair<int,int> *)
.text$mn:000057ED                 add     esp, 4
.text$mn:000057F0                 push    eax             ; int
.text$mn:000057F1                 mov     eax, [ebp+arg_0]
.text$mn:000057F4                 push    eax
.text$mn:000057F5                 call    ??$_Unchecked@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z ; std::_Unchecked<std::pair<int,int> *>(std::pair<int,int> *)
.text$mn:000057FA                 add     esp, 4
.text$mn:000057FD                 push    eax             ; int
.text$mn:000057FE                 call    ??$_Uninit_move@PAU?$pair@HH@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z ; std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)
.text$mn:00005803                 add     esp, 10h
.text$mn:00005806                 push    eax
.text$mn:00005807                 lea     ecx, [ebp+arg_8]
.text$mn:0000580A                 push    ecx
.text$mn:0000580B                 call    ??$_Rechecked@PAU?$pair@HH@std@@PAU12@@std@@YAAAPAU?$pair@HH@0@AAPAU10@PAU10@@Z ; std::_Rechecked<std::pair<int,int> *,std::pair<int,int> *>(std::pair<int,int> * &,std::pair<int,int> *)
.text$mn:00005810                 add     esp, 8
.text$mn:00005813                 mov     eax, [eax]
.text$mn:00005815                 pop     ebp
.text$mn:00005816                 retn
.text$mn:00005816 ??$_Uninitialized_move@PAU?$pair@HH@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z endp
.text$mn:00005816
.text$mn:00005816 ; ---------------------------------------------------------------------------
.text$mn:00005817                 align 4
.text$mn:00005817 _text$mn        ends
.text$mn:00005817
.text$mn:00005818 ; ===========================================================================
.text$mn:00005818
.text$mn:00005818 ; Segment type: Pure code
.text$mn:00005818 ; Segment permissions: Read/Execute
.text$mn:00005818 _text$mn        segment para public 'CODE' use32
.text$mn:00005818                 assume cs:_text$mn
.text$mn:00005818                 ;org 5818h
.text$mn:00005818 ; COMDAT (pick any)
.text$mn:00005818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005818
.text$mn:00005818 ; =============== S U B R O U T I N E =======================================
.text$mn:00005818
.text$mn:00005818 ; Attributes: bp-based frame
.text$mn:00005818
.text$mn:00005818 ; struct AssociationInfo * __cdecl std::_Uninitialized_move<struct AssociationInfo *, struct AssociationInfo *, struct std::_Wrap_alloc<class std::allocator<struct AssociationInfo>>>(struct AssociationInfo *, struct AssociationInfo *, struct AssociationInfo *, struct std::_Wrap_alloc<class std::allocator<struct AssociationInfo>> &)
.text$mn:00005818                 public ??$_Uninitialized_move@PAUAssociationInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z
.text$mn:00005818 ??$_Uninitialized_move@PAUAssociationInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z proc near
.text$mn:00005818                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Umove<AssociationInfo *>(AssociationInfo *,AssociationInfo *,AssociationInfo *)+25p
.text$mn:00005818
.text$mn:00005818 arg_0           = dword ptr  8
.text$mn:00005818 arg_4           = dword ptr  0Ch
.text$mn:00005818 arg_8           = dword ptr  10h
.text$mn:00005818 arg_C           = dword ptr  14h
.text$mn:00005818
.text$mn:00005818                 push    ebp
.text$mn:00005819                 mov     ebp, esp
.text$mn:0000581B                 mov     eax, [ebp+arg_C]
.text$mn:0000581E                 push    eax             ; int
.text$mn:0000581F                 mov     ecx, [ebp+arg_8]
.text$mn:00005822                 push    ecx
.text$mn:00005823                 call    ??$_Unchecked@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z ; std::_Unchecked<AssociationInfo *>(AssociationInfo *)
.text$mn:00005828                 add     esp, 4
.text$mn:0000582B                 push    eax             ; void *
.text$mn:0000582C                 mov     edx, [ebp+arg_4]
.text$mn:0000582F                 push    edx
.text$mn:00005830                 call    ??$_Unchecked@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z ; std::_Unchecked<AssociationInfo *>(AssociationInfo *)
.text$mn:00005835                 add     esp, 4
.text$mn:00005838                 push    eax             ; int
.text$mn:00005839                 mov     eax, [ebp+arg_0]
.text$mn:0000583C                 push    eax
.text$mn:0000583D                 call    ??$_Unchecked@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z ; std::_Unchecked<AssociationInfo *>(AssociationInfo *)
.text$mn:00005842                 add     esp, 4
.text$mn:00005845                 push    eax             ; int
.text$mn:00005846                 call    ??$_Uninit_move@PAUAssociationInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z ; std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)
.text$mn:0000584B                 add     esp, 10h
.text$mn:0000584E                 push    eax
.text$mn:0000584F                 lea     ecx, [ebp+arg_8]
.text$mn:00005852                 push    ecx
.text$mn:00005853                 call    ??$_Rechecked@PAUAssociationInfo@@PAU1@@std@@YAAAPAUAssociationInfo@@AAPAU1@PAU1@@Z ; std::_Rechecked<AssociationInfo *,AssociationInfo *>(AssociationInfo * &,AssociationInfo *)
.text$mn:00005858                 add     esp, 8
.text$mn:0000585B                 mov     eax, [eax]
.text$mn:0000585D                 pop     ebp
.text$mn:0000585E                 retn
.text$mn:0000585E ??$_Uninitialized_move@PAUAssociationInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z endp
.text$mn:0000585E
.text$mn:0000585E ; ---------------------------------------------------------------------------
.text$mn:0000585F                 align 10h
.text$mn:0000585F _text$mn        ends
.text$mn:0000585F
.text$mn:00005860 ; ===========================================================================
.text$mn:00005860
.text$mn:00005860 ; Segment type: Pure code
.text$mn:00005860 ; Segment permissions: Read/Execute
.text$mn:00005860 _text$mn        segment para public 'CODE' use32
.text$mn:00005860                 assume cs:_text$mn
.text$mn:00005860                 ;org 5860h
.text$mn:00005860 ; COMDAT (pick any)
.text$mn:00005860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005860
.text$mn:00005860 ; =============== S U B R O U T I N E =======================================
.text$mn:00005860
.text$mn:00005860 ; Attributes: bp-based frame
.text$mn:00005860
.text$mn:00005860 ; struct foundInfo * __cdecl std::_Uninitialized_move<struct foundInfo *, struct foundInfo *, struct std::_Wrap_alloc<class std::allocator<struct foundInfo>>>(struct foundInfo *, struct foundInfo *, struct foundInfo *, struct std::_Wrap_alloc<class std::allocator<struct foundInfo>> &)
.text$mn:00005860                 public ??$_Uninitialized_move@PAUfoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z
.text$mn:00005860 ??$_Uninitialized_move@PAUfoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z proc near
.text$mn:00005860                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Umove<foundInfo *>(foundInfo *,foundInfo *,foundInfo *)+25p
.text$mn:00005860
.text$mn:00005860 arg_0           = dword ptr  8
.text$mn:00005860 arg_4           = dword ptr  0Ch
.text$mn:00005860 arg_8           = dword ptr  10h
.text$mn:00005860 arg_C           = dword ptr  14h
.text$mn:00005860
.text$mn:00005860                 push    ebp
.text$mn:00005861                 mov     ebp, esp
.text$mn:00005863                 mov     eax, [ebp+arg_C]
.text$mn:00005866                 push    eax             ; int
.text$mn:00005867                 mov     ecx, [ebp+arg_8]
.text$mn:0000586A                 push    ecx
.text$mn:0000586B                 call    ??$_Unchecked@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z ; std::_Unchecked<foundInfo *>(foundInfo *)
.text$mn:00005870                 add     esp, 4
.text$mn:00005873                 push    eax             ; void *
.text$mn:00005874                 mov     edx, [ebp+arg_4]
.text$mn:00005877                 push    edx
.text$mn:00005878                 call    ??$_Unchecked@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z ; std::_Unchecked<foundInfo *>(foundInfo *)
.text$mn:0000587D                 add     esp, 4
.text$mn:00005880                 push    eax             ; int
.text$mn:00005881                 mov     eax, [ebp+arg_0]
.text$mn:00005884                 push    eax
.text$mn:00005885                 call    ??$_Unchecked@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z ; std::_Unchecked<foundInfo *>(foundInfo *)
.text$mn:0000588A                 add     esp, 4
.text$mn:0000588D                 push    eax             ; int
.text$mn:0000588E                 call    ??$_Uninit_move@PAUfoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z ; std::_Uninit_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)
.text$mn:00005893                 add     esp, 10h
.text$mn:00005896                 push    eax
.text$mn:00005897                 lea     ecx, [ebp+arg_8]
.text$mn:0000589A                 push    ecx
.text$mn:0000589B                 call    ??$_Rechecked@PAUfoundInfo@@PAU1@@std@@YAAAPAUfoundInfo@@AAPAU1@PAU1@@Z ; std::_Rechecked<foundInfo *,foundInfo *>(foundInfo * &,foundInfo *)
.text$mn:000058A0                 add     esp, 8
.text$mn:000058A3                 mov     eax, [eax]
.text$mn:000058A5                 pop     ebp
.text$mn:000058A6                 retn
.text$mn:000058A6 ??$_Uninitialized_move@PAUfoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z endp
.text$mn:000058A6
.text$mn:000058A6 ; ---------------------------------------------------------------------------
.text$mn:000058A7                 align 4
.text$mn:000058A7 _text$mn        ends
.text$mn:000058A7
.text$mn:000058A8 ; ===========================================================================
.text$mn:000058A8
.text$mn:000058A8 ; Segment type: Pure code
.text$mn:000058A8 ; Segment permissions: Read/Execute
.text$mn:000058A8 _text$mn        segment para public 'CODE' use32
.text$mn:000058A8                 assume cs:_text$mn
.text$mn:000058A8                 ;org 58A8h
.text$mn:000058A8 ; COMDAT (pick any)
.text$mn:000058A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058A8
.text$mn:000058A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000058A8
.text$mn:000058A8 ; Attributes: bp-based frame
.text$mn:000058A8
.text$mn:000058A8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Uninitialized_move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:000058A8                 public ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:000058A8 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:000058A8                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+25p
.text$mn:000058A8
.text$mn:000058A8 arg_0           = dword ptr  8
.text$mn:000058A8 arg_4           = dword ptr  0Ch
.text$mn:000058A8 arg_8           = dword ptr  10h
.text$mn:000058A8 arg_C           = dword ptr  14h
.text$mn:000058A8
.text$mn:000058A8                 push    ebp
.text$mn:000058A9                 mov     ebp, esp
.text$mn:000058AB                 mov     eax, [ebp+arg_C]
.text$mn:000058AE                 push    eax             ; int
.text$mn:000058AF                 mov     ecx, [ebp+arg_8]
.text$mn:000058B2                 push    ecx
.text$mn:000058B3                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000058B8                 add     esp, 4
.text$mn:000058BB                 push    eax             ; void *
.text$mn:000058BC                 mov     edx, [ebp+arg_4]
.text$mn:000058BF                 push    edx
.text$mn:000058C0                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000058C5                 add     esp, 4
.text$mn:000058C8                 push    eax             ; int
.text$mn:000058C9                 mov     eax, [ebp+arg_0]
.text$mn:000058CC                 push    eax
.text$mn:000058CD                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000058D2                 add     esp, 4
.text$mn:000058D5                 push    eax             ; int
.text$mn:000058D6                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:000058DB                 add     esp, 10h
.text$mn:000058DE                 push    eax
.text$mn:000058DF                 lea     ecx, [ebp+arg_8]
.text$mn:000058E2                 push    ecx
.text$mn:000058E3                 call    ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000058E8                 add     esp, 8
.text$mn:000058EB                 mov     eax, [eax]
.text$mn:000058ED                 pop     ebp
.text$mn:000058EE                 retn
.text$mn:000058EE ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:000058EE
.text$mn:000058EE ; ---------------------------------------------------------------------------
.text$mn:000058EF                 align 10h
.text$mn:000058EF _text$mn        ends
.text$mn:000058EF
.text$mn:000058F0 ; ===========================================================================
.text$mn:000058F0
.text$mn:000058F0 ; Segment type: Pure code
.text$mn:000058F0 ; Segment permissions: Read/Execute
.text$mn:000058F0 _text$mn        segment para public 'CODE' use32
.text$mn:000058F0                 assume cs:_text$mn
.text$mn:000058F0                 ;org 58F0h
.text$mn:000058F0 ; COMDAT (pick any)
.text$mn:000058F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058F0
.text$mn:000058F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000058F0
.text$mn:000058F0 ; Attributes: bp-based frame
.text$mn:000058F0
.text$mn:000058F0 ; class FunctionParser * * __cdecl std::_Val_type<class FunctionParser * *>(class FunctionParser * *)
.text$mn:000058F0                 public ??$_Val_type@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z
.text$mn:000058F0 ??$_Val_type@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z proc near
.text$mn:000058F0                                         ; CODE XREF: std::_Uninit_move<FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)+20p
.text$mn:000058F0                 push    ebp
.text$mn:000058F1                 mov     ebp, esp
.text$mn:000058F3                 xor     eax, eax
.text$mn:000058F5                 pop     ebp
.text$mn:000058F6                 retn
.text$mn:000058F6 ??$_Val_type@PAPAVFunctionParser@@@std@@YAPAPAVFunctionParser@@PAPAV1@@Z endp
.text$mn:000058F6
.text$mn:000058F6 ; ---------------------------------------------------------------------------
.text$mn:000058F7                 align 4
.text$mn:000058F7 _text$mn        ends
.text$mn:000058F7
.text$mn:000058F8 ; ===========================================================================
.text$mn:000058F8
.text$mn:000058F8 ; Segment type: Pure code
.text$mn:000058F8 ; Segment permissions: Read/Execute
.text$mn:000058F8 _text$mn        segment para public 'CODE' use32
.text$mn:000058F8                 assume cs:_text$mn
.text$mn:000058F8                 ;org 58F8h
.text$mn:000058F8 ; COMDAT (pick any)
.text$mn:000058F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058F8
.text$mn:000058F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000058F8
.text$mn:000058F8 ; Attributes: bp-based frame
.text$mn:000058F8
.text$mn:000058F8 ; struct std::pair<int, int> * __cdecl std::_Val_type<struct std::pair<int, int> *>(struct std::pair<int, int> *)
.text$mn:000058F8                 public ??$_Val_type@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z
.text$mn:000058F8 ??$_Val_type@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z proc near
.text$mn:000058F8                                         ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)+20p
.text$mn:000058F8                 push    ebp
.text$mn:000058F9                 mov     ebp, esp
.text$mn:000058FB                 xor     eax, eax
.text$mn:000058FD                 pop     ebp
.text$mn:000058FE                 retn
.text$mn:000058FE ??$_Val_type@PAU?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@PAU10@@Z endp
.text$mn:000058FE
.text$mn:000058FE ; ---------------------------------------------------------------------------
.text$mn:000058FF                 align 10h
.text$mn:000058FF _text$mn        ends
.text$mn:000058FF
.text$mn:00005900 ; ===========================================================================
.text$mn:00005900
.text$mn:00005900 ; Segment type: Pure code
.text$mn:00005900 ; Segment permissions: Read/Execute
.text$mn:00005900 _text$mn        segment para public 'CODE' use32
.text$mn:00005900                 assume cs:_text$mn
.text$mn:00005900                 ;org 5900h
.text$mn:00005900 ; COMDAT (pick any)
.text$mn:00005900                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005900
.text$mn:00005900 ; =============== S U B R O U T I N E =======================================
.text$mn:00005900
.text$mn:00005900 ; Attributes: bp-based frame
.text$mn:00005900
.text$mn:00005900 ; struct AssociationInfo * __cdecl std::_Val_type<struct AssociationInfo *>(struct AssociationInfo *)
.text$mn:00005900                 public ??$_Val_type@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z
.text$mn:00005900 ??$_Val_type@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z proc near
.text$mn:00005900                                         ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)+20p
.text$mn:00005900                 push    ebp
.text$mn:00005901                 mov     ebp, esp
.text$mn:00005903                 xor     eax, eax
.text$mn:00005905                 pop     ebp
.text$mn:00005906                 retn
.text$mn:00005906 ??$_Val_type@PAUAssociationInfo@@@std@@YAPAUAssociationInfo@@PAU1@@Z endp
.text$mn:00005906
.text$mn:00005906 ; ---------------------------------------------------------------------------
.text$mn:00005907                 align 4
.text$mn:00005907 _text$mn        ends
.text$mn:00005907
.text$mn:00005908 ; ===========================================================================
.text$mn:00005908
.text$mn:00005908 ; Segment type: Pure code
.text$mn:00005908 ; Segment permissions: Read/Execute
.text$mn:00005908 _text$mn        segment para public 'CODE' use32
.text$mn:00005908                 assume cs:_text$mn
.text$mn:00005908                 ;org 5908h
.text$mn:00005908 ; COMDAT (pick any)
.text$mn:00005908                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005908
.text$mn:00005908 ; =============== S U B R O U T I N E =======================================
.text$mn:00005908
.text$mn:00005908 ; Attributes: bp-based frame
.text$mn:00005908
.text$mn:00005908 ; struct foundInfo * __cdecl std::_Val_type<struct foundInfo *>(struct foundInfo *)
.text$mn:00005908                 public ??$_Val_type@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z
.text$mn:00005908 ??$_Val_type@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z proc near
.text$mn:00005908                                         ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)+20p
.text$mn:00005908                 push    ebp
.text$mn:00005909                 mov     ebp, esp
.text$mn:0000590B                 xor     eax, eax
.text$mn:0000590D                 pop     ebp
.text$mn:0000590E                 retn
.text$mn:0000590E ??$_Val_type@PAUfoundInfo@@@std@@YAPAUfoundInfo@@PAU1@@Z endp
.text$mn:0000590E
.text$mn:0000590E ; ---------------------------------------------------------------------------
.text$mn:0000590F                 align 10h
.text$mn:0000590F _text$mn        ends
.text$mn:0000590F
.text$mn:00005910 ; ===========================================================================
.text$mn:00005910
.text$mn:00005910 ; Segment type: Pure code
.text$mn:00005910 ; Segment permissions: Read/Execute
.text$mn:00005910 _text$mn        segment para public 'CODE' use32
.text$mn:00005910                 assume cs:_text$mn
.text$mn:00005910                 ;org 5910h
.text$mn:00005910 ; COMDAT (pick any)
.text$mn:00005910                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005910
.text$mn:00005910 ; =============== S U B R O U T I N E =======================================
.text$mn:00005910
.text$mn:00005910 ; Attributes: bp-based frame
.text$mn:00005910
.text$mn:00005910 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Val_type<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00005910                 public ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00005910 ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00005910                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+20p
.text$mn:00005910                 push    ebp
.text$mn:00005911                 mov     ebp, esp
.text$mn:00005913                 xor     eax, eax
.text$mn:00005915                 pop     ebp
.text$mn:00005916                 retn
.text$mn:00005916 ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00005916
.text$mn:00005916 ; ---------------------------------------------------------------------------
.text$mn:00005917                 align 4
.text$mn:00005917 _text$mn        ends
.text$mn:00005917
.text$mn:00005918 ; ===========================================================================
.text$mn:00005918
.text$mn:00005918 ; Segment type: Pure code
.text$mn:00005918 ; Segment permissions: Read/Execute
.text$mn:00005918 _text$mn        segment para public 'CODE' use32
.text$mn:00005918                 assume cs:_text$mn
.text$mn:00005918                 ;org 5918h
.text$mn:00005918 ; COMDAT (pick any)
.text$mn:00005918                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005918
.text$mn:00005918 ; =============== S U B R O U T I N E =======================================
.text$mn:00005918
.text$mn:00005918 ; Attributes: bp-based frame
.text$mn:00005918
.text$mn:00005918 ; struct foundInfo const * __cdecl std::addressof<struct foundInfo const>(struct foundInfo const &)
.text$mn:00005918                 public ??$addressof@$$CBUfoundInfo@@@std@@YAPBUfoundInfo@@ABU1@@Z
.text$mn:00005918 ??$addressof@$$CBUfoundInfo@@@std@@YAPBUfoundInfo@@ABU1@@Z proc near
.text$mn:00005918                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+Dp
.text$mn:00005918                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+29p
.text$mn:00005918
.text$mn:00005918 arg_0           = dword ptr  8
.text$mn:00005918
.text$mn:00005918                 push    ebp
.text$mn:00005919                 mov     ebp, esp
.text$mn:0000591B                 mov     eax, [ebp+arg_0]
.text$mn:0000591E                 pop     ebp
.text$mn:0000591F                 retn
.text$mn:0000591F ??$addressof@$$CBUfoundInfo@@@std@@YAPBUfoundInfo@@ABU1@@Z endp
.text$mn:0000591F
.text$mn:0000591F _text$mn        ends
.text$mn:0000591F
.text$mn:00005920 ; ===========================================================================
.text$mn:00005920
.text$mn:00005920 ; Segment type: Pure code
.text$mn:00005920 ; Segment permissions: Read/Execute
.text$mn:00005920 _text$mn        segment para public 'CODE' use32
.text$mn:00005920                 assume cs:_text$mn
.text$mn:00005920                 ;org 5920h
.text$mn:00005920 ; COMDAT (pick any)
.text$mn:00005920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005920
.text$mn:00005920 ; =============== S U B R O U T I N E =======================================
.text$mn:00005920
.text$mn:00005920 ; Attributes: bp-based frame
.text$mn:00005920
.text$mn:00005920 ; char * __cdecl std::addressof<char>(char &)
.text$mn:00005920                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00005920 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00005920                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00005920                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00005920
.text$mn:00005920 arg_0           = dword ptr  8
.text$mn:00005920
.text$mn:00005920                 push    ebp
.text$mn:00005921                 mov     ebp, esp
.text$mn:00005923                 mov     eax, [ebp+arg_0]
.text$mn:00005926                 pop     ebp
.text$mn:00005927                 retn
.text$mn:00005927 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00005927
.text$mn:00005927 _text$mn        ends
.text$mn:00005927
.text$mn:00005928 ; ===========================================================================
.text$mn:00005928
.text$mn:00005928 ; Segment type: Pure code
.text$mn:00005928 ; Segment permissions: Read/Execute
.text$mn:00005928 _text$mn        segment para public 'CODE' use32
.text$mn:00005928                 assume cs:_text$mn
.text$mn:00005928                 ;org 5928h
.text$mn:00005928 ; COMDAT (pick any)
.text$mn:00005928                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005928
.text$mn:00005928 ; =============== S U B R O U T I N E =======================================
.text$mn:00005928
.text$mn:00005928 ; Attributes: bp-based frame
.text$mn:00005928
.text$mn:00005928 ; class FunctionParser * * __cdecl std::addressof<class FunctionParser *>(class FunctionParser * &)
.text$mn:00005928                 public ??$addressof@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@AAPAV1@@Z
.text$mn:00005928 ??$addressof@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@AAPAV1@@Z proc near
.text$mn:00005928                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+Dp
.text$mn:00005928                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+2Dp
.text$mn:00005928
.text$mn:00005928 arg_0           = dword ptr  8
.text$mn:00005928
.text$mn:00005928                 push    ebp
.text$mn:00005929                 mov     ebp, esp
.text$mn:0000592B                 mov     eax, [ebp+arg_0]
.text$mn:0000592E                 pop     ebp
.text$mn:0000592F                 retn
.text$mn:0000592F ??$addressof@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@AAPAV1@@Z endp
.text$mn:0000592F
.text$mn:0000592F _text$mn        ends
.text$mn:0000592F
.text$mn:00005930 ; ===========================================================================
.text$mn:00005930
.text$mn:00005930 ; Segment type: Pure code
.text$mn:00005930 ; Segment permissions: Read/Execute
.text$mn:00005930 _text$mn        segment para public 'CODE' use32
.text$mn:00005930                 assume cs:_text$mn
.text$mn:00005930                 ;org 5930h
.text$mn:00005930 ; COMDAT (pick any)
.text$mn:00005930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005930
.text$mn:00005930 ; =============== S U B R O U T I N E =======================================
.text$mn:00005930
.text$mn:00005930 ; Attributes: bp-based frame
.text$mn:00005930
.text$mn:00005930 ; struct std::pair<int, int> * __cdecl std::addressof<struct std::pair<int, int>>(struct std::pair<int, int> &)
.text$mn:00005930                 public ??$addressof@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@AAU10@@Z
.text$mn:00005930 ??$addressof@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@AAU10@@Z proc near
.text$mn:00005930                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+Dp
.text$mn:00005930                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+2Dp
.text$mn:00005930
.text$mn:00005930 arg_0           = dword ptr  8
.text$mn:00005930
.text$mn:00005930                 push    ebp
.text$mn:00005931                 mov     ebp, esp
.text$mn:00005933                 mov     eax, [ebp+arg_0]
.text$mn:00005936                 pop     ebp
.text$mn:00005937                 retn
.text$mn:00005937 ??$addressof@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@AAU10@@Z endp
.text$mn:00005937
.text$mn:00005937 _text$mn        ends
.text$mn:00005937
.text$mn:00005938 ; ===========================================================================
.text$mn:00005938
.text$mn:00005938 ; Segment type: Pure code
.text$mn:00005938 ; Segment permissions: Read/Execute
.text$mn:00005938 _text$mn        segment para public 'CODE' use32
.text$mn:00005938                 assume cs:_text$mn
.text$mn:00005938                 ;org 5938h
.text$mn:00005938 ; COMDAT (pick any)
.text$mn:00005938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005938
.text$mn:00005938 ; =============== S U B R O U T I N E =======================================
.text$mn:00005938
.text$mn:00005938 ; Attributes: bp-based frame
.text$mn:00005938
.text$mn:00005938 ; struct AssociationInfo * __cdecl std::addressof<struct AssociationInfo>(struct AssociationInfo &)
.text$mn:00005938                 public ??$addressof@UAssociationInfo@@@std@@YAPAUAssociationInfo@@AAU1@@Z
.text$mn:00005938 ??$addressof@UAssociationInfo@@@std@@YAPAUAssociationInfo@@AAU1@@Z proc near
.text$mn:00005938                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+Dp
.text$mn:00005938                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+2Dp
.text$mn:00005938
.text$mn:00005938 arg_0           = dword ptr  8
.text$mn:00005938
.text$mn:00005938                 push    ebp
.text$mn:00005939                 mov     ebp, esp
.text$mn:0000593B                 mov     eax, [ebp+arg_0]
.text$mn:0000593E                 pop     ebp
.text$mn:0000593F                 retn
.text$mn:0000593F ??$addressof@UAssociationInfo@@@std@@YAPAUAssociationInfo@@AAU1@@Z endp
.text$mn:0000593F
.text$mn:0000593F _text$mn        ends
.text$mn:0000593F
.text$mn:00005940 ; ===========================================================================
.text$mn:00005940
.text$mn:00005940 ; Segment type: Pure code
.text$mn:00005940 ; Segment permissions: Read/Execute
.text$mn:00005940 _text$mn        segment para public 'CODE' use32
.text$mn:00005940                 assume cs:_text$mn
.text$mn:00005940                 ;org 5940h
.text$mn:00005940 ; COMDAT (pick any)
.text$mn:00005940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005940
.text$mn:00005940 ; =============== S U B R O U T I N E =======================================
.text$mn:00005940
.text$mn:00005940 ; Attributes: bp-based frame
.text$mn:00005940
.text$mn:00005940 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::addressof<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00005940                 public ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00005940 ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00005940                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Dp
.text$mn:00005940                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Dp
.text$mn:00005940
.text$mn:00005940 arg_0           = dword ptr  8
.text$mn:00005940
.text$mn:00005940                 push    ebp
.text$mn:00005941                 mov     ebp, esp
.text$mn:00005943                 mov     eax, [ebp+arg_0]
.text$mn:00005946                 pop     ebp
.text$mn:00005947                 retn
.text$mn:00005947 ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00005947
.text$mn:00005947 _text$mn        ends
.text$mn:00005947
.text$mn:00005948 ; ===========================================================================
.text$mn:00005948
.text$mn:00005948 ; Segment type: Pure code
.text$mn:00005948 ; Segment permissions: Read/Execute
.text$mn:00005948 _text$mn        segment para public 'CODE' use32
.text$mn:00005948                 assume cs:_text$mn
.text$mn:00005948                 ;org 5948h
.text$mn:00005948 ; COMDAT (pick any)
.text$mn:00005948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005948
.text$mn:00005948 ; =============== S U B R O U T I N E =======================================
.text$mn:00005948
.text$mn:00005948 ; Attributes: bp-based frame
.text$mn:00005948
.text$mn:00005948 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00005948                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00005948 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00005948                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00005948                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00005948
.text$mn:00005948 arg_0           = dword ptr  8
.text$mn:00005948
.text$mn:00005948                 push    ebp
.text$mn:00005949                 mov     ebp, esp
.text$mn:0000594B                 mov     eax, [ebp+arg_0]
.text$mn:0000594E                 pop     ebp
.text$mn:0000594F                 retn
.text$mn:0000594F ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:0000594F
.text$mn:0000594F _text$mn        ends
.text$mn:0000594F
.text$mn:00005950 ; ===========================================================================
.text$mn:00005950
.text$mn:00005950 ; Segment type: Pure code
.text$mn:00005950 ; Segment permissions: Read/Execute
.text$mn:00005950 _text$mn        segment para public 'CODE' use32
.text$mn:00005950                 assume cs:_text$mn
.text$mn:00005950                 ;org 5950h
.text$mn:00005950 ; COMDAT (pick any)
.text$mn:00005950                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005950
.text$mn:00005950 ; =============== S U B R O U T I N E =======================================
.text$mn:00005950
.text$mn:00005950 ; Attributes: bp-based frame
.text$mn:00005950
.text$mn:00005950 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00005950                 public ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:00005950 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$mn:00005950                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+CBp
.text$mn:00005950
.text$mn:00005950 var_70          = byte ptr -70h
.text$mn:00005950 var_64          = byte ptr -64h
.text$mn:00005950 var_58          = dword ptr -58h
.text$mn:00005950 var_54          = dword ptr -54h
.text$mn:00005950 var_50          = dword ptr -50h
.text$mn:00005950 var_4C          = dword ptr -4Ch
.text$mn:00005950 var_48          = dword ptr -48h
.text$mn:00005950 var_44          = dword ptr -44h
.text$mn:00005950 var_40          = dword ptr -40h
.text$mn:00005950 var_3C          = dword ptr -3Ch
.text$mn:00005950 var_38          = dword ptr -38h
.text$mn:00005950 var_34          = dword ptr -34h
.text$mn:00005950 var_30          = dword ptr -30h
.text$mn:00005950 var_2C          = dword ptr -2Ch
.text$mn:00005950 var_28          = dword ptr -28h
.text$mn:00005950 var_24          = dword ptr -24h
.text$mn:00005950 var_20          = dword ptr -20h
.text$mn:00005950 var_1C          = dword ptr -1Ch
.text$mn:00005950 var_18          = dword ptr -18h
.text$mn:00005950 var_14          = dword ptr -14h
.text$mn:00005950 var_10          = dword ptr -10h
.text$mn:00005950 var_C           = dword ptr -0Ch
.text$mn:00005950 var_4           = dword ptr -4
.text$mn:00005950 arg_0           = byte ptr  8
.text$mn:00005950 arg_C           = byte ptr  14h
.text$mn:00005950
.text$mn:00005950                 push    ebp
.text$mn:00005951                 mov     ebp, esp
.text$mn:00005953                 push    0FFFFFFFFh
.text$mn:00005955                 push    offset __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:0000595A                 mov     eax, large fs:0
.text$mn:00005960                 push    eax
.text$mn:00005961                 sub     esp, 64h
.text$mn:00005964                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005969                 xor     eax, ebp
.text$mn:0000596B                 push    eax
.text$mn:0000596C                 lea     eax, [ebp+var_C]
.text$mn:0000596F                 mov     large fs:0, eax
.text$mn:00005975                 mov     [ebp+var_10], ecx
.text$mn:00005978                 mov     [ebp+var_4], 1
.text$mn:0000597F                 sub     esp, 0Ch
.text$mn:00005982                 mov     ecx, esp
.text$mn:00005984                 mov     [ebp+var_3C], esp
.text$mn:00005987                 lea     eax, [ebp+arg_C]
.text$mn:0000598A                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000598B                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00005990                 mov     [ebp+var_14], eax
.text$mn:00005993                 mov     ecx, [ebp+var_14]
.text$mn:00005996                 mov     [ebp+var_40], ecx
.text$mn:00005999                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000599D                 sub     esp, 0Ch
.text$mn:000059A0                 mov     ecx, esp
.text$mn:000059A2                 mov     [ebp+var_44], esp
.text$mn:000059A5                 lea     edx, [ebp+arg_0]
.text$mn:000059A8                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000059A9                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000059AE                 mov     [ebp+var_18], eax
.text$mn:000059B1                 mov     eax, [ebp+var_18]
.text$mn:000059B4                 mov     [ebp+var_48], eax
.text$mn:000059B7                 mov     byte ptr [ebp+var_4], 3
.text$mn:000059BB                 lea     ecx, [ebp+var_70]
.text$mn:000059BE                 push    ecx
.text$mn:000059BF                 mov     ecx, [ebp+var_10]
.text$mn:000059C2                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:000059C7                 mov     [ebp+var_1C], eax
.text$mn:000059CA                 mov     edx, [ebp+var_1C]
.text$mn:000059CD                 mov     [ebp+var_20], edx
.text$mn:000059D0                 mov     byte ptr [ebp+var_4], 4
.text$mn:000059D4                 sub     esp, 0Ch
.text$mn:000059D7                 mov     ecx, esp
.text$mn:000059D9                 mov     [ebp+var_4C], esp
.text$mn:000059DC                 mov     eax, [ebp+var_20]
.text$mn:000059DF                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000059E0                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000059E5                 mov     [ebp+var_24], eax
.text$mn:000059E8                 mov     ecx, [ebp+var_24]
.text$mn:000059EB                 mov     [ebp+var_50], ecx
.text$mn:000059EE                 mov     byte ptr [ebp+var_4], 5
.text$mn:000059F2                 lea     edx, [ebp+var_64]
.text$mn:000059F5                 push    edx
.text$mn:000059F6                 mov     ecx, [ebp+var_10]
.text$mn:000059F9                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:000059FE                 mov     [ebp+var_28], eax
.text$mn:00005A01                 mov     eax, [ebp+var_28]
.text$mn:00005A04                 mov     [ebp+var_2C], eax
.text$mn:00005A07                 mov     byte ptr [ebp+var_4], 6
.text$mn:00005A0B                 sub     esp, 0Ch
.text$mn:00005A0E                 mov     ecx, esp
.text$mn:00005A10                 mov     [ebp+var_54], esp
.text$mn:00005A13                 mov     edx, [ebp+var_2C]
.text$mn:00005A16                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00005A17                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00005A1C                 mov     [ebp+var_30], eax
.text$mn:00005A1F                 mov     eax, [ebp+var_30]
.text$mn:00005A22                 mov     [ebp+var_58], eax
.text$mn:00005A25                 mov     byte ptr [ebp+var_4], 7
.text$mn:00005A29                 mov     byte ptr [ebp+var_4], 9
.text$mn:00005A2D                 mov     ecx, [ebp+var_10]
.text$mn:00005A30                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00005A35                 mov     [ebp+var_34], eax
.text$mn:00005A38                 mov     ecx, [ebp+var_34]
.text$mn:00005A3B                 mov     [ebp+var_38], ecx
.text$mn:00005A3E                 mov     byte ptr [ebp+var_4], 8
.text$mn:00005A42                 lea     ecx, [ebp+var_64]
.text$mn:00005A45                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00005A4A                 mov     byte ptr [ebp+var_4], 1
.text$mn:00005A4E                 lea     ecx, [ebp+var_70]
.text$mn:00005A51                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00005A56                 mov     byte ptr [ebp+var_4], 0
.text$mn:00005A5A                 lea     ecx, [ebp+arg_0]
.text$mn:00005A5D                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00005A62                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005A69                 lea     ecx, [ebp+arg_C]
.text$mn:00005A6C                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00005A71                 mov     eax, [ebp+var_38]
.text$mn:00005A74                 mov     ecx, [ebp+var_C]
.text$mn:00005A77                 mov     large fs:0, ecx
.text$mn:00005A7E                 pop     ecx
.text$mn:00005A7F                 mov     esp, ebp
.text$mn:00005A81                 pop     ebp
.text$mn:00005A82                 retn    18h
.text$mn:00005A82 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$mn:00005A82
.text$mn:00005A82 ; ---------------------------------------------------------------------------
.text$mn:00005A85                 align 4
.text$mn:00005A85 _text$mn        ends
.text$mn:00005A85
.text$x:00005A88 ; ===========================================================================
.text$x:00005A88
.text$x:00005A88 ; Segment type: Pure code
.text$x:00005A88 ; Segment permissions: Read/Execute
.text$x:00005A88 _text$x         segment para public 'CODE' use32
.text$x:00005A88                 assume cs:_text$x
.text$x:00005A88                 ;org 5A88h
.text$x:00005A88 ; COMDAT (pick associative to section at 5950)
.text$x:00005A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005A88
.text$x:00005A88 ; =============== S U B R O U T I N E =======================================
.text$x:00005A88
.text$x:00005A88
.text$x:00005A88 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
.text$x:00005A88                                         ; DATA XREF: .xdata$x:0001090Co
.text$x:00005A88                 lea     ecx, [ebp+14h]
.text$x:00005A8B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005A8B __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 endp
.text$x:00005A8B
.text$x:00005A90
.text$x:00005A90 ; =============== S U B R O U T I N E =======================================
.text$x:00005A90
.text$x:00005A90
.text$x:00005A90 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
.text$x:00005A90                                         ; DATA XREF: .xdata$x:00010914o
.text$x:00005A90                 lea     ecx, [ebp+8]
.text$x:00005A93                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005A93 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 endp
.text$x:00005A93
.text$x:00005A98
.text$x:00005A98 ; =============== S U B R O U T I N E =======================================
.text$x:00005A98
.text$x:00005A98
.text$x:00005A98 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
.text$x:00005A98                                         ; DATA XREF: .xdata$x:0001091Co
.text$x:00005A98                 mov     ecx, [ebp-3Ch]
.text$x:00005A9B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005A9B __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 endp
.text$x:00005A9B
.text$x:00005AA0
.text$x:00005AA0 ; =============== S U B R O U T I N E =======================================
.text$x:00005AA0
.text$x:00005AA0
.text$x:00005AA0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
.text$x:00005AA0                                         ; DATA XREF: .xdata$x:00010924o
.text$x:00005AA0                 mov     ecx, [ebp-44h]
.text$x:00005AA3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005AA3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 endp
.text$x:00005AA3
.text$x:00005AA8
.text$x:00005AA8 ; =============== S U B R O U T I N E =======================================
.text$x:00005AA8
.text$x:00005AA8
.text$x:00005AA8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 proc near
.text$x:00005AA8                                         ; DATA XREF: .xdata$x:0001092Co
.text$x:00005AA8                                         ; .xdata$x:0001094Co
.text$x:00005AA8                 lea     ecx, [ebp-70h]
.text$x:00005AAB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005AAB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 endp
.text$x:00005AAB
.text$x:00005AB0
.text$x:00005AB0 ; =============== S U B R O U T I N E =======================================
.text$x:00005AB0
.text$x:00005AB0
.text$x:00005AB0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 proc near
.text$x:00005AB0                                         ; DATA XREF: .xdata$x:00010934o
.text$x:00005AB0                 mov     ecx, [ebp-4Ch]
.text$x:00005AB3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005AB3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 endp
.text$x:00005AB3
.text$x:00005AB8
.text$x:00005AB8 ; =============== S U B R O U T I N E =======================================
.text$x:00005AB8
.text$x:00005AB8
.text$x:00005AB8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 proc near
.text$x:00005AB8                                         ; DATA XREF: .xdata$x:0001093Co
.text$x:00005AB8                                         ; .xdata$x:00010954o
.text$x:00005AB8                 lea     ecx, [ebp-64h]
.text$x:00005ABB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005ABB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 endp
.text$x:00005ABB
.text$x:00005AC0
.text$x:00005AC0 ; =============== S U B R O U T I N E =======================================
.text$x:00005AC0
.text$x:00005AC0
.text$x:00005AC0 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 proc near
.text$x:00005AC0                                         ; DATA XREF: .xdata$x:00010944o
.text$x:00005AC0                 mov     ecx, [ebp-54h]
.text$x:00005AC3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005AC3 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 endp
.text$x:00005AC3
.text$x:00005AC8
.text$x:00005AC8 ; =============== S U B R O U T I N E =======================================
.text$x:00005AC8
.text$x:00005AC8
.text$x:00005AC8 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$x:00005AC8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00005AC8
.text$x:00005AC8 arg_4           = dword ptr  8
.text$x:00005AC8
.text$x:00005AC8                 mov     edx, [esp+arg_4]
.text$x:00005ACC                 lea     eax, [edx+0Ch]
.text$x:00005ACF                 mov     ecx, [edx-68h]
.text$x:00005AD2                 xor     ecx, eax
.text$x:00005AD4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005AD9                 mov     eax, offset __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$x:00005ADE                 jmp     ___CxxFrameHandler3
.text$x:00005ADE __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$x:00005ADE
.text$x:00005ADE ; ---------------------------------------------------------------------------
.text$x:00005AE3                 align 4
.text$x:00005AE3 _text$x         ends
.text$x:00005AE3
.text$mn:00005AE4 ; ===========================================================================
.text$mn:00005AE4
.text$mn:00005AE4 ; Segment type: Pure code
.text$mn:00005AE4 ; Segment permissions: Read/Execute
.text$mn:00005AE4 _text$mn        segment para public 'CODE' use32
.text$mn:00005AE4                 assume cs:_text$mn
.text$mn:00005AE4                 ;org 5AE4h
.text$mn:00005AE4 ; COMDAT (pick any)
.text$mn:00005AE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AE4
.text$mn:00005AE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AE4
.text$mn:00005AE4 ; Attributes: bp-based frame
.text$mn:00005AE4
.text$mn:00005AE4 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00005AE4                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00005AE4 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00005AE4                                         ; CODE XREF: $LN19+4Bp
.text$mn:00005AE4
.text$mn:00005AE4 var_4           = dword ptr -4
.text$mn:00005AE4 arg_0           = dword ptr  8
.text$mn:00005AE4 arg_4           = dword ptr  0Ch
.text$mn:00005AE4
.text$mn:00005AE4                 push    ebp
.text$mn:00005AE5                 mov     ebp, esp
.text$mn:00005AE7                 push    ecx
.text$mn:00005AE8                 mov     [ebp+var_4], ecx
.text$mn:00005AEB                 mov     eax, [ebp+arg_4]
.text$mn:00005AEE                 push    eax
.text$mn:00005AEF                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00005AF4                 add     esp, 4
.text$mn:00005AF7                 push    eax             ; int
.text$mn:00005AF8                 mov     ecx, [ebp+arg_0]
.text$mn:00005AFB                 push    ecx             ; void *
.text$mn:00005AFC                 mov     edx, [ebp+var_4]
.text$mn:00005AFF                 push    edx             ; int
.text$mn:00005B00                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00005B05                 add     esp, 0Ch
.text$mn:00005B08                 mov     esp, ebp
.text$mn:00005B0A                 pop     ebp
.text$mn:00005B0B                 retn    8
.text$mn:00005B0B ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00005B0B
.text$mn:00005B0B ; ---------------------------------------------------------------------------
.text$mn:00005B0E                 align 10h
.text$mn:00005B0E _text$mn        ends
.text$mn:00005B0E
.text$mn:00005B10 ; ===========================================================================
.text$mn:00005B10
.text$mn:00005B10 ; Segment type: Pure code
.text$mn:00005B10 ; Segment permissions: Read/Execute
.text$mn:00005B10 _text$mn        segment para public 'CODE' use32
.text$mn:00005B10                 assume cs:_text$mn
.text$mn:00005B10                 ;org 5B10h
.text$mn:00005B10 ; COMDAT (pick any)
.text$mn:00005B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B10
.text$mn:00005B10 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B10
.text$mn:00005B10 ; Attributes: bp-based frame
.text$mn:00005B10
.text$mn:00005B10 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00005B10                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00005B10 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00005B10                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00005B10
.text$mn:00005B10 var_1C          = dword ptr -1Ch
.text$mn:00005B10 var_18          = dword ptr -18h
.text$mn:00005B10 var_14          = dword ptr -14h
.text$mn:00005B10 var_10          = dword ptr -10h
.text$mn:00005B10 var_C           = dword ptr -0Ch
.text$mn:00005B10 var_4           = dword ptr -4
.text$mn:00005B10 arg_0           = dword ptr  8
.text$mn:00005B10 arg_4           = dword ptr  0Ch
.text$mn:00005B10
.text$mn:00005B10                 push    ebp
.text$mn:00005B11                 mov     ebp, esp
.text$mn:00005B13                 push    0FFFFFFFFh
.text$mn:00005B15                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00005B1A                 mov     eax, large fs:0
.text$mn:00005B20                 push    eax
.text$mn:00005B21                 sub     esp, 10h
.text$mn:00005B24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005B29                 xor     eax, ebp
.text$mn:00005B2B                 push    eax
.text$mn:00005B2C                 lea     eax, [ebp+var_C]
.text$mn:00005B2F                 mov     large fs:0, eax
.text$mn:00005B35                 mov     [ebp+var_18], ecx
.text$mn:00005B38                 mov     eax, [ebp+arg_0]
.text$mn:00005B3B                 push    eax             ; void *
.text$mn:00005B3C                 push    4               ; unsigned int
.text$mn:00005B3E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005B43                 add     esp, 8
.text$mn:00005B46                 mov     [ebp+var_10], eax
.text$mn:00005B49                 mov     [ebp+var_4], 0
.text$mn:00005B50                 cmp     [ebp+var_10], 0
.text$mn:00005B54                 jz      short loc_5B71
.text$mn:00005B56                 mov     ecx, [ebp+arg_4]
.text$mn:00005B59                 push    ecx
.text$mn:00005B5A                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00005B5F                 add     esp, 4
.text$mn:00005B62                 mov     edx, [ebp+var_10]
.text$mn:00005B65                 mov     eax, [eax]
.text$mn:00005B67                 mov     [edx], eax
.text$mn:00005B69                 mov     ecx, [ebp+var_10]
.text$mn:00005B6C                 mov     [ebp+var_14], ecx
.text$mn:00005B6F                 jmp     short loc_5B78
.text$mn:00005B71 ; ---------------------------------------------------------------------------
.text$mn:00005B71
.text$mn:00005B71 loc_5B71:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:00005B71                 mov     [ebp+var_14], 0
.text$mn:00005B78
.text$mn:00005B78 loc_5B78:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00005B78                 mov     edx, [ebp+var_14]
.text$mn:00005B7B                 mov     [ebp+var_1C], edx
.text$mn:00005B7E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005B85                 mov     ecx, [ebp+var_C]
.text$mn:00005B88                 mov     large fs:0, ecx
.text$mn:00005B8F                 pop     ecx
.text$mn:00005B90                 mov     esp, ebp
.text$mn:00005B92                 pop     ebp
.text$mn:00005B93                 retn    8
.text$mn:00005B93 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00005B93
.text$mn:00005B93 ; ---------------------------------------------------------------------------
.text$mn:00005B96                 align 4
.text$mn:00005B96 _text$mn        ends
.text$mn:00005B96
.text$x:00005B98 ; ===========================================================================
.text$x:00005B98
.text$x:00005B98 ; Segment type: Pure code
.text$x:00005B98 ; Segment permissions: Read/Execute
.text$x:00005B98 _text$x         segment para public 'CODE' use32
.text$x:00005B98                 assume cs:_text$x
.text$x:00005B98                 ;org 5B98h
.text$x:00005B98 ; COMDAT (pick associative to section at 5B10)
.text$x:00005B98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B98
.text$x:00005B98 ; =============== S U B R O U T I N E =======================================
.text$x:00005B98
.text$x:00005B98
.text$x:00005B98 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00005B98                                         ; DATA XREF: .xdata$x:00010B18o
.text$x:00005B98                 mov     eax, [ebp+8]
.text$x:00005B9B                 push    eax
.text$x:00005B9C                 mov     eax, [ebp-10h]
.text$x:00005B9F                 push    eax             ; void *
.text$x:00005BA0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005BA5                 add     esp, 8
.text$x:00005BA8                 retn
.text$x:00005BA8 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00005BA8
.text$x:00005BA9
.text$x:00005BA9 ; =============== S U B R O U T I N E =======================================
.text$x:00005BA9
.text$x:00005BA9
.text$x:00005BA9 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00005BA9                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00005BA9
.text$x:00005BA9 arg_4           = dword ptr  8
.text$x:00005BA9
.text$x:00005BA9                 mov     edx, [esp+arg_4]
.text$x:00005BAD                 lea     eax, [edx+0Ch]
.text$x:00005BB0                 mov     ecx, [edx-14h]
.text$x:00005BB3                 xor     ecx, eax
.text$x:00005BB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005BBA                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00005BBF                 jmp     ___CxxFrameHandler3
.text$x:00005BBF __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00005BBF
.text$x:00005BBF _text$x         ends
.text$x:00005BBF
.text$mn:00005BC4 ; ===========================================================================
.text$mn:00005BC4
.text$mn:00005BC4 ; Segment type: Pure code
.text$mn:00005BC4 ; Segment permissions: Read/Execute
.text$mn:00005BC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005BC4                 assume cs:_text$mn
.text$mn:00005BC4                 ;org 5BC4h
.text$mn:00005BC4 ; COMDAT (pick any)
.text$mn:00005BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BC4
.text$mn:00005BC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BC4
.text$mn:00005BC4 ; Attributes: bp-based frame
.text$mn:00005BC4
.text$mn:00005BC4 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00005BC4                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00005BC4 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00005BC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00005BC4
.text$mn:00005BC4 arg_0           = dword ptr  8
.text$mn:00005BC4 arg_4           = dword ptr  0Ch
.text$mn:00005BC4 arg_8           = dword ptr  10h
.text$mn:00005BC4
.text$mn:00005BC4                 push    ebp
.text$mn:00005BC5                 mov     ebp, esp
.text$mn:00005BC7                 mov     eax, [ebp+arg_8]
.text$mn:00005BCA                 push    eax
.text$mn:00005BCB                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00005BD0                 add     esp, 4
.text$mn:00005BD3                 push    eax             ; int
.text$mn:00005BD4                 mov     ecx, [ebp+arg_4]
.text$mn:00005BD7                 push    ecx             ; void *
.text$mn:00005BD8                 mov     ecx, [ebp+arg_0]
.text$mn:00005BDB                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00005BE0                 pop     ebp
.text$mn:00005BE1                 retn
.text$mn:00005BE1 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00005BE1
.text$mn:00005BE1 ; ---------------------------------------------------------------------------
.text$mn:00005BE2                 align 4
.text$mn:00005BE2 _text$mn        ends
.text$mn:00005BE2
.text$mn:00005BE4 ; ===========================================================================
.text$mn:00005BE4
.text$mn:00005BE4 ; Segment type: Pure code
.text$mn:00005BE4 ; Segment permissions: Read/Execute
.text$mn:00005BE4 _text$mn        segment para public 'CODE' use32
.text$mn:00005BE4                 assume cs:_text$mn
.text$mn:00005BE4                 ;org 5BE4h
.text$mn:00005BE4 ; COMDAT (pick any)
.text$mn:00005BE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BE4
.text$mn:00005BE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BE4
.text$mn:00005BE4 ; Attributes: bp-based frame
.text$mn:00005BE4
.text$mn:00005BE4 ; int __stdcall std::_Wrap_alloc<std::allocator<FunctionParser *>>::construct<FunctionParser *,FunctionParser *>(void *, int)
.text$mn:00005BE4                 public ??$construct@PAVFunctionParser@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z
.text$mn:00005BE4 ??$construct@PAVFunctionParser@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z proc near
.text$mn:00005BE4                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+9Ap
.text$mn:00005BE4                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+100p
.text$mn:00005BE4
.text$mn:00005BE4 var_4           = dword ptr -4
.text$mn:00005BE4 arg_0           = dword ptr  8
.text$mn:00005BE4 arg_4           = dword ptr  0Ch
.text$mn:00005BE4
.text$mn:00005BE4                 push    ebp
.text$mn:00005BE5                 mov     ebp, esp
.text$mn:00005BE7                 push    ecx
.text$mn:00005BE8                 mov     [ebp+var_4], ecx
.text$mn:00005BEB                 mov     eax, [ebp+arg_4]
.text$mn:00005BEE                 push    eax
.text$mn:00005BEF                 call    ??$forward@PAVFunctionParser@@@std@@YA$$QAPAVFunctionParser@@AAPAV1@@Z ; std::forward<FunctionParser *>(FunctionParser * &)
.text$mn:00005BF4                 add     esp, 4
.text$mn:00005BF7                 push    eax             ; int
.text$mn:00005BF8                 mov     ecx, [ebp+arg_0]
.text$mn:00005BFB                 push    ecx             ; void *
.text$mn:00005BFC                 mov     edx, [ebp+var_4]
.text$mn:00005BFF                 push    edx             ; int
.text$mn:00005C00                 call    ??$construct@PAVFunctionParser@@PAV1@@?$allocator_traits@V?$allocator@PAVFunctionParser@@@std@@@std@@SAXAAV?$allocator@PAVFunctionParser@@@1@PAPAVFunctionParser@@$$QAPAV3@@Z ; std::allocator_traits<std::allocator<FunctionParser *>>::construct<FunctionParser *,FunctionParser *>(std::allocator<FunctionParser *> &,FunctionParser * *,FunctionParser * &&)
.text$mn:00005C05                 add     esp, 0Ch
.text$mn:00005C08                 mov     esp, ebp
.text$mn:00005C0A                 pop     ebp
.text$mn:00005C0B                 retn    8
.text$mn:00005C0B ??$construct@PAVFunctionParser@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z endp
.text$mn:00005C0B
.text$mn:00005C0B ; ---------------------------------------------------------------------------
.text$mn:00005C0E                 align 10h
.text$mn:00005C0E _text$mn        ends
.text$mn:00005C0E
.text$mn:00005C10 ; ===========================================================================
.text$mn:00005C10
.text$mn:00005C10 ; Segment type: Pure code
.text$mn:00005C10 ; Segment permissions: Read/Execute
.text$mn:00005C10 _text$mn        segment para public 'CODE' use32
.text$mn:00005C10                 assume cs:_text$mn
.text$mn:00005C10                 ;org 5C10h
.text$mn:00005C10 ; COMDAT (pick any)
.text$mn:00005C10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C10
.text$mn:00005C10 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C10
.text$mn:00005C10 ; Attributes: bp-based frame
.text$mn:00005C10
.text$mn:00005C10 ; int __stdcall std::allocator<FunctionParser *>::construct<FunctionParser *,FunctionParser *>(void *, int)
.text$mn:00005C10                 public ??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z
.text$mn:00005C10 ??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z proc near
.text$mn:00005C10                                         ; CODE XREF: std::allocator_traits<std::allocator<FunctionParser *>>::construct<FunctionParser *,FunctionParser *>(std::allocator<FunctionParser *> &,FunctionParser * *,FunctionParser * &&)+17p
.text$mn:00005C10
.text$mn:00005C10 var_1C          = dword ptr -1Ch
.text$mn:00005C10 var_18          = dword ptr -18h
.text$mn:00005C10 var_14          = dword ptr -14h
.text$mn:00005C10 var_10          = dword ptr -10h
.text$mn:00005C10 var_C           = dword ptr -0Ch
.text$mn:00005C10 var_4           = dword ptr -4
.text$mn:00005C10 arg_0           = dword ptr  8
.text$mn:00005C10 arg_4           = dword ptr  0Ch
.text$mn:00005C10
.text$mn:00005C10                 push    ebp
.text$mn:00005C11                 mov     ebp, esp
.text$mn:00005C13                 push    0FFFFFFFFh
.text$mn:00005C15                 push    offset __ehhandler$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z
.text$mn:00005C1A                 mov     eax, large fs:0
.text$mn:00005C20                 push    eax
.text$mn:00005C21                 sub     esp, 10h
.text$mn:00005C24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005C29                 xor     eax, ebp
.text$mn:00005C2B                 push    eax
.text$mn:00005C2C                 lea     eax, [ebp+var_C]
.text$mn:00005C2F                 mov     large fs:0, eax
.text$mn:00005C35                 mov     [ebp+var_18], ecx
.text$mn:00005C38                 mov     eax, [ebp+arg_0]
.text$mn:00005C3B                 push    eax             ; void *
.text$mn:00005C3C                 push    4               ; unsigned int
.text$mn:00005C3E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005C43                 add     esp, 8
.text$mn:00005C46                 mov     [ebp+var_10], eax
.text$mn:00005C49                 mov     [ebp+var_4], 0
.text$mn:00005C50                 cmp     [ebp+var_10], 0
.text$mn:00005C54                 jz      short loc_5C71
.text$mn:00005C56                 mov     ecx, [ebp+arg_4]
.text$mn:00005C59                 push    ecx
.text$mn:00005C5A                 call    ??$forward@PAVFunctionParser@@@std@@YA$$QAPAVFunctionParser@@AAPAV1@@Z ; std::forward<FunctionParser *>(FunctionParser * &)
.text$mn:00005C5F                 add     esp, 4
.text$mn:00005C62                 mov     edx, [ebp+var_10]
.text$mn:00005C65                 mov     eax, [eax]
.text$mn:00005C67                 mov     [edx], eax
.text$mn:00005C69                 mov     ecx, [ebp+var_10]
.text$mn:00005C6C                 mov     [ebp+var_14], ecx
.text$mn:00005C6F                 jmp     short loc_5C78
.text$mn:00005C71 ; ---------------------------------------------------------------------------
.text$mn:00005C71
.text$mn:00005C71 loc_5C71:                               ; CODE XREF: std::allocator<FunctionParser *>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)+44j
.text$mn:00005C71                 mov     [ebp+var_14], 0
.text$mn:00005C78
.text$mn:00005C78 loc_5C78:                               ; CODE XREF: std::allocator<FunctionParser *>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)+5Fj
.text$mn:00005C78                 mov     edx, [ebp+var_14]
.text$mn:00005C7B                 mov     [ebp+var_1C], edx
.text$mn:00005C7E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005C85                 mov     ecx, [ebp+var_C]
.text$mn:00005C88                 mov     large fs:0, ecx
.text$mn:00005C8F                 pop     ecx
.text$mn:00005C90                 mov     esp, ebp
.text$mn:00005C92                 pop     ebp
.text$mn:00005C93                 retn    8
.text$mn:00005C93 ??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z endp
.text$mn:00005C93
.text$mn:00005C93 ; ---------------------------------------------------------------------------
.text$mn:00005C96                 align 4
.text$mn:00005C96 _text$mn        ends
.text$mn:00005C96
.text$x:00005C98 ; ===========================================================================
.text$x:00005C98
.text$x:00005C98 ; Segment type: Pure code
.text$x:00005C98 ; Segment permissions: Read/Execute
.text$x:00005C98 _text$x         segment para public 'CODE' use32
.text$x:00005C98                 assume cs:_text$x
.text$x:00005C98                 ;org 5C98h
.text$x:00005C98 ; COMDAT (pick associative to section at 5C10)
.text$x:00005C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005C98
.text$x:00005C98 ; =============== S U B R O U T I N E =======================================
.text$x:00005C98
.text$x:00005C98
.text$x:00005C98 __unwindfunclet$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z$0 proc near
.text$x:00005C98                                         ; DATA XREF: .xdata$x:00010A68o
.text$x:00005C98                 mov     eax, [ebp+8]
.text$x:00005C9B                 push    eax
.text$x:00005C9C                 mov     eax, [ebp-10h]
.text$x:00005C9F                 push    eax             ; void *
.text$x:00005CA0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005CA5                 add     esp, 8
.text$x:00005CA8                 retn
.text$x:00005CA8 __unwindfunclet$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z$0 endp
.text$x:00005CA8
.text$x:00005CA9
.text$x:00005CA9 ; =============== S U B R O U T I N E =======================================
.text$x:00005CA9
.text$x:00005CA9
.text$x:00005CA9 __ehhandler$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z proc near
.text$x:00005CA9                                         ; DATA XREF: std::allocator<FunctionParser *>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)+5o
.text$x:00005CA9
.text$x:00005CA9 arg_4           = dword ptr  8
.text$x:00005CA9
.text$x:00005CA9                 mov     edx, [esp+arg_4]
.text$x:00005CAD                 lea     eax, [edx+0Ch]
.text$x:00005CB0                 mov     ecx, [edx-14h]
.text$x:00005CB3                 xor     ecx, eax
.text$x:00005CB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005CBA                 mov     eax, offset __ehfuncinfo$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z
.text$x:00005CBF                 jmp     ___CxxFrameHandler3
.text$x:00005CBF __ehhandler$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z endp
.text$x:00005CBF
.text$x:00005CBF _text$x         ends
.text$x:00005CBF
.text$mn:00005CC4 ; ===========================================================================
.text$mn:00005CC4
.text$mn:00005CC4 ; Segment type: Pure code
.text$mn:00005CC4 ; Segment permissions: Read/Execute
.text$mn:00005CC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CC4                 assume cs:_text$mn
.text$mn:00005CC4                 ;org 5CC4h
.text$mn:00005CC4 ; COMDAT (pick any)
.text$mn:00005CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CC4
.text$mn:00005CC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CC4
.text$mn:00005CC4 ; Attributes: bp-based frame
.text$mn:00005CC4
.text$mn:00005CC4 ; int __cdecl std::allocator_traits<std::allocator<FunctionParser *>>::construct<FunctionParser *,FunctionParser *>(int, void *, int)
.text$mn:00005CC4                 public ??$construct@PAVFunctionParser@@PAV1@@?$allocator_traits@V?$allocator@PAVFunctionParser@@@std@@@std@@SAXAAV?$allocator@PAVFunctionParser@@@1@PAPAVFunctionParser@@$$QAPAV3@@Z
.text$mn:00005CC4 ??$construct@PAVFunctionParser@@PAV1@@?$allocator_traits@V?$allocator@PAVFunctionParser@@@std@@@std@@SAXAAV?$allocator@PAVFunctionParser@@@1@PAPAVFunctionParser@@$$QAPAV3@@Z proc near
.text$mn:00005CC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<FunctionParser *>>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)+1Cp
.text$mn:00005CC4
.text$mn:00005CC4 arg_0           = dword ptr  8
.text$mn:00005CC4 arg_4           = dword ptr  0Ch
.text$mn:00005CC4 arg_8           = dword ptr  10h
.text$mn:00005CC4
.text$mn:00005CC4                 push    ebp
.text$mn:00005CC5                 mov     ebp, esp
.text$mn:00005CC7                 mov     eax, [ebp+arg_8]
.text$mn:00005CCA                 push    eax
.text$mn:00005CCB                 call    ??$forward@PAVFunctionParser@@@std@@YA$$QAPAVFunctionParser@@AAPAV1@@Z ; std::forward<FunctionParser *>(FunctionParser * &)
.text$mn:00005CD0                 add     esp, 4
.text$mn:00005CD3                 push    eax             ; int
.text$mn:00005CD4                 mov     ecx, [ebp+arg_4]
.text$mn:00005CD7                 push    ecx             ; void *
.text$mn:00005CD8                 mov     ecx, [ebp+arg_0]
.text$mn:00005CDB                 call    ??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z ; std::allocator<FunctionParser *>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)
.text$mn:00005CE0                 pop     ebp
.text$mn:00005CE1                 retn
.text$mn:00005CE1 ??$construct@PAVFunctionParser@@PAV1@@?$allocator_traits@V?$allocator@PAVFunctionParser@@@std@@@std@@SAXAAV?$allocator@PAVFunctionParser@@@1@PAPAVFunctionParser@@$$QAPAV3@@Z endp
.text$mn:00005CE1
.text$mn:00005CE1 ; ---------------------------------------------------------------------------
.text$mn:00005CE2                 align 4
.text$mn:00005CE2 _text$mn        ends
.text$mn:00005CE2
.text$mn:00005CE4 ; ===========================================================================
.text$mn:00005CE4
.text$mn:00005CE4 ; Segment type: Pure code
.text$mn:00005CE4 ; Segment permissions: Read/Execute
.text$mn:00005CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CE4                 assume cs:_text$mn
.text$mn:00005CE4                 ;org 5CE4h
.text$mn:00005CE4 ; COMDAT (pick any)
.text$mn:00005CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CE4
.text$mn:00005CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CE4
.text$mn:00005CE4 ; Attributes: bp-based frame
.text$mn:00005CE4
.text$mn:00005CE4 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00005CE4                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005CE4 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00005CE4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:00005CE4                                         ; $LN19_0+4Bp
.text$mn:00005CE4
.text$mn:00005CE4 var_4           = dword ptr -4
.text$mn:00005CE4 arg_0           = dword ptr  8
.text$mn:00005CE4 arg_4           = dword ptr  0Ch
.text$mn:00005CE4
.text$mn:00005CE4                 push    ebp
.text$mn:00005CE5                 mov     ebp, esp
.text$mn:00005CE7                 push    ecx
.text$mn:00005CE8                 mov     [ebp+var_4], ecx
.text$mn:00005CEB                 mov     eax, [ebp+arg_4]
.text$mn:00005CEE                 push    eax
.text$mn:00005CEF                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005CF4                 add     esp, 4
.text$mn:00005CF7                 push    eax             ; int
.text$mn:00005CF8                 mov     ecx, [ebp+arg_0]
.text$mn:00005CFB                 push    ecx             ; void *
.text$mn:00005CFC                 mov     edx, [ebp+var_4]
.text$mn:00005CFF                 push    edx             ; int
.text$mn:00005D00                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00005D05                 add     esp, 0Ch
.text$mn:00005D08                 mov     esp, ebp
.text$mn:00005D0A                 pop     ebp
.text$mn:00005D0B                 retn    8
.text$mn:00005D0B ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00005D0B
.text$mn:00005D0B ; ---------------------------------------------------------------------------
.text$mn:00005D0E                 align 10h
.text$mn:00005D0E _text$mn        ends
.text$mn:00005D0E
.text$mn:00005D10 ; ===========================================================================
.text$mn:00005D10
.text$mn:00005D10 ; Segment type: Pure code
.text$mn:00005D10 ; Segment permissions: Read/Execute
.text$mn:00005D10 _text$mn        segment para public 'CODE' use32
.text$mn:00005D10                 assume cs:_text$mn
.text$mn:00005D10                 ;org 5D10h
.text$mn:00005D10 ; COMDAT (pick any)
.text$mn:00005D10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D10
.text$mn:00005D10 ; =============== S U B R O U T I N E =======================================
.text$mn:00005D10
.text$mn:00005D10 ; Attributes: bp-based frame
.text$mn:00005D10
.text$mn:00005D10 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00005D10                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005D10 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00005D10                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00005D10
.text$mn:00005D10 var_1C          = dword ptr -1Ch
.text$mn:00005D10 var_18          = dword ptr -18h
.text$mn:00005D10 var_14          = dword ptr -14h
.text$mn:00005D10 var_10          = dword ptr -10h
.text$mn:00005D10 var_C           = dword ptr -0Ch
.text$mn:00005D10 var_4           = dword ptr -4
.text$mn:00005D10 arg_0           = dword ptr  8
.text$mn:00005D10 arg_4           = dword ptr  0Ch
.text$mn:00005D10
.text$mn:00005D10                 push    ebp
.text$mn:00005D11                 mov     ebp, esp
.text$mn:00005D13                 push    0FFFFFFFFh
.text$mn:00005D15                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005D1A                 mov     eax, large fs:0
.text$mn:00005D20                 push    eax
.text$mn:00005D21                 sub     esp, 10h
.text$mn:00005D24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005D29                 xor     eax, ebp
.text$mn:00005D2B                 push    eax
.text$mn:00005D2C                 lea     eax, [ebp+var_C]
.text$mn:00005D2F                 mov     large fs:0, eax
.text$mn:00005D35                 mov     [ebp+var_18], ecx
.text$mn:00005D38                 mov     eax, [ebp+arg_0]
.text$mn:00005D3B                 push    eax             ; void *
.text$mn:00005D3C                 push    4               ; unsigned int
.text$mn:00005D3E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005D43                 add     esp, 8
.text$mn:00005D46                 mov     [ebp+var_10], eax
.text$mn:00005D49                 mov     [ebp+var_4], 0
.text$mn:00005D50                 cmp     [ebp+var_10], 0
.text$mn:00005D54                 jz      short loc_5D71
.text$mn:00005D56                 mov     ecx, [ebp+arg_4]
.text$mn:00005D59                 push    ecx
.text$mn:00005D5A                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005D5F                 add     esp, 4
.text$mn:00005D62                 mov     edx, [ebp+var_10]
.text$mn:00005D65                 mov     eax, [eax]
.text$mn:00005D67                 mov     [edx], eax
.text$mn:00005D69                 mov     ecx, [ebp+var_10]
.text$mn:00005D6C                 mov     [ebp+var_14], ecx
.text$mn:00005D6F                 jmp     short loc_5D78
.text$mn:00005D71 ; ---------------------------------------------------------------------------
.text$mn:00005D71
.text$mn:00005D71 loc_5D71:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00005D71                 mov     [ebp+var_14], 0
.text$mn:00005D78
.text$mn:00005D78 loc_5D78:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00005D78                 mov     edx, [ebp+var_14]
.text$mn:00005D7B                 mov     [ebp+var_1C], edx
.text$mn:00005D7E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D85                 mov     ecx, [ebp+var_C]
.text$mn:00005D88                 mov     large fs:0, ecx
.text$mn:00005D8F                 pop     ecx
.text$mn:00005D90                 mov     esp, ebp
.text$mn:00005D92                 pop     ebp
.text$mn:00005D93                 retn    8
.text$mn:00005D93 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00005D93
.text$mn:00005D93 ; ---------------------------------------------------------------------------
.text$mn:00005D96                 align 4
.text$mn:00005D96 _text$mn        ends
.text$mn:00005D96
.text$x:00005D98 ; ===========================================================================
.text$x:00005D98
.text$x:00005D98 ; Segment type: Pure code
.text$x:00005D98 ; Segment permissions: Read/Execute
.text$x:00005D98 _text$x         segment para public 'CODE' use32
.text$x:00005D98                 assume cs:_text$x
.text$x:00005D98                 ;org 5D98h
.text$x:00005D98 ; COMDAT (pick associative to section at 5D10)
.text$x:00005D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005D98
.text$x:00005D98 ; =============== S U B R O U T I N E =======================================
.text$x:00005D98
.text$x:00005D98
.text$x:00005D98 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00005D98                                         ; DATA XREF: .xdata$x:00010B44o
.text$x:00005D98                 mov     eax, [ebp+8]
.text$x:00005D9B                 push    eax
.text$x:00005D9C                 mov     eax, [ebp-10h]
.text$x:00005D9F                 push    eax             ; void *
.text$x:00005DA0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005DA5                 add     esp, 8
.text$x:00005DA8                 retn
.text$x:00005DA8 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00005DA8
.text$x:00005DA9
.text$x:00005DA9 ; =============== S U B R O U T I N E =======================================
.text$x:00005DA9
.text$x:00005DA9
.text$x:00005DA9 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00005DA9                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00005DA9
.text$x:00005DA9 arg_4           = dword ptr  8
.text$x:00005DA9
.text$x:00005DA9                 mov     edx, [esp+arg_4]
.text$x:00005DAD                 lea     eax, [edx+0Ch]
.text$x:00005DB0                 mov     ecx, [edx-14h]
.text$x:00005DB3                 xor     ecx, eax
.text$x:00005DB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DBA                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00005DBF                 jmp     ___CxxFrameHandler3
.text$x:00005DBF __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00005DBF
.text$x:00005DBF _text$x         ends
.text$x:00005DBF
.text$mn:00005DC4 ; ===========================================================================
.text$mn:00005DC4
.text$mn:00005DC4 ; Segment type: Pure code
.text$mn:00005DC4 ; Segment permissions: Read/Execute
.text$mn:00005DC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005DC4                 assume cs:_text$mn
.text$mn:00005DC4                 ;org 5DC4h
.text$mn:00005DC4 ; COMDAT (pick any)
.text$mn:00005DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DC4
.text$mn:00005DC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DC4
.text$mn:00005DC4 ; Attributes: bp-based frame
.text$mn:00005DC4
.text$mn:00005DC4 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:00005DC4                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:00005DC4 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:00005DC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:00005DC4
.text$mn:00005DC4 arg_0           = dword ptr  8
.text$mn:00005DC4 arg_4           = dword ptr  0Ch
.text$mn:00005DC4 arg_8           = dword ptr  10h
.text$mn:00005DC4
.text$mn:00005DC4                 push    ebp
.text$mn:00005DC5                 mov     ebp, esp
.text$mn:00005DC7                 mov     eax, [ebp+arg_8]
.text$mn:00005DCA                 push    eax
.text$mn:00005DCB                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005DD0                 add     esp, 4
.text$mn:00005DD3                 push    eax             ; int
.text$mn:00005DD4                 mov     ecx, [ebp+arg_4]
.text$mn:00005DD7                 push    ecx             ; void *
.text$mn:00005DD8                 mov     ecx, [ebp+arg_0]
.text$mn:00005DDB                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00005DE0                 pop     ebp
.text$mn:00005DE1                 retn
.text$mn:00005DE1 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00005DE1
.text$mn:00005DE1 ; ---------------------------------------------------------------------------
.text$mn:00005DE2                 align 4
.text$mn:00005DE2 _text$mn        ends
.text$mn:00005DE2
.text$mn:00005DE4 ; ===========================================================================
.text$mn:00005DE4
.text$mn:00005DE4 ; Segment type: Pure code
.text$mn:00005DE4 ; Segment permissions: Read/Execute
.text$mn:00005DE4 _text$mn        segment para public 'CODE' use32
.text$mn:00005DE4                 assume cs:_text$mn
.text$mn:00005DE4                 ;org 5DE4h
.text$mn:00005DE4 ; COMDAT (pick any)
.text$mn:00005DE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DE4
.text$mn:00005DE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DE4
.text$mn:00005DE4 ; Attributes: bp-based frame
.text$mn:00005DE4
.text$mn:00005DE4 ; int __stdcall std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(void *, int)
.text$mn:00005DE4                 public ??$construct@U?$pair@HH@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z
.text$mn:00005DE4 ??$construct@U?$pair@HH@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z proc near
.text$mn:00005DE4                                         ; CODE XREF: std::_Uninit_move<std::pair<int,int> *,std::pair<int,int> *,std::allocator<std::pair<int,int>>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::pair<int,int> *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00005DE4                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+9Ap ...
.text$mn:00005DE4
.text$mn:00005DE4 var_4           = dword ptr -4
.text$mn:00005DE4 arg_0           = dword ptr  8
.text$mn:00005DE4 arg_4           = dword ptr  0Ch
.text$mn:00005DE4
.text$mn:00005DE4                 push    ebp
.text$mn:00005DE5                 mov     ebp, esp
.text$mn:00005DE7                 push    ecx
.text$mn:00005DE8                 mov     [ebp+var_4], ecx
.text$mn:00005DEB                 mov     eax, [ebp+arg_4]
.text$mn:00005DEE                 push    eax
.text$mn:00005DEF                 call    ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z ; std::forward<std::pair<int,int>>(std::pair<int,int> &)
.text$mn:00005DF4                 add     esp, 4
.text$mn:00005DF7                 push    eax             ; int
.text$mn:00005DF8                 mov     ecx, [ebp+arg_0]
.text$mn:00005DFB                 push    ecx             ; void *
.text$mn:00005DFC                 mov     edx, [ebp+var_4]
.text$mn:00005DFF                 push    edx             ; int
.text$mn:00005E00                 call    ??$construct@U?$pair@HH@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@HH@std@@@1@PAU?$pair@HH@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(std::allocator<std::pair<int,int>> &,std::pair<int,int> *,std::pair<int,int> &&)
.text$mn:00005E05                 add     esp, 0Ch
.text$mn:00005E08                 mov     esp, ebp
.text$mn:00005E0A                 pop     ebp
.text$mn:00005E0B                 retn    8
.text$mn:00005E0B ??$construct@U?$pair@HH@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z endp
.text$mn:00005E0B
.text$mn:00005E0B ; ---------------------------------------------------------------------------
.text$mn:00005E0E                 align 10h
.text$mn:00005E0E _text$mn        ends
.text$mn:00005E0E
.text$mn:00005E10 ; ===========================================================================
.text$mn:00005E10
.text$mn:00005E10 ; Segment type: Pure code
.text$mn:00005E10 ; Segment permissions: Read/Execute
.text$mn:00005E10 _text$mn        segment para public 'CODE' use32
.text$mn:00005E10                 assume cs:_text$mn
.text$mn:00005E10                 ;org 5E10h
.text$mn:00005E10 ; COMDAT (pick any)
.text$mn:00005E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E10
.text$mn:00005E10 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E10
.text$mn:00005E10 ; Attributes: bp-based frame
.text$mn:00005E10
.text$mn:00005E10 ; int __stdcall std::allocator<std::pair<int,int>>::construct<std::pair<int,int>,std::pair<int,int>>(void *, int)
.text$mn:00005E10                 public ??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z
.text$mn:00005E10 ??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z proc near
.text$mn:00005E10                                         ; CODE XREF: std::allocator_traits<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(std::allocator<std::pair<int,int>> &,std::pair<int,int> *,std::pair<int,int> &&)+17p
.text$mn:00005E10
.text$mn:00005E10 var_1C          = dword ptr -1Ch
.text$mn:00005E10 var_18          = dword ptr -18h
.text$mn:00005E10 var_14          = dword ptr -14h
.text$mn:00005E10 var_10          = dword ptr -10h
.text$mn:00005E10 var_C           = dword ptr -0Ch
.text$mn:00005E10 var_4           = dword ptr -4
.text$mn:00005E10 arg_0           = dword ptr  8
.text$mn:00005E10 arg_4           = dword ptr  0Ch
.text$mn:00005E10
.text$mn:00005E10                 push    ebp
.text$mn:00005E11                 mov     ebp, esp
.text$mn:00005E13                 push    0FFFFFFFFh
.text$mn:00005E15                 push    offset __ehhandler$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z
.text$mn:00005E1A                 mov     eax, large fs:0
.text$mn:00005E20                 push    eax
.text$mn:00005E21                 sub     esp, 10h
.text$mn:00005E24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E29                 xor     eax, ebp
.text$mn:00005E2B                 push    eax
.text$mn:00005E2C                 lea     eax, [ebp+var_C]
.text$mn:00005E2F                 mov     large fs:0, eax
.text$mn:00005E35                 mov     [ebp+var_18], ecx
.text$mn:00005E38                 mov     eax, [ebp+arg_0]
.text$mn:00005E3B                 push    eax             ; void *
.text$mn:00005E3C                 push    8               ; unsigned int
.text$mn:00005E3E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005E43                 add     esp, 8
.text$mn:00005E46                 mov     [ebp+var_10], eax
.text$mn:00005E49                 mov     [ebp+var_4], 0
.text$mn:00005E50                 cmp     [ebp+var_10], 0
.text$mn:00005E54                 jz      short loc_5E70
.text$mn:00005E56                 mov     ecx, [ebp+arg_4]
.text$mn:00005E59                 push    ecx
.text$mn:00005E5A                 call    ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z ; std::forward<std::pair<int,int>>(std::pair<int,int> &)
.text$mn:00005E5F                 add     esp, 4
.text$mn:00005E62                 push    eax
.text$mn:00005E63                 mov     ecx, [ebp+var_10]
.text$mn:00005E66                 call    ??$?0HHX@?$pair@HH@std@@QAE@$$QAU01@@Z ; std::pair<int,int>::pair<int,int>(std::pair<int,int> &&)
.text$mn:00005E6B                 mov     [ebp+var_14], eax
.text$mn:00005E6E                 jmp     short loc_5E77
.text$mn:00005E70 ; ---------------------------------------------------------------------------
.text$mn:00005E70
.text$mn:00005E70 loc_5E70:                               ; CODE XREF: std::allocator<std::pair<int,int>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)+44j
.text$mn:00005E70                 mov     [ebp+var_14], 0
.text$mn:00005E77
.text$mn:00005E77 loc_5E77:                               ; CODE XREF: std::allocator<std::pair<int,int>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)+5Ej
.text$mn:00005E77                 mov     edx, [ebp+var_14]
.text$mn:00005E7A                 mov     [ebp+var_1C], edx
.text$mn:00005E7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005E84                 mov     ecx, [ebp+var_C]
.text$mn:00005E87                 mov     large fs:0, ecx
.text$mn:00005E8E                 pop     ecx
.text$mn:00005E8F                 mov     esp, ebp
.text$mn:00005E91                 pop     ebp
.text$mn:00005E92                 retn    8
.text$mn:00005E92 ??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z endp
.text$mn:00005E92
.text$mn:00005E92 ; ---------------------------------------------------------------------------
.text$mn:00005E95                 align 4
.text$mn:00005E95 _text$mn        ends
.text$mn:00005E95
.text$x:00005E98 ; ===========================================================================
.text$x:00005E98
.text$x:00005E98 ; Segment type: Pure code
.text$x:00005E98 ; Segment permissions: Read/Execute
.text$x:00005E98 _text$x         segment para public 'CODE' use32
.text$x:00005E98                 assume cs:_text$x
.text$x:00005E98                 ;org 5E98h
.text$x:00005E98 ; COMDAT (pick associative to section at 5E10)
.text$x:00005E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005E98
.text$x:00005E98 ; =============== S U B R O U T I N E =======================================
.text$x:00005E98
.text$x:00005E98
.text$x:00005E98 __unwindfunclet$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z$0 proc near
.text$x:00005E98                                         ; DATA XREF: .xdata$x:00010AECo
.text$x:00005E98                 mov     eax, [ebp+8]
.text$x:00005E9B                 push    eax
.text$x:00005E9C                 mov     eax, [ebp-10h]
.text$x:00005E9F                 push    eax             ; void *
.text$x:00005EA0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005EA5                 add     esp, 8
.text$x:00005EA8                 retn
.text$x:00005EA8 __unwindfunclet$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z$0 endp
.text$x:00005EA8
.text$x:00005EA9
.text$x:00005EA9 ; =============== S U B R O U T I N E =======================================
.text$x:00005EA9
.text$x:00005EA9
.text$x:00005EA9 __ehhandler$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z proc near
.text$x:00005EA9                                         ; DATA XREF: std::allocator<std::pair<int,int>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)+5o
.text$x:00005EA9
.text$x:00005EA9 arg_4           = dword ptr  8
.text$x:00005EA9
.text$x:00005EA9                 mov     edx, [esp+arg_4]
.text$x:00005EAD                 lea     eax, [edx+0Ch]
.text$x:00005EB0                 mov     ecx, [edx-14h]
.text$x:00005EB3                 xor     ecx, eax
.text$x:00005EB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005EBA                 mov     eax, offset __ehfuncinfo$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z
.text$x:00005EBF                 jmp     ___CxxFrameHandler3
.text$x:00005EBF __ehhandler$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z endp
.text$x:00005EBF
.text$x:00005EBF _text$x         ends
.text$x:00005EBF
.text$mn:00005EC4 ; ===========================================================================
.text$mn:00005EC4
.text$mn:00005EC4 ; Segment type: Pure code
.text$mn:00005EC4 ; Segment permissions: Read/Execute
.text$mn:00005EC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005EC4                 assume cs:_text$mn
.text$mn:00005EC4                 ;org 5EC4h
.text$mn:00005EC4 ; COMDAT (pick any)
.text$mn:00005EC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EC4
.text$mn:00005EC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EC4
.text$mn:00005EC4 ; Attributes: bp-based frame
.text$mn:00005EC4
.text$mn:00005EC4 ; int __cdecl std::allocator_traits<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(int, void *, int)
.text$mn:00005EC4                 public ??$construct@U?$pair@HH@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@HH@std@@@1@PAU?$pair@HH@1@$$QAU31@@Z
.text$mn:00005EC4 ??$construct@U?$pair@HH@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@HH@std@@@1@PAU?$pair@HH@1@$$QAU31@@Z proc near
.text$mn:00005EC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)+1Cp
.text$mn:00005EC4
.text$mn:00005EC4 arg_0           = dword ptr  8
.text$mn:00005EC4 arg_4           = dword ptr  0Ch
.text$mn:00005EC4 arg_8           = dword ptr  10h
.text$mn:00005EC4
.text$mn:00005EC4                 push    ebp
.text$mn:00005EC5                 mov     ebp, esp
.text$mn:00005EC7                 mov     eax, [ebp+arg_8]
.text$mn:00005ECA                 push    eax
.text$mn:00005ECB                 call    ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z ; std::forward<std::pair<int,int>>(std::pair<int,int> &)
.text$mn:00005ED0                 add     esp, 4
.text$mn:00005ED3                 push    eax             ; int
.text$mn:00005ED4                 mov     ecx, [ebp+arg_4]
.text$mn:00005ED7                 push    ecx             ; void *
.text$mn:00005ED8                 mov     ecx, [ebp+arg_0]
.text$mn:00005EDB                 call    ??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z ; std::allocator<std::pair<int,int>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)
.text$mn:00005EE0                 pop     ebp
.text$mn:00005EE1                 retn
.text$mn:00005EE1 ??$construct@U?$pair@HH@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@HH@std@@@1@PAU?$pair@HH@1@$$QAU31@@Z endp
.text$mn:00005EE1
.text$mn:00005EE1 ; ---------------------------------------------------------------------------
.text$mn:00005EE2                 align 4
.text$mn:00005EE2 _text$mn        ends
.text$mn:00005EE2
.text$mn:00005EE4 ; ===========================================================================
.text$mn:00005EE4
.text$mn:00005EE4 ; Segment type: Pure code
.text$mn:00005EE4 ; Segment permissions: Read/Execute
.text$mn:00005EE4 _text$mn        segment para public 'CODE' use32
.text$mn:00005EE4                 assume cs:_text$mn
.text$mn:00005EE4                 ;org 5EE4h
.text$mn:00005EE4 ; COMDAT (pick any)
.text$mn:00005EE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EE4
.text$mn:00005EE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EE4
.text$mn:00005EE4 ; Attributes: bp-based frame
.text$mn:00005EE4
.text$mn:00005EE4 ; int __stdcall std::_Wrap_alloc<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(void *, int)
.text$mn:00005EE4                 public ??$construct@UAssociationInfo@@U1@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z
.text$mn:00005EE4 ??$construct@UAssociationInfo@@U1@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z proc near
.text$mn:00005EE4                                         ; CODE XREF: std::_Uninit_move<AssociationInfo *,AssociationInfo *,std::allocator<AssociationInfo>,AssociationInfo>(AssociationInfo *,AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,AssociationInfo *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00005EE4                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+9Ap ...
.text$mn:00005EE4
.text$mn:00005EE4 var_4           = dword ptr -4
.text$mn:00005EE4 arg_0           = dword ptr  8
.text$mn:00005EE4 arg_4           = dword ptr  0Ch
.text$mn:00005EE4
.text$mn:00005EE4                 push    ebp
.text$mn:00005EE5                 mov     ebp, esp
.text$mn:00005EE7                 push    ecx
.text$mn:00005EE8                 mov     [ebp+var_4], ecx
.text$mn:00005EEB                 mov     eax, [ebp+arg_4]
.text$mn:00005EEE                 push    eax
.text$mn:00005EEF                 call    ??$forward@UAssociationInfo@@@std@@YA$$QAUAssociationInfo@@AAU1@@Z ; std::forward<AssociationInfo>(AssociationInfo &)
.text$mn:00005EF4                 add     esp, 4
.text$mn:00005EF7                 push    eax             ; int
.text$mn:00005EF8                 mov     ecx, [ebp+arg_0]
.text$mn:00005EFB                 push    ecx             ; void *
.text$mn:00005EFC                 mov     edx, [ebp+var_4]
.text$mn:00005EFF                 push    edx             ; int
.text$mn:00005F00                 call    ??$construct@UAssociationInfo@@U1@@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAXAAV?$allocator@UAssociationInfo@@@1@PAUAssociationInfo@@$$QAU3@@Z ; std::allocator_traits<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(std::allocator<AssociationInfo> &,AssociationInfo *,AssociationInfo &&)
.text$mn:00005F05                 add     esp, 0Ch
.text$mn:00005F08                 mov     esp, ebp
.text$mn:00005F0A                 pop     ebp
.text$mn:00005F0B                 retn    8
.text$mn:00005F0B ??$construct@UAssociationInfo@@U1@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z endp
.text$mn:00005F0B
.text$mn:00005F0B ; ---------------------------------------------------------------------------
.text$mn:00005F0E                 align 10h
.text$mn:00005F0E _text$mn        ends
.text$mn:00005F0E
.text$mn:00005F10 ; ===========================================================================
.text$mn:00005F10
.text$mn:00005F10 ; Segment type: Pure code
.text$mn:00005F10 ; Segment permissions: Read/Execute
.text$mn:00005F10 _text$mn        segment para public 'CODE' use32
.text$mn:00005F10                 assume cs:_text$mn
.text$mn:00005F10                 ;org 5F10h
.text$mn:00005F10 ; COMDAT (pick any)
.text$mn:00005F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F10
.text$mn:00005F10 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F10
.text$mn:00005F10 ; Attributes: bp-based frame
.text$mn:00005F10
.text$mn:00005F10 ; int __stdcall std::allocator<AssociationInfo>::construct<AssociationInfo,AssociationInfo>(void *, int)
.text$mn:00005F10                 public ??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z
.text$mn:00005F10 ??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z proc near
.text$mn:00005F10                                         ; CODE XREF: std::allocator_traits<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(std::allocator<AssociationInfo> &,AssociationInfo *,AssociationInfo &&)+17p
.text$mn:00005F10
.text$mn:00005F10 var_1C          = dword ptr -1Ch
.text$mn:00005F10 var_18          = dword ptr -18h
.text$mn:00005F10 var_14          = dword ptr -14h
.text$mn:00005F10 var_10          = dword ptr -10h
.text$mn:00005F10 var_C           = dword ptr -0Ch
.text$mn:00005F10 var_4           = dword ptr -4
.text$mn:00005F10 arg_0           = dword ptr  8
.text$mn:00005F10 arg_4           = dword ptr  0Ch
.text$mn:00005F10
.text$mn:00005F10                 push    ebp
.text$mn:00005F11                 mov     ebp, esp
.text$mn:00005F13                 push    0FFFFFFFFh
.text$mn:00005F15                 push    offset __ehhandler$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z
.text$mn:00005F1A                 mov     eax, large fs:0
.text$mn:00005F20                 push    eax
.text$mn:00005F21                 sub     esp, 10h
.text$mn:00005F24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005F29                 xor     eax, ebp
.text$mn:00005F2B                 push    eax
.text$mn:00005F2C                 lea     eax, [ebp+var_C]
.text$mn:00005F2F                 mov     large fs:0, eax
.text$mn:00005F35                 mov     [ebp+var_18], ecx
.text$mn:00005F38                 mov     eax, [ebp+arg_0]
.text$mn:00005F3B                 push    eax             ; void *
.text$mn:00005F3C                 push    40h ; '@'       ; unsigned int
.text$mn:00005F3E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005F43                 add     esp, 8
.text$mn:00005F46                 mov     [ebp+var_10], eax
.text$mn:00005F49                 mov     [ebp+var_4], 0
.text$mn:00005F50                 cmp     [ebp+var_10], 0
.text$mn:00005F54                 jz      short loc_5F70
.text$mn:00005F56                 mov     ecx, [ebp+arg_4]
.text$mn:00005F59                 push    ecx
.text$mn:00005F5A                 call    ??$forward@UAssociationInfo@@@std@@YA$$QAUAssociationInfo@@AAU1@@Z ; std::forward<AssociationInfo>(AssociationInfo &)
.text$mn:00005F5F                 add     esp, 4
.text$mn:00005F62                 push    eax
.text$mn:00005F63                 mov     ecx, [ebp+var_10]
.text$mn:00005F66                 call    ??0AssociationInfo@@QAE@ABU0@@Z ; AssociationInfo::AssociationInfo(AssociationInfo const &)
.text$mn:00005F6B                 mov     [ebp+var_14], eax
.text$mn:00005F6E                 jmp     short loc_5F77
.text$mn:00005F70 ; ---------------------------------------------------------------------------
.text$mn:00005F70
.text$mn:00005F70 loc_5F70:                               ; CODE XREF: std::allocator<AssociationInfo>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)+44j
.text$mn:00005F70                 mov     [ebp+var_14], 0
.text$mn:00005F77
.text$mn:00005F77 loc_5F77:                               ; CODE XREF: std::allocator<AssociationInfo>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)+5Ej
.text$mn:00005F77                 mov     edx, [ebp+var_14]
.text$mn:00005F7A                 mov     [ebp+var_1C], edx
.text$mn:00005F7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F84                 mov     ecx, [ebp+var_C]
.text$mn:00005F87                 mov     large fs:0, ecx
.text$mn:00005F8E                 pop     ecx
.text$mn:00005F8F                 mov     esp, ebp
.text$mn:00005F91                 pop     ebp
.text$mn:00005F92                 retn    8
.text$mn:00005F92 ??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z endp
.text$mn:00005F92
.text$mn:00005F92 ; ---------------------------------------------------------------------------
.text$mn:00005F95                 align 4
.text$mn:00005F95 _text$mn        ends
.text$mn:00005F95
.text$x:00005F98 ; ===========================================================================
.text$x:00005F98
.text$x:00005F98 ; Segment type: Pure code
.text$x:00005F98 ; Segment permissions: Read/Execute
.text$x:00005F98 _text$x         segment para public 'CODE' use32
.text$x:00005F98                 assume cs:_text$x
.text$x:00005F98                 ;org 5F98h
.text$x:00005F98 ; COMDAT (pick associative to section at 5F10)
.text$x:00005F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F98
.text$x:00005F98 ; =============== S U B R O U T I N E =======================================
.text$x:00005F98
.text$x:00005F98
.text$x:00005F98 __unwindfunclet$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z$0 proc near
.text$x:00005F98                                         ; DATA XREF: .xdata$x:00010A94o
.text$x:00005F98                 mov     eax, [ebp+8]
.text$x:00005F9B                 push    eax
.text$x:00005F9C                 mov     eax, [ebp-10h]
.text$x:00005F9F                 push    eax             ; void *
.text$x:00005FA0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005FA5                 add     esp, 8
.text$x:00005FA8                 retn
.text$x:00005FA8 __unwindfunclet$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z$0 endp
.text$x:00005FA8
.text$x:00005FA9
.text$x:00005FA9 ; =============== S U B R O U T I N E =======================================
.text$x:00005FA9
.text$x:00005FA9
.text$x:00005FA9 __ehhandler$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z proc near
.text$x:00005FA9                                         ; DATA XREF: std::allocator<AssociationInfo>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)+5o
.text$x:00005FA9
.text$x:00005FA9 arg_4           = dword ptr  8
.text$x:00005FA9
.text$x:00005FA9                 mov     edx, [esp+arg_4]
.text$x:00005FAD                 lea     eax, [edx+0Ch]
.text$x:00005FB0                 mov     ecx, [edx-14h]
.text$x:00005FB3                 xor     ecx, eax
.text$x:00005FB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005FBA                 mov     eax, offset __ehfuncinfo$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z
.text$x:00005FBF                 jmp     ___CxxFrameHandler3
.text$x:00005FBF __ehhandler$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z endp
.text$x:00005FBF
.text$x:00005FBF _text$x         ends
.text$x:00005FBF
.text$mn:00005FC4 ; ===========================================================================
.text$mn:00005FC4
.text$mn:00005FC4 ; Segment type: Pure code
.text$mn:00005FC4 ; Segment permissions: Read/Execute
.text$mn:00005FC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005FC4                 assume cs:_text$mn
.text$mn:00005FC4                 ;org 5FC4h
.text$mn:00005FC4 ; COMDAT (pick any)
.text$mn:00005FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FC4
.text$mn:00005FC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FC4
.text$mn:00005FC4 ; Attributes: bp-based frame
.text$mn:00005FC4
.text$mn:00005FC4 ; int __cdecl std::allocator_traits<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(int, void *, int)
.text$mn:00005FC4                 public ??$construct@UAssociationInfo@@U1@@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAXAAV?$allocator@UAssociationInfo@@@1@PAUAssociationInfo@@$$QAU3@@Z
.text$mn:00005FC4 ??$construct@UAssociationInfo@@U1@@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAXAAV?$allocator@UAssociationInfo@@@1@PAUAssociationInfo@@$$QAU3@@Z proc near
.text$mn:00005FC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)+1Cp
.text$mn:00005FC4
.text$mn:00005FC4 arg_0           = dword ptr  8
.text$mn:00005FC4 arg_4           = dword ptr  0Ch
.text$mn:00005FC4 arg_8           = dword ptr  10h
.text$mn:00005FC4
.text$mn:00005FC4                 push    ebp
.text$mn:00005FC5                 mov     ebp, esp
.text$mn:00005FC7                 mov     eax, [ebp+arg_8]
.text$mn:00005FCA                 push    eax
.text$mn:00005FCB                 call    ??$forward@UAssociationInfo@@@std@@YA$$QAUAssociationInfo@@AAU1@@Z ; std::forward<AssociationInfo>(AssociationInfo &)
.text$mn:00005FD0                 add     esp, 4
.text$mn:00005FD3                 push    eax             ; int
.text$mn:00005FD4                 mov     ecx, [ebp+arg_4]
.text$mn:00005FD7                 push    ecx             ; void *
.text$mn:00005FD8                 mov     ecx, [ebp+arg_0]
.text$mn:00005FDB                 call    ??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z ; std::allocator<AssociationInfo>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)
.text$mn:00005FE0                 pop     ebp
.text$mn:00005FE1                 retn
.text$mn:00005FE1 ??$construct@UAssociationInfo@@U1@@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAXAAV?$allocator@UAssociationInfo@@@1@PAUAssociationInfo@@$$QAU3@@Z endp
.text$mn:00005FE1
.text$mn:00005FE1 ; ---------------------------------------------------------------------------
.text$mn:00005FE2                 align 4
.text$mn:00005FE2 _text$mn        ends
.text$mn:00005FE2
.text$mn:00005FE4 ; ===========================================================================
.text$mn:00005FE4
.text$mn:00005FE4 ; Segment type: Pure code
.text$mn:00005FE4 ; Segment permissions: Read/Execute
.text$mn:00005FE4 _text$mn        segment para public 'CODE' use32
.text$mn:00005FE4                 assume cs:_text$mn
.text$mn:00005FE4                 ;org 5FE4h
.text$mn:00005FE4 ; COMDAT (pick any)
.text$mn:00005FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FE4
.text$mn:00005FE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FE4
.text$mn:00005FE4 ; Attributes: bp-based frame
.text$mn:00005FE4
.text$mn:00005FE4 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00005FE4                 public ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00005FE4 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00005FE4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Alloc_proxy(void)+32p
.text$mn:00005FE4                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+32p
.text$mn:00005FE4
.text$mn:00005FE4 var_4           = dword ptr -4
.text$mn:00005FE4 arg_0           = dword ptr  8
.text$mn:00005FE4 arg_4           = dword ptr  0Ch
.text$mn:00005FE4
.text$mn:00005FE4                 push    ebp
.text$mn:00005FE5                 mov     ebp, esp
.text$mn:00005FE7                 push    ecx
.text$mn:00005FE8                 mov     [ebp+var_4], ecx
.text$mn:00005FEB                 mov     eax, [ebp+arg_4]
.text$mn:00005FEE                 push    eax
.text$mn:00005FEF                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00005FF4                 add     esp, 4
.text$mn:00005FF7                 push    eax             ; int
.text$mn:00005FF8                 mov     ecx, [ebp+arg_0]
.text$mn:00005FFB                 push    ecx             ; void *
.text$mn:00005FFC                 mov     edx, [ebp+var_4]
.text$mn:00005FFF                 push    edx             ; int
.text$mn:00006000                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00006005                 add     esp, 0Ch
.text$mn:00006008                 mov     esp, ebp
.text$mn:0000600A                 pop     ebp
.text$mn:0000600B                 retn    8
.text$mn:0000600B ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:0000600B
.text$mn:0000600B ; ---------------------------------------------------------------------------
.text$mn:0000600E                 align 10h
.text$mn:0000600E _text$mn        ends
.text$mn:0000600E
.text$mn:00006010 ; ===========================================================================
.text$mn:00006010
.text$mn:00006010 ; Segment type: Pure code
.text$mn:00006010 ; Segment permissions: Read/Execute
.text$mn:00006010 _text$mn        segment para public 'CODE' use32
.text$mn:00006010                 assume cs:_text$mn
.text$mn:00006010                 ;org 6010h
.text$mn:00006010 ; COMDAT (pick any)
.text$mn:00006010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006010
.text$mn:00006010 ; =============== S U B R O U T I N E =======================================
.text$mn:00006010
.text$mn:00006010 ; Attributes: bp-based frame
.text$mn:00006010
.text$mn:00006010 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00006010                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00006010 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00006010                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)+17p
.text$mn:00006010                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p ...
.text$mn:00006010
.text$mn:00006010 var_1C          = dword ptr -1Ch
.text$mn:00006010 var_18          = dword ptr -18h
.text$mn:00006010 var_14          = dword ptr -14h
.text$mn:00006010 var_10          = dword ptr -10h
.text$mn:00006010 var_C           = dword ptr -0Ch
.text$mn:00006010 var_4           = dword ptr -4
.text$mn:00006010 arg_0           = dword ptr  8
.text$mn:00006010 arg_4           = dword ptr  0Ch
.text$mn:00006010
.text$mn:00006010                 push    ebp
.text$mn:00006011                 mov     ebp, esp
.text$mn:00006013                 push    0FFFFFFFFh
.text$mn:00006015                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:0000601A                 mov     eax, large fs:0
.text$mn:00006020                 push    eax
.text$mn:00006021                 sub     esp, 10h
.text$mn:00006024                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006029                 xor     eax, ebp
.text$mn:0000602B                 push    eax
.text$mn:0000602C                 lea     eax, [ebp+var_C]
.text$mn:0000602F                 mov     large fs:0, eax
.text$mn:00006035                 mov     [ebp+var_18], ecx
.text$mn:00006038                 mov     eax, [ebp+arg_0]
.text$mn:0000603B                 push    eax             ; void *
.text$mn:0000603C                 push    8               ; unsigned int
.text$mn:0000603E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00006043                 add     esp, 8
.text$mn:00006046                 mov     [ebp+var_10], eax
.text$mn:00006049                 mov     [ebp+var_4], 0
.text$mn:00006050                 cmp     [ebp+var_10], 0
.text$mn:00006054                 jz      short loc_6077
.text$mn:00006056                 mov     ecx, [ebp+arg_4]
.text$mn:00006059                 push    ecx
.text$mn:0000605A                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:0000605F                 add     esp, 4
.text$mn:00006062                 mov     edx, [eax]
.text$mn:00006064                 mov     eax, [eax+4]
.text$mn:00006067                 mov     ecx, [ebp+var_10]
.text$mn:0000606A                 mov     [ecx], edx
.text$mn:0000606C                 mov     [ecx+4], eax
.text$mn:0000606F                 mov     edx, [ebp+var_10]
.text$mn:00006072                 mov     [ebp+var_14], edx
.text$mn:00006075                 jmp     short loc_607E
.text$mn:00006077 ; ---------------------------------------------------------------------------
.text$mn:00006077
.text$mn:00006077 loc_6077:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00006077                 mov     [ebp+var_14], 0
.text$mn:0000607E
.text$mn:0000607E loc_607E:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:0000607E                 mov     eax, [ebp+var_14]
.text$mn:00006081                 mov     [ebp+var_1C], eax
.text$mn:00006084                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000608B                 mov     ecx, [ebp+var_C]
.text$mn:0000608E                 mov     large fs:0, ecx
.text$mn:00006095                 pop     ecx
.text$mn:00006096                 mov     esp, ebp
.text$mn:00006098                 pop     ebp
.text$mn:00006099                 retn    8
.text$mn:00006099 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00006099
.text$mn:00006099 _text$mn        ends
.text$mn:00006099
.text$x:0000609C ; ===========================================================================
.text$x:0000609C
.text$x:0000609C ; Segment type: Pure code
.text$x:0000609C ; Segment permissions: Read/Execute
.text$x:0000609C _text$x         segment para public 'CODE' use32
.text$x:0000609C                 assume cs:_text$x
.text$x:0000609C                 ;org 609Ch
.text$x:0000609C ; COMDAT (pick associative to section at 6010)
.text$x:0000609C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000609C
.text$x:0000609C ; =============== S U B R O U T I N E =======================================
.text$x:0000609C
.text$x:0000609C
.text$x:0000609C __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:0000609C                                         ; DATA XREF: .xdata$x:000109A0o
.text$x:0000609C                 mov     eax, [ebp+8]
.text$x:0000609F                 push    eax
.text$x:000060A0                 mov     eax, [ebp-10h]
.text$x:000060A3                 push    eax             ; void *
.text$x:000060A4                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000060A9                 add     esp, 8
.text$x:000060AC                 retn
.text$x:000060AC __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:000060AC
.text$x:000060AD
.text$x:000060AD ; =============== S U B R O U T I N E =======================================
.text$x:000060AD
.text$x:000060AD
.text$x:000060AD __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:000060AD                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:000060AD
.text$x:000060AD arg_4           = dword ptr  8
.text$x:000060AD
.text$x:000060AD                 mov     edx, [esp+arg_4]
.text$x:000060B1                 lea     eax, [edx+0Ch]
.text$x:000060B4                 mov     ecx, [edx-14h]
.text$x:000060B7                 xor     ecx, eax
.text$x:000060B9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000060BE                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:000060C3                 jmp     ___CxxFrameHandler3
.text$x:000060C3 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:000060C3
.text$x:000060C3 _text$x         ends
.text$x:000060C3
.text$mn:000060C8 ; ===========================================================================
.text$mn:000060C8
.text$mn:000060C8 ; Segment type: Pure code
.text$mn:000060C8 ; Segment permissions: Read/Execute
.text$mn:000060C8 _text$mn        segment para public 'CODE' use32
.text$mn:000060C8                 assume cs:_text$mn
.text$mn:000060C8                 ;org 60C8h
.text$mn:000060C8 ; COMDAT (pick any)
.text$mn:000060C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060C8
.text$mn:000060C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000060C8
.text$mn:000060C8 ; Attributes: bp-based frame
.text$mn:000060C8
.text$mn:000060C8 ; int __cdecl std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(int, void *, int)
.text$mn:000060C8                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
.text$mn:000060C8 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
.text$mn:000060C8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+1Cp
.text$mn:000060C8
.text$mn:000060C8 arg_0           = dword ptr  8
.text$mn:000060C8 arg_4           = dword ptr  0Ch
.text$mn:000060C8 arg_8           = dword ptr  10h
.text$mn:000060C8
.text$mn:000060C8                 push    ebp
.text$mn:000060C9                 mov     ebp, esp
.text$mn:000060CB                 mov     eax, [ebp+arg_8]
.text$mn:000060CE                 push    eax
.text$mn:000060CF                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:000060D4                 add     esp, 4
.text$mn:000060D7                 push    eax             ; int
.text$mn:000060D8                 mov     ecx, [ebp+arg_4]
.text$mn:000060DB                 push    ecx             ; void *
.text$mn:000060DC                 mov     ecx, [ebp+arg_0]
.text$mn:000060DF                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000060E4                 pop     ebp
.text$mn:000060E5                 retn
.text$mn:000060E5 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z endp
.text$mn:000060E5
.text$mn:000060E5 ; ---------------------------------------------------------------------------
.text$mn:000060E6                 align 4
.text$mn:000060E6 _text$mn        ends
.text$mn:000060E6
.text$mn:000060E8 ; ===========================================================================
.text$mn:000060E8
.text$mn:000060E8 ; Segment type: Pure code
.text$mn:000060E8 ; Segment permissions: Read/Execute
.text$mn:000060E8 _text$mn        segment para public 'CODE' use32
.text$mn:000060E8                 assume cs:_text$mn
.text$mn:000060E8                 ;org 60E8h
.text$mn:000060E8 ; COMDAT (pick any)
.text$mn:000060E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060E8
.text$mn:000060E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000060E8
.text$mn:000060E8 ; Attributes: bp-based frame
.text$mn:000060E8
.text$mn:000060E8 ; int __stdcall std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo &>(void *, int)
.text$mn:000060E8                 public ??$construct@UfoundInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@AAU2@@Z
.text$mn:000060E8 ??$construct@UfoundInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@AAU2@@Z proc near
.text$mn:000060E8                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+8Dp
.text$mn:000060E8
.text$mn:000060E8 var_4           = dword ptr -4
.text$mn:000060E8 arg_0           = dword ptr  8
.text$mn:000060E8 arg_4           = dword ptr  0Ch
.text$mn:000060E8
.text$mn:000060E8                 push    ebp
.text$mn:000060E9                 mov     ebp, esp
.text$mn:000060EB                 push    ecx
.text$mn:000060EC                 mov     [ebp+var_4], ecx
.text$mn:000060EF                 mov     eax, [ebp+arg_4]
.text$mn:000060F2                 push    eax
.text$mn:000060F3                 call    ??$forward@AAUfoundInfo@@@std@@YAAAUfoundInfo@@AAU1@@Z ; std::forward<foundInfo &>(foundInfo &)
.text$mn:000060F8                 add     esp, 4
.text$mn:000060FB                 push    eax             ; int
.text$mn:000060FC                 mov     ecx, [ebp+arg_0]
.text$mn:000060FF                 push    ecx             ; void *
.text$mn:00006100                 mov     edx, [ebp+var_4]
.text$mn:00006103                 push    edx             ; int
.text$mn:00006104                 call    ??$construct@UfoundInfo@@AAU1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@AAU3@@Z ; std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo &>(std::allocator<foundInfo> &,foundInfo *,foundInfo &)
.text$mn:00006109                 add     esp, 0Ch
.text$mn:0000610C                 mov     esp, ebp
.text$mn:0000610E                 pop     ebp
.text$mn:0000610F                 retn    8
.text$mn:0000610F ??$construct@UfoundInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@AAU2@@Z endp
.text$mn:0000610F
.text$mn:0000610F ; ---------------------------------------------------------------------------
.text$mn:00006112                 align 4
.text$mn:00006112 _text$mn        ends
.text$mn:00006112
.text$mn:00006114 ; ===========================================================================
.text$mn:00006114
.text$mn:00006114 ; Segment type: Pure code
.text$mn:00006114 ; Segment permissions: Read/Execute
.text$mn:00006114 _text$mn        segment para public 'CODE' use32
.text$mn:00006114                 assume cs:_text$mn
.text$mn:00006114                 ;org 6114h
.text$mn:00006114 ; COMDAT (pick any)
.text$mn:00006114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006114
.text$mn:00006114 ; =============== S U B R O U T I N E =======================================
.text$mn:00006114
.text$mn:00006114 ; Attributes: bp-based frame
.text$mn:00006114
.text$mn:00006114 ; int __stdcall std::allocator<foundInfo>::construct<foundInfo,foundInfo &>(void *, int)
.text$mn:00006114                 public ??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z
.text$mn:00006114 ??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z proc near
.text$mn:00006114                                         ; CODE XREF: std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo &>(std::allocator<foundInfo> &,foundInfo *,foundInfo &)+17p
.text$mn:00006114
.text$mn:00006114 var_1C          = dword ptr -1Ch
.text$mn:00006114 var_18          = dword ptr -18h
.text$mn:00006114 var_14          = dword ptr -14h
.text$mn:00006114 var_10          = dword ptr -10h
.text$mn:00006114 var_C           = dword ptr -0Ch
.text$mn:00006114 var_4           = dword ptr -4
.text$mn:00006114 arg_0           = dword ptr  8
.text$mn:00006114 arg_4           = dword ptr  0Ch
.text$mn:00006114
.text$mn:00006114                 push    ebp
.text$mn:00006115                 mov     ebp, esp
.text$mn:00006117                 push    0FFFFFFFFh
.text$mn:00006119                 push    offset __ehhandler$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z
.text$mn:0000611E                 mov     eax, large fs:0
.text$mn:00006124                 push    eax
.text$mn:00006125                 sub     esp, 10h
.text$mn:00006128                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000612D                 xor     eax, ebp
.text$mn:0000612F                 push    eax
.text$mn:00006130                 lea     eax, [ebp+var_C]
.text$mn:00006133                 mov     large fs:0, eax
.text$mn:00006139                 mov     [ebp+var_18], ecx
.text$mn:0000613C                 mov     eax, [ebp+arg_0]
.text$mn:0000613F                 push    eax             ; void *
.text$mn:00006140                 push    40h ; '@'       ; unsigned int
.text$mn:00006142                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00006147                 add     esp, 8
.text$mn:0000614A                 mov     [ebp+var_10], eax
.text$mn:0000614D                 mov     [ebp+var_4], 0
.text$mn:00006154                 cmp     [ebp+var_10], 0
.text$mn:00006158                 jz      short loc_6174
.text$mn:0000615A                 mov     ecx, [ebp+arg_4]
.text$mn:0000615D                 push    ecx
.text$mn:0000615E                 call    ??$forward@AAUfoundInfo@@@std@@YAAAUfoundInfo@@AAU1@@Z ; std::forward<foundInfo &>(foundInfo &)
.text$mn:00006163                 add     esp, 4
.text$mn:00006166                 push    eax
.text$mn:00006167                 mov     ecx, [ebp+var_10]
.text$mn:0000616A                 call    ??0foundInfo@@QAE@ABU0@@Z ; foundInfo::foundInfo(foundInfo const &)
.text$mn:0000616F                 mov     [ebp+var_14], eax
.text$mn:00006172                 jmp     short loc_617B
.text$mn:00006174 ; ---------------------------------------------------------------------------
.text$mn:00006174
.text$mn:00006174 loc_6174:                               ; CODE XREF: std::allocator<foundInfo>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)+44j
.text$mn:00006174                 mov     [ebp+var_14], 0
.text$mn:0000617B
.text$mn:0000617B loc_617B:                               ; CODE XREF: std::allocator<foundInfo>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)+5Ej
.text$mn:0000617B                 mov     edx, [ebp+var_14]
.text$mn:0000617E                 mov     [ebp+var_1C], edx
.text$mn:00006181                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006188                 mov     ecx, [ebp+var_C]
.text$mn:0000618B                 mov     large fs:0, ecx
.text$mn:00006192                 pop     ecx
.text$mn:00006193                 mov     esp, ebp
.text$mn:00006195                 pop     ebp
.text$mn:00006196                 retn    8
.text$mn:00006196 ??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z endp
.text$mn:00006196
.text$mn:00006196 ; ---------------------------------------------------------------------------
.text$mn:00006199                 align 4
.text$mn:00006199 _text$mn        ends
.text$mn:00006199
.text$x:0000619C ; ===========================================================================
.text$x:0000619C
.text$x:0000619C ; Segment type: Pure code
.text$x:0000619C ; Segment permissions: Read/Execute
.text$x:0000619C _text$x         segment para public 'CODE' use32
.text$x:0000619C                 assume cs:_text$x
.text$x:0000619C                 ;org 619Ch
.text$x:0000619C ; COMDAT (pick associative to section at 6114)
.text$x:0000619C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000619C
.text$x:0000619C ; =============== S U B R O U T I N E =======================================
.text$x:0000619C
.text$x:0000619C
.text$x:0000619C __unwindfunclet$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z$0 proc near
.text$x:0000619C                                         ; DATA XREF: .xdata$x:00010AC0o
.text$x:0000619C                 mov     eax, [ebp+8]
.text$x:0000619F                 push    eax
.text$x:000061A0                 mov     eax, [ebp-10h]
.text$x:000061A3                 push    eax             ; void *
.text$x:000061A4                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000061A9                 add     esp, 8
.text$x:000061AC                 retn
.text$x:000061AC __unwindfunclet$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z$0 endp
.text$x:000061AC
.text$x:000061AD
.text$x:000061AD ; =============== S U B R O U T I N E =======================================
.text$x:000061AD
.text$x:000061AD
.text$x:000061AD __ehhandler$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z proc near
.text$x:000061AD                                         ; DATA XREF: std::allocator<foundInfo>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)+5o
.text$x:000061AD
.text$x:000061AD arg_4           = dword ptr  8
.text$x:000061AD
.text$x:000061AD                 mov     edx, [esp+arg_4]
.text$x:000061B1                 lea     eax, [edx+0Ch]
.text$x:000061B4                 mov     ecx, [edx-14h]
.text$x:000061B7                 xor     ecx, eax
.text$x:000061B9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000061BE                 mov     eax, offset __ehfuncinfo$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z
.text$x:000061C3                 jmp     ___CxxFrameHandler3
.text$x:000061C3 __ehhandler$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z endp
.text$x:000061C3
.text$x:000061C3 _text$x         ends
.text$x:000061C3
.text$mn:000061C8 ; ===========================================================================
.text$mn:000061C8
.text$mn:000061C8 ; Segment type: Pure code
.text$mn:000061C8 ; Segment permissions: Read/Execute
.text$mn:000061C8 _text$mn        segment para public 'CODE' use32
.text$mn:000061C8                 assume cs:_text$mn
.text$mn:000061C8                 ;org 61C8h
.text$mn:000061C8 ; COMDAT (pick any)
.text$mn:000061C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061C8
.text$mn:000061C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000061C8
.text$mn:000061C8 ; Attributes: bp-based frame
.text$mn:000061C8
.text$mn:000061C8 ; int __cdecl std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo &>(int, void *, int)
.text$mn:000061C8                 public ??$construct@UfoundInfo@@AAU1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@AAU3@@Z
.text$mn:000061C8 ??$construct@UfoundInfo@@AAU1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@AAU3@@Z proc near
.text$mn:000061C8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)+1Cp
.text$mn:000061C8
.text$mn:000061C8 arg_0           = dword ptr  8
.text$mn:000061C8 arg_4           = dword ptr  0Ch
.text$mn:000061C8 arg_8           = dword ptr  10h
.text$mn:000061C8
.text$mn:000061C8                 push    ebp
.text$mn:000061C9                 mov     ebp, esp
.text$mn:000061CB                 mov     eax, [ebp+arg_8]
.text$mn:000061CE                 push    eax
.text$mn:000061CF                 call    ??$forward@AAUfoundInfo@@@std@@YAAAUfoundInfo@@AAU1@@Z ; std::forward<foundInfo &>(foundInfo &)
.text$mn:000061D4                 add     esp, 4
.text$mn:000061D7                 push    eax             ; int
.text$mn:000061D8                 mov     ecx, [ebp+arg_4]
.text$mn:000061DB                 push    ecx             ; void *
.text$mn:000061DC                 mov     ecx, [ebp+arg_0]
.text$mn:000061DF                 call    ??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z ; std::allocator<foundInfo>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)
.text$mn:000061E4                 pop     ebp
.text$mn:000061E5                 retn
.text$mn:000061E5 ??$construct@UfoundInfo@@AAU1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@AAU3@@Z endp
.text$mn:000061E5
.text$mn:000061E5 ; ---------------------------------------------------------------------------
.text$mn:000061E6                 align 4
.text$mn:000061E6 _text$mn        ends
.text$mn:000061E6
.text$mn:000061E8 ; ===========================================================================
.text$mn:000061E8
.text$mn:000061E8 ; Segment type: Pure code
.text$mn:000061E8 ; Segment permissions: Read/Execute
.text$mn:000061E8 _text$mn        segment para public 'CODE' use32
.text$mn:000061E8                 assume cs:_text$mn
.text$mn:000061E8                 ;org 61E8h
.text$mn:000061E8 ; COMDAT (pick any)
.text$mn:000061E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061E8
.text$mn:000061E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000061E8
.text$mn:000061E8 ; Attributes: bp-based frame
.text$mn:000061E8
.text$mn:000061E8 ; int __stdcall std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo const &>(void *, int)
.text$mn:000061E8                 public ??$construct@UfoundInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@ABU2@@Z
.text$mn:000061E8 ??$construct@UfoundInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@ABU2@@Z proc near
.text$mn:000061E8                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+EAp
.text$mn:000061E8
.text$mn:000061E8 var_4           = dword ptr -4
.text$mn:000061E8 arg_0           = dword ptr  8
.text$mn:000061E8 arg_4           = dword ptr  0Ch
.text$mn:000061E8
.text$mn:000061E8                 push    ebp
.text$mn:000061E9                 mov     ebp, esp
.text$mn:000061EB                 push    ecx
.text$mn:000061EC                 mov     [ebp+var_4], ecx
.text$mn:000061EF                 mov     eax, [ebp+arg_4]
.text$mn:000061F2                 push    eax
.text$mn:000061F3                 call    ??$forward@ABUfoundInfo@@@std@@YAABUfoundInfo@@ABU1@@Z ; std::forward<foundInfo const &>(foundInfo const &)
.text$mn:000061F8                 add     esp, 4
.text$mn:000061FB                 push    eax             ; int
.text$mn:000061FC                 mov     ecx, [ebp+arg_0]
.text$mn:000061FF                 push    ecx             ; void *
.text$mn:00006200                 mov     edx, [ebp+var_4]
.text$mn:00006203                 push    edx             ; int
.text$mn:00006204                 call    ??$construct@UfoundInfo@@ABU1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@ABU3@@Z ; std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo const &>(std::allocator<foundInfo> &,foundInfo *,foundInfo const &)
.text$mn:00006209                 add     esp, 0Ch
.text$mn:0000620C                 mov     esp, ebp
.text$mn:0000620E                 pop     ebp
.text$mn:0000620F                 retn    8
.text$mn:0000620F ??$construct@UfoundInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@ABU2@@Z endp
.text$mn:0000620F
.text$mn:0000620F ; ---------------------------------------------------------------------------
.text$mn:00006212                 align 4
.text$mn:00006212 _text$mn        ends
.text$mn:00006212
.text$mn:00006214 ; ===========================================================================
.text$mn:00006214
.text$mn:00006214 ; Segment type: Pure code
.text$mn:00006214 ; Segment permissions: Read/Execute
.text$mn:00006214 _text$mn        segment para public 'CODE' use32
.text$mn:00006214                 assume cs:_text$mn
.text$mn:00006214                 ;org 6214h
.text$mn:00006214 ; COMDAT (pick any)
.text$mn:00006214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006214
.text$mn:00006214 ; =============== S U B R O U T I N E =======================================
.text$mn:00006214
.text$mn:00006214 ; Attributes: bp-based frame
.text$mn:00006214
.text$mn:00006214 ; int __cdecl std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo const &>(int, void *, int)
.text$mn:00006214                 public ??$construct@UfoundInfo@@ABU1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@ABU3@@Z
.text$mn:00006214 ??$construct@UfoundInfo@@ABU1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@ABU3@@Z proc near
.text$mn:00006214                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo const &>(foundInfo *,foundInfo const &)+1Cp
.text$mn:00006214
.text$mn:00006214 arg_0           = dword ptr  8
.text$mn:00006214 arg_4           = dword ptr  0Ch
.text$mn:00006214 arg_8           = dword ptr  10h
.text$mn:00006214
.text$mn:00006214                 push    ebp
.text$mn:00006215                 mov     ebp, esp
.text$mn:00006217                 mov     eax, [ebp+arg_8]
.text$mn:0000621A                 push    eax
.text$mn:0000621B                 call    ??$forward@ABUfoundInfo@@@std@@YAABUfoundInfo@@ABU1@@Z ; std::forward<foundInfo const &>(foundInfo const &)
.text$mn:00006220                 add     esp, 4
.text$mn:00006223                 push    eax             ; int
.text$mn:00006224                 mov     ecx, [ebp+arg_4]
.text$mn:00006227                 push    ecx             ; void *
.text$mn:00006228                 mov     ecx, [ebp+arg_0]
.text$mn:0000622B                 call    ?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z ; std::allocator<foundInfo>::construct(foundInfo *,foundInfo const &)
.text$mn:00006230                 pop     ebp
.text$mn:00006231                 retn
.text$mn:00006231 ??$construct@UfoundInfo@@ABU1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@ABU3@@Z endp
.text$mn:00006231
.text$mn:00006231 ; ---------------------------------------------------------------------------
.text$mn:00006232                 align 4
.text$mn:00006232 _text$mn        ends
.text$mn:00006232
.text$mn:00006234 ; ===========================================================================
.text$mn:00006234
.text$mn:00006234 ; Segment type: Pure code
.text$mn:00006234 ; Segment permissions: Read/Execute
.text$mn:00006234 _text$mn        segment para public 'CODE' use32
.text$mn:00006234                 assume cs:_text$mn
.text$mn:00006234                 ;org 6234h
.text$mn:00006234 ; COMDAT (pick any)
.text$mn:00006234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006234
.text$mn:00006234 ; =============== S U B R O U T I N E =======================================
.text$mn:00006234
.text$mn:00006234 ; Attributes: bp-based frame
.text$mn:00006234
.text$mn:00006234 ; int __stdcall std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo>(void *, int)
.text$mn:00006234                 public ??$construct@UfoundInfo@@U1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z
.text$mn:00006234 ??$construct@UfoundInfo@@U1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z proc near
.text$mn:00006234                                         ; CODE XREF: std::_Uninit_move<foundInfo *,foundInfo *,std::allocator<foundInfo>,foundInfo>(foundInfo *,foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,foundInfo *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00006234
.text$mn:00006234 var_4           = dword ptr -4
.text$mn:00006234 arg_0           = dword ptr  8
.text$mn:00006234 arg_4           = dword ptr  0Ch
.text$mn:00006234
.text$mn:00006234                 push    ebp
.text$mn:00006235                 mov     ebp, esp
.text$mn:00006237                 push    ecx
.text$mn:00006238                 mov     [ebp+var_4], ecx
.text$mn:0000623B                 mov     eax, [ebp+arg_4]
.text$mn:0000623E                 push    eax
.text$mn:0000623F                 call    ??$forward@UfoundInfo@@@std@@YA$$QAUfoundInfo@@AAU1@@Z ; std::forward<foundInfo>(foundInfo &)
.text$mn:00006244                 add     esp, 4
.text$mn:00006247                 push    eax             ; int
.text$mn:00006248                 mov     ecx, [ebp+arg_0]
.text$mn:0000624B                 push    ecx             ; void *
.text$mn:0000624C                 mov     edx, [ebp+var_4]
.text$mn:0000624F                 push    edx             ; int
.text$mn:00006250                 call    ??$construct@UfoundInfo@@U1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@$$QAU3@@Z ; std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo>(std::allocator<foundInfo> &,foundInfo *,foundInfo &&)
.text$mn:00006255                 add     esp, 0Ch
.text$mn:00006258                 mov     esp, ebp
.text$mn:0000625A                 pop     ebp
.text$mn:0000625B                 retn    8
.text$mn:0000625B ??$construct@UfoundInfo@@U1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z endp
.text$mn:0000625B
.text$mn:0000625B ; ---------------------------------------------------------------------------
.text$mn:0000625E                 align 10h
.text$mn:0000625E _text$mn        ends
.text$mn:0000625E
.text$mn:00006260 ; ===========================================================================
.text$mn:00006260
.text$mn:00006260 ; Segment type: Pure code
.text$mn:00006260 ; Segment permissions: Read/Execute
.text$mn:00006260 _text$mn        segment para public 'CODE' use32
.text$mn:00006260                 assume cs:_text$mn
.text$mn:00006260                 ;org 6260h
.text$mn:00006260 ; COMDAT (pick any)
.text$mn:00006260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006260
.text$mn:00006260 ; =============== S U B R O U T I N E =======================================
.text$mn:00006260
.text$mn:00006260 ; Attributes: bp-based frame
.text$mn:00006260
.text$mn:00006260 ; int __stdcall std::allocator<foundInfo>::construct<foundInfo,foundInfo>(void *, int)
.text$mn:00006260                 public ??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z
.text$mn:00006260 ??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z proc near
.text$mn:00006260                                         ; CODE XREF: std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo>(std::allocator<foundInfo> &,foundInfo *,foundInfo &&)+17p
.text$mn:00006260
.text$mn:00006260 var_1C          = dword ptr -1Ch
.text$mn:00006260 var_18          = dword ptr -18h
.text$mn:00006260 var_14          = dword ptr -14h
.text$mn:00006260 var_10          = dword ptr -10h
.text$mn:00006260 var_C           = dword ptr -0Ch
.text$mn:00006260 var_4           = dword ptr -4
.text$mn:00006260 arg_0           = dword ptr  8
.text$mn:00006260 arg_4           = dword ptr  0Ch
.text$mn:00006260
.text$mn:00006260                 push    ebp
.text$mn:00006261                 mov     ebp, esp
.text$mn:00006263                 push    0FFFFFFFFh
.text$mn:00006265                 push    offset __ehhandler$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z
.text$mn:0000626A                 mov     eax, large fs:0
.text$mn:00006270                 push    eax
.text$mn:00006271                 sub     esp, 10h
.text$mn:00006274                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006279                 xor     eax, ebp
.text$mn:0000627B                 push    eax
.text$mn:0000627C                 lea     eax, [ebp+var_C]
.text$mn:0000627F                 mov     large fs:0, eax
.text$mn:00006285                 mov     [ebp+var_18], ecx
.text$mn:00006288                 mov     eax, [ebp+arg_0]
.text$mn:0000628B                 push    eax             ; void *
.text$mn:0000628C                 push    40h ; '@'       ; unsigned int
.text$mn:0000628E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00006293                 add     esp, 8
.text$mn:00006296                 mov     [ebp+var_10], eax
.text$mn:00006299                 mov     [ebp+var_4], 0
.text$mn:000062A0                 cmp     [ebp+var_10], 0
.text$mn:000062A4                 jz      short loc_62C0
.text$mn:000062A6                 mov     ecx, [ebp+arg_4]
.text$mn:000062A9                 push    ecx
.text$mn:000062AA                 call    ??$forward@UfoundInfo@@@std@@YA$$QAUfoundInfo@@AAU1@@Z ; std::forward<foundInfo>(foundInfo &)
.text$mn:000062AF                 add     esp, 4
.text$mn:000062B2                 push    eax
.text$mn:000062B3                 mov     ecx, [ebp+var_10]
.text$mn:000062B6                 call    ??0foundInfo@@QAE@ABU0@@Z ; foundInfo::foundInfo(foundInfo const &)
.text$mn:000062BB                 mov     [ebp+var_14], eax
.text$mn:000062BE                 jmp     short loc_62C7
.text$mn:000062C0 ; ---------------------------------------------------------------------------
.text$mn:000062C0
.text$mn:000062C0 loc_62C0:                               ; CODE XREF: std::allocator<foundInfo>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)+44j
.text$mn:000062C0                 mov     [ebp+var_14], 0
.text$mn:000062C7
.text$mn:000062C7 loc_62C7:                               ; CODE XREF: std::allocator<foundInfo>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)+5Ej
.text$mn:000062C7                 mov     edx, [ebp+var_14]
.text$mn:000062CA                 mov     [ebp+var_1C], edx
.text$mn:000062CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000062D4                 mov     ecx, [ebp+var_C]
.text$mn:000062D7                 mov     large fs:0, ecx
.text$mn:000062DE                 pop     ecx
.text$mn:000062DF                 mov     esp, ebp
.text$mn:000062E1                 pop     ebp
.text$mn:000062E2                 retn    8
.text$mn:000062E2 ??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z endp
.text$mn:000062E2
.text$mn:000062E2 ; ---------------------------------------------------------------------------
.text$mn:000062E5                 align 4
.text$mn:000062E5 _text$mn        ends
.text$mn:000062E5
.text$x:000062E8 ; ===========================================================================
.text$x:000062E8
.text$x:000062E8 ; Segment type: Pure code
.text$x:000062E8 ; Segment permissions: Read/Execute
.text$x:000062E8 _text$x         segment para public 'CODE' use32
.text$x:000062E8                 assume cs:_text$x
.text$x:000062E8                 ;org 62E8h
.text$x:000062E8 ; COMDAT (pick associative to section at 6260)
.text$x:000062E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000062E8
.text$x:000062E8 ; =============== S U B R O U T I N E =======================================
.text$x:000062E8
.text$x:000062E8
.text$x:000062E8 __unwindfunclet$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z$0 proc near
.text$x:000062E8                                         ; DATA XREF: .xdata$x:00010D28o
.text$x:000062E8                 mov     eax, [ebp+8]
.text$x:000062EB                 push    eax
.text$x:000062EC                 mov     eax, [ebp-10h]
.text$x:000062EF                 push    eax             ; void *
.text$x:000062F0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000062F5                 add     esp, 8
.text$x:000062F8                 retn
.text$x:000062F8 __unwindfunclet$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z$0 endp
.text$x:000062F8
.text$x:000062F9
.text$x:000062F9 ; =============== S U B R O U T I N E =======================================
.text$x:000062F9
.text$x:000062F9
.text$x:000062F9 __ehhandler$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z proc near
.text$x:000062F9                                         ; DATA XREF: std::allocator<foundInfo>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)+5o
.text$x:000062F9
.text$x:000062F9 arg_4           = dword ptr  8
.text$x:000062F9
.text$x:000062F9                 mov     edx, [esp+arg_4]
.text$x:000062FD                 lea     eax, [edx+0Ch]
.text$x:00006300                 mov     ecx, [edx-14h]
.text$x:00006303                 xor     ecx, eax
.text$x:00006305                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000630A                 mov     eax, offset __ehfuncinfo$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z
.text$x:0000630F                 jmp     ___CxxFrameHandler3
.text$x:0000630F __ehhandler$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z endp
.text$x:0000630F
.text$x:0000630F _text$x         ends
.text$x:0000630F
.text$mn:00006314 ; ===========================================================================
.text$mn:00006314
.text$mn:00006314 ; Segment type: Pure code
.text$mn:00006314 ; Segment permissions: Read/Execute
.text$mn:00006314 _text$mn        segment para public 'CODE' use32
.text$mn:00006314                 assume cs:_text$mn
.text$mn:00006314                 ;org 6314h
.text$mn:00006314 ; COMDAT (pick any)
.text$mn:00006314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006314
.text$mn:00006314 ; =============== S U B R O U T I N E =======================================
.text$mn:00006314
.text$mn:00006314 ; Attributes: bp-based frame
.text$mn:00006314
.text$mn:00006314 ; int __cdecl std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo>(int, void *, int)
.text$mn:00006314                 public ??$construct@UfoundInfo@@U1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@$$QAU3@@Z
.text$mn:00006314 ??$construct@UfoundInfo@@U1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@$$QAU3@@Z proc near
.text$mn:00006314                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)+1Cp
.text$mn:00006314
.text$mn:00006314 arg_0           = dword ptr  8
.text$mn:00006314 arg_4           = dword ptr  0Ch
.text$mn:00006314 arg_8           = dword ptr  10h
.text$mn:00006314
.text$mn:00006314                 push    ebp
.text$mn:00006315                 mov     ebp, esp
.text$mn:00006317                 mov     eax, [ebp+arg_8]
.text$mn:0000631A                 push    eax
.text$mn:0000631B                 call    ??$forward@UfoundInfo@@@std@@YA$$QAUfoundInfo@@AAU1@@Z ; std::forward<foundInfo>(foundInfo &)
.text$mn:00006320                 add     esp, 4
.text$mn:00006323                 push    eax             ; int
.text$mn:00006324                 mov     ecx, [ebp+arg_4]
.text$mn:00006327                 push    ecx             ; void *
.text$mn:00006328                 mov     ecx, [ebp+arg_0]
.text$mn:0000632B                 call    ??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z ; std::allocator<foundInfo>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)
.text$mn:00006330                 pop     ebp
.text$mn:00006331                 retn
.text$mn:00006331 ??$construct@UfoundInfo@@U1@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@$$QAU3@@Z endp
.text$mn:00006331
.text$mn:00006331 ; ---------------------------------------------------------------------------
.text$mn:00006332                 align 4
.text$mn:00006332 _text$mn        ends
.text$mn:00006332
.text$mn:00006334 ; ===========================================================================
.text$mn:00006334
.text$mn:00006334 ; Segment type: Pure code
.text$mn:00006334 ; Segment permissions: Read/Execute
.text$mn:00006334 _text$mn        segment para public 'CODE' use32
.text$mn:00006334                 assume cs:_text$mn
.text$mn:00006334                 ;org 6334h
.text$mn:00006334 ; COMDAT (pick any)
.text$mn:00006334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006334
.text$mn:00006334 ; =============== S U B R O U T I N E =======================================
.text$mn:00006334
.text$mn:00006334 ; Attributes: bp-based frame
.text$mn:00006334
.text$mn:00006334 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(void *, int)
.text$mn:00006334                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z
.text$mn:00006334 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z proc near
.text$mn:00006334                                         ; CODE XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00006334
.text$mn:00006334 var_4           = dword ptr -4
.text$mn:00006334 arg_0           = dword ptr  8
.text$mn:00006334 arg_4           = dword ptr  0Ch
.text$mn:00006334
.text$mn:00006334                 push    ebp
.text$mn:00006335                 mov     ebp, esp
.text$mn:00006337                 push    ecx
.text$mn:00006338                 mov     [ebp+var_4], ecx
.text$mn:0000633B                 mov     eax, [ebp+arg_4]
.text$mn:0000633E                 push    eax
.text$mn:0000633F                 call    ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00006344                 add     esp, 4
.text$mn:00006347                 push    eax             ; int
.text$mn:00006348                 mov     ecx, [ebp+arg_0]
.text$mn:0000634B                 push    ecx             ; void *
.text$mn:0000634C                 mov     edx, [ebp+var_4]
.text$mn:0000634F                 push    edx             ; int
.text$mn:00006350                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00006355                 add     esp, 0Ch
.text$mn:00006358                 mov     esp, ebp
.text$mn:0000635A                 pop     ebp
.text$mn:0000635B                 retn    8
.text$mn:0000635B ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV21@@Z endp
.text$mn:0000635B
.text$mn:0000635B ; ---------------------------------------------------------------------------
.text$mn:0000635E                 align 10h
.text$mn:0000635E _text$mn        ends
.text$mn:0000635E
.text$mn:00006360 ; ===========================================================================
.text$mn:00006360
.text$mn:00006360 ; Segment type: Pure code
.text$mn:00006360 ; Segment permissions: Read/Execute
.text$mn:00006360 _text$mn        segment para public 'CODE' use32
.text$mn:00006360                 assume cs:_text$mn
.text$mn:00006360                 ;org 6360h
.text$mn:00006360 ; COMDAT (pick any)
.text$mn:00006360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006360
.text$mn:00006360 ; =============== S U B R O U T I N E =======================================
.text$mn:00006360
.text$mn:00006360 ; Attributes: bp-based frame
.text$mn:00006360
.text$mn:00006360 ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(int, void *, int)
.text$mn:00006360                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z
.text$mn:00006360 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z proc near
.text$mn:00006360                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+1Cp
.text$mn:00006360
.text$mn:00006360 arg_0           = dword ptr  8
.text$mn:00006360 arg_4           = dword ptr  0Ch
.text$mn:00006360 arg_8           = dword ptr  10h
.text$mn:00006360
.text$mn:00006360                 push    ebp
.text$mn:00006361                 mov     ebp, esp
.text$mn:00006363                 mov     eax, [ebp+arg_8]
.text$mn:00006366                 push    eax
.text$mn:00006367                 call    ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000636C                 add     esp, 4
.text$mn:0000636F                 push    eax             ; int
.text$mn:00006370                 mov     ecx, [ebp+arg_4]
.text$mn:00006373                 push    ecx             ; void *
.text$mn:00006374                 mov     ecx, [ebp+arg_0]
.text$mn:00006377                 call    ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000637C                 pop     ebp
.text$mn:0000637D                 retn
.text$mn:0000637D ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@ABV31@@Z endp
.text$mn:0000637D
.text$mn:0000637D ; ---------------------------------------------------------------------------
.text$mn:0000637E                 align 10h
.text$mn:0000637E _text$mn        ends
.text$mn:0000637E
.text$mn:00006380 ; ===========================================================================
.text$mn:00006380
.text$mn:00006380 ; Segment type: Pure code
.text$mn:00006380 ; Segment permissions: Read/Execute
.text$mn:00006380 _text$mn        segment para public 'CODE' use32
.text$mn:00006380                 assume cs:_text$mn
.text$mn:00006380                 ;org 6380h
.text$mn:00006380 ; COMDAT (pick any)
.text$mn:00006380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006380
.text$mn:00006380 ; =============== S U B R O U T I N E =======================================
.text$mn:00006380
.text$mn:00006380 ; Attributes: bp-based frame
.text$mn:00006380
.text$mn:00006380 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:00006380                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00006380 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:00006380                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00006380                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+9Dp ...
.text$mn:00006380
.text$mn:00006380 var_4           = dword ptr -4
.text$mn:00006380 arg_0           = dword ptr  8
.text$mn:00006380 arg_4           = dword ptr  0Ch
.text$mn:00006380
.text$mn:00006380                 push    ebp
.text$mn:00006381                 mov     ebp, esp
.text$mn:00006383                 push    ecx
.text$mn:00006384                 mov     [ebp+var_4], ecx
.text$mn:00006387                 mov     eax, [ebp+arg_4]
.text$mn:0000638A                 push    eax
.text$mn:0000638B                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006390                 add     esp, 4
.text$mn:00006393                 push    eax             ; int
.text$mn:00006394                 mov     ecx, [ebp+arg_0]
.text$mn:00006397                 push    ecx             ; void *
.text$mn:00006398                 mov     edx, [ebp+var_4]
.text$mn:0000639B                 push    edx             ; int
.text$mn:0000639C                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000063A1                 add     esp, 0Ch
.text$mn:000063A4                 mov     esp, ebp
.text$mn:000063A6                 pop     ebp
.text$mn:000063A7                 retn    8
.text$mn:000063A7 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:000063A7
.text$mn:000063A7 ; ---------------------------------------------------------------------------
.text$mn:000063AA                 align 4
.text$mn:000063AA _text$mn        ends
.text$mn:000063AA
.text$mn:000063AC ; ===========================================================================
.text$mn:000063AC
.text$mn:000063AC ; Segment type: Pure code
.text$mn:000063AC ; Segment permissions: Read/Execute
.text$mn:000063AC _text$mn        segment para public 'CODE' use32
.text$mn:000063AC                 assume cs:_text$mn
.text$mn:000063AC                 ;org 63ACh
.text$mn:000063AC ; COMDAT (pick any)
.text$mn:000063AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000063AC
.text$mn:000063AC ; =============== S U B R O U T I N E =======================================
.text$mn:000063AC
.text$mn:000063AC ; Attributes: bp-based frame
.text$mn:000063AC
.text$mn:000063AC ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:000063AC                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:000063AC ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:000063AC                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+17p
.text$mn:000063AC
.text$mn:000063AC var_1C          = dword ptr -1Ch
.text$mn:000063AC var_18          = dword ptr -18h
.text$mn:000063AC var_14          = dword ptr -14h
.text$mn:000063AC var_10          = dword ptr -10h
.text$mn:000063AC var_C           = dword ptr -0Ch
.text$mn:000063AC var_4           = dword ptr -4
.text$mn:000063AC arg_0           = dword ptr  8
.text$mn:000063AC arg_4           = dword ptr  0Ch
.text$mn:000063AC
.text$mn:000063AC                 push    ebp
.text$mn:000063AD                 mov     ebp, esp
.text$mn:000063AF                 push    0FFFFFFFFh
.text$mn:000063B1                 push    offset __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:000063B6                 mov     eax, large fs:0
.text$mn:000063BC                 push    eax
.text$mn:000063BD                 sub     esp, 10h
.text$mn:000063C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000063C5                 xor     eax, ebp
.text$mn:000063C7                 push    eax
.text$mn:000063C8                 lea     eax, [ebp+var_C]
.text$mn:000063CB                 mov     large fs:0, eax
.text$mn:000063D1                 mov     [ebp+var_18], ecx
.text$mn:000063D4                 mov     eax, [ebp+arg_0]
.text$mn:000063D7                 push    eax             ; void *
.text$mn:000063D8                 push    1Ch             ; unsigned int
.text$mn:000063DA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000063DF                 add     esp, 8
.text$mn:000063E2                 mov     [ebp+var_10], eax
.text$mn:000063E5                 mov     [ebp+var_4], 0
.text$mn:000063EC                 cmp     [ebp+var_10], 0
.text$mn:000063F0                 jz      short loc_640C
.text$mn:000063F2                 mov     ecx, [ebp+arg_4]
.text$mn:000063F5                 push    ecx
.text$mn:000063F6                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000063FB                 add     esp, 4
.text$mn:000063FE                 push    eax
.text$mn:000063FF                 mov     ecx, [ebp+var_10]
.text$mn:00006402                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00006407                 mov     [ebp+var_14], eax
.text$mn:0000640A                 jmp     short loc_6413
.text$mn:0000640C ; ---------------------------------------------------------------------------
.text$mn:0000640C
.text$mn:0000640C loc_640C:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+44j
.text$mn:0000640C                 mov     [ebp+var_14], 0
.text$mn:00006413
.text$mn:00006413 loc_6413:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5Ej
.text$mn:00006413                 mov     edx, [ebp+var_14]
.text$mn:00006416                 mov     [ebp+var_1C], edx
.text$mn:00006419                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006420                 mov     ecx, [ebp+var_C]
.text$mn:00006423                 mov     large fs:0, ecx
.text$mn:0000642A                 pop     ecx
.text$mn:0000642B                 mov     esp, ebp
.text$mn:0000642D                 pop     ebp
.text$mn:0000642E                 retn    8
.text$mn:0000642E ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:0000642E
.text$mn:0000642E ; ---------------------------------------------------------------------------
.text$mn:00006431                 align 4
.text$mn:00006431 _text$mn        ends
.text$mn:00006431
.text$x:00006434 ; ===========================================================================
.text$x:00006434
.text$x:00006434 ; Segment type: Pure code
.text$x:00006434 ; Segment permissions: Read/Execute
.text$x:00006434 _text$x         segment para public 'CODE' use32
.text$x:00006434                 assume cs:_text$x
.text$x:00006434                 ;org 6434h
.text$x:00006434 ; COMDAT (pick associative to section at 63AC)
.text$x:00006434                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006434
.text$x:00006434 ; =============== S U B R O U T I N E =======================================
.text$x:00006434
.text$x:00006434
.text$x:00006434 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 proc near
.text$x:00006434                                         ; DATA XREF: .xdata$x:00010A3Co
.text$x:00006434                 mov     eax, [ebp+8]
.text$x:00006437                 push    eax
.text$x:00006438                 mov     eax, [ebp-10h]
.text$x:0000643B                 push    eax             ; void *
.text$x:0000643C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00006441                 add     esp, 8
.text$x:00006444                 retn
.text$x:00006444 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 endp
.text$x:00006444
.text$x:00006445
.text$x:00006445 ; =============== S U B R O U T I N E =======================================
.text$x:00006445
.text$x:00006445
.text$x:00006445 __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$x:00006445                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00006445
.text$x:00006445 arg_4           = dword ptr  8
.text$x:00006445
.text$x:00006445                 mov     edx, [esp+arg_4]
.text$x:00006449                 lea     eax, [edx+0Ch]
.text$x:0000644C                 mov     ecx, [edx-14h]
.text$x:0000644F                 xor     ecx, eax
.text$x:00006451                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006456                 mov     eax, offset __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$x:0000645B                 jmp     ___CxxFrameHandler3
.text$x:0000645B __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$x:0000645B
.text$x:0000645B _text$x         ends
.text$x:0000645B
.text$mn:00006460 ; ===========================================================================
.text$mn:00006460
.text$mn:00006460 ; Segment type: Pure code
.text$mn:00006460 ; Segment permissions: Read/Execute
.text$mn:00006460 _text$mn        segment para public 'CODE' use32
.text$mn:00006460                 assume cs:_text$mn
.text$mn:00006460                 ;org 6460h
.text$mn:00006460 ; COMDAT (pick any)
.text$mn:00006460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006460
.text$mn:00006460 ; =============== S U B R O U T I N E =======================================
.text$mn:00006460
.text$mn:00006460 ; Attributes: bp-based frame
.text$mn:00006460
.text$mn:00006460 ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, void *, int)
.text$mn:00006460                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z
.text$mn:00006460 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z proc near
.text$mn:00006460                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+1Cp
.text$mn:00006460
.text$mn:00006460 arg_0           = dword ptr  8
.text$mn:00006460 arg_4           = dword ptr  0Ch
.text$mn:00006460 arg_8           = dword ptr  10h
.text$mn:00006460
.text$mn:00006460                 push    ebp
.text$mn:00006461                 mov     ebp, esp
.text$mn:00006463                 mov     eax, [ebp+arg_8]
.text$mn:00006466                 push    eax
.text$mn:00006467                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000646C                 add     esp, 4
.text$mn:0000646F                 push    eax             ; int
.text$mn:00006470                 mov     ecx, [ebp+arg_4]
.text$mn:00006473                 push    ecx             ; void *
.text$mn:00006474                 mov     ecx, [ebp+arg_0]
.text$mn:00006477                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000647C                 pop     ebp
.text$mn:0000647D                 retn
.text$mn:0000647D ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z endp
.text$mn:0000647D
.text$mn:0000647D ; ---------------------------------------------------------------------------
.text$mn:0000647E                 align 10h
.text$mn:0000647E _text$mn        ends
.text$mn:0000647E
.text$mn:00006480 ; ===========================================================================
.text$mn:00006480
.text$mn:00006480 ; Segment type: Pure code
.text$mn:00006480 ; Segment permissions: Read/Execute
.text$mn:00006480 _text$mn        segment para public 'CODE' use32
.text$mn:00006480                 assume cs:_text$mn
.text$mn:00006480                 ;org 6480h
.text$mn:00006480 ; COMDAT (pick any)
.text$mn:00006480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006480
.text$mn:00006480 ; =============== S U B R O U T I N E =======================================
.text$mn:00006480
.text$mn:00006480 ; Attributes: bp-based frame
.text$mn:00006480
.text$mn:00006480 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00006480                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00006480 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00006480                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00006480
.text$mn:00006480 var_4           = dword ptr -4
.text$mn:00006480 arg_0           = dword ptr  8
.text$mn:00006480
.text$mn:00006480                 push    ebp
.text$mn:00006481                 mov     ebp, esp
.text$mn:00006483                 push    ecx
.text$mn:00006484                 mov     [ebp+var_4], ecx
.text$mn:00006487                 mov     eax, [ebp+arg_0]
.text$mn:0000648A                 push    eax
.text$mn:0000648B                 mov     ecx, [ebp+var_4]
.text$mn:0000648E                 push    ecx
.text$mn:0000648F                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00006494                 add     esp, 8
.text$mn:00006497                 mov     esp, ebp
.text$mn:00006499                 pop     ebp
.text$mn:0000649A                 retn    4
.text$mn:0000649A ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:0000649A
.text$mn:0000649A ; ---------------------------------------------------------------------------
.text$mn:0000649D                 align 10h
.text$mn:0000649D _text$mn        ends
.text$mn:0000649D
.text$mn:000064A0 ; ===========================================================================
.text$mn:000064A0
.text$mn:000064A0 ; Segment type: Pure code
.text$mn:000064A0 ; Segment permissions: Read/Execute
.text$mn:000064A0 _text$mn        segment para public 'CODE' use32
.text$mn:000064A0                 assume cs:_text$mn
.text$mn:000064A0                 ;org 64A0h
.text$mn:000064A0 ; COMDAT (pick any)
.text$mn:000064A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064A0
.text$mn:000064A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000064A0
.text$mn:000064A0 ; Attributes: bp-based frame
.text$mn:000064A0
.text$mn:000064A0 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:000064A0                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:000064A0 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:000064A0                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:000064A0
.text$mn:000064A0 var_4           = dword ptr -4
.text$mn:000064A0
.text$mn:000064A0                 push    ebp
.text$mn:000064A1                 mov     ebp, esp
.text$mn:000064A3                 push    ecx
.text$mn:000064A4                 mov     [ebp+var_4], ecx
.text$mn:000064A7                 mov     esp, ebp
.text$mn:000064A9                 pop     ebp
.text$mn:000064AA                 retn    4
.text$mn:000064AA ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:000064AA
.text$mn:000064AA ; ---------------------------------------------------------------------------
.text$mn:000064AD                 align 10h
.text$mn:000064AD _text$mn        ends
.text$mn:000064AD
.text$mn:000064B0 ; ===========================================================================
.text$mn:000064B0
.text$mn:000064B0 ; Segment type: Pure code
.text$mn:000064B0 ; Segment permissions: Read/Execute
.text$mn:000064B0 _text$mn        segment para public 'CODE' use32
.text$mn:000064B0                 assume cs:_text$mn
.text$mn:000064B0                 ;org 64B0h
.text$mn:000064B0 ; COMDAT (pick any)
.text$mn:000064B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064B0
.text$mn:000064B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000064B0
.text$mn:000064B0 ; Attributes: bp-based frame
.text$mn:000064B0
.text$mn:000064B0 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:000064B0                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:000064B0 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:000064B0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:000064B0
.text$mn:000064B0 arg_0           = dword ptr  8
.text$mn:000064B0 arg_4           = dword ptr  0Ch
.text$mn:000064B0
.text$mn:000064B0                 push    ebp
.text$mn:000064B1                 mov     ebp, esp
.text$mn:000064B3                 mov     eax, [ebp+arg_4]
.text$mn:000064B6                 push    eax
.text$mn:000064B7                 mov     ecx, [ebp+arg_0]
.text$mn:000064BA                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:000064BF                 pop     ebp
.text$mn:000064C0                 retn
.text$mn:000064C0 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:000064C0
.text$mn:000064C0 ; ---------------------------------------------------------------------------
.text$mn:000064C1                 align 4
.text$mn:000064C1 _text$mn        ends
.text$mn:000064C1
.text$mn:000064C4 ; ===========================================================================
.text$mn:000064C4
.text$mn:000064C4 ; Segment type: Pure code
.text$mn:000064C4 ; Segment permissions: Read/Execute
.text$mn:000064C4 _text$mn        segment para public 'CODE' use32
.text$mn:000064C4                 assume cs:_text$mn
.text$mn:000064C4                 ;org 64C4h
.text$mn:000064C4 ; COMDAT (pick any)
.text$mn:000064C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064C4
.text$mn:000064C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064C4
.text$mn:000064C4 ; Attributes: bp-based frame
.text$mn:000064C4
.text$mn:000064C4 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000064C4                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:000064C4 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:000064C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:000064C4
.text$mn:000064C4 var_4           = dword ptr -4
.text$mn:000064C4 arg_0           = dword ptr  8
.text$mn:000064C4
.text$mn:000064C4                 push    ebp
.text$mn:000064C5                 mov     ebp, esp
.text$mn:000064C7                 push    ecx
.text$mn:000064C8                 mov     [ebp+var_4], ecx
.text$mn:000064CB                 mov     eax, [ebp+arg_0]
.text$mn:000064CE                 push    eax
.text$mn:000064CF                 mov     ecx, [ebp+var_4]
.text$mn:000064D2                 push    ecx
.text$mn:000064D3                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:000064D8                 add     esp, 8
.text$mn:000064DB                 mov     esp, ebp
.text$mn:000064DD                 pop     ebp
.text$mn:000064DE                 retn    4
.text$mn:000064DE ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:000064DE
.text$mn:000064DE ; ---------------------------------------------------------------------------
.text$mn:000064E1                 align 4
.text$mn:000064E1 _text$mn        ends
.text$mn:000064E1
.text$mn:000064E4 ; ===========================================================================
.text$mn:000064E4
.text$mn:000064E4 ; Segment type: Pure code
.text$mn:000064E4 ; Segment permissions: Read/Execute
.text$mn:000064E4 _text$mn        segment para public 'CODE' use32
.text$mn:000064E4                 assume cs:_text$mn
.text$mn:000064E4                 ;org 64E4h
.text$mn:000064E4 ; COMDAT (pick any)
.text$mn:000064E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064E4
.text$mn:000064E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064E4
.text$mn:000064E4 ; Attributes: bp-based frame
.text$mn:000064E4
.text$mn:000064E4 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000064E4                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:000064E4 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:000064E4                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:000064E4
.text$mn:000064E4 var_4           = dword ptr -4
.text$mn:000064E4
.text$mn:000064E4                 push    ebp
.text$mn:000064E5                 mov     ebp, esp
.text$mn:000064E7                 push    ecx
.text$mn:000064E8                 mov     [ebp+var_4], ecx
.text$mn:000064EB                 mov     esp, ebp
.text$mn:000064ED                 pop     ebp
.text$mn:000064EE                 retn    4
.text$mn:000064EE ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:000064EE
.text$mn:000064EE ; ---------------------------------------------------------------------------
.text$mn:000064F1                 align 4
.text$mn:000064F1 _text$mn        ends
.text$mn:000064F1
.text$mn:000064F4 ; ===========================================================================
.text$mn:000064F4
.text$mn:000064F4 ; Segment type: Pure code
.text$mn:000064F4 ; Segment permissions: Read/Execute
.text$mn:000064F4 _text$mn        segment para public 'CODE' use32
.text$mn:000064F4                 assume cs:_text$mn
.text$mn:000064F4                 ;org 64F4h
.text$mn:000064F4 ; COMDAT (pick any)
.text$mn:000064F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064F4
.text$mn:000064F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064F4
.text$mn:000064F4 ; Attributes: bp-based frame
.text$mn:000064F4
.text$mn:000064F4 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:000064F4                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:000064F4 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:000064F4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:000064F4
.text$mn:000064F4 arg_0           = dword ptr  8
.text$mn:000064F4 arg_4           = dword ptr  0Ch
.text$mn:000064F4
.text$mn:000064F4                 push    ebp
.text$mn:000064F5                 mov     ebp, esp
.text$mn:000064F7                 mov     eax, [ebp+arg_4]
.text$mn:000064FA                 push    eax
.text$mn:000064FB                 mov     ecx, [ebp+arg_0]
.text$mn:000064FE                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00006503                 pop     ebp
.text$mn:00006504                 retn
.text$mn:00006504 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00006504
.text$mn:00006504 ; ---------------------------------------------------------------------------
.text$mn:00006505                 align 4
.text$mn:00006505 _text$mn        ends
.text$mn:00006505
.text$mn:00006508 ; ===========================================================================
.text$mn:00006508
.text$mn:00006508 ; Segment type: Pure code
.text$mn:00006508 ; Segment permissions: Read/Execute
.text$mn:00006508 _text$mn        segment para public 'CODE' use32
.text$mn:00006508                 assume cs:_text$mn
.text$mn:00006508                 ;org 6508h
.text$mn:00006508 ; COMDAT (pick any)
.text$mn:00006508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006508
.text$mn:00006508 ; =============== S U B R O U T I N E =======================================
.text$mn:00006508
.text$mn:00006508 ; Attributes: bp-based frame
.text$mn:00006508
.text$mn:00006508 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>>::destroy<struct std::pair<int, int>>(struct std::pair<int, int> *)
.text$mn:00006508                 public ??$destroy@U?$pair@HH@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@@Z
.text$mn:00006508 ??$destroy@U?$pair@HH@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@@Z proc near
.text$mn:00006508                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00006508                                         ; __catch$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:00006508
.text$mn:00006508 var_4           = dword ptr -4
.text$mn:00006508 arg_0           = dword ptr  8
.text$mn:00006508
.text$mn:00006508                 push    ebp
.text$mn:00006509                 mov     ebp, esp
.text$mn:0000650B                 push    ecx
.text$mn:0000650C                 mov     [ebp+var_4], ecx
.text$mn:0000650F                 mov     eax, [ebp+arg_0]
.text$mn:00006512                 push    eax
.text$mn:00006513                 mov     ecx, [ebp+var_4]
.text$mn:00006516                 push    ecx
.text$mn:00006517                 call    ??$destroy@U?$pair@HH@std@@@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@HH@std@@@1@PAU?$pair@HH@1@@Z ; std::allocator_traits<std::allocator<std::pair<int,int>>>::destroy<std::pair<int,int>>(std::allocator<std::pair<int,int>> &,std::pair<int,int> *)
.text$mn:0000651C                 add     esp, 8
.text$mn:0000651F                 mov     esp, ebp
.text$mn:00006521                 pop     ebp
.text$mn:00006522                 retn    4
.text$mn:00006522 ??$destroy@U?$pair@HH@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@@Z endp
.text$mn:00006522
.text$mn:00006522 ; ---------------------------------------------------------------------------
.text$mn:00006525                 align 4
.text$mn:00006525 _text$mn        ends
.text$mn:00006525
.text$mn:00006528 ; ===========================================================================
.text$mn:00006528
.text$mn:00006528 ; Segment type: Pure code
.text$mn:00006528 ; Segment permissions: Read/Execute
.text$mn:00006528 _text$mn        segment para public 'CODE' use32
.text$mn:00006528                 assume cs:_text$mn
.text$mn:00006528                 ;org 6528h
.text$mn:00006528 ; COMDAT (pick any)
.text$mn:00006528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006528
.text$mn:00006528 ; =============== S U B R O U T I N E =======================================
.text$mn:00006528
.text$mn:00006528 ; Attributes: bp-based frame
.text$mn:00006528
.text$mn:00006528 ; public: void __thiscall std::allocator<struct std::pair<int, int>>::destroy<struct std::pair<int, int>>(struct std::pair<int, int> *)
.text$mn:00006528                 public ??$destroy@U?$pair@HH@std@@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@@Z
.text$mn:00006528 ??$destroy@U?$pair@HH@std@@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@@Z proc near
.text$mn:00006528                                         ; CODE XREF: std::allocator_traits<std::allocator<std::pair<int,int>>>::destroy<std::pair<int,int>>(std::allocator<std::pair<int,int>> &,std::pair<int,int> *)+Ap
.text$mn:00006528
.text$mn:00006528 var_4           = dword ptr -4
.text$mn:00006528
.text$mn:00006528                 push    ebp
.text$mn:00006529                 mov     ebp, esp
.text$mn:0000652B                 push    ecx
.text$mn:0000652C                 mov     [ebp+var_4], ecx
.text$mn:0000652F                 mov     esp, ebp
.text$mn:00006531                 pop     ebp
.text$mn:00006532                 retn    4
.text$mn:00006532 ??$destroy@U?$pair@HH@std@@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@@Z endp
.text$mn:00006532
.text$mn:00006532 ; ---------------------------------------------------------------------------
.text$mn:00006535                 align 4
.text$mn:00006535 _text$mn        ends
.text$mn:00006535
.text$mn:00006538 ; ===========================================================================
.text$mn:00006538
.text$mn:00006538 ; Segment type: Pure code
.text$mn:00006538 ; Segment permissions: Read/Execute
.text$mn:00006538 _text$mn        segment para public 'CODE' use32
.text$mn:00006538                 assume cs:_text$mn
.text$mn:00006538                 ;org 6538h
.text$mn:00006538 ; COMDAT (pick any)
.text$mn:00006538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006538
.text$mn:00006538 ; =============== S U B R O U T I N E =======================================
.text$mn:00006538
.text$mn:00006538 ; Attributes: bp-based frame
.text$mn:00006538
.text$mn:00006538 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::pair<int, int>>>::destroy<struct std::pair<int, int>>(class std::allocator<struct std::pair<int, int>> &, struct std::pair<int, int> *)
.text$mn:00006538                 public ??$destroy@U?$pair@HH@std@@@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@HH@std@@@1@PAU?$pair@HH@1@@Z
.text$mn:00006538 ??$destroy@U?$pair@HH@std@@@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@HH@std@@@1@PAU?$pair@HH@1@@Z proc near
.text$mn:00006538                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::destroy<std::pair<int,int>>(std::pair<int,int> *)+Fp
.text$mn:00006538
.text$mn:00006538 arg_0           = dword ptr  8
.text$mn:00006538 arg_4           = dword ptr  0Ch
.text$mn:00006538
.text$mn:00006538                 push    ebp
.text$mn:00006539                 mov     ebp, esp
.text$mn:0000653B                 mov     eax, [ebp+arg_4]
.text$mn:0000653E                 push    eax
.text$mn:0000653F                 mov     ecx, [ebp+arg_0]
.text$mn:00006542                 call    ??$destroy@U?$pair@HH@std@@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@@Z ; std::allocator<std::pair<int,int>>::destroy<std::pair<int,int>>(std::pair<int,int> *)
.text$mn:00006547                 pop     ebp
.text$mn:00006548                 retn
.text$mn:00006548 ??$destroy@U?$pair@HH@std@@@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@HH@std@@@1@PAU?$pair@HH@1@@Z endp
.text$mn:00006548
.text$mn:00006548 ; ---------------------------------------------------------------------------
.text$mn:00006549                 align 4
.text$mn:00006549 _text$mn        ends
.text$mn:00006549
.text$mn:0000654C ; ===========================================================================
.text$mn:0000654C
.text$mn:0000654C ; Segment type: Pure code
.text$mn:0000654C ; Segment permissions: Read/Execute
.text$mn:0000654C _text$mn        segment para public 'CODE' use32
.text$mn:0000654C                 assume cs:_text$mn
.text$mn:0000654C                 ;org 654Ch
.text$mn:0000654C ; COMDAT (pick any)
.text$mn:0000654C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000654C
.text$mn:0000654C ; =============== S U B R O U T I N E =======================================
.text$mn:0000654C
.text$mn:0000654C ; Attributes: bp-based frame
.text$mn:0000654C
.text$mn:0000654C ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct AssociationInfo>>::destroy<struct AssociationInfo>(struct AssociationInfo *)
.text$mn:0000654C                 public ??$destroy@UAssociationInfo@@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@@Z
.text$mn:0000654C ??$destroy@UAssociationInfo@@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@@Z proc near
.text$mn:0000654C                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:0000654C                                         ; __catch$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:0000654C
.text$mn:0000654C var_4           = dword ptr -4
.text$mn:0000654C arg_0           = dword ptr  8
.text$mn:0000654C
.text$mn:0000654C                 push    ebp
.text$mn:0000654D                 mov     ebp, esp
.text$mn:0000654F                 push    ecx
.text$mn:00006550                 mov     [ebp+var_4], ecx
.text$mn:00006553                 mov     eax, [ebp+arg_0]
.text$mn:00006556                 push    eax
.text$mn:00006557                 mov     ecx, [ebp+var_4]
.text$mn:0000655A                 push    ecx
.text$mn:0000655B                 call    ??$destroy@UAssociationInfo@@@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAXAAV?$allocator@UAssociationInfo@@@1@PAUAssociationInfo@@@Z ; std::allocator_traits<std::allocator<AssociationInfo>>::destroy<AssociationInfo>(std::allocator<AssociationInfo> &,AssociationInfo *)
.text$mn:00006560                 add     esp, 8
.text$mn:00006563                 mov     esp, ebp
.text$mn:00006565                 pop     ebp
.text$mn:00006566                 retn    4
.text$mn:00006566 ??$destroy@UAssociationInfo@@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@@Z endp
.text$mn:00006566
.text$mn:00006566 ; ---------------------------------------------------------------------------
.text$mn:00006569                 align 4
.text$mn:00006569 _text$mn        ends
.text$mn:00006569
.text$mn:0000656C ; ===========================================================================
.text$mn:0000656C
.text$mn:0000656C ; Segment type: Pure code
.text$mn:0000656C ; Segment permissions: Read/Execute
.text$mn:0000656C _text$mn        segment para public 'CODE' use32
.text$mn:0000656C                 assume cs:_text$mn
.text$mn:0000656C                 ;org 656Ch
.text$mn:0000656C ; COMDAT (pick any)
.text$mn:0000656C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000656C
.text$mn:0000656C ; =============== S U B R O U T I N E =======================================
.text$mn:0000656C
.text$mn:0000656C ; Attributes: bp-based frame
.text$mn:0000656C
.text$mn:0000656C ; public: void __thiscall std::allocator<struct AssociationInfo>::destroy<struct AssociationInfo>(struct AssociationInfo *)
.text$mn:0000656C                 public ??$destroy@UAssociationInfo@@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@@Z
.text$mn:0000656C ??$destroy@UAssociationInfo@@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@@Z proc near
.text$mn:0000656C                                         ; CODE XREF: std::allocator_traits<std::allocator<AssociationInfo>>::destroy<AssociationInfo>(std::allocator<AssociationInfo> &,AssociationInfo *)+Ap
.text$mn:0000656C
.text$mn:0000656C var_4           = dword ptr -4
.text$mn:0000656C arg_0           = dword ptr  8
.text$mn:0000656C
.text$mn:0000656C                 push    ebp
.text$mn:0000656D                 mov     ebp, esp
.text$mn:0000656F                 push    ecx
.text$mn:00006570                 mov     [ebp+var_4], ecx
.text$mn:00006573                 push    0
.text$mn:00006575                 mov     ecx, [ebp+arg_0]
.text$mn:00006578                 call    ??_GAssociationInfo@@QAEPAXI@Z ; AssociationInfo::`scalar deleting destructor'(uint)
.text$mn:0000657D                 mov     esp, ebp
.text$mn:0000657F                 pop     ebp
.text$mn:00006580                 retn    4
.text$mn:00006580 ??$destroy@UAssociationInfo@@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@@Z endp
.text$mn:00006580
.text$mn:00006580 ; ---------------------------------------------------------------------------
.text$mn:00006583                 align 4
.text$mn:00006583 _text$mn        ends
.text$mn:00006583
.text$mn:00006584 ; ===========================================================================
.text$mn:00006584
.text$mn:00006584 ; Segment type: Pure code
.text$mn:00006584 ; Segment permissions: Read/Execute
.text$mn:00006584 _text$mn        segment para public 'CODE' use32
.text$mn:00006584                 assume cs:_text$mn
.text$mn:00006584                 ;org 6584h
.text$mn:00006584 ; COMDAT (pick any)
.text$mn:00006584                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006584
.text$mn:00006584 ; =============== S U B R O U T I N E =======================================
.text$mn:00006584
.text$mn:00006584 ; Attributes: bp-based frame
.text$mn:00006584
.text$mn:00006584 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct AssociationInfo>>::destroy<struct AssociationInfo>(class std::allocator<struct AssociationInfo> &, struct AssociationInfo *)
.text$mn:00006584                 public ??$destroy@UAssociationInfo@@@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAXAAV?$allocator@UAssociationInfo@@@1@PAUAssociationInfo@@@Z
.text$mn:00006584 ??$destroy@UAssociationInfo@@@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAXAAV?$allocator@UAssociationInfo@@@1@PAUAssociationInfo@@@Z proc near
.text$mn:00006584                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<AssociationInfo>>::destroy<AssociationInfo>(AssociationInfo *)+Fp
.text$mn:00006584
.text$mn:00006584 arg_0           = dword ptr  8
.text$mn:00006584 arg_4           = dword ptr  0Ch
.text$mn:00006584
.text$mn:00006584                 push    ebp
.text$mn:00006585                 mov     ebp, esp
.text$mn:00006587                 mov     eax, [ebp+arg_4]
.text$mn:0000658A                 push    eax
.text$mn:0000658B                 mov     ecx, [ebp+arg_0]
.text$mn:0000658E                 call    ??$destroy@UAssociationInfo@@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@@Z ; std::allocator<AssociationInfo>::destroy<AssociationInfo>(AssociationInfo *)
.text$mn:00006593                 pop     ebp
.text$mn:00006594                 retn
.text$mn:00006594 ??$destroy@UAssociationInfo@@@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAXAAV?$allocator@UAssociationInfo@@@1@PAUAssociationInfo@@@Z endp
.text$mn:00006594
.text$mn:00006594 ; ---------------------------------------------------------------------------
.text$mn:00006595                 align 4
.text$mn:00006595 _text$mn        ends
.text$mn:00006595
.text$mn:00006598 ; ===========================================================================
.text$mn:00006598
.text$mn:00006598 ; Segment type: Pure code
.text$mn:00006598 ; Segment permissions: Read/Execute
.text$mn:00006598 _text$mn        segment para public 'CODE' use32
.text$mn:00006598                 assume cs:_text$mn
.text$mn:00006598                 ;org 6598h
.text$mn:00006598 ; COMDAT (pick any)
.text$mn:00006598                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006598
.text$mn:00006598 ; =============== S U B R O U T I N E =======================================
.text$mn:00006598
.text$mn:00006598 ; Attributes: bp-based frame
.text$mn:00006598
.text$mn:00006598 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00006598                 public ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00006598 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00006598                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Free_proxy(void)+22p
.text$mn:00006598                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Free_proxy(void)+22p ...
.text$mn:00006598
.text$mn:00006598 var_4           = dword ptr -4
.text$mn:00006598 arg_0           = dword ptr  8
.text$mn:00006598
.text$mn:00006598                 push    ebp
.text$mn:00006599                 mov     ebp, esp
.text$mn:0000659B                 push    ecx
.text$mn:0000659C                 mov     [ebp+var_4], ecx
.text$mn:0000659F                 mov     eax, [ebp+arg_0]
.text$mn:000065A2                 push    eax
.text$mn:000065A3                 mov     ecx, [ebp+var_4]
.text$mn:000065A6                 push    ecx
.text$mn:000065A7                 call    ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)
.text$mn:000065AC                 add     esp, 8
.text$mn:000065AF                 mov     esp, ebp
.text$mn:000065B1                 pop     ebp
.text$mn:000065B2                 retn    4
.text$mn:000065B2 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:000065B2
.text$mn:000065B2 ; ---------------------------------------------------------------------------
.text$mn:000065B5                 align 4
.text$mn:000065B5 _text$mn        ends
.text$mn:000065B5
.text$mn:000065B8 ; ===========================================================================
.text$mn:000065B8
.text$mn:000065B8 ; Segment type: Pure code
.text$mn:000065B8 ; Segment permissions: Read/Execute
.text$mn:000065B8 _text$mn        segment para public 'CODE' use32
.text$mn:000065B8                 assume cs:_text$mn
.text$mn:000065B8                 ;org 65B8h
.text$mn:000065B8 ; COMDAT (pick any)
.text$mn:000065B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065B8
.text$mn:000065B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065B8
.text$mn:000065B8 ; Attributes: bp-based frame
.text$mn:000065B8
.text$mn:000065B8 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:000065B8                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:000065B8 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:000065B8                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)+Ap
.text$mn:000065B8                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p ...
.text$mn:000065B8
.text$mn:000065B8 var_4           = dword ptr -4
.text$mn:000065B8
.text$mn:000065B8                 push    ebp
.text$mn:000065B9                 mov     ebp, esp
.text$mn:000065BB                 push    ecx
.text$mn:000065BC                 mov     [ebp+var_4], ecx
.text$mn:000065BF                 mov     esp, ebp
.text$mn:000065C1                 pop     ebp
.text$mn:000065C2                 retn    4
.text$mn:000065C2 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:000065C2
.text$mn:000065C2 ; ---------------------------------------------------------------------------
.text$mn:000065C5                 align 4
.text$mn:000065C5 _text$mn        ends
.text$mn:000065C5
.text$mn:000065C8 ; ===========================================================================
.text$mn:000065C8
.text$mn:000065C8 ; Segment type: Pure code
.text$mn:000065C8 ; Segment permissions: Read/Execute
.text$mn:000065C8 _text$mn        segment para public 'CODE' use32
.text$mn:000065C8                 assume cs:_text$mn
.text$mn:000065C8                 ;org 65C8h
.text$mn:000065C8 ; COMDAT (pick any)
.text$mn:000065C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065C8
.text$mn:000065C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065C8
.text$mn:000065C8 ; Attributes: bp-based frame
.text$mn:000065C8
.text$mn:000065C8 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(class std::allocator<struct std::_Container_proxy> &, struct std::_Container_proxy *)
.text$mn:000065C8                 public ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
.text$mn:000065C8 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
.text$mn:000065C8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)+Fp
.text$mn:000065C8
.text$mn:000065C8 arg_0           = dword ptr  8
.text$mn:000065C8 arg_4           = dword ptr  0Ch
.text$mn:000065C8
.text$mn:000065C8                 push    ebp
.text$mn:000065C9                 mov     ebp, esp
.text$mn:000065CB                 mov     eax, [ebp+arg_4]
.text$mn:000065CE                 push    eax
.text$mn:000065CF                 mov     ecx, [ebp+arg_0]
.text$mn:000065D2                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000065D7                 pop     ebp
.text$mn:000065D8                 retn
.text$mn:000065D8 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z endp
.text$mn:000065D8
.text$mn:000065D8 ; ---------------------------------------------------------------------------
.text$mn:000065D9                 align 4
.text$mn:000065D9 _text$mn        ends
.text$mn:000065D9
.text$mn:000065DC ; ===========================================================================
.text$mn:000065DC
.text$mn:000065DC ; Segment type: Pure code
.text$mn:000065DC ; Segment permissions: Read/Execute
.text$mn:000065DC _text$mn        segment para public 'CODE' use32
.text$mn:000065DC                 assume cs:_text$mn
.text$mn:000065DC                 ;org 65DCh
.text$mn:000065DC ; COMDAT (pick any)
.text$mn:000065DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065DC
.text$mn:000065DC ; =============== S U B R O U T I N E =======================================
.text$mn:000065DC
.text$mn:000065DC ; Attributes: bp-based frame
.text$mn:000065DC
.text$mn:000065DC ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct foundInfo>>::destroy<struct foundInfo>(struct foundInfo *)
.text$mn:000065DC                 public ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z
.text$mn:000065DC ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z proc near
.text$mn:000065DC                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:000065DC                                         ; __catch$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:000065DC
.text$mn:000065DC var_4           = dword ptr -4
.text$mn:000065DC arg_0           = dword ptr  8
.text$mn:000065DC
.text$mn:000065DC                 push    ebp
.text$mn:000065DD                 mov     ebp, esp
.text$mn:000065DF                 push    ecx
.text$mn:000065E0                 mov     [ebp+var_4], ecx
.text$mn:000065E3                 mov     eax, [ebp+arg_0]
.text$mn:000065E6                 push    eax
.text$mn:000065E7                 mov     ecx, [ebp+var_4]
.text$mn:000065EA                 push    ecx
.text$mn:000065EB                 call    ??$destroy@UfoundInfo@@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@@Z ; std::allocator_traits<std::allocator<foundInfo>>::destroy<foundInfo>(std::allocator<foundInfo> &,foundInfo *)
.text$mn:000065F0                 add     esp, 8
.text$mn:000065F3                 mov     esp, ebp
.text$mn:000065F5                 pop     ebp
.text$mn:000065F6                 retn    4
.text$mn:000065F6 ??$destroy@UfoundInfo@@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@@Z endp
.text$mn:000065F6
.text$mn:000065F6 ; ---------------------------------------------------------------------------
.text$mn:000065F9                 align 4
.text$mn:000065F9 _text$mn        ends
.text$mn:000065F9
.text$mn:000065FC ; ===========================================================================
.text$mn:000065FC
.text$mn:000065FC ; Segment type: Pure code
.text$mn:000065FC ; Segment permissions: Read/Execute
.text$mn:000065FC _text$mn        segment para public 'CODE' use32
.text$mn:000065FC                 assume cs:_text$mn
.text$mn:000065FC                 ;org 65FCh
.text$mn:000065FC ; COMDAT (pick any)
.text$mn:000065FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065FC
.text$mn:000065FC ; =============== S U B R O U T I N E =======================================
.text$mn:000065FC
.text$mn:000065FC ; Attributes: bp-based frame
.text$mn:000065FC
.text$mn:000065FC ; public: void __thiscall std::allocator<struct foundInfo>::destroy<struct foundInfo>(struct foundInfo *)
.text$mn:000065FC                 public ??$destroy@UfoundInfo@@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@@Z
.text$mn:000065FC ??$destroy@UfoundInfo@@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@@Z proc near
.text$mn:000065FC                                         ; CODE XREF: std::allocator_traits<std::allocator<foundInfo>>::destroy<foundInfo>(std::allocator<foundInfo> &,foundInfo *)+Ap
.text$mn:000065FC
.text$mn:000065FC var_4           = dword ptr -4
.text$mn:000065FC arg_0           = dword ptr  8
.text$mn:000065FC
.text$mn:000065FC                 push    ebp
.text$mn:000065FD                 mov     ebp, esp
.text$mn:000065FF                 push    ecx
.text$mn:00006600                 mov     [ebp+var_4], ecx
.text$mn:00006603                 push    0
.text$mn:00006605                 mov     ecx, [ebp+arg_0]
.text$mn:00006608                 call    ??_GfoundInfo@@QAEPAXI@Z ; foundInfo::`scalar deleting destructor'(uint)
.text$mn:0000660D                 mov     esp, ebp
.text$mn:0000660F                 pop     ebp
.text$mn:00006610                 retn    4
.text$mn:00006610 ??$destroy@UfoundInfo@@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@@Z endp
.text$mn:00006610
.text$mn:00006610 ; ---------------------------------------------------------------------------
.text$mn:00006613                 align 4
.text$mn:00006613 _text$mn        ends
.text$mn:00006613
.text$mn:00006614 ; ===========================================================================
.text$mn:00006614
.text$mn:00006614 ; Segment type: Pure code
.text$mn:00006614 ; Segment permissions: Read/Execute
.text$mn:00006614 _text$mn        segment para public 'CODE' use32
.text$mn:00006614                 assume cs:_text$mn
.text$mn:00006614                 ;org 6614h
.text$mn:00006614 ; COMDAT (pick any)
.text$mn:00006614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006614
.text$mn:00006614 ; =============== S U B R O U T I N E =======================================
.text$mn:00006614
.text$mn:00006614 ; Attributes: bp-based frame
.text$mn:00006614
.text$mn:00006614 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct foundInfo>>::destroy<struct foundInfo>(class std::allocator<struct foundInfo> &, struct foundInfo *)
.text$mn:00006614                 public ??$destroy@UfoundInfo@@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@@Z
.text$mn:00006614 ??$destroy@UfoundInfo@@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@@Z proc near
.text$mn:00006614                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::destroy<foundInfo>(foundInfo *)+Fp
.text$mn:00006614
.text$mn:00006614 arg_0           = dword ptr  8
.text$mn:00006614 arg_4           = dword ptr  0Ch
.text$mn:00006614
.text$mn:00006614                 push    ebp
.text$mn:00006615                 mov     ebp, esp
.text$mn:00006617                 mov     eax, [ebp+arg_4]
.text$mn:0000661A                 push    eax
.text$mn:0000661B                 mov     ecx, [ebp+arg_0]
.text$mn:0000661E                 call    ??$destroy@UfoundInfo@@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@@Z ; std::allocator<foundInfo>::destroy<foundInfo>(foundInfo *)
.text$mn:00006623                 pop     ebp
.text$mn:00006624                 retn
.text$mn:00006624 ??$destroy@UfoundInfo@@@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAXAAV?$allocator@UfoundInfo@@@1@PAUfoundInfo@@@Z endp
.text$mn:00006624
.text$mn:00006624 ; ---------------------------------------------------------------------------
.text$mn:00006625                 align 4
.text$mn:00006625 _text$mn        ends
.text$mn:00006625
.text$mn:00006628 ; ===========================================================================
.text$mn:00006628
.text$mn:00006628 ; Segment type: Pure code
.text$mn:00006628 ; Segment permissions: Read/Execute
.text$mn:00006628 _text$mn        segment para public 'CODE' use32
.text$mn:00006628                 assume cs:_text$mn
.text$mn:00006628                 ;org 6628h
.text$mn:00006628 ; COMDAT (pick any)
.text$mn:00006628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006628
.text$mn:00006628 ; =============== S U B R O U T I N E =======================================
.text$mn:00006628
.text$mn:00006628 ; Attributes: bp-based frame
.text$mn:00006628
.text$mn:00006628 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006628                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00006628 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00006628                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00006628                                         ; __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap ...
.text$mn:00006628
.text$mn:00006628 var_4           = dword ptr -4
.text$mn:00006628 arg_0           = dword ptr  8
.text$mn:00006628
.text$mn:00006628                 push    ebp
.text$mn:00006629                 mov     ebp, esp
.text$mn:0000662B                 push    ecx
.text$mn:0000662C                 mov     [ebp+var_4], ecx
.text$mn:0000662F                 mov     eax, [ebp+arg_0]
.text$mn:00006632                 push    eax
.text$mn:00006633                 mov     ecx, [ebp+var_4]
.text$mn:00006636                 push    ecx
.text$mn:00006637                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000663C                 add     esp, 8
.text$mn:0000663F                 mov     esp, ebp
.text$mn:00006641                 pop     ebp
.text$mn:00006642                 retn    4
.text$mn:00006642 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:00006642
.text$mn:00006642 ; ---------------------------------------------------------------------------
.text$mn:00006645                 align 4
.text$mn:00006645 _text$mn        ends
.text$mn:00006645
.text$mn:00006648 ; ===========================================================================
.text$mn:00006648
.text$mn:00006648 ; Segment type: Pure code
.text$mn:00006648 ; Segment permissions: Read/Execute
.text$mn:00006648 _text$mn        segment para public 'CODE' use32
.text$mn:00006648                 assume cs:_text$mn
.text$mn:00006648                 ;org 6648h
.text$mn:00006648 ; COMDAT (pick any)
.text$mn:00006648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006648
.text$mn:00006648 ; =============== S U B R O U T I N E =======================================
.text$mn:00006648
.text$mn:00006648 ; Attributes: bp-based frame
.text$mn:00006648
.text$mn:00006648 ; public: void __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006648                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00006648 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00006648                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Ap
.text$mn:00006648
.text$mn:00006648 var_4           = dword ptr -4
.text$mn:00006648 arg_0           = dword ptr  8
.text$mn:00006648
.text$mn:00006648                 push    ebp
.text$mn:00006649                 mov     ebp, esp
.text$mn:0000664B                 push    ecx
.text$mn:0000664C                 mov     [ebp+var_4], ecx
.text$mn:0000664F                 push    0
.text$mn:00006651                 mov     ecx, [ebp+arg_0]
.text$mn:00006654                 call    ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)
.text$mn:00006659                 mov     esp, ebp
.text$mn:0000665B                 pop     ebp
.text$mn:0000665C                 retn    4
.text$mn:0000665C ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:0000665C
.text$mn:0000665C ; ---------------------------------------------------------------------------
.text$mn:0000665F                 align 10h
.text$mn:0000665F _text$mn        ends
.text$mn:0000665F
.text$mn:00006660 ; ===========================================================================
.text$mn:00006660
.text$mn:00006660 ; Segment type: Pure code
.text$mn:00006660 ; Segment permissions: Read/Execute
.text$mn:00006660 _text$mn        segment para public 'CODE' use32
.text$mn:00006660                 assume cs:_text$mn
.text$mn:00006660                 ;org 6660h
.text$mn:00006660 ; COMDAT (pick any)
.text$mn:00006660                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006660
.text$mn:00006660 ; =============== S U B R O U T I N E =======================================
.text$mn:00006660
.text$mn:00006660 ; Attributes: bp-based frame
.text$mn:00006660
.text$mn:00006660 ; public: static void __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006660                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:00006660 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:00006660                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fp
.text$mn:00006660
.text$mn:00006660 arg_0           = dword ptr  8
.text$mn:00006660 arg_4           = dword ptr  0Ch
.text$mn:00006660
.text$mn:00006660                 push    ebp
.text$mn:00006661                 mov     ebp, esp
.text$mn:00006663                 mov     eax, [ebp+arg_4]
.text$mn:00006666                 push    eax
.text$mn:00006667                 mov     ecx, [ebp+arg_0]
.text$mn:0000666A                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000666F                 pop     ebp
.text$mn:00006670                 retn
.text$mn:00006670 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:00006670
.text$mn:00006670 ; ---------------------------------------------------------------------------
.text$mn:00006671                 align 4
.text$mn:00006671 _text$mn        ends
.text$mn:00006671
.text$mn:00006674 ; ===========================================================================
.text$mn:00006674
.text$mn:00006674 ; Segment type: Pure code
.text$mn:00006674 ; Segment permissions: Read/Execute
.text$mn:00006674 _text$mn        segment para public 'CODE' use32
.text$mn:00006674                 assume cs:_text$mn
.text$mn:00006674                 ;org 6674h
.text$mn:00006674 ; COMDAT (pick any)
.text$mn:00006674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006674
.text$mn:00006674 ; =============== S U B R O U T I N E =======================================
.text$mn:00006674
.text$mn:00006674 ; Attributes: bp-based frame
.text$mn:00006674
.text$mn:00006674 ; int & __cdecl std::forward<int &>(int &)
.text$mn:00006674                 public ??$forward@AAH@std@@YAAAHAAH@Z
.text$mn:00006674 ??$forward@AAH@std@@YAAAHAAH@Z proc near
.text$mn:00006674                                         ; CODE XREF: std::pair<int,int>::pair<int,int>(int &,int &)+Bp
.text$mn:00006674                                         ; std::pair<int,int>::pair<int,int>(int &,int &)+1Ep ...
.text$mn:00006674
.text$mn:00006674 arg_0           = dword ptr  8
.text$mn:00006674
.text$mn:00006674                 push    ebp
.text$mn:00006675                 mov     ebp, esp
.text$mn:00006677                 mov     eax, [ebp+arg_0]
.text$mn:0000667A                 pop     ebp
.text$mn:0000667B                 retn
.text$mn:0000667B ??$forward@AAH@std@@YAAAHAAH@Z endp
.text$mn:0000667B
.text$mn:0000667B _text$mn        ends
.text$mn:0000667B
.text$mn:0000667C ; ===========================================================================
.text$mn:0000667C
.text$mn:0000667C ; Segment type: Pure code
.text$mn:0000667C ; Segment permissions: Read/Execute
.text$mn:0000667C _text$mn        segment para public 'CODE' use32
.text$mn:0000667C                 assume cs:_text$mn
.text$mn:0000667C                 ;org 667Ch
.text$mn:0000667C ; COMDAT (pick any)
.text$mn:0000667C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000667C
.text$mn:0000667C ; =============== S U B R O U T I N E =======================================
.text$mn:0000667C
.text$mn:0000667C ; Attributes: bp-based frame
.text$mn:0000667C
.text$mn:0000667C ; unsigned int & __cdecl std::forward<unsigned int &>(unsigned int &)
.text$mn:0000667C                 public ??$forward@AAI@std@@YAAAIAAI@Z
.text$mn:0000667C ??$forward@AAI@std@@YAAAIAAI@Z proc near
.text$mn:0000667C                                         ; CODE XREF: std::pair<int,int>::pair<int,int>(int &,uint &)+1Ep
.text$mn:0000667C                                         ; std::pair<int,int>::pair<int,int>(uint &,uint &)+Bp ...
.text$mn:0000667C
.text$mn:0000667C arg_0           = dword ptr  8
.text$mn:0000667C
.text$mn:0000667C                 push    ebp
.text$mn:0000667D                 mov     ebp, esp
.text$mn:0000667F                 mov     eax, [ebp+arg_0]
.text$mn:00006682                 pop     ebp
.text$mn:00006683                 retn
.text$mn:00006683 ??$forward@AAI@std@@YAAAIAAI@Z endp
.text$mn:00006683
.text$mn:00006683 _text$mn        ends
.text$mn:00006683
.text$mn:00006684 ; ===========================================================================
.text$mn:00006684
.text$mn:00006684 ; Segment type: Pure code
.text$mn:00006684 ; Segment permissions: Read/Execute
.text$mn:00006684 _text$mn        segment para public 'CODE' use32
.text$mn:00006684                 assume cs:_text$mn
.text$mn:00006684                 ;org 6684h
.text$mn:00006684 ; COMDAT (pick any)
.text$mn:00006684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006684
.text$mn:00006684 ; =============== S U B R O U T I N E =======================================
.text$mn:00006684
.text$mn:00006684 ; Attributes: bp-based frame
.text$mn:00006684
.text$mn:00006684 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00006684                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00006684 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00006684                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00006684                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00006684
.text$mn:00006684 arg_0           = dword ptr  8
.text$mn:00006684
.text$mn:00006684                 push    ebp
.text$mn:00006685                 mov     ebp, esp
.text$mn:00006687                 mov     eax, [ebp+arg_0]
.text$mn:0000668A                 pop     ebp
.text$mn:0000668B                 retn
.text$mn:0000668B ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:0000668B
.text$mn:0000668B _text$mn        ends
.text$mn:0000668B
.text$mn:0000668C ; ===========================================================================
.text$mn:0000668C
.text$mn:0000668C ; Segment type: Pure code
.text$mn:0000668C ; Segment permissions: Read/Execute
.text$mn:0000668C _text$mn        segment para public 'CODE' use32
.text$mn:0000668C                 assume cs:_text$mn
.text$mn:0000668C                 ;org 668Ch
.text$mn:0000668C ; COMDAT (pick any)
.text$mn:0000668C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000668C
.text$mn:0000668C ; =============== S U B R O U T I N E =======================================
.text$mn:0000668C
.text$mn:0000668C ; Attributes: bp-based frame
.text$mn:0000668C
.text$mn:0000668C ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:0000668C                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:0000668C ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:0000668C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:0000668C                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:0000668C
.text$mn:0000668C arg_0           = dword ptr  8
.text$mn:0000668C
.text$mn:0000668C                 push    ebp
.text$mn:0000668D                 mov     ebp, esp
.text$mn:0000668F                 mov     eax, [ebp+arg_0]
.text$mn:00006692                 pop     ebp
.text$mn:00006693                 retn
.text$mn:00006693 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:00006693
.text$mn:00006693 _text$mn        ends
.text$mn:00006693
.text$mn:00006694 ; ===========================================================================
.text$mn:00006694
.text$mn:00006694 ; Segment type: Pure code
.text$mn:00006694 ; Segment permissions: Read/Execute
.text$mn:00006694 _text$mn        segment para public 'CODE' use32
.text$mn:00006694                 assume cs:_text$mn
.text$mn:00006694                 ;org 6694h
.text$mn:00006694 ; COMDAT (pick any)
.text$mn:00006694                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006694
.text$mn:00006694 ; =============== S U B R O U T I N E =======================================
.text$mn:00006694
.text$mn:00006694 ; Attributes: bp-based frame
.text$mn:00006694
.text$mn:00006694 ; struct foundInfo & __cdecl std::forward<struct foundInfo &>(struct foundInfo &)
.text$mn:00006694                 public ??$forward@AAUfoundInfo@@@std@@YAAAUfoundInfo@@AAU1@@Z
.text$mn:00006694 ??$forward@AAUfoundInfo@@@std@@YAAAUfoundInfo@@AAU1@@Z proc near
.text$mn:00006694                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)+Bp
.text$mn:00006694                                         ; std::allocator<foundInfo>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)+4Ap ...
.text$mn:00006694
.text$mn:00006694 arg_0           = dword ptr  8
.text$mn:00006694
.text$mn:00006694                 push    ebp
.text$mn:00006695                 mov     ebp, esp
.text$mn:00006697                 mov     eax, [ebp+arg_0]
.text$mn:0000669A                 pop     ebp
.text$mn:0000669B                 retn
.text$mn:0000669B ??$forward@AAUfoundInfo@@@std@@YAAAUfoundInfo@@AAU1@@Z endp
.text$mn:0000669B
.text$mn:0000669B _text$mn        ends
.text$mn:0000669B
.text$mn:0000669C ; ===========================================================================
.text$mn:0000669C
.text$mn:0000669C ; Segment type: Pure code
.text$mn:0000669C ; Segment permissions: Read/Execute
.text$mn:0000669C _text$mn        segment para public 'CODE' use32
.text$mn:0000669C                 assume cs:_text$mn
.text$mn:0000669C                 ;org 669Ch
.text$mn:0000669C ; COMDAT (pick any)
.text$mn:0000669C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000669C
.text$mn:0000669C ; =============== S U B R O U T I N E =======================================
.text$mn:0000669C
.text$mn:0000669C ; Attributes: bp-based frame
.text$mn:0000669C
.text$mn:0000669C ; struct foundInfo const & __cdecl std::forward<struct foundInfo const &>(struct foundInfo const &)
.text$mn:0000669C                 public ??$forward@ABUfoundInfo@@@std@@YAABUfoundInfo@@ABU1@@Z
.text$mn:0000669C ??$forward@ABUfoundInfo@@@std@@YAABUfoundInfo@@ABU1@@Z proc near
.text$mn:0000669C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo const &>(foundInfo *,foundInfo const &)+Bp
.text$mn:0000669C                                         ; std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo const &>(std::allocator<foundInfo> &,foundInfo *,foundInfo const &)+7p
.text$mn:0000669C
.text$mn:0000669C arg_0           = dword ptr  8
.text$mn:0000669C
.text$mn:0000669C                 push    ebp
.text$mn:0000669D                 mov     ebp, esp
.text$mn:0000669F                 mov     eax, [ebp+arg_0]
.text$mn:000066A2                 pop     ebp
.text$mn:000066A3                 retn
.text$mn:000066A3 ??$forward@ABUfoundInfo@@@std@@YAABUfoundInfo@@ABU1@@Z endp
.text$mn:000066A3
.text$mn:000066A3 _text$mn        ends
.text$mn:000066A3
.text$mn:000066A4 ; ===========================================================================
.text$mn:000066A4
.text$mn:000066A4 ; Segment type: Pure code
.text$mn:000066A4 ; Segment permissions: Read/Execute
.text$mn:000066A4 _text$mn        segment para public 'CODE' use32
.text$mn:000066A4                 assume cs:_text$mn
.text$mn:000066A4                 ;org 66A4h
.text$mn:000066A4 ; COMDAT (pick any)
.text$mn:000066A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066A4
.text$mn:000066A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066A4
.text$mn:000066A4 ; Attributes: bp-based frame
.text$mn:000066A4
.text$mn:000066A4 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const & __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000066A4                 public ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z
.text$mn:000066A4 ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z proc near
.text$mn:000066A4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:000066A4                                         ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+7p
.text$mn:000066A4
.text$mn:000066A4 arg_0           = dword ptr  8
.text$mn:000066A4
.text$mn:000066A4                 push    ebp
.text$mn:000066A5                 mov     ebp, esp
.text$mn:000066A7                 mov     eax, [ebp+arg_0]
.text$mn:000066AA                 pop     ebp
.text$mn:000066AB                 retn
.text$mn:000066AB ??$forward@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z endp
.text$mn:000066AB
.text$mn:000066AB _text$mn        ends
.text$mn:000066AB
.text$mn:000066AC ; ===========================================================================
.text$mn:000066AC
.text$mn:000066AC ; Segment type: Pure code
.text$mn:000066AC ; Segment permissions: Read/Execute
.text$mn:000066AC _text$mn        segment para public 'CODE' use32
.text$mn:000066AC                 assume cs:_text$mn
.text$mn:000066AC                 ;org 66ACh
.text$mn:000066AC ; COMDAT (pick any)
.text$mn:000066AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066AC
.text$mn:000066AC ; =============== S U B R O U T I N E =======================================
.text$mn:000066AC
.text$mn:000066AC ; Attributes: bp-based frame
.text$mn:000066AC
.text$mn:000066AC ; int && __cdecl std::forward<int>(int &)
.text$mn:000066AC                 public ??$forward@H@std@@YA$$QAHAAH@Z
.text$mn:000066AC ??$forward@H@std@@YA$$QAHAAH@Z proc near
.text$mn:000066AC                                         ; CODE XREF: std::pair<int,int>::pair<int,int>(uint &,int &&)+1Ep
.text$mn:000066AC                                         ; std::pair<int,int>::pair<int,int>(std::pair<int,int> &&)+Bp ...
.text$mn:000066AC
.text$mn:000066AC arg_0           = dword ptr  8
.text$mn:000066AC
.text$mn:000066AC                 push    ebp
.text$mn:000066AD                 mov     ebp, esp
.text$mn:000066AF                 mov     eax, [ebp+arg_0]
.text$mn:000066B2                 pop     ebp
.text$mn:000066B3                 retn
.text$mn:000066B3 ??$forward@H@std@@YA$$QAHAAH@Z endp
.text$mn:000066B3
.text$mn:000066B3 _text$mn        ends
.text$mn:000066B3
.text$mn:000066B4 ; ===========================================================================
.text$mn:000066B4
.text$mn:000066B4 ; Segment type: Pure code
.text$mn:000066B4 ; Segment permissions: Read/Execute
.text$mn:000066B4 _text$mn        segment para public 'CODE' use32
.text$mn:000066B4                 assume cs:_text$mn
.text$mn:000066B4                 ;org 66B4h
.text$mn:000066B4 ; COMDAT (pick any)
.text$mn:000066B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066B4
.text$mn:000066B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066B4
.text$mn:000066B4 ; Attributes: bp-based frame
.text$mn:000066B4
.text$mn:000066B4 ; class FunctionParser * && __cdecl std::forward<class FunctionParser *>(class FunctionParser * &)
.text$mn:000066B4                 public ??$forward@PAVFunctionParser@@@std@@YA$$QAPAVFunctionParser@@AAPAV1@@Z
.text$mn:000066B4 ??$forward@PAVFunctionParser@@@std@@YA$$QAPAVFunctionParser@@AAPAV1@@Z proc near
.text$mn:000066B4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<FunctionParser *>>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)+Bp
.text$mn:000066B4                                         ; std::allocator<FunctionParser *>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)+4Ap ...
.text$mn:000066B4
.text$mn:000066B4 arg_0           = dword ptr  8
.text$mn:000066B4
.text$mn:000066B4                 push    ebp
.text$mn:000066B5                 mov     ebp, esp
.text$mn:000066B7                 mov     eax, [ebp+arg_0]
.text$mn:000066BA                 pop     ebp
.text$mn:000066BB                 retn
.text$mn:000066BB ??$forward@PAVFunctionParser@@@std@@YA$$QAPAVFunctionParser@@AAPAV1@@Z endp
.text$mn:000066BB
.text$mn:000066BB _text$mn        ends
.text$mn:000066BB
.text$mn:000066BC ; ===========================================================================
.text$mn:000066BC
.text$mn:000066BC ; Segment type: Pure code
.text$mn:000066BC ; Segment permissions: Read/Execute
.text$mn:000066BC _text$mn        segment para public 'CODE' use32
.text$mn:000066BC                 assume cs:_text$mn
.text$mn:000066BC                 ;org 66BCh
.text$mn:000066BC ; COMDAT (pick any)
.text$mn:000066BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066BC
.text$mn:000066BC ; =============== S U B R O U T I N E =======================================
.text$mn:000066BC
.text$mn:000066BC ; Attributes: bp-based frame
.text$mn:000066BC
.text$mn:000066BC ; struct std::pair<int, int> && __cdecl std::forward<struct std::pair<int, int>>(struct std::pair<int, int> &)
.text$mn:000066BC                 public ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z
.text$mn:000066BC ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z proc near
.text$mn:000066BC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)+Bp
.text$mn:000066BC                                         ; std::allocator<std::pair<int,int>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)+4Ap ...
.text$mn:000066BC
.text$mn:000066BC arg_0           = dword ptr  8
.text$mn:000066BC
.text$mn:000066BC                 push    ebp
.text$mn:000066BD                 mov     ebp, esp
.text$mn:000066BF                 mov     eax, [ebp+arg_0]
.text$mn:000066C2                 pop     ebp
.text$mn:000066C3                 retn
.text$mn:000066C3 ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z endp
.text$mn:000066C3
.text$mn:000066C3 _text$mn        ends
.text$mn:000066C3
.text$mn:000066C4 ; ===========================================================================
.text$mn:000066C4
.text$mn:000066C4 ; Segment type: Pure code
.text$mn:000066C4 ; Segment permissions: Read/Execute
.text$mn:000066C4 _text$mn        segment para public 'CODE' use32
.text$mn:000066C4                 assume cs:_text$mn
.text$mn:000066C4                 ;org 66C4h
.text$mn:000066C4 ; COMDAT (pick any)
.text$mn:000066C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066C4
.text$mn:000066C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066C4
.text$mn:000066C4 ; Attributes: bp-based frame
.text$mn:000066C4
.text$mn:000066C4 ; struct AssociationInfo && __cdecl std::forward<struct AssociationInfo>(struct AssociationInfo &)
.text$mn:000066C4                 public ??$forward@UAssociationInfo@@@std@@YA$$QAUAssociationInfo@@AAU1@@Z
.text$mn:000066C4 ??$forward@UAssociationInfo@@@std@@YA$$QAUAssociationInfo@@AAU1@@Z proc near
.text$mn:000066C4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)+Bp
.text$mn:000066C4                                         ; std::allocator<AssociationInfo>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)+4Ap ...
.text$mn:000066C4
.text$mn:000066C4 arg_0           = dword ptr  8
.text$mn:000066C4
.text$mn:000066C4                 push    ebp
.text$mn:000066C5                 mov     ebp, esp
.text$mn:000066C7                 mov     eax, [ebp+arg_0]
.text$mn:000066CA                 pop     ebp
.text$mn:000066CB                 retn
.text$mn:000066CB ??$forward@UAssociationInfo@@@std@@YA$$QAUAssociationInfo@@AAU1@@Z endp
.text$mn:000066CB
.text$mn:000066CB _text$mn        ends
.text$mn:000066CB
.text$mn:000066CC ; ===========================================================================
.text$mn:000066CC
.text$mn:000066CC ; Segment type: Pure code
.text$mn:000066CC ; Segment permissions: Read/Execute
.text$mn:000066CC _text$mn        segment para public 'CODE' use32
.text$mn:000066CC                 assume cs:_text$mn
.text$mn:000066CC                 ;org 66CCh
.text$mn:000066CC ; COMDAT (pick any)
.text$mn:000066CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066CC
.text$mn:000066CC ; =============== S U B R O U T I N E =======================================
.text$mn:000066CC
.text$mn:000066CC ; Attributes: bp-based frame
.text$mn:000066CC
.text$mn:000066CC ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:000066CC                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:000066CC ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:000066CC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+Bp
.text$mn:000066CC                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap ...
.text$mn:000066CC
.text$mn:000066CC arg_0           = dword ptr  8
.text$mn:000066CC
.text$mn:000066CC                 push    ebp
.text$mn:000066CD                 mov     ebp, esp
.text$mn:000066CF                 mov     eax, [ebp+arg_0]
.text$mn:000066D2                 pop     ebp
.text$mn:000066D3                 retn
.text$mn:000066D3 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:000066D3
.text$mn:000066D3 _text$mn        ends
.text$mn:000066D3
.text$mn:000066D4 ; ===========================================================================
.text$mn:000066D4
.text$mn:000066D4 ; Segment type: Pure code
.text$mn:000066D4 ; Segment permissions: Read/Execute
.text$mn:000066D4 _text$mn        segment para public 'CODE' use32
.text$mn:000066D4                 assume cs:_text$mn
.text$mn:000066D4                 ;org 66D4h
.text$mn:000066D4 ; COMDAT (pick any)
.text$mn:000066D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066D4
.text$mn:000066D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066D4
.text$mn:000066D4 ; Attributes: bp-based frame
.text$mn:000066D4
.text$mn:000066D4 ; struct foundInfo && __cdecl std::forward<struct foundInfo>(struct foundInfo &)
.text$mn:000066D4                 public ??$forward@UfoundInfo@@@std@@YA$$QAUfoundInfo@@AAU1@@Z
.text$mn:000066D4 ??$forward@UfoundInfo@@@std@@YA$$QAUfoundInfo@@AAU1@@Z proc near
.text$mn:000066D4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)+Bp
.text$mn:000066D4                                         ; std::allocator<foundInfo>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)+4Ap ...
.text$mn:000066D4
.text$mn:000066D4 arg_0           = dword ptr  8
.text$mn:000066D4
.text$mn:000066D4                 push    ebp
.text$mn:000066D5                 mov     ebp, esp
.text$mn:000066D7                 mov     eax, [ebp+arg_0]
.text$mn:000066DA                 pop     ebp
.text$mn:000066DB                 retn
.text$mn:000066DB ??$forward@UfoundInfo@@@std@@YA$$QAUfoundInfo@@AAU1@@Z endp
.text$mn:000066DB
.text$mn:000066DB _text$mn        ends
.text$mn:000066DB
.text$mn:000066DC ; ===========================================================================
.text$mn:000066DC
.text$mn:000066DC ; Segment type: Pure code
.text$mn:000066DC ; Segment permissions: Read/Execute
.text$mn:000066DC _text$mn        segment para public 'CODE' use32
.text$mn:000066DC                 assume cs:_text$mn
.text$mn:000066DC                 ;org 66DCh
.text$mn:000066DC ; COMDAT (pick any)
.text$mn:000066DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066DC
.text$mn:000066DC ; =============== S U B R O U T I N E =======================================
.text$mn:000066DC
.text$mn:000066DC ; Attributes: bp-based frame
.text$mn:000066DC
.text$mn:000066DC ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:000066DC                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:000066DC ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:000066DC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Bp
.text$mn:000066DC                                         ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Ap ...
.text$mn:000066DC
.text$mn:000066DC arg_0           = dword ptr  8
.text$mn:000066DC
.text$mn:000066DC                 push    ebp
.text$mn:000066DD                 mov     ebp, esp
.text$mn:000066DF                 mov     eax, [ebp+arg_0]
.text$mn:000066E2                 pop     ebp
.text$mn:000066E3                 retn
.text$mn:000066E3 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:000066E3
.text$mn:000066E3 _text$mn        ends
.text$mn:000066E3
.text$mn:000066E4 ; ===========================================================================
.text$mn:000066E4
.text$mn:000066E4 ; Segment type: Pure code
.text$mn:000066E4 ; Segment permissions: Read/Execute
.text$mn:000066E4 _text$mn        segment para public 'CODE' use32
.text$mn:000066E4                 assume cs:_text$mn
.text$mn:000066E4                 ;org 66E4h
.text$mn:000066E4 ; COMDAT (pick any)
.text$mn:000066E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066E4
.text$mn:000066E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000066E4
.text$mn:000066E4 ; Attributes: bp-based frame
.text$mn:000066E4
.text$mn:000066E4 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:000066E4                 public ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:000066E4 ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:000066E4                                         ; CODE XREF: std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+23p
.text$mn:000066E4
.text$mn:000066E4 arg_0           = dword ptr  8
.text$mn:000066E4
.text$mn:000066E4                 push    ebp
.text$mn:000066E5                 mov     ebp, esp
.text$mn:000066E7                 mov     eax, [ebp+arg_0]
.text$mn:000066EA                 pop     ebp
.text$mn:000066EB                 retn
.text$mn:000066EB ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:000066EB
.text$mn:000066EB _text$mn        ends
.text$mn:000066EB
.text$mn:000066EC ; ===========================================================================
.text$mn:000066EC
.text$mn:000066EC ; Segment type: Pure code
.text$mn:000066EC ; Segment permissions: Read/Execute
.text$mn:000066EC _text$mn        segment para public 'CODE' use32
.text$mn:000066EC                 assume cs:_text$mn
.text$mn:000066EC                 ;org 66ECh
.text$mn:000066EC ; COMDAT (pick any)
.text$mn:000066EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066EC
.text$mn:000066EC ; =============== S U B R O U T I N E =======================================
.text$mn:000066EC
.text$mn:000066EC ; Attributes: bp-based frame
.text$mn:000066EC
.text$mn:000066EC ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:000066EC                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:000066EC ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:000066EC                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+2Dp
.text$mn:000066EC
.text$mn:000066EC var_10          = dword ptr -10h
.text$mn:000066EC var_C           = dword ptr -0Ch
.text$mn:000066EC var_4           = dword ptr -4
.text$mn:000066EC arg_0           = dword ptr  8
.text$mn:000066EC
.text$mn:000066EC                 push    ebp
.text$mn:000066ED                 mov     ebp, esp
.text$mn:000066EF                 push    0FFFFFFFFh
.text$mn:000066F1                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:000066F6                 mov     eax, large fs:0
.text$mn:000066FC                 push    eax
.text$mn:000066FD                 push    ecx
.text$mn:000066FE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006703                 xor     eax, ebp
.text$mn:00006705                 push    eax
.text$mn:00006706                 lea     eax, [ebp+var_C]
.text$mn:00006709                 mov     large fs:0, eax
.text$mn:0000670F                 mov     [ebp+var_10], ecx
.text$mn:00006712                 mov     eax, [ebp+arg_0]
.text$mn:00006715                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00006716                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006719                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:0000671E                 mov     [ebp+var_4], 0
.text$mn:00006725                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000672C                 mov     eax, [ebp+var_10]
.text$mn:0000672F                 mov     ecx, [ebp+var_C]
.text$mn:00006732                 mov     large fs:0, ecx
.text$mn:00006739                 pop     ecx
.text$mn:0000673A                 mov     esp, ebp
.text$mn:0000673C                 pop     ebp
.text$mn:0000673D                 retn    4
.text$mn:0000673D ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:0000673D
.text$mn:0000673D _text$mn        ends
.text$mn:0000673D
.text$x:00006740 ; ===========================================================================
.text$x:00006740
.text$x:00006740 ; Segment type: Pure code
.text$x:00006740 ; Segment permissions: Read/Execute
.text$x:00006740 _text$x         segment para public 'CODE' use32
.text$x:00006740                 assume cs:_text$x
.text$x:00006740                 ;org 6740h
.text$x:00006740 ; COMDAT (pick associative to section at 66EC)
.text$x:00006740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006740
.text$x:00006740 ; =============== S U B R O U T I N E =======================================
.text$x:00006740
.text$x:00006740
.text$x:00006740 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:00006740                                         ; DATA XREF: .xdata$x:0001049Co
.text$x:00006740                 mov     ecx, [ebp-10h]  ; this
.text$x:00006743                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00006743 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:00006743
.text$x:00006748
.text$x:00006748 ; =============== S U B R O U T I N E =======================================
.text$x:00006748
.text$x:00006748
.text$x:00006748 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:00006748                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)+5o
.text$x:00006748
.text$x:00006748 arg_4           = dword ptr  8
.text$x:00006748
.text$x:00006748                 mov     edx, [esp+arg_4]
.text$x:0000674C                 lea     eax, [edx+0Ch]
.text$x:0000674F                 mov     ecx, [edx-8]
.text$x:00006752                 xor     ecx, eax
.text$x:00006754                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006759                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:0000675E                 jmp     ___CxxFrameHandler3
.text$x:0000675E __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:0000675E
.text$x:0000675E ; ---------------------------------------------------------------------------
.text$x:00006763                 align 4
.text$x:00006763 _text$x         ends
.text$x:00006763
.text$mn:00006764 ; ===========================================================================
.text$mn:00006764
.text$mn:00006764 ; Segment type: Pure code
.text$mn:00006764 ; Segment permissions: Read/Execute
.text$mn:00006764 _text$mn        segment para public 'CODE' use32
.text$mn:00006764                 assume cs:_text$mn
.text$mn:00006764                 ;org 6764h
.text$mn:00006764 ; COMDAT (pick any)
.text$mn:00006764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006764
.text$mn:00006764 ; =============== S U B R O U T I N E =======================================
.text$mn:00006764
.text$mn:00006764 ; Attributes: bp-based frame
.text$mn:00006764
.text$mn:00006764 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>(void)
.text$mn:00006764                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006764 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00006764                                         ; CODE XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+29p
.text$mn:00006764
.text$mn:00006764 var_10          = dword ptr -10h
.text$mn:00006764 var_C           = dword ptr -0Ch
.text$mn:00006764 var_4           = dword ptr -4
.text$mn:00006764
.text$mn:00006764                 push    ebp
.text$mn:00006765                 mov     ebp, esp
.text$mn:00006767                 push    0FFFFFFFFh
.text$mn:00006769                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:0000676E                 mov     eax, large fs:0
.text$mn:00006774                 push    eax
.text$mn:00006775                 push    ecx
.text$mn:00006776                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000677B                 xor     eax, ebp
.text$mn:0000677D                 push    eax
.text$mn:0000677E                 lea     eax, [ebp+var_C]
.text$mn:00006781                 mov     large fs:0, eax
.text$mn:00006787                 mov     [ebp+var_10], ecx
.text$mn:0000678A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000678D                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:00006792                 mov     [ebp+var_4], 0
.text$mn:00006799                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000067A0                 mov     eax, [ebp+var_10]
.text$mn:000067A3                 mov     ecx, [ebp+var_C]
.text$mn:000067A6                 mov     large fs:0, ecx
.text$mn:000067AD                 pop     ecx
.text$mn:000067AE                 mov     esp, ebp
.text$mn:000067B0                 pop     ebp
.text$mn:000067B1                 retn
.text$mn:000067B1 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:000067B1
.text$mn:000067B1 ; ---------------------------------------------------------------------------
.text$mn:000067B2                 align 4
.text$mn:000067B2 _text$mn        ends
.text$mn:000067B2
.text$x:000067B4 ; ===========================================================================
.text$x:000067B4
.text$x:000067B4 ; Segment type: Pure code
.text$x:000067B4 ; Segment permissions: Read/Execute
.text$x:000067B4 _text$x         segment para public 'CODE' use32
.text$x:000067B4                 assume cs:_text$x
.text$x:000067B4                 ;org 67B4h
.text$x:000067B4 ; COMDAT (pick associative to section at 6764)
.text$x:000067B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000067B4
.text$x:000067B4 ; =============== S U B R O U T I N E =======================================
.text$x:000067B4
.text$x:000067B4
.text$x:000067B4 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:000067B4                                         ; DATA XREF: .xdata$x:00010444o
.text$x:000067B4                 mov     ecx, [ebp-10h]  ; this
.text$x:000067B7                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000067B7 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:000067B7
.text$x:000067BC
.text$x:000067BC ; =============== S U B R O U T I N E =======================================
.text$x:000067BC
.text$x:000067BC
.text$x:000067BC __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:000067BC                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+5o
.text$x:000067BC
.text$x:000067BC arg_4           = dword ptr  8
.text$x:000067BC
.text$x:000067BC                 mov     edx, [esp+arg_4]
.text$x:000067C0                 lea     eax, [edx+0Ch]
.text$x:000067C3                 mov     ecx, [edx-8]
.text$x:000067C6                 xor     ecx, eax
.text$x:000067C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000067CD                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:000067D2                 jmp     ___CxxFrameHandler3
.text$x:000067D2 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:000067D2
.text$x:000067D2 ; ---------------------------------------------------------------------------
.text$x:000067D7                 align 4
.text$x:000067D7 _text$x         ends
.text$x:000067D7
.text$mn:000067D8 ; ===========================================================================
.text$mn:000067D8
.text$mn:000067D8 ; Segment type: Pure code
.text$mn:000067D8 ; Segment permissions: Read/Execute
.text$mn:000067D8 _text$mn        segment para public 'CODE' use32
.text$mn:000067D8                 assume cs:_text$mn
.text$mn:000067D8                 ;org 67D8h
.text$mn:000067D8 ; COMDAT (pick any)
.text$mn:000067D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067D8
.text$mn:000067D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000067D8
.text$mn:000067D8 ; Attributes: bp-based frame
.text$mn:000067D8
.text$mn:000067D8 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:000067D8                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:000067D8 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:000067D8                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Dp
.text$mn:000067D8
.text$mn:000067D8 var_10          = dword ptr -10h
.text$mn:000067D8 var_C           = dword ptr -0Ch
.text$mn:000067D8 var_4           = dword ptr -4
.text$mn:000067D8 arg_0           = dword ptr  8
.text$mn:000067D8
.text$mn:000067D8                 push    ebp
.text$mn:000067D9                 mov     ebp, esp
.text$mn:000067DB                 push    0FFFFFFFFh
.text$mn:000067DD                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:000067E2                 mov     eax, large fs:0
.text$mn:000067E8                 push    eax
.text$mn:000067E9                 push    ecx
.text$mn:000067EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067EF                 xor     eax, ebp
.text$mn:000067F1                 push    eax
.text$mn:000067F2                 lea     eax, [ebp+var_C]
.text$mn:000067F5                 mov     large fs:0, eax
.text$mn:000067FB                 mov     [ebp+var_10], ecx
.text$mn:000067FE                 mov     eax, [ebp+arg_0]
.text$mn:00006801                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00006802                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006805                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:0000680A                 mov     [ebp+var_4], 0
.text$mn:00006811                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006818                 mov     eax, [ebp+var_10]
.text$mn:0000681B                 mov     ecx, [ebp+var_C]
.text$mn:0000681E                 mov     large fs:0, ecx
.text$mn:00006825                 pop     ecx
.text$mn:00006826                 mov     esp, ebp
.text$mn:00006828                 pop     ebp
.text$mn:00006829                 retn    4
.text$mn:00006829 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00006829
.text$mn:00006829 _text$mn        ends
.text$mn:00006829
.text$x:0000682C ; ===========================================================================
.text$x:0000682C
.text$x:0000682C ; Segment type: Pure code
.text$x:0000682C ; Segment permissions: Read/Execute
.text$x:0000682C _text$x         segment para public 'CODE' use32
.text$x:0000682C                 assume cs:_text$x
.text$x:0000682C                 ;org 682Ch
.text$x:0000682C ; COMDAT (pick associative to section at 67D8)
.text$x:0000682C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000682C
.text$x:0000682C ; =============== S U B R O U T I N E =======================================
.text$x:0000682C
.text$x:0000682C
.text$x:0000682C __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:0000682C                                         ; DATA XREF: .xdata$x:00010788o
.text$x:0000682C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000682F                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000682F __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:0000682F
.text$x:00006834
.text$x:00006834 ; =============== S U B R O U T I N E =======================================
.text$x:00006834
.text$x:00006834
.text$x:00006834 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:00006834                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+5o
.text$x:00006834
.text$x:00006834 arg_4           = dword ptr  8
.text$x:00006834
.text$x:00006834                 mov     edx, [esp+arg_4]
.text$x:00006838                 lea     eax, [edx+0Ch]
.text$x:0000683B                 mov     ecx, [edx-8]
.text$x:0000683E                 xor     ecx, eax
.text$x:00006840                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006845                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:0000684A                 jmp     ___CxxFrameHandler3
.text$x:0000684A __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:0000684A
.text$x:0000684A ; ---------------------------------------------------------------------------
.text$x:0000684F                 align 10h
.text$x:0000684F _text$x         ends
.text$x:0000684F
.text$mn:00006850 ; ===========================================================================
.text$mn:00006850
.text$mn:00006850 ; Segment type: Pure code
.text$mn:00006850 ; Segment permissions: Read/Execute
.text$mn:00006850 _text$mn        segment para public 'CODE' use32
.text$mn:00006850                 assume cs:_text$mn
.text$mn:00006850                 ;org 6850h
.text$mn:00006850 ; COMDAT (pick any)
.text$mn:00006850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006850
.text$mn:00006850 ; =============== S U B R O U T I N E =======================================
.text$mn:00006850
.text$mn:00006850 ; Attributes: bp-based frame
.text$mn:00006850
.text$mn:00006850 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00006850                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006850 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00006850                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+29p
.text$mn:00006850
.text$mn:00006850 var_10          = dword ptr -10h
.text$mn:00006850 var_C           = dword ptr -0Ch
.text$mn:00006850 var_4           = dword ptr -4
.text$mn:00006850
.text$mn:00006850                 push    ebp
.text$mn:00006851                 mov     ebp, esp
.text$mn:00006853                 push    0FFFFFFFFh
.text$mn:00006855                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:0000685A                 mov     eax, large fs:0
.text$mn:00006860                 push    eax
.text$mn:00006861                 push    ecx
.text$mn:00006862                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006867                 xor     eax, ebp
.text$mn:00006869                 push    eax
.text$mn:0000686A                 lea     eax, [ebp+var_C]
.text$mn:0000686D                 mov     large fs:0, eax
.text$mn:00006873                 mov     [ebp+var_10], ecx
.text$mn:00006876                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006879                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:0000687E                 mov     [ebp+var_4], 0
.text$mn:00006885                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000688C                 mov     eax, [ebp+var_10]
.text$mn:0000688F                 mov     ecx, [ebp+var_C]
.text$mn:00006892                 mov     large fs:0, ecx
.text$mn:00006899                 pop     ecx
.text$mn:0000689A                 mov     esp, ebp
.text$mn:0000689C                 pop     ebp
.text$mn:0000689D                 retn
.text$mn:0000689D ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:0000689D
.text$mn:0000689D ; ---------------------------------------------------------------------------
.text$mn:0000689E                 align 10h
.text$mn:0000689E _text$mn        ends
.text$mn:0000689E
.text$x:000068A0 ; ===========================================================================
.text$x:000068A0
.text$x:000068A0 ; Segment type: Pure code
.text$x:000068A0 ; Segment permissions: Read/Execute
.text$x:000068A0 _text$x         segment para public 'CODE' use32
.text$x:000068A0                 assume cs:_text$x
.text$x:000068A0                 ;org 68A0h
.text$x:000068A0 ; COMDAT (pick associative to section at 6850)
.text$x:000068A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000068A0
.text$x:000068A0 ; =============== S U B R O U T I N E =======================================
.text$x:000068A0
.text$x:000068A0
.text$x:000068A0 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:000068A0                                         ; DATA XREF: .xdata$x:00010730o
.text$x:000068A0                 mov     ecx, [ebp-10h]  ; this
.text$x:000068A3                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000068A3 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:000068A3
.text$x:000068A8
.text$x:000068A8 ; =============== S U B R O U T I N E =======================================
.text$x:000068A8
.text$x:000068A8
.text$x:000068A8 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:000068A8                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:000068A8
.text$x:000068A8 arg_4           = dword ptr  8
.text$x:000068A8
.text$x:000068A8                 mov     edx, [esp+arg_4]
.text$x:000068AC                 lea     eax, [edx+0Ch]
.text$x:000068AF                 mov     ecx, [edx-8]
.text$x:000068B2                 xor     ecx, eax
.text$x:000068B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000068B9                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:000068BE                 jmp     ___CxxFrameHandler3
.text$x:000068BE __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:000068BE
.text$x:000068BE ; ---------------------------------------------------------------------------
.text$x:000068C3                 align 4
.text$x:000068C3 _text$x         ends
.text$x:000068C3
.text$mn:000068C4 ; ===========================================================================
.text$mn:000068C4
.text$mn:000068C4 ; Segment type: Pure code
.text$mn:000068C4 ; Segment permissions: Read/Execute
.text$mn:000068C4 _text$mn        segment para public 'CODE' use32
.text$mn:000068C4                 assume cs:_text$mn
.text$mn:000068C4                 ;org 68C4h
.text$mn:000068C4 ; COMDAT (pick any)
.text$mn:000068C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068C4
.text$mn:000068C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000068C4
.text$mn:000068C4 ; Attributes: bp-based frame
.text$mn:000068C4
.text$mn:000068C4 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:000068C4                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:000068C4 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:000068C4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:000068C4
.text$mn:000068C4 var_10          = dword ptr -10h
.text$mn:000068C4 var_C           = dword ptr -0Ch
.text$mn:000068C4 var_4           = dword ptr -4
.text$mn:000068C4
.text$mn:000068C4                 push    ebp
.text$mn:000068C5                 mov     ebp, esp
.text$mn:000068C7                 push    0FFFFFFFFh
.text$mn:000068C9                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:000068CE                 mov     eax, large fs:0
.text$mn:000068D4                 push    eax
.text$mn:000068D5                 push    ecx
.text$mn:000068D6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000068DB                 xor     eax, ebp
.text$mn:000068DD                 push    eax
.text$mn:000068DE                 lea     eax, [ebp+var_C]
.text$mn:000068E1                 mov     large fs:0, eax
.text$mn:000068E7                 mov     [ebp+var_10], ecx
.text$mn:000068EA                 mov     ecx, [ebp+var_10]
.text$mn:000068ED                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:000068F2                 mov     [ebp+var_4], 0
.text$mn:000068F9                 mov     ecx, [ebp+var_10]
.text$mn:000068FC                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00006901                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006908                 mov     eax, [ebp+var_10]
.text$mn:0000690B                 mov     ecx, [ebp+var_C]
.text$mn:0000690E                 mov     large fs:0, ecx
.text$mn:00006915                 pop     ecx
.text$mn:00006916                 mov     esp, ebp
.text$mn:00006918                 pop     ebp
.text$mn:00006919                 retn    4
.text$mn:00006919 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00006919
.text$mn:00006919 _text$mn        ends
.text$mn:00006919
.text$x:0000691C ; ===========================================================================
.text$x:0000691C
.text$x:0000691C ; Segment type: Pure code
.text$x:0000691C ; Segment permissions: Read/Execute
.text$x:0000691C _text$x         segment para public 'CODE' use32
.text$x:0000691C                 assume cs:_text$x
.text$x:0000691C                 ;org 691Ch
.text$x:0000691C ; COMDAT (pick associative to section at 68C4)
.text$x:0000691C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000691C
.text$x:0000691C ; =============== S U B R O U T I N E =======================================
.text$x:0000691C
.text$x:0000691C
.text$x:0000691C __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:0000691C                                         ; DATA XREF: .xdata$x:0000EF7Co
.text$x:0000691C                 mov     ecx, [ebp-10h]
.text$x:0000691F                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:0000691F __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:0000691F
.text$x:00006924
.text$x:00006924 ; =============== S U B R O U T I N E =======================================
.text$x:00006924
.text$x:00006924
.text$x:00006924 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:00006924                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:00006924
.text$x:00006924 arg_4           = dword ptr  8
.text$x:00006924
.text$x:00006924                 mov     edx, [esp+arg_4]
.text$x:00006928                 lea     eax, [edx+0Ch]
.text$x:0000692B                 mov     ecx, [edx-8]
.text$x:0000692E                 xor     ecx, eax
.text$x:00006930                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006935                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:0000693A                 jmp     ___CxxFrameHandler3
.text$x:0000693A __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:0000693A
.text$x:0000693A ; ---------------------------------------------------------------------------
.text$x:0000693F                 align 10h
.text$x:0000693F _text$x         ends
.text$x:0000693F
.text$mn:00006940 ; ===========================================================================
.text$mn:00006940
.text$mn:00006940 ; Segment type: Pure code
.text$mn:00006940 ; Segment permissions: Read/Execute
.text$mn:00006940 _text$mn        segment para public 'CODE' use32
.text$mn:00006940                 assume cs:_text$mn
.text$mn:00006940                 ;org 6940h
.text$mn:00006940 ; COMDAT (pick any)
.text$mn:00006940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006940
.text$mn:00006940 ; =============== S U B R O U T I N E =======================================
.text$mn:00006940
.text$mn:00006940 ; Attributes: bp-based frame
.text$mn:00006940
.text$mn:00006940 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:00006940                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00006940 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00006940                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+38p
.text$mn:00006940                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p ...
.text$mn:00006940
.text$mn:00006940 var_10          = dword ptr -10h
.text$mn:00006940 var_C           = dword ptr -0Ch
.text$mn:00006940 var_4           = dword ptr -4
.text$mn:00006940
.text$mn:00006940                 push    ebp
.text$mn:00006941                 mov     ebp, esp
.text$mn:00006943                 push    0FFFFFFFFh
.text$mn:00006945                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:0000694A                 mov     eax, large fs:0
.text$mn:00006950                 push    eax
.text$mn:00006951                 push    ecx
.text$mn:00006952                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006957                 xor     eax, ebp
.text$mn:00006959                 push    eax
.text$mn:0000695A                 lea     eax, [ebp+var_C]
.text$mn:0000695D                 mov     large fs:0, eax
.text$mn:00006963                 mov     [ebp+var_10], ecx
.text$mn:00006966                 mov     ecx, [ebp+var_10]
.text$mn:00006969                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:0000696E                 mov     [ebp+var_4], 0
.text$mn:00006975                 mov     ecx, [ebp+var_10]
.text$mn:00006978                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:0000697D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006984                 mov     eax, [ebp+var_10]
.text$mn:00006987                 mov     ecx, [ebp+var_C]
.text$mn:0000698A                 mov     large fs:0, ecx
.text$mn:00006991                 pop     ecx
.text$mn:00006992                 mov     esp, ebp
.text$mn:00006994                 pop     ebp
.text$mn:00006995                 retn    4
.text$mn:00006995 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00006995
.text$mn:00006995 _text$mn        ends
.text$mn:00006995
.text$x:00006998 ; ===========================================================================
.text$x:00006998
.text$x:00006998 ; Segment type: Pure code
.text$x:00006998 ; Segment permissions: Read/Execute
.text$x:00006998 _text$x         segment para public 'CODE' use32
.text$x:00006998                 assume cs:_text$x
.text$x:00006998                 ;org 6998h
.text$x:00006998 ; COMDAT (pick associative to section at 6940)
.text$x:00006998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006998
.text$x:00006998 ; =============== S U B R O U T I N E =======================================
.text$x:00006998
.text$x:00006998
.text$x:00006998 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:00006998                                         ; DATA XREF: .xdata$x:0000F29Co
.text$x:00006998                 mov     ecx, [ebp-10h]
.text$x:0000699B                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:0000699B __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:0000699B
.text$x:000069A0
.text$x:000069A0 ; =============== S U B R O U T I N E =======================================
.text$x:000069A0
.text$x:000069A0
.text$x:000069A0 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:000069A0                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:000069A0
.text$x:000069A0 arg_4           = dword ptr  8
.text$x:000069A0
.text$x:000069A0                 mov     edx, [esp+arg_4]
.text$x:000069A4                 lea     eax, [edx+0Ch]
.text$x:000069A7                 mov     ecx, [edx-8]
.text$x:000069AA                 xor     ecx, eax
.text$x:000069AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000069B1                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:000069B6                 jmp     ___CxxFrameHandler3
.text$x:000069B6 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:000069B6
.text$x:000069B6 ; ---------------------------------------------------------------------------
.text$x:000069BB                 align 4
.text$x:000069BB _text$x         ends
.text$x:000069BB
.text$mn:000069BC ; ===========================================================================
.text$mn:000069BC
.text$mn:000069BC ; Segment type: Pure code
.text$mn:000069BC ; Segment permissions: Read/Execute
.text$mn:000069BC _text$mn        segment para public 'CODE' use32
.text$mn:000069BC                 assume cs:_text$mn
.text$mn:000069BC                 ;org 69BCh
.text$mn:000069BC ; COMDAT (pick any)
.text$mn:000069BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069BC
.text$mn:000069BC ; =============== S U B R O U T I N E =======================================
.text$mn:000069BC
.text$mn:000069BC ; Attributes: bp-based frame
.text$mn:000069BC
.text$mn:000069BC ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:000069BC                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000069BC ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:000069BC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+90p
.text$mn:000069BC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+C7p ...
.text$mn:000069BC
.text$mn:000069BC var_10          = dword ptr -10h
.text$mn:000069BC var_C           = dword ptr -0Ch
.text$mn:000069BC var_4           = dword ptr -4
.text$mn:000069BC arg_0           = dword ptr  8
.text$mn:000069BC
.text$mn:000069BC                 push    ebp
.text$mn:000069BD                 mov     ebp, esp
.text$mn:000069BF                 push    0FFFFFFFFh
.text$mn:000069C1                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:000069C6                 mov     eax, large fs:0
.text$mn:000069CC                 push    eax
.text$mn:000069CD                 push    ecx
.text$mn:000069CE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000069D3                 xor     eax, ebp
.text$mn:000069D5                 push    eax
.text$mn:000069D6                 lea     eax, [ebp+var_C]
.text$mn:000069D9                 mov     large fs:0, eax
.text$mn:000069DF                 mov     [ebp+var_10], ecx
.text$mn:000069E2                 mov     eax, [ebp+arg_0]
.text$mn:000069E5                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000069E6                 mov     ecx, [ebp+var_10]
.text$mn:000069E9                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)
.text$mn:000069EE                 mov     [ebp+var_4], 0
.text$mn:000069F5                 mov     ecx, [ebp+var_10]
.text$mn:000069F8                 mov     edx, [ebp+arg_0]
.text$mn:000069FB                 mov     eax, [edx+8]
.text$mn:000069FE                 mov     [ecx+8], eax
.text$mn:00006A01                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A08                 mov     eax, [ebp+var_10]
.text$mn:00006A0B                 mov     ecx, [ebp+var_C]
.text$mn:00006A0E                 mov     large fs:0, ecx
.text$mn:00006A15                 pop     ecx
.text$mn:00006A16                 mov     esp, ebp
.text$mn:00006A18                 pop     ebp
.text$mn:00006A19                 retn    4
.text$mn:00006A19 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00006A19
.text$mn:00006A19 _text$mn        ends
.text$mn:00006A19
.text$x:00006A1C ; ===========================================================================
.text$x:00006A1C
.text$x:00006A1C ; Segment type: Pure code
.text$x:00006A1C ; Segment permissions: Read/Execute
.text$x:00006A1C _text$x         segment para public 'CODE' use32
.text$x:00006A1C                 assume cs:_text$x
.text$x:00006A1C                 ;org 6A1Ch
.text$x:00006A1C ; COMDAT (pick associative to section at 69BC)
.text$x:00006A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A1C
.text$x:00006A1C ; =============== S U B R O U T I N E =======================================
.text$x:00006A1C
.text$x:00006A1C
.text$x:00006A1C __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00006A1C                                         ; DATA XREF: .xdata$x:0001080Co
.text$x:00006A1C                 mov     ecx, [ebp-10h]
.text$x:00006A1F                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00006A1F __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00006A1F
.text$x:00006A24
.text$x:00006A24 ; =============== S U B R O U T I N E =======================================
.text$x:00006A24
.text$x:00006A24
.text$x:00006A24 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00006A24                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00006A24
.text$x:00006A24 arg_4           = dword ptr  8
.text$x:00006A24
.text$x:00006A24                 mov     edx, [esp+arg_4]
.text$x:00006A28                 lea     eax, [edx+0Ch]
.text$x:00006A2B                 mov     ecx, [edx-8]
.text$x:00006A2E                 xor     ecx, eax
.text$x:00006A30                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A35                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00006A3A                 jmp     ___CxxFrameHandler3
.text$x:00006A3A __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00006A3A
.text$x:00006A3A ; ---------------------------------------------------------------------------
.text$x:00006A3F                 align 10h
.text$x:00006A3F _text$x         ends
.text$x:00006A3F
.text$mn:00006A40 ; ===========================================================================
.text$mn:00006A40
.text$mn:00006A40 ; Segment type: Pure code
.text$mn:00006A40 ; Segment permissions: Read/Execute
.text$mn:00006A40 _text$mn        segment para public 'CODE' use32
.text$mn:00006A40                 assume cs:_text$mn
.text$mn:00006A40                 ;org 6A40h
.text$mn:00006A40 ; COMDAT (pick any)
.text$mn:00006A40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A40
.text$mn:00006A40 ; =============== S U B R O U T I N E =======================================
.text$mn:00006A40
.text$mn:00006A40 ; Attributes: bp-based frame
.text$mn:00006A40
.text$mn:00006A40 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:00006A40                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:00006A40 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$mn:00006A40                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+31p
.text$mn:00006A40
.text$mn:00006A40 var_10          = dword ptr -10h
.text$mn:00006A40 var_C           = dword ptr -0Ch
.text$mn:00006A40 var_4           = dword ptr -4
.text$mn:00006A40 arg_0           = dword ptr  8
.text$mn:00006A40 arg_4           = dword ptr  0Ch
.text$mn:00006A40
.text$mn:00006A40                 push    ebp
.text$mn:00006A41                 mov     ebp, esp
.text$mn:00006A43                 push    0FFFFFFFFh
.text$mn:00006A45                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:00006A4A                 mov     eax, large fs:0
.text$mn:00006A50                 push    eax
.text$mn:00006A51                 push    ecx
.text$mn:00006A52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006A57                 xor     eax, ebp
.text$mn:00006A59                 push    eax
.text$mn:00006A5A                 lea     eax, [ebp+var_C]
.text$mn:00006A5D                 mov     large fs:0, eax
.text$mn:00006A63                 mov     [ebp+var_10], ecx
.text$mn:00006A66                 mov     ecx, [ebp+var_10]
.text$mn:00006A69                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00006A6E                 mov     [ebp+var_4], 0
.text$mn:00006A75                 mov     eax, [ebp+arg_4]
.text$mn:00006A78                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006A79                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006A7C                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00006A81                 mov     ecx, [ebp+var_10]
.text$mn:00006A84                 mov     edx, [ebp+arg_0]
.text$mn:00006A87                 mov     [ecx+8], edx
.text$mn:00006A8A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A91                 mov     eax, [ebp+var_10]
.text$mn:00006A94                 mov     ecx, [ebp+var_C]
.text$mn:00006A97                 mov     large fs:0, ecx
.text$mn:00006A9E                 pop     ecx
.text$mn:00006A9F                 mov     esp, ebp
.text$mn:00006AA1                 pop     ebp
.text$mn:00006AA2                 retn    8
.text$mn:00006AA2 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$mn:00006AA2
.text$mn:00006AA2 ; ---------------------------------------------------------------------------
.text$mn:00006AA5                 align 4
.text$mn:00006AA5 _text$mn        ends
.text$mn:00006AA5
.text$x:00006AA8 ; ===========================================================================
.text$x:00006AA8
.text$x:00006AA8 ; Segment type: Pure code
.text$x:00006AA8 ; Segment permissions: Read/Execute
.text$x:00006AA8 _text$x         segment para public 'CODE' use32
.text$x:00006AA8                 assume cs:_text$x
.text$x:00006AA8                 ;org 6AA8h
.text$x:00006AA8 ; COMDAT (pick associative to section at 6A40)
.text$x:00006AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006AA8
.text$x:00006AA8 ; =============== S U B R O U T I N E =======================================
.text$x:00006AA8
.text$x:00006AA8
.text$x:00006AA8 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00006AA8                                         ; DATA XREF: .xdata$x:000107B4o
.text$x:00006AA8                 mov     ecx, [ebp-10h]
.text$x:00006AAB                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00006AAB __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 endp
.text$x:00006AAB
.text$x:00006AB0
.text$x:00006AB0 ; =============== S U B R O U T I N E =======================================
.text$x:00006AB0
.text$x:00006AB0
.text$x:00006AB0 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$x:00006AB0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+5o
.text$x:00006AB0
.text$x:00006AB0 arg_4           = dword ptr  8
.text$x:00006AB0
.text$x:00006AB0                 mov     edx, [esp+arg_4]
.text$x:00006AB4                 lea     eax, [edx+0Ch]
.text$x:00006AB7                 mov     ecx, [edx-8]
.text$x:00006ABA                 xor     ecx, eax
.text$x:00006ABC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006AC1                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$x:00006AC6                 jmp     ___CxxFrameHandler3
.text$x:00006AC6 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$x:00006AC6
.text$x:00006AC6 ; ---------------------------------------------------------------------------
.text$x:00006ACB                 align 4
.text$x:00006ACB _text$x         ends
.text$x:00006ACB
.text$mn:00006ACC ; ===========================================================================
.text$mn:00006ACC
.text$mn:00006ACC ; Segment type: Pure code
.text$mn:00006ACC ; Segment permissions: Read/Execute
.text$mn:00006ACC _text$mn        segment para public 'CODE' use32
.text$mn:00006ACC                 assume cs:_text$mn
.text$mn:00006ACC                 ;org 6ACCh
.text$mn:00006ACC ; COMDAT (pick any)
.text$mn:00006ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ACC
.text$mn:00006ACC ; =============== S U B R O U T I N E =======================================
.text$mn:00006ACC
.text$mn:00006ACC ; Attributes: bp-based frame
.text$mn:00006ACC
.text$mn:00006ACC ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00006ACC                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00006ACC ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00006ACC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+3Bp
.text$mn:00006ACC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+59p
.text$mn:00006ACC
.text$mn:00006ACC var_10          = dword ptr -10h
.text$mn:00006ACC var_C           = dword ptr -0Ch
.text$mn:00006ACC var_4           = dword ptr -4
.text$mn:00006ACC arg_0           = dword ptr  8
.text$mn:00006ACC
.text$mn:00006ACC                 push    ebp
.text$mn:00006ACD                 mov     ebp, esp
.text$mn:00006ACF                 push    0FFFFFFFFh
.text$mn:00006AD1                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00006AD6                 mov     eax, large fs:0
.text$mn:00006ADC                 push    eax
.text$mn:00006ADD                 push    ecx
.text$mn:00006ADE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006AE3                 xor     eax, ebp
.text$mn:00006AE5                 push    eax
.text$mn:00006AE6                 lea     eax, [ebp+var_C]
.text$mn:00006AE9                 mov     large fs:0, eax
.text$mn:00006AEF                 mov     [ebp+var_10], ecx
.text$mn:00006AF2                 mov     eax, [ebp+arg_0]
.text$mn:00006AF5                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00006AF6                 mov     ecx, [ebp+var_10]
.text$mn:00006AF9                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006AFE                 mov     [ebp+var_4], 0
.text$mn:00006B05                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006B0C                 mov     eax, [ebp+var_10]
.text$mn:00006B0F                 mov     ecx, [ebp+var_C]
.text$mn:00006B12                 mov     large fs:0, ecx
.text$mn:00006B19                 pop     ecx
.text$mn:00006B1A                 mov     esp, ebp
.text$mn:00006B1C                 pop     ebp
.text$mn:00006B1D                 retn    4
.text$mn:00006B1D ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00006B1D
.text$mn:00006B1D _text$mn        ends
.text$mn:00006B1D
.text$x:00006B20 ; ===========================================================================
.text$x:00006B20
.text$x:00006B20 ; Segment type: Pure code
.text$x:00006B20 ; Segment permissions: Read/Execute
.text$x:00006B20 _text$x         segment para public 'CODE' use32
.text$x:00006B20                 assume cs:_text$x
.text$x:00006B20                 ;org 6B20h
.text$x:00006B20 ; COMDAT (pick associative to section at 6ACC)
.text$x:00006B20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B20
.text$x:00006B20 ; =============== S U B R O U T I N E =======================================
.text$x:00006B20
.text$x:00006B20
.text$x:00006B20 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00006B20                                         ; DATA XREF: .xdata$x:000108BCo
.text$x:00006B20                 mov     ecx, [ebp-10h]
.text$x:00006B23                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006B23 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00006B23
.text$x:00006B28
.text$x:00006B28 ; =============== S U B R O U T I N E =======================================
.text$x:00006B28
.text$x:00006B28
.text$x:00006B28 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00006B28                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00006B28
.text$x:00006B28 arg_4           = dword ptr  8
.text$x:00006B28
.text$x:00006B28                 mov     edx, [esp+arg_4]
.text$x:00006B2C                 lea     eax, [edx+0Ch]
.text$x:00006B2F                 mov     ecx, [edx-8]
.text$x:00006B32                 xor     ecx, eax
.text$x:00006B34                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B39                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00006B3E                 jmp     ___CxxFrameHandler3
.text$x:00006B3E __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00006B3E
.text$x:00006B3E ; ---------------------------------------------------------------------------
.text$x:00006B43                 align 4
.text$x:00006B43 _text$x         ends
.text$x:00006B43
.text$mn:00006B44 ; ===========================================================================
.text$mn:00006B44
.text$mn:00006B44 ; Segment type: Pure code
.text$mn:00006B44 ; Segment permissions: Read/Execute
.text$mn:00006B44 _text$mn        segment para public 'CODE' use32
.text$mn:00006B44                 assume cs:_text$mn
.text$mn:00006B44                 ;org 6B44h
.text$mn:00006B44 ; COMDAT (pick any)
.text$mn:00006B44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B44
.text$mn:00006B44 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B44
.text$mn:00006B44 ; Attributes: bp-based frame
.text$mn:00006B44
.text$mn:00006B44 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:00006B44                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:00006B44 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$mn:00006B44                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+3Fp
.text$mn:00006B44                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+48p
.text$mn:00006B44
.text$mn:00006B44 var_10          = dword ptr -10h
.text$mn:00006B44 var_C           = dword ptr -0Ch
.text$mn:00006B44 var_4           = dword ptr -4
.text$mn:00006B44 arg_0           = dword ptr  8
.text$mn:00006B44 arg_4           = dword ptr  0Ch
.text$mn:00006B44
.text$mn:00006B44                 push    ebp
.text$mn:00006B45                 mov     ebp, esp
.text$mn:00006B47                 push    0FFFFFFFFh
.text$mn:00006B49                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:00006B4E                 mov     eax, large fs:0
.text$mn:00006B54                 push    eax
.text$mn:00006B55                 push    ecx
.text$mn:00006B56                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006B5B                 xor     eax, ebp
.text$mn:00006B5D                 push    eax
.text$mn:00006B5E                 lea     eax, [ebp+var_C]
.text$mn:00006B61                 mov     large fs:0, eax
.text$mn:00006B67                 mov     [ebp+var_10], ecx
.text$mn:00006B6A                 mov     eax, [ebp+arg_4]
.text$mn:00006B6D                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006B6E                 mov     ecx, [ebp+arg_0]
.text$mn:00006B71                 push    ecx             ; int
.text$mn:00006B72                 mov     ecx, [ebp+var_10]
.text$mn:00006B75                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)
.text$mn:00006B7A                 mov     [ebp+var_4], 0
.text$mn:00006B81                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006B88                 mov     eax, [ebp+var_10]
.text$mn:00006B8B                 mov     ecx, [ebp+var_C]
.text$mn:00006B8E                 mov     large fs:0, ecx
.text$mn:00006B95                 pop     ecx
.text$mn:00006B96                 mov     esp, ebp
.text$mn:00006B98                 pop     ebp
.text$mn:00006B99                 retn    8
.text$mn:00006B99 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$mn:00006B99
.text$mn:00006B99 _text$mn        ends
.text$mn:00006B99
.text$x:00006B9C ; ===========================================================================
.text$x:00006B9C
.text$x:00006B9C ; Segment type: Pure code
.text$x:00006B9C ; Segment permissions: Read/Execute
.text$x:00006B9C _text$x         segment para public 'CODE' use32
.text$x:00006B9C                 assume cs:_text$x
.text$x:00006B9C                 ;org 6B9Ch
.text$x:00006B9C ; COMDAT (pick associative to section at 6B44)
.text$x:00006B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B9C
.text$x:00006B9C ; =============== S U B R O U T I N E =======================================
.text$x:00006B9C
.text$x:00006B9C
.text$x:00006B9C __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00006B9C                                         ; DATA XREF: .xdata$x:00010838o
.text$x:00006B9C                 mov     ecx, [ebp-10h]
.text$x:00006B9F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006B9F __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 endp
.text$x:00006B9F
.text$x:00006BA4
.text$x:00006BA4 ; =============== S U B R O U T I N E =======================================
.text$x:00006BA4
.text$x:00006BA4
.text$x:00006BA4 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$x:00006BA4                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+5o
.text$x:00006BA4
.text$x:00006BA4 arg_4           = dword ptr  8
.text$x:00006BA4
.text$x:00006BA4                 mov     edx, [esp+arg_4]
.text$x:00006BA8                 lea     eax, [edx+0Ch]
.text$x:00006BAB                 mov     ecx, [edx-8]
.text$x:00006BAE                 xor     ecx, eax
.text$x:00006BB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006BB5                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$x:00006BBA                 jmp     ___CxxFrameHandler3
.text$x:00006BBA __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$x:00006BBA
.text$x:00006BBA ; ---------------------------------------------------------------------------
.text$x:00006BBF                 align 10h
.text$x:00006BBF _text$x         ends
.text$x:00006BBF
.text$mn:00006BC0 ; ===========================================================================
.text$mn:00006BC0
.text$mn:00006BC0 ; Segment type: Pure code
.text$mn:00006BC0 ; Segment permissions: Read/Execute
.text$mn:00006BC0 _text$mn        segment para public 'CODE' use32
.text$mn:00006BC0                 assume cs:_text$mn
.text$mn:00006BC0                 ;org 6BC0h
.text$mn:00006BC0 ; COMDAT (pick any)
.text$mn:00006BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BC0
.text$mn:00006BC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BC0
.text$mn:00006BC0 ; Attributes: bp-based frame
.text$mn:00006BC0
.text$mn:00006BC0 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00006BC0                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00006BC0 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00006BC0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00006BC0
.text$mn:00006BC0 var_10          = dword ptr -10h
.text$mn:00006BC0 var_C           = dword ptr -0Ch
.text$mn:00006BC0 var_4           = dword ptr -4
.text$mn:00006BC0
.text$mn:00006BC0                 push    ebp
.text$mn:00006BC1                 mov     ebp, esp
.text$mn:00006BC3                 push    0FFFFFFFFh
.text$mn:00006BC5                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00006BCA                 mov     eax, large fs:0
.text$mn:00006BD0                 push    eax
.text$mn:00006BD1                 push    ecx
.text$mn:00006BD2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006BD7                 xor     eax, ebp
.text$mn:00006BD9                 push    eax
.text$mn:00006BDA                 lea     eax, [ebp+var_C]
.text$mn:00006BDD                 mov     large fs:0, eax
.text$mn:00006BE3                 mov     [ebp+var_10], ecx
.text$mn:00006BE6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006BE9                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00006BEE                 mov     [ebp+var_4], 0
.text$mn:00006BF5                 mov     eax, [ebp+var_10]
.text$mn:00006BF8                 mov     dword ptr [eax+14h], 0
.text$mn:00006BFF                 mov     ecx, [ebp+var_10]
.text$mn:00006C02                 mov     dword ptr [ecx+18h], 0
.text$mn:00006C09                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006C10                 mov     eax, [ebp+var_10]
.text$mn:00006C13                 mov     ecx, [ebp+var_C]
.text$mn:00006C16                 mov     large fs:0, ecx
.text$mn:00006C1D                 pop     ecx
.text$mn:00006C1E                 mov     esp, ebp
.text$mn:00006C20                 pop     ebp
.text$mn:00006C21                 retn
.text$mn:00006C21 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00006C21
.text$mn:00006C21 ; ---------------------------------------------------------------------------
.text$mn:00006C22                 align 4
.text$mn:00006C22 _text$mn        ends
.text$mn:00006C22
.text$x:00006C24 ; ===========================================================================
.text$x:00006C24
.text$x:00006C24 ; Segment type: Pure code
.text$x:00006C24 ; Segment permissions: Read/Execute
.text$x:00006C24 _text$x         segment para public 'CODE' use32
.text$x:00006C24                 assume cs:_text$x
.text$x:00006C24                 ;org 6C24h
.text$x:00006C24 ; COMDAT (pick associative to section at 6BC0)
.text$x:00006C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006C24
.text$x:00006C24 ; =============== S U B R O U T I N E =======================================
.text$x:00006C24
.text$x:00006C24
.text$x:00006C24 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00006C24                                         ; DATA XREF: .xdata$x:0000EF24o
.text$x:00006C24                 mov     ecx, [ebp-10h]  ; this
.text$x:00006C27                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006C27 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00006C27
.text$x:00006C2C
.text$x:00006C2C ; =============== S U B R O U T I N E =======================================
.text$x:00006C2C
.text$x:00006C2C
.text$x:00006C2C __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00006C2C                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00006C2C
.text$x:00006C2C arg_4           = dword ptr  8
.text$x:00006C2C
.text$x:00006C2C                 mov     edx, [esp+arg_4]
.text$x:00006C30                 lea     eax, [edx+0Ch]
.text$x:00006C33                 mov     ecx, [edx-8]
.text$x:00006C36                 xor     ecx, eax
.text$x:00006C38                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C3D                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00006C42                 jmp     ___CxxFrameHandler3
.text$x:00006C42 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00006C42
.text$x:00006C42 ; ---------------------------------------------------------------------------
.text$x:00006C47                 align 4
.text$x:00006C47 _text$x         ends
.text$x:00006C47
.text$mn:00006C48 ; ===========================================================================
.text$mn:00006C48
.text$mn:00006C48 ; Segment type: Pure code
.text$mn:00006C48 ; Segment permissions: Read/Execute
.text$mn:00006C48 _text$mn        segment para public 'CODE' use32
.text$mn:00006C48                 assume cs:_text$mn
.text$mn:00006C48                 ;org 6C48h
.text$mn:00006C48 ; COMDAT (pick any)
.text$mn:00006C48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C48
.text$mn:00006C48 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C48
.text$mn:00006C48 ; Attributes: bp-based frame
.text$mn:00006C48
.text$mn:00006C48 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00006C48                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00006C48 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00006C48                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:00006C48
.text$mn:00006C48 var_10          = dword ptr -10h
.text$mn:00006C48 var_C           = dword ptr -0Ch
.text$mn:00006C48 var_4           = dword ptr -4
.text$mn:00006C48
.text$mn:00006C48                 push    ebp
.text$mn:00006C49                 mov     ebp, esp
.text$mn:00006C4B                 push    0FFFFFFFFh
.text$mn:00006C4D                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00006C52                 mov     eax, large fs:0
.text$mn:00006C58                 push    eax
.text$mn:00006C59                 push    ecx
.text$mn:00006C5A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006C5F                 xor     eax, ebp
.text$mn:00006C61                 push    eax
.text$mn:00006C62                 lea     eax, [ebp+var_C]
.text$mn:00006C65                 mov     large fs:0, eax
.text$mn:00006C6B                 mov     [ebp+var_10], ecx
.text$mn:00006C6E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006C71                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00006C76                 mov     [ebp+var_4], 0
.text$mn:00006C7D                 mov     eax, [ebp+var_10]
.text$mn:00006C80                 mov     dword ptr [eax+14h], 0
.text$mn:00006C87                 mov     ecx, [ebp+var_10]
.text$mn:00006C8A                 mov     dword ptr [ecx+18h], 0
.text$mn:00006C91                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006C98                 mov     eax, [ebp+var_10]
.text$mn:00006C9B                 mov     ecx, [ebp+var_C]
.text$mn:00006C9E                 mov     large fs:0, ecx
.text$mn:00006CA5                 pop     ecx
.text$mn:00006CA6                 mov     esp, ebp
.text$mn:00006CA8                 pop     ebp
.text$mn:00006CA9                 retn
.text$mn:00006CA9 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00006CA9
.text$mn:00006CA9 ; ---------------------------------------------------------------------------
.text$mn:00006CAA                 align 4
.text$mn:00006CAA _text$mn        ends
.text$mn:00006CAA
.text$x:00006CAC ; ===========================================================================
.text$x:00006CAC
.text$x:00006CAC ; Segment type: Pure code
.text$x:00006CAC ; Segment permissions: Read/Execute
.text$x:00006CAC _text$x         segment para public 'CODE' use32
.text$x:00006CAC                 assume cs:_text$x
.text$x:00006CAC                 ;org 6CACh
.text$x:00006CAC ; COMDAT (pick associative to section at 6C48)
.text$x:00006CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006CAC
.text$x:00006CAC ; =============== S U B R O U T I N E =======================================
.text$x:00006CAC
.text$x:00006CAC
.text$x:00006CAC __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00006CAC                                         ; DATA XREF: .xdata$x:0000F244o
.text$x:00006CAC                 mov     ecx, [ebp-10h]  ; this
.text$x:00006CAF                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006CAF __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00006CAF
.text$x:00006CB4
.text$x:00006CB4 ; =============== S U B R O U T I N E =======================================
.text$x:00006CB4
.text$x:00006CB4
.text$x:00006CB4 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00006CB4                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00006CB4
.text$x:00006CB4 arg_4           = dword ptr  8
.text$x:00006CB4
.text$x:00006CB4                 mov     edx, [esp+arg_4]
.text$x:00006CB8                 lea     eax, [edx+0Ch]
.text$x:00006CBB                 mov     ecx, [edx-8]
.text$x:00006CBE                 xor     ecx, eax
.text$x:00006CC0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006CC5                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00006CCA                 jmp     ___CxxFrameHandler3
.text$x:00006CCA __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00006CCA
.text$x:00006CCA ; ---------------------------------------------------------------------------
.text$x:00006CCF                 align 10h
.text$x:00006CCF _text$x         ends
.text$x:00006CCF
.text$mn:00006CD0 ; ===========================================================================
.text$mn:00006CD0
.text$mn:00006CD0 ; Segment type: Pure code
.text$mn:00006CD0 ; Segment permissions: Read/Execute
.text$mn:00006CD0 _text$mn        segment para public 'CODE' use32
.text$mn:00006CD0                 assume cs:_text$mn
.text$mn:00006CD0                 ;org 6CD0h
.text$mn:00006CD0 ; COMDAT (pick any)
.text$mn:00006CD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CD0
.text$mn:00006CD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CD0
.text$mn:00006CD0 ; Attributes: bp-based frame
.text$mn:00006CD0
.text$mn:00006CD0 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>>::_Vector_alloc<0, struct std::_Vec_base_types<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>>(class std::allocator<struct std::pair<int, int>> const &)
.text$mn:00006CD0                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z
.text$mn:00006CD0 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z proc near
.text$mn:00006CD0                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)+34p
.text$mn:00006CD0
.text$mn:00006CD0 var_10          = dword ptr -10h
.text$mn:00006CD0 var_C           = dword ptr -0Ch
.text$mn:00006CD0 var_4           = dword ptr -4
.text$mn:00006CD0
.text$mn:00006CD0                 push    ebp
.text$mn:00006CD1                 mov     ebp, esp
.text$mn:00006CD3                 push    0FFFFFFFFh
.text$mn:00006CD5                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z
.text$mn:00006CDA                 mov     eax, large fs:0
.text$mn:00006CE0                 push    eax
.text$mn:00006CE1                 push    ecx
.text$mn:00006CE2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006CE7                 xor     eax, ebp
.text$mn:00006CE9                 push    eax
.text$mn:00006CEA                 lea     eax, [ebp+var_C]
.text$mn:00006CED                 mov     large fs:0, eax
.text$mn:00006CF3                 mov     [ebp+var_10], ecx
.text$mn:00006CF6                 mov     ecx, [ebp+var_10]
.text$mn:00006CF9                 call    ??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<int,int>>>::_Vector_val<std::_Simple_types<std::pair<int,int>>>(void)
.text$mn:00006CFE                 mov     [ebp+var_4], 0
.text$mn:00006D05                 mov     ecx, [ebp+var_10]
.text$mn:00006D08                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Alloc_proxy(void)
.text$mn:00006D0D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006D14                 mov     eax, [ebp+var_10]
.text$mn:00006D17                 mov     ecx, [ebp+var_C]
.text$mn:00006D1A                 mov     large fs:0, ecx
.text$mn:00006D21                 pop     ecx
.text$mn:00006D22                 mov     esp, ebp
.text$mn:00006D24                 pop     ebp
.text$mn:00006D25                 retn    4
.text$mn:00006D25 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z endp
.text$mn:00006D25
.text$mn:00006D25 _text$mn        ends
.text$mn:00006D25
.text$x:00006D28 ; ===========================================================================
.text$x:00006D28
.text$x:00006D28 ; Segment type: Pure code
.text$x:00006D28 ; Segment permissions: Read/Execute
.text$x:00006D28 _text$x         segment para public 'CODE' use32
.text$x:00006D28                 assume cs:_text$x
.text$x:00006D28                 ;org 6D28h
.text$x:00006D28 ; COMDAT (pick associative to section at 6CD0)
.text$x:00006D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006D28
.text$x:00006D28 ; =============== S U B R O U T I N E =======================================
.text$x:00006D28
.text$x:00006D28
.text$x:00006D28 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z$0 proc near
.text$x:00006D28                                         ; DATA XREF: .xdata$x:000105FCo
.text$x:00006D28                 mov     ecx, [ebp-10h]
.text$x:00006D2B                 jmp     ??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<int,int>>>::~_Vector_val<std::_Simple_types<std::pair<int,int>>>(void)
.text$x:00006D2B __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z$0 endp
.text$x:00006D2B
.text$x:00006D30
.text$x:00006D30 ; =============== S U B R O U T I N E =======================================
.text$x:00006D30
.text$x:00006D30
.text$x:00006D30 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z proc near
.text$x:00006D30                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(std::allocator<std::pair<int,int>> const &)+5o
.text$x:00006D30
.text$x:00006D30 arg_4           = dword ptr  8
.text$x:00006D30
.text$x:00006D30                 mov     edx, [esp+arg_4]
.text$x:00006D34                 lea     eax, [edx+0Ch]
.text$x:00006D37                 mov     ecx, [edx-8]
.text$x:00006D3A                 xor     ecx, eax
.text$x:00006D3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D41                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z
.text$x:00006D46                 jmp     ___CxxFrameHandler3
.text$x:00006D46 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z endp
.text$x:00006D46
.text$x:00006D46 ; ---------------------------------------------------------------------------
.text$x:00006D4B                 align 4
.text$x:00006D4B _text$x         ends
.text$x:00006D4B
.text$mn:00006D4C ; ===========================================================================
.text$mn:00006D4C
.text$mn:00006D4C ; Segment type: Pure code
.text$mn:00006D4C ; Segment permissions: Read/Execute
.text$mn:00006D4C _text$mn        segment para public 'CODE' use32
.text$mn:00006D4C                 assume cs:_text$mn
.text$mn:00006D4C                 ;org 6D4Ch
.text$mn:00006D4C ; COMDAT (pick any)
.text$mn:00006D4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D4C
.text$mn:00006D4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D4C
.text$mn:00006D4C ; Attributes: bp-based frame
.text$mn:00006D4C
.text$mn:00006D4C ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:00006D4C                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00006D4C ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$mn:00006D4C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+4Ap
.text$mn:00006D4C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+34p
.text$mn:00006D4C
.text$mn:00006D4C var_10          = dword ptr -10h
.text$mn:00006D4C var_C           = dword ptr -0Ch
.text$mn:00006D4C var_4           = dword ptr -4
.text$mn:00006D4C
.text$mn:00006D4C                 push    ebp
.text$mn:00006D4D                 mov     ebp, esp
.text$mn:00006D4F                 push    0FFFFFFFFh
.text$mn:00006D51                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00006D56                 mov     eax, large fs:0
.text$mn:00006D5C                 push    eax
.text$mn:00006D5D                 push    ecx
.text$mn:00006D5E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006D63                 xor     eax, ebp
.text$mn:00006D65                 push    eax
.text$mn:00006D66                 lea     eax, [ebp+var_C]
.text$mn:00006D69                 mov     large fs:0, eax
.text$mn:00006D6F                 mov     [ebp+var_10], ecx
.text$mn:00006D72                 mov     ecx, [ebp+var_10]
.text$mn:00006D75                 call    ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00006D7A                 mov     [ebp+var_4], 0
.text$mn:00006D81                 mov     ecx, [ebp+var_10]
.text$mn:00006D84                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:00006D89                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006D90                 mov     eax, [ebp+var_10]
.text$mn:00006D93                 mov     ecx, [ebp+var_C]
.text$mn:00006D96                 mov     large fs:0, ecx
.text$mn:00006D9D                 pop     ecx
.text$mn:00006D9E                 mov     esp, ebp
.text$mn:00006DA0                 pop     ebp
.text$mn:00006DA1                 retn    4
.text$mn:00006DA1 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$mn:00006DA1
.text$mn:00006DA1 _text$mn        ends
.text$mn:00006DA1
.text$x:00006DA4 ; ===========================================================================
.text$x:00006DA4
.text$x:00006DA4 ; Segment type: Pure code
.text$x:00006DA4 ; Segment permissions: Read/Execute
.text$x:00006DA4 _text$x         segment para public 'CODE' use32
.text$x:00006DA4                 assume cs:_text$x
.text$x:00006DA4                 ;org 6DA4h
.text$x:00006DA4 ; COMDAT (pick associative to section at 6D4C)
.text$x:00006DA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006DA4
.text$x:00006DA4 ; =============== S U B R O U T I N E =======================================
.text$x:00006DA4
.text$x:00006DA4
.text$x:00006DA4 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 proc near
.text$x:00006DA4                                         ; DATA XREF: .xdata$x:0000F69Co
.text$x:00006DA4                 mov     ecx, [ebp-10h]
.text$x:00006DA7                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00006DA7 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 endp
.text$x:00006DA7
.text$x:00006DAC
.text$x:00006DAC ; =============== S U B R O U T I N E =======================================
.text$x:00006DAC
.text$x:00006DAC
.text$x:00006DAC __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$x:00006DAC                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+5o
.text$x:00006DAC
.text$x:00006DAC arg_4           = dword ptr  8
.text$x:00006DAC
.text$x:00006DAC                 mov     edx, [esp+arg_4]
.text$x:00006DB0                 lea     eax, [edx+0Ch]
.text$x:00006DB3                 mov     ecx, [edx-8]
.text$x:00006DB6                 xor     ecx, eax
.text$x:00006DB8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006DBD                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$x:00006DC2                 jmp     ___CxxFrameHandler3
.text$x:00006DC2 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$x:00006DC2
.text$x:00006DC2 ; ---------------------------------------------------------------------------
.text$x:00006DC7                 align 4
.text$x:00006DC7 _text$x         ends
.text$x:00006DC7
.text$mn:00006DC8 ; ===========================================================================
.text$mn:00006DC8
.text$mn:00006DC8 ; Segment type: Pure code
.text$mn:00006DC8 ; Segment permissions: Read/Execute
.text$mn:00006DC8 _text$mn        segment para public 'CODE' use32
.text$mn:00006DC8                 assume cs:_text$mn
.text$mn:00006DC8                 ;org 6DC8h
.text$mn:00006DC8 ; COMDAT (pick any)
.text$mn:00006DC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006DC8
.text$mn:00006DC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006DC8
.text$mn:00006DC8 ; Attributes: bp-based frame
.text$mn:00006DC8
.text$mn:00006DC8 ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(struct std::_Iterator_base12 *)
.text$mn:00006DC8                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00006DC8 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00006DC8                                         ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+1D1p
.text$mn:00006DC8                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+4Fp ...
.text$mn:00006DC8
.text$mn:00006DC8 var_10          = dword ptr -10h
.text$mn:00006DC8 var_C           = dword ptr -0Ch
.text$mn:00006DC8 var_4           = dword ptr -4
.text$mn:00006DC8 arg_0           = dword ptr  8
.text$mn:00006DC8
.text$mn:00006DC8                 push    ebp
.text$mn:00006DC9                 mov     ebp, esp
.text$mn:00006DCB                 push    0FFFFFFFFh
.text$mn:00006DCD                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00006DD2                 mov     eax, large fs:0
.text$mn:00006DD8                 push    eax
.text$mn:00006DD9                 push    ecx
.text$mn:00006DDA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006DDF                 xor     eax, ebp
.text$mn:00006DE1                 push    eax
.text$mn:00006DE2                 lea     eax, [ebp+var_C]
.text$mn:00006DE5                 mov     large fs:0, eax
.text$mn:00006DEB                 mov     [ebp+var_10], ecx
.text$mn:00006DEE                 mov     eax, [ebp+arg_0]
.text$mn:00006DF1                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00006DF2                 mov     ecx, [ebp+var_10]
.text$mn:00006DF5                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)
.text$mn:00006DFA                 mov     [ebp+var_4], 0
.text$mn:00006E01                 mov     ecx, [ebp+var_10]
.text$mn:00006E04                 mov     edx, [ebp+arg_0]
.text$mn:00006E07                 mov     eax, [edx+8]
.text$mn:00006E0A                 mov     [ecx+8], eax
.text$mn:00006E0D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E14                 mov     eax, [ebp+var_10]
.text$mn:00006E17                 mov     ecx, [ebp+var_C]
.text$mn:00006E1A                 mov     large fs:0, ecx
.text$mn:00006E21                 pop     ecx
.text$mn:00006E22                 mov     esp, ebp
.text$mn:00006E24                 pop     ebp
.text$mn:00006E25                 retn    4
.text$mn:00006E25 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00006E25
.text$mn:00006E25 _text$mn        ends
.text$mn:00006E25
.text$x:00006E28 ; ===========================================================================
.text$x:00006E28
.text$x:00006E28 ; Segment type: Pure code
.text$x:00006E28 ; Segment permissions: Read/Execute
.text$x:00006E28 _text$x         segment para public 'CODE' use32
.text$x:00006E28                 assume cs:_text$x
.text$x:00006E28                 ;org 6E28h
.text$x:00006E28 ; COMDAT (pick associative to section at 6DC8)
.text$x:00006E28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E28
.text$x:00006E28 ; =============== S U B R O U T I N E =======================================
.text$x:00006E28
.text$x:00006E28
.text$x:00006E28 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00006E28                                         ; DATA XREF: .xdata$x:00010520o
.text$x:00006E28                 mov     ecx, [ebp-10h]
.text$x:00006E2B                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:00006E2B __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00006E2B
.text$x:00006E30
.text$x:00006E30 ; =============== S U B R O U T I N E =======================================
.text$x:00006E30
.text$x:00006E30
.text$x:00006E30 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00006E30                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)+5o
.text$x:00006E30
.text$x:00006E30 arg_4           = dword ptr  8
.text$x:00006E30
.text$x:00006E30                 mov     edx, [esp+arg_4]
.text$x:00006E34                 lea     eax, [edx+0Ch]
.text$x:00006E37                 mov     ecx, [edx-8]
.text$x:00006E3A                 xor     ecx, eax
.text$x:00006E3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E41                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00006E46                 jmp     ___CxxFrameHandler3
.text$x:00006E46 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00006E46
.text$x:00006E46 ; ---------------------------------------------------------------------------
.text$x:00006E4B                 align 4
.text$x:00006E4B _text$x         ends
.text$x:00006E4B
.text$mn:00006E4C ; ===========================================================================
.text$mn:00006E4C
.text$mn:00006E4C ; Segment type: Pure code
.text$mn:00006E4C ; Segment permissions: Read/Execute
.text$mn:00006E4C _text$mn        segment para public 'CODE' use32
.text$mn:00006E4C                 assume cs:_text$mn
.text$mn:00006E4C                 ;org 6E4Ch
.text$mn:00006E4C ; COMDAT (pick any)
.text$mn:00006E4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E4C
.text$mn:00006E4C ; =============== S U B R O U T I N E =======================================
.text$mn:00006E4C
.text$mn:00006E4C ; Attributes: bp-based frame
.text$mn:00006E4C
.text$mn:00006E4C ; int __stdcall std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, struct std::_Container_base12 *)
.text$mn:00006E4C                 public ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00006E4C ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$mn:00006E4C                                         ; CODE XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+31p
.text$mn:00006E4C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+3Dp ...
.text$mn:00006E4C
.text$mn:00006E4C var_10          = dword ptr -10h
.text$mn:00006E4C var_C           = dword ptr -0Ch
.text$mn:00006E4C var_4           = dword ptr -4
.text$mn:00006E4C arg_0           = dword ptr  8
.text$mn:00006E4C arg_4           = dword ptr  0Ch
.text$mn:00006E4C
.text$mn:00006E4C                 push    ebp
.text$mn:00006E4D                 mov     ebp, esp
.text$mn:00006E4F                 push    0FFFFFFFFh
.text$mn:00006E51                 push    offset __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00006E56                 mov     eax, large fs:0
.text$mn:00006E5C                 push    eax
.text$mn:00006E5D                 push    ecx
.text$mn:00006E5E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006E63                 xor     eax, ebp
.text$mn:00006E65                 push    eax
.text$mn:00006E66                 lea     eax, [ebp+var_C]
.text$mn:00006E69                 mov     large fs:0, eax
.text$mn:00006E6F                 mov     [ebp+var_10], ecx
.text$mn:00006E72                 mov     ecx, [ebp+var_10]
.text$mn:00006E75                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$mn:00006E7A                 mov     [ebp+var_4], 0
.text$mn:00006E81                 mov     eax, [ebp+var_10]
.text$mn:00006E84                 mov     ecx, [ebp+arg_0]
.text$mn:00006E87                 mov     [eax+8], ecx
.text$mn:00006E8A                 mov     edx, [ebp+arg_4]
.text$mn:00006E8D                 push    edx             ; struct std::_Container_base12 *
.text$mn:00006E8E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006E91                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00006E96                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E9D                 mov     eax, [ebp+var_10]
.text$mn:00006EA0                 mov     ecx, [ebp+var_C]
.text$mn:00006EA3                 mov     large fs:0, ecx
.text$mn:00006EAA                 pop     ecx
.text$mn:00006EAB                 mov     esp, ebp
.text$mn:00006EAD                 pop     ebp
.text$mn:00006EAE                 retn    8
.text$mn:00006EAE ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$mn:00006EAE
.text$mn:00006EAE ; ---------------------------------------------------------------------------
.text$mn:00006EB1                 align 4
.text$mn:00006EB1 _text$mn        ends
.text$mn:00006EB1
.text$x:00006EB4 ; ===========================================================================
.text$x:00006EB4
.text$x:00006EB4 ; Segment type: Pure code
.text$x:00006EB4 ; Segment permissions: Read/Execute
.text$x:00006EB4 _text$x         segment para public 'CODE' use32
.text$x:00006EB4                 assume cs:_text$x
.text$x:00006EB4                 ;org 6EB4h
.text$x:00006EB4 ; COMDAT (pick associative to section at 6E4C)
.text$x:00006EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006EB4
.text$x:00006EB4 ; =============== S U B R O U T I N E =======================================
.text$x:00006EB4
.text$x:00006EB4
.text$x:00006EB4 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 proc near
.text$x:00006EB4                                         ; DATA XREF: .xdata$x:000104C8o
.text$x:00006EB4                 mov     ecx, [ebp-10h]
.text$x:00006EB7                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:00006EB7 __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 endp
.text$x:00006EB7
.text$x:00006EBC
.text$x:00006EBC ; =============== S U B R O U T I N E =======================================
.text$x:00006EBC
.text$x:00006EBC
.text$x:00006EBC __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$x:00006EBC                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+5o
.text$x:00006EBC
.text$x:00006EBC arg_4           = dword ptr  8
.text$x:00006EBC
.text$x:00006EBC                 mov     edx, [esp+arg_4]
.text$x:00006EC0                 lea     eax, [edx+0Ch]
.text$x:00006EC3                 mov     ecx, [edx-8]
.text$x:00006EC6                 xor     ecx, eax
.text$x:00006EC8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006ECD                 mov     eax, offset __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$x:00006ED2                 jmp     ___CxxFrameHandler3
.text$x:00006ED2 __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$x:00006ED2
.text$x:00006ED2 ; ---------------------------------------------------------------------------
.text$x:00006ED7                 align 4
.text$x:00006ED7 _text$x         ends
.text$x:00006ED7
.text$mn:00006ED8 ; ===========================================================================
.text$mn:00006ED8
.text$mn:00006ED8 ; Segment type: Pure code
.text$mn:00006ED8 ; Segment permissions: Read/Execute
.text$mn:00006ED8 _text$mn        segment para public 'CODE' use32
.text$mn:00006ED8                 assume cs:_text$mn
.text$mn:00006ED8                 ;org 6ED8h
.text$mn:00006ED8 ; COMDAT (pick any)
.text$mn:00006ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ED8
.text$mn:00006ED8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006ED8
.text$mn:00006ED8 ; Attributes: bp-based frame
.text$mn:00006ED8
.text$mn:00006ED8 ; int __stdcall std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, struct std::_Container_base12 *)
.text$mn:00006ED8                 public ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00006ED8 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$mn:00006ED8                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+41p
.text$mn:00006ED8                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+3Dp
.text$mn:00006ED8
.text$mn:00006ED8 var_10          = dword ptr -10h
.text$mn:00006ED8 var_C           = dword ptr -0Ch
.text$mn:00006ED8 var_4           = dword ptr -4
.text$mn:00006ED8 arg_0           = dword ptr  8
.text$mn:00006ED8 arg_4           = dword ptr  0Ch
.text$mn:00006ED8
.text$mn:00006ED8                 push    ebp
.text$mn:00006ED9                 mov     ebp, esp
.text$mn:00006EDB                 push    0FFFFFFFFh
.text$mn:00006EDD                 push    offset __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$mn:00006EE2                 mov     eax, large fs:0
.text$mn:00006EE8                 push    eax
.text$mn:00006EE9                 push    ecx
.text$mn:00006EEA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006EEF                 xor     eax, ebp
.text$mn:00006EF1                 push    eax
.text$mn:00006EF2                 lea     eax, [ebp+var_C]
.text$mn:00006EF5                 mov     large fs:0, eax
.text$mn:00006EFB                 mov     [ebp+var_10], ecx
.text$mn:00006EFE                 mov     eax, [ebp+arg_4]
.text$mn:00006F01                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006F02                 mov     ecx, [ebp+arg_0]
.text$mn:00006F05                 push    ecx             ; int
.text$mn:00006F06                 mov     ecx, [ebp+var_10]
.text$mn:00006F09                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:00006F0E                 mov     [ebp+var_4], 0
.text$mn:00006F15                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F1C                 mov     eax, [ebp+var_10]
.text$mn:00006F1F                 mov     ecx, [ebp+var_C]
.text$mn:00006F22                 mov     large fs:0, ecx
.text$mn:00006F29                 pop     ecx
.text$mn:00006F2A                 mov     esp, ebp
.text$mn:00006F2C                 pop     ebp
.text$mn:00006F2D                 retn    8
.text$mn:00006F2D ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$mn:00006F2D
.text$mn:00006F2D _text$mn        ends
.text$mn:00006F2D
.text$x:00006F30 ; ===========================================================================
.text$x:00006F30
.text$x:00006F30 ; Segment type: Pure code
.text$x:00006F30 ; Segment permissions: Read/Execute
.text$x:00006F30 _text$x         segment para public 'CODE' use32
.text$x:00006F30                 assume cs:_text$x
.text$x:00006F30                 ;org 6F30h
.text$x:00006F30 ; COMDAT (pick associative to section at 6ED8)
.text$x:00006F30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006F30
.text$x:00006F30 ; =============== S U B R O U T I N E =======================================
.text$x:00006F30
.text$x:00006F30
.text$x:00006F30 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 proc near
.text$x:00006F30                                         ; DATA XREF: .xdata$x:0001054Co
.text$x:00006F30                 mov     ecx, [ebp-10h]
.text$x:00006F33                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00006F33 __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 endp
.text$x:00006F33
.text$x:00006F38
.text$x:00006F38 ; =============== S U B R O U T I N E =======================================
.text$x:00006F38
.text$x:00006F38
.text$x:00006F38 __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z proc near
.text$x:00006F38                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+5o
.text$x:00006F38
.text$x:00006F38 arg_4           = dword ptr  8
.text$x:00006F38
.text$x:00006F38                 mov     edx, [esp+arg_4]
.text$x:00006F3C                 lea     eax, [edx+0Ch]
.text$x:00006F3F                 mov     ecx, [edx-8]
.text$x:00006F42                 xor     ecx, eax
.text$x:00006F44                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006F49                 mov     eax, offset __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.text$x:00006F4E                 jmp     ___CxxFrameHandler3
.text$x:00006F4E __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z endp
.text$x:00006F4E
.text$x:00006F4E ; ---------------------------------------------------------------------------
.text$x:00006F53                 align 4
.text$x:00006F53 _text$x         ends
.text$x:00006F53
.text$mn:00006F54 ; ===========================================================================
.text$mn:00006F54
.text$mn:00006F54 ; Segment type: Pure code
.text$mn:00006F54 ; Segment permissions: Read/Execute
.text$mn:00006F54 _text$mn        segment para public 'CODE' use32
.text$mn:00006F54                 assume cs:_text$mn
.text$mn:00006F54                 ;org 6F54h
.text$mn:00006F54 ; COMDAT (pick any)
.text$mn:00006F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F54
.text$mn:00006F54 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F54
.text$mn:00006F54 ; Attributes: bp-based frame
.text$mn:00006F54
.text$mn:00006F54 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct std::pair<int, int>>>::_Vector_val<struct std::_Simple_types<struct std::pair<int, int>>>(void)
.text$mn:00006F54                 public ??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.text$mn:00006F54 ??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006F54                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(std::allocator<std::pair<int,int>> const &)+29p
.text$mn:00006F54
.text$mn:00006F54 var_10          = dword ptr -10h
.text$mn:00006F54 var_C           = dword ptr -0Ch
.text$mn:00006F54 var_4           = dword ptr -4
.text$mn:00006F54
.text$mn:00006F54                 push    ebp
.text$mn:00006F55                 mov     ebp, esp
.text$mn:00006F57                 push    0FFFFFFFFh
.text$mn:00006F59                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.text$mn:00006F5E                 mov     eax, large fs:0
.text$mn:00006F64                 push    eax
.text$mn:00006F65                 push    ecx
.text$mn:00006F66                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F6B                 xor     eax, ebp
.text$mn:00006F6D                 push    eax
.text$mn:00006F6E                 lea     eax, [ebp+var_C]
.text$mn:00006F71                 mov     large fs:0, eax
.text$mn:00006F77                 mov     [ebp+var_10], ecx
.text$mn:00006F7A                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006F7D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00006F82                 mov     [ebp+var_4], 0
.text$mn:00006F89                 mov     eax, [ebp+var_10]
.text$mn:00006F8C                 mov     dword ptr [eax+4], 0
.text$mn:00006F93                 mov     ecx, [ebp+var_10]
.text$mn:00006F96                 mov     dword ptr [ecx+8], 0
.text$mn:00006F9D                 mov     edx, [ebp+var_10]
.text$mn:00006FA0                 mov     dword ptr [edx+0Ch], 0
.text$mn:00006FA7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006FAE                 mov     eax, [ebp+var_10]
.text$mn:00006FB1                 mov     ecx, [ebp+var_C]
.text$mn:00006FB4                 mov     large fs:0, ecx
.text$mn:00006FBB                 pop     ecx
.text$mn:00006FBC                 mov     esp, ebp
.text$mn:00006FBE                 pop     ebp
.text$mn:00006FBF                 retn
.text$mn:00006FBF ??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006FBF
.text$mn:00006FBF _text$mn        ends
.text$mn:00006FBF
.text$x:00006FC0 ; ===========================================================================
.text$x:00006FC0
.text$x:00006FC0 ; Segment type: Pure code
.text$x:00006FC0 ; Segment permissions: Read/Execute
.text$x:00006FC0 _text$x         segment para public 'CODE' use32
.text$x:00006FC0                 assume cs:_text$x
.text$x:00006FC0                 ;org 6FC0h
.text$x:00006FC0 ; COMDAT (pick associative to section at 6F54)
.text$x:00006FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006FC0
.text$x:00006FC0 ; =============== S U B R O U T I N E =======================================
.text$x:00006FC0
.text$x:00006FC0
.text$x:00006FC0 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006FC0                                         ; DATA XREF: .xdata$x:000105A4o
.text$x:00006FC0                 mov     ecx, [ebp-10h]  ; this
.text$x:00006FC3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006FC3 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00006FC3
.text$x:00006FC8
.text$x:00006FC8 ; =============== S U B R O U T I N E =======================================
.text$x:00006FC8
.text$x:00006FC8
.text$x:00006FC8 __ehhandler$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006FC8                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::pair<int,int>>>::_Vector_val<std::_Simple_types<std::pair<int,int>>>(void)+5o
.text$x:00006FC8
.text$x:00006FC8 arg_4           = dword ptr  8
.text$x:00006FC8
.text$x:00006FC8                 mov     edx, [esp+arg_4]
.text$x:00006FCC                 lea     eax, [edx+0Ch]
.text$x:00006FCF                 mov     ecx, [edx-8]
.text$x:00006FD2                 xor     ecx, eax
.text$x:00006FD4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006FD9                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.text$x:00006FDE                 jmp     ___CxxFrameHandler3
.text$x:00006FDE __ehhandler$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ endp
.text$x:00006FDE
.text$x:00006FDE ; ---------------------------------------------------------------------------
.text$x:00006FE3                 align 4
.text$x:00006FE3 _text$x         ends
.text$x:00006FE3
.text$mn:00006FE4 ; ===========================================================================
.text$mn:00006FE4
.text$mn:00006FE4 ; Segment type: Pure code
.text$mn:00006FE4 ; Segment permissions: Read/Execute
.text$mn:00006FE4 _text$mn        segment para public 'CODE' use32
.text$mn:00006FE4                 assume cs:_text$mn
.text$mn:00006FE4                 ;org 6FE4h
.text$mn:00006FE4 ; COMDAT (pick any)
.text$mn:00006FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FE4
.text$mn:00006FE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FE4
.text$mn:00006FE4 ; Attributes: bp-based frame
.text$mn:00006FE4
.text$mn:00006FE4 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00006FE4                 public ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00006FE4 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006FE4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+29p
.text$mn:00006FE4
.text$mn:00006FE4 var_10          = dword ptr -10h
.text$mn:00006FE4 var_C           = dword ptr -0Ch
.text$mn:00006FE4 var_4           = dword ptr -4
.text$mn:00006FE4
.text$mn:00006FE4                 push    ebp
.text$mn:00006FE5                 mov     ebp, esp
.text$mn:00006FE7                 push    0FFFFFFFFh
.text$mn:00006FE9                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00006FEE                 mov     eax, large fs:0
.text$mn:00006FF4                 push    eax
.text$mn:00006FF5                 push    ecx
.text$mn:00006FF6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006FFB                 xor     eax, ebp
.text$mn:00006FFD                 push    eax
.text$mn:00006FFE                 lea     eax, [ebp+var_C]
.text$mn:00007001                 mov     large fs:0, eax
.text$mn:00007007                 mov     [ebp+var_10], ecx
.text$mn:0000700A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000700D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00007012                 mov     [ebp+var_4], 0
.text$mn:00007019                 mov     eax, [ebp+var_10]
.text$mn:0000701C                 mov     dword ptr [eax+4], 0
.text$mn:00007023                 mov     ecx, [ebp+var_10]
.text$mn:00007026                 mov     dword ptr [ecx+8], 0
.text$mn:0000702D                 mov     edx, [ebp+var_10]
.text$mn:00007030                 mov     dword ptr [edx+0Ch], 0
.text$mn:00007037                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000703E                 mov     eax, [ebp+var_10]
.text$mn:00007041                 mov     ecx, [ebp+var_C]
.text$mn:00007044                 mov     large fs:0, ecx
.text$mn:0000704B                 pop     ecx
.text$mn:0000704C                 mov     esp, ebp
.text$mn:0000704E                 pop     ebp
.text$mn:0000704F                 retn
.text$mn:0000704F ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000704F
.text$mn:0000704F _text$mn        ends
.text$mn:0000704F
.text$x:00007050 ; ===========================================================================
.text$x:00007050
.text$x:00007050 ; Segment type: Pure code
.text$x:00007050 ; Segment permissions: Read/Execute
.text$x:00007050 _text$x         segment para public 'CODE' use32
.text$x:00007050                 assume cs:_text$x
.text$x:00007050                 ;org 7050h
.text$x:00007050 ; COMDAT (pick associative to section at 6FE4)
.text$x:00007050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007050
.text$x:00007050 ; =============== S U B R O U T I N E =======================================
.text$x:00007050
.text$x:00007050
.text$x:00007050 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00007050                                         ; DATA XREF: .xdata$x:0000F644o
.text$x:00007050                 mov     ecx, [ebp-10h]  ; this
.text$x:00007053                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00007053 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00007053
.text$x:00007058
.text$x:00007058 ; =============== S U B R O U T I N E =======================================
.text$x:00007058
.text$x:00007058
.text$x:00007058 __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00007058                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00007058
.text$x:00007058 arg_4           = dword ptr  8
.text$x:00007058
.text$x:00007058                 mov     edx, [esp+arg_4]
.text$x:0000705C                 lea     eax, [edx+0Ch]
.text$x:0000705F                 mov     ecx, [edx-8]
.text$x:00007062                 xor     ecx, eax
.text$x:00007064                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007069                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:0000706E                 jmp     ___CxxFrameHandler3
.text$x:0000706E __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:0000706E
.text$x:0000706E ; ---------------------------------------------------------------------------
.text$x:00007073                 align 4
.text$x:00007073 _text$x         ends
.text$x:00007073
.text$mn:00007074 ; ===========================================================================
.text$mn:00007074
.text$mn:00007074 ; Segment type: Pure code
.text$mn:00007074 ; Segment permissions: Read/Execute
.text$mn:00007074 _text$mn        segment para public 'CODE' use32
.text$mn:00007074                 assume cs:_text$mn
.text$mn:00007074                 ;org 7074h
.text$mn:00007074 ; COMDAT (pick any)
.text$mn:00007074                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007074
.text$mn:00007074 ; =============== S U B R O U T I N E =======================================
.text$mn:00007074
.text$mn:00007074 ; Attributes: bp-based frame
.text$mn:00007074
.text$mn:00007074 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00007074                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00007074 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00007074                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00007074
.text$mn:00007074 var_4           = dword ptr -4
.text$mn:00007074
.text$mn:00007074                 push    ebp
.text$mn:00007075                 mov     ebp, esp
.text$mn:00007077                 push    ecx
.text$mn:00007078                 mov     [ebp+var_4], ecx
.text$mn:0000707B                 mov     ecx, [ebp+var_4]
.text$mn:0000707E                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00007083                 mov     eax, [ebp+var_4]
.text$mn:00007086                 mov     esp, ebp
.text$mn:00007088                 pop     ebp
.text$mn:00007089                 retn
.text$mn:00007089 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00007089
.text$mn:00007089 ; ---------------------------------------------------------------------------
.text$mn:0000708A                 align 4
.text$mn:0000708A _text$mn        ends
.text$mn:0000708A
.text$mn:0000708C ; ===========================================================================
.text$mn:0000708C
.text$mn:0000708C ; Segment type: Pure code
.text$mn:0000708C ; Segment permissions: Read/Execute
.text$mn:0000708C _text$mn        segment para public 'CODE' use32
.text$mn:0000708C                 assume cs:_text$mn
.text$mn:0000708C                 ;org 708Ch
.text$mn:0000708C ; COMDAT (pick any)
.text$mn:0000708C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000708C
.text$mn:0000708C ; =============== S U B R O U T I N E =======================================
.text$mn:0000708C
.text$mn:0000708C ; Attributes: bp-based frame
.text$mn:0000708C
.text$mn:0000708C ; public: __thiscall std::_Wrap_alloc<class std::allocator<class FunctionParser *>>::_Wrap_alloc<class std::allocator<class FunctionParser *>>(void)
.text$mn:0000708C                 public ??0?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ
.text$mn:0000708C ??0?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ proc near
.text$mn:0000708C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)+Ap
.text$mn:0000708C
.text$mn:0000708C var_4           = dword ptr -4
.text$mn:0000708C
.text$mn:0000708C                 push    ebp
.text$mn:0000708D                 mov     ebp, esp
.text$mn:0000708F                 push    ecx
.text$mn:00007090                 mov     [ebp+var_4], ecx
.text$mn:00007093                 mov     ecx, [ebp+var_4]
.text$mn:00007096                 call    ??0?$allocator@PAVFunctionParser@@@std@@QAE@XZ ; std::allocator<FunctionParser *>::allocator<FunctionParser *>(void)
.text$mn:0000709B                 mov     eax, [ebp+var_4]
.text$mn:0000709E                 mov     esp, ebp
.text$mn:000070A0                 pop     ebp
.text$mn:000070A1                 retn
.text$mn:000070A1 ??0?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ endp
.text$mn:000070A1
.text$mn:000070A1 ; ---------------------------------------------------------------------------
.text$mn:000070A2                 align 4
.text$mn:000070A2 _text$mn        ends
.text$mn:000070A2
.text$mn:000070A4 ; ===========================================================================
.text$mn:000070A4
.text$mn:000070A4 ; Segment type: Pure code
.text$mn:000070A4 ; Segment permissions: Read/Execute
.text$mn:000070A4 _text$mn        segment para public 'CODE' use32
.text$mn:000070A4                 assume cs:_text$mn
.text$mn:000070A4                 ;org 70A4h
.text$mn:000070A4 ; COMDAT (pick any)
.text$mn:000070A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070A4
.text$mn:000070A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000070A4
.text$mn:000070A4 ; Attributes: bp-based frame
.text$mn:000070A4
.text$mn:000070A4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>>::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>>(void)
.text$mn:000070A4                 public ??0?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.text$mn:000070A4 ??0?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000070A4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)+Ap
.text$mn:000070A4
.text$mn:000070A4 var_4           = dword ptr -4
.text$mn:000070A4
.text$mn:000070A4                 push    ebp
.text$mn:000070A5                 mov     ebp, esp
.text$mn:000070A7                 push    ecx
.text$mn:000070A8                 mov     [ebp+var_4], ecx
.text$mn:000070AB                 mov     ecx, [ebp+var_4]
.text$mn:000070AE                 call    ??0?$allocator@U?$pair@HH@std@@@std@@QAE@XZ ; std::allocator<std::pair<int,int>>::allocator<std::pair<int,int>>(void)
.text$mn:000070B3                 mov     eax, [ebp+var_4]
.text$mn:000070B6                 mov     esp, ebp
.text$mn:000070B8                 pop     ebp
.text$mn:000070B9                 retn
.text$mn:000070B9 ??0?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAE@XZ endp
.text$mn:000070B9
.text$mn:000070B9 ; ---------------------------------------------------------------------------
.text$mn:000070BA                 align 4
.text$mn:000070BA _text$mn        ends
.text$mn:000070BA
.text$mn:000070BC ; ===========================================================================
.text$mn:000070BC
.text$mn:000070BC ; Segment type: Pure code
.text$mn:000070BC ; Segment permissions: Read/Execute
.text$mn:000070BC _text$mn        segment para public 'CODE' use32
.text$mn:000070BC                 assume cs:_text$mn
.text$mn:000070BC                 ;org 70BCh
.text$mn:000070BC ; COMDAT (pick any)
.text$mn:000070BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070BC
.text$mn:000070BC ; =============== S U B R O U T I N E =======================================
.text$mn:000070BC
.text$mn:000070BC ; Attributes: bp-based frame
.text$mn:000070BC
.text$mn:000070BC ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct AssociationInfo>>::_Wrap_alloc<class std::allocator<struct AssociationInfo>>(void)
.text$mn:000070BC                 public ??0?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ
.text$mn:000070BC ??0?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:000070BC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)+Ap
.text$mn:000070BC
.text$mn:000070BC var_4           = dword ptr -4
.text$mn:000070BC
.text$mn:000070BC                 push    ebp
.text$mn:000070BD                 mov     ebp, esp
.text$mn:000070BF                 push    ecx
.text$mn:000070C0                 mov     [ebp+var_4], ecx
.text$mn:000070C3                 mov     ecx, [ebp+var_4]
.text$mn:000070C6                 call    ??0?$allocator@UAssociationInfo@@@std@@QAE@XZ ; std::allocator<AssociationInfo>::allocator<AssociationInfo>(void)
.text$mn:000070CB                 mov     eax, [ebp+var_4]
.text$mn:000070CE                 mov     esp, ebp
.text$mn:000070D0                 pop     ebp
.text$mn:000070D1                 retn
.text$mn:000070D1 ??0?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ endp
.text$mn:000070D1
.text$mn:000070D1 ; ---------------------------------------------------------------------------
.text$mn:000070D2                 align 4
.text$mn:000070D2 _text$mn        ends
.text$mn:000070D2
.text$mn:000070D4 ; ===========================================================================
.text$mn:000070D4
.text$mn:000070D4 ; Segment type: Pure code
.text$mn:000070D4 ; Segment permissions: Read/Execute
.text$mn:000070D4 _text$mn        segment para public 'CODE' use32
.text$mn:000070D4                 assume cs:_text$mn
.text$mn:000070D4                 ;org 70D4h
.text$mn:000070D4 ; COMDAT (pick any)
.text$mn:000070D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070D4
.text$mn:000070D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000070D4
.text$mn:000070D4 ; Attributes: bp-based frame
.text$mn:000070D4
.text$mn:000070D4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>(void)
.text$mn:000070D4                 public ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
.text$mn:000070D4 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000070D4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Alloc_proxy(void)+Cp
.text$mn:000070D4                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+Cp ...
.text$mn:000070D4
.text$mn:000070D4 var_4           = dword ptr -4
.text$mn:000070D4
.text$mn:000070D4                 push    ebp
.text$mn:000070D5                 mov     ebp, esp
.text$mn:000070D7                 push    ecx
.text$mn:000070D8                 mov     [ebp+var_4], ecx
.text$mn:000070DB                 mov     ecx, [ebp+var_4]
.text$mn:000070DE                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000070E3                 mov     eax, [ebp+var_4]
.text$mn:000070E6                 mov     esp, ebp
.text$mn:000070E8                 pop     ebp
.text$mn:000070E9                 retn
.text$mn:000070E9 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ endp
.text$mn:000070E9
.text$mn:000070E9 ; ---------------------------------------------------------------------------
.text$mn:000070EA                 align 4
.text$mn:000070EA _text$mn        ends
.text$mn:000070EA
.text$mn:000070EC ; ===========================================================================
.text$mn:000070EC
.text$mn:000070EC ; Segment type: Pure code
.text$mn:000070EC ; Segment permissions: Read/Execute
.text$mn:000070EC _text$mn        segment para public 'CODE' use32
.text$mn:000070EC                 assume cs:_text$mn
.text$mn:000070EC                 ;org 70ECh
.text$mn:000070EC ; COMDAT (pick any)
.text$mn:000070EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070EC
.text$mn:000070EC ; =============== S U B R O U T I N E =======================================
.text$mn:000070EC
.text$mn:000070EC ; Attributes: bp-based frame
.text$mn:000070EC
.text$mn:000070EC ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct foundInfo>>::_Wrap_alloc<class std::allocator<struct foundInfo>>(void)
.text$mn:000070EC                 public ??0?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ
.text$mn:000070EC ??0?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:000070EC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)+Ap
.text$mn:000070EC
.text$mn:000070EC var_4           = dword ptr -4
.text$mn:000070EC
.text$mn:000070EC                 push    ebp
.text$mn:000070ED                 mov     ebp, esp
.text$mn:000070EF                 push    ecx
.text$mn:000070F0                 mov     [ebp+var_4], ecx
.text$mn:000070F3                 mov     ecx, [ebp+var_4]
.text$mn:000070F6                 call    ??0?$allocator@UfoundInfo@@@std@@QAE@XZ ; std::allocator<foundInfo>::allocator<foundInfo>(void)
.text$mn:000070FB                 mov     eax, [ebp+var_4]
.text$mn:000070FE                 mov     esp, ebp
.text$mn:00007100                 pop     ebp
.text$mn:00007101                 retn
.text$mn:00007101 ??0?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ endp
.text$mn:00007101
.text$mn:00007101 ; ---------------------------------------------------------------------------
.text$mn:00007102                 align 4
.text$mn:00007102 _text$mn        ends
.text$mn:00007102
.text$mn:00007104 ; ===========================================================================
.text$mn:00007104
.text$mn:00007104 ; Segment type: Pure code
.text$mn:00007104 ; Segment permissions: Read/Execute
.text$mn:00007104 _text$mn        segment para public 'CODE' use32
.text$mn:00007104                 assume cs:_text$mn
.text$mn:00007104                 ;org 7104h
.text$mn:00007104 ; COMDAT (pick any)
.text$mn:00007104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007104
.text$mn:00007104 ; =============== S U B R O U T I N E =======================================
.text$mn:00007104
.text$mn:00007104 ; Attributes: bp-based frame
.text$mn:00007104
.text$mn:00007104 ; public: __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:00007104                 public ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00007104 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$mn:00007104                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00007104
.text$mn:00007104 var_4           = dword ptr -4
.text$mn:00007104 arg_0           = dword ptr  8
.text$mn:00007104
.text$mn:00007104                 push    ebp
.text$mn:00007105                 mov     ebp, esp
.text$mn:00007107                 push    ecx
.text$mn:00007108                 mov     [ebp+var_4], ecx
.text$mn:0000710B                 mov     eax, [ebp+arg_0]
.text$mn:0000710E                 push    eax
.text$mn:0000710F                 mov     ecx, [ebp+var_4]
.text$mn:00007112                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:00007117                 mov     eax, [ebp+var_4]
.text$mn:0000711A                 mov     esp, ebp
.text$mn:0000711C                 pop     ebp
.text$mn:0000711D                 retn    4
.text$mn:0000711D ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$mn:0000711D
.text$mn:0000711D _text$mn        ends
.text$mn:0000711D
.text$mn:00007120 ; ===========================================================================
.text$mn:00007120
.text$mn:00007120 ; Segment type: Pure code
.text$mn:00007120 ; Segment permissions: Read/Execute
.text$mn:00007120 _text$mn        segment para public 'CODE' use32
.text$mn:00007120                 assume cs:_text$mn
.text$mn:00007120                 ;org 7120h
.text$mn:00007120 ; COMDAT (pick any)
.text$mn:00007120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007120
.text$mn:00007120 ; =============== S U B R O U T I N E =======================================
.text$mn:00007120
.text$mn:00007120 ; Attributes: bp-based frame
.text$mn:00007120
.text$mn:00007120 ; public: __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00007120                 public ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00007120 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00007120                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)+Ap
.text$mn:00007120
.text$mn:00007120 var_4           = dword ptr -4
.text$mn:00007120
.text$mn:00007120                 push    ebp
.text$mn:00007121                 mov     ebp, esp
.text$mn:00007123                 push    ecx
.text$mn:00007124                 mov     [ebp+var_4], ecx
.text$mn:00007127                 mov     ecx, [ebp+var_4]
.text$mn:0000712A                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:0000712F                 mov     eax, [ebp+var_4]
.text$mn:00007132                 mov     esp, ebp
.text$mn:00007134                 pop     ebp
.text$mn:00007135                 retn
.text$mn:00007135 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00007135
.text$mn:00007135 ; ---------------------------------------------------------------------------
.text$mn:00007136                 align 4
.text$mn:00007136 _text$mn        ends
.text$mn:00007136
.text$mn:00007138 ; ===========================================================================
.text$mn:00007138
.text$mn:00007138 ; Segment type: Pure code
.text$mn:00007138 ; Segment permissions: Read/Execute
.text$mn:00007138 _text$mn        segment para public 'CODE' use32
.text$mn:00007138                 assume cs:_text$mn
.text$mn:00007138                 ;org 7138h
.text$mn:00007138 ; COMDAT (pick any)
.text$mn:00007138                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007138
.text$mn:00007138 ; =============== S U B R O U T I N E =======================================
.text$mn:00007138
.text$mn:00007138 ; Attributes: bp-based frame
.text$mn:00007138
.text$mn:00007138 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00007138                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00007138 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00007138                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00007138
.text$mn:00007138 var_4           = dword ptr -4
.text$mn:00007138 arg_0           = dword ptr  8
.text$mn:00007138
.text$mn:00007138                 push    ebp
.text$mn:00007139                 mov     ebp, esp
.text$mn:0000713B                 push    ecx
.text$mn:0000713C                 mov     [ebp+var_4], ecx
.text$mn:0000713F                 mov     eax, [ebp+arg_0]
.text$mn:00007142                 push    eax
.text$mn:00007143                 mov     ecx, [ebp+var_4]
.text$mn:00007146                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000714B                 mov     eax, [ebp+var_4]
.text$mn:0000714E                 mov     esp, ebp
.text$mn:00007150                 pop     ebp
.text$mn:00007151                 retn    4
.text$mn:00007151 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00007151
.text$mn:00007151 _text$mn        ends
.text$mn:00007151
.text$mn:00007154 ; ===========================================================================
.text$mn:00007154
.text$mn:00007154 ; Segment type: Pure code
.text$mn:00007154 ; Segment permissions: Read/Execute
.text$mn:00007154 _text$mn        segment para public 'CODE' use32
.text$mn:00007154                 assume cs:_text$mn
.text$mn:00007154                 ;org 7154h
.text$mn:00007154 ; COMDAT (pick any)
.text$mn:00007154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007154
.text$mn:00007154 ; =============== S U B R O U T I N E =======================================
.text$mn:00007154
.text$mn:00007154 ; Attributes: bp-based frame
.text$mn:00007154
.text$mn:00007154 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00007154                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00007154 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00007154                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00007154
.text$mn:00007154 var_4           = dword ptr -4
.text$mn:00007154
.text$mn:00007154                 push    ebp
.text$mn:00007155                 mov     ebp, esp
.text$mn:00007157                 push    ecx
.text$mn:00007158                 mov     [ebp+var_4], ecx
.text$mn:0000715B                 mov     ecx, [ebp+var_4]
.text$mn:0000715E                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00007163                 mov     eax, [ebp+var_4]
.text$mn:00007166                 mov     esp, ebp
.text$mn:00007168                 pop     ebp
.text$mn:00007169                 retn
.text$mn:00007169 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00007169
.text$mn:00007169 ; ---------------------------------------------------------------------------
.text$mn:0000716A                 align 4
.text$mn:0000716A _text$mn        ends
.text$mn:0000716A
.text$mn:0000716C ; ===========================================================================
.text$mn:0000716C
.text$mn:0000716C ; Segment type: Pure code
.text$mn:0000716C ; Segment permissions: Read/Execute
.text$mn:0000716C _text$mn        segment para public 'CODE' use32
.text$mn:0000716C                 assume cs:_text$mn
.text$mn:0000716C                 ;org 716Ch
.text$mn:0000716C ; COMDAT (pick any)
.text$mn:0000716C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000716C
.text$mn:0000716C ; =============== S U B R O U T I N E =======================================
.text$mn:0000716C
.text$mn:0000716C ; Attributes: bp-based frame
.text$mn:0000716C
.text$mn:0000716C ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:0000716C                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:0000716C ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:0000716C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:0000716C
.text$mn:0000716C var_4           = dword ptr -4
.text$mn:0000716C
.text$mn:0000716C                 push    ebp
.text$mn:0000716D                 mov     ebp, esp
.text$mn:0000716F                 push    ecx
.text$mn:00007170                 mov     [ebp+var_4], ecx
.text$mn:00007173                 mov     eax, [ebp+var_4]
.text$mn:00007176                 mov     esp, ebp
.text$mn:00007178                 pop     ebp
.text$mn:00007179                 retn
.text$mn:00007179 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00007179
.text$mn:00007179 ; ---------------------------------------------------------------------------
.text$mn:0000717A                 align 4
.text$mn:0000717A _text$mn        ends
.text$mn:0000717A
.text$mn:0000717C ; ===========================================================================
.text$mn:0000717C
.text$mn:0000717C ; Segment type: Pure code
.text$mn:0000717C ; Segment permissions: Read/Execute
.text$mn:0000717C _text$mn        segment para public 'CODE' use32
.text$mn:0000717C                 assume cs:_text$mn
.text$mn:0000717C                 ;org 717Ch
.text$mn:0000717C ; COMDAT (pick any)
.text$mn:0000717C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000717C
.text$mn:0000717C ; =============== S U B R O U T I N E =======================================
.text$mn:0000717C
.text$mn:0000717C ; Attributes: bp-based frame
.text$mn:0000717C
.text$mn:0000717C ; public: __thiscall std::allocator<class FunctionParser *>::allocator<class FunctionParser *>(void)
.text$mn:0000717C                 public ??0?$allocator@PAVFunctionParser@@@std@@QAE@XZ
.text$mn:0000717C ??0?$allocator@PAVFunctionParser@@@std@@QAE@XZ proc near
.text$mn:0000717C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<FunctionParser *>>::_Wrap_alloc<std::allocator<FunctionParser *>>(void)+Ap
.text$mn:0000717C
.text$mn:0000717C var_4           = dword ptr -4
.text$mn:0000717C
.text$mn:0000717C                 push    ebp
.text$mn:0000717D                 mov     ebp, esp
.text$mn:0000717F                 push    ecx
.text$mn:00007180                 mov     [ebp+var_4], ecx
.text$mn:00007183                 mov     eax, [ebp+var_4]
.text$mn:00007186                 mov     esp, ebp
.text$mn:00007188                 pop     ebp
.text$mn:00007189                 retn
.text$mn:00007189 ??0?$allocator@PAVFunctionParser@@@std@@QAE@XZ endp
.text$mn:00007189
.text$mn:00007189 ; ---------------------------------------------------------------------------
.text$mn:0000718A                 align 4
.text$mn:0000718A _text$mn        ends
.text$mn:0000718A
.text$mn:0000718C ; ===========================================================================
.text$mn:0000718C
.text$mn:0000718C ; Segment type: Pure code
.text$mn:0000718C ; Segment permissions: Read/Execute
.text$mn:0000718C _text$mn        segment para public 'CODE' use32
.text$mn:0000718C                 assume cs:_text$mn
.text$mn:0000718C                 ;org 718Ch
.text$mn:0000718C ; COMDAT (pick any)
.text$mn:0000718C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000718C
.text$mn:0000718C ; =============== S U B R O U T I N E =======================================
.text$mn:0000718C
.text$mn:0000718C ; Attributes: bp-based frame
.text$mn:0000718C
.text$mn:0000718C ; public: __thiscall std::allocator<struct std::pair<int, int>>::allocator<struct std::pair<int, int>>(void)
.text$mn:0000718C                 public ??0?$allocator@U?$pair@HH@std@@@std@@QAE@XZ
.text$mn:0000718C ??0?$allocator@U?$pair@HH@std@@@std@@QAE@XZ proc near
.text$mn:0000718C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::_Wrap_alloc<std::allocator<std::pair<int,int>>>(void)+Ap
.text$mn:0000718C                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)+2Bp
.text$mn:0000718C
.text$mn:0000718C var_4           = dword ptr -4
.text$mn:0000718C
.text$mn:0000718C                 push    ebp
.text$mn:0000718D                 mov     ebp, esp
.text$mn:0000718F                 push    ecx
.text$mn:00007190                 mov     [ebp+var_4], ecx
.text$mn:00007193                 mov     eax, [ebp+var_4]
.text$mn:00007196                 mov     esp, ebp
.text$mn:00007198                 pop     ebp
.text$mn:00007199                 retn
.text$mn:00007199 ??0?$allocator@U?$pair@HH@std@@@std@@QAE@XZ endp
.text$mn:00007199
.text$mn:00007199 ; ---------------------------------------------------------------------------
.text$mn:0000719A                 align 4
.text$mn:0000719A _text$mn        ends
.text$mn:0000719A
.text$mn:0000719C ; ===========================================================================
.text$mn:0000719C
.text$mn:0000719C ; Segment type: Pure code
.text$mn:0000719C ; Segment permissions: Read/Execute
.text$mn:0000719C _text$mn        segment para public 'CODE' use32
.text$mn:0000719C                 assume cs:_text$mn
.text$mn:0000719C                 ;org 719Ch
.text$mn:0000719C ; COMDAT (pick any)
.text$mn:0000719C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000719C
.text$mn:0000719C ; =============== S U B R O U T I N E =======================================
.text$mn:0000719C
.text$mn:0000719C ; Attributes: bp-based frame
.text$mn:0000719C
.text$mn:0000719C ; public: __thiscall std::allocator<struct AssociationInfo>::allocator<struct AssociationInfo>(void)
.text$mn:0000719C                 public ??0?$allocator@UAssociationInfo@@@std@@QAE@XZ
.text$mn:0000719C ??0?$allocator@UAssociationInfo@@@std@@QAE@XZ proc near
.text$mn:0000719C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<AssociationInfo>>::_Wrap_alloc<std::allocator<AssociationInfo>>(void)+Ap
.text$mn:0000719C
.text$mn:0000719C var_4           = dword ptr -4
.text$mn:0000719C
.text$mn:0000719C                 push    ebp
.text$mn:0000719D                 mov     ebp, esp
.text$mn:0000719F                 push    ecx
.text$mn:000071A0                 mov     [ebp+var_4], ecx
.text$mn:000071A3                 mov     eax, [ebp+var_4]
.text$mn:000071A6                 mov     esp, ebp
.text$mn:000071A8                 pop     ebp
.text$mn:000071A9                 retn
.text$mn:000071A9 ??0?$allocator@UAssociationInfo@@@std@@QAE@XZ endp
.text$mn:000071A9
.text$mn:000071A9 ; ---------------------------------------------------------------------------
.text$mn:000071AA                 align 4
.text$mn:000071AA _text$mn        ends
.text$mn:000071AA
.text$mn:000071AC ; ===========================================================================
.text$mn:000071AC
.text$mn:000071AC ; Segment type: Pure code
.text$mn:000071AC ; Segment permissions: Read/Execute
.text$mn:000071AC _text$mn        segment para public 'CODE' use32
.text$mn:000071AC                 assume cs:_text$mn
.text$mn:000071AC                 ;org 71ACh
.text$mn:000071AC ; COMDAT (pick any)
.text$mn:000071AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071AC
.text$mn:000071AC ; =============== S U B R O U T I N E =======================================
.text$mn:000071AC
.text$mn:000071AC ; Attributes: bp-based frame
.text$mn:000071AC
.text$mn:000071AC ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:000071AC                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:000071AC ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:000071AC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)+Ap
.text$mn:000071AC                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp ...
.text$mn:000071AC
.text$mn:000071AC var_4           = dword ptr -4
.text$mn:000071AC
.text$mn:000071AC                 push    ebp
.text$mn:000071AD                 mov     ebp, esp
.text$mn:000071AF                 push    ecx
.text$mn:000071B0                 mov     [ebp+var_4], ecx
.text$mn:000071B3                 mov     eax, [ebp+var_4]
.text$mn:000071B6                 mov     esp, ebp
.text$mn:000071B8                 pop     ebp
.text$mn:000071B9                 retn
.text$mn:000071B9 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:000071B9
.text$mn:000071B9 ; ---------------------------------------------------------------------------
.text$mn:000071BA                 align 4
.text$mn:000071BA _text$mn        ends
.text$mn:000071BA
.text$mn:000071BC ; ===========================================================================
.text$mn:000071BC
.text$mn:000071BC ; Segment type: Pure code
.text$mn:000071BC ; Segment permissions: Read/Execute
.text$mn:000071BC _text$mn        segment para public 'CODE' use32
.text$mn:000071BC                 assume cs:_text$mn
.text$mn:000071BC                 ;org 71BCh
.text$mn:000071BC ; COMDAT (pick any)
.text$mn:000071BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071BC
.text$mn:000071BC ; =============== S U B R O U T I N E =======================================
.text$mn:000071BC
.text$mn:000071BC ; Attributes: bp-based frame
.text$mn:000071BC
.text$mn:000071BC ; public: __thiscall std::allocator<struct foundInfo>::allocator<struct foundInfo>(void)
.text$mn:000071BC                 public ??0?$allocator@UfoundInfo@@@std@@QAE@XZ
.text$mn:000071BC ??0?$allocator@UfoundInfo@@@std@@QAE@XZ proc near
.text$mn:000071BC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::_Wrap_alloc<std::allocator<foundInfo>>(void)+Ap
.text$mn:000071BC
.text$mn:000071BC var_4           = dword ptr -4
.text$mn:000071BC
.text$mn:000071BC                 push    ebp
.text$mn:000071BD                 mov     ebp, esp
.text$mn:000071BF                 push    ecx
.text$mn:000071C0                 mov     [ebp+var_4], ecx
.text$mn:000071C3                 mov     eax, [ebp+var_4]
.text$mn:000071C6                 mov     esp, ebp
.text$mn:000071C8                 pop     ebp
.text$mn:000071C9                 retn
.text$mn:000071C9 ??0?$allocator@UfoundInfo@@@std@@QAE@XZ endp
.text$mn:000071C9
.text$mn:000071C9 ; ---------------------------------------------------------------------------
.text$mn:000071CA                 align 4
.text$mn:000071CA _text$mn        ends
.text$mn:000071CA
.text$mn:000071CC ; ===========================================================================
.text$mn:000071CC
.text$mn:000071CC ; Segment type: Pure code
.text$mn:000071CC ; Segment permissions: Read/Execute
.text$mn:000071CC _text$mn        segment para public 'CODE' use32
.text$mn:000071CC                 assume cs:_text$mn
.text$mn:000071CC                 ;org 71CCh
.text$mn:000071CC ; COMDAT (pick any)
.text$mn:000071CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071CC
.text$mn:000071CC ; =============== S U B R O U T I N E =======================================
.text$mn:000071CC
.text$mn:000071CC ; Attributes: bp-based frame
.text$mn:000071CC
.text$mn:000071CC ; public: __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:000071CC                 public ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z
.text$mn:000071CC ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:000071CC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+Ep
.text$mn:000071CC                                         ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::select_on_container_copy_construction(void)+Ep
.text$mn:000071CC
.text$mn:000071CC var_4           = dword ptr -4
.text$mn:000071CC
.text$mn:000071CC                 push    ebp
.text$mn:000071CD                 mov     ebp, esp
.text$mn:000071CF                 push    ecx
.text$mn:000071D0                 mov     [ebp+var_4], ecx
.text$mn:000071D3                 mov     eax, [ebp+var_4]
.text$mn:000071D6                 mov     esp, ebp
.text$mn:000071D8                 pop     ebp
.text$mn:000071D9                 retn    4
.text$mn:000071D9 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:000071D9
.text$mn:000071D9 _text$mn        ends
.text$mn:000071D9
.text$mn:000071DC ; ===========================================================================
.text$mn:000071DC
.text$mn:000071DC ; Segment type: Pure code
.text$mn:000071DC ; Segment permissions: Read/Execute
.text$mn:000071DC _text$mn        segment para public 'CODE' use32
.text$mn:000071DC                 assume cs:_text$mn
.text$mn:000071DC                 ;org 71DCh
.text$mn:000071DC ; COMDAT (pick any)
.text$mn:000071DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071DC
.text$mn:000071DC ; =============== S U B R O U T I N E =======================================
.text$mn:000071DC
.text$mn:000071DC ; Attributes: bp-based frame
.text$mn:000071DC
.text$mn:000071DC ; public: __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(void)
.text$mn:000071DC                 public ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
.text$mn:000071DC ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ proc near
.text$mn:000071DC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+Ap
.text$mn:000071DC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+2Bp
.text$mn:000071DC
.text$mn:000071DC var_4           = dword ptr -4
.text$mn:000071DC
.text$mn:000071DC                 push    ebp
.text$mn:000071DD                 mov     ebp, esp
.text$mn:000071DF                 push    ecx
.text$mn:000071E0                 mov     [ebp+var_4], ecx
.text$mn:000071E3                 mov     eax, [ebp+var_4]
.text$mn:000071E6                 mov     esp, ebp
.text$mn:000071E8                 pop     ebp
.text$mn:000071E9                 retn
.text$mn:000071E9 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ endp
.text$mn:000071E9
.text$mn:000071E9 ; ---------------------------------------------------------------------------
.text$mn:000071EA                 align 4
.text$mn:000071EA _text$mn        ends
.text$mn:000071EA
.text$mn:000071EC ; ===========================================================================
.text$mn:000071EC
.text$mn:000071EC ; Segment type: Pure code
.text$mn:000071EC ; Segment permissions: Read/Execute
.text$mn:000071EC _text$mn        segment para public 'CODE' use32
.text$mn:000071EC                 assume cs:_text$mn
.text$mn:000071EC                 ;org 71ECh
.text$mn:000071EC ; COMDAT (pick any)
.text$mn:000071EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071EC
.text$mn:000071EC ; =============== S U B R O U T I N E =======================================
.text$mn:000071EC
.text$mn:000071EC ; Attributes: bp-based frame
.text$mn:000071EC
.text$mn:000071EC ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:000071EC                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:000071EC ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:000071EC                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:000071EC                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:000071EC
.text$mn:000071EC var_4           = dword ptr -4
.text$mn:000071EC
.text$mn:000071EC                 push    ebp
.text$mn:000071ED                 mov     ebp, esp
.text$mn:000071EF                 push    ecx
.text$mn:000071F0                 mov     [ebp+var_4], ecx
.text$mn:000071F3                 mov     eax, [ebp+var_4]
.text$mn:000071F6                 mov     esp, ebp
.text$mn:000071F8                 pop     ebp
.text$mn:000071F9                 retn    4
.text$mn:000071F9 ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:000071F9
.text$mn:000071F9 _text$mn        ends
.text$mn:000071F9
.text$mn:000071FC ; ===========================================================================
.text$mn:000071FC
.text$mn:000071FC ; Segment type: Pure code
.text$mn:000071FC ; Segment permissions: Read/Execute
.text$mn:000071FC _text$mn        segment para public 'CODE' use32
.text$mn:000071FC                 assume cs:_text$mn
.text$mn:000071FC                 ;org 71FCh
.text$mn:000071FC ; COMDAT (pick any)
.text$mn:000071FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071FC
.text$mn:000071FC ; =============== S U B R O U T I N E =======================================
.text$mn:000071FC
.text$mn:000071FC ; Attributes: bp-based frame
.text$mn:000071FC
.text$mn:000071FC ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000071FC                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:000071FC ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:000071FC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:000071FC
.text$mn:000071FC var_4           = dword ptr -4
.text$mn:000071FC
.text$mn:000071FC                 push    ebp
.text$mn:000071FD                 mov     ebp, esp
.text$mn:000071FF                 push    ecx
.text$mn:00007200                 mov     [ebp+var_4], ecx
.text$mn:00007203                 mov     eax, [ebp+var_4]
.text$mn:00007206                 mov     esp, ebp
.text$mn:00007208                 pop     ebp
.text$mn:00007209                 retn
.text$mn:00007209 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:00007209
.text$mn:00007209 ; ---------------------------------------------------------------------------
.text$mn:0000720A                 align 4
.text$mn:0000720A _text$mn        ends
.text$mn:0000720A
.text$mn:0000720C ; ===========================================================================
.text$mn:0000720C
.text$mn:0000720C ; Segment type: Pure code
.text$mn:0000720C ; Segment permissions: Read/Execute
.text$mn:0000720C _text$mn        segment para public 'CODE' use32
.text$mn:0000720C                 assume cs:_text$mn
.text$mn:0000720C                 ;org 720Ch
.text$mn:0000720C ; COMDAT (pick any)
.text$mn:0000720C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000720C
.text$mn:0000720C ; =============== S U B R O U T I N E =======================================
.text$mn:0000720C
.text$mn:0000720C ; Attributes: bp-based frame
.text$mn:0000720C
.text$mn:0000720C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:0000720C                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:0000720C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:0000720C                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:0000720C                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:0000720C
.text$mn:0000720C var_14          = dword ptr -14h
.text$mn:0000720C var_D           = byte ptr -0Dh
.text$mn:0000720C var_C           = dword ptr -0Ch
.text$mn:0000720C var_4           = dword ptr -4
.text$mn:0000720C Str             = dword ptr  8
.text$mn:0000720C
.text$mn:0000720C                 push    ebp
.text$mn:0000720D                 mov     ebp, esp
.text$mn:0000720F                 push    0FFFFFFFFh
.text$mn:00007211                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00007216                 mov     eax, large fs:0
.text$mn:0000721C                 push    eax
.text$mn:0000721D                 sub     esp, 8
.text$mn:00007220                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007225                 xor     eax, ebp
.text$mn:00007227                 push    eax
.text$mn:00007228                 lea     eax, [ebp+var_C]
.text$mn:0000722B                 mov     large fs:0, eax
.text$mn:00007231                 mov     [ebp+var_14], ecx
.text$mn:00007234                 lea     ecx, [ebp+var_D]
.text$mn:00007237                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:0000723C                 push    eax
.text$mn:0000723D                 mov     ecx, [ebp+var_14]
.text$mn:00007240                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00007245                 mov     [ebp+var_4], 0
.text$mn:0000724C                 push    0               ; Size
.text$mn:0000724E                 push    0               ; char
.text$mn:00007250                 mov     ecx, [ebp+var_14]
.text$mn:00007253                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00007258                 mov     eax, [ebp+Str]
.text$mn:0000725B                 push    eax             ; Str
.text$mn:0000725C                 mov     ecx, [ebp+var_14]
.text$mn:0000725F                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00007264                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000726B                 mov     eax, [ebp+var_14]
.text$mn:0000726E                 mov     ecx, [ebp+var_C]
.text$mn:00007271                 mov     large fs:0, ecx
.text$mn:00007278                 pop     ecx
.text$mn:00007279                 mov     esp, ebp
.text$mn:0000727B                 pop     ebp
.text$mn:0000727C                 retn    4
.text$mn:0000727C ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:0000727C
.text$mn:0000727C ; ---------------------------------------------------------------------------
.text$mn:0000727F                 align 10h
.text$mn:0000727F _text$mn        ends
.text$mn:0000727F
.text$x:00007280 ; ===========================================================================
.text$x:00007280
.text$x:00007280 ; Segment type: Pure code
.text$x:00007280 ; Segment permissions: Read/Execute
.text$x:00007280 _text$x         segment para public 'CODE' use32
.text$x:00007280                 assume cs:_text$x
.text$x:00007280                 ;org 7280h
.text$x:00007280 ; COMDAT (pick associative to section at 720C)
.text$x:00007280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007280
.text$x:00007280 ; =============== S U B R O U T I N E =======================================
.text$x:00007280
.text$x:00007280
.text$x:00007280 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00007280                                         ; DATA XREF: .xdata$x:0000EFD4o
.text$x:00007280                 mov     ecx, [ebp-14h]
.text$x:00007283                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00007283 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:00007283
.text$x:00007288
.text$x:00007288 ; =============== S U B R O U T I N E =======================================
.text$x:00007288
.text$x:00007288
.text$x:00007288 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00007288                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00007288
.text$x:00007288 arg_4           = dword ptr  8
.text$x:00007288
.text$x:00007288                 mov     edx, [esp+arg_4]
.text$x:0000728C                 lea     eax, [edx+0Ch]
.text$x:0000728F                 mov     ecx, [edx-0Ch]
.text$x:00007292                 xor     ecx, eax
.text$x:00007294                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007299                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:0000729E                 jmp     ___CxxFrameHandler3
.text$x:0000729E __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:0000729E
.text$x:0000729E ; ---------------------------------------------------------------------------
.text$x:000072A3                 align 4
.text$x:000072A3 _text$x         ends
.text$x:000072A3
.text$mn:000072A4 ; ===========================================================================
.text$mn:000072A4
.text$mn:000072A4 ; Segment type: Pure code
.text$mn:000072A4 ; Segment permissions: Read/Execute
.text$mn:000072A4 _text$mn        segment para public 'CODE' use32
.text$mn:000072A4                 assume cs:_text$mn
.text$mn:000072A4                 ;org 72A4h
.text$mn:000072A4 ; COMDAT (pick any)
.text$mn:000072A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072A4
.text$mn:000072A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000072A4
.text$mn:000072A4 ; Attributes: bp-based frame
.text$mn:000072A4
.text$mn:000072A4 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:000072A4                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:000072A4 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:000072A4                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+56p
.text$mn:000072A4
.text$mn:000072A4 var_14          = dword ptr -14h
.text$mn:000072A4 var_D           = byte ptr -0Dh
.text$mn:000072A4 var_C           = dword ptr -0Ch
.text$mn:000072A4 var_4           = dword ptr -4
.text$mn:000072A4 arg_0           = dword ptr  8
.text$mn:000072A4
.text$mn:000072A4                 push    ebp
.text$mn:000072A5                 mov     ebp, esp
.text$mn:000072A7                 push    0FFFFFFFFh
.text$mn:000072A9                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:000072AE                 mov     eax, large fs:0
.text$mn:000072B4                 push    eax
.text$mn:000072B5                 sub     esp, 8
.text$mn:000072B8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000072BD                 xor     eax, ebp
.text$mn:000072BF                 push    eax
.text$mn:000072C0                 lea     eax, [ebp+var_C]
.text$mn:000072C3                 mov     large fs:0, eax
.text$mn:000072C9                 mov     [ebp+var_14], ecx
.text$mn:000072CC                 lea     eax, [ebp+var_D]
.text$mn:000072CF                 push    eax
.text$mn:000072D0                 mov     ecx, [ebp+arg_0]
.text$mn:000072D3                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000072D8                 push    eax
.text$mn:000072D9                 mov     ecx, [ebp+var_14]
.text$mn:000072DC                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000072E1                 mov     [ebp+var_4], 0
.text$mn:000072E8                 push    0
.text$mn:000072EA                 push    0
.text$mn:000072EC                 mov     ecx, [ebp+var_14]
.text$mn:000072EF                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000072F4                 mov     ecx, [ebp+arg_0]
.text$mn:000072F7                 push    ecx
.text$mn:000072F8                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000072FD                 add     esp, 4
.text$mn:00007300                 push    eax
.text$mn:00007301                 mov     ecx, [ebp+var_14]
.text$mn:00007304                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00007309                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007310                 mov     eax, [ebp+var_14]
.text$mn:00007313                 mov     ecx, [ebp+var_C]
.text$mn:00007316                 mov     large fs:0, ecx
.text$mn:0000731D                 pop     ecx
.text$mn:0000731E                 mov     esp, ebp
.text$mn:00007320                 pop     ebp
.text$mn:00007321                 retn    4
.text$mn:00007321 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:00007321
.text$mn:00007321 _text$mn        ends
.text$mn:00007321
.text$x:00007324 ; ===========================================================================
.text$x:00007324
.text$x:00007324 ; Segment type: Pure code
.text$x:00007324 ; Segment permissions: Read/Execute
.text$x:00007324 _text$x         segment para public 'CODE' use32
.text$x:00007324                 assume cs:_text$x
.text$x:00007324                 ;org 7324h
.text$x:00007324 ; COMDAT (pick associative to section at 72A4)
.text$x:00007324                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007324
.text$x:00007324 ; =============== S U B R O U T I N E =======================================
.text$x:00007324
.text$x:00007324
.text$x:00007324 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:00007324                                         ; DATA XREF: .xdata$x:0000F378o
.text$x:00007324                 mov     ecx, [ebp-14h]
.text$x:00007327                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00007327 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:00007327
.text$x:0000732C
.text$x:0000732C ; =============== S U B R O U T I N E =======================================
.text$x:0000732C
.text$x:0000732C
.text$x:0000732C __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:0000732C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:0000732C
.text$x:0000732C arg_4           = dword ptr  8
.text$x:0000732C
.text$x:0000732C                 mov     edx, [esp+arg_4]
.text$x:00007330                 lea     eax, [edx+0Ch]
.text$x:00007333                 mov     ecx, [edx-0Ch]
.text$x:00007336                 xor     ecx, eax
.text$x:00007338                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000733D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$x:00007342                 jmp     ___CxxFrameHandler3
.text$x:00007342 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$x:00007342
.text$x:00007342 ; ---------------------------------------------------------------------------
.text$x:00007347                 align 4
.text$x:00007347 _text$x         ends
.text$x:00007347
.text$mn:00007348 ; ===========================================================================
.text$mn:00007348
.text$mn:00007348 ; Segment type: Pure code
.text$mn:00007348 ; Segment permissions: Read/Execute
.text$mn:00007348 _text$mn        segment para public 'CODE' use32
.text$mn:00007348                 assume cs:_text$mn
.text$mn:00007348                 ;org 7348h
.text$mn:00007348 ; COMDAT (pick any)
.text$mn:00007348                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007348
.text$mn:00007348 ; =============== S U B R O U T I N E =======================================
.text$mn:00007348
.text$mn:00007348 ; Attributes: bp-based frame
.text$mn:00007348
.text$mn:00007348 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00007348                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00007348 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00007348                                         ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+B4p
.text$mn:00007348                                         ; FunctionZoneParser::classParse(std::vector<foundInfo,std::allocator<foundInfo>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+20Ep ...
.text$mn:00007348
.text$mn:00007348 var_14          = dword ptr -14h
.text$mn:00007348 var_E           = byte ptr -0Eh
.text$mn:00007348 var_D           = byte ptr -0Dh
.text$mn:00007348 var_C           = dword ptr -0Ch
.text$mn:00007348 var_4           = dword ptr -4
.text$mn:00007348 arg_0           = dword ptr  8
.text$mn:00007348
.text$mn:00007348                 push    ebp
.text$mn:00007349                 mov     ebp, esp
.text$mn:0000734B                 push    0FFFFFFFFh
.text$mn:0000734D                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00007352                 mov     eax, large fs:0
.text$mn:00007358                 push    eax
.text$mn:00007359                 sub     esp, 8
.text$mn:0000735C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007361                 xor     eax, ebp
.text$mn:00007363                 push    eax
.text$mn:00007364                 lea     eax, [ebp+var_C]
.text$mn:00007367                 mov     large fs:0, eax
.text$mn:0000736D                 mov     [ebp+var_14], ecx
.text$mn:00007370                 lea     eax, [ebp+var_D]
.text$mn:00007373                 push    eax
.text$mn:00007374                 lea     ecx, [ebp+var_E]
.text$mn:00007377                 push    ecx
.text$mn:00007378                 mov     ecx, [ebp+arg_0]
.text$mn:0000737B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007380                 mov     ecx, eax
.text$mn:00007382                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:00007387                 push    eax
.text$mn:00007388                 mov     ecx, [ebp+var_14]
.text$mn:0000738B                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00007390                 mov     [ebp+var_4], 0
.text$mn:00007397                 push    0
.text$mn:00007399                 push    0
.text$mn:0000739B                 mov     ecx, [ebp+var_14]
.text$mn:0000739E                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000073A3                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000073A9                 push    edx
.text$mn:000073AA                 push    0
.text$mn:000073AC                 mov     eax, [ebp+arg_0]
.text$mn:000073AF                 push    eax
.text$mn:000073B0                 mov     ecx, [ebp+var_14]
.text$mn:000073B3                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000073B8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000073BF                 mov     eax, [ebp+var_14]
.text$mn:000073C2                 mov     ecx, [ebp+var_C]
.text$mn:000073C5                 mov     large fs:0, ecx
.text$mn:000073CC                 pop     ecx
.text$mn:000073CD                 mov     esp, ebp
.text$mn:000073CF                 pop     ebp
.text$mn:000073D0                 retn    4
.text$mn:000073D0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:000073D0
.text$mn:000073D0 ; ---------------------------------------------------------------------------
.text$mn:000073D3                 align 4
.text$mn:000073D3 _text$mn        ends
.text$mn:000073D3
.text$x:000073D4 ; ===========================================================================
.text$x:000073D4
.text$x:000073D4 ; Segment type: Pure code
.text$x:000073D4 ; Segment permissions: Read/Execute
.text$x:000073D4 _text$x         segment para public 'CODE' use32
.text$x:000073D4                 assume cs:_text$x
.text$x:000073D4                 ;org 73D4h
.text$x:000073D4 ; COMDAT (pick associative to section at 7348)
.text$x:000073D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000073D4
.text$x:000073D4 ; =============== S U B R O U T I N E =======================================
.text$x:000073D4
.text$x:000073D4
.text$x:000073D4 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:000073D4                                         ; DATA XREF: .xdata$x:0000F2F4o
.text$x:000073D4                 mov     ecx, [ebp-14h]
.text$x:000073D7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000073D7 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:000073D7
.text$x:000073DC
.text$x:000073DC ; =============== S U B R O U T I N E =======================================
.text$x:000073DC
.text$x:000073DC
.text$x:000073DC __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:000073DC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:000073DC
.text$x:000073DC arg_4           = dword ptr  8
.text$x:000073DC
.text$x:000073DC                 mov     edx, [esp+arg_4]
.text$x:000073E0                 lea     eax, [edx+0Ch]
.text$x:000073E3                 mov     ecx, [edx-0Ch]
.text$x:000073E6                 xor     ecx, eax
.text$x:000073E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000073ED                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:000073F2                 jmp     ___CxxFrameHandler3
.text$x:000073F2 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:000073F2
.text$x:000073F2 ; ---------------------------------------------------------------------------
.text$x:000073F7                 align 4
.text$x:000073F7 _text$x         ends
.text$x:000073F7
.text$mn:000073F8 ; ===========================================================================
.text$mn:000073F8
.text$mn:000073F8 ; Segment type: Pure code
.text$mn:000073F8 ; Segment permissions: Read/Execute
.text$mn:000073F8 _text$mn        segment para public 'CODE' use32
.text$mn:000073F8                 assume cs:_text$mn
.text$mn:000073F8                 ;org 73F8h
.text$mn:000073F8 ; COMDAT (pick any)
.text$mn:000073F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073F8
.text$mn:000073F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000073F8
.text$mn:000073F8 ; Attributes: bp-based frame
.text$mn:000073F8
.text$mn:000073F8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:000073F8                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:000073F8 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:000073F8                                         ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+5Bp
.text$mn:000073F8                                         ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+97p ...
.text$mn:000073F8
.text$mn:000073F8 var_14          = dword ptr -14h
.text$mn:000073F8 var_D           = byte ptr -0Dh
.text$mn:000073F8 var_C           = dword ptr -0Ch
.text$mn:000073F8 var_4           = dword ptr -4
.text$mn:000073F8 Str             = dword ptr  8
.text$mn:000073F8
.text$mn:000073F8                 push    ebp
.text$mn:000073F9                 mov     ebp, esp
.text$mn:000073FB                 push    0FFFFFFFFh
.text$mn:000073FD                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00007402                 mov     eax, large fs:0
.text$mn:00007408                 push    eax
.text$mn:00007409                 sub     esp, 8
.text$mn:0000740C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007411                 xor     eax, ebp
.text$mn:00007413                 push    eax
.text$mn:00007414                 lea     eax, [ebp+var_C]
.text$mn:00007417                 mov     large fs:0, eax
.text$mn:0000741D                 mov     [ebp+var_14], ecx
.text$mn:00007420                 lea     ecx, [ebp+var_D]
.text$mn:00007423                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00007428                 push    eax
.text$mn:00007429                 mov     ecx, [ebp+var_14]
.text$mn:0000742C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00007431                 mov     [ebp+var_4], 0
.text$mn:00007438                 push    0
.text$mn:0000743A                 push    0
.text$mn:0000743C                 mov     ecx, [ebp+var_14]
.text$mn:0000743F                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007444                 mov     eax, [ebp+Str]
.text$mn:00007447                 push    eax             ; Str
.text$mn:00007448                 mov     ecx, [ebp+var_14]
.text$mn:0000744B                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00007450                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007457                 mov     eax, [ebp+var_14]
.text$mn:0000745A                 mov     ecx, [ebp+var_C]
.text$mn:0000745D                 mov     large fs:0, ecx
.text$mn:00007464                 pop     ecx
.text$mn:00007465                 mov     esp, ebp
.text$mn:00007467                 pop     ebp
.text$mn:00007468                 retn    4
.text$mn:00007468 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:00007468
.text$mn:00007468 ; ---------------------------------------------------------------------------
.text$mn:0000746B                 align 4
.text$mn:0000746B _text$mn        ends
.text$mn:0000746B
.text$x:0000746C ; ===========================================================================
.text$x:0000746C
.text$x:0000746C ; Segment type: Pure code
.text$x:0000746C ; Segment permissions: Read/Execute
.text$x:0000746C _text$x         segment para public 'CODE' use32
.text$x:0000746C                 assume cs:_text$x
.text$x:0000746C                 ;org 746Ch
.text$x:0000746C ; COMDAT (pick associative to section at 73F8)
.text$x:0000746C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000746C
.text$x:0000746C ; =============== S U B R O U T I N E =======================================
.text$x:0000746C
.text$x:0000746C
.text$x:0000746C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:0000746C                                         ; DATA XREF: .xdata$x:0000F34Co
.text$x:0000746C                 mov     ecx, [ebp-14h]
.text$x:0000746F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000746F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:0000746F
.text$x:00007474
.text$x:00007474 ; =============== S U B R O U T I N E =======================================
.text$x:00007474
.text$x:00007474
.text$x:00007474 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:00007474                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:00007474
.text$x:00007474 arg_4           = dword ptr  8
.text$x:00007474
.text$x:00007474                 mov     edx, [esp+arg_4]
.text$x:00007478                 lea     eax, [edx+0Ch]
.text$x:0000747B                 mov     ecx, [edx-0Ch]
.text$x:0000747E                 xor     ecx, eax
.text$x:00007480                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007485                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:0000748A                 jmp     ___CxxFrameHandler3
.text$x:0000748A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:0000748A
.text$x:0000748A ; ---------------------------------------------------------------------------
.text$x:0000748F                 align 10h
.text$x:0000748F _text$x         ends
.text$x:0000748F
.text$mn:00007490 ; ===========================================================================
.text$mn:00007490
.text$mn:00007490 ; Segment type: Pure code
.text$mn:00007490 ; Segment permissions: Read/Execute
.text$mn:00007490 _text$mn        segment para public 'CODE' use32
.text$mn:00007490                 assume cs:_text$mn
.text$mn:00007490                 ;org 7490h
.text$mn:00007490 ; COMDAT (pick any)
.text$mn:00007490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007490
.text$mn:00007490 ; =============== S U B R O U T I N E =======================================
.text$mn:00007490
.text$mn:00007490 ; Attributes: bp-based frame
.text$mn:00007490
.text$mn:00007490 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00007490                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00007490 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00007490                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+243p
.text$mn:00007490                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+252p ...
.text$mn:00007490
.text$mn:00007490 var_14          = dword ptr -14h
.text$mn:00007490 var_D           = byte ptr -0Dh
.text$mn:00007490 var_C           = dword ptr -0Ch
.text$mn:00007490 var_4           = dword ptr -4
.text$mn:00007490
.text$mn:00007490                 push    ebp
.text$mn:00007491                 mov     ebp, esp
.text$mn:00007493                 push    0FFFFFFFFh
.text$mn:00007495                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:0000749A                 mov     eax, large fs:0
.text$mn:000074A0                 push    eax
.text$mn:000074A1                 sub     esp, 8
.text$mn:000074A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000074A9                 xor     eax, ebp
.text$mn:000074AB                 push    eax
.text$mn:000074AC                 lea     eax, [ebp+var_C]
.text$mn:000074AF                 mov     large fs:0, eax
.text$mn:000074B5                 mov     [ebp+var_14], ecx
.text$mn:000074B8                 lea     ecx, [ebp+var_D]
.text$mn:000074BB                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000074C0                 push    eax
.text$mn:000074C1                 mov     ecx, [ebp+var_14]
.text$mn:000074C4                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000074C9                 mov     [ebp+var_4], 0
.text$mn:000074D0                 push    0
.text$mn:000074D2                 push    0
.text$mn:000074D4                 mov     ecx, [ebp+var_14]
.text$mn:000074D7                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000074DC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000074E3                 mov     eax, [ebp+var_14]
.text$mn:000074E6                 mov     ecx, [ebp+var_C]
.text$mn:000074E9                 mov     large fs:0, ecx
.text$mn:000074F0                 pop     ecx
.text$mn:000074F1                 mov     esp, ebp
.text$mn:000074F3                 pop     ebp
.text$mn:000074F4                 retn
.text$mn:000074F4 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:000074F4
.text$mn:000074F4 ; ---------------------------------------------------------------------------
.text$mn:000074F5                 align 4
.text$mn:000074F5 _text$mn        ends
.text$mn:000074F5
.text$x:000074F8 ; ===========================================================================
.text$x:000074F8
.text$x:000074F8 ; Segment type: Pure code
.text$x:000074F8 ; Segment permissions: Read/Execute
.text$x:000074F8 _text$x         segment para public 'CODE' use32
.text$x:000074F8                 assume cs:_text$x
.text$x:000074F8                 ;org 74F8h
.text$x:000074F8 ; COMDAT (pick associative to section at 7490)
.text$x:000074F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000074F8
.text$x:000074F8 ; =============== S U B R O U T I N E =======================================
.text$x:000074F8
.text$x:000074F8
.text$x:000074F8 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:000074F8                                         ; DATA XREF: .xdata$x:0000F320o
.text$x:000074F8                 mov     ecx, [ebp-14h]
.text$x:000074FB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000074FB __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:000074FB
.text$x:00007500
.text$x:00007500 ; =============== S U B R O U T I N E =======================================
.text$x:00007500
.text$x:00007500
.text$x:00007500 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00007500                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00007500
.text$x:00007500 arg_4           = dword ptr  8
.text$x:00007500
.text$x:00007500                 mov     edx, [esp+arg_4]
.text$x:00007504                 lea     eax, [edx+0Ch]
.text$x:00007507                 mov     ecx, [edx-0Ch]
.text$x:0000750A                 xor     ecx, eax
.text$x:0000750C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007511                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00007516                 jmp     ___CxxFrameHandler3
.text$x:00007516 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00007516
.text$x:00007516 ; ---------------------------------------------------------------------------
.text$x:0000751B                 align 4
.text$x:0000751B _text$x         ends
.text$x:0000751B
.text$mn:0000751C ; ===========================================================================
.text$mn:0000751C
.text$mn:0000751C ; Segment type: Pure code
.text$mn:0000751C ; Segment permissions: Read/Execute
.text$mn:0000751C _text$mn        segment para public 'CODE' use32
.text$mn:0000751C                 assume cs:_text$mn
.text$mn:0000751C                 ;org 751Ch
.text$mn:0000751C ; COMDAT (pick any)
.text$mn:0000751C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000751C
.text$mn:0000751C ; =============== S U B R O U T I N E =======================================
.text$mn:0000751C
.text$mn:0000751C ; Attributes: bp-based frame
.text$mn:0000751C
.text$mn:0000751C ; public: __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>(void)
.text$mn:0000751C                 public ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ
.text$mn:0000751C ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ proc near
.text$mn:0000751C                                         ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+32p
.text$mn:0000751C                                         ; FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+3Ep ...
.text$mn:0000751C
.text$mn:0000751C var_14          = dword ptr -14h
.text$mn:0000751C var_D           = byte ptr -0Dh
.text$mn:0000751C var_C           = dword ptr -0Ch
.text$mn:0000751C var_4           = dword ptr -4
.text$mn:0000751C
.text$mn:0000751C                 push    ebp
.text$mn:0000751D                 mov     ebp, esp
.text$mn:0000751F                 push    0FFFFFFFFh
.text$mn:00007521                 push    offset __ehhandler$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ
.text$mn:00007526                 mov     eax, large fs:0
.text$mn:0000752C                 push    eax
.text$mn:0000752D                 sub     esp, 8
.text$mn:00007530                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007535                 xor     eax, ebp
.text$mn:00007537                 push    eax
.text$mn:00007538                 lea     eax, [ebp+var_C]
.text$mn:0000753B                 mov     large fs:0, eax
.text$mn:00007541                 mov     [ebp+var_14], ecx
.text$mn:00007544                 lea     ecx, [ebp+var_D]
.text$mn:00007547                 call    ??0?$allocator@U?$pair@HH@std@@@std@@QAE@XZ ; std::allocator<std::pair<int,int>>::allocator<std::pair<int,int>>(void)
.text$mn:0000754C                 push    eax
.text$mn:0000754D                 mov     ecx, [ebp+var_14]
.text$mn:00007550                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(std::allocator<std::pair<int,int>> const &)
.text$mn:00007555                 mov     [ebp+var_4], 0
.text$mn:0000755C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007563                 mov     eax, [ebp+var_14]
.text$mn:00007566                 mov     ecx, [ebp+var_C]
.text$mn:00007569                 mov     large fs:0, ecx
.text$mn:00007570                 pop     ecx
.text$mn:00007571                 mov     esp, ebp
.text$mn:00007573                 pop     ebp
.text$mn:00007574                 retn
.text$mn:00007574 ??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ endp
.text$mn:00007574
.text$mn:00007574 ; ---------------------------------------------------------------------------
.text$mn:00007575                 align 4
.text$mn:00007575 _text$mn        ends
.text$mn:00007575
.text$x:00007578 ; ===========================================================================
.text$x:00007578
.text$x:00007578 ; Segment type: Pure code
.text$x:00007578 ; Segment permissions: Read/Execute
.text$x:00007578 _text$x         segment para public 'CODE' use32
.text$x:00007578                 assume cs:_text$x
.text$x:00007578                 ;org 7578h
.text$x:00007578 ; COMDAT (pick associative to section at 751C)
.text$x:00007578                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007578
.text$x:00007578 ; =============== S U B R O U T I N E =======================================
.text$x:00007578
.text$x:00007578
.text$x:00007578 __unwindfunclet$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00007578                                         ; DATA XREF: .xdata$x:00010654o
.text$x:00007578                 mov     ecx, [ebp-14h]
.text$x:0000757B                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(void)
.text$x:0000757B __unwindfunclet$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ$0 endp
.text$x:0000757B
.text$x:00007580
.text$x:00007580 ; =============== S U B R O U T I N E =======================================
.text$x:00007580
.text$x:00007580
.text$x:00007580 __ehhandler$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ proc near
.text$x:00007580                                         ; DATA XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)+5o
.text$x:00007580
.text$x:00007580 arg_4           = dword ptr  8
.text$x:00007580
.text$x:00007580                 mov     edx, [esp+arg_4]
.text$x:00007584                 lea     eax, [edx+0Ch]
.text$x:00007587                 mov     ecx, [edx-0Ch]
.text$x:0000758A                 xor     ecx, eax
.text$x:0000758C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007591                 mov     eax, offset __ehfuncinfo$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ
.text$x:00007596                 jmp     ___CxxFrameHandler3
.text$x:00007596 __ehhandler$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ endp
.text$x:00007596
.text$x:00007596 ; ---------------------------------------------------------------------------
.text$x:0000759B                 align 4
.text$x:0000759B _text$x         ends
.text$x:0000759B
.text$mn:0000759C ; ===========================================================================
.text$mn:0000759C
.text$mn:0000759C ; Segment type: Pure code
.text$mn:0000759C ; Segment permissions: Read/Execute
.text$mn:0000759C _text$mn        segment para public 'CODE' use32
.text$mn:0000759C                 assume cs:_text$mn
.text$mn:0000759C                 ;org 759Ch
.text$mn:0000759C ; COMDAT (pick any)
.text$mn:0000759C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000759C
.text$mn:0000759C ; =============== S U B R O U T I N E =======================================
.text$mn:0000759C
.text$mn:0000759C ; Attributes: bp-based frame
.text$mn:0000759C
.text$mn:0000759C ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> const &)
.text$mn:0000759C                 public ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:0000759C ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z proc near
.text$mn:0000759C                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+215p
.text$mn:0000759C                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+308p ...
.text$mn:0000759C
.text$mn:0000759C var_34          = dword ptr -34h
.text$mn:0000759C var_30          = dword ptr -30h
.text$mn:0000759C var_2C          = dword ptr -2Ch
.text$mn:0000759C var_28          = dword ptr -28h
.text$mn:0000759C var_24          = dword ptr -24h
.text$mn:0000759C var_20          = dword ptr -20h
.text$mn:0000759C var_1C          = dword ptr -1Ch
.text$mn:0000759C var_18          = dword ptr -18h
.text$mn:0000759C var_12          = byte ptr -12h
.text$mn:0000759C var_11          = byte ptr -11h
.text$mn:0000759C var_10          = dword ptr -10h
.text$mn:0000759C var_C           = dword ptr -0Ch
.text$mn:0000759C var_4           = dword ptr -4
.text$mn:0000759C arg_0           = dword ptr  8
.text$mn:0000759C
.text$mn:0000759C ; FUNCTION CHUNK AT .text$mn:00007686 SIZE 00000009 BYTES
.text$mn:0000759C ; FUNCTION CHUNK AT .text$mn:00007696 SIZE 0000001E BYTES
.text$mn:0000759C
.text$mn:0000759C                 push    ebp
.text$mn:0000759D                 mov     ebp, esp
.text$mn:0000759F                 push    0FFFFFFFFh
.text$mn:000075A1                 push    offset __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:000075A6                 mov     eax, large fs:0
.text$mn:000075AC                 push    eax
.text$mn:000075AD                 push    ecx
.text$mn:000075AE                 sub     esp, 24h
.text$mn:000075B1                 push    ebx
.text$mn:000075B2                 push    esi
.text$mn:000075B3                 push    edi
.text$mn:000075B4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000075B9                 xor     eax, ebp
.text$mn:000075BB                 push    eax
.text$mn:000075BC                 lea     eax, [ebp+var_C]
.text$mn:000075BF                 mov     large fs:0, eax
.text$mn:000075C5                 mov     [ebp+var_10], esp
.text$mn:000075C8                 mov     [ebp+var_18], ecx
.text$mn:000075CB                 lea     eax, [ebp+var_11]
.text$mn:000075CE                 push    eax
.text$mn:000075CF                 lea     ecx, [ebp+var_12]
.text$mn:000075D2                 push    ecx
.text$mn:000075D3                 mov     ecx, [ebp+arg_0]
.text$mn:000075D6                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:000075DB                 mov     ecx, eax
.text$mn:000075DD                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(void)
.text$mn:000075E2                 push    eax
.text$mn:000075E3                 mov     ecx, [ebp+var_18]
.text$mn:000075E6                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:000075EB                 mov     [ebp+var_4], 0
.text$mn:000075F2                 mov     ecx, [ebp+arg_0]
.text$mn:000075F5                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000075FA                 push    eax
.text$mn:000075FB                 mov     ecx, [ebp+var_18]
.text$mn:000075FE                 call    ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAE_NI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)
.text$mn:00007603                 movzx   edx, al
.text$mn:00007606                 test    edx, edx
.text$mn:00007608                 jz      loc_7696
.text$mn:0000760E                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007612                 mov     eax, [ebp+var_18]
.text$mn:00007615                 mov     ecx, [eax+4]
.text$mn:00007618                 push    ecx
.text$mn:00007619                 sub     esp, 0Ch
.text$mn:0000761C                 mov     edx, esp
.text$mn:0000761E                 mov     [ebp+var_28], esp
.text$mn:00007621                 push    edx
.text$mn:00007622                 mov     ecx, [ebp+arg_0]
.text$mn:00007625                 call    ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)
.text$mn:0000762A                 mov     [ebp+var_1C], eax
.text$mn:0000762D                 mov     eax, [ebp+var_1C]
.text$mn:00007630                 mov     [ebp+var_2C], eax
.text$mn:00007633                 mov     byte ptr [ebp+var_4], 2
.text$mn:00007637                 sub     esp, 0Ch
.text$mn:0000763A                 mov     ecx, esp
.text$mn:0000763C                 mov     [ebp+var_30], esp
.text$mn:0000763F                 push    ecx
.text$mn:00007640                 mov     ecx, [ebp+arg_0]
.text$mn:00007643                 call    ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)
.text$mn:00007648                 mov     [ebp+var_20], eax
.text$mn:0000764B                 mov     edx, [ebp+var_20]
.text$mn:0000764E                 mov     [ebp+var_34], edx
.text$mn:00007651                 mov     byte ptr [ebp+var_4], 3
.text$mn:00007655                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007659                 mov     ecx, [ebp+var_18]
.text$mn:0000765C                 call    ??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00007661                 mov     [ebp+var_24], eax
.text$mn:00007664                 mov     eax, [ebp+var_18]
.text$mn:00007667                 mov     ecx, [ebp+var_24]
.text$mn:0000766A                 mov     [eax+8], ecx
.text$mn:0000766D                 jmp     short loc_7686
.text$mn:0000766D ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z endp
.text$mn:0000766D
.text$mn:0000766F
.text$mn:0000766F ; =============== S U B R O U T I N E =======================================
.text$mn:0000766F
.text$mn:0000766F ; Attributes: noreturn
.text$mn:0000766F
.text$mn:0000766F __catch$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$0 proc near
.text$mn:0000766F                                         ; DATA XREF: .xdata$x:0000F728o
.text$mn:0000766F                 mov     ecx, [ebp-18h]
.text$mn:00007672                 call    ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:00007677                 push    0
.text$mn:00007679                 push    0
.text$mn:0000767B                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000767B __catch$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$0 endp
.text$mn:0000767B
.text$mn:00007680 ; ---------------------------------------------------------------------------
.text$mn:00007680                 mov     eax, offset $LN11
.text$mn:00007685                 retn
.text$mn:00007686 ; ---------------------------------------------------------------------------
.text$mn:00007686 ; START OF FUNCTION CHUNK FOR ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:00007686
.text$mn:00007686 loc_7686:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+D1j
.text$mn:00007686                 mov     [ebp+var_4], 0
.text$mn:0000768D                 jmp     short loc_7696
.text$mn:0000768D ; END OF FUNCTION CHUNK FOR ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:0000768F
.text$mn:0000768F ; =============== S U B R O U T I N E =======================================
.text$mn:0000768F
.text$mn:0000768F
.text$mn:0000768F $LN11           proc near               ; DATA XREF: .text$mn:00007680o
.text$mn:0000768F                 mov     dword ptr [ebp-4], 0
.text$mn:0000768F $LN11           endp ; sp-analysis failed
.text$mn:0000768F
.text$mn:00007696 ; START OF FUNCTION CHUNK FOR ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:00007696
.text$mn:00007696 loc_7696:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+6Cj
.text$mn:00007696                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+F1j
.text$mn:00007696                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000769D                 mov     eax, [ebp+var_18]
.text$mn:000076A0                 mov     ecx, [ebp+var_C]
.text$mn:000076A3                 mov     large fs:0, ecx
.text$mn:000076AA                 pop     ecx
.text$mn:000076AB                 pop     edi
.text$mn:000076AC                 pop     esi
.text$mn:000076AD                 pop     ebx
.text$mn:000076AE                 mov     esp, ebp
.text$mn:000076B0                 pop     ebp
.text$mn:000076B1                 retn    4
.text$mn:000076B1 ; END OF FUNCTION CHUNK FOR ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$mn:000076B1 _text$mn        ends
.text$mn:000076B1
.text$x:000076B4 ; ===========================================================================
.text$x:000076B4
.text$x:000076B4 ; Segment type: Pure code
.text$x:000076B4 ; Segment permissions: Read/Execute
.text$x:000076B4 _text$x         segment para public 'CODE' use32
.text$x:000076B4                 assume cs:_text$x
.text$x:000076B4                 ;org 76B4h
.text$x:000076B4 ; COMDAT (pick associative to section at 759C)
.text$x:000076B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000076B4
.text$x:000076B4 ; =============== S U B R O U T I N E =======================================
.text$x:000076B4
.text$x:000076B4
.text$x:000076B4 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$2 proc near
.text$x:000076B4                                         ; DATA XREF: .xdata$x:0000F768o
.text$x:000076B4                 mov     ecx, [ebp-18h]
.text$x:000076B7                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000076B7 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$2 endp
.text$x:000076B7
.text$x:000076BC
.text$x:000076BC ; =============== S U B R O U T I N E =======================================
.text$x:000076BC
.text$x:000076BC
.text$x:000076BC __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$3 proc near
.text$x:000076BC                                         ; DATA XREF: .xdata$x:0000F778o
.text$x:000076BC                 mov     ecx, [ebp-28h]
.text$x:000076BF                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000076BF __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$3 endp
.text$x:000076BF
.text$x:000076C4
.text$x:000076C4 ; =============== S U B R O U T I N E =======================================
.text$x:000076C4
.text$x:000076C4
.text$x:000076C4 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$4 proc near
.text$x:000076C4                                         ; DATA XREF: .xdata$x:0000F780o
.text$x:000076C4                 mov     ecx, [ebp-30h]
.text$x:000076C7                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:000076C7 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$4 endp
.text$x:000076C7
.text$x:000076CC
.text$x:000076CC ; =============== S U B R O U T I N E =======================================
.text$x:000076CC
.text$x:000076CC
.text$x:000076CC __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z proc near
.text$x:000076CC                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+5o
.text$x:000076CC
.text$x:000076CC arg_4           = dword ptr  8
.text$x:000076CC
.text$x:000076CC                 mov     edx, [esp+arg_4]
.text$x:000076D0                 lea     eax, [edx+0Ch]
.text$x:000076D3                 mov     ecx, [edx-38h]
.text$x:000076D6                 xor     ecx, eax
.text$x:000076D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000076DD                 mov     eax, offset __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.text$x:000076E2                 jmp     ___CxxFrameHandler3
.text$x:000076E2 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z endp
.text$x:000076E2
.text$x:000076E2 ; ---------------------------------------------------------------------------
.text$x:000076E7                 align 4
.text$x:000076E7 _text$x         ends
.text$x:000076E7
.text$mn:000076E8 ; ===========================================================================
.text$mn:000076E8
.text$mn:000076E8 ; Segment type: Pure code
.text$mn:000076E8 ; Segment permissions: Read/Execute
.text$mn:000076E8 _text$mn        segment para public 'CODE' use32
.text$mn:000076E8                 assume cs:_text$mn
.text$mn:000076E8                 ;org 76E8h
.text$mn:000076E8 ; COMDAT (pick any)
.text$mn:000076E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076E8
.text$mn:000076E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000076E8
.text$mn:000076E8 ; Attributes: bp-based frame
.text$mn:000076E8
.text$mn:000076E8 ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:000076E8                 public ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:000076E8 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:000076E8                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+197p
.text$mn:000076E8                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+1A6p ...
.text$mn:000076E8
.text$mn:000076E8 var_14          = dword ptr -14h
.text$mn:000076E8 var_D           = byte ptr -0Dh
.text$mn:000076E8 var_C           = dword ptr -0Ch
.text$mn:000076E8 var_4           = dword ptr -4
.text$mn:000076E8
.text$mn:000076E8                 push    ebp
.text$mn:000076E9                 mov     ebp, esp
.text$mn:000076EB                 push    0FFFFFFFFh
.text$mn:000076ED                 push    offset __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:000076F2                 mov     eax, large fs:0
.text$mn:000076F8                 push    eax
.text$mn:000076F9                 sub     esp, 8
.text$mn:000076FC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007701                 xor     eax, ebp
.text$mn:00007703                 push    eax
.text$mn:00007704                 lea     eax, [ebp+var_C]
.text$mn:00007707                 mov     large fs:0, eax
.text$mn:0000770D                 mov     [ebp+var_14], ecx
.text$mn:00007710                 lea     ecx, [ebp+var_D]
.text$mn:00007713                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:00007718                 push    eax
.text$mn:00007719                 mov     ecx, [ebp+var_14]
.text$mn:0000771C                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:00007721                 mov     [ebp+var_4], 0
.text$mn:00007728                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000772F                 mov     eax, [ebp+var_14]
.text$mn:00007732                 mov     ecx, [ebp+var_C]
.text$mn:00007735                 mov     large fs:0, ecx
.text$mn:0000773C                 pop     ecx
.text$mn:0000773D                 mov     esp, ebp
.text$mn:0000773F                 pop     ebp
.text$mn:00007740                 retn
.text$mn:00007740 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:00007740
.text$mn:00007740 ; ---------------------------------------------------------------------------
.text$mn:00007741                 align 4
.text$mn:00007741 _text$mn        ends
.text$mn:00007741
.text$x:00007744 ; ===========================================================================
.text$x:00007744
.text$x:00007744 ; Segment type: Pure code
.text$x:00007744 ; Segment permissions: Read/Execute
.text$x:00007744 _text$x         segment para public 'CODE' use32
.text$x:00007744                 assume cs:_text$x
.text$x:00007744                 ;org 7744h
.text$x:00007744 ; COMDAT (pick associative to section at 76E8)
.text$x:00007744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007744
.text$x:00007744 ; =============== S U B R O U T I N E =======================================
.text$x:00007744
.text$x:00007744
.text$x:00007744 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00007744                                         ; DATA XREF: .xdata$x:0000F6F4o
.text$x:00007744                 mov     ecx, [ebp-14h]
.text$x:00007747                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00007747 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:00007747
.text$x:0000774C
.text$x:0000774C ; =============== S U B R O U T I N E =======================================
.text$x:0000774C
.text$x:0000774C
.text$x:0000774C __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:0000774C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:0000774C
.text$x:0000774C arg_4           = dword ptr  8
.text$x:0000774C
.text$x:0000774C                 mov     edx, [esp+arg_4]
.text$x:00007750                 lea     eax, [edx+0Ch]
.text$x:00007753                 mov     ecx, [edx-0Ch]
.text$x:00007756                 xor     ecx, eax
.text$x:00007758                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000775D                 mov     eax, offset __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:00007762                 jmp     ___CxxFrameHandler3
.text$x:00007762 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:00007762
.text$x:00007762 ; ---------------------------------------------------------------------------
.text$x:00007767                 align 4
.text$x:00007767 _text$x         ends
.text$x:00007767
.text$mn:00007768 ; ===========================================================================
.text$mn:00007768
.text$mn:00007768 ; Segment type: Pure code
.text$mn:00007768 ; Segment permissions: Read/Execute
.text$mn:00007768 _text$mn        segment para public 'CODE' use32
.text$mn:00007768                 assume cs:_text$mn
.text$mn:00007768                 ;org 7768h
.text$mn:00007768 ; COMDAT (pick any)
.text$mn:00007768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007768
.text$mn:00007768 ; =============== S U B R O U T I N E =======================================
.text$mn:00007768
.text$mn:00007768 ; Attributes: bp-based frame
.text$mn:00007768
.text$mn:00007768 ; public: __thiscall AssociationInfo::AssociationInfo(struct AssociationInfo const &)
.text$mn:00007768                 public ??0AssociationInfo@@QAE@ABU0@@Z
.text$mn:00007768 ??0AssociationInfo@@QAE@ABU0@@Z proc near
.text$mn:00007768                                         ; CODE XREF: std::allocator<AssociationInfo>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)+56p
.text$mn:00007768
.text$mn:00007768 var_10          = dword ptr -10h
.text$mn:00007768 var_C           = dword ptr -0Ch
.text$mn:00007768 var_4           = dword ptr -4
.text$mn:00007768 arg_0           = dword ptr  8
.text$mn:00007768
.text$mn:00007768                 push    ebp
.text$mn:00007769                 mov     ebp, esp
.text$mn:0000776B                 push    0FFFFFFFFh
.text$mn:0000776D                 push    offset __ehhandler$??0AssociationInfo@@QAE@ABU0@@Z
.text$mn:00007772                 mov     eax, large fs:0
.text$mn:00007778                 push    eax
.text$mn:00007779                 push    ecx
.text$mn:0000777A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000777F                 xor     eax, ebp
.text$mn:00007781                 push    eax
.text$mn:00007782                 lea     eax, [ebp+var_C]
.text$mn:00007785                 mov     large fs:0, eax
.text$mn:0000778B                 mov     [ebp+var_10], ecx
.text$mn:0000778E                 mov     eax, [ebp+var_10]
.text$mn:00007791                 mov     ecx, [ebp+arg_0]
.text$mn:00007794                 mov     edx, [ecx]
.text$mn:00007796                 mov     [eax], edx
.text$mn:00007798                 mov     eax, [ebp+var_10]
.text$mn:0000779B                 mov     ecx, [ebp+arg_0]
.text$mn:0000779E                 mov     edx, [ecx+4]
.text$mn:000077A1                 mov     [eax+4], edx
.text$mn:000077A4                 mov     eax, [ebp+arg_0]
.text$mn:000077A7                 add     eax, 8
.text$mn:000077AA                 push    eax
.text$mn:000077AB                 mov     ecx, [ebp+var_10]
.text$mn:000077AE                 add     ecx, 8
.text$mn:000077B1                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000077B6                 mov     [ebp+var_4], 0
.text$mn:000077BD                 mov     ecx, [ebp+arg_0]
.text$mn:000077C0                 add     ecx, 24h ; '$'
.text$mn:000077C3                 push    ecx
.text$mn:000077C4                 mov     ecx, [ebp+var_10]
.text$mn:000077C7                 add     ecx, 24h ; '$'
.text$mn:000077CA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000077CF                 mov     byte ptr [ebp+var_4], 1
.text$mn:000077D3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000077DA                 mov     eax, [ebp+var_10]
.text$mn:000077DD                 mov     ecx, [ebp+var_C]
.text$mn:000077E0                 mov     large fs:0, ecx
.text$mn:000077E7                 pop     ecx
.text$mn:000077E8                 mov     esp, ebp
.text$mn:000077EA                 pop     ebp
.text$mn:000077EB                 retn    4
.text$mn:000077EB ??0AssociationInfo@@QAE@ABU0@@Z endp
.text$mn:000077EB
.text$mn:000077EB ; ---------------------------------------------------------------------------
.text$mn:000077EE                 align 10h
.text$mn:000077EE _text$mn        ends
.text$mn:000077EE
.text$x:000077F0 ; ===========================================================================
.text$x:000077F0
.text$x:000077F0 ; Segment type: Pure code
.text$x:000077F0 ; Segment permissions: Read/Execute
.text$x:000077F0 _text$x         segment para public 'CODE' use32
.text$x:000077F0                 assume cs:_text$x
.text$x:000077F0                 ;org 77F0h
.text$x:000077F0 ; COMDAT (pick associative to section at 7768)
.text$x:000077F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000077F0
.text$x:000077F0 ; =============== S U B R O U T I N E =======================================
.text$x:000077F0
.text$x:000077F0
.text$x:000077F0 __unwindfunclet$??0AssociationInfo@@QAE@ABU0@@Z$0 proc near
.text$x:000077F0                                         ; DATA XREF: .xdata$x:00010150o
.text$x:000077F0                 mov     ecx, [ebp-10h]
.text$x:000077F3                 add     ecx, 8
.text$x:000077F6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000077F6 __unwindfunclet$??0AssociationInfo@@QAE@ABU0@@Z$0 endp
.text$x:000077F6
.text$x:000077FB
.text$x:000077FB ; =============== S U B R O U T I N E =======================================
.text$x:000077FB
.text$x:000077FB
.text$x:000077FB __unwindfunclet$??0AssociationInfo@@QAE@ABU0@@Z$1 proc near
.text$x:000077FB                                         ; DATA XREF: .xdata$x:00010158o
.text$x:000077FB                 mov     ecx, [ebp-10h]
.text$x:000077FE                 add     ecx, 24h ; '$'
.text$x:00007801                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007801 __unwindfunclet$??0AssociationInfo@@QAE@ABU0@@Z$1 endp
.text$x:00007801
.text$x:00007806
.text$x:00007806 ; =============== S U B R O U T I N E =======================================
.text$x:00007806
.text$x:00007806
.text$x:00007806 __ehhandler$??0AssociationInfo@@QAE@ABU0@@Z proc near
.text$x:00007806                                         ; DATA XREF: AssociationInfo::AssociationInfo(AssociationInfo const &)+5o
.text$x:00007806
.text$x:00007806 arg_4           = dword ptr  8
.text$x:00007806
.text$x:00007806                 mov     edx, [esp+arg_4]
.text$x:0000780A                 lea     eax, [edx+0Ch]
.text$x:0000780D                 mov     ecx, [edx-8]
.text$x:00007810                 xor     ecx, eax
.text$x:00007812                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007817                 mov     eax, offset __ehfuncinfo$??0AssociationInfo@@QAE@ABU0@@Z
.text$x:0000781C                 jmp     ___CxxFrameHandler3
.text$x:0000781C __ehhandler$??0AssociationInfo@@QAE@ABU0@@Z endp
.text$x:0000781C
.text$x:0000781C ; ---------------------------------------------------------------------------
.text$x:00007821                 align 4
.text$x:00007821 _text$x         ends
.text$x:00007821
.text$mn:00007824 ; ===========================================================================
.text$mn:00007824
.text$mn:00007824 ; Segment type: Pure code
.text$mn:00007824 ; Segment permissions: Read/Execute
.text$mn:00007824 _text$mn        segment para public 'CODE' use32
.text$mn:00007824                 assume cs:_text$mn
.text$mn:00007824                 ;org 7824h
.text$mn:00007824 ; COMDAT (pick any)
.text$mn:00007824                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007824
.text$mn:00007824 ; =============== S U B R O U T I N E =======================================
.text$mn:00007824
.text$mn:00007824 ; Attributes: bp-based frame
.text$mn:00007824
.text$mn:00007824 ; int __stdcall AssociationInfo::AssociationInfo(int, int, wchar_t *Str, wchar_t *)
.text$mn:00007824                 public ??0AssociationInfo@@QAE@HHPB_W0@Z
.text$mn:00007824 ??0AssociationInfo@@QAE@HHPB_W0@Z proc near
.text$mn:00007824                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+CAFp
.text$mn:00007824
.text$mn:00007824 var_10          = dword ptr -10h
.text$mn:00007824 var_C           = dword ptr -0Ch
.text$mn:00007824 var_4           = dword ptr -4
.text$mn:00007824 arg_0           = dword ptr  8
.text$mn:00007824 arg_4           = dword ptr  0Ch
.text$mn:00007824 Str             = dword ptr  10h
.text$mn:00007824 arg_C           = dword ptr  14h
.text$mn:00007824
.text$mn:00007824                 push    ebp
.text$mn:00007825                 mov     ebp, esp
.text$mn:00007827                 push    0FFFFFFFFh
.text$mn:00007829                 push    offset __ehhandler$??0AssociationInfo@@QAE@HHPB_W0@Z
.text$mn:0000782E                 mov     eax, large fs:0
.text$mn:00007834                 push    eax
.text$mn:00007835                 push    ecx
.text$mn:00007836                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000783B                 xor     eax, ebp
.text$mn:0000783D                 push    eax
.text$mn:0000783E                 lea     eax, [ebp+var_C]
.text$mn:00007841                 mov     large fs:0, eax
.text$mn:00007847                 mov     [ebp+var_10], ecx
.text$mn:0000784A                 mov     eax, [ebp+var_10]
.text$mn:0000784D                 mov     ecx, [ebp+arg_0]
.text$mn:00007850                 mov     [eax], ecx
.text$mn:00007852                 mov     edx, [ebp+var_10]
.text$mn:00007855                 mov     eax, [ebp+arg_4]
.text$mn:00007858                 mov     [edx+4], eax
.text$mn:0000785B                 mov     ecx, [ebp+var_10]
.text$mn:0000785E                 add     ecx, 8
.text$mn:00007861                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007866                 mov     [ebp+var_4], 0
.text$mn:0000786D                 mov     ecx, [ebp+var_10]
.text$mn:00007870                 add     ecx, 24h ; '$'
.text$mn:00007873                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007878                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000787C                 cmp     [ebp+Str], 0
.text$mn:00007880                 jz      short loc_7893
.text$mn:00007882                 mov     ecx, [ebp+Str]
.text$mn:00007885                 push    ecx             ; Str
.text$mn:00007886                 mov     ecx, [ebp+var_10]
.text$mn:00007889                 add     ecx, 8
.text$mn:0000788C                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00007891                 jmp     short loc_78A3
.text$mn:00007893 ; ---------------------------------------------------------------------------
.text$mn:00007893
.text$mn:00007893 loc_7893:                               ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+5Cj
.text$mn:00007893                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00007898                 mov     ecx, [ebp+var_10]
.text$mn:0000789B                 add     ecx, 8
.text$mn:0000789E                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000078A3
.text$mn:000078A3 loc_78A3:                               ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+6Dj
.text$mn:000078A3                 cmp     [ebp+arg_C], 0
.text$mn:000078A7                 jz      short loc_78BA
.text$mn:000078A9                 mov     edx, [ebp+arg_C]
.text$mn:000078AC                 push    edx             ; Str
.text$mn:000078AD                 mov     ecx, [ebp+var_10]
.text$mn:000078B0                 add     ecx, 24h ; '$'
.text$mn:000078B3                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000078B8                 jmp     short loc_78CA
.text$mn:000078BA ; ---------------------------------------------------------------------------
.text$mn:000078BA
.text$mn:000078BA loc_78BA:                               ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+83j
.text$mn:000078BA                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:000078BF                 mov     ecx, [ebp+var_10]
.text$mn:000078C2                 add     ecx, 24h ; '$'
.text$mn:000078C5                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000078CA
.text$mn:000078CA loc_78CA:                               ; CODE XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+94j
.text$mn:000078CA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000078D1                 mov     eax, [ebp+var_10]
.text$mn:000078D4                 mov     ecx, [ebp+var_C]
.text$mn:000078D7                 mov     large fs:0, ecx
.text$mn:000078DE                 pop     ecx
.text$mn:000078DF                 mov     esp, ebp
.text$mn:000078E1                 pop     ebp
.text$mn:000078E2                 retn    10h
.text$mn:000078E2 ??0AssociationInfo@@QAE@HHPB_W0@Z endp
.text$mn:000078E2
.text$mn:000078E2 ; ---------------------------------------------------------------------------
.text$mn:000078E5                 align 4
.text$mn:000078E5 _text$mn        ends
.text$mn:000078E5
.text$x:000078E8 ; ===========================================================================
.text$x:000078E8
.text$x:000078E8 ; Segment type: Pure code
.text$x:000078E8 ; Segment permissions: Read/Execute
.text$x:000078E8 _text$x         segment para public 'CODE' use32
.text$x:000078E8                 assume cs:_text$x
.text$x:000078E8                 ;org 78E8h
.text$x:000078E8 ; COMDAT (pick associative to section at 7824)
.text$x:000078E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000078E8
.text$x:000078E8 ; =============== S U B R O U T I N E =======================================
.text$x:000078E8
.text$x:000078E8
.text$x:000078E8 __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$0 proc near
.text$x:000078E8                                         ; DATA XREF: .xdata$x:000100E8o
.text$x:000078E8                 mov     ecx, [ebp-10h]
.text$x:000078EB                 add     ecx, 8
.text$x:000078EE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000078EE __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$0 endp
.text$x:000078EE
.text$x:000078F3
.text$x:000078F3 ; =============== S U B R O U T I N E =======================================
.text$x:000078F3
.text$x:000078F3
.text$x:000078F3 __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$1 proc near
.text$x:000078F3                                         ; DATA XREF: .xdata$x:000100F0o
.text$x:000078F3                 mov     ecx, [ebp-10h]
.text$x:000078F6                 add     ecx, 24h ; '$'
.text$x:000078F9                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000078F9 __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$1 endp
.text$x:000078F9
.text$x:000078FE
.text$x:000078FE ; =============== S U B R O U T I N E =======================================
.text$x:000078FE
.text$x:000078FE
.text$x:000078FE __ehhandler$??0AssociationInfo@@QAE@HHPB_W0@Z proc near
.text$x:000078FE                                         ; DATA XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *)+5o
.text$x:000078FE
.text$x:000078FE arg_4           = dword ptr  8
.text$x:000078FE
.text$x:000078FE                 mov     edx, [esp+arg_4]
.text$x:00007902                 lea     eax, [edx+0Ch]
.text$x:00007905                 mov     ecx, [edx-8]
.text$x:00007908                 xor     ecx, eax
.text$x:0000790A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000790F                 mov     eax, offset __ehfuncinfo$??0AssociationInfo@@QAE@HHPB_W0@Z
.text$x:00007914                 jmp     ___CxxFrameHandler3
.text$x:00007914 __ehhandler$??0AssociationInfo@@QAE@HHPB_W0@Z endp
.text$x:00007914
.text$x:00007914 ; ---------------------------------------------------------------------------
.text$x:00007919                 align 4
.text$x:00007919 _text$x         ends
.text$x:00007919
.text$mn:0000791C ; ===========================================================================
.text$mn:0000791C
.text$mn:0000791C ; Segment type: Pure code
.text$mn:0000791C ; Segment permissions: Read/Execute
.text$mn:0000791C _text$mn        segment para public 'CODE' use32
.text$mn:0000791C                 assume cs:_text$mn
.text$mn:0000791C                 ;org 791Ch
.text$mn:0000791C ; COMDAT (pick any)
.text$mn:0000791C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000791C
.text$mn:0000791C ; =============== S U B R O U T I N E =======================================
.text$mn:0000791C
.text$mn:0000791C ; Attributes: bp-based frame
.text$mn:0000791C
.text$mn:0000791C ; int __stdcall FunctionMixParser::FunctionMixParser(wchar_t *Str, wchar_t *, int, char, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, char, int, int, int, int, int, int, int, int, int, int, int)
.text$mn:0000791C                 public ??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z
.text$mn:0000791C ??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z proc near
.text$mn:0000791C                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+57Ep
.text$mn:0000791C
.text$mn:0000791C var_5C          = dword ptr -5Ch
.text$mn:0000791C var_58          = dword ptr -58h
.text$mn:0000791C var_54          = dword ptr -54h
.text$mn:0000791C var_50          = dword ptr -50h
.text$mn:0000791C var_4C          = dword ptr -4Ch
.text$mn:0000791C var_48          = dword ptr -48h
.text$mn:0000791C var_44          = dword ptr -44h
.text$mn:0000791C var_40          = dword ptr -40h
.text$mn:0000791C var_3C          = dword ptr -3Ch
.text$mn:0000791C var_38          = dword ptr -38h
.text$mn:0000791C var_34          = dword ptr -34h
.text$mn:0000791C var_30          = dword ptr -30h
.text$mn:0000791C var_2C          = dword ptr -2Ch
.text$mn:0000791C var_28          = dword ptr -28h
.text$mn:0000791C var_24          = dword ptr -24h
.text$mn:0000791C var_20          = dword ptr -20h
.text$mn:0000791C var_1C          = dword ptr -1Ch
.text$mn:0000791C var_18          = dword ptr -18h
.text$mn:0000791C var_14          = dword ptr -14h
.text$mn:0000791C var_10          = dword ptr -10h
.text$mn:0000791C var_C           = dword ptr -0Ch
.text$mn:0000791C var_4           = dword ptr -4
.text$mn:0000791C Str             = dword ptr  8
.text$mn:0000791C arg_4           = dword ptr  0Ch
.text$mn:0000791C arg_8           = dword ptr  10h
.text$mn:0000791C arg_C           = byte ptr  14h
.text$mn:0000791C arg_28          = dword ptr  30h
.text$mn:0000791C arg_44          = dword ptr  4Ch
.text$mn:0000791C arg_60          = dword ptr  68h
.text$mn:0000791C arg_70          = byte ptr  78h
.text$mn:0000791C arg_8C          = dword ptr  94h
.text$mn:0000791C arg_9C          = dword ptr  0A4h
.text$mn:0000791C
.text$mn:0000791C                 push    ebp
.text$mn:0000791D                 mov     ebp, esp
.text$mn:0000791F                 push    0FFFFFFFFh
.text$mn:00007921                 push    offset __ehhandler$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z ; int
.text$mn:00007926                 mov     eax, large fs:0
.text$mn:0000792C                 push    eax             ; int
.text$mn:0000792D                 sub     esp, 50h
.text$mn:00007930                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007935                 xor     eax, ebp
.text$mn:00007937                 push    eax
.text$mn:00007938                 lea     eax, [ebp+var_C]
.text$mn:0000793B                 mov     large fs:0, eax
.text$mn:00007941                 mov     [ebp+var_10], ecx
.text$mn:00007944                 mov     [ebp+var_4], 5
.text$mn:0000794B                 sub     esp, 10h
.text$mn:0000794E                 mov     ecx, esp
.text$mn:00007950                 mov     [ebp+var_2C], esp
.text$mn:00007953                 lea     eax, [ebp+arg_8C]
.text$mn:00007959                 push    eax             ; int
.text$mn:0000795A                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:0000795F                 mov     [ebp+var_14], eax
.text$mn:00007962                 mov     ecx, [ebp+var_14]
.text$mn:00007965                 mov     [ebp+var_30], ecx
.text$mn:00007968                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000796C                 sub     esp, 1Ch
.text$mn:0000796F                 mov     ecx, esp
.text$mn:00007971                 mov     [ebp+var_34], esp
.text$mn:00007974                 lea     edx, [ebp+arg_70]
.text$mn:00007977                 push    edx
.text$mn:00007978                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000797D                 mov     [ebp+var_18], eax
.text$mn:00007980                 mov     eax, [ebp+var_18]
.text$mn:00007983                 mov     [ebp+var_38], eax
.text$mn:00007986                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000798A                 sub     esp, 10h
.text$mn:0000798D                 mov     ecx, esp
.text$mn:0000798F                 mov     [ebp+var_3C], esp
.text$mn:00007992                 lea     edx, [ebp+arg_60]
.text$mn:00007995                 push    edx             ; int
.text$mn:00007996                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:0000799B                 mov     [ebp+var_1C], eax
.text$mn:0000799E                 mov     eax, [ebp+var_1C]
.text$mn:000079A1                 mov     [ebp+var_40], eax
.text$mn:000079A4                 mov     byte ptr [ebp+var_4], 8
.text$mn:000079A8                 sub     esp, 1Ch
.text$mn:000079AB                 mov     ecx, esp
.text$mn:000079AD                 mov     [ebp+var_44], esp
.text$mn:000079B0                 lea     edx, [ebp+arg_44]
.text$mn:000079B3                 push    edx             ; int
.text$mn:000079B4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000079B9                 mov     [ebp+var_20], eax
.text$mn:000079BC                 mov     eax, [ebp+var_20]
.text$mn:000079BF                 mov     [ebp+var_48], eax
.text$mn:000079C2                 mov     byte ptr [ebp+var_4], 9
.text$mn:000079C6                 sub     esp, 1Ch
.text$mn:000079C9                 mov     ecx, esp
.text$mn:000079CB                 mov     [ebp+var_4C], esp
.text$mn:000079CE                 lea     edx, [ebp+arg_28]
.text$mn:000079D1                 push    edx             ; int
.text$mn:000079D2                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000079D7                 mov     [ebp+var_24], eax
.text$mn:000079DA                 mov     eax, [ebp+var_24]
.text$mn:000079DD                 mov     [ebp+var_50], eax
.text$mn:000079E0                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:000079E4                 sub     esp, 1Ch
.text$mn:000079E7                 mov     ecx, esp
.text$mn:000079E9                 mov     [ebp+var_54], esp
.text$mn:000079EC                 lea     edx, [ebp+arg_C]
.text$mn:000079EF                 push    edx
.text$mn:000079F0                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000079F5                 mov     [ebp+var_28], eax
.text$mn:000079F8                 mov     eax, [ebp+var_28]
.text$mn:000079FB                 mov     [ebp+var_58], eax
.text$mn:000079FE                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00007A02                 mov     ecx, [ebp+arg_8]
.text$mn:00007A05                 push    ecx             ; int
.text$mn:00007A06                 mov     edx, [ebp+arg_4]
.text$mn:00007A09                 push    edx             ; wchar_t *
.text$mn:00007A0A                 mov     eax, [ebp+Str]
.text$mn:00007A0D                 push    eax             ; Str
.text$mn:00007A0E                 mov     byte ptr [ebp+var_4], 5
.text$mn:00007A12                 mov     ecx, [ebp+var_10]
.text$mn:00007A15                 call    ??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z ; FunctionZoneParser::FunctionZoneParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)
.text$mn:00007A1A                 mov     [ebp+var_5C], eax
.text$mn:00007A1D                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00007A21                 mov     ecx, [ebp+var_10]
.text$mn:00007A24                 mov     dword ptr [ecx], offset ??_7FunctionMixParser@@6B@ ; const FunctionMixParser::`vftable'
.text$mn:00007A2A                 mov     edx, [ebp+var_10]
.text$mn:00007A2D                 mov     eax, [ebp+arg_9C]
.text$mn:00007A33                 mov     [edx+104h], eax
.text$mn:00007A39                 mov     byte ptr [ebp+var_4], 4
.text$mn:00007A3D                 lea     ecx, [ebp+arg_C]
.text$mn:00007A40                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007A45                 mov     byte ptr [ebp+var_4], 3
.text$mn:00007A49                 lea     ecx, [ebp+arg_28]
.text$mn:00007A4C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007A51                 mov     byte ptr [ebp+var_4], 2
.text$mn:00007A55                 lea     ecx, [ebp+arg_44]
.text$mn:00007A58                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007A5D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007A61                 lea     ecx, [ebp+arg_60]
.text$mn:00007A64                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007A69                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007A6D                 lea     ecx, [ebp+arg_70]
.text$mn:00007A70                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007A75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007A7C                 lea     ecx, [ebp+arg_8C]
.text$mn:00007A82                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007A87                 mov     eax, [ebp+var_10]
.text$mn:00007A8A                 mov     ecx, [ebp+var_C]
.text$mn:00007A8D                 mov     large fs:0, ecx
.text$mn:00007A94                 pop     ecx
.text$mn:00007A95                 mov     esp, ebp
.text$mn:00007A97                 pop     ebp
.text$mn:00007A98                 retn    0A0h
.text$mn:00007A98 ??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z endp
.text$mn:00007A98
.text$mn:00007A98 ; ---------------------------------------------------------------------------
.text$mn:00007A9B                 align 4
.text$mn:00007A9B _text$mn        ends
.text$mn:00007A9B
.text$x:00007A9C ; ===========================================================================
.text$x:00007A9C
.text$x:00007A9C ; Segment type: Pure code
.text$x:00007A9C ; Segment permissions: Read/Execute
.text$x:00007A9C _text$x         segment para public 'CODE' use32
.text$x:00007A9C                 assume cs:_text$x
.text$x:00007A9C                 ;org 7A9Ch
.text$x:00007A9C ; COMDAT (pick associative to section at 791C)
.text$x:00007A9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007A9C
.text$x:00007A9C ; =============== S U B R O U T I N E =======================================
.text$x:00007A9C
.text$x:00007A9C
.text$x:00007A9C __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$0 proc near
.text$x:00007A9C                                         ; DATA XREF: .xdata$x:00010080o
.text$x:00007A9C                 lea     ecx, [ebp+94h]
.text$x:00007AA2                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007AA2 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$0 endp
.text$x:00007AA2
.text$x:00007AA7
.text$x:00007AA7 ; =============== S U B R O U T I N E =======================================
.text$x:00007AA7
.text$x:00007AA7
.text$x:00007AA7 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$1 proc near
.text$x:00007AA7                                         ; DATA XREF: .xdata$x:00010088o
.text$x:00007AA7                 lea     ecx, [ebp+78h]
.text$x:00007AAA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007AAA __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$1 endp
.text$x:00007AAA
.text$x:00007AAF
.text$x:00007AAF ; =============== S U B R O U T I N E =======================================
.text$x:00007AAF
.text$x:00007AAF
.text$x:00007AAF __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$2 proc near
.text$x:00007AAF                                         ; DATA XREF: .xdata$x:00010090o
.text$x:00007AAF                 lea     ecx, [ebp+68h]
.text$x:00007AB2                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007AB2 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$2 endp
.text$x:00007AB2
.text$x:00007AB7
.text$x:00007AB7 ; =============== S U B R O U T I N E =======================================
.text$x:00007AB7
.text$x:00007AB7
.text$x:00007AB7 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$3 proc near
.text$x:00007AB7                                         ; DATA XREF: .xdata$x:00010098o
.text$x:00007AB7                 lea     ecx, [ebp+4Ch]
.text$x:00007ABA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007ABA __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$3 endp
.text$x:00007ABA
.text$x:00007ABF
.text$x:00007ABF ; =============== S U B R O U T I N E =======================================
.text$x:00007ABF
.text$x:00007ABF
.text$x:00007ABF __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$4 proc near
.text$x:00007ABF                                         ; DATA XREF: .xdata$x:000100A0o
.text$x:00007ABF                 lea     ecx, [ebp+30h]
.text$x:00007AC2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007AC2 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$4 endp
.text$x:00007AC2
.text$x:00007AC7
.text$x:00007AC7 ; =============== S U B R O U T I N E =======================================
.text$x:00007AC7
.text$x:00007AC7
.text$x:00007AC7 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$5 proc near
.text$x:00007AC7                                         ; DATA XREF: .xdata$x:000100A8o
.text$x:00007AC7                 lea     ecx, [ebp+14h]
.text$x:00007ACA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007ACA __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$5 endp
.text$x:00007ACA
.text$x:00007ACF
.text$x:00007ACF ; =============== S U B R O U T I N E =======================================
.text$x:00007ACF
.text$x:00007ACF
.text$x:00007ACF __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$6 proc near
.text$x:00007ACF                                         ; DATA XREF: .xdata$x:000100B0o
.text$x:00007ACF                 mov     ecx, [ebp-2Ch]
.text$x:00007AD2                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007AD2 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$6 endp
.text$x:00007AD2
.text$x:00007AD7
.text$x:00007AD7 ; =============== S U B R O U T I N E =======================================
.text$x:00007AD7
.text$x:00007AD7
.text$x:00007AD7 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$7 proc near
.text$x:00007AD7                                         ; DATA XREF: .xdata$x:000100B8o
.text$x:00007AD7                 mov     ecx, [ebp-34h]
.text$x:00007ADA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007ADA __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$7 endp
.text$x:00007ADA
.text$x:00007ADF
.text$x:00007ADF ; =============== S U B R O U T I N E =======================================
.text$x:00007ADF
.text$x:00007ADF
.text$x:00007ADF __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$8 proc near
.text$x:00007ADF                                         ; DATA XREF: .xdata$x:000100C0o
.text$x:00007ADF                 mov     ecx, [ebp-3Ch]
.text$x:00007AE2                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007AE2 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$8 endp
.text$x:00007AE2
.text$x:00007AE7
.text$x:00007AE7 ; =============== S U B R O U T I N E =======================================
.text$x:00007AE7
.text$x:00007AE7
.text$x:00007AE7 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$9 proc near
.text$x:00007AE7                                         ; DATA XREF: .xdata$x:000100C8o
.text$x:00007AE7                 mov     ecx, [ebp-44h]
.text$x:00007AEA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007AEA __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$9 endp
.text$x:00007AEA
.text$x:00007AEF
.text$x:00007AEF ; =============== S U B R O U T I N E =======================================
.text$x:00007AEF
.text$x:00007AEF
.text$x:00007AEF __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$10 proc near
.text$x:00007AEF                                         ; DATA XREF: .xdata$x:000100D0o
.text$x:00007AEF                 mov     ecx, [ebp-4Ch]
.text$x:00007AF2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007AF2 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$10 endp
.text$x:00007AF2
.text$x:00007AF7
.text$x:00007AF7 ; =============== S U B R O U T I N E =======================================
.text$x:00007AF7
.text$x:00007AF7
.text$x:00007AF7 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$11 proc near
.text$x:00007AF7                                         ; DATA XREF: .xdata$x:000100D8o
.text$x:00007AF7                 mov     ecx, [ebp-54h]
.text$x:00007AFA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007AFA __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$11 endp
.text$x:00007AFA
.text$x:00007AFF
.text$x:00007AFF ; =============== S U B R O U T I N E =======================================
.text$x:00007AFF
.text$x:00007AFF
.text$x:00007AFF __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$12 proc near
.text$x:00007AFF                                         ; DATA XREF: .xdata$x:000100E0o
.text$x:00007AFF                 mov     ecx, [ebp-10h]  ; this
.text$x:00007B02                 jmp     ??1FunctionZoneParser@@QAE@XZ ; FunctionZoneParser::~FunctionZoneParser(void)
.text$x:00007B02 __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$12 endp
.text$x:00007B02
.text$x:00007B07
.text$x:00007B07 ; =============== S U B R O U T I N E =======================================
.text$x:00007B07
.text$x:00007B07
.text$x:00007B07 __ehhandler$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z proc near
.text$x:00007B07                                         ; DATA XREF: FunctionMixParser::FunctionMixParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,FunctionUnitParser *)+5o
.text$x:00007B07
.text$x:00007B07 arg_4           = dword ptr  8
.text$x:00007B07
.text$x:00007B07                 mov     edx, [esp+arg_4]
.text$x:00007B0B                 lea     eax, [edx+0Ch]
.text$x:00007B0E                 mov     ecx, [edx-54h]
.text$x:00007B11                 xor     ecx, eax
.text$x:00007B13                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007B18                 mov     eax, offset __ehfuncinfo$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z
.text$x:00007B1D                 jmp     ___CxxFrameHandler3
.text$x:00007B1D __ehhandler$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z endp
.text$x:00007B1D
.text$x:00007B1D ; ---------------------------------------------------------------------------
.text$x:00007B22                 align 4
.text$x:00007B22 _text$x         ends
.text$x:00007B22
.text$mn:00007B24 ; ===========================================================================
.text$mn:00007B24
.text$mn:00007B24 ; Segment type: Pure code
.text$mn:00007B24 ; Segment permissions: Read/Execute
.text$mn:00007B24 _text$mn        segment para public 'CODE' use32
.text$mn:00007B24                 assume cs:_text$mn
.text$mn:00007B24                 ;org 7B24h
.text$mn:00007B24 ; COMDAT (pick any)
.text$mn:00007B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B24
.text$mn:00007B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B24
.text$mn:00007B24 ; Attributes: bp-based frame
.text$mn:00007B24
.text$mn:00007B24 ; int __stdcall FunctionParser::FunctionParser(wchar_t *Str, wchar_t *, int, char, int, int, int, int, int, int, char, int, int, int, char, int, int, int)
.text$mn:00007B24                 public ??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z
.text$mn:00007B24 ??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z proc near
.text$mn:00007B24                                         ; CODE XREF: FunctionUnitParser::FunctionUnitParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+9Cp
.text$mn:00007B24                                         ; FunctionZoneParser::FunctionZoneParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+9Fp
.text$mn:00007B24
.text$mn:00007B24 var_14          = dword ptr -14h
.text$mn:00007B24 var_10          = dword ptr -10h
.text$mn:00007B24 var_C           = dword ptr -0Ch
.text$mn:00007B24 var_4           = dword ptr -4
.text$mn:00007B24 Str             = dword ptr  8
.text$mn:00007B24 arg_4           = dword ptr  0Ch
.text$mn:00007B24 arg_8           = dword ptr  10h
.text$mn:00007B24 arg_C           = byte ptr  14h
.text$mn:00007B24 arg_28          = byte ptr  30h
.text$mn:00007B24 arg_38          = byte ptr  40h
.text$mn:00007B24
.text$mn:00007B24                 push    ebp
.text$mn:00007B25                 mov     ebp, esp
.text$mn:00007B27                 push    0FFFFFFFFh
.text$mn:00007B29                 push    offset __ehhandler$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z
.text$mn:00007B2E                 mov     eax, large fs:0
.text$mn:00007B34                 push    eax
.text$mn:00007B35                 sub     esp, 8
.text$mn:00007B38                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007B3D                 xor     eax, ebp
.text$mn:00007B3F                 push    eax
.text$mn:00007B40                 lea     eax, [ebp+var_C]
.text$mn:00007B43                 mov     large fs:0, eax
.text$mn:00007B49                 mov     [ebp+var_10], ecx
.text$mn:00007B4C                 mov     [ebp+var_4], 2
.text$mn:00007B53                 mov     eax, [ebp+var_10]
.text$mn:00007B56                 mov     dword ptr [eax], offset ??_7FunctionParser@@6B@ ; const FunctionParser::`vftable'
.text$mn:00007B5C                 mov     ecx, [ebp+Str]
.text$mn:00007B5F                 push    ecx             ; Str
.text$mn:00007B60                 mov     ecx, [ebp+var_10]
.text$mn:00007B63                 add     ecx, 4
.text$mn:00007B66                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00007B6B                 mov     byte ptr [ebp+var_4], 3
.text$mn:00007B6F                 mov     edx, [ebp+arg_4]
.text$mn:00007B72                 push    edx             ; Str
.text$mn:00007B73                 mov     ecx, [ebp+var_10]
.text$mn:00007B76                 add     ecx, 20h ; ' '
.text$mn:00007B79                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00007B7E                 mov     byte ptr [ebp+var_4], 4
.text$mn:00007B82                 cmp     [ebp+arg_8], 0
.text$mn:00007B86                 jz      short loc_7B90
.text$mn:00007B88                 mov     eax, [ebp+arg_8]
.text$mn:00007B8B                 mov     [ebp+var_14], eax
.text$mn:00007B8E                 jmp     short loc_7B97
.text$mn:00007B90 ; ---------------------------------------------------------------------------
.text$mn:00007B90
.text$mn:00007B90 loc_7B90:                               ; CODE XREF: FunctionParser::FunctionParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+62j
.text$mn:00007B90                 mov     [ebp+var_14], offset ??_C@_11LOCGONAA@?$AA?$AA@ ; `string'
.text$mn:00007B97
.text$mn:00007B97 loc_7B97:                               ; CODE XREF: FunctionParser::FunctionParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+6Aj
.text$mn:00007B97                 mov     ecx, [ebp+var_14]
.text$mn:00007B9A                 push    ecx             ; Str
.text$mn:00007B9B                 mov     ecx, [ebp+var_10]
.text$mn:00007B9E                 add     ecx, 3Ch ; '<'
.text$mn:00007BA1                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00007BA6                 mov     byte ptr [ebp+var_4], 5
.text$mn:00007BAA                 lea     edx, [ebp+arg_C]
.text$mn:00007BAD                 push    edx
.text$mn:00007BAE                 mov     ecx, [ebp+var_10]
.text$mn:00007BB1                 add     ecx, 58h ; 'X'
.text$mn:00007BB4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007BB9                 mov     byte ptr [ebp+var_4], 6
.text$mn:00007BBD                 lea     eax, [ebp+arg_28]
.text$mn:00007BC0                 push    eax
.text$mn:00007BC1                 mov     ecx, [ebp+var_10]
.text$mn:00007BC4                 add     ecx, 74h ; 't'
.text$mn:00007BC7                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00007BCC                 mov     byte ptr [ebp+var_4], 7
.text$mn:00007BD0                 lea     ecx, [ebp+arg_38]
.text$mn:00007BD3                 push    ecx
.text$mn:00007BD4                 mov     ecx, [ebp+var_10]
.text$mn:00007BD7                 add     ecx, 84h ; 'ä'
.text$mn:00007BDD                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00007BE2                 mov     byte ptr [ebp+var_4], 8
.text$mn:00007BE6                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007BEA                 lea     ecx, [ebp+arg_C]
.text$mn:00007BED                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007BF2                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007BF6                 lea     ecx, [ebp+arg_28]
.text$mn:00007BF9                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007BFE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007C05                 lea     ecx, [ebp+arg_38]
.text$mn:00007C08                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007C0D                 mov     eax, [ebp+var_10]
.text$mn:00007C10                 mov     ecx, [ebp+var_C]
.text$mn:00007C13                 mov     large fs:0, ecx
.text$mn:00007C1A                 pop     ecx
.text$mn:00007C1B                 mov     esp, ebp
.text$mn:00007C1D                 pop     ebp
.text$mn:00007C1E                 retn    48h
.text$mn:00007C1E ??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z endp
.text$mn:00007C1E
.text$mn:00007C1E ; ---------------------------------------------------------------------------
.text$mn:00007C21                 align 4
.text$mn:00007C21 _text$mn        ends
.text$mn:00007C21
.text$x:00007C24 ; ===========================================================================
.text$x:00007C24
.text$x:00007C24 ; Segment type: Pure code
.text$x:00007C24 ; Segment permissions: Read/Execute
.text$x:00007C24 _text$x         segment para public 'CODE' use32
.text$x:00007C24                 assume cs:_text$x
.text$x:00007C24                 ;org 7C24h
.text$x:00007C24 ; COMDAT (pick associative to section at 7B24)
.text$x:00007C24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007C24
.text$x:00007C24 ; =============== S U B R O U T I N E =======================================
.text$x:00007C24
.text$x:00007C24
.text$x:00007C24 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$0 proc near
.text$x:00007C24                                         ; DATA XREF: .xdata$x:0000F9F4o
.text$x:00007C24                 lea     ecx, [ebp+40h]
.text$x:00007C27                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007C27 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$0 endp
.text$x:00007C27
.text$x:00007C2C
.text$x:00007C2C ; =============== S U B R O U T I N E =======================================
.text$x:00007C2C
.text$x:00007C2C
.text$x:00007C2C __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$1 proc near
.text$x:00007C2C                                         ; DATA XREF: .xdata$x:0000F9FCo
.text$x:00007C2C                 lea     ecx, [ebp+30h]
.text$x:00007C2F                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007C2F __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$1 endp
.text$x:00007C2F
.text$x:00007C34
.text$x:00007C34 ; =============== S U B R O U T I N E =======================================
.text$x:00007C34
.text$x:00007C34
.text$x:00007C34 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$2 proc near
.text$x:00007C34                                         ; DATA XREF: .xdata$x:0000FA04o
.text$x:00007C34                 lea     ecx, [ebp+14h]
.text$x:00007C37                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007C37 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$2 endp
.text$x:00007C37
.text$x:00007C3C
.text$x:00007C3C ; =============== S U B R O U T I N E =======================================
.text$x:00007C3C
.text$x:00007C3C
.text$x:00007C3C __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$3 proc near
.text$x:00007C3C                                         ; DATA XREF: .xdata$x:0000FA0Co
.text$x:00007C3C                 mov     ecx, [ebp-10h]
.text$x:00007C3F                 add     ecx, 4
.text$x:00007C42                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007C42 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$3 endp
.text$x:00007C42
.text$x:00007C47
.text$x:00007C47 ; =============== S U B R O U T I N E =======================================
.text$x:00007C47
.text$x:00007C47
.text$x:00007C47 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$4 proc near
.text$x:00007C47                                         ; DATA XREF: .xdata$x:0000FA14o
.text$x:00007C47                 mov     ecx, [ebp-10h]
.text$x:00007C4A                 add     ecx, 20h ; ' '
.text$x:00007C4D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007C4D __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$4 endp
.text$x:00007C4D
.text$x:00007C52
.text$x:00007C52 ; =============== S U B R O U T I N E =======================================
.text$x:00007C52
.text$x:00007C52
.text$x:00007C52 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$5 proc near
.text$x:00007C52                                         ; DATA XREF: .xdata$x:0000FA1Co
.text$x:00007C52                 mov     ecx, [ebp-10h]
.text$x:00007C55                 add     ecx, 3Ch ; '<'
.text$x:00007C58                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007C58 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$5 endp
.text$x:00007C58
.text$x:00007C5D
.text$x:00007C5D ; =============== S U B R O U T I N E =======================================
.text$x:00007C5D
.text$x:00007C5D
.text$x:00007C5D __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$6 proc near
.text$x:00007C5D                                         ; DATA XREF: .xdata$x:0000FA24o
.text$x:00007C5D                 mov     ecx, [ebp-10h]
.text$x:00007C60                 add     ecx, 58h ; 'X'
.text$x:00007C63                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007C63 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$6 endp
.text$x:00007C63
.text$x:00007C68
.text$x:00007C68 ; =============== S U B R O U T I N E =======================================
.text$x:00007C68
.text$x:00007C68
.text$x:00007C68 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$7 proc near
.text$x:00007C68                                         ; DATA XREF: .xdata$x:0000FA2Co
.text$x:00007C68                 mov     ecx, [ebp-10h]
.text$x:00007C6B                 add     ecx, 74h ; 't'
.text$x:00007C6E                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007C6E __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$7 endp
.text$x:00007C6E
.text$x:00007C73
.text$x:00007C73 ; =============== S U B R O U T I N E =======================================
.text$x:00007C73
.text$x:00007C73
.text$x:00007C73 __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$8 proc near
.text$x:00007C73                                         ; DATA XREF: .xdata$x:0000FA34o
.text$x:00007C73                 mov     ecx, [ebp-10h]
.text$x:00007C76                 add     ecx, 84h ; 'ä'
.text$x:00007C7C                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007C7C __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$8 endp
.text$x:00007C7C
.text$x:00007C81
.text$x:00007C81 ; =============== S U B R O U T I N E =======================================
.text$x:00007C81
.text$x:00007C81
.text$x:00007C81 __ehhandler$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z proc near
.text$x:00007C81                                         ; DATA XREF: FunctionParser::FunctionParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+5o
.text$x:00007C81
.text$x:00007C81 arg_4           = dword ptr  8
.text$x:00007C81
.text$x:00007C81                 mov     edx, [esp+arg_4]
.text$x:00007C85                 lea     eax, [edx+0Ch]
.text$x:00007C88                 mov     ecx, [edx-0Ch]
.text$x:00007C8B                 xor     ecx, eax
.text$x:00007C8D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007C92                 mov     eax, offset __ehfuncinfo$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z
.text$x:00007C97                 jmp     ___CxxFrameHandler3
.text$x:00007C97 __ehhandler$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z endp
.text$x:00007C97
.text$x:00007C97 _text$x         ends
.text$x:00007C97
.text$mn:00007C9C ; ===========================================================================
.text$mn:00007C9C
.text$mn:00007C9C ; Segment type: Pure code
.text$mn:00007C9C ; Segment permissions: Read/Execute
.text$mn:00007C9C _text$mn        segment para public 'CODE' use32
.text$mn:00007C9C                 assume cs:_text$mn
.text$mn:00007C9C                 ;org 7C9Ch
.text$mn:00007C9C ; COMDAT (pick any)
.text$mn:00007C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C9C
.text$mn:00007C9C ; =============== S U B R O U T I N E =======================================
.text$mn:00007C9C
.text$mn:00007C9C ; Attributes: bp-based frame
.text$mn:00007C9C
.text$mn:00007C9C ; int __stdcall FunctionUnitParser::FunctionUnitParser(wchar_t *Str, wchar_t *, int, char, int, int, int, int, int, int, int, int, int, int, char, int, int, int)
.text$mn:00007C9C                 public ??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z
.text$mn:00007C9C ??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z proc near
.text$mn:00007C9C                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+3D4p
.text$mn:00007C9C                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+9BDp
.text$mn:00007C9C
.text$mn:00007C9C var_38          = dword ptr -38h
.text$mn:00007C9C var_34          = dword ptr -34h
.text$mn:00007C9C var_30          = dword ptr -30h
.text$mn:00007C9C var_2C          = dword ptr -2Ch
.text$mn:00007C9C var_28          = dword ptr -28h
.text$mn:00007C9C var_24          = dword ptr -24h
.text$mn:00007C9C var_20          = dword ptr -20h
.text$mn:00007C9C var_1C          = dword ptr -1Ch
.text$mn:00007C9C var_18          = dword ptr -18h
.text$mn:00007C9C var_14          = dword ptr -14h
.text$mn:00007C9C var_10          = dword ptr -10h
.text$mn:00007C9C var_C           = dword ptr -0Ch
.text$mn:00007C9C var_4           = dword ptr -4
.text$mn:00007C9C Str             = dword ptr  8
.text$mn:00007C9C arg_4           = dword ptr  0Ch
.text$mn:00007C9C arg_8           = dword ptr  10h
.text$mn:00007C9C arg_C           = byte ptr  14h
.text$mn:00007C9C arg_28          = dword ptr  30h
.text$mn:00007C9C arg_38          = byte ptr  40h
.text$mn:00007C9C
.text$mn:00007C9C                 push    ebp
.text$mn:00007C9D                 mov     ebp, esp
.text$mn:00007C9F                 push    0FFFFFFFFh
.text$mn:00007CA1                 push    offset __ehhandler$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z ; int
.text$mn:00007CA6                 mov     eax, large fs:0
.text$mn:00007CAC                 push    eax             ; int
.text$mn:00007CAD                 sub     esp, 2Ch
.text$mn:00007CB0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007CB5                 xor     eax, ebp
.text$mn:00007CB7                 push    eax             ; int
.text$mn:00007CB8                 lea     eax, [ebp+var_C]
.text$mn:00007CBB                 mov     large fs:0, eax
.text$mn:00007CC1                 mov     [ebp+var_10], ecx
.text$mn:00007CC4                 mov     [ebp+var_4], 2
.text$mn:00007CCB                 sub     esp, 10h
.text$mn:00007CCE                 mov     ecx, esp
.text$mn:00007CD0                 mov     [ebp+var_20], esp
.text$mn:00007CD3                 lea     eax, [ebp+arg_38]
.text$mn:00007CD6                 push    eax
.text$mn:00007CD7                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00007CDC                 mov     [ebp+var_14], eax
.text$mn:00007CDF                 mov     ecx, [ebp+var_14]
.text$mn:00007CE2                 mov     [ebp+var_24], ecx
.text$mn:00007CE5                 mov     byte ptr [ebp+var_4], 3
.text$mn:00007CE9                 sub     esp, 10h
.text$mn:00007CEC                 mov     ecx, esp
.text$mn:00007CEE                 mov     [ebp+var_28], esp
.text$mn:00007CF1                 lea     edx, [ebp+arg_28]
.text$mn:00007CF4                 push    edx             ; int
.text$mn:00007CF5                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00007CFA                 mov     [ebp+var_18], eax
.text$mn:00007CFD                 mov     eax, [ebp+var_18]
.text$mn:00007D00                 mov     [ebp+var_2C], eax
.text$mn:00007D03                 mov     byte ptr [ebp+var_4], 4
.text$mn:00007D07                 sub     esp, 1Ch
.text$mn:00007D0A                 mov     ecx, esp
.text$mn:00007D0C                 mov     [ebp+var_30], esp
.text$mn:00007D0F                 lea     edx, [ebp+arg_C]
.text$mn:00007D12                 push    edx
.text$mn:00007D13                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007D18                 mov     [ebp+var_1C], eax
.text$mn:00007D1B                 mov     eax, [ebp+var_1C]
.text$mn:00007D1E                 mov     [ebp+var_34], eax
.text$mn:00007D21                 mov     byte ptr [ebp+var_4], 5
.text$mn:00007D25                 mov     ecx, [ebp+arg_8]
.text$mn:00007D28                 push    ecx             ; int
.text$mn:00007D29                 mov     edx, [ebp+arg_4]
.text$mn:00007D2C                 push    edx             ; wchar_t *
.text$mn:00007D2D                 mov     eax, [ebp+Str]
.text$mn:00007D30                 push    eax             ; Str
.text$mn:00007D31                 mov     byte ptr [ebp+var_4], 2
.text$mn:00007D35                 mov     ecx, [ebp+var_10]
.text$mn:00007D38                 call    ??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z ; FunctionParser::FunctionParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)
.text$mn:00007D3D                 mov     [ebp+var_38], eax
.text$mn:00007D40                 mov     byte ptr [ebp+var_4], 6
.text$mn:00007D44                 mov     ecx, [ebp+var_10]
.text$mn:00007D47                 mov     dword ptr [ecx], offset ??_7FunctionUnitParser@@6B@ ; const FunctionUnitParser::`vftable'
.text$mn:00007D4D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007D51                 lea     ecx, [ebp+arg_C]
.text$mn:00007D54                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007D59                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007D5D                 lea     ecx, [ebp+arg_28]
.text$mn:00007D60                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007D65                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007D6C                 lea     ecx, [ebp+arg_38]
.text$mn:00007D6F                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007D74                 mov     eax, [ebp+var_10]
.text$mn:00007D77                 mov     ecx, [ebp+var_C]
.text$mn:00007D7A                 mov     large fs:0, ecx
.text$mn:00007D81                 pop     ecx
.text$mn:00007D82                 mov     esp, ebp
.text$mn:00007D84                 pop     ebp
.text$mn:00007D85                 retn    48h
.text$mn:00007D85 ??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z endp
.text$mn:00007D85
.text$mn:00007D85 _text$mn        ends
.text$mn:00007D85
.text$x:00007D88 ; ===========================================================================
.text$x:00007D88
.text$x:00007D88 ; Segment type: Pure code
.text$x:00007D88 ; Segment permissions: Read/Execute
.text$x:00007D88 _text$x         segment para public 'CODE' use32
.text$x:00007D88                 assume cs:_text$x
.text$x:00007D88                 ;org 7D88h
.text$x:00007D88 ; COMDAT (pick associative to section at 7C9C)
.text$x:00007D88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007D88
.text$x:00007D88 ; =============== S U B R O U T I N E =======================================
.text$x:00007D88
.text$x:00007D88
.text$x:00007D88 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$0 proc near
.text$x:00007D88                                         ; DATA XREF: .xdata$x:00010024o
.text$x:00007D88                 lea     ecx, [ebp+40h]
.text$x:00007D8B                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007D8B __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$0 endp
.text$x:00007D8B
.text$x:00007D90
.text$x:00007D90 ; =============== S U B R O U T I N E =======================================
.text$x:00007D90
.text$x:00007D90
.text$x:00007D90 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$1 proc near
.text$x:00007D90                                         ; DATA XREF: .xdata$x:0001002Co
.text$x:00007D90                 lea     ecx, [ebp+30h]
.text$x:00007D93                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007D93 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$1 endp
.text$x:00007D93
.text$x:00007D98
.text$x:00007D98 ; =============== S U B R O U T I N E =======================================
.text$x:00007D98
.text$x:00007D98
.text$x:00007D98 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$2 proc near
.text$x:00007D98                                         ; DATA XREF: .xdata$x:00010034o
.text$x:00007D98                 lea     ecx, [ebp+14h]
.text$x:00007D9B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007D9B __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$2 endp
.text$x:00007D9B
.text$x:00007DA0
.text$x:00007DA0 ; =============== S U B R O U T I N E =======================================
.text$x:00007DA0
.text$x:00007DA0
.text$x:00007DA0 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$3 proc near
.text$x:00007DA0                                         ; DATA XREF: .xdata$x:0001003Co
.text$x:00007DA0                 mov     ecx, [ebp-20h]
.text$x:00007DA3                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007DA3 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$3 endp
.text$x:00007DA3
.text$x:00007DA8
.text$x:00007DA8 ; =============== S U B R O U T I N E =======================================
.text$x:00007DA8
.text$x:00007DA8
.text$x:00007DA8 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$4 proc near
.text$x:00007DA8                                         ; DATA XREF: .xdata$x:00010044o
.text$x:00007DA8                 mov     ecx, [ebp-28h]
.text$x:00007DAB                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007DAB __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$4 endp
.text$x:00007DAB
.text$x:00007DB0
.text$x:00007DB0 ; =============== S U B R O U T I N E =======================================
.text$x:00007DB0
.text$x:00007DB0
.text$x:00007DB0 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$5 proc near
.text$x:00007DB0                                         ; DATA XREF: .xdata$x:0001004Co
.text$x:00007DB0                 mov     ecx, [ebp-30h]
.text$x:00007DB3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007DB3 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$5 endp
.text$x:00007DB3
.text$x:00007DB8
.text$x:00007DB8 ; =============== S U B R O U T I N E =======================================
.text$x:00007DB8
.text$x:00007DB8
.text$x:00007DB8 __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$6 proc near
.text$x:00007DB8                                         ; DATA XREF: .xdata$x:00010054o
.text$x:00007DB8                 mov     ecx, [ebp-10h]  ; this
.text$x:00007DBB                 jmp     ??1FunctionParser@@QAE@XZ ; FunctionParser::~FunctionParser(void)
.text$x:00007DBB __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$6 endp
.text$x:00007DBB
.text$x:00007DC0
.text$x:00007DC0 ; =============== S U B R O U T I N E =======================================
.text$x:00007DC0
.text$x:00007DC0
.text$x:00007DC0 __ehhandler$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z proc near
.text$x:00007DC0                                         ; DATA XREF: FunctionUnitParser::FunctionUnitParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+5o
.text$x:00007DC0
.text$x:00007DC0 arg_4           = dword ptr  8
.text$x:00007DC0
.text$x:00007DC0                 mov     edx, [esp+arg_4]
.text$x:00007DC4                 lea     eax, [edx+0Ch]
.text$x:00007DC7                 mov     ecx, [edx-30h]
.text$x:00007DCA                 xor     ecx, eax
.text$x:00007DCC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007DD1                 mov     eax, offset __ehfuncinfo$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z
.text$x:00007DD6                 jmp     ___CxxFrameHandler3
.text$x:00007DD6 __ehhandler$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z endp
.text$x:00007DD6
.text$x:00007DD6 ; ---------------------------------------------------------------------------
.text$x:00007DDB                 align 4
.text$x:00007DDB _text$x         ends
.text$x:00007DDB
.text$mn:00007DDC ; ===========================================================================
.text$mn:00007DDC
.text$mn:00007DDC ; Segment type: Pure code
.text$mn:00007DDC ; Segment permissions: Read/Execute
.text$mn:00007DDC _text$mn        segment para public 'CODE' use32
.text$mn:00007DDC                 assume cs:_text$mn
.text$mn:00007DDC                 ;org 7DDCh
.text$mn:00007DDC ; COMDAT (pick any)
.text$mn:00007DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DDC
.text$mn:00007DDC ; =============== S U B R O U T I N E =======================================
.text$mn:00007DDC
.text$mn:00007DDC ; Attributes: bp-based frame
.text$mn:00007DDC
.text$mn:00007DDC ; int __stdcall FunctionZoneParser::FunctionZoneParser(wchar_t *Str, wchar_t *, int, char, int, int, int, int, int, int, char, int, int, int, int, int, int, char, int, int, int, int, int, int, char, int, int, int, char, int, int, int, int, int, int, int, int, int, int)
.text$mn:00007DDC                 public ??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z
.text$mn:00007DDC ??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z proc near
.text$mn:00007DDC                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+820p
.text$mn:00007DDC                                         ; FunctionMixParser::FunctionMixParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,FunctionUnitParser *)+F9p
.text$mn:00007DDC
.text$mn:00007DDC var_38          = dword ptr -38h
.text$mn:00007DDC var_34          = dword ptr -34h
.text$mn:00007DDC var_30          = dword ptr -30h
.text$mn:00007DDC var_2C          = dword ptr -2Ch
.text$mn:00007DDC var_28          = dword ptr -28h
.text$mn:00007DDC var_24          = dword ptr -24h
.text$mn:00007DDC var_20          = dword ptr -20h
.text$mn:00007DDC var_1C          = dword ptr -1Ch
.text$mn:00007DDC var_18          = dword ptr -18h
.text$mn:00007DDC var_14          = dword ptr -14h
.text$mn:00007DDC var_10          = dword ptr -10h
.text$mn:00007DDC var_C           = dword ptr -0Ch
.text$mn:00007DDC var_4           = dword ptr -4
.text$mn:00007DDC Str             = dword ptr  8
.text$mn:00007DDC arg_4           = dword ptr  0Ch
.text$mn:00007DDC arg_8           = dword ptr  10h
.text$mn:00007DDC arg_C           = byte ptr  14h
.text$mn:00007DDC arg_28          = byte ptr  30h
.text$mn:00007DDC arg_44          = byte ptr  4Ch
.text$mn:00007DDC arg_60          = byte ptr  68h
.text$mn:00007DDC arg_70          = byte ptr  78h
.text$mn:00007DDC arg_8C          = dword ptr  94h
.text$mn:00007DDC
.text$mn:00007DDC                 push    ebp
.text$mn:00007DDD                 mov     ebp, esp
.text$mn:00007DDF                 push    0FFFFFFFFh
.text$mn:00007DE1                 push    offset __ehhandler$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z ; int
.text$mn:00007DE6                 mov     eax, large fs:0
.text$mn:00007DEC                 push    eax             ; int
.text$mn:00007DED                 sub     esp, 2Ch
.text$mn:00007DF0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007DF5                 xor     eax, ebp
.text$mn:00007DF7                 push    eax             ; int
.text$mn:00007DF8                 lea     eax, [ebp+var_C]
.text$mn:00007DFB                 mov     large fs:0, eax
.text$mn:00007E01                 mov     [ebp+var_10], ecx
.text$mn:00007E04                 mov     [ebp+var_4], 5
.text$mn:00007E0B                 sub     esp, 10h
.text$mn:00007E0E                 mov     ecx, esp
.text$mn:00007E10                 mov     [ebp+var_20], esp
.text$mn:00007E13                 lea     eax, [ebp+arg_60]
.text$mn:00007E16                 push    eax
.text$mn:00007E17                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00007E1C                 mov     [ebp+var_14], eax
.text$mn:00007E1F                 mov     ecx, [ebp+var_14]
.text$mn:00007E22                 mov     [ebp+var_24], ecx
.text$mn:00007E25                 mov     byte ptr [ebp+var_4], 6
.text$mn:00007E29                 sub     esp, 10h
.text$mn:00007E2C                 mov     ecx, esp
.text$mn:00007E2E                 mov     [ebp+var_28], esp
.text$mn:00007E31                 lea     edx, [ebp+arg_8C]
.text$mn:00007E37                 push    edx             ; int
.text$mn:00007E38                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:00007E3D                 mov     [ebp+var_18], eax
.text$mn:00007E40                 mov     eax, [ebp+var_18]
.text$mn:00007E43                 mov     [ebp+var_2C], eax
.text$mn:00007E46                 mov     byte ptr [ebp+var_4], 7
.text$mn:00007E4A                 sub     esp, 1Ch
.text$mn:00007E4D                 mov     ecx, esp
.text$mn:00007E4F                 mov     [ebp+var_30], esp
.text$mn:00007E52                 lea     edx, [ebp+arg_70]
.text$mn:00007E55                 push    edx
.text$mn:00007E56                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007E5B                 mov     [ebp+var_1C], eax
.text$mn:00007E5E                 mov     eax, [ebp+var_1C]
.text$mn:00007E61                 mov     [ebp+var_34], eax
.text$mn:00007E64                 mov     byte ptr [ebp+var_4], 8
.text$mn:00007E68                 mov     ecx, [ebp+arg_8]
.text$mn:00007E6B                 push    ecx             ; int
.text$mn:00007E6C                 mov     edx, [ebp+arg_4]
.text$mn:00007E6F                 push    edx             ; wchar_t *
.text$mn:00007E70                 mov     eax, [ebp+Str]
.text$mn:00007E73                 push    eax             ; Str
.text$mn:00007E74                 mov     byte ptr [ebp+var_4], 5
.text$mn:00007E78                 mov     ecx, [ebp+var_10]
.text$mn:00007E7B                 call    ??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z ; FunctionParser::FunctionParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)
.text$mn:00007E80                 mov     [ebp+var_38], eax
.text$mn:00007E83                 mov     byte ptr [ebp+var_4], 9
.text$mn:00007E87                 mov     ecx, [ebp+var_10]
.text$mn:00007E8A                 mov     dword ptr [ecx], offset ??_7FunctionZoneParser@@6B@ ; const FunctionZoneParser::`vftable'
.text$mn:00007E90                 lea     edx, [ebp+arg_C]
.text$mn:00007E93                 push    edx
.text$mn:00007E94                 mov     ecx, [ebp+var_10]
.text$mn:00007E97                 add     ecx, 94h ; 'ö'
.text$mn:00007E9D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007EA2                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00007EA6                 lea     eax, [ebp+arg_28]
.text$mn:00007EA9                 push    eax
.text$mn:00007EAA                 mov     ecx, [ebp+var_10]
.text$mn:00007EAD                 add     ecx, 0B0h ; '¦'
.text$mn:00007EB3                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007EB8                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00007EBC                 lea     ecx, [ebp+arg_44]
.text$mn:00007EBF                 push    ecx
.text$mn:00007EC0                 mov     ecx, [ebp+var_10]
.text$mn:00007EC3                 add     ecx, 0CCh ; '¦'
.text$mn:00007EC9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007ECE                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00007ED2                 mov     ecx, [ebp+var_10]
.text$mn:00007ED5                 add     ecx, 0E8h ; 'F'
.text$mn:00007EDB                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007EE0                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00007EE4                 mov     byte ptr [ebp+var_4], 4
.text$mn:00007EE8                 lea     ecx, [ebp+arg_C]
.text$mn:00007EEB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007EF0                 mov     byte ptr [ebp+var_4], 3
.text$mn:00007EF4                 lea     ecx, [ebp+arg_28]
.text$mn:00007EF7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007EFC                 mov     byte ptr [ebp+var_4], 2
.text$mn:00007F00                 lea     ecx, [ebp+arg_44]
.text$mn:00007F03                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007F08                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007F0C                 lea     ecx, [ebp+arg_60]
.text$mn:00007F0F                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007F14                 mov     byte ptr [ebp+var_4], 0
.text$mn:00007F18                 lea     ecx, [ebp+arg_70]
.text$mn:00007F1B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00007F20                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007F27                 lea     ecx, [ebp+arg_8C]
.text$mn:00007F2D                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00007F32                 mov     eax, [ebp+var_10]
.text$mn:00007F35                 mov     ecx, [ebp+var_C]
.text$mn:00007F38                 mov     large fs:0, ecx
.text$mn:00007F3F                 pop     ecx
.text$mn:00007F40                 mov     esp, ebp
.text$mn:00007F42                 pop     ebp
.text$mn:00007F43                 retn    9Ch
.text$mn:00007F43 ??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z endp
.text$mn:00007F43
.text$mn:00007F43 ; ---------------------------------------------------------------------------
.text$mn:00007F46                 align 4
.text$mn:00007F46 _text$mn        ends
.text$mn:00007F46
.text$x:00007F48 ; ===========================================================================
.text$x:00007F48
.text$x:00007F48 ; Segment type: Pure code
.text$x:00007F48 ; Segment permissions: Read/Execute
.text$x:00007F48 _text$x         segment para public 'CODE' use32
.text$x:00007F48                 assume cs:_text$x
.text$x:00007F48                 ;org 7F48h
.text$x:00007F48 ; COMDAT (pick associative to section at 7DDC)
.text$x:00007F48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007F48
.text$x:00007F48 ; =============== S U B R O U T I N E =======================================
.text$x:00007F48
.text$x:00007F48
.text$x:00007F48 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$0 proc near
.text$x:00007F48                                         ; DATA XREF: .xdata$x:0000FF44o
.text$x:00007F48                 lea     ecx, [ebp+94h]
.text$x:00007F4E                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007F4E __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$0 endp
.text$x:00007F4E
.text$x:00007F53
.text$x:00007F53 ; =============== S U B R O U T I N E =======================================
.text$x:00007F53
.text$x:00007F53
.text$x:00007F53 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$1 proc near
.text$x:00007F53                                         ; DATA XREF: .xdata$x:0000FF4Co
.text$x:00007F53                 lea     ecx, [ebp+78h]
.text$x:00007F56                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007F56 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$1 endp
.text$x:00007F56
.text$x:00007F5B
.text$x:00007F5B ; =============== S U B R O U T I N E =======================================
.text$x:00007F5B
.text$x:00007F5B
.text$x:00007F5B __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$2 proc near
.text$x:00007F5B                                         ; DATA XREF: .xdata$x:0000FF54o
.text$x:00007F5B                 lea     ecx, [ebp+68h]
.text$x:00007F5E                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007F5E __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$2 endp
.text$x:00007F5E
.text$x:00007F63
.text$x:00007F63 ; =============== S U B R O U T I N E =======================================
.text$x:00007F63
.text$x:00007F63
.text$x:00007F63 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$3 proc near
.text$x:00007F63                                         ; DATA XREF: .xdata$x:0000FF5Co
.text$x:00007F63                 lea     ecx, [ebp+4Ch]
.text$x:00007F66                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007F66 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$3 endp
.text$x:00007F66
.text$x:00007F6B
.text$x:00007F6B ; =============== S U B R O U T I N E =======================================
.text$x:00007F6B
.text$x:00007F6B
.text$x:00007F6B __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$4 proc near
.text$x:00007F6B                                         ; DATA XREF: .xdata$x:0000FF64o
.text$x:00007F6B                 lea     ecx, [ebp+30h]
.text$x:00007F6E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007F6E __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$4 endp
.text$x:00007F6E
.text$x:00007F73
.text$x:00007F73 ; =============== S U B R O U T I N E =======================================
.text$x:00007F73
.text$x:00007F73
.text$x:00007F73 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$5 proc near
.text$x:00007F73                                         ; DATA XREF: .xdata$x:0000FF6Co
.text$x:00007F73                 lea     ecx, [ebp+14h]
.text$x:00007F76                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007F76 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$5 endp
.text$x:00007F76
.text$x:00007F7B
.text$x:00007F7B ; =============== S U B R O U T I N E =======================================
.text$x:00007F7B
.text$x:00007F7B
.text$x:00007F7B __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$6 proc near
.text$x:00007F7B                                         ; DATA XREF: .xdata$x:0000FF74o
.text$x:00007F7B                 mov     ecx, [ebp-20h]
.text$x:00007F7E                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007F7E __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$6 endp
.text$x:00007F7E
.text$x:00007F83
.text$x:00007F83 ; =============== S U B R O U T I N E =======================================
.text$x:00007F83
.text$x:00007F83
.text$x:00007F83 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$7 proc near
.text$x:00007F83                                         ; DATA XREF: .xdata$x:0000FF7Co
.text$x:00007F83                 mov     ecx, [ebp-28h]
.text$x:00007F86                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00007F86 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$7 endp
.text$x:00007F86
.text$x:00007F8B
.text$x:00007F8B ; =============== S U B R O U T I N E =======================================
.text$x:00007F8B
.text$x:00007F8B
.text$x:00007F8B __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$8 proc near
.text$x:00007F8B                                         ; DATA XREF: .xdata$x:0000FF84o
.text$x:00007F8B                 mov     ecx, [ebp-30h]
.text$x:00007F8E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007F8E __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$8 endp
.text$x:00007F8E
.text$x:00007F93
.text$x:00007F93 ; =============== S U B R O U T I N E =======================================
.text$x:00007F93
.text$x:00007F93
.text$x:00007F93 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$9 proc near
.text$x:00007F93                                         ; DATA XREF: .xdata$x:0000FF8Co
.text$x:00007F93                 mov     ecx, [ebp-10h]  ; this
.text$x:00007F96                 jmp     ??1FunctionParser@@QAE@XZ ; FunctionParser::~FunctionParser(void)
.text$x:00007F96 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$9 endp
.text$x:00007F96
.text$x:00007F9B
.text$x:00007F9B ; =============== S U B R O U T I N E =======================================
.text$x:00007F9B
.text$x:00007F9B
.text$x:00007F9B __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$10 proc near
.text$x:00007F9B                                         ; DATA XREF: .xdata$x:0000FF94o
.text$x:00007F9B                 mov     ecx, [ebp-10h]
.text$x:00007F9E                 add     ecx, 94h ; 'ö'
.text$x:00007FA4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007FA4 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$10 endp
.text$x:00007FA4
.text$x:00007FA9
.text$x:00007FA9 ; =============== S U B R O U T I N E =======================================
.text$x:00007FA9
.text$x:00007FA9
.text$x:00007FA9 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$11 proc near
.text$x:00007FA9                                         ; DATA XREF: .xdata$x:0000FF9Co
.text$x:00007FA9                 mov     ecx, [ebp-10h]
.text$x:00007FAC                 add     ecx, 0B0h ; '¦'
.text$x:00007FB2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007FB2 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$11 endp
.text$x:00007FB2
.text$x:00007FB7
.text$x:00007FB7 ; =============== S U B R O U T I N E =======================================
.text$x:00007FB7
.text$x:00007FB7
.text$x:00007FB7 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$12 proc near
.text$x:00007FB7                                         ; DATA XREF: .xdata$x:0000FFA4o
.text$x:00007FB7                 mov     ecx, [ebp-10h]
.text$x:00007FBA                 add     ecx, 0CCh ; '¦'
.text$x:00007FC0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007FC0 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$12 endp
.text$x:00007FC0
.text$x:00007FC5
.text$x:00007FC5 ; =============== S U B R O U T I N E =======================================
.text$x:00007FC5
.text$x:00007FC5
.text$x:00007FC5 __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$13 proc near
.text$x:00007FC5                                         ; DATA XREF: .xdata$x:0000FFACo
.text$x:00007FC5                 mov     ecx, [ebp-10h]
.text$x:00007FC8                 add     ecx, 0E8h ; 'F'
.text$x:00007FCE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007FCE __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$13 endp
.text$x:00007FCE
.text$x:00007FD3
.text$x:00007FD3 ; =============== S U B R O U T I N E =======================================
.text$x:00007FD3
.text$x:00007FD3
.text$x:00007FD3 __ehhandler$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z proc near
.text$x:00007FD3                                         ; DATA XREF: FunctionZoneParser::FunctionZoneParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+5o
.text$x:00007FD3
.text$x:00007FD3 arg_4           = dword ptr  8
.text$x:00007FD3
.text$x:00007FD3                 mov     edx, [esp+arg_4]
.text$x:00007FD7                 lea     eax, [edx+0Ch]
.text$x:00007FDA                 mov     ecx, [edx-30h]
.text$x:00007FDD                 xor     ecx, eax
.text$x:00007FDF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007FE4                 mov     eax, offset __ehfuncinfo$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z
.text$x:00007FE9                 jmp     ___CxxFrameHandler3
.text$x:00007FE9 __ehhandler$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z endp
.text$x:00007FE9
.text$x:00007FE9 ; ---------------------------------------------------------------------------
.text$x:00007FEE                 align 10h
.text$x:00007FEE _text$x         ends
.text$x:00007FEE
.text$mn:00007FF0 ; ===========================================================================
.text$mn:00007FF0
.text$mn:00007FF0 ; Segment type: Pure code
.text$mn:00007FF0 ; Segment permissions: Read/Execute
.text$mn:00007FF0 _text$mn        segment para public 'CODE' use32
.text$mn:00007FF0                 assume cs:_text$mn
.text$mn:00007FF0                 ;org 7FF0h
.text$mn:00007FF0 ; COMDAT (pick any)
.text$mn:00007FF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FF0
.text$mn:00007FF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007FF0
.text$mn:00007FF0 ; Attributes: bp-based frame
.text$mn:00007FF0
.text$mn:00007FF0 ; public: __thiscall TiXmlCursor::TiXmlCursor(void)
.text$mn:00007FF0                 public ??0TiXmlCursor@@QAE@XZ
.text$mn:00007FF0 ??0TiXmlCursor@@QAE@XZ proc near        ; CODE XREF: TiXmlDocument::TiXmlDocument(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+55p
.text$mn:00007FF0
.text$mn:00007FF0 var_4           = dword ptr -4
.text$mn:00007FF0
.text$mn:00007FF0                 push    ebp
.text$mn:00007FF1                 mov     ebp, esp
.text$mn:00007FF3                 push    ecx
.text$mn:00007FF4                 mov     [ebp+var_4], ecx
.text$mn:00007FF7                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007FFA                 call    ?Clear@TiXmlCursor@@QAEXXZ ; TiXmlCursor::Clear(void)
.text$mn:00007FFF                 mov     eax, [ebp+var_4]
.text$mn:00008002                 mov     esp, ebp
.text$mn:00008004                 pop     ebp
.text$mn:00008005                 retn
.text$mn:00008005 ??0TiXmlCursor@@QAE@XZ endp
.text$mn:00008005
.text$mn:00008005 ; ---------------------------------------------------------------------------
.text$mn:00008006                 align 4
.text$mn:00008006 _text$mn        ends
.text$mn:00008006
.text$mn:00008008 ; ===========================================================================
.text$mn:00008008
.text$mn:00008008 ; Segment type: Pure code
.text$mn:00008008 ; Segment permissions: Read/Execute
.text$mn:00008008 _text$mn        segment para public 'CODE' use32
.text$mn:00008008                 assume cs:_text$mn
.text$mn:00008008                 ;org 8008h
.text$mn:00008008 ; COMDAT (pick any)
.text$mn:00008008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008008
.text$mn:00008008 ; =============== S U B R O U T I N E =======================================
.text$mn:00008008
.text$mn:00008008 ; Attributes: bp-based frame
.text$mn:00008008
.text$mn:00008008 ; public: __thiscall TiXmlDocument::TiXmlDocument(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00008008                 public ??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00008008 ??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:00008008                                         ; CODE XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+6Cp
.text$mn:00008008
.text$mn:00008008 var_10          = dword ptr -10h
.text$mn:00008008 var_C           = dword ptr -0Ch
.text$mn:00008008 var_4           = dword ptr -4
.text$mn:00008008 arg_0           = dword ptr  8
.text$mn:00008008
.text$mn:00008008                 push    ebp
.text$mn:00008009                 mov     ebp, esp
.text$mn:0000800B                 push    0FFFFFFFFh
.text$mn:0000800D                 push    offset __ehhandler$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00008012                 mov     eax, large fs:0
.text$mn:00008018                 push    eax
.text$mn:00008019                 push    ecx
.text$mn:0000801A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000801F                 xor     eax, ebp
.text$mn:00008021                 push    eax
.text$mn:00008022                 lea     eax, [ebp+var_C]
.text$mn:00008025                 mov     large fs:0, eax
.text$mn:0000802B                 mov     [ebp+var_10], ecx
.text$mn:0000802E                 push    0
.text$mn:00008030                 mov     ecx, [ebp+var_10]
.text$mn:00008033                 call    ??0TiXmlNode@@IAE@W4NodeType@0@@Z ; TiXmlNode::TiXmlNode(TiXmlNode::NodeType)
.text$mn:00008038                 mov     [ebp+var_4], 0
.text$mn:0000803F                 mov     eax, [ebp+var_10]
.text$mn:00008042                 mov     dword ptr [eax], offset ??_7TiXmlDocument@@6B@ ; const TiXmlDocument::`vftable'
.text$mn:00008048                 mov     ecx, [ebp+var_10]
.text$mn:0000804B                 add     ecx, 4Ch ; 'L'
.text$mn:0000804E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00008053                 mov     byte ptr [ebp+var_4], 1
.text$mn:00008057                 mov     ecx, [ebp+var_10]
.text$mn:0000805A                 add     ecx, 6Ch ; 'l'
.text$mn:0000805D                 call    ??0TiXmlCursor@@QAE@XZ ; TiXmlCursor::TiXmlCursor(void)
.text$mn:00008062                 mov     ecx, [ebp+arg_0]
.text$mn:00008065                 push    ecx
.text$mn:00008066                 mov     ecx, [ebp+var_10]
.text$mn:00008069                 add     ecx, 1Ch
.text$mn:0000806C                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00008071                 mov     edx, [ebp+var_10]
.text$mn:00008074                 mov     byte ptr [edx+44h], 0
.text$mn:00008078                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000807F                 mov     eax, [ebp+var_10]
.text$mn:00008082                 mov     ecx, [ebp+var_C]
.text$mn:00008085                 mov     large fs:0, ecx
.text$mn:0000808C                 pop     ecx
.text$mn:0000808D                 mov     esp, ebp
.text$mn:0000808F                 pop     ebp
.text$mn:00008090                 retn    4
.text$mn:00008090 ??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:00008090
.text$mn:00008090 ; ---------------------------------------------------------------------------
.text$mn:00008093                 align 4
.text$mn:00008093 _text$mn        ends
.text$mn:00008093
.text$x:00008094 ; ===========================================================================
.text$x:00008094
.text$x:00008094 ; Segment type: Pure code
.text$x:00008094 ; Segment permissions: Read/Execute
.text$x:00008094 _text$x         segment para public 'CODE' use32
.text$x:00008094                 assume cs:_text$x
.text$x:00008094                 ;org 8094h
.text$x:00008094 ; COMDAT (pick associative to section at 8008)
.text$x:00008094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008094
.text$x:00008094 ; =============== S U B R O U T I N E =======================================
.text$x:00008094
.text$x:00008094
.text$x:00008094 __unwindfunclet$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 proc near
.text$x:00008094                                         ; DATA XREF: .xdata$x:0000F5B0o
.text$x:00008094                 mov     ecx, [ebp-10h]  ; this
.text$x:00008097                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:00008097 __unwindfunclet$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 endp
.text$x:00008097
.text$x:0000809C
.text$x:0000809C ; =============== S U B R O U T I N E =======================================
.text$x:0000809C
.text$x:0000809C
.text$x:0000809C __unwindfunclet$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1 proc near
.text$x:0000809C                                         ; DATA XREF: .xdata$x:0000F5B8o
.text$x:0000809C                 mov     ecx, [ebp-10h]
.text$x:0000809F                 add     ecx, 4Ch ; 'L'
.text$x:000080A2                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000080A2 __unwindfunclet$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1 endp
.text$x:000080A2
.text$x:000080A7
.text$x:000080A7 ; =============== S U B R O U T I N E =======================================
.text$x:000080A7
.text$x:000080A7
.text$x:000080A7 __ehhandler$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$x:000080A7                                         ; DATA XREF: TiXmlDocument::TiXmlDocument(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:000080A7
.text$x:000080A7 arg_4           = dword ptr  8
.text$x:000080A7
.text$x:000080A7                 mov     edx, [esp+arg_4]
.text$x:000080AB                 lea     eax, [edx+0Ch]
.text$x:000080AE                 mov     ecx, [edx-8]
.text$x:000080B1                 xor     ecx, eax
.text$x:000080B3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000080B8                 mov     eax, offset __ehfuncinfo$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$x:000080BD                 jmp     ___CxxFrameHandler3
.text$x:000080BD __ehhandler$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$x:000080BD
.text$x:000080BD ; ---------------------------------------------------------------------------
.text$x:000080C2                 align 4
.text$x:000080C2 _text$x         ends
.text$x:000080C2
.text$mn:000080C4 ; ===========================================================================
.text$mn:000080C4
.text$mn:000080C4 ; Segment type: Pure code
.text$mn:000080C4 ; Segment permissions: Read/Execute
.text$mn:000080C4 _text$mn        segment para public 'CODE' use32
.text$mn:000080C4                 assume cs:_text$mn
.text$mn:000080C4                 ;org 80C4h
.text$mn:000080C4 ; COMDAT (pick any)
.text$mn:000080C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080C4
.text$mn:000080C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000080C4
.text$mn:000080C4 ; Attributes: bp-based frame
.text$mn:000080C4
.text$mn:000080C4 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000080C4                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:000080C4 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:000080C4                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:000080C4                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p ...
.text$mn:000080C4
.text$mn:000080C4 var_4           = dword ptr -4
.text$mn:000080C4
.text$mn:000080C4                 push    ebp
.text$mn:000080C5                 mov     ebp, esp
.text$mn:000080C7                 push    ecx
.text$mn:000080C8                 mov     [ebp+var_4], ecx
.text$mn:000080CB                 mov     eax, [ebp+var_4]
.text$mn:000080CE                 mov     dword ptr [eax], 0
.text$mn:000080D4                 mov     eax, [ebp+var_4]
.text$mn:000080D7                 mov     esp, ebp
.text$mn:000080D9                 pop     ebp
.text$mn:000080DA                 retn
.text$mn:000080DA ??0_Container_base12@std@@QAE@XZ endp
.text$mn:000080DA
.text$mn:000080DA ; ---------------------------------------------------------------------------
.text$mn:000080DB                 align 4
.text$mn:000080DB _text$mn        ends
.text$mn:000080DB
.text$mn:000080DC ; ===========================================================================
.text$mn:000080DC
.text$mn:000080DC ; Segment type: Pure code
.text$mn:000080DC ; Segment permissions: Read/Execute
.text$mn:000080DC _text$mn        segment para public 'CODE' use32
.text$mn:000080DC                 assume cs:_text$mn
.text$mn:000080DC                 ;org 80DCh
.text$mn:000080DC ; COMDAT (pick any)
.text$mn:000080DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080DC
.text$mn:000080DC ; =============== S U B R O U T I N E =======================================
.text$mn:000080DC
.text$mn:000080DC ; Attributes: bp-based frame
.text$mn:000080DC
.text$mn:000080DC ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:000080DC                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:000080DC ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:000080DC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:000080DC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p ...
.text$mn:000080DC
.text$mn:000080DC var_4           = dword ptr -4
.text$mn:000080DC
.text$mn:000080DC                 push    ebp
.text$mn:000080DD                 mov     ebp, esp
.text$mn:000080DF                 push    ecx
.text$mn:000080E0                 mov     [ebp+var_4], ecx
.text$mn:000080E3                 mov     eax, [ebp+var_4]
.text$mn:000080E6                 mov     dword ptr [eax], 0
.text$mn:000080EC                 mov     ecx, [ebp+var_4]
.text$mn:000080EF                 mov     dword ptr [ecx+4], 0
.text$mn:000080F6                 mov     eax, [ebp+var_4]
.text$mn:000080F9                 mov     esp, ebp
.text$mn:000080FB                 pop     ebp
.text$mn:000080FC                 retn
.text$mn:000080FC ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:000080FC
.text$mn:000080FC ; ---------------------------------------------------------------------------
.text$mn:000080FD                 align 10h
.text$mn:000080FD _text$mn        ends
.text$mn:000080FD
.text$mn:00008100 ; ===========================================================================
.text$mn:00008100
.text$mn:00008100 ; Segment type: Pure code
.text$mn:00008100 ; Segment permissions: Read/Execute
.text$mn:00008100 _text$mn        segment para public 'CODE' use32
.text$mn:00008100                 assume cs:_text$mn
.text$mn:00008100                 ;org 8100h
.text$mn:00008100 ; COMDAT (pick any)
.text$mn:00008100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008100
.text$mn:00008100 ; =============== S U B R O U T I N E =======================================
.text$mn:00008100
.text$mn:00008100 ; Attributes: bp-based frame
.text$mn:00008100
.text$mn:00008100 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00008100                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:00008100 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:00008100                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:00008100                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:00008100
.text$mn:00008100 var_10          = dword ptr -10h
.text$mn:00008100 var_C           = dword ptr -0Ch
.text$mn:00008100 var_4           = dword ptr -4
.text$mn:00008100
.text$mn:00008100                 push    ebp
.text$mn:00008101                 mov     ebp, esp
.text$mn:00008103                 push    0FFFFFFFFh
.text$mn:00008105                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:0000810A                 mov     eax, large fs:0
.text$mn:00008110                 push    eax
.text$mn:00008111                 push    ecx
.text$mn:00008112                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008117                 xor     eax, ebp
.text$mn:00008119                 push    eax
.text$mn:0000811A                 lea     eax, [ebp+var_C]
.text$mn:0000811D                 mov     large fs:0, eax
.text$mn:00008123                 mov     [ebp+var_10], ecx
.text$mn:00008126                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008129                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:0000812E                 mov     [ebp+var_4], 0
.text$mn:00008135                 mov     eax, [ebp+var_10]
.text$mn:00008138                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:0000813E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008145                 mov     eax, [ebp+var_10]
.text$mn:00008148                 mov     ecx, [ebp+var_C]
.text$mn:0000814B                 mov     large fs:0, ecx
.text$mn:00008152                 pop     ecx
.text$mn:00008153                 mov     esp, ebp
.text$mn:00008155                 pop     ebp
.text$mn:00008156                 retn
.text$mn:00008156 ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00008156
.text$mn:00008156 ; ---------------------------------------------------------------------------
.text$mn:00008157                 align 4
.text$mn:00008157 _text$mn        ends
.text$mn:00008157
.text$x:00008158 ; ===========================================================================
.text$x:00008158
.text$x:00008158 ; Segment type: Pure code
.text$x:00008158 ; Segment permissions: Read/Execute
.text$x:00008158 _text$x         segment para public 'CODE' use32
.text$x:00008158                 assume cs:_text$x
.text$x:00008158                 ;org 8158h
.text$x:00008158 ; COMDAT (pick associative to section at 8100)
.text$x:00008158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008158
.text$x:00008158 ; =============== S U B R O U T I N E =======================================
.text$x:00008158
.text$x:00008158
.text$x:00008158 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00008158                                         ; DATA XREF: .xdata$x:0000F0B8o
.text$x:00008158                 mov     ecx, [ebp-10h]  ; this
.text$x:0000815B                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:0000815B __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:0000815B
.text$x:00008160
.text$x:00008160 ; =============== S U B R O U T I N E =======================================
.text$x:00008160
.text$x:00008160
.text$x:00008160 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00008160                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00008160
.text$x:00008160 arg_4           = dword ptr  8
.text$x:00008160
.text$x:00008160                 mov     edx, [esp+arg_4]
.text$x:00008164                 lea     eax, [edx+0Ch]
.text$x:00008167                 mov     ecx, [edx-8]
.text$x:0000816A                 xor     ecx, eax
.text$x:0000816C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008171                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00008176                 jmp     ___CxxFrameHandler3
.text$x:00008176 __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00008176
.text$x:00008176 ; ---------------------------------------------------------------------------
.text$x:0000817B                 align 4
.text$x:0000817B _text$x         ends
.text$x:0000817B
.text$mn:0000817C ; ===========================================================================
.text$mn:0000817C
.text$mn:0000817C ; Segment type: Pure code
.text$mn:0000817C ; Segment permissions: Read/Execute
.text$mn:0000817C _text$mn        segment para public 'CODE' use32
.text$mn:0000817C                 assume cs:_text$mn
.text$mn:0000817C                 ;org 817Ch
.text$mn:0000817C ; COMDAT (pick any)
.text$mn:0000817C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000817C
.text$mn:0000817C ; =============== S U B R O U T I N E =======================================
.text$mn:0000817C
.text$mn:0000817C ; Attributes: bp-based frame
.text$mn:0000817C
.text$mn:0000817C ; _DWORD __thiscall std::_Ignore::_Ignore(std::_Ignore *__hidden this)
.text$mn:0000817C                 public ??0_Ignore@std@@QAE@XZ
.text$mn:0000817C ??0_Ignore@std@@QAE@XZ proc near        ; CODE XREF: std::`dynamic initializer for 'ignore''(void)+8p
.text$mn:0000817C
.text$mn:0000817C var_4           = dword ptr -4
.text$mn:0000817C
.text$mn:0000817C                 push    ebp
.text$mn:0000817D                 mov     ebp, esp
.text$mn:0000817F                 push    ecx
.text$mn:00008180                 mov     [ebp+var_4], ecx
.text$mn:00008183                 mov     eax, [ebp+var_4]
.text$mn:00008186                 mov     esp, ebp
.text$mn:00008188                 pop     ebp
.text$mn:00008189                 retn
.text$mn:00008189 ??0_Ignore@std@@QAE@XZ endp
.text$mn:00008189
.text$mn:00008189 ; ---------------------------------------------------------------------------
.text$mn:0000818A                 align 4
.text$mn:0000818A _text$mn        ends
.text$mn:0000818A
.text$mn:0000818C ; ===========================================================================
.text$mn:0000818C
.text$mn:0000818C ; Segment type: Pure code
.text$mn:0000818C ; Segment permissions: Read/Execute
.text$mn:0000818C _text$mn        segment para public 'CODE' use32
.text$mn:0000818C                 assume cs:_text$mn
.text$mn:0000818C                 ;org 818Ch
.text$mn:0000818C ; COMDAT (pick any)
.text$mn:0000818C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000818C
.text$mn:0000818C ; =============== S U B R O U T I N E =======================================
.text$mn:0000818C
.text$mn:0000818C ; Attributes: bp-based frame
.text$mn:0000818C
.text$mn:0000818C ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:0000818C                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:0000818C ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:0000818C                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:0000818C
.text$mn:0000818C var_10          = dword ptr -10h
.text$mn:0000818C var_C           = dword ptr -0Ch
.text$mn:0000818C var_4           = dword ptr -4
.text$mn:0000818C
.text$mn:0000818C                 push    ebp
.text$mn:0000818D                 mov     ebp, esp
.text$mn:0000818F                 push    0FFFFFFFFh
.text$mn:00008191                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00008196                 mov     eax, large fs:0
.text$mn:0000819C                 push    eax
.text$mn:0000819D                 push    ecx
.text$mn:0000819E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000081A3                 xor     eax, ebp
.text$mn:000081A5                 push    eax
.text$mn:000081A6                 lea     eax, [ebp+var_C]
.text$mn:000081A9                 mov     large fs:0, eax
.text$mn:000081AF                 mov     [ebp+var_10], ecx
.text$mn:000081B2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000081B5                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:000081BA                 mov     [ebp+var_4], 0
.text$mn:000081C1                 mov     eax, [ebp+var_10]
.text$mn:000081C4                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:000081CA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000081D1                 mov     eax, [ebp+var_10]
.text$mn:000081D4                 mov     ecx, [ebp+var_C]
.text$mn:000081D7                 mov     large fs:0, ecx
.text$mn:000081DE                 pop     ecx
.text$mn:000081DF                 mov     esp, ebp
.text$mn:000081E1                 pop     ebp
.text$mn:000081E2                 retn
.text$mn:000081E2 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:000081E2
.text$mn:000081E2 ; ---------------------------------------------------------------------------
.text$mn:000081E3                 align 4
.text$mn:000081E3 _text$mn        ends
.text$mn:000081E3
.text$x:000081E4 ; ===========================================================================
.text$x:000081E4
.text$x:000081E4 ; Segment type: Pure code
.text$x:000081E4 ; Segment permissions: Read/Execute
.text$x:000081E4 _text$x         segment para public 'CODE' use32
.text$x:000081E4                 assume cs:_text$x
.text$x:000081E4                 ;org 81E4h
.text$x:000081E4 ; COMDAT (pick associative to section at 818C)
.text$x:000081E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000081E4
.text$x:000081E4 ; =============== S U B R O U T I N E =======================================
.text$x:000081E4
.text$x:000081E4
.text$x:000081E4 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:000081E4                                         ; DATA XREF: .xdata$x:0000F13Co
.text$x:000081E4                 mov     ecx, [ebp-10h]  ; this
.text$x:000081E7                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000081E7 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:000081E7
.text$x:000081EC
.text$x:000081EC ; =============== S U B R O U T I N E =======================================
.text$x:000081EC
.text$x:000081EC
.text$x:000081EC __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:000081EC                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:000081EC
.text$x:000081EC arg_4           = dword ptr  8
.text$x:000081EC
.text$x:000081EC                 mov     edx, [esp+arg_4]
.text$x:000081F0                 lea     eax, [edx+0Ch]
.text$x:000081F3                 mov     ecx, [edx-8]
.text$x:000081F6                 xor     ecx, eax
.text$x:000081F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000081FD                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:00008202                 jmp     ___CxxFrameHandler3
.text$x:00008202 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:00008202
.text$x:00008202 ; ---------------------------------------------------------------------------
.text$x:00008207                 align 4
.text$x:00008207 _text$x         ends
.text$x:00008207
.text$mn:00008208 ; ===========================================================================
.text$mn:00008208
.text$mn:00008208 ; Segment type: Pure code
.text$mn:00008208 ; Segment permissions: Read/Execute
.text$mn:00008208 _text$mn        segment para public 'CODE' use32
.text$mn:00008208                 assume cs:_text$mn
.text$mn:00008208                 ;org 8208h
.text$mn:00008208 ; COMDAT (pick any)
.text$mn:00008208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008208
.text$mn:00008208 ; =============== S U B R O U T I N E =======================================
.text$mn:00008208
.text$mn:00008208 ; Attributes: bp-based frame
.text$mn:00008208
.text$mn:00008208 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:00008208                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:00008208 ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:00008208                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12> const &)+2Dp
.text$mn:00008208                                         ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+2Dp
.text$mn:00008208
.text$mn:00008208 var_4           = dword ptr -4
.text$mn:00008208 arg_0           = dword ptr  8
.text$mn:00008208
.text$mn:00008208                 push    ebp
.text$mn:00008209                 mov     ebp, esp
.text$mn:0000820B                 push    ecx
.text$mn:0000820C                 mov     [ebp+var_4], ecx
.text$mn:0000820F                 mov     eax, [ebp+var_4]
.text$mn:00008212                 mov     dword ptr [eax], 0
.text$mn:00008218                 mov     ecx, [ebp+var_4]
.text$mn:0000821B                 mov     dword ptr [ecx+4], 0
.text$mn:00008222                 mov     edx, [ebp+arg_0]
.text$mn:00008225                 push    edx
.text$mn:00008226                 mov     ecx, [ebp+var_4]
.text$mn:00008229                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:0000822E                 mov     eax, [ebp+var_4]
.text$mn:00008231                 mov     esp, ebp
.text$mn:00008233                 pop     ebp
.text$mn:00008234                 retn    4
.text$mn:00008234 ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:00008234
.text$mn:00008234 ; ---------------------------------------------------------------------------
.text$mn:00008237                 align 4
.text$mn:00008237 _text$mn        ends
.text$mn:00008237
.text$mn:00008238 ; ===========================================================================
.text$mn:00008238
.text$mn:00008238 ; Segment type: Pure code
.text$mn:00008238 ; Segment permissions: Read/Execute
.text$mn:00008238 _text$mn        segment para public 'CODE' use32
.text$mn:00008238                 assume cs:_text$mn
.text$mn:00008238                 ;org 8238h
.text$mn:00008238 ; COMDAT (pick any)
.text$mn:00008238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008238
.text$mn:00008238 ; =============== S U B R O U T I N E =======================================
.text$mn:00008238
.text$mn:00008238 ; Attributes: bp-based frame
.text$mn:00008238
.text$mn:00008238 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00008238                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:00008238 ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00008238                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+29p
.text$mn:00008238                                         ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+29p
.text$mn:00008238
.text$mn:00008238 var_4           = dword ptr -4
.text$mn:00008238
.text$mn:00008238                 push    ebp
.text$mn:00008239                 mov     ebp, esp
.text$mn:0000823B                 push    ecx
.text$mn:0000823C                 mov     [ebp+var_4], ecx
.text$mn:0000823F                 mov     eax, [ebp+var_4]
.text$mn:00008242                 mov     dword ptr [eax], 0
.text$mn:00008248                 mov     ecx, [ebp+var_4]
.text$mn:0000824B                 mov     dword ptr [ecx+4], 0
.text$mn:00008252                 mov     eax, [ebp+var_4]
.text$mn:00008255                 mov     esp, ebp
.text$mn:00008257                 pop     ebp
.text$mn:00008258                 retn
.text$mn:00008258 ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:00008258
.text$mn:00008258 ; ---------------------------------------------------------------------------
.text$mn:00008259                 align 4
.text$mn:00008259 _text$mn        ends
.text$mn:00008259
.text$mn:0000825C ; ===========================================================================
.text$mn:0000825C
.text$mn:0000825C ; Segment type: Pure code
.text$mn:0000825C ; Segment permissions: Read/Execute
.text$mn:0000825C _text$mn        segment para public 'CODE' use32
.text$mn:0000825C                 assume cs:_text$mn
.text$mn:0000825C                 ;org 825Ch
.text$mn:0000825C ; COMDAT (pick any)
.text$mn:0000825C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000825C
.text$mn:0000825C ; =============== S U B R O U T I N E =======================================
.text$mn:0000825C
.text$mn:0000825C ; Attributes: bp-based frame
.text$mn:0000825C
.text$mn:0000825C ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:0000825C                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:0000825C ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:0000825C                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:0000825C
.text$mn:0000825C var_10          = dword ptr -10h
.text$mn:0000825C var_C           = dword ptr -0Ch
.text$mn:0000825C var_4           = dword ptr -4
.text$mn:0000825C
.text$mn:0000825C                 push    ebp
.text$mn:0000825D                 mov     ebp, esp
.text$mn:0000825F                 push    0FFFFFFFFh
.text$mn:00008261                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00008266                 mov     eax, large fs:0
.text$mn:0000826C                 push    eax
.text$mn:0000826D                 push    ecx
.text$mn:0000826E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008273                 xor     eax, ebp
.text$mn:00008275                 push    eax
.text$mn:00008276                 lea     eax, [ebp+var_C]
.text$mn:00008279                 mov     large fs:0, eax
.text$mn:0000827F                 mov     [ebp+var_10], ecx
.text$mn:00008282                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008285                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:0000828A                 mov     [ebp+var_4], 0
.text$mn:00008291                 mov     eax, [ebp+var_10]
.text$mn:00008294                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:0000829A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000082A1                 mov     eax, [ebp+var_10]
.text$mn:000082A4                 mov     ecx, [ebp+var_C]
.text$mn:000082A7                 mov     large fs:0, ecx
.text$mn:000082AE                 pop     ecx
.text$mn:000082AF                 mov     esp, ebp
.text$mn:000082B1                 pop     ebp
.text$mn:000082B2                 retn
.text$mn:000082B2 ??0_System_error_category@std@@QAE@XZ endp
.text$mn:000082B2
.text$mn:000082B2 ; ---------------------------------------------------------------------------
.text$mn:000082B3                 align 4
.text$mn:000082B3 _text$mn        ends
.text$mn:000082B3
.text$x:000082B4 ; ===========================================================================
.text$x:000082B4
.text$x:000082B4 ; Segment type: Pure code
.text$x:000082B4 ; Segment permissions: Read/Execute
.text$x:000082B4 _text$x         segment para public 'CODE' use32
.text$x:000082B4                 assume cs:_text$x
.text$x:000082B4                 ;org 82B4h
.text$x:000082B4 ; COMDAT (pick associative to section at 825C)
.text$x:000082B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000082B4
.text$x:000082B4 ; =============== S U B R O U T I N E =======================================
.text$x:000082B4
.text$x:000082B4
.text$x:000082B4 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:000082B4                                         ; DATA XREF: .xdata$x:0000F1C0o
.text$x:000082B4                 mov     ecx, [ebp-10h]  ; this
.text$x:000082B7                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000082B7 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:000082B7
.text$x:000082BC
.text$x:000082BC ; =============== S U B R O U T I N E =======================================
.text$x:000082BC
.text$x:000082BC
.text$x:000082BC __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:000082BC                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:000082BC
.text$x:000082BC arg_4           = dword ptr  8
.text$x:000082BC
.text$x:000082BC                 mov     edx, [esp+arg_4]
.text$x:000082C0                 lea     eax, [edx+0Ch]
.text$x:000082C3                 mov     ecx, [edx-8]
.text$x:000082C6                 xor     ecx, eax
.text$x:000082C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000082CD                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:000082D2                 jmp     ___CxxFrameHandler3
.text$x:000082D2 __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:000082D2
.text$x:000082D2 ; ---------------------------------------------------------------------------
.text$x:000082D7                 align 4
.text$x:000082D7 _text$x         ends
.text$x:000082D7
.text$mn:000082D8 ; ===========================================================================
.text$mn:000082D8
.text$mn:000082D8 ; Segment type: Pure code
.text$mn:000082D8 ; Segment permissions: Read/Execute
.text$mn:000082D8 _text$mn        segment para public 'CODE' use32
.text$mn:000082D8                 assume cs:_text$mn
.text$mn:000082D8                 ;org 82D8h
.text$mn:000082D8 ; COMDAT (pick any)
.text$mn:000082D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082D8
.text$mn:000082D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000082D8
.text$mn:000082D8 ; Attributes: bp-based frame
.text$mn:000082D8
.text$mn:000082D8 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:000082D8                 public ??0error_category@std@@QAE@XZ
.text$mn:000082D8 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:000082D8
.text$mn:000082D8 var_4           = dword ptr -4
.text$mn:000082D8
.text$mn:000082D8                 push    ebp
.text$mn:000082D9                 mov     ebp, esp
.text$mn:000082DB                 push    ecx
.text$mn:000082DC                 mov     [ebp+var_4], ecx
.text$mn:000082DF                 mov     eax, [ebp+var_4]
.text$mn:000082E2                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:000082E8                 mov     eax, [ebp+var_4]
.text$mn:000082EB                 mov     esp, ebp
.text$mn:000082ED                 pop     ebp
.text$mn:000082EE                 retn
.text$mn:000082EE ??0error_category@std@@QAE@XZ endp
.text$mn:000082EE
.text$mn:000082EE ; ---------------------------------------------------------------------------
.text$mn:000082EF                 align 10h
.text$mn:000082EF _text$mn        ends
.text$mn:000082EF
.text$mn:000082F0 ; ===========================================================================
.text$mn:000082F0
.text$mn:000082F0 ; Segment type: Pure code
.text$mn:000082F0 ; Segment permissions: Read/Execute
.text$mn:000082F0 _text$mn        segment para public 'CODE' use32
.text$mn:000082F0                 assume cs:_text$mn
.text$mn:000082F0                 ;org 82F0h
.text$mn:000082F0 ; COMDAT (pick any)
.text$mn:000082F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082F0
.text$mn:000082F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000082F0
.text$mn:000082F0 ; Attributes: bp-based frame
.text$mn:000082F0
.text$mn:000082F0 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:000082F0                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:000082F0 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:000082F0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:000082F0                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:000082F0
.text$mn:000082F0 var_4           = dword ptr -4
.text$mn:000082F0 arg_0           = dword ptr  8
.text$mn:000082F0 arg_4           = dword ptr  0Ch
.text$mn:000082F0
.text$mn:000082F0                 push    ebp
.text$mn:000082F1                 mov     ebp, esp
.text$mn:000082F3                 push    ecx
.text$mn:000082F4                 mov     [ebp+var_4], ecx
.text$mn:000082F7                 mov     eax, [ebp+var_4]
.text$mn:000082FA                 mov     ecx, [ebp+arg_0]
.text$mn:000082FD                 mov     [eax], ecx
.text$mn:000082FF                 mov     edx, [ebp+var_4]
.text$mn:00008302                 mov     eax, [ebp+arg_4]
.text$mn:00008305                 mov     [edx+4], eax
.text$mn:00008308                 mov     eax, [ebp+var_4]
.text$mn:0000830B                 mov     esp, ebp
.text$mn:0000830D                 pop     ebp
.text$mn:0000830E                 retn    8
.text$mn:0000830E ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:0000830E
.text$mn:0000830E ; ---------------------------------------------------------------------------
.text$mn:00008311                 align 4
.text$mn:00008311 _text$mn        ends
.text$mn:00008311
.text$mn:00008314 ; ===========================================================================
.text$mn:00008314
.text$mn:00008314 ; Segment type: Pure code
.text$mn:00008314 ; Segment permissions: Read/Execute
.text$mn:00008314 _text$mn        segment para public 'CODE' use32
.text$mn:00008314                 assume cs:_text$mn
.text$mn:00008314                 ;org 8314h
.text$mn:00008314 ; COMDAT (pick any)
.text$mn:00008314                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008314
.text$mn:00008314 ; =============== S U B R O U T I N E =======================================
.text$mn:00008314
.text$mn:00008314 ; Attributes: bp-based frame
.text$mn:00008314
.text$mn:00008314 ; public: __thiscall foundInfo::foundInfo(struct foundInfo const &)
.text$mn:00008314                 public ??0foundInfo@@QAE@ABU0@@Z
.text$mn:00008314 ??0foundInfo@@QAE@ABU0@@Z proc near     ; CODE XREF: std::allocator<foundInfo>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)+56p
.text$mn:00008314                                         ; std::allocator<foundInfo>::construct<foundInfo,foundInfo>(foundInfo *,foundInfo &&)+56p ...
.text$mn:00008314
.text$mn:00008314 var_10          = dword ptr -10h
.text$mn:00008314 var_C           = dword ptr -0Ch
.text$mn:00008314 var_4           = dword ptr -4
.text$mn:00008314 arg_0           = dword ptr  8
.text$mn:00008314
.text$mn:00008314                 push    ebp
.text$mn:00008315                 mov     ebp, esp
.text$mn:00008317                 push    0FFFFFFFFh
.text$mn:00008319                 push    offset __ehhandler$??0foundInfo@@QAE@ABU0@@Z
.text$mn:0000831E                 mov     eax, large fs:0
.text$mn:00008324                 push    eax
.text$mn:00008325                 push    ecx
.text$mn:00008326                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000832B                 xor     eax, ebp
.text$mn:0000832D                 push    eax
.text$mn:0000832E                 lea     eax, [ebp+var_C]
.text$mn:00008331                 mov     large fs:0, eax
.text$mn:00008337                 mov     [ebp+var_10], ecx
.text$mn:0000833A                 mov     eax, [ebp+arg_0]
.text$mn:0000833D                 push    eax
.text$mn:0000833E                 mov     ecx, [ebp+var_10]
.text$mn:00008341                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00008346                 mov     [ebp+var_4], 0
.text$mn:0000834D                 mov     ecx, [ebp+arg_0]
.text$mn:00008350                 add     ecx, 1Ch
.text$mn:00008353                 push    ecx
.text$mn:00008354                 mov     ecx, [ebp+var_10]
.text$mn:00008357                 add     ecx, 1Ch
.text$mn:0000835A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000835F                 mov     byte ptr [ebp+var_4], 1
.text$mn:00008363                 mov     edx, [ebp+var_10]
.text$mn:00008366                 mov     eax, [ebp+arg_0]
.text$mn:00008369                 mov     ecx, [eax+38h]
.text$mn:0000836C                 mov     [edx+38h], ecx
.text$mn:0000836F                 mov     edx, [ebp+var_10]
.text$mn:00008372                 mov     eax, [ebp+arg_0]
.text$mn:00008375                 mov     ecx, [eax+3Ch]
.text$mn:00008378                 mov     [edx+3Ch], ecx
.text$mn:0000837B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008382                 mov     eax, [ebp+var_10]
.text$mn:00008385                 mov     ecx, [ebp+var_C]
.text$mn:00008388                 mov     large fs:0, ecx
.text$mn:0000838F                 pop     ecx
.text$mn:00008390                 mov     esp, ebp
.text$mn:00008392                 pop     ebp
.text$mn:00008393                 retn    4
.text$mn:00008393 ??0foundInfo@@QAE@ABU0@@Z endp
.text$mn:00008393
.text$mn:00008393 ; ---------------------------------------------------------------------------
.text$mn:00008396                 align 4
.text$mn:00008396 _text$mn        ends
.text$mn:00008396
.text$x:00008398 ; ===========================================================================
.text$x:00008398
.text$x:00008398 ; Segment type: Pure code
.text$x:00008398 ; Segment permissions: Read/Execute
.text$x:00008398 _text$x         segment para public 'CODE' use32
.text$x:00008398                 assume cs:_text$x
.text$x:00008398                 ;org 8398h
.text$x:00008398 ; COMDAT (pick associative to section at 8314)
.text$x:00008398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008398
.text$x:00008398 ; =============== S U B R O U T I N E =======================================
.text$x:00008398
.text$x:00008398
.text$x:00008398 __unwindfunclet$??0foundInfo@@QAE@ABU0@@Z$0 proc near
.text$x:00008398                                         ; DATA XREF: .xdata$x:0000F99Co
.text$x:00008398                 mov     ecx, [ebp-10h]
.text$x:0000839B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000839B __unwindfunclet$??0foundInfo@@QAE@ABU0@@Z$0 endp
.text$x:0000839B
.text$x:000083A0
.text$x:000083A0 ; =============== S U B R O U T I N E =======================================
.text$x:000083A0
.text$x:000083A0
.text$x:000083A0 __unwindfunclet$??0foundInfo@@QAE@ABU0@@Z$1 proc near
.text$x:000083A0                                         ; DATA XREF: .xdata$x:0000F9A4o
.text$x:000083A0                 mov     ecx, [ebp-10h]
.text$x:000083A3                 add     ecx, 1Ch
.text$x:000083A6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000083A6 __unwindfunclet$??0foundInfo@@QAE@ABU0@@Z$1 endp
.text$x:000083A6
.text$x:000083AB
.text$x:000083AB ; =============== S U B R O U T I N E =======================================
.text$x:000083AB
.text$x:000083AB
.text$x:000083AB __ehhandler$??0foundInfo@@QAE@ABU0@@Z proc near
.text$x:000083AB                                         ; DATA XREF: foundInfo::foundInfo(foundInfo const &)+5o
.text$x:000083AB
.text$x:000083AB arg_4           = dword ptr  8
.text$x:000083AB
.text$x:000083AB                 mov     edx, [esp+arg_4]
.text$x:000083AF                 lea     eax, [edx+0Ch]
.text$x:000083B2                 mov     ecx, [edx-8]
.text$x:000083B5                 xor     ecx, eax
.text$x:000083B7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000083BC                 mov     eax, offset __ehfuncinfo$??0foundInfo@@QAE@ABU0@@Z
.text$x:000083C1                 jmp     ___CxxFrameHandler3
.text$x:000083C1 __ehhandler$??0foundInfo@@QAE@ABU0@@Z endp
.text$x:000083C1
.text$x:000083C1 ; ---------------------------------------------------------------------------
.text$x:000083C6                 align 4
.text$x:000083C6 _text$x         ends
.text$x:000083C6
.text$mn:000083C8 ; ===========================================================================
.text$mn:000083C8
.text$mn:000083C8 ; Segment type: Pure code
.text$mn:000083C8 ; Segment permissions: Read/Execute
.text$mn:000083C8 _text$mn        segment para public 'CODE' use32
.text$mn:000083C8                 assume cs:_text$mn
.text$mn:000083C8                 ;org 83C8h
.text$mn:000083C8 ; COMDAT (pick any)
.text$mn:000083C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083C8
.text$mn:000083C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000083C8
.text$mn:000083C8 ; Attributes: bp-based frame
.text$mn:000083C8
.text$mn:000083C8 ; public: __thiscall foundInfo::foundInfo(void)
.text$mn:000083C8                 public ??0foundInfo@@QAE@XZ
.text$mn:000083C8 ??0foundInfo@@QAE@XZ proc near          ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+166p
.text$mn:000083C8
.text$mn:000083C8 var_10          = dword ptr -10h
.text$mn:000083C8 var_C           = dword ptr -0Ch
.text$mn:000083C8 var_4           = dword ptr -4
.text$mn:000083C8
.text$mn:000083C8                 push    ebp
.text$mn:000083C9                 mov     ebp, esp
.text$mn:000083CB                 push    0FFFFFFFFh
.text$mn:000083CD                 push    offset __ehhandler$??0foundInfo@@QAE@XZ
.text$mn:000083D2                 mov     eax, large fs:0
.text$mn:000083D8                 push    eax
.text$mn:000083D9                 push    ecx
.text$mn:000083DA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000083DF                 xor     eax, ebp
.text$mn:000083E1                 push    eax
.text$mn:000083E2                 lea     eax, [ebp+var_C]
.text$mn:000083E5                 mov     large fs:0, eax
.text$mn:000083EB                 mov     [ebp+var_10], ecx
.text$mn:000083EE                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:000083F3                 mov     ecx, [ebp+var_10]
.text$mn:000083F6                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000083FB                 mov     [ebp+var_4], 0
.text$mn:00008402                 push    offset ??_C@_11LOCGONAA@?$AA?$AA@ ; Str
.text$mn:00008407                 mov     ecx, [ebp+var_10]
.text$mn:0000840A                 add     ecx, 1Ch
.text$mn:0000840D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00008412                 mov     byte ptr [ebp+var_4], 1
.text$mn:00008416                 mov     eax, [ebp+var_10]
.text$mn:00008419                 mov     dword ptr [eax+38h], 0FFFFFFFFh
.text$mn:00008420                 mov     ecx, [ebp+var_10]
.text$mn:00008423                 mov     dword ptr [ecx+3Ch], 0FFFFFFFFh
.text$mn:0000842A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008431                 mov     eax, [ebp+var_10]
.text$mn:00008434                 mov     ecx, [ebp+var_C]
.text$mn:00008437                 mov     large fs:0, ecx
.text$mn:0000843E                 pop     ecx
.text$mn:0000843F                 mov     esp, ebp
.text$mn:00008441                 pop     ebp
.text$mn:00008442                 retn
.text$mn:00008442 ??0foundInfo@@QAE@XZ endp
.text$mn:00008442
.text$mn:00008442 ; ---------------------------------------------------------------------------
.text$mn:00008443                 align 4
.text$mn:00008443 _text$mn        ends
.text$mn:00008443
.text$x:00008444 ; ===========================================================================
.text$x:00008444
.text$x:00008444 ; Segment type: Pure code
.text$x:00008444 ; Segment permissions: Read/Execute
.text$x:00008444 _text$x         segment para public 'CODE' use32
.text$x:00008444                 assume cs:_text$x
.text$x:00008444                 ;org 8444h
.text$x:00008444 ; COMDAT (pick associative to section at 83C8)
.text$x:00008444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008444
.text$x:00008444 ; =============== S U B R O U T I N E =======================================
.text$x:00008444
.text$x:00008444
.text$x:00008444 __unwindfunclet$??0foundInfo@@QAE@XZ$0 proc near
.text$x:00008444                                         ; DATA XREF: .xdata$x:0000F934o
.text$x:00008444                 mov     ecx, [ebp-10h]
.text$x:00008447                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00008447 __unwindfunclet$??0foundInfo@@QAE@XZ$0 endp
.text$x:00008447
.text$x:0000844C
.text$x:0000844C ; =============== S U B R O U T I N E =======================================
.text$x:0000844C
.text$x:0000844C
.text$x:0000844C __unwindfunclet$??0foundInfo@@QAE@XZ$1 proc near
.text$x:0000844C                                         ; DATA XREF: .xdata$x:0000F93Co
.text$x:0000844C                 mov     ecx, [ebp-10h]
.text$x:0000844F                 add     ecx, 1Ch
.text$x:00008452                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00008452 __unwindfunclet$??0foundInfo@@QAE@XZ$1 endp
.text$x:00008452
.text$x:00008457
.text$x:00008457 ; =============== S U B R O U T I N E =======================================
.text$x:00008457
.text$x:00008457
.text$x:00008457 __ehhandler$??0foundInfo@@QAE@XZ proc near
.text$x:00008457                                         ; DATA XREF: foundInfo::foundInfo(void)+5o
.text$x:00008457
.text$x:00008457 arg_4           = dword ptr  8
.text$x:00008457
.text$x:00008457                 mov     edx, [esp+arg_4]
.text$x:0000845B                 lea     eax, [edx+0Ch]
.text$x:0000845E                 mov     ecx, [edx-8]
.text$x:00008461                 xor     ecx, eax
.text$x:00008463                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008468                 mov     eax, offset __ehfuncinfo$??0foundInfo@@QAE@XZ
.text$x:0000846D                 jmp     ___CxxFrameHandler3
.text$x:0000846D __ehhandler$??0foundInfo@@QAE@XZ endp
.text$x:0000846D
.text$x:0000846D ; ---------------------------------------------------------------------------
.text$x:00008472                 align 4
.text$x:00008472 _text$x         ends
.text$x:00008472
.text$mn:00008474 ; ===========================================================================
.text$mn:00008474
.text$mn:00008474 ; Segment type: Pure code
.text$mn:00008474 ; Segment permissions: Read/Execute
.text$mn:00008474 _text$mn        segment para public 'CODE' use32
.text$mn:00008474                 assume cs:_text$mn
.text$mn:00008474                 ;org 8474h
.text$mn:00008474 ; COMDAT (pick any)
.text$mn:00008474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008474
.text$mn:00008474 ; =============== S U B R O U T I N E =======================================
.text$mn:00008474
.text$mn:00008474 ; Attributes: bp-based frame
.text$mn:00008474
.text$mn:00008474 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00008474                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00008474 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00008474                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00008474
.text$mn:00008474 var_4           = dword ptr -4
.text$mn:00008474 arg_0           = dword ptr  8
.text$mn:00008474
.text$mn:00008474                 push    ebp
.text$mn:00008475                 mov     ebp, esp
.text$mn:00008477                 push    ecx
.text$mn:00008478                 mov     [ebp+var_4], ecx
.text$mn:0000847B                 mov     eax, [ebp+var_4]
.text$mn:0000847E                 mov     ecx, [ebp+arg_0]
.text$mn:00008481                 mov     [eax], ecx
.text$mn:00008483                 mov     eax, [ebp+var_4]
.text$mn:00008486                 mov     esp, ebp
.text$mn:00008488                 pop     ebp
.text$mn:00008489                 retn    4
.text$mn:00008489 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00008489
.text$mn:00008489 _text$mn        ends
.text$mn:00008489
.text$mn:0000848C ; ===========================================================================
.text$mn:0000848C
.text$mn:0000848C ; Segment type: Pure code
.text$mn:0000848C ; Segment permissions: Read/Execute
.text$mn:0000848C _text$mn        segment para public 'CODE' use32
.text$mn:0000848C                 assume cs:_text$mn
.text$mn:0000848C                 ;org 848Ch
.text$mn:0000848C ; COMDAT (pick any)
.text$mn:0000848C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000848C
.text$mn:0000848C ; =============== S U B R O U T I N E =======================================
.text$mn:0000848C
.text$mn:0000848C ; Attributes: bp-based frame
.text$mn:0000848C
.text$mn:0000848C ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, struct std::_Iterator_base12>(void)
.text$mn:0000848C                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:0000848C ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:0000848C                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:0000848C                                         ; __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0+3j ...
.text$mn:0000848C
.text$mn:0000848C var_10          = dword ptr -10h
.text$mn:0000848C var_C           = dword ptr -0Ch
.text$mn:0000848C var_4           = dword ptr -4
.text$mn:0000848C
.text$mn:0000848C                 push    ebp
.text$mn:0000848D                 mov     ebp, esp
.text$mn:0000848F                 push    0FFFFFFFFh
.text$mn:00008491                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00008496                 mov     eax, large fs:0
.text$mn:0000849C                 push    eax
.text$mn:0000849D                 push    ecx
.text$mn:0000849E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000084A3                 xor     eax, ebp
.text$mn:000084A5                 push    eax
.text$mn:000084A6                 lea     eax, [ebp+var_C]
.text$mn:000084A9                 mov     large fs:0, eax
.text$mn:000084AF                 mov     [ebp+var_10], ecx
.text$mn:000084B2                 mov     [ebp+var_4], 0
.text$mn:000084B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000084C0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000084C3                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:000084C8                 mov     ecx, [ebp+var_C]
.text$mn:000084CB                 mov     large fs:0, ecx
.text$mn:000084D2                 pop     ecx
.text$mn:000084D3                 mov     esp, ebp
.text$mn:000084D5                 pop     ebp
.text$mn:000084D6                 retn
.text$mn:000084D6 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:000084D6
.text$mn:000084D6 ; ---------------------------------------------------------------------------
.text$mn:000084D7                 align 4
.text$mn:000084D7 _text$mn        ends
.text$mn:000084D7
.text$x:000084D8 ; ===========================================================================
.text$x:000084D8
.text$x:000084D8 ; Segment type: Pure code
.text$x:000084D8 ; Segment permissions: Read/Execute
.text$x:000084D8 _text$x         segment para public 'CODE' use32
.text$x:000084D8                 assume cs:_text$x
.text$x:000084D8                 ;org 84D8h
.text$x:000084D8 ; COMDAT (pick associative to section at 848C)
.text$x:000084D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000084D8
.text$x:000084D8 ; =============== S U B R O U T I N E =======================================
.text$x:000084D8
.text$x:000084D8
.text$x:000084D8 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:000084D8                                         ; DATA XREF: .xdata$x:00010470o
.text$x:000084D8                 mov     ecx, [ebp-10h]  ; this
.text$x:000084DB                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000084DB __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:000084DB
.text$x:000084E0
.text$x:000084E0 ; =============== S U B R O U T I N E =======================================
.text$x:000084E0
.text$x:000084E0
.text$x:000084E0 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:000084E0                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)+5o
.text$x:000084E0
.text$x:000084E0 arg_4           = dword ptr  8
.text$x:000084E0
.text$x:000084E0                 mov     edx, [esp+arg_4]
.text$x:000084E4                 lea     eax, [edx+0Ch]
.text$x:000084E7                 mov     ecx, [edx-8]
.text$x:000084EA                 xor     ecx, eax
.text$x:000084EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000084F1                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.text$x:000084F6                 jmp     ___CxxFrameHandler3
.text$x:000084F6 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:000084F6
.text$x:000084F6 ; ---------------------------------------------------------------------------
.text$x:000084FB                 align 4
.text$x:000084FB _text$x         ends
.text$x:000084FB
.text$mn:000084FC ; ===========================================================================
.text$mn:000084FC
.text$mn:000084FC ; Segment type: Pure code
.text$mn:000084FC ; Segment permissions: Read/Execute
.text$mn:000084FC _text$mn        segment para public 'CODE' use32
.text$mn:000084FC                 assume cs:_text$mn
.text$mn:000084FC                 ;org 84FCh
.text$mn:000084FC ; COMDAT (pick any)
.text$mn:000084FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000084FC
.text$mn:000084FC ; =============== S U B R O U T I N E =======================================
.text$mn:000084FC
.text$mn:000084FC ; Attributes: bp-based frame
.text$mn:000084FC
.text$mn:000084FC ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:000084FC                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000084FC ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:000084FC                                         ; CODE XREF: __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:000084FC                                         ; __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0+3j ...
.text$mn:000084FC
.text$mn:000084FC var_10          = dword ptr -10h
.text$mn:000084FC var_C           = dword ptr -0Ch
.text$mn:000084FC var_4           = dword ptr -4
.text$mn:000084FC
.text$mn:000084FC                 push    ebp
.text$mn:000084FD                 mov     ebp, esp
.text$mn:000084FF                 push    0FFFFFFFFh
.text$mn:00008501                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00008506                 mov     eax, large fs:0
.text$mn:0000850C                 push    eax
.text$mn:0000850D                 push    ecx
.text$mn:0000850E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008513                 xor     eax, ebp
.text$mn:00008515                 push    eax
.text$mn:00008516                 lea     eax, [ebp+var_C]
.text$mn:00008519                 mov     large fs:0, eax
.text$mn:0000851F                 mov     [ebp+var_10], ecx
.text$mn:00008522                 mov     [ebp+var_4], 0
.text$mn:00008529                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008530                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008533                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00008538                 mov     ecx, [ebp+var_C]
.text$mn:0000853B                 mov     large fs:0, ecx
.text$mn:00008542                 pop     ecx
.text$mn:00008543                 mov     esp, ebp
.text$mn:00008545                 pop     ebp
.text$mn:00008546                 retn
.text$mn:00008546 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00008546
.text$mn:00008546 ; ---------------------------------------------------------------------------
.text$mn:00008547                 align 4
.text$mn:00008547 _text$mn        ends
.text$mn:00008547
.text$x:00008548 ; ===========================================================================
.text$x:00008548
.text$x:00008548 ; Segment type: Pure code
.text$x:00008548 ; Segment permissions: Read/Execute
.text$x:00008548 _text$x         segment para public 'CODE' use32
.text$x:00008548                 assume cs:_text$x
.text$x:00008548                 ;org 8548h
.text$x:00008548 ; COMDAT (pick associative to section at 84FC)
.text$x:00008548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008548
.text$x:00008548 ; =============== S U B R O U T I N E =======================================
.text$x:00008548
.text$x:00008548
.text$x:00008548 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00008548                                         ; DATA XREF: .xdata$x:0001075Co
.text$x:00008548                 mov     ecx, [ebp-10h]  ; this
.text$x:0000854B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000854B __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:0000854B
.text$x:00008550
.text$x:00008550 ; =============== S U B R O U T I N E =======================================
.text$x:00008550
.text$x:00008550
.text$x:00008550 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00008550                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00008550
.text$x:00008550 arg_4           = dword ptr  8
.text$x:00008550
.text$x:00008550                 mov     edx, [esp+arg_4]
.text$x:00008554                 lea     eax, [edx+0Ch]
.text$x:00008557                 mov     ecx, [edx-8]
.text$x:0000855A                 xor     ecx, eax
.text$x:0000855C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008561                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00008566                 jmp     ___CxxFrameHandler3
.text$x:00008566 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00008566
.text$x:00008566 ; ---------------------------------------------------------------------------
.text$x:0000856B                 align 4
.text$x:0000856B _text$x         ends
.text$x:0000856B
.text$mn:0000856C ; ===========================================================================
.text$mn:0000856C
.text$mn:0000856C ; Segment type: Pure code
.text$mn:0000856C ; Segment permissions: Read/Execute
.text$mn:0000856C _text$mn        segment para public 'CODE' use32
.text$mn:0000856C                 assume cs:_text$mn
.text$mn:0000856C                 ;org 856Ch
.text$mn:0000856C ; COMDAT (pick any)
.text$mn:0000856C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000856C
.text$mn:0000856C ; =============== S U B R O U T I N E =======================================
.text$mn:0000856C
.text$mn:0000856C ; Attributes: bp-based frame
.text$mn:0000856C
.text$mn:0000856C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:0000856C                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:0000856C ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000856C                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:0000856C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:0000856C
.text$mn:0000856C var_10          = dword ptr -10h
.text$mn:0000856C var_C           = dword ptr -0Ch
.text$mn:0000856C var_4           = dword ptr -4
.text$mn:0000856C
.text$mn:0000856C                 push    ebp
.text$mn:0000856D                 mov     ebp, esp
.text$mn:0000856F                 push    0FFFFFFFFh
.text$mn:00008571                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00008576                 mov     eax, large fs:0
.text$mn:0000857C                 push    eax
.text$mn:0000857D                 push    ecx
.text$mn:0000857E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008583                 xor     eax, ebp
.text$mn:00008585                 push    eax
.text$mn:00008586                 lea     eax, [ebp+var_C]
.text$mn:00008589                 mov     large fs:0, eax
.text$mn:0000858F                 mov     [ebp+var_10], ecx
.text$mn:00008592                 mov     [ebp+var_4], 0
.text$mn:00008599                 mov     ecx, [ebp+var_10]
.text$mn:0000859C                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:000085A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000085A8                 mov     ecx, [ebp+var_10]
.text$mn:000085AB                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:000085B0                 mov     ecx, [ebp+var_C]
.text$mn:000085B3                 mov     large fs:0, ecx
.text$mn:000085BA                 pop     ecx
.text$mn:000085BB                 mov     esp, ebp
.text$mn:000085BD                 pop     ebp
.text$mn:000085BE                 retn
.text$mn:000085BE ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:000085BE
.text$mn:000085BE ; ---------------------------------------------------------------------------
.text$mn:000085BF                 align 10h
.text$mn:000085BF _text$mn        ends
.text$mn:000085BF
.text$x:000085C0 ; ===========================================================================
.text$x:000085C0
.text$x:000085C0 ; Segment type: Pure code
.text$x:000085C0 ; Segment permissions: Read/Execute
.text$x:000085C0 _text$x         segment para public 'CODE' use32
.text$x:000085C0                 assume cs:_text$x
.text$x:000085C0                 ;org 85C0h
.text$x:000085C0 ; COMDAT (pick associative to section at 856C)
.text$x:000085C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000085C0
.text$x:000085C0 ; =============== S U B R O U T I N E =======================================
.text$x:000085C0
.text$x:000085C0
.text$x:000085C0 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000085C0                                         ; DATA XREF: .xdata$x:0000EFA8o
.text$x:000085C0                 mov     ecx, [ebp-10h]
.text$x:000085C3                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:000085C3 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000085C3
.text$x:000085C8
.text$x:000085C8 ; =============== S U B R O U T I N E =======================================
.text$x:000085C8
.text$x:000085C8
.text$x:000085C8 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:000085C8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:000085C8
.text$x:000085C8 arg_4           = dword ptr  8
.text$x:000085C8
.text$x:000085C8                 mov     edx, [esp+arg_4]
.text$x:000085CC                 lea     eax, [edx+0Ch]
.text$x:000085CF                 mov     ecx, [edx-8]
.text$x:000085D2                 xor     ecx, eax
.text$x:000085D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000085D9                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:000085DE                 jmp     ___CxxFrameHandler3
.text$x:000085DE __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:000085DE
.text$x:000085DE ; ---------------------------------------------------------------------------
.text$x:000085E3                 align 4
.text$x:000085E3 _text$x         ends
.text$x:000085E3
.text$mn:000085E4 ; ===========================================================================
.text$mn:000085E4
.text$mn:000085E4 ; Segment type: Pure code
.text$mn:000085E4 ; Segment permissions: Read/Execute
.text$mn:000085E4 _text$mn        segment para public 'CODE' use32
.text$mn:000085E4                 assume cs:_text$mn
.text$mn:000085E4                 ;org 85E4h
.text$mn:000085E4 ; COMDAT (pick any)
.text$mn:000085E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000085E4
.text$mn:000085E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000085E4
.text$mn:000085E4 ; Attributes: bp-based frame
.text$mn:000085E4
.text$mn:000085E4 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:000085E4                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000085E4 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000085E4                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0+3j
.text$mn:000085E4                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j ...
.text$mn:000085E4
.text$mn:000085E4 var_10          = dword ptr -10h
.text$mn:000085E4 var_C           = dword ptr -0Ch
.text$mn:000085E4 var_4           = dword ptr -4
.text$mn:000085E4
.text$mn:000085E4                 push    ebp
.text$mn:000085E5                 mov     ebp, esp
.text$mn:000085E7                 push    0FFFFFFFFh
.text$mn:000085E9                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000085EE                 mov     eax, large fs:0
.text$mn:000085F4                 push    eax
.text$mn:000085F5                 push    ecx
.text$mn:000085F6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000085FB                 xor     eax, ebp
.text$mn:000085FD                 push    eax
.text$mn:000085FE                 lea     eax, [ebp+var_C]
.text$mn:00008601                 mov     large fs:0, eax
.text$mn:00008607                 mov     [ebp+var_10], ecx
.text$mn:0000860A                 mov     [ebp+var_4], 0
.text$mn:00008611                 mov     ecx, [ebp+var_10]
.text$mn:00008614                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00008619                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008620                 mov     ecx, [ebp+var_10]
.text$mn:00008623                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00008628                 mov     ecx, [ebp+var_C]
.text$mn:0000862B                 mov     large fs:0, ecx
.text$mn:00008632                 pop     ecx
.text$mn:00008633                 mov     esp, ebp
.text$mn:00008635                 pop     ebp
.text$mn:00008636                 retn
.text$mn:00008636 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008636
.text$mn:00008636 ; ---------------------------------------------------------------------------
.text$mn:00008637                 align 4
.text$mn:00008637 _text$mn        ends
.text$mn:00008637
.text$x:00008638 ; ===========================================================================
.text$x:00008638
.text$x:00008638 ; Segment type: Pure code
.text$x:00008638 ; Segment permissions: Read/Execute
.text$x:00008638 _text$x         segment para public 'CODE' use32
.text$x:00008638                 assume cs:_text$x
.text$x:00008638                 ;org 8638h
.text$x:00008638 ; COMDAT (pick associative to section at 85E4)
.text$x:00008638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008638
.text$x:00008638 ; =============== S U B R O U T I N E =======================================
.text$x:00008638
.text$x:00008638
.text$x:00008638 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008638                                         ; DATA XREF: .xdata$x:0000F2C8o
.text$x:00008638                 mov     ecx, [ebp-10h]
.text$x:0000863B                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:0000863B __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000863B
.text$x:00008640
.text$x:00008640 ; =============== S U B R O U T I N E =======================================
.text$x:00008640
.text$x:00008640
.text$x:00008640 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008640                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00008640
.text$x:00008640 arg_4           = dword ptr  8
.text$x:00008640
.text$x:00008640                 mov     edx, [esp+arg_4]
.text$x:00008644                 lea     eax, [edx+0Ch]
.text$x:00008647                 mov     ecx, [edx-8]
.text$x:0000864A                 xor     ecx, eax
.text$x:0000864C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008651                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:00008656                 jmp     ___CxxFrameHandler3
.text$x:00008656 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00008656
.text$x:00008656 ; ---------------------------------------------------------------------------
.text$x:0000865B                 align 4
.text$x:0000865B _text$x         ends
.text$x:0000865B
.text$mn:0000865C ; ===========================================================================
.text$mn:0000865C
.text$mn:0000865C ; Segment type: Pure code
.text$mn:0000865C ; Segment permissions: Read/Execute
.text$mn:0000865C _text$mn        segment para public 'CODE' use32
.text$mn:0000865C                 assume cs:_text$mn
.text$mn:0000865C                 ;org 865Ch
.text$mn:0000865C ; COMDAT (pick any)
.text$mn:0000865C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000865C
.text$mn:0000865C ; =============== S U B R O U T I N E =======================================
.text$mn:0000865C
.text$mn:0000865C ; Attributes: bp-based frame
.text$mn:0000865C
.text$mn:0000865C ; public: __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:0000865C                 public ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000865C ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000865C                                         ; CODE XREF: __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5+3j
.text$mn:0000865C                                         ; __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7+3j ...
.text$mn:0000865C
.text$mn:0000865C var_10          = dword ptr -10h
.text$mn:0000865C var_C           = dword ptr -0Ch
.text$mn:0000865C var_4           = dword ptr -4
.text$mn:0000865C
.text$mn:0000865C                 push    ebp
.text$mn:0000865D                 mov     ebp, esp
.text$mn:0000865F                 push    0FFFFFFFFh
.text$mn:00008661                 push    offset __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00008666                 mov     eax, large fs:0
.text$mn:0000866C                 push    eax
.text$mn:0000866D                 push    ecx
.text$mn:0000866E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008673                 xor     eax, ebp
.text$mn:00008675                 push    eax
.text$mn:00008676                 lea     eax, [ebp+var_C]
.text$mn:00008679                 mov     large fs:0, eax
.text$mn:0000867F                 mov     [ebp+var_10], ecx
.text$mn:00008682                 mov     [ebp+var_4], 0
.text$mn:00008689                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008690                 mov     ecx, [ebp+var_10]
.text$mn:00008693                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00008698                 mov     ecx, [ebp+var_C]
.text$mn:0000869B                 mov     large fs:0, ecx
.text$mn:000086A2                 pop     ecx
.text$mn:000086A3                 mov     esp, ebp
.text$mn:000086A5                 pop     ebp
.text$mn:000086A6                 retn
.text$mn:000086A6 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:000086A6
.text$mn:000086A6 ; ---------------------------------------------------------------------------
.text$mn:000086A7                 align 4
.text$mn:000086A7 _text$mn        ends
.text$mn:000086A7
.text$x:000086A8 ; ===========================================================================
.text$x:000086A8
.text$x:000086A8 ; Segment type: Pure code
.text$x:000086A8 ; Segment permissions: Read/Execute
.text$x:000086A8 _text$x         segment para public 'CODE' use32
.text$x:000086A8                 assume cs:_text$x
.text$x:000086A8                 ;org 86A8h
.text$x:000086A8 ; COMDAT (pick associative to section at 865C)
.text$x:000086A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000086A8
.text$x:000086A8 ; =============== S U B R O U T I N E =======================================
.text$x:000086A8
.text$x:000086A8
.text$x:000086A8 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000086A8                                         ; DATA XREF: .xdata$x:000107E0o
.text$x:000086A8                 mov     ecx, [ebp-10h]
.text$x:000086AB                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:000086AB __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000086AB
.text$x:000086B0
.text$x:000086B0 ; =============== S U B R O U T I N E =======================================
.text$x:000086B0
.text$x:000086B0
.text$x:000086B0 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000086B0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:000086B0
.text$x:000086B0 arg_4           = dword ptr  8
.text$x:000086B0
.text$x:000086B0                 mov     edx, [esp+arg_4]
.text$x:000086B4                 lea     eax, [edx+0Ch]
.text$x:000086B7                 mov     ecx, [edx-8]
.text$x:000086BA                 xor     ecx, eax
.text$x:000086BC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000086C1                 mov     eax, offset __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:000086C6                 jmp     ___CxxFrameHandler3
.text$x:000086C6 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000086C6
.text$x:000086C6 ; ---------------------------------------------------------------------------
.text$x:000086CB                 align 4
.text$x:000086CB _text$x         ends
.text$x:000086CB
.text$mn:000086CC ; ===========================================================================
.text$mn:000086CC
.text$mn:000086CC ; Segment type: Pure code
.text$mn:000086CC ; Segment permissions: Read/Execute
.text$mn:000086CC _text$mn        segment para public 'CODE' use32
.text$mn:000086CC                 assume cs:_text$mn
.text$mn:000086CC                 ;org 86CCh
.text$mn:000086CC ; COMDAT (pick any)
.text$mn:000086CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000086CC
.text$mn:000086CC ; =============== S U B R O U T I N E =======================================
.text$mn:000086CC
.text$mn:000086CC ; Attributes: bp-based frame
.text$mn:000086CC
.text$mn:000086CC ; public: __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:000086CC                 public ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000086CC ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000086CC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+F5p
.text$mn:000086CC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+101p ...
.text$mn:000086CC
.text$mn:000086CC var_10          = dword ptr -10h
.text$mn:000086CC var_C           = dword ptr -0Ch
.text$mn:000086CC var_4           = dword ptr -4
.text$mn:000086CC
.text$mn:000086CC                 push    ebp
.text$mn:000086CD                 mov     ebp, esp
.text$mn:000086CF                 push    0FFFFFFFFh
.text$mn:000086D1                 push    offset __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000086D6                 mov     eax, large fs:0
.text$mn:000086DC                 push    eax
.text$mn:000086DD                 push    ecx
.text$mn:000086DE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000086E3                 xor     eax, ebp
.text$mn:000086E5                 push    eax
.text$mn:000086E6                 lea     eax, [ebp+var_C]
.text$mn:000086E9                 mov     large fs:0, eax
.text$mn:000086EF                 mov     [ebp+var_10], ecx
.text$mn:000086F2                 mov     [ebp+var_4], 0
.text$mn:000086F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008700                 mov     ecx, [ebp+var_10]
.text$mn:00008703                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00008708                 mov     ecx, [ebp+var_C]
.text$mn:0000870B                 mov     large fs:0, ecx
.text$mn:00008712                 pop     ecx
.text$mn:00008713                 mov     esp, ebp
.text$mn:00008715                 pop     ebp
.text$mn:00008716                 retn
.text$mn:00008716 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008716
.text$mn:00008716 ; ---------------------------------------------------------------------------
.text$mn:00008717                 align 4
.text$mn:00008717 _text$mn        ends
.text$mn:00008717
.text$x:00008718 ; ===========================================================================
.text$x:00008718
.text$x:00008718 ; Segment type: Pure code
.text$x:00008718 ; Segment permissions: Read/Execute
.text$x:00008718 _text$x         segment para public 'CODE' use32
.text$x:00008718                 assume cs:_text$x
.text$x:00008718                 ;org 8718h
.text$x:00008718 ; COMDAT (pick associative to section at 86CC)
.text$x:00008718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008718
.text$x:00008718 ; =============== S U B R O U T I N E =======================================
.text$x:00008718
.text$x:00008718
.text$x:00008718 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008718                                         ; DATA XREF: .xdata$x:00010890o
.text$x:00008718                 mov     ecx, [ebp-10h]
.text$x:0000871B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000871B __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000871B
.text$x:00008720
.text$x:00008720 ; =============== S U B R O U T I N E =======================================
.text$x:00008720
.text$x:00008720
.text$x:00008720 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008720                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:00008720
.text$x:00008720 arg_4           = dword ptr  8
.text$x:00008720
.text$x:00008720                 mov     edx, [esp+arg_4]
.text$x:00008724                 lea     eax, [edx+0Ch]
.text$x:00008727                 mov     ecx, [edx-8]
.text$x:0000872A                 xor     ecx, eax
.text$x:0000872C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008731                 mov     eax, offset __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:00008736                 jmp     ___CxxFrameHandler3
.text$x:00008736 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00008736
.text$x:00008736 ; ---------------------------------------------------------------------------
.text$x:0000873B                 align 4
.text$x:0000873B _text$x         ends
.text$x:0000873B
.text$mn:0000873C ; ===========================================================================
.text$mn:0000873C
.text$mn:0000873C ; Segment type: Pure code
.text$mn:0000873C ; Segment permissions: Read/Execute
.text$mn:0000873C _text$mn        segment para public 'CODE' use32
.text$mn:0000873C                 assume cs:_text$mn
.text$mn:0000873C                 ;org 873Ch
.text$mn:0000873C ; COMDAT (pick any)
.text$mn:0000873C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000873C
.text$mn:0000873C ; =============== S U B R O U T I N E =======================================
.text$mn:0000873C
.text$mn:0000873C ; Attributes: bp-based frame
.text$mn:0000873C
.text$mn:0000873C ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:0000873C                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000873C ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:0000873C                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:0000873C                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:0000873C
.text$mn:0000873C var_10          = dword ptr -10h
.text$mn:0000873C var_C           = dword ptr -0Ch
.text$mn:0000873C var_4           = dword ptr -4
.text$mn:0000873C
.text$mn:0000873C                 push    ebp
.text$mn:0000873D                 mov     ebp, esp
.text$mn:0000873F                 push    0FFFFFFFFh
.text$mn:00008741                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00008746                 mov     eax, large fs:0
.text$mn:0000874C                 push    eax
.text$mn:0000874D                 push    ecx
.text$mn:0000874E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008753                 xor     eax, ebp
.text$mn:00008755                 push    eax
.text$mn:00008756                 lea     eax, [ebp+var_C]
.text$mn:00008759                 mov     large fs:0, eax
.text$mn:0000875F                 mov     [ebp+var_10], ecx
.text$mn:00008762                 mov     [ebp+var_4], 0
.text$mn:00008769                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008770                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008773                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00008778                 mov     ecx, [ebp+var_C]
.text$mn:0000877B                 mov     large fs:0, ecx
.text$mn:00008782                 pop     ecx
.text$mn:00008783                 mov     esp, ebp
.text$mn:00008785                 pop     ebp
.text$mn:00008786                 retn
.text$mn:00008786 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00008786
.text$mn:00008786 ; ---------------------------------------------------------------------------
.text$mn:00008787                 align 4
.text$mn:00008787 _text$mn        ends
.text$mn:00008787
.text$x:00008788 ; ===========================================================================
.text$x:00008788
.text$x:00008788 ; Segment type: Pure code
.text$x:00008788 ; Segment permissions: Read/Execute
.text$x:00008788 _text$x         segment para public 'CODE' use32
.text$x:00008788                 assume cs:_text$x
.text$x:00008788                 ;org 8788h
.text$x:00008788 ; COMDAT (pick associative to section at 873C)
.text$x:00008788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008788
.text$x:00008788 ; =============== S U B R O U T I N E =======================================
.text$x:00008788
.text$x:00008788
.text$x:00008788 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00008788                                         ; DATA XREF: .xdata$x:0000EF50o
.text$x:00008788                 mov     ecx, [ebp-10h]  ; this
.text$x:0000878B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000878B __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:0000878B
.text$x:00008790
.text$x:00008790 ; =============== S U B R O U T I N E =======================================
.text$x:00008790
.text$x:00008790
.text$x:00008790 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00008790                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00008790
.text$x:00008790 arg_4           = dword ptr  8
.text$x:00008790
.text$x:00008790                 mov     edx, [esp+arg_4]
.text$x:00008794                 lea     eax, [edx+0Ch]
.text$x:00008797                 mov     ecx, [edx-8]
.text$x:0000879A                 xor     ecx, eax
.text$x:0000879C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000087A1                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000087A6                 jmp     ___CxxFrameHandler3
.text$x:000087A6 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000087A6
.text$x:000087A6 ; ---------------------------------------------------------------------------
.text$x:000087AB                 align 4
.text$x:000087AB _text$x         ends
.text$x:000087AB
.text$mn:000087AC ; ===========================================================================
.text$mn:000087AC
.text$mn:000087AC ; Segment type: Pure code
.text$mn:000087AC ; Segment permissions: Read/Execute
.text$mn:000087AC _text$mn        segment para public 'CODE' use32
.text$mn:000087AC                 assume cs:_text$mn
.text$mn:000087AC                 ;org 87ACh
.text$mn:000087AC ; COMDAT (pick any)
.text$mn:000087AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000087AC
.text$mn:000087AC ; =============== S U B R O U T I N E =======================================
.text$mn:000087AC
.text$mn:000087AC ; Attributes: bp-based frame
.text$mn:000087AC
.text$mn:000087AC ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000087AC                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000087AC ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000087AC                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:000087AC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:000087AC
.text$mn:000087AC var_10          = dword ptr -10h
.text$mn:000087AC var_C           = dword ptr -0Ch
.text$mn:000087AC var_4           = dword ptr -4
.text$mn:000087AC
.text$mn:000087AC                 push    ebp
.text$mn:000087AD                 mov     ebp, esp
.text$mn:000087AF                 push    0FFFFFFFFh
.text$mn:000087B1                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000087B6                 mov     eax, large fs:0
.text$mn:000087BC                 push    eax
.text$mn:000087BD                 push    ecx
.text$mn:000087BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000087C3                 xor     eax, ebp
.text$mn:000087C5                 push    eax
.text$mn:000087C6                 lea     eax, [ebp+var_C]
.text$mn:000087C9                 mov     large fs:0, eax
.text$mn:000087CF                 mov     [ebp+var_10], ecx
.text$mn:000087D2                 mov     [ebp+var_4], 0
.text$mn:000087D9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000087E0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000087E3                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000087E8                 mov     ecx, [ebp+var_C]
.text$mn:000087EB                 mov     large fs:0, ecx
.text$mn:000087F2                 pop     ecx
.text$mn:000087F3                 mov     esp, ebp
.text$mn:000087F5                 pop     ebp
.text$mn:000087F6                 retn
.text$mn:000087F6 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:000087F6
.text$mn:000087F6 ; ---------------------------------------------------------------------------
.text$mn:000087F7                 align 4
.text$mn:000087F7 _text$mn        ends
.text$mn:000087F7
.text$x:000087F8 ; ===========================================================================
.text$x:000087F8
.text$x:000087F8 ; Segment type: Pure code
.text$x:000087F8 ; Segment permissions: Read/Execute
.text$x:000087F8 _text$x         segment para public 'CODE' use32
.text$x:000087F8                 assume cs:_text$x
.text$x:000087F8                 ;org 87F8h
.text$x:000087F8 ; COMDAT (pick associative to section at 87AC)
.text$x:000087F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000087F8
.text$x:000087F8 ; =============== S U B R O U T I N E =======================================
.text$x:000087F8
.text$x:000087F8
.text$x:000087F8 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:000087F8                                         ; DATA XREF: .xdata$x:0000F270o
.text$x:000087F8                 mov     ecx, [ebp-10h]  ; this
.text$x:000087FB                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000087FB __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:000087FB
.text$x:00008800
.text$x:00008800 ; =============== S U B R O U T I N E =======================================
.text$x:00008800
.text$x:00008800
.text$x:00008800 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00008800                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00008800
.text$x:00008800 arg_4           = dword ptr  8
.text$x:00008800
.text$x:00008800                 mov     edx, [esp+arg_4]
.text$x:00008804                 lea     eax, [edx+0Ch]
.text$x:00008807                 mov     ecx, [edx-8]
.text$x:0000880A                 xor     ecx, eax
.text$x:0000880C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008811                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00008816                 jmp     ___CxxFrameHandler3
.text$x:00008816 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00008816
.text$x:00008816 ; ---------------------------------------------------------------------------
.text$x:0000881B                 align 4
.text$x:0000881B _text$x         ends
.text$x:0000881B
.text$mn:0000881C ; ===========================================================================
.text$mn:0000881C
.text$mn:0000881C ; Segment type: Pure code
.text$mn:0000881C ; Segment permissions: Read/Execute
.text$mn:0000881C _text$mn        segment para public 'CODE' use32
.text$mn:0000881C                 assume cs:_text$mn
.text$mn:0000881C                 ;org 881Ch
.text$mn:0000881C ; COMDAT (pick any)
.text$mn:0000881C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000881C
.text$mn:0000881C ; =============== S U B R O U T I N E =======================================
.text$mn:0000881C
.text$mn:0000881C ; Attributes: bp-based frame
.text$mn:0000881C
.text$mn:0000881C ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class FunctionParser *, class std::allocator<class FunctionParser *>>>::~_Vector_alloc<0, struct std::_Vec_base_types<class FunctionParser *, class std::allocator<class FunctionParser *>>>(void)
.text$mn:0000881C                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ
.text$mn:0000881C ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000881C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::~vector<FunctionParser *,std::allocator<FunctionParser *>>(void)+3Fp
.text$mn:0000881C                                         ; __unwindfunclet$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ$0+3j
.text$mn:0000881C
.text$mn:0000881C var_10          = dword ptr -10h
.text$mn:0000881C var_C           = dword ptr -0Ch
.text$mn:0000881C var_4           = dword ptr -4
.text$mn:0000881C
.text$mn:0000881C                 push    ebp
.text$mn:0000881D                 mov     ebp, esp
.text$mn:0000881F                 push    0FFFFFFFFh
.text$mn:00008821                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ
.text$mn:00008826                 mov     eax, large fs:0
.text$mn:0000882C                 push    eax
.text$mn:0000882D                 push    ecx
.text$mn:0000882E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008833                 xor     eax, ebp
.text$mn:00008835                 push    eax
.text$mn:00008836                 lea     eax, [ebp+var_C]
.text$mn:00008839                 mov     large fs:0, eax
.text$mn:0000883F                 mov     [ebp+var_10], ecx
.text$mn:00008842                 mov     [ebp+var_4], 0
.text$mn:00008849                 mov     ecx, [ebp+var_10]
.text$mn:0000884C                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Free_proxy(void)
.text$mn:00008851                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008858                 mov     ecx, [ebp+var_10]
.text$mn:0000885B                 call    ??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FunctionParser *>>::~_Vector_val<std::_Simple_types<FunctionParser *>>(void)
.text$mn:00008860                 mov     ecx, [ebp+var_C]
.text$mn:00008863                 mov     large fs:0, ecx
.text$mn:0000886A                 pop     ecx
.text$mn:0000886B                 mov     esp, ebp
.text$mn:0000886D                 pop     ebp
.text$mn:0000886E                 retn
.text$mn:0000886E ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000886E
.text$mn:0000886E ; ---------------------------------------------------------------------------
.text$mn:0000886F                 align 10h
.text$mn:0000886F _text$mn        ends
.text$mn:0000886F
.text$x:00008870 ; ===========================================================================
.text$x:00008870
.text$x:00008870 ; Segment type: Pure code
.text$x:00008870 ; Segment permissions: Read/Execute
.text$x:00008870 _text$x         segment para public 'CODE' use32
.text$x:00008870                 assume cs:_text$x
.text$x:00008870                 ;org 8870h
.text$x:00008870 ; COMDAT (pick associative to section at 881C)
.text$x:00008870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008870
.text$x:00008870 ; =============== S U B R O U T I N E =======================================
.text$x:00008870
.text$x:00008870
.text$x:00008870 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008870                                         ; DATA XREF: .xdata$x:000101B0o
.text$x:00008870                 mov     ecx, [ebp-10h]
.text$x:00008873                 jmp     ??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<FunctionParser *>>::~_Vector_val<std::_Simple_types<FunctionParser *>>(void)
.text$x:00008873 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008873
.text$x:00008878
.text$x:00008878 ; =============== S U B R O U T I N E =======================================
.text$x:00008878
.text$x:00008878
.text$x:00008878 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008878                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::~_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>(void)+5o
.text$x:00008878
.text$x:00008878 arg_4           = dword ptr  8
.text$x:00008878
.text$x:00008878                 mov     edx, [esp+arg_4]
.text$x:0000887C                 lea     eax, [edx+0Ch]
.text$x:0000887F                 mov     ecx, [edx-8]
.text$x:00008882                 xor     ecx, eax
.text$x:00008884                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008889                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ
.text$x:0000888E                 jmp     ___CxxFrameHandler3
.text$x:0000888E __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ endp
.text$x:0000888E
.text$x:0000888E ; ---------------------------------------------------------------------------
.text$x:00008893                 align 4
.text$x:00008893 _text$x         ends
.text$x:00008893
.text$mn:00008894 ; ===========================================================================
.text$mn:00008894
.text$mn:00008894 ; Segment type: Pure code
.text$mn:00008894 ; Segment permissions: Read/Execute
.text$mn:00008894 _text$mn        segment para public 'CODE' use32
.text$mn:00008894                 assume cs:_text$mn
.text$mn:00008894                 ;org 8894h
.text$mn:00008894 ; COMDAT (pick any)
.text$mn:00008894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008894
.text$mn:00008894 ; =============== S U B R O U T I N E =======================================
.text$mn:00008894
.text$mn:00008894 ; Attributes: bp-based frame
.text$mn:00008894
.text$mn:00008894 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>>::~_Vector_alloc<0, struct std::_Vec_base_types<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>>(void)
.text$mn:00008894                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ
.text$mn:00008894 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ proc near
.text$mn:00008894                                         ; CODE XREF: __unwindfunclet$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ$0+3j
.text$mn:00008894                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)+3Fp ...
.text$mn:00008894
.text$mn:00008894 var_10          = dword ptr -10h
.text$mn:00008894 var_C           = dword ptr -0Ch
.text$mn:00008894 var_4           = dword ptr -4
.text$mn:00008894
.text$mn:00008894                 push    ebp
.text$mn:00008895                 mov     ebp, esp
.text$mn:00008897                 push    0FFFFFFFFh
.text$mn:00008899                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ
.text$mn:0000889E                 mov     eax, large fs:0
.text$mn:000088A4                 push    eax
.text$mn:000088A5                 push    ecx
.text$mn:000088A6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000088AB                 xor     eax, ebp
.text$mn:000088AD                 push    eax
.text$mn:000088AE                 lea     eax, [ebp+var_C]
.text$mn:000088B1                 mov     large fs:0, eax
.text$mn:000088B7                 mov     [ebp+var_10], ecx
.text$mn:000088BA                 mov     [ebp+var_4], 0
.text$mn:000088C1                 mov     ecx, [ebp+var_10]
.text$mn:000088C4                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Free_proxy(void)
.text$mn:000088C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000088D0                 mov     ecx, [ebp+var_10]
.text$mn:000088D3                 call    ??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<int,int>>>::~_Vector_val<std::_Simple_types<std::pair<int,int>>>(void)
.text$mn:000088D8                 mov     ecx, [ebp+var_C]
.text$mn:000088DB                 mov     large fs:0, ecx
.text$mn:000088E2                 pop     ecx
.text$mn:000088E3                 mov     esp, ebp
.text$mn:000088E5                 pop     ebp
.text$mn:000088E6                 retn
.text$mn:000088E6 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ endp
.text$mn:000088E6
.text$mn:000088E6 ; ---------------------------------------------------------------------------
.text$mn:000088E7                 align 4
.text$mn:000088E7 _text$mn        ends
.text$mn:000088E7
.text$x:000088E8 ; ===========================================================================
.text$x:000088E8
.text$x:000088E8 ; Segment type: Pure code
.text$x:000088E8 ; Segment permissions: Read/Execute
.text$x:000088E8 _text$x         segment para public 'CODE' use32
.text$x:000088E8                 assume cs:_text$x
.text$x:000088E8                 ;org 88E8h
.text$x:000088E8 ; COMDAT (pick associative to section at 8894)
.text$x:000088E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000088E8
.text$x:000088E8 ; =============== S U B R O U T I N E =======================================
.text$x:000088E8
.text$x:000088E8
.text$x:000088E8 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ$0 proc near
.text$x:000088E8                                         ; DATA XREF: .xdata$x:00010628o
.text$x:000088E8                 mov     ecx, [ebp-10h]
.text$x:000088EB                 jmp     ??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<int,int>>>::~_Vector_val<std::_Simple_types<std::pair<int,int>>>(void)
.text$x:000088EB __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ$0 endp
.text$x:000088EB
.text$x:000088F0
.text$x:000088F0 ; =============== S U B R O U T I N E =======================================
.text$x:000088F0
.text$x:000088F0
.text$x:000088F0 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ proc near
.text$x:000088F0                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(void)+5o
.text$x:000088F0
.text$x:000088F0 arg_4           = dword ptr  8
.text$x:000088F0
.text$x:000088F0                 mov     edx, [esp+arg_4]
.text$x:000088F4                 lea     eax, [edx+0Ch]
.text$x:000088F7                 mov     ecx, [edx-8]
.text$x:000088FA                 xor     ecx, eax
.text$x:000088FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008901                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ
.text$x:00008906                 jmp     ___CxxFrameHandler3
.text$x:00008906 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ endp
.text$x:00008906
.text$x:00008906 ; ---------------------------------------------------------------------------
.text$x:0000890B                 align 4
.text$x:0000890B _text$x         ends
.text$x:0000890B
.text$mn:0000890C ; ===========================================================================
.text$mn:0000890C
.text$mn:0000890C ; Segment type: Pure code
.text$mn:0000890C ; Segment permissions: Read/Execute
.text$mn:0000890C _text$mn        segment para public 'CODE' use32
.text$mn:0000890C                 assume cs:_text$mn
.text$mn:0000890C                 ;org 890Ch
.text$mn:0000890C ; COMDAT (pick any)
.text$mn:0000890C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000890C
.text$mn:0000890C ; =============== S U B R O U T I N E =======================================
.text$mn:0000890C
.text$mn:0000890C ; Attributes: bp-based frame
.text$mn:0000890C
.text$mn:0000890C ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct AssociationInfo, class std::allocator<struct AssociationInfo>>>::~_Vector_alloc<0, struct std::_Vec_base_types<struct AssociationInfo, class std::allocator<struct AssociationInfo>>>(void)
.text$mn:0000890C                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ
.text$mn:0000890C ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000890C                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::~vector<AssociationInfo,std::allocator<AssociationInfo>>(void)+3Fp
.text$mn:0000890C                                         ; __unwindfunclet$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ$0+3j
.text$mn:0000890C
.text$mn:0000890C var_10          = dword ptr -10h
.text$mn:0000890C var_C           = dword ptr -0Ch
.text$mn:0000890C var_4           = dword ptr -4
.text$mn:0000890C
.text$mn:0000890C                 push    ebp
.text$mn:0000890D                 mov     ebp, esp
.text$mn:0000890F                 push    0FFFFFFFFh
.text$mn:00008911                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ
.text$mn:00008916                 mov     eax, large fs:0
.text$mn:0000891C                 push    eax
.text$mn:0000891D                 push    ecx
.text$mn:0000891E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008923                 xor     eax, ebp
.text$mn:00008925                 push    eax
.text$mn:00008926                 lea     eax, [ebp+var_C]
.text$mn:00008929                 mov     large fs:0, eax
.text$mn:0000892F                 mov     [ebp+var_10], ecx
.text$mn:00008932                 mov     [ebp+var_4], 0
.text$mn:00008939                 mov     ecx, [ebp+var_10]
.text$mn:0000893C                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Free_proxy(void)
.text$mn:00008941                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008948                 mov     ecx, [ebp+var_10]
.text$mn:0000894B                 call    ??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<AssociationInfo>>::~_Vector_val<std::_Simple_types<AssociationInfo>>(void)
.text$mn:00008950                 mov     ecx, [ebp+var_C]
.text$mn:00008953                 mov     large fs:0, ecx
.text$mn:0000895A                 pop     ecx
.text$mn:0000895B                 mov     esp, ebp
.text$mn:0000895D                 pop     ebp
.text$mn:0000895E                 retn
.text$mn:0000895E ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:0000895E
.text$mn:0000895E ; ---------------------------------------------------------------------------
.text$mn:0000895F                 align 10h
.text$mn:0000895F _text$mn        ends
.text$mn:0000895F
.text$x:00008960 ; ===========================================================================
.text$x:00008960
.text$x:00008960 ; Segment type: Pure code
.text$x:00008960 ; Segment permissions: Read/Execute
.text$x:00008960 _text$x         segment para public 'CODE' use32
.text$x:00008960                 assume cs:_text$x
.text$x:00008960                 ;org 8960h
.text$x:00008960 ; COMDAT (pick associative to section at 890C)
.text$x:00008960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008960
.text$x:00008960 ; =============== S U B R O U T I N E =======================================
.text$x:00008960
.text$x:00008960
.text$x:00008960 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008960                                         ; DATA XREF: .xdata$x:000102B8o
.text$x:00008960                 mov     ecx, [ebp-10h]
.text$x:00008963                 jmp     ??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<AssociationInfo>>::~_Vector_val<std::_Simple_types<AssociationInfo>>(void)
.text$x:00008963 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008963
.text$x:00008968
.text$x:00008968 ; =============== S U B R O U T I N E =======================================
.text$x:00008968
.text$x:00008968
.text$x:00008968 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008968                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>(void)+5o
.text$x:00008968
.text$x:00008968 arg_4           = dword ptr  8
.text$x:00008968
.text$x:00008968                 mov     edx, [esp+arg_4]
.text$x:0000896C                 lea     eax, [edx+0Ch]
.text$x:0000896F                 mov     ecx, [edx-8]
.text$x:00008972                 xor     ecx, eax
.text$x:00008974                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008979                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ
.text$x:0000897E                 jmp     ___CxxFrameHandler3
.text$x:0000897E __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ endp
.text$x:0000897E
.text$x:0000897E ; ---------------------------------------------------------------------------
.text$x:00008983                 align 4
.text$x:00008983 _text$x         ends
.text$x:00008983
.text$mn:00008984 ; ===========================================================================
.text$mn:00008984
.text$mn:00008984 ; Segment type: Pure code
.text$mn:00008984 ; Segment permissions: Read/Execute
.text$mn:00008984 _text$mn        segment para public 'CODE' use32
.text$mn:00008984                 assume cs:_text$mn
.text$mn:00008984                 ;org 8984h
.text$mn:00008984 ; COMDAT (pick any)
.text$mn:00008984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008984
.text$mn:00008984 ; =============== S U B R O U T I N E =======================================
.text$mn:00008984
.text$mn:00008984 ; Attributes: bp-based frame
.text$mn:00008984
.text$mn:00008984 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:00008984                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:00008984 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$mn:00008984                                         ; CODE XREF: __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$2+3j
.text$mn:00008984                                         ; __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0+3j ...
.text$mn:00008984
.text$mn:00008984 var_10          = dword ptr -10h
.text$mn:00008984 var_C           = dword ptr -0Ch
.text$mn:00008984 var_4           = dword ptr -4
.text$mn:00008984
.text$mn:00008984                 push    ebp
.text$mn:00008985                 mov     ebp, esp
.text$mn:00008987                 push    0FFFFFFFFh
.text$mn:00008989                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:0000898E                 mov     eax, large fs:0
.text$mn:00008994                 push    eax
.text$mn:00008995                 push    ecx
.text$mn:00008996                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000899B                 xor     eax, ebp
.text$mn:0000899D                 push    eax
.text$mn:0000899E                 lea     eax, [ebp+var_C]
.text$mn:000089A1                 mov     large fs:0, eax
.text$mn:000089A7                 mov     [ebp+var_10], ecx
.text$mn:000089AA                 mov     [ebp+var_4], 0
.text$mn:000089B1                 mov     ecx, [ebp+var_10]
.text$mn:000089B4                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:000089B9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000089C0                 mov     ecx, [ebp+var_10]
.text$mn:000089C3                 call    ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000089C8                 mov     ecx, [ebp+var_C]
.text$mn:000089CB                 mov     large fs:0, ecx
.text$mn:000089D2                 pop     ecx
.text$mn:000089D3                 mov     esp, ebp
.text$mn:000089D5                 pop     ebp
.text$mn:000089D6                 retn
.text$mn:000089D6 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$mn:000089D6
.text$mn:000089D6 ; ---------------------------------------------------------------------------
.text$mn:000089D7                 align 4
.text$mn:000089D7 _text$mn        ends
.text$mn:000089D7
.text$x:000089D8 ; ===========================================================================
.text$x:000089D8
.text$x:000089D8 ; Segment type: Pure code
.text$x:000089D8 ; Segment permissions: Read/Execute
.text$x:000089D8 _text$x         segment para public 'CODE' use32
.text$x:000089D8                 assume cs:_text$x
.text$x:000089D8                 ;org 89D8h
.text$x:000089D8 ; COMDAT (pick associative to section at 8984)
.text$x:000089D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000089D8
.text$x:000089D8 ; =============== S U B R O U T I N E =======================================
.text$x:000089D8
.text$x:000089D8
.text$x:000089D8 __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
.text$x:000089D8                                         ; DATA XREF: .xdata$x:0000F6C8o
.text$x:000089D8                 mov     ecx, [ebp-10h]
.text$x:000089DB                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:000089DB __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 endp
.text$x:000089DB
.text$x:000089E0
.text$x:000089E0 ; =============== S U B R O U T I N E =======================================
.text$x:000089E0
.text$x:000089E0
.text$x:000089E0 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$x:000089E0                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:000089E0
.text$x:000089E0 arg_4           = dword ptr  8
.text$x:000089E0
.text$x:000089E0                 mov     edx, [esp+arg_4]
.text$x:000089E4                 lea     eax, [edx+0Ch]
.text$x:000089E7                 mov     ecx, [edx-8]
.text$x:000089EA                 xor     ecx, eax
.text$x:000089EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000089F1                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$x:000089F6                 jmp     ___CxxFrameHandler3
.text$x:000089F6 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$x:000089F6
.text$x:000089F6 ; ---------------------------------------------------------------------------
.text$x:000089FB                 align 4
.text$x:000089FB _text$x         ends
.text$x:000089FB
.text$mn:000089FC ; ===========================================================================
.text$mn:000089FC
.text$mn:000089FC ; Segment type: Pure code
.text$mn:000089FC ; Segment permissions: Read/Execute
.text$mn:000089FC _text$mn        segment para public 'CODE' use32
.text$mn:000089FC                 assume cs:_text$mn
.text$mn:000089FC                 ;org 89FCh
.text$mn:000089FC ; COMDAT (pick any)
.text$mn:000089FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089FC
.text$mn:000089FC ; =============== S U B R O U T I N E =======================================
.text$mn:000089FC
.text$mn:000089FC ; Attributes: bp-based frame
.text$mn:000089FC
.text$mn:000089FC ; public: __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:000089FC                 public ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:000089FC ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000089FC                                         ; CODE XREF: __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$3+6j
.text$mn:000089FC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+9Bp ...
.text$mn:000089FC
.text$mn:000089FC var_10          = dword ptr -10h
.text$mn:000089FC var_C           = dword ptr -0Ch
.text$mn:000089FC var_4           = dword ptr -4
.text$mn:000089FC
.text$mn:000089FC                 push    ebp
.text$mn:000089FD                 mov     ebp, esp
.text$mn:000089FF                 push    0FFFFFFFFh
.text$mn:00008A01                 push    offset __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:00008A06                 mov     eax, large fs:0
.text$mn:00008A0C                 push    eax
.text$mn:00008A0D                 push    ecx
.text$mn:00008A0E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008A13                 xor     eax, ebp
.text$mn:00008A15                 push    eax
.text$mn:00008A16                 lea     eax, [ebp+var_C]
.text$mn:00008A19                 mov     large fs:0, eax
.text$mn:00008A1F                 mov     [ebp+var_10], ecx
.text$mn:00008A22                 mov     [ebp+var_4], 0
.text$mn:00008A29                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008A30                 mov     ecx, [ebp+var_10]
.text$mn:00008A33                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$mn:00008A38                 mov     ecx, [ebp+var_C]
.text$mn:00008A3B                 mov     large fs:0, ecx
.text$mn:00008A42                 pop     ecx
.text$mn:00008A43                 mov     esp, ebp
.text$mn:00008A45                 pop     ebp
.text$mn:00008A46                 retn
.text$mn:00008A46 ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008A46
.text$mn:00008A46 ; ---------------------------------------------------------------------------
.text$mn:00008A47                 align 4
.text$mn:00008A47 _text$mn        ends
.text$mn:00008A47
.text$x:00008A48 ; ===========================================================================
.text$x:00008A48
.text$x:00008A48 ; Segment type: Pure code
.text$x:00008A48 ; Segment permissions: Read/Execute
.text$x:00008A48 _text$x         segment para public 'CODE' use32
.text$x:00008A48                 assume cs:_text$x
.text$x:00008A48                 ;org 8A48h
.text$x:00008A48 ; COMDAT (pick associative to section at 89FC)
.text$x:00008A48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008A48
.text$x:00008A48 ; =============== S U B R O U T I N E =======================================
.text$x:00008A48
.text$x:00008A48
.text$x:00008A48 __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008A48                                         ; DATA XREF: .xdata$x:000104F4o
.text$x:00008A48                 mov     ecx, [ebp-10h]
.text$x:00008A4B                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,int,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::_Iterator_base12>(void)
.text$x:00008A4B __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008A4B
.text$x:00008A50
.text$x:00008A50 ; =============== S U B R O U T I N E =======================================
.text$x:00008A50
.text$x:00008A50
.text$x:00008A50 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008A50                                         ; DATA XREF: std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:00008A50
.text$x:00008A50 arg_4           = dword ptr  8
.text$x:00008A50
.text$x:00008A50                 mov     edx, [esp+arg_4]
.text$x:00008A54                 lea     eax, [edx+0Ch]
.text$x:00008A57                 mov     ecx, [edx-8]
.text$x:00008A5A                 xor     ecx, eax
.text$x:00008A5C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008A61                 mov     eax, offset __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$x:00008A66                 jmp     ___CxxFrameHandler3
.text$x:00008A66 __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$x:00008A66
.text$x:00008A66 ; ---------------------------------------------------------------------------
.text$x:00008A6B                 align 4
.text$x:00008A6B _text$x         ends
.text$x:00008A6B
.text$mn:00008A6C ; ===========================================================================
.text$mn:00008A6C
.text$mn:00008A6C ; Segment type: Pure code
.text$mn:00008A6C ; Segment permissions: Read/Execute
.text$mn:00008A6C _text$mn        segment para public 'CODE' use32
.text$mn:00008A6C                 assume cs:_text$mn
.text$mn:00008A6C                 ;org 8A6Ch
.text$mn:00008A6C ; COMDAT (pick any)
.text$mn:00008A6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A6C
.text$mn:00008A6C ; =============== S U B R O U T I N E =======================================
.text$mn:00008A6C
.text$mn:00008A6C ; Attributes: bp-based frame
.text$mn:00008A6C
.text$mn:00008A6C ; public: __thiscall std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:00008A6C                 public ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:00008A6C ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00008A6C                                         ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+20Bp
.text$mn:00008A6C                                         ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+21Ap ...
.text$mn:00008A6C
.text$mn:00008A6C var_10          = dword ptr -10h
.text$mn:00008A6C var_C           = dword ptr -0Ch
.text$mn:00008A6C var_4           = dword ptr -4
.text$mn:00008A6C
.text$mn:00008A6C                 push    ebp
.text$mn:00008A6D                 mov     ebp, esp
.text$mn:00008A6F                 push    0FFFFFFFFh
.text$mn:00008A71                 push    offset __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$mn:00008A76                 mov     eax, large fs:0
.text$mn:00008A7C                 push    eax
.text$mn:00008A7D                 push    ecx
.text$mn:00008A7E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008A83                 xor     eax, ebp
.text$mn:00008A85                 push    eax
.text$mn:00008A86                 lea     eax, [ebp+var_C]
.text$mn:00008A89                 mov     large fs:0, eax
.text$mn:00008A8F                 mov     [ebp+var_10], ecx
.text$mn:00008A92                 mov     [ebp+var_4], 0
.text$mn:00008A99                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008AA0                 mov     ecx, [ebp+var_10]
.text$mn:00008AA3                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00008AA8                 mov     ecx, [ebp+var_C]
.text$mn:00008AAB                 mov     large fs:0, ecx
.text$mn:00008AB2                 pop     ecx
.text$mn:00008AB3                 mov     esp, ebp
.text$mn:00008AB5                 pop     ebp
.text$mn:00008AB6                 retn
.text$mn:00008AB6 ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008AB6
.text$mn:00008AB6 ; ---------------------------------------------------------------------------
.text$mn:00008AB7                 align 4
.text$mn:00008AB7 _text$mn        ends
.text$mn:00008AB7
.text$x:00008AB8 ; ===========================================================================
.text$x:00008AB8
.text$x:00008AB8 ; Segment type: Pure code
.text$x:00008AB8 ; Segment permissions: Read/Execute
.text$x:00008AB8 _text$x         segment para public 'CODE' use32
.text$x:00008AB8                 assume cs:_text$x
.text$x:00008AB8                 ;org 8AB8h
.text$x:00008AB8 ; COMDAT (pick associative to section at 8A6C)
.text$x:00008AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008AB8
.text$x:00008AB8 ; =============== S U B R O U T I N E =======================================
.text$x:00008AB8
.text$x:00008AB8
.text$x:00008AB8 __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008AB8                                         ; DATA XREF: .xdata$x:00010578o
.text$x:00008AB8                 mov     ecx, [ebp-10h]
.text$x:00008ABB                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00008ABB __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008ABB
.text$x:00008AC0
.text$x:00008AC0 ; =============== S U B R O U T I N E =======================================
.text$x:00008AC0
.text$x:00008AC0
.text$x:00008AC0 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008AC0                                         ; DATA XREF: std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:00008AC0
.text$x:00008AC0 arg_4           = dword ptr  8
.text$x:00008AC0
.text$x:00008AC0                 mov     edx, [esp+arg_4]
.text$x:00008AC4                 lea     eax, [edx+0Ch]
.text$x:00008AC7                 mov     ecx, [edx-8]
.text$x:00008ACA                 xor     ecx, eax
.text$x:00008ACC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008AD1                 mov     eax, offset __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.text$x:00008AD6                 jmp     ___CxxFrameHandler3
.text$x:00008AD6 __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ endp
.text$x:00008AD6
.text$x:00008AD6 ; ---------------------------------------------------------------------------
.text$x:00008ADB                 align 4
.text$x:00008ADB _text$x         ends
.text$x:00008ADB
.text$mn:00008ADC ; ===========================================================================
.text$mn:00008ADC
.text$mn:00008ADC ; Segment type: Pure code
.text$mn:00008ADC ; Segment permissions: Read/Execute
.text$mn:00008ADC _text$mn        segment para public 'CODE' use32
.text$mn:00008ADC                 assume cs:_text$mn
.text$mn:00008ADC                 ;org 8ADCh
.text$mn:00008ADC ; COMDAT (pick any)
.text$mn:00008ADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008ADC
.text$mn:00008ADC ; =============== S U B R O U T I N E =======================================
.text$mn:00008ADC
.text$mn:00008ADC ; Attributes: bp-based frame
.text$mn:00008ADC
.text$mn:00008ADC ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class FunctionParser *>>::~_Vector_val<struct std::_Simple_types<class FunctionParser *>>(void)
.text$mn:00008ADC                 public ??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ
.text$mn:00008ADC ??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ proc near
.text$mn:00008ADC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::~_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>(void)+3Fp
.text$mn:00008ADC                                         ; __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ$0+3j
.text$mn:00008ADC
.text$mn:00008ADC var_10          = dword ptr -10h
.text$mn:00008ADC var_C           = dword ptr -0Ch
.text$mn:00008ADC var_4           = dword ptr -4
.text$mn:00008ADC
.text$mn:00008ADC                 push    ebp
.text$mn:00008ADD                 mov     ebp, esp
.text$mn:00008ADF                 push    0FFFFFFFFh
.text$mn:00008AE1                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ
.text$mn:00008AE6                 mov     eax, large fs:0
.text$mn:00008AEC                 push    eax
.text$mn:00008AED                 push    ecx
.text$mn:00008AEE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008AF3                 xor     eax, ebp
.text$mn:00008AF5                 push    eax
.text$mn:00008AF6                 lea     eax, [ebp+var_C]
.text$mn:00008AF9                 mov     large fs:0, eax
.text$mn:00008AFF                 mov     [ebp+var_10], ecx
.text$mn:00008B02                 mov     [ebp+var_4], 0
.text$mn:00008B09                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008B10                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008B13                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00008B18                 mov     ecx, [ebp+var_C]
.text$mn:00008B1B                 mov     large fs:0, ecx
.text$mn:00008B22                 pop     ecx
.text$mn:00008B23                 mov     esp, ebp
.text$mn:00008B25                 pop     ebp
.text$mn:00008B26                 retn
.text$mn:00008B26 ??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ endp
.text$mn:00008B26
.text$mn:00008B26 ; ---------------------------------------------------------------------------
.text$mn:00008B27                 align 4
.text$mn:00008B27 _text$mn        ends
.text$mn:00008B27
.text$x:00008B28 ; ===========================================================================
.text$x:00008B28
.text$x:00008B28 ; Segment type: Pure code
.text$x:00008B28 ; Segment permissions: Read/Execute
.text$x:00008B28 _text$x         segment para public 'CODE' use32
.text$x:00008B28                 assume cs:_text$x
.text$x:00008B28                 ;org 8B28h
.text$x:00008B28 ; COMDAT (pick associative to section at 8ADC)
.text$x:00008B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008B28
.text$x:00008B28 ; =============== S U B R O U T I N E =======================================
.text$x:00008B28
.text$x:00008B28
.text$x:00008B28 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008B28                                         ; DATA XREF: .xdata$x:00010184o
.text$x:00008B28                 mov     ecx, [ebp-10h]  ; this
.text$x:00008B2B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00008B2B __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008B2B
.text$x:00008B30
.text$x:00008B30 ; =============== S U B R O U T I N E =======================================
.text$x:00008B30
.text$x:00008B30
.text$x:00008B30 __ehhandler$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ proc near
.text$x:00008B30                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<FunctionParser *>>::~_Vector_val<std::_Simple_types<FunctionParser *>>(void)+5o
.text$x:00008B30
.text$x:00008B30 arg_4           = dword ptr  8
.text$x:00008B30
.text$x:00008B30                 mov     edx, [esp+arg_4]
.text$x:00008B34                 lea     eax, [edx+0Ch]
.text$x:00008B37                 mov     ecx, [edx-8]
.text$x:00008B3A                 xor     ecx, eax
.text$x:00008B3C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008B41                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ
.text$x:00008B46                 jmp     ___CxxFrameHandler3
.text$x:00008B46 __ehhandler$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ endp
.text$x:00008B46
.text$x:00008B46 ; ---------------------------------------------------------------------------
.text$x:00008B4B                 align 4
.text$x:00008B4B _text$x         ends
.text$x:00008B4B
.text$mn:00008B4C ; ===========================================================================
.text$mn:00008B4C
.text$mn:00008B4C ; Segment type: Pure code
.text$mn:00008B4C ; Segment permissions: Read/Execute
.text$mn:00008B4C _text$mn        segment para public 'CODE' use32
.text$mn:00008B4C                 assume cs:_text$mn
.text$mn:00008B4C                 ;org 8B4Ch
.text$mn:00008B4C ; COMDAT (pick any)
.text$mn:00008B4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B4C
.text$mn:00008B4C ; =============== S U B R O U T I N E =======================================
.text$mn:00008B4C
.text$mn:00008B4C ; Attributes: bp-based frame
.text$mn:00008B4C
.text$mn:00008B4C ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct std::pair<int, int>>>::~_Vector_val<struct std::_Simple_types<struct std::pair<int, int>>>(void)
.text$mn:00008B4C                 public ??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.text$mn:00008B4C ??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00008B4C                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z$0+3j
.text$mn:00008B4C                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(void)+3Fp ...
.text$mn:00008B4C
.text$mn:00008B4C var_10          = dword ptr -10h
.text$mn:00008B4C var_C           = dword ptr -0Ch
.text$mn:00008B4C var_4           = dword ptr -4
.text$mn:00008B4C
.text$mn:00008B4C                 push    ebp
.text$mn:00008B4D                 mov     ebp, esp
.text$mn:00008B4F                 push    0FFFFFFFFh
.text$mn:00008B51                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.text$mn:00008B56                 mov     eax, large fs:0
.text$mn:00008B5C                 push    eax
.text$mn:00008B5D                 push    ecx
.text$mn:00008B5E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008B63                 xor     eax, ebp
.text$mn:00008B65                 push    eax
.text$mn:00008B66                 lea     eax, [ebp+var_C]
.text$mn:00008B69                 mov     large fs:0, eax
.text$mn:00008B6F                 mov     [ebp+var_10], ecx
.text$mn:00008B72                 mov     [ebp+var_4], 0
.text$mn:00008B79                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008B80                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008B83                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00008B88                 mov     ecx, [ebp+var_C]
.text$mn:00008B8B                 mov     large fs:0, ecx
.text$mn:00008B92                 pop     ecx
.text$mn:00008B93                 mov     esp, ebp
.text$mn:00008B95                 pop     ebp
.text$mn:00008B96                 retn
.text$mn:00008B96 ??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008B96
.text$mn:00008B96 ; ---------------------------------------------------------------------------
.text$mn:00008B97                 align 4
.text$mn:00008B97 _text$mn        ends
.text$mn:00008B97
.text$x:00008B98 ; ===========================================================================
.text$x:00008B98
.text$x:00008B98 ; Segment type: Pure code
.text$x:00008B98 ; Segment permissions: Read/Execute
.text$x:00008B98 _text$x         segment para public 'CODE' use32
.text$x:00008B98                 assume cs:_text$x
.text$x:00008B98                 ;org 8B98h
.text$x:00008B98 ; COMDAT (pick associative to section at 8B4C)
.text$x:00008B98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008B98
.text$x:00008B98 ; =============== S U B R O U T I N E =======================================
.text$x:00008B98
.text$x:00008B98
.text$x:00008B98 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008B98                                         ; DATA XREF: .xdata$x:000105D0o
.text$x:00008B98                 mov     ecx, [ebp-10h]  ; this
.text$x:00008B9B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00008B9B __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008B9B
.text$x:00008BA0
.text$x:00008BA0 ; =============== S U B R O U T I N E =======================================
.text$x:00008BA0
.text$x:00008BA0
.text$x:00008BA0 __ehhandler$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008BA0                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::pair<int,int>>>::~_Vector_val<std::_Simple_types<std::pair<int,int>>>(void)+5o
.text$x:00008BA0
.text$x:00008BA0 arg_4           = dword ptr  8
.text$x:00008BA0
.text$x:00008BA0                 mov     edx, [esp+arg_4]
.text$x:00008BA4                 lea     eax, [edx+0Ch]
.text$x:00008BA7                 mov     ecx, [edx-8]
.text$x:00008BAA                 xor     ecx, eax
.text$x:00008BAC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008BB1                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.text$x:00008BB6                 jmp     ___CxxFrameHandler3
.text$x:00008BB6 __ehhandler$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ endp
.text$x:00008BB6
.text$x:00008BB6 ; ---------------------------------------------------------------------------
.text$x:00008BBB                 align 4
.text$x:00008BBB _text$x         ends
.text$x:00008BBB
.text$mn:00008BBC ; ===========================================================================
.text$mn:00008BBC
.text$mn:00008BBC ; Segment type: Pure code
.text$mn:00008BBC ; Segment permissions: Read/Execute
.text$mn:00008BBC _text$mn        segment para public 'CODE' use32
.text$mn:00008BBC                 assume cs:_text$mn
.text$mn:00008BBC                 ;org 8BBCh
.text$mn:00008BBC ; COMDAT (pick any)
.text$mn:00008BBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BBC
.text$mn:00008BBC ; =============== S U B R O U T I N E =======================================
.text$mn:00008BBC
.text$mn:00008BBC ; Attributes: bp-based frame
.text$mn:00008BBC
.text$mn:00008BBC ; public: __thiscall std::_Vector_val<struct std::_Simple_types<struct AssociationInfo>>::~_Vector_val<struct std::_Simple_types<struct AssociationInfo>>(void)
.text$mn:00008BBC                 public ??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ
.text$mn:00008BBC ??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:00008BBC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>(void)+3Fp
.text$mn:00008BBC                                         ; __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ$0+3j
.text$mn:00008BBC
.text$mn:00008BBC var_10          = dword ptr -10h
.text$mn:00008BBC var_C           = dword ptr -0Ch
.text$mn:00008BBC var_4           = dword ptr -4
.text$mn:00008BBC
.text$mn:00008BBC                 push    ebp
.text$mn:00008BBD                 mov     ebp, esp
.text$mn:00008BBF                 push    0FFFFFFFFh
.text$mn:00008BC1                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ
.text$mn:00008BC6                 mov     eax, large fs:0
.text$mn:00008BCC                 push    eax
.text$mn:00008BCD                 push    ecx
.text$mn:00008BCE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008BD3                 xor     eax, ebp
.text$mn:00008BD5                 push    eax
.text$mn:00008BD6                 lea     eax, [ebp+var_C]
.text$mn:00008BD9                 mov     large fs:0, eax
.text$mn:00008BDF                 mov     [ebp+var_10], ecx
.text$mn:00008BE2                 mov     [ebp+var_4], 0
.text$mn:00008BE9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008BF0                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008BF3                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00008BF8                 mov     ecx, [ebp+var_C]
.text$mn:00008BFB                 mov     large fs:0, ecx
.text$mn:00008C02                 pop     ecx
.text$mn:00008C03                 mov     esp, ebp
.text$mn:00008C05                 pop     ebp
.text$mn:00008C06                 retn
.text$mn:00008C06 ??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ endp
.text$mn:00008C06
.text$mn:00008C06 ; ---------------------------------------------------------------------------
.text$mn:00008C07                 align 4
.text$mn:00008C07 _text$mn        ends
.text$mn:00008C07
.text$x:00008C08 ; ===========================================================================
.text$x:00008C08
.text$x:00008C08 ; Segment type: Pure code
.text$x:00008C08 ; Segment permissions: Read/Execute
.text$x:00008C08 _text$x         segment para public 'CODE' use32
.text$x:00008C08                 assume cs:_text$x
.text$x:00008C08                 ;org 8C08h
.text$x:00008C08 ; COMDAT (pick associative to section at 8BBC)
.text$x:00008C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008C08
.text$x:00008C08 ; =============== S U B R O U T I N E =======================================
.text$x:00008C08
.text$x:00008C08
.text$x:00008C08 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008C08                                         ; DATA XREF: .xdata$x:0001028Co
.text$x:00008C08                 mov     ecx, [ebp-10h]  ; this
.text$x:00008C0B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00008C0B __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008C0B
.text$x:00008C10
.text$x:00008C10 ; =============== S U B R O U T I N E =======================================
.text$x:00008C10
.text$x:00008C10
.text$x:00008C10 __ehhandler$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ proc near
.text$x:00008C10                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<AssociationInfo>>::~_Vector_val<std::_Simple_types<AssociationInfo>>(void)+5o
.text$x:00008C10
.text$x:00008C10 arg_4           = dword ptr  8
.text$x:00008C10
.text$x:00008C10                 mov     edx, [esp+arg_4]
.text$x:00008C14                 lea     eax, [edx+0Ch]
.text$x:00008C17                 mov     ecx, [edx-8]
.text$x:00008C1A                 xor     ecx, eax
.text$x:00008C1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008C21                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ
.text$x:00008C26                 jmp     ___CxxFrameHandler3
.text$x:00008C26 __ehhandler$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ endp
.text$x:00008C26
.text$x:00008C26 ; ---------------------------------------------------------------------------
.text$x:00008C2B                 align 4
.text$x:00008C2B _text$x         ends
.text$x:00008C2B
.text$mn:00008C2C ; ===========================================================================
.text$mn:00008C2C
.text$mn:00008C2C ; Segment type: Pure code
.text$mn:00008C2C ; Segment permissions: Read/Execute
.text$mn:00008C2C _text$mn        segment para public 'CODE' use32
.text$mn:00008C2C                 assume cs:_text$mn
.text$mn:00008C2C                 ;org 8C2Ch
.text$mn:00008C2C ; COMDAT (pick any)
.text$mn:00008C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C2C
.text$mn:00008C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00008C2C
.text$mn:00008C2C ; Attributes: bp-based frame
.text$mn:00008C2C
.text$mn:00008C2C ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00008C2C                 public ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00008C2C ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00008C2C                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0+3j
.text$mn:00008C2C                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+3Fp ...
.text$mn:00008C2C
.text$mn:00008C2C var_10          = dword ptr -10h
.text$mn:00008C2C var_C           = dword ptr -0Ch
.text$mn:00008C2C var_4           = dword ptr -4
.text$mn:00008C2C
.text$mn:00008C2C                 push    ebp
.text$mn:00008C2D                 mov     ebp, esp
.text$mn:00008C2F                 push    0FFFFFFFFh
.text$mn:00008C31                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00008C36                 mov     eax, large fs:0
.text$mn:00008C3C                 push    eax
.text$mn:00008C3D                 push    ecx
.text$mn:00008C3E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008C43                 xor     eax, ebp
.text$mn:00008C45                 push    eax
.text$mn:00008C46                 lea     eax, [ebp+var_C]
.text$mn:00008C49                 mov     large fs:0, eax
.text$mn:00008C4F                 mov     [ebp+var_10], ecx
.text$mn:00008C52                 mov     [ebp+var_4], 0
.text$mn:00008C59                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008C60                 mov     ecx, [ebp+var_10] ; this
.text$mn:00008C63                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00008C68                 mov     ecx, [ebp+var_C]
.text$mn:00008C6B                 mov     large fs:0, ecx
.text$mn:00008C72                 pop     ecx
.text$mn:00008C73                 mov     esp, ebp
.text$mn:00008C75                 pop     ebp
.text$mn:00008C76                 retn
.text$mn:00008C76 ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00008C76
.text$mn:00008C76 ; ---------------------------------------------------------------------------
.text$mn:00008C77                 align 4
.text$mn:00008C77 _text$mn        ends
.text$mn:00008C77
.text$x:00008C78 ; ===========================================================================
.text$x:00008C78
.text$x:00008C78 ; Segment type: Pure code
.text$x:00008C78 ; Segment permissions: Read/Execute
.text$x:00008C78 _text$x         segment para public 'CODE' use32
.text$x:00008C78                 assume cs:_text$x
.text$x:00008C78                 ;org 8C78h
.text$x:00008C78 ; COMDAT (pick associative to section at 8C2C)
.text$x:00008C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008C78
.text$x:00008C78 ; =============== S U B R O U T I N E =======================================
.text$x:00008C78
.text$x:00008C78
.text$x:00008C78 __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008C78                                         ; DATA XREF: .xdata$x:0000F670o
.text$x:00008C78                 mov     ecx, [ebp-10h]  ; this
.text$x:00008C7B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00008C7B __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008C7B
.text$x:00008C80
.text$x:00008C80 ; =============== S U B R O U T I N E =======================================
.text$x:00008C80
.text$x:00008C80
.text$x:00008C80 __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00008C80                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00008C80
.text$x:00008C80 arg_4           = dword ptr  8
.text$x:00008C80
.text$x:00008C80                 mov     edx, [esp+arg_4]
.text$x:00008C84                 lea     eax, [edx+0Ch]
.text$x:00008C87                 mov     ecx, [edx-8]
.text$x:00008C8A                 xor     ecx, eax
.text$x:00008C8C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008C91                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:00008C96                 jmp     ___CxxFrameHandler3
.text$x:00008C96 __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:00008C96
.text$x:00008C96 ; ---------------------------------------------------------------------------
.text$x:00008C9B                 align 4
.text$x:00008C9B _text$x         ends
.text$x:00008C9B
.text$mn:00008C9C ; ===========================================================================
.text$mn:00008C9C
.text$mn:00008C9C ; Segment type: Pure code
.text$mn:00008C9C ; Segment permissions: Read/Execute
.text$mn:00008C9C _text$mn        segment para public 'CODE' use32
.text$mn:00008C9C                 assume cs:_text$mn
.text$mn:00008C9C                 ;org 8C9Ch
.text$mn:00008C9C ; COMDAT (pick any)
.text$mn:00008C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C9C
.text$mn:00008C9C ; =============== S U B R O U T I N E =======================================
.text$mn:00008C9C
.text$mn:00008C9C ; Attributes: bp-based frame
.text$mn:00008C9C
.text$mn:00008C9C ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:00008C9C                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00008C9C ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:00008C9C                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:00008C9C                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:00008C9C
.text$mn:00008C9C var_10          = dword ptr -10h
.text$mn:00008C9C var_C           = dword ptr -0Ch
.text$mn:00008C9C var_4           = dword ptr -4
.text$mn:00008C9C
.text$mn:00008C9C                 push    ebp
.text$mn:00008C9D                 mov     ebp, esp
.text$mn:00008C9F                 push    0FFFFFFFFh
.text$mn:00008CA1                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00008CA6                 mov     eax, large fs:0
.text$mn:00008CAC                 push    eax
.text$mn:00008CAD                 push    ecx
.text$mn:00008CAE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008CB3                 xor     eax, ebp
.text$mn:00008CB5                 push    eax
.text$mn:00008CB6                 lea     eax, [ebp+var_C]
.text$mn:00008CB9                 mov     large fs:0, eax
.text$mn:00008CBF                 mov     [ebp+var_10], ecx
.text$mn:00008CC2                 mov     [ebp+var_4], 0
.text$mn:00008CC9                 push    0               ; Size
.text$mn:00008CCB                 push    1               ; char
.text$mn:00008CCD                 mov     ecx, [ebp+var_10]
.text$mn:00008CD0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00008CD5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008CDC                 mov     ecx, [ebp+var_10]
.text$mn:00008CDF                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:00008CE4                 mov     ecx, [ebp+var_C]
.text$mn:00008CE7                 mov     large fs:0, ecx
.text$mn:00008CEE                 pop     ecx
.text$mn:00008CEF                 mov     esp, ebp
.text$mn:00008CF1                 pop     ebp
.text$mn:00008CF2                 retn
.text$mn:00008CF2 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:00008CF2
.text$mn:00008CF2 ; ---------------------------------------------------------------------------
.text$mn:00008CF3                 align 4
.text$mn:00008CF3 _text$mn        ends
.text$mn:00008CF3
.text$x:00008CF4 ; ===========================================================================
.text$x:00008CF4
.text$x:00008CF4 ; Segment type: Pure code
.text$x:00008CF4 ; Segment permissions: Read/Execute
.text$x:00008CF4 _text$x         segment para public 'CODE' use32
.text$x:00008CF4                 assume cs:_text$x
.text$x:00008CF4                 ;org 8CF4h
.text$x:00008CF4 ; COMDAT (pick associative to section at 8C9C)
.text$x:00008CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008CF4
.text$x:00008CF4 ; =============== S U B R O U T I N E =======================================
.text$x:00008CF4
.text$x:00008CF4
.text$x:00008CF4 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00008CF4                                         ; DATA XREF: .xdata$x:0000F000o
.text$x:00008CF4                 mov     ecx, [ebp-10h]
.text$x:00008CF7                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00008CF7 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:00008CF7
.text$x:00008CFC
.text$x:00008CFC ; =============== S U B R O U T I N E =======================================
.text$x:00008CFC
.text$x:00008CFC
.text$x:00008CFC __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00008CFC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00008CFC
.text$x:00008CFC arg_4           = dword ptr  8
.text$x:00008CFC
.text$x:00008CFC                 mov     edx, [esp+arg_4]
.text$x:00008D00                 lea     eax, [edx+0Ch]
.text$x:00008D03                 mov     ecx, [edx-8]
.text$x:00008D06                 xor     ecx, eax
.text$x:00008D08                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008D0D                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00008D12                 jmp     ___CxxFrameHandler3
.text$x:00008D12 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00008D12
.text$x:00008D12 ; ---------------------------------------------------------------------------
.text$x:00008D17                 align 4
.text$x:00008D17 _text$x         ends
.text$x:00008D17
.text$mn:00008D18 ; ===========================================================================
.text$mn:00008D18
.text$mn:00008D18 ; Segment type: Pure code
.text$mn:00008D18 ; Segment permissions: Read/Execute
.text$mn:00008D18 _text$mn        segment para public 'CODE' use32
.text$mn:00008D18                 assume cs:_text$mn
.text$mn:00008D18                 ;org 8D18h
.text$mn:00008D18 ; COMDAT (pick any)
.text$mn:00008D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D18
.text$mn:00008D18 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D18
.text$mn:00008D18 ; Attributes: bp-based frame
.text$mn:00008D18
.text$mn:00008D18 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00008D18                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00008D18 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00008D18                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+4Ap
.text$mn:00008D18                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+70p ...
.text$mn:00008D18
.text$mn:00008D18 var_10          = dword ptr -10h
.text$mn:00008D18 var_C           = dword ptr -0Ch
.text$mn:00008D18 var_4           = dword ptr -4
.text$mn:00008D18
.text$mn:00008D18                 push    ebp
.text$mn:00008D19                 mov     ebp, esp
.text$mn:00008D1B                 push    0FFFFFFFFh
.text$mn:00008D1D                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00008D22                 mov     eax, large fs:0
.text$mn:00008D28                 push    eax
.text$mn:00008D29                 push    ecx
.text$mn:00008D2A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008D2F                 xor     eax, ebp
.text$mn:00008D31                 push    eax
.text$mn:00008D32                 lea     eax, [ebp+var_C]
.text$mn:00008D35                 mov     large fs:0, eax
.text$mn:00008D3B                 mov     [ebp+var_10], ecx
.text$mn:00008D3E                 mov     [ebp+var_4], 0
.text$mn:00008D45                 push    0
.text$mn:00008D47                 push    1
.text$mn:00008D49                 mov     ecx, [ebp+var_10]
.text$mn:00008D4C                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00008D51                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008D58                 mov     ecx, [ebp+var_10]
.text$mn:00008D5B                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00008D60                 mov     ecx, [ebp+var_C]
.text$mn:00008D63                 mov     large fs:0, ecx
.text$mn:00008D6A                 pop     ecx
.text$mn:00008D6B                 mov     esp, ebp
.text$mn:00008D6D                 pop     ebp
.text$mn:00008D6E                 retn
.text$mn:00008D6E ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00008D6E
.text$mn:00008D6E ; ---------------------------------------------------------------------------
.text$mn:00008D6F                 align 10h
.text$mn:00008D6F _text$mn        ends
.text$mn:00008D6F
.text$x:00008D70 ; ===========================================================================
.text$x:00008D70
.text$x:00008D70 ; Segment type: Pure code
.text$x:00008D70 ; Segment permissions: Read/Execute
.text$x:00008D70 _text$x         segment para public 'CODE' use32
.text$x:00008D70                 assume cs:_text$x
.text$x:00008D70                 ;org 8D70h
.text$x:00008D70 ; COMDAT (pick associative to section at 8D18)
.text$x:00008D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008D70
.text$x:00008D70 ; =============== S U B R O U T I N E =======================================
.text$x:00008D70
.text$x:00008D70
.text$x:00008D70 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00008D70                                         ; DATA XREF: .xdata$x:0000F3D8o
.text$x:00008D70                 mov     ecx, [ebp-10h]
.text$x:00008D73                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00008D73 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00008D73
.text$x:00008D78
.text$x:00008D78 ; =============== S U B R O U T I N E =======================================
.text$x:00008D78
.text$x:00008D78
.text$x:00008D78 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00008D78                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00008D78
.text$x:00008D78 arg_4           = dword ptr  8
.text$x:00008D78
.text$x:00008D78                 mov     edx, [esp+arg_4]
.text$x:00008D7C                 lea     eax, [edx+0Ch]
.text$x:00008D7F                 mov     ecx, [edx-8]
.text$x:00008D82                 xor     ecx, eax
.text$x:00008D84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008D89                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00008D8E                 jmp     ___CxxFrameHandler3
.text$x:00008D8E __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00008D8E
.text$x:00008D8E ; ---------------------------------------------------------------------------
.text$x:00008D93                 align 4
.text$x:00008D93 _text$x         ends
.text$x:00008D93
.text$mn:00008D94 ; ===========================================================================
.text$mn:00008D94
.text$mn:00008D94 ; Segment type: Pure code
.text$mn:00008D94 ; Segment permissions: Read/Execute
.text$mn:00008D94 _text$mn        segment para public 'CODE' use32
.text$mn:00008D94                 assume cs:_text$mn
.text$mn:00008D94                 ;org 8D94h
.text$mn:00008D94 ; COMDAT (pick any)
.text$mn:00008D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D94
.text$mn:00008D94 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D94
.text$mn:00008D94 ; Attributes: bp-based frame
.text$mn:00008D94
.text$mn:00008D94 ; public: __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::~vector<class FunctionParser *, class std::allocator<class FunctionParser *>>(void)
.text$mn:00008D94                 public ??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ
.text$mn:00008D94 ??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ proc near
.text$mn:00008D94                                         ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+E3p
.text$mn:00008D94                                         ; __unwindfunclet$??1FunctionParsersManager@@QAE@XZ$0+6j
.text$mn:00008D94
.text$mn:00008D94 var_10          = dword ptr -10h
.text$mn:00008D94 var_C           = dword ptr -0Ch
.text$mn:00008D94 var_4           = dword ptr -4
.text$mn:00008D94
.text$mn:00008D94                 push    ebp
.text$mn:00008D95                 mov     ebp, esp
.text$mn:00008D97                 push    0FFFFFFFFh
.text$mn:00008D99                 push    offset __ehhandler$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ
.text$mn:00008D9E                 mov     eax, large fs:0
.text$mn:00008DA4                 push    eax
.text$mn:00008DA5                 push    ecx
.text$mn:00008DA6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008DAB                 xor     eax, ebp
.text$mn:00008DAD                 push    eax
.text$mn:00008DAE                 lea     eax, [ebp+var_C]
.text$mn:00008DB1                 mov     large fs:0, eax
.text$mn:00008DB7                 mov     [ebp+var_10], ecx
.text$mn:00008DBA                 mov     [ebp+var_4], 0
.text$mn:00008DC1                 mov     ecx, [ebp+var_10]
.text$mn:00008DC4                 call    ?_Tidy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Tidy(void)
.text$mn:00008DC9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008DD0                 mov     ecx, [ebp+var_10]
.text$mn:00008DD3                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::~_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>(void)
.text$mn:00008DD8                 mov     ecx, [ebp+var_C]
.text$mn:00008DDB                 mov     large fs:0, ecx
.text$mn:00008DE2                 pop     ecx
.text$mn:00008DE3                 mov     esp, ebp
.text$mn:00008DE5                 pop     ebp
.text$mn:00008DE6                 retn
.text$mn:00008DE6 ??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ endp
.text$mn:00008DE6
.text$mn:00008DE6 ; ---------------------------------------------------------------------------
.text$mn:00008DE7                 align 4
.text$mn:00008DE7 _text$mn        ends
.text$mn:00008DE7
.text$x:00008DE8 ; ===========================================================================
.text$x:00008DE8
.text$x:00008DE8 ; Segment type: Pure code
.text$x:00008DE8 ; Segment permissions: Read/Execute
.text$x:00008DE8 _text$x         segment para public 'CODE' use32
.text$x:00008DE8                 assume cs:_text$x
.text$x:00008DE8                 ;org 8DE8h
.text$x:00008DE8 ; COMDAT (pick associative to section at 8D94)
.text$x:00008DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008DE8
.text$x:00008DE8 ; =============== S U B R O U T I N E =======================================
.text$x:00008DE8
.text$x:00008DE8
.text$x:00008DE8 __unwindfunclet$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008DE8                                         ; DATA XREF: .xdata$x:000101DCo
.text$x:00008DE8                 mov     ecx, [ebp-10h]
.text$x:00008DEB                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::~_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>(void)
.text$x:00008DEB __unwindfunclet$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008DEB
.text$x:00008DF0
.text$x:00008DF0 ; =============== S U B R O U T I N E =======================================
.text$x:00008DF0
.text$x:00008DF0
.text$x:00008DF0 __ehhandler$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ proc near
.text$x:00008DF0                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::~vector<FunctionParser *,std::allocator<FunctionParser *>>(void)+5o
.text$x:00008DF0
.text$x:00008DF0 arg_4           = dword ptr  8
.text$x:00008DF0
.text$x:00008DF0                 mov     edx, [esp+arg_4]
.text$x:00008DF4                 lea     eax, [edx+0Ch]
.text$x:00008DF7                 mov     ecx, [edx-8]
.text$x:00008DFA                 xor     ecx, eax
.text$x:00008DFC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008E01                 mov     eax, offset __ehfuncinfo$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ
.text$x:00008E06                 jmp     ___CxxFrameHandler3
.text$x:00008E06 __ehhandler$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ endp
.text$x:00008E06
.text$x:00008E06 ; ---------------------------------------------------------------------------
.text$x:00008E0B                 align 4
.text$x:00008E0B _text$x         ends
.text$x:00008E0B
.text$mn:00008E0C ; ===========================================================================
.text$mn:00008E0C
.text$mn:00008E0C ; Segment type: Pure code
.text$mn:00008E0C ; Segment permissions: Read/Execute
.text$mn:00008E0C _text$mn        segment para public 'CODE' use32
.text$mn:00008E0C                 assume cs:_text$mn
.text$mn:00008E0C                 ;org 8E0Ch
.text$mn:00008E0C ; COMDAT (pick any)
.text$mn:00008E0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E0C
.text$mn:00008E0C ; =============== S U B R O U T I N E =======================================
.text$mn:00008E0C
.text$mn:00008E0C ; Attributes: bp-based frame
.text$mn:00008E0C
.text$mn:00008E0C ; public: __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::~vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>(void)
.text$mn:00008E0C                 public ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ
.text$mn:00008E0C ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ proc near
.text$mn:00008E0C                                         ; CODE XREF: FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+10Ap
.text$mn:00008E0C                                         ; FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+116p ...
.text$mn:00008E0C
.text$mn:00008E0C var_10          = dword ptr -10h
.text$mn:00008E0C var_C           = dword ptr -0Ch
.text$mn:00008E0C var_4           = dword ptr -4
.text$mn:00008E0C
.text$mn:00008E0C                 push    ebp
.text$mn:00008E0D                 mov     ebp, esp
.text$mn:00008E0F                 push    0FFFFFFFFh
.text$mn:00008E11                 push    offset __ehhandler$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ
.text$mn:00008E16                 mov     eax, large fs:0
.text$mn:00008E1C                 push    eax
.text$mn:00008E1D                 push    ecx
.text$mn:00008E1E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008E23                 xor     eax, ebp
.text$mn:00008E25                 push    eax
.text$mn:00008E26                 lea     eax, [ebp+var_C]
.text$mn:00008E29                 mov     large fs:0, eax
.text$mn:00008E2F                 mov     [ebp+var_10], ecx
.text$mn:00008E32                 mov     [ebp+var_4], 0
.text$mn:00008E39                 mov     ecx, [ebp+var_10]
.text$mn:00008E3C                 call    ?_Tidy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Tidy(void)
.text$mn:00008E41                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008E48                 mov     ecx, [ebp+var_10]
.text$mn:00008E4B                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(void)
.text$mn:00008E50                 mov     ecx, [ebp+var_C]
.text$mn:00008E53                 mov     large fs:0, ecx
.text$mn:00008E5A                 pop     ecx
.text$mn:00008E5B                 mov     esp, ebp
.text$mn:00008E5D                 pop     ebp
.text$mn:00008E5E                 retn
.text$mn:00008E5E ??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ endp
.text$mn:00008E5E
.text$mn:00008E5E ; ---------------------------------------------------------------------------
.text$mn:00008E5F                 align 10h
.text$mn:00008E5F _text$mn        ends
.text$mn:00008E5F
.text$x:00008E60 ; ===========================================================================
.text$x:00008E60
.text$x:00008E60 ; Segment type: Pure code
.text$x:00008E60 ; Segment permissions: Read/Execute
.text$x:00008E60 _text$x         segment para public 'CODE' use32
.text$x:00008E60                 assume cs:_text$x
.text$x:00008E60                 ;org 8E60h
.text$x:00008E60 ; COMDAT (pick associative to section at 8E0C)
.text$x:00008E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008E60
.text$x:00008E60 ; =============== S U B R O U T I N E =======================================
.text$x:00008E60
.text$x:00008E60
.text$x:00008E60 __unwindfunclet$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00008E60                                         ; DATA XREF: .xdata$x:00010680o
.text$x:00008E60                 mov     ecx, [ebp-10h]
.text$x:00008E63                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(void)
.text$x:00008E63 __unwindfunclet$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ$0 endp
.text$x:00008E63
.text$x:00008E68
.text$x:00008E68 ; =============== S U B R O U T I N E =======================================
.text$x:00008E68
.text$x:00008E68
.text$x:00008E68 __ehhandler$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ proc near
.text$x:00008E68                                         ; DATA XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)+5o
.text$x:00008E68
.text$x:00008E68 arg_4           = dword ptr  8
.text$x:00008E68
.text$x:00008E68                 mov     edx, [esp+arg_4]
.text$x:00008E6C                 lea     eax, [edx+0Ch]
.text$x:00008E6F                 mov     ecx, [edx-8]
.text$x:00008E72                 xor     ecx, eax
.text$x:00008E74                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008E79                 mov     eax, offset __ehfuncinfo$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ
.text$x:00008E7E                 jmp     ___CxxFrameHandler3
.text$x:00008E7E __ehhandler$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ endp
.text$x:00008E7E
.text$x:00008E7E ; ---------------------------------------------------------------------------
.text$x:00008E83                 align 4
.text$x:00008E83 _text$x         ends
.text$x:00008E83
.text$mn:00008E84 ; ===========================================================================
.text$mn:00008E84
.text$mn:00008E84 ; Segment type: Pure code
.text$mn:00008E84 ; Segment permissions: Read/Execute
.text$mn:00008E84 _text$mn        segment para public 'CODE' use32
.text$mn:00008E84                 assume cs:_text$mn
.text$mn:00008E84                 ;org 8E84h
.text$mn:00008E84 ; COMDAT (pick any)
.text$mn:00008E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E84
.text$mn:00008E84 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E84
.text$mn:00008E84 ; Attributes: bp-based frame
.text$mn:00008E84
.text$mn:00008E84 ; public: __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::~vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>(void)
.text$mn:00008E84                 public ??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ
.text$mn:00008E84 ??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ proc near
.text$mn:00008E84                                         ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+D1p
.text$mn:00008E84                                         ; __unwindfunclet$??1FunctionParsersManager@@QAE@XZ$1+6j
.text$mn:00008E84
.text$mn:00008E84 var_10          = dword ptr -10h
.text$mn:00008E84 var_C           = dword ptr -0Ch
.text$mn:00008E84 var_4           = dword ptr -4
.text$mn:00008E84
.text$mn:00008E84                 push    ebp
.text$mn:00008E85                 mov     ebp, esp
.text$mn:00008E87                 push    0FFFFFFFFh
.text$mn:00008E89                 push    offset __ehhandler$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ
.text$mn:00008E8E                 mov     eax, large fs:0
.text$mn:00008E94                 push    eax
.text$mn:00008E95                 push    ecx
.text$mn:00008E96                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008E9B                 xor     eax, ebp
.text$mn:00008E9D                 push    eax
.text$mn:00008E9E                 lea     eax, [ebp+var_C]
.text$mn:00008EA1                 mov     large fs:0, eax
.text$mn:00008EA7                 mov     [ebp+var_10], ecx
.text$mn:00008EAA                 mov     [ebp+var_4], 0
.text$mn:00008EB1                 mov     ecx, [ebp+var_10]
.text$mn:00008EB4                 call    ?_Tidy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Tidy(void)
.text$mn:00008EB9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008EC0                 mov     ecx, [ebp+var_10]
.text$mn:00008EC3                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>(void)
.text$mn:00008EC8                 mov     ecx, [ebp+var_C]
.text$mn:00008ECB                 mov     large fs:0, ecx
.text$mn:00008ED2                 pop     ecx
.text$mn:00008ED3                 mov     esp, ebp
.text$mn:00008ED5                 pop     ebp
.text$mn:00008ED6                 retn
.text$mn:00008ED6 ??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ endp
.text$mn:00008ED6
.text$mn:00008ED6 ; ---------------------------------------------------------------------------
.text$mn:00008ED7                 align 4
.text$mn:00008ED7 _text$mn        ends
.text$mn:00008ED7
.text$x:00008ED8 ; ===========================================================================
.text$x:00008ED8
.text$x:00008ED8 ; Segment type: Pure code
.text$x:00008ED8 ; Segment permissions: Read/Execute
.text$x:00008ED8 _text$x         segment para public 'CODE' use32
.text$x:00008ED8                 assume cs:_text$x
.text$x:00008ED8                 ;org 8ED8h
.text$x:00008ED8 ; COMDAT (pick associative to section at 8E84)
.text$x:00008ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008ED8
.text$x:00008ED8 ; =============== S U B R O U T I N E =======================================
.text$x:00008ED8
.text$x:00008ED8
.text$x:00008ED8 __unwindfunclet$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00008ED8                                         ; DATA XREF: .xdata$x:000102E4o
.text$x:00008ED8                 mov     ecx, [ebp-10h]
.text$x:00008EDB                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>(void)
.text$x:00008EDB __unwindfunclet$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ$0 endp
.text$x:00008EDB
.text$x:00008EE0
.text$x:00008EE0 ; =============== S U B R O U T I N E =======================================
.text$x:00008EE0
.text$x:00008EE0
.text$x:00008EE0 __ehhandler$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ proc near
.text$x:00008EE0                                         ; DATA XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::~vector<AssociationInfo,std::allocator<AssociationInfo>>(void)+5o
.text$x:00008EE0
.text$x:00008EE0 arg_4           = dword ptr  8
.text$x:00008EE0
.text$x:00008EE0                 mov     edx, [esp+arg_4]
.text$x:00008EE4                 lea     eax, [edx+0Ch]
.text$x:00008EE7                 mov     ecx, [edx-8]
.text$x:00008EEA                 xor     ecx, eax
.text$x:00008EEC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008EF1                 mov     eax, offset __ehfuncinfo$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ
.text$x:00008EF6                 jmp     ___CxxFrameHandler3
.text$x:00008EF6 __ehhandler$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ endp
.text$x:00008EF6
.text$x:00008EF6 ; ---------------------------------------------------------------------------
.text$x:00008EFB                 align 4
.text$x:00008EFB _text$x         ends
.text$x:00008EFB
.text$mn:00008EFC ; ===========================================================================
.text$mn:00008EFC
.text$mn:00008EFC ; Segment type: Pure code
.text$mn:00008EFC ; Segment permissions: Read/Execute
.text$mn:00008EFC _text$mn        segment para public 'CODE' use32
.text$mn:00008EFC                 assume cs:_text$mn
.text$mn:00008EFC                 ;org 8EFCh
.text$mn:00008EFC ; COMDAT (pick any)
.text$mn:00008EFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008EFC
.text$mn:00008EFC ; =============== S U B R O U T I N E =======================================
.text$mn:00008EFC
.text$mn:00008EFC ; Attributes: bp-based frame
.text$mn:00008EFC
.text$mn:00008EFC ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00008EFC                 public ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00008EFC ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:00008EFC                                         ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+76p
.text$mn:00008EFC                                         ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+B2p ...
.text$mn:00008EFC
.text$mn:00008EFC var_10          = dword ptr -10h
.text$mn:00008EFC var_C           = dword ptr -0Ch
.text$mn:00008EFC var_4           = dword ptr -4
.text$mn:00008EFC
.text$mn:00008EFC                 push    ebp
.text$mn:00008EFD                 mov     ebp, esp
.text$mn:00008EFF                 push    0FFFFFFFFh
.text$mn:00008F01                 push    offset __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00008F06                 mov     eax, large fs:0
.text$mn:00008F0C                 push    eax
.text$mn:00008F0D                 push    ecx
.text$mn:00008F0E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008F13                 xor     eax, ebp
.text$mn:00008F15                 push    eax
.text$mn:00008F16                 lea     eax, [ebp+var_C]
.text$mn:00008F19                 mov     large fs:0, eax
.text$mn:00008F1F                 mov     [ebp+var_10], ecx
.text$mn:00008F22                 mov     [ebp+var_4], 0
.text$mn:00008F29                 mov     ecx, [ebp+var_10]
.text$mn:00008F2C                 call    ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:00008F31                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008F38                 mov     ecx, [ebp+var_10]
.text$mn:00008F3B                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00008F40                 mov     ecx, [ebp+var_C]
.text$mn:00008F43                 mov     large fs:0, ecx
.text$mn:00008F4A                 pop     ecx
.text$mn:00008F4B                 mov     esp, ebp
.text$mn:00008F4D                 pop     ebp
.text$mn:00008F4E                 retn
.text$mn:00008F4E ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:00008F4E
.text$mn:00008F4E ; ---------------------------------------------------------------------------
.text$mn:00008F4F                 align 10h
.text$mn:00008F4F _text$mn        ends
.text$mn:00008F4F
.text$x:00008F50 ; ===========================================================================
.text$x:00008F50
.text$x:00008F50 ; Segment type: Pure code
.text$x:00008F50 ; Segment permissions: Read/Execute
.text$x:00008F50 _text$x         segment para public 'CODE' use32
.text$x:00008F50                 assume cs:_text$x
.text$x:00008F50                 ;org 8F50h
.text$x:00008F50 ; COMDAT (pick associative to section at 8EFC)
.text$x:00008F50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008F50
.text$x:00008F50 ; =============== S U B R O U T I N E =======================================
.text$x:00008F50
.text$x:00008F50
.text$x:00008F50 __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00008F50                                         ; DATA XREF: .xdata$x:0000F790o
.text$x:00008F50                 mov     ecx, [ebp-10h]
.text$x:00008F53                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00008F53 __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:00008F53
.text$x:00008F58
.text$x:00008F58 ; =============== S U B R O U T I N E =======================================
.text$x:00008F58
.text$x:00008F58
.text$x:00008F58 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:00008F58                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00008F58
.text$x:00008F58 arg_4           = dword ptr  8
.text$x:00008F58
.text$x:00008F58                 mov     edx, [esp+arg_4]
.text$x:00008F5C                 lea     eax, [edx+0Ch]
.text$x:00008F5F                 mov     ecx, [edx-8]
.text$x:00008F62                 xor     ecx, eax
.text$x:00008F64                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008F69                 mov     eax, offset __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:00008F6E                 jmp     ___CxxFrameHandler3
.text$x:00008F6E __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:00008F6E
.text$x:00008F6E ; ---------------------------------------------------------------------------
.text$x:00008F73                 align 4
.text$x:00008F73 _text$x         ends
.text$x:00008F73
.text$mn:00008F74 ; ===========================================================================
.text$mn:00008F74
.text$mn:00008F74 ; Segment type: Pure code
.text$mn:00008F74 ; Segment permissions: Read/Execute
.text$mn:00008F74 _text$mn        segment para public 'CODE' use32
.text$mn:00008F74                 assume cs:_text$mn
.text$mn:00008F74                 ;org 8F74h
.text$mn:00008F74 ; COMDAT (pick any)
.text$mn:00008F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F74
.text$mn:00008F74 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F74
.text$mn:00008F74 ; Attributes: bp-based frame
.text$mn:00008F74
.text$mn:00008F74 ; _DWORD __thiscall AssociationInfo::~AssociationInfo(AssociationInfo *__hidden this)
.text$mn:00008F74                 public ??1AssociationInfo@@QAE@XZ
.text$mn:00008F74 ??1AssociationInfo@@QAE@XZ proc near    ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+CEFp
.text$mn:00008F74                                         ; __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$37+6j ...
.text$mn:00008F74
.text$mn:00008F74 var_10          = dword ptr -10h
.text$mn:00008F74 var_C           = dword ptr -0Ch
.text$mn:00008F74 var_4           = dword ptr -4
.text$mn:00008F74
.text$mn:00008F74                 push    ebp
.text$mn:00008F75                 mov     ebp, esp
.text$mn:00008F77                 push    0FFFFFFFFh
.text$mn:00008F79                 push    offset __ehhandler$??1AssociationInfo@@QAE@XZ
.text$mn:00008F7E                 mov     eax, large fs:0
.text$mn:00008F84                 push    eax
.text$mn:00008F85                 push    ecx
.text$mn:00008F86                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008F8B                 xor     eax, ebp
.text$mn:00008F8D                 push    eax
.text$mn:00008F8E                 lea     eax, [ebp+var_C]
.text$mn:00008F91                 mov     large fs:0, eax
.text$mn:00008F97                 mov     [ebp+var_10], ecx
.text$mn:00008F9A                 mov     [ebp+var_4], 1
.text$mn:00008FA1                 mov     byte ptr [ebp+var_4], 0
.text$mn:00008FA5                 mov     ecx, [ebp+var_10]
.text$mn:00008FA8                 add     ecx, 24h ; '$'
.text$mn:00008FAB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00008FB0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008FB7                 mov     ecx, [ebp+var_10]
.text$mn:00008FBA                 add     ecx, 8
.text$mn:00008FBD                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00008FC2                 mov     ecx, [ebp+var_C]
.text$mn:00008FC5                 mov     large fs:0, ecx
.text$mn:00008FCC                 pop     ecx
.text$mn:00008FCD                 mov     esp, ebp
.text$mn:00008FCF                 pop     ebp
.text$mn:00008FD0                 retn
.text$mn:00008FD0 ??1AssociationInfo@@QAE@XZ endp
.text$mn:00008FD0
.text$mn:00008FD0 ; ---------------------------------------------------------------------------
.text$mn:00008FD1                 align 4
.text$mn:00008FD1 _text$mn        ends
.text$mn:00008FD1
.text$x:00008FD4 ; ===========================================================================
.text$x:00008FD4
.text$x:00008FD4 ; Segment type: Pure code
.text$x:00008FD4 ; Segment permissions: Read/Execute
.text$x:00008FD4 _text$x         segment para public 'CODE' use32
.text$x:00008FD4                 assume cs:_text$x
.text$x:00008FD4                 ;org 8FD4h
.text$x:00008FD4 ; COMDAT (pick associative to section at 8F74)
.text$x:00008FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008FD4
.text$x:00008FD4 ; =============== S U B R O U T I N E =======================================
.text$x:00008FD4
.text$x:00008FD4
.text$x:00008FD4 __unwindfunclet$??1AssociationInfo@@QAE@XZ$0 proc near
.text$x:00008FD4                                         ; DATA XREF: .xdata$x:0001011Co
.text$x:00008FD4                 mov     ecx, [ebp-10h]
.text$x:00008FD7                 add     ecx, 8
.text$x:00008FDA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00008FDA __unwindfunclet$??1AssociationInfo@@QAE@XZ$0 endp
.text$x:00008FDA
.text$x:00008FDF
.text$x:00008FDF ; =============== S U B R O U T I N E =======================================
.text$x:00008FDF
.text$x:00008FDF
.text$x:00008FDF __unwindfunclet$??1AssociationInfo@@QAE@XZ$1 proc near
.text$x:00008FDF                                         ; DATA XREF: .xdata$x:00010124o
.text$x:00008FDF                 mov     ecx, [ebp-10h]
.text$x:00008FE2                 add     ecx, 24h ; '$'
.text$x:00008FE5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00008FE5 __unwindfunclet$??1AssociationInfo@@QAE@XZ$1 endp
.text$x:00008FE5
.text$x:00008FEA
.text$x:00008FEA ; =============== S U B R O U T I N E =======================================
.text$x:00008FEA
.text$x:00008FEA
.text$x:00008FEA __ehhandler$??1AssociationInfo@@QAE@XZ proc near
.text$x:00008FEA                                         ; DATA XREF: AssociationInfo::~AssociationInfo(void)+5o
.text$x:00008FEA
.text$x:00008FEA arg_4           = dword ptr  8
.text$x:00008FEA
.text$x:00008FEA                 mov     edx, [esp+arg_4]
.text$x:00008FEE                 lea     eax, [edx+0Ch]
.text$x:00008FF1                 mov     ecx, [edx-8]
.text$x:00008FF4                 xor     ecx, eax
.text$x:00008FF6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008FFB                 mov     eax, offset __ehfuncinfo$??1AssociationInfo@@QAE@XZ
.text$x:00009000                 jmp     ___CxxFrameHandler3
.text$x:00009000 __ehhandler$??1AssociationInfo@@QAE@XZ endp
.text$x:00009000
.text$x:00009000 ; ---------------------------------------------------------------------------
.text$x:00009005                 align 4
.text$x:00009005 _text$x         ends
.text$x:00009005
.text$mn:00009008 ; ===========================================================================
.text$mn:00009008
.text$mn:00009008 ; Segment type: Pure code
.text$mn:00009008 ; Segment permissions: Read/Execute
.text$mn:00009008 _text$mn        segment para public 'CODE' use32
.text$mn:00009008                 assume cs:_text$mn
.text$mn:00009008                 ;org 9008h
.text$mn:00009008 ; COMDAT (pick any)
.text$mn:00009008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009008
.text$mn:00009008 ; =============== S U B R O U T I N E =======================================
.text$mn:00009008
.text$mn:00009008 ; Attributes: bp-based frame
.text$mn:00009008
.text$mn:00009008 ; _DWORD __thiscall FunctionParser::~FunctionParser(FunctionParser *__hidden this)
.text$mn:00009008                 public ??1FunctionParser@@QAE@XZ
.text$mn:00009008 ??1FunctionParser@@QAE@XZ proc near     ; CODE XREF: __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$6+3j
.text$mn:00009008                                         ; __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$9+3j ...
.text$mn:00009008
.text$mn:00009008 var_10          = dword ptr -10h
.text$mn:00009008 var_C           = dword ptr -0Ch
.text$mn:00009008 var_4           = dword ptr -4
.text$mn:00009008
.text$mn:00009008                 push    ebp
.text$mn:00009009                 mov     ebp, esp
.text$mn:0000900B                 push    0FFFFFFFFh
.text$mn:0000900D                 push    offset __ehhandler$??1FunctionParser@@QAE@XZ
.text$mn:00009012                 mov     eax, large fs:0
.text$mn:00009018                 push    eax
.text$mn:00009019                 push    ecx
.text$mn:0000901A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000901F                 xor     eax, ebp
.text$mn:00009021                 push    eax
.text$mn:00009022                 lea     eax, [ebp+var_C]
.text$mn:00009025                 mov     large fs:0, eax
.text$mn:0000902B                 mov     [ebp+var_10], ecx
.text$mn:0000902E                 mov     [ebp+var_4], 5
.text$mn:00009035                 mov     byte ptr [ebp+var_4], 4
.text$mn:00009039                 mov     ecx, [ebp+var_10]
.text$mn:0000903C                 add     ecx, 84h ; 'ä'
.text$mn:00009042                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00009047                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000904B                 mov     ecx, [ebp+var_10]
.text$mn:0000904E                 add     ecx, 74h ; 't'
.text$mn:00009051                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00009056                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000905A                 mov     ecx, [ebp+var_10]
.text$mn:0000905D                 add     ecx, 58h ; 'X'
.text$mn:00009060                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009065                 mov     byte ptr [ebp+var_4], 1
.text$mn:00009069                 mov     ecx, [ebp+var_10]
.text$mn:0000906C                 add     ecx, 3Ch ; '<'
.text$mn:0000906F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009074                 mov     byte ptr [ebp+var_4], 0
.text$mn:00009078                 mov     ecx, [ebp+var_10]
.text$mn:0000907B                 add     ecx, 20h ; ' '
.text$mn:0000907E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009083                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000908A                 mov     ecx, [ebp+var_10]
.text$mn:0000908D                 add     ecx, 4
.text$mn:00009090                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009095                 mov     ecx, [ebp+var_C]
.text$mn:00009098                 mov     large fs:0, ecx
.text$mn:0000909F                 pop     ecx
.text$mn:000090A0                 mov     esp, ebp
.text$mn:000090A2                 pop     ebp
.text$mn:000090A3                 retn
.text$mn:000090A3 ??1FunctionParser@@QAE@XZ endp
.text$mn:000090A3
.text$mn:000090A3 _text$mn        ends
.text$mn:000090A3
.text$x:000090A4 ; ===========================================================================
.text$x:000090A4
.text$x:000090A4 ; Segment type: Pure code
.text$x:000090A4 ; Segment permissions: Read/Execute
.text$x:000090A4 _text$x         segment para public 'CODE' use32
.text$x:000090A4                 assume cs:_text$x
.text$x:000090A4                 ;org 90A4h
.text$x:000090A4 ; COMDAT (pick associative to section at 9008)
.text$x:000090A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000090A4
.text$x:000090A4 ; =============== S U B R O U T I N E =======================================
.text$x:000090A4
.text$x:000090A4
.text$x:000090A4 __unwindfunclet$??1FunctionParser@@QAE@XZ$0 proc near
.text$x:000090A4                                         ; DATA XREF: .xdata$x:0000FEF0o
.text$x:000090A4                 mov     ecx, [ebp-10h]
.text$x:000090A7                 add     ecx, 4
.text$x:000090AA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000090AA __unwindfunclet$??1FunctionParser@@QAE@XZ$0 endp
.text$x:000090AA
.text$x:000090AF
.text$x:000090AF ; =============== S U B R O U T I N E =======================================
.text$x:000090AF
.text$x:000090AF
.text$x:000090AF __unwindfunclet$??1FunctionParser@@QAE@XZ$1 proc near
.text$x:000090AF                                         ; DATA XREF: .xdata$x:0000FEF8o
.text$x:000090AF                 mov     ecx, [ebp-10h]
.text$x:000090B2                 add     ecx, 20h ; ' '
.text$x:000090B5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000090B5 __unwindfunclet$??1FunctionParser@@QAE@XZ$1 endp
.text$x:000090B5
.text$x:000090BA
.text$x:000090BA ; =============== S U B R O U T I N E =======================================
.text$x:000090BA
.text$x:000090BA
.text$x:000090BA __unwindfunclet$??1FunctionParser@@QAE@XZ$2 proc near
.text$x:000090BA                                         ; DATA XREF: .xdata$x:0000FF00o
.text$x:000090BA                 mov     ecx, [ebp-10h]
.text$x:000090BD                 add     ecx, 3Ch ; '<'
.text$x:000090C0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000090C0 __unwindfunclet$??1FunctionParser@@QAE@XZ$2 endp
.text$x:000090C0
.text$x:000090C5
.text$x:000090C5 ; =============== S U B R O U T I N E =======================================
.text$x:000090C5
.text$x:000090C5
.text$x:000090C5 __unwindfunclet$??1FunctionParser@@QAE@XZ$3 proc near
.text$x:000090C5                                         ; DATA XREF: .xdata$x:0000FF08o
.text$x:000090C5                 mov     ecx, [ebp-10h]
.text$x:000090C8                 add     ecx, 58h ; 'X'
.text$x:000090CB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000090CB __unwindfunclet$??1FunctionParser@@QAE@XZ$3 endp
.text$x:000090CB
.text$x:000090D0
.text$x:000090D0 ; =============== S U B R O U T I N E =======================================
.text$x:000090D0
.text$x:000090D0
.text$x:000090D0 __unwindfunclet$??1FunctionParser@@QAE@XZ$4 proc near
.text$x:000090D0                                         ; DATA XREF: .xdata$x:0000FF10o
.text$x:000090D0                 mov     ecx, [ebp-10h]
.text$x:000090D3                 add     ecx, 74h ; 't'
.text$x:000090D6                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:000090D6 __unwindfunclet$??1FunctionParser@@QAE@XZ$4 endp
.text$x:000090D6
.text$x:000090DB
.text$x:000090DB ; =============== S U B R O U T I N E =======================================
.text$x:000090DB
.text$x:000090DB
.text$x:000090DB __unwindfunclet$??1FunctionParser@@QAE@XZ$5 proc near
.text$x:000090DB                                         ; DATA XREF: .xdata$x:0000FF18o
.text$x:000090DB                 mov     ecx, [ebp-10h]
.text$x:000090DE                 add     ecx, 84h ; 'ä'
.text$x:000090E4                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:000090E4 __unwindfunclet$??1FunctionParser@@QAE@XZ$5 endp
.text$x:000090E4
.text$x:000090E9
.text$x:000090E9 ; =============== S U B R O U T I N E =======================================
.text$x:000090E9
.text$x:000090E9
.text$x:000090E9 __ehhandler$??1FunctionParser@@QAE@XZ proc near
.text$x:000090E9                                         ; DATA XREF: FunctionParser::~FunctionParser(void)+5o
.text$x:000090E9
.text$x:000090E9 arg_4           = dword ptr  8
.text$x:000090E9
.text$x:000090E9                 mov     edx, [esp+arg_4]
.text$x:000090ED                 lea     eax, [edx+0Ch]
.text$x:000090F0                 mov     ecx, [edx-8]
.text$x:000090F3                 xor     ecx, eax
.text$x:000090F5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000090FA                 mov     eax, offset __ehfuncinfo$??1FunctionParser@@QAE@XZ
.text$x:000090FF                 jmp     ___CxxFrameHandler3
.text$x:000090FF __ehhandler$??1FunctionParser@@QAE@XZ endp
.text$x:000090FF
.text$x:000090FF _text$x         ends
.text$x:000090FF
.text$mn:00009104 ; ===========================================================================
.text$mn:00009104
.text$mn:00009104 ; Segment type: Pure code
.text$mn:00009104 ; Segment permissions: Read/Execute
.text$mn:00009104 _text$mn        segment para public 'CODE' use32
.text$mn:00009104                 assume cs:_text$mn
.text$mn:00009104                 ;org 9104h
.text$mn:00009104 ; COMDAT (pick any)
.text$mn:00009104                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009104
.text$mn:00009104 ; =============== S U B R O U T I N E =======================================
.text$mn:00009104
.text$mn:00009104 ; Attributes: bp-based frame
.text$mn:00009104
.text$mn:00009104 ; _DWORD __thiscall FunctionZoneParser::~FunctionZoneParser(FunctionZoneParser *__hidden this)
.text$mn:00009104                 public ??1FunctionZoneParser@@QAE@XZ
.text$mn:00009104 ??1FunctionZoneParser@@QAE@XZ proc near ; CODE XREF: __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$12+3j
.text$mn:00009104
.text$mn:00009104 var_10          = dword ptr -10h
.text$mn:00009104 var_C           = dword ptr -0Ch
.text$mn:00009104 var_4           = dword ptr -4
.text$mn:00009104
.text$mn:00009104                 push    ebp
.text$mn:00009105                 mov     ebp, esp
.text$mn:00009107                 push    0FFFFFFFFh
.text$mn:00009109                 push    offset __ehhandler$??1FunctionZoneParser@@QAE@XZ
.text$mn:0000910E                 mov     eax, large fs:0
.text$mn:00009114                 push    eax
.text$mn:00009115                 push    ecx
.text$mn:00009116                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000911B                 xor     eax, ebp
.text$mn:0000911D                 push    eax
.text$mn:0000911E                 lea     eax, [ebp+var_C]
.text$mn:00009121                 mov     large fs:0, eax
.text$mn:00009127                 mov     [ebp+var_10], ecx
.text$mn:0000912A                 mov     [ebp+var_4], 4
.text$mn:00009131                 mov     byte ptr [ebp+var_4], 3
.text$mn:00009135                 mov     ecx, [ebp+var_10]
.text$mn:00009138                 add     ecx, 0E8h ; 'F'
.text$mn:0000913E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009143                 mov     byte ptr [ebp+var_4], 2
.text$mn:00009147                 mov     ecx, [ebp+var_10]
.text$mn:0000914A                 add     ecx, 0CCh ; '¦'
.text$mn:00009150                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009155                 mov     byte ptr [ebp+var_4], 1
.text$mn:00009159                 mov     ecx, [ebp+var_10]
.text$mn:0000915C                 add     ecx, 0B0h ; '¦'
.text$mn:00009162                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009167                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000916B                 mov     ecx, [ebp+var_10]
.text$mn:0000916E                 add     ecx, 94h ; 'ö'
.text$mn:00009174                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009179                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009180                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009183                 call    ??1FunctionParser@@QAE@XZ ; FunctionParser::~FunctionParser(void)
.text$mn:00009188                 mov     ecx, [ebp+var_C]
.text$mn:0000918B                 mov     large fs:0, ecx
.text$mn:00009192                 pop     ecx
.text$mn:00009193                 mov     esp, ebp
.text$mn:00009195                 pop     ebp
.text$mn:00009196                 retn
.text$mn:00009196 ??1FunctionZoneParser@@QAE@XZ endp
.text$mn:00009196
.text$mn:00009196 ; ---------------------------------------------------------------------------
.text$mn:00009197                 align 4
.text$mn:00009197 _text$mn        ends
.text$mn:00009197
.text$x:00009198 ; ===========================================================================
.text$x:00009198
.text$x:00009198 ; Segment type: Pure code
.text$x:00009198 ; Segment permissions: Read/Execute
.text$x:00009198 _text$x         segment para public 'CODE' use32
.text$x:00009198                 assume cs:_text$x
.text$x:00009198                 ;org 9198h
.text$x:00009198 ; COMDAT (pick associative to section at 9104)
.text$x:00009198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009198
.text$x:00009198 ; =============== S U B R O U T I N E =======================================
.text$x:00009198
.text$x:00009198
.text$x:00009198 __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$0 proc near
.text$x:00009198                                         ; DATA XREF: .xdata$x:0000FFD8o
.text$x:00009198                 mov     ecx, [ebp-10h]  ; this
.text$x:0000919B                 jmp     ??1FunctionParser@@QAE@XZ ; FunctionParser::~FunctionParser(void)
.text$x:0000919B __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$0 endp
.text$x:0000919B
.text$x:000091A0
.text$x:000091A0 ; =============== S U B R O U T I N E =======================================
.text$x:000091A0
.text$x:000091A0
.text$x:000091A0 __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$1 proc near
.text$x:000091A0                                         ; DATA XREF: .xdata$x:0000FFE0o
.text$x:000091A0                 mov     ecx, [ebp-10h]
.text$x:000091A3                 add     ecx, 94h ; 'ö'
.text$x:000091A9                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000091A9 __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$1 endp
.text$x:000091A9
.text$x:000091AE
.text$x:000091AE ; =============== S U B R O U T I N E =======================================
.text$x:000091AE
.text$x:000091AE
.text$x:000091AE __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$2 proc near
.text$x:000091AE                                         ; DATA XREF: .xdata$x:0000FFE8o
.text$x:000091AE                 mov     ecx, [ebp-10h]
.text$x:000091B1                 add     ecx, 0B0h ; '¦'
.text$x:000091B7                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000091B7 __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$2 endp
.text$x:000091B7
.text$x:000091BC
.text$x:000091BC ; =============== S U B R O U T I N E =======================================
.text$x:000091BC
.text$x:000091BC
.text$x:000091BC __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$3 proc near
.text$x:000091BC                                         ; DATA XREF: .xdata$x:0000FFF0o
.text$x:000091BC                 mov     ecx, [ebp-10h]
.text$x:000091BF                 add     ecx, 0CCh ; '¦'
.text$x:000091C5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000091C5 __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$3 endp
.text$x:000091C5
.text$x:000091CA
.text$x:000091CA ; =============== S U B R O U T I N E =======================================
.text$x:000091CA
.text$x:000091CA
.text$x:000091CA __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$4 proc near
.text$x:000091CA                                         ; DATA XREF: .xdata$x:0000FFF8o
.text$x:000091CA                 mov     ecx, [ebp-10h]
.text$x:000091CD                 add     ecx, 0E8h ; 'F'
.text$x:000091D3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000091D3 __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$4 endp
.text$x:000091D3
.text$x:000091D8
.text$x:000091D8 ; =============== S U B R O U T I N E =======================================
.text$x:000091D8
.text$x:000091D8
.text$x:000091D8 __ehhandler$??1FunctionZoneParser@@QAE@XZ proc near
.text$x:000091D8                                         ; DATA XREF: FunctionZoneParser::~FunctionZoneParser(void)+5o
.text$x:000091D8
.text$x:000091D8 arg_4           = dword ptr  8
.text$x:000091D8
.text$x:000091D8                 mov     edx, [esp+arg_4]
.text$x:000091DC                 lea     eax, [edx+0Ch]
.text$x:000091DF                 mov     ecx, [edx-8]
.text$x:000091E2                 xor     ecx, eax
.text$x:000091E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000091E9                 mov     eax, offset __ehfuncinfo$??1FunctionZoneParser@@QAE@XZ
.text$x:000091EE                 jmp     ___CxxFrameHandler3
.text$x:000091EE __ehhandler$??1FunctionZoneParser@@QAE@XZ endp
.text$x:000091EE
.text$x:000091EE ; ---------------------------------------------------------------------------
.text$x:000091F3                 align 4
.text$x:000091F3 _text$x         ends
.text$x:000091F3
.text$mn:000091F4 ; ===========================================================================
.text$mn:000091F4
.text$mn:000091F4 ; Segment type: Pure code
.text$mn:000091F4 ; Segment permissions: Read/Execute
.text$mn:000091F4 _text$mn        segment para public 'CODE' use32
.text$mn:000091F4                 assume cs:_text$mn
.text$mn:000091F4                 ;org 91F4h
.text$mn:000091F4 ; COMDAT (pick any)
.text$mn:000091F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000091F4
.text$mn:000091F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000091F4
.text$mn:000091F4 ; Attributes: bp-based frame
.text$mn:000091F4
.text$mn:000091F4 ; _DWORD __thiscall TiXmlDocument::~TiXmlDocument(TiXmlDocument *__hidden this)
.text$mn:000091F4                 public ??1TiXmlDocument@@UAE@XZ
.text$mn:000091F4 ??1TiXmlDocument@@UAE@XZ proc near      ; CODE XREF: TiXmlDocument::`scalar deleting destructor'(uint)+Ap
.text$mn:000091F4
.text$mn:000091F4 var_10          = dword ptr -10h
.text$mn:000091F4 var_C           = dword ptr -0Ch
.text$mn:000091F4 var_4           = dword ptr -4
.text$mn:000091F4
.text$mn:000091F4                 push    ebp
.text$mn:000091F5                 mov     ebp, esp
.text$mn:000091F7                 push    0FFFFFFFFh
.text$mn:000091F9                 push    offset __ehhandler$??1TiXmlDocument@@UAE@XZ
.text$mn:000091FE                 mov     eax, large fs:0
.text$mn:00009204                 push    eax
.text$mn:00009205                 push    ecx
.text$mn:00009206                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000920B                 xor     eax, ebp
.text$mn:0000920D                 push    eax
.text$mn:0000920E                 lea     eax, [ebp+var_C]
.text$mn:00009211                 mov     large fs:0, eax
.text$mn:00009217                 mov     [ebp+var_10], ecx
.text$mn:0000921A                 mov     eax, [ebp+var_10]
.text$mn:0000921D                 mov     dword ptr [eax], offset ??_7TiXmlDocument@@6B@ ; const TiXmlDocument::`vftable'
.text$mn:00009223                 mov     [ebp+var_4], 1
.text$mn:0000922A                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000922E                 mov     ecx, [ebp+var_10]
.text$mn:00009231                 add     ecx, 4Ch ; 'L'
.text$mn:00009234                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009239                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009240                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009243                 call    ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$mn:00009248                 mov     ecx, [ebp+var_C]
.text$mn:0000924B                 mov     large fs:0, ecx
.text$mn:00009252                 pop     ecx
.text$mn:00009253                 mov     esp, ebp
.text$mn:00009255                 pop     ebp
.text$mn:00009256                 retn
.text$mn:00009256 ??1TiXmlDocument@@UAE@XZ endp
.text$mn:00009256
.text$mn:00009256 ; ---------------------------------------------------------------------------
.text$mn:00009257                 align 4
.text$mn:00009257 _text$mn        ends
.text$mn:00009257
.text$x:00009258 ; ===========================================================================
.text$x:00009258
.text$x:00009258 ; Segment type: Pure code
.text$x:00009258 ; Segment permissions: Read/Execute
.text$x:00009258 _text$x         segment para public 'CODE' use32
.text$x:00009258                 assume cs:_text$x
.text$x:00009258                 ;org 9258h
.text$x:00009258 ; COMDAT (pick associative to section at 91F4)
.text$x:00009258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009258
.text$x:00009258 ; =============== S U B R O U T I N E =======================================
.text$x:00009258
.text$x:00009258
.text$x:00009258 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0 proc near
.text$x:00009258                                         ; DATA XREF: .xdata$x:0000F5E4o
.text$x:00009258                 mov     ecx, [ebp-10h]  ; this
.text$x:0000925B                 jmp     ??1TiXmlNode@@UAE@XZ ; TiXmlNode::~TiXmlNode(void)
.text$x:0000925B __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0 endp
.text$x:0000925B
.text$x:00009260
.text$x:00009260 ; =============== S U B R O U T I N E =======================================
.text$x:00009260
.text$x:00009260
.text$x:00009260 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1 proc near
.text$x:00009260                                         ; DATA XREF: .xdata$x:0000F5ECo
.text$x:00009260                 mov     ecx, [ebp-10h]
.text$x:00009263                 add     ecx, 4Ch ; 'L'
.text$x:00009266                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00009266 __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1 endp
.text$x:00009266
.text$x:0000926B
.text$x:0000926B ; =============== S U B R O U T I N E =======================================
.text$x:0000926B
.text$x:0000926B
.text$x:0000926B __ehhandler$??1TiXmlDocument@@UAE@XZ proc near
.text$x:0000926B                                         ; DATA XREF: TiXmlDocument::~TiXmlDocument(void)+5o
.text$x:0000926B
.text$x:0000926B arg_4           = dword ptr  8
.text$x:0000926B
.text$x:0000926B                 mov     edx, [esp+arg_4]
.text$x:0000926F                 lea     eax, [edx+0Ch]
.text$x:00009272                 mov     ecx, [edx-8]
.text$x:00009275                 xor     ecx, eax
.text$x:00009277                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000927C                 mov     eax, offset __ehfuncinfo$??1TiXmlDocument@@UAE@XZ
.text$x:00009281                 jmp     ___CxxFrameHandler3
.text$x:00009281 __ehhandler$??1TiXmlDocument@@UAE@XZ endp
.text$x:00009281
.text$x:00009281 ; ---------------------------------------------------------------------------
.text$x:00009286                 align 4
.text$x:00009286 _text$x         ends
.text$x:00009286
.text$mn:00009288 ; ===========================================================================
.text$mn:00009288
.text$mn:00009288 ; Segment type: Pure code
.text$mn:00009288 ; Segment permissions: Read/Execute
.text$mn:00009288 _text$mn        segment para public 'CODE' use32
.text$mn:00009288                 assume cs:_text$mn
.text$mn:00009288                 ;org 9288h
.text$mn:00009288 ; COMDAT (pick any)
.text$mn:00009288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009288
.text$mn:00009288 ; =============== S U B R O U T I N E =======================================
.text$mn:00009288
.text$mn:00009288 ; Attributes: bp-based frame
.text$mn:00009288
.text$mn:00009288 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00009288                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00009288 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00009288                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00009288                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00009288
.text$mn:00009288 var_4           = dword ptr -4
.text$mn:00009288
.text$mn:00009288                 push    ebp
.text$mn:00009289                 mov     ebp, esp
.text$mn:0000928B                 push    ecx
.text$mn:0000928C                 mov     [ebp+var_4], ecx
.text$mn:0000928F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009292                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00009297                 mov     esp, ebp
.text$mn:00009299                 pop     ebp
.text$mn:0000929A                 retn
.text$mn:0000929A ??1_Container_base12@std@@QAE@XZ endp
.text$mn:0000929A
.text$mn:0000929A ; ---------------------------------------------------------------------------
.text$mn:0000929B                 align 4
.text$mn:0000929B _text$mn        ends
.text$mn:0000929B
.text$mn:0000929C ; ===========================================================================
.text$mn:0000929C
.text$mn:0000929C ; Segment type: Pure code
.text$mn:0000929C ; Segment permissions: Read/Execute
.text$mn:0000929C _text$mn        segment para public 'CODE' use32
.text$mn:0000929C                 assume cs:_text$mn
.text$mn:0000929C                 ;org 929Ch
.text$mn:0000929C ; COMDAT (pick any)
.text$mn:0000929C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000929C
.text$mn:0000929C ; =============== S U B R O U T I N E =======================================
.text$mn:0000929C
.text$mn:0000929C ; Attributes: bp-based frame
.text$mn:0000929C
.text$mn:0000929C ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:0000929C                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:0000929C ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:0000929C                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:0000929C                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:0000929C
.text$mn:0000929C var_10          = dword ptr -10h
.text$mn:0000929C var_C           = dword ptr -0Ch
.text$mn:0000929C var_4           = dword ptr -4
.text$mn:0000929C
.text$mn:0000929C                 push    ebp
.text$mn:0000929D                 mov     ebp, esp
.text$mn:0000929F                 push    0FFFFFFFFh
.text$mn:000092A1                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:000092A6                 mov     eax, large fs:0
.text$mn:000092AC                 push    eax
.text$mn:000092AD                 push    ecx
.text$mn:000092AE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000092B3                 xor     eax, ebp
.text$mn:000092B5                 push    eax
.text$mn:000092B6                 lea     eax, [ebp+var_C]
.text$mn:000092B9                 mov     large fs:0, eax
.text$mn:000092BF                 mov     [ebp+var_10], ecx
.text$mn:000092C2                 mov     [ebp+var_4], 0
.text$mn:000092C9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000092D0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000092D3                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:000092D8                 mov     ecx, [ebp+var_C]
.text$mn:000092DB                 mov     large fs:0, ecx
.text$mn:000092E2                 pop     ecx
.text$mn:000092E3                 mov     esp, ebp
.text$mn:000092E5                 pop     ebp
.text$mn:000092E6                 retn
.text$mn:000092E6 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:000092E6
.text$mn:000092E6 ; ---------------------------------------------------------------------------
.text$mn:000092E7                 align 4
.text$mn:000092E7 _text$mn        ends
.text$mn:000092E7
.text$x:000092E8 ; ===========================================================================
.text$x:000092E8
.text$x:000092E8 ; Segment type: Pure code
.text$x:000092E8 ; Segment permissions: Read/Execute
.text$x:000092E8 _text$x         segment para public 'CODE' use32
.text$x:000092E8                 assume cs:_text$x
.text$x:000092E8                 ;org 92E8h
.text$x:000092E8 ; COMDAT (pick associative to section at 929C)
.text$x:000092E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000092E8
.text$x:000092E8 ; =============== S U B R O U T I N E =======================================
.text$x:000092E8
.text$x:000092E8
.text$x:000092E8 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:000092E8                                         ; DATA XREF: .xdata$x:0000F110o
.text$x:000092E8                 mov     ecx, [ebp-10h]  ; this
.text$x:000092EB                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:000092EB __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:000092EB
.text$x:000092F0
.text$x:000092F0 ; =============== S U B R O U T I N E =======================================
.text$x:000092F0
.text$x:000092F0
.text$x:000092F0 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:000092F0                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:000092F0
.text$x:000092F0 arg_4           = dword ptr  8
.text$x:000092F0
.text$x:000092F0                 mov     edx, [esp+arg_4]
.text$x:000092F4                 lea     eax, [edx+0Ch]
.text$x:000092F7                 mov     ecx, [edx-8]
.text$x:000092FA                 xor     ecx, eax
.text$x:000092FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009301                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00009306                 jmp     ___CxxFrameHandler3
.text$x:00009306 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00009306
.text$x:00009306 ; ---------------------------------------------------------------------------
.text$x:0000930B                 align 4
.text$x:0000930B _text$x         ends
.text$x:0000930B
.text$mn:0000930C ; ===========================================================================
.text$mn:0000930C
.text$mn:0000930C ; Segment type: Pure code
.text$mn:0000930C ; Segment permissions: Read/Execute
.text$mn:0000930C _text$mn        segment para public 'CODE' use32
.text$mn:0000930C                 assume cs:_text$mn
.text$mn:0000930C                 ;org 930Ch
.text$mn:0000930C ; COMDAT (pick any)
.text$mn:0000930C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000930C
.text$mn:0000930C ; =============== S U B R O U T I N E =======================================
.text$mn:0000930C
.text$mn:0000930C ; Attributes: bp-based frame
.text$mn:0000930C
.text$mn:0000930C ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:0000930C                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:0000930C ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:0000930C                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:0000930C                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:0000930C
.text$mn:0000930C var_10          = dword ptr -10h
.text$mn:0000930C var_C           = dword ptr -0Ch
.text$mn:0000930C var_4           = dword ptr -4
.text$mn:0000930C
.text$mn:0000930C                 push    ebp
.text$mn:0000930D                 mov     ebp, esp
.text$mn:0000930F                 push    0FFFFFFFFh
.text$mn:00009311                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00009316                 mov     eax, large fs:0
.text$mn:0000931C                 push    eax
.text$mn:0000931D                 push    ecx
.text$mn:0000931E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009323                 xor     eax, ebp
.text$mn:00009325                 push    eax
.text$mn:00009326                 lea     eax, [ebp+var_C]
.text$mn:00009329                 mov     large fs:0, eax
.text$mn:0000932F                 mov     [ebp+var_10], ecx
.text$mn:00009332                 mov     [ebp+var_4], 0
.text$mn:00009339                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009340                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009343                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00009348                 mov     ecx, [ebp+var_C]
.text$mn:0000934B                 mov     large fs:0, ecx
.text$mn:00009352                 pop     ecx
.text$mn:00009353                 mov     esp, ebp
.text$mn:00009355                 pop     ebp
.text$mn:00009356                 retn
.text$mn:00009356 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00009356
.text$mn:00009356 ; ---------------------------------------------------------------------------
.text$mn:00009357                 align 4
.text$mn:00009357 _text$mn        ends
.text$mn:00009357
.text$x:00009358 ; ===========================================================================
.text$x:00009358
.text$x:00009358 ; Segment type: Pure code
.text$x:00009358 ; Segment permissions: Read/Execute
.text$x:00009358 _text$x         segment para public 'CODE' use32
.text$x:00009358                 assume cs:_text$x
.text$x:00009358                 ;org 9358h
.text$x:00009358 ; COMDAT (pick associative to section at 930C)
.text$x:00009358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009358
.text$x:00009358 ; =============== S U B R O U T I N E =======================================
.text$x:00009358
.text$x:00009358
.text$x:00009358 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00009358                                         ; DATA XREF: .xdata$x:0000F194o
.text$x:00009358                 mov     ecx, [ebp-10h]  ; this
.text$x:0000935B                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000935B __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:0000935B
.text$x:00009360
.text$x:00009360 ; =============== S U B R O U T I N E =======================================
.text$x:00009360
.text$x:00009360
.text$x:00009360 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00009360                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00009360
.text$x:00009360 arg_4           = dword ptr  8
.text$x:00009360
.text$x:00009360                 mov     edx, [esp+arg_4]
.text$x:00009364                 lea     eax, [edx+0Ch]
.text$x:00009367                 mov     ecx, [edx-8]
.text$x:0000936A                 xor     ecx, eax
.text$x:0000936C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009371                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00009376                 jmp     ___CxxFrameHandler3
.text$x:00009376 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00009376
.text$x:00009376 ; ---------------------------------------------------------------------------
.text$x:0000937B                 align 4
.text$x:0000937B _text$x         ends
.text$x:0000937B
.text$mn:0000937C ; ===========================================================================
.text$mn:0000937C
.text$mn:0000937C ; Segment type: Pure code
.text$mn:0000937C ; Segment permissions: Read/Execute
.text$mn:0000937C _text$mn        segment para public 'CODE' use32
.text$mn:0000937C                 assume cs:_text$mn
.text$mn:0000937C                 ;org 937Ch
.text$mn:0000937C ; COMDAT (pick any)
.text$mn:0000937C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000937C
.text$mn:0000937C ; =============== S U B R O U T I N E =======================================
.text$mn:0000937C
.text$mn:0000937C ; Attributes: bp-based frame
.text$mn:0000937C
.text$mn:0000937C ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:0000937C                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:0000937C ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:0000937C                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:0000937C                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:0000937C
.text$mn:0000937C var_14          = byte ptr -14h
.text$mn:0000937C var_10          = dword ptr -10h
.text$mn:0000937C var_C           = dword ptr -0Ch
.text$mn:0000937C var_4           = dword ptr -4
.text$mn:0000937C
.text$mn:0000937C                 push    ebp
.text$mn:0000937D                 mov     ebp, esp
.text$mn:0000937F                 push    0FFFFFFFFh
.text$mn:00009381                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:00009386                 mov     eax, large fs:0
.text$mn:0000938C                 push    eax
.text$mn:0000938D                 sub     esp, 8
.text$mn:00009390                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009395                 xor     eax, ebp
.text$mn:00009397                 push    eax
.text$mn:00009398                 lea     eax, [ebp+var_C]
.text$mn:0000939B                 mov     large fs:0, eax
.text$mn:000093A1                 mov     [ebp+var_10], ecx
.text$mn:000093A4                 push    3               ; int
.text$mn:000093A6                 lea     ecx, [ebp+var_14] ; this
.text$mn:000093A9                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000093AE                 mov     [ebp+var_4], 0
.text$mn:000093B5                 mov     ecx, [ebp+var_10] ; this
.text$mn:000093B8                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:000093BD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000093C4                 lea     ecx, [ebp+var_14] ; this
.text$mn:000093C7                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000093CC                 mov     ecx, [ebp+var_C]
.text$mn:000093CF                 mov     large fs:0, ecx
.text$mn:000093D6                 pop     ecx
.text$mn:000093D7                 mov     esp, ebp
.text$mn:000093D9                 pop     ebp
.text$mn:000093DA                 retn
.text$mn:000093DA ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:000093DA
.text$mn:000093DA ; ---------------------------------------------------------------------------
.text$mn:000093DB                 align 4
.text$mn:000093DB _text$mn        ends
.text$mn:000093DB
.text$x:000093DC ; ===========================================================================
.text$x:000093DC
.text$x:000093DC ; Segment type: Pure code
.text$x:000093DC ; Segment permissions: Read/Execute
.text$x:000093DC _text$x         segment para public 'CODE' use32
.text$x:000093DC                 assume cs:_text$x
.text$x:000093DC                 ;org 93DCh
.text$x:000093DC ; COMDAT (pick associative to section at 937C)
.text$x:000093DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000093DC
.text$x:000093DC ; =============== S U B R O U T I N E =======================================
.text$x:000093DC
.text$x:000093DC
.text$x:000093DC __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:000093DC                                         ; DATA XREF: .xdata$x:0000EEC4o
.text$x:000093DC                 lea     ecx, [ebp-14h]  ; this
.text$x:000093DF                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000093DF __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:000093DF
.text$x:000093E4
.text$x:000093E4 ; =============== S U B R O U T I N E =======================================
.text$x:000093E4
.text$x:000093E4
.text$x:000093E4 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:000093E4                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:000093E4
.text$x:000093E4 arg_4           = dword ptr  8
.text$x:000093E4
.text$x:000093E4                 mov     edx, [esp+arg_4]
.text$x:000093E8                 lea     eax, [edx+0Ch]
.text$x:000093EB                 mov     ecx, [edx-0Ch]
.text$x:000093EE                 xor     ecx, eax
.text$x:000093F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000093F5                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:000093FA                 jmp     ___CxxFrameHandler3
.text$x:000093FA __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:000093FA
.text$x:000093FA ; ---------------------------------------------------------------------------
.text$x:000093FF                 align 10h
.text$x:000093FF _text$x         ends
.text$x:000093FF
.text$mn:00009400 ; ===========================================================================
.text$mn:00009400
.text$mn:00009400 ; Segment type: Pure code
.text$mn:00009400 ; Segment permissions: Read/Execute
.text$mn:00009400 _text$mn        segment para public 'CODE' use32
.text$mn:00009400                 assume cs:_text$mn
.text$mn:00009400                 ;org 9400h
.text$mn:00009400 ; COMDAT (pick any)
.text$mn:00009400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009400
.text$mn:00009400 ; =============== S U B R O U T I N E =======================================
.text$mn:00009400
.text$mn:00009400 ; Attributes: bp-based frame
.text$mn:00009400
.text$mn:00009400 ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00009400                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00009400 ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00009400                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00009400                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00009400
.text$mn:00009400 var_10          = dword ptr -10h
.text$mn:00009400 var_C           = dword ptr -0Ch
.text$mn:00009400 var_4           = dword ptr -4
.text$mn:00009400
.text$mn:00009400                 push    ebp
.text$mn:00009401                 mov     ebp, esp
.text$mn:00009403                 push    0FFFFFFFFh
.text$mn:00009405                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:0000940A                 mov     eax, large fs:0
.text$mn:00009410                 push    eax
.text$mn:00009411                 push    ecx
.text$mn:00009412                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009417                 xor     eax, ebp
.text$mn:00009419                 push    eax
.text$mn:0000941A                 lea     eax, [ebp+var_C]
.text$mn:0000941D                 mov     large fs:0, eax
.text$mn:00009423                 mov     [ebp+var_10], ecx
.text$mn:00009426                 mov     [ebp+var_4], 0
.text$mn:0000942D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009434                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009437                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:0000943C                 mov     ecx, [ebp+var_C]
.text$mn:0000943F                 mov     large fs:0, ecx
.text$mn:00009446                 pop     ecx
.text$mn:00009447                 mov     esp, ebp
.text$mn:00009449                 pop     ebp
.text$mn:0000944A                 retn
.text$mn:0000944A ??1_System_error_category@std@@UAE@XZ endp
.text$mn:0000944A
.text$mn:0000944A ; ---------------------------------------------------------------------------
.text$mn:0000944B                 align 4
.text$mn:0000944B _text$mn        ends
.text$mn:0000944B
.text$x:0000944C ; ===========================================================================
.text$x:0000944C
.text$x:0000944C ; Segment type: Pure code
.text$x:0000944C ; Segment permissions: Read/Execute
.text$x:0000944C _text$x         segment para public 'CODE' use32
.text$x:0000944C                 assume cs:_text$x
.text$x:0000944C                 ;org 944Ch
.text$x:0000944C ; COMDAT (pick associative to section at 9400)
.text$x:0000944C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000944C
.text$x:0000944C ; =============== S U B R O U T I N E =======================================
.text$x:0000944C
.text$x:0000944C
.text$x:0000944C __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:0000944C                                         ; DATA XREF: .xdata$x:0000F218o
.text$x:0000944C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000944F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000944F __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:0000944F
.text$x:00009454
.text$x:00009454 ; =============== S U B R O U T I N E =======================================
.text$x:00009454
.text$x:00009454
.text$x:00009454 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00009454                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00009454
.text$x:00009454 arg_4           = dword ptr  8
.text$x:00009454
.text$x:00009454                 mov     edx, [esp+arg_4]
.text$x:00009458                 lea     eax, [edx+0Ch]
.text$x:0000945B                 mov     ecx, [edx-8]
.text$x:0000945E                 xor     ecx, eax
.text$x:00009460                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009465                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:0000946A                 jmp     ___CxxFrameHandler3
.text$x:0000946A __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:0000946A
.text$x:0000946A ; ---------------------------------------------------------------------------
.text$x:0000946F                 align 10h
.text$x:0000946F _text$x         ends
.text$x:0000946F
.text$mn:00009470 ; ===========================================================================
.text$mn:00009470
.text$mn:00009470 ; Segment type: Pure code
.text$mn:00009470 ; Segment permissions: Read/Execute
.text$mn:00009470 _text$mn        segment para public 'CODE' use32
.text$mn:00009470                 assume cs:_text$mn
.text$mn:00009470                 ;org 9470h
.text$mn:00009470 ; COMDAT (pick any)
.text$mn:00009470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009470
.text$mn:00009470 ; =============== S U B R O U T I N E =======================================
.text$mn:00009470
.text$mn:00009470 ; Attributes: bp-based frame
.text$mn:00009470
.text$mn:00009470 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00009470                 public ??1error_category@std@@UAE@XZ
.text$mn:00009470 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00009470                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00009470
.text$mn:00009470 var_4           = dword ptr -4
.text$mn:00009470
.text$mn:00009470                 push    ebp
.text$mn:00009471                 mov     ebp, esp
.text$mn:00009473                 push    ecx
.text$mn:00009474                 mov     [ebp+var_4], ecx
.text$mn:00009477                 mov     eax, [ebp+var_4]
.text$mn:0000947A                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00009480                 mov     esp, ebp
.text$mn:00009482                 pop     ebp
.text$mn:00009483                 retn
.text$mn:00009483 ??1error_category@std@@UAE@XZ endp
.text$mn:00009483
.text$mn:00009483 _text$mn        ends
.text$mn:00009483
.text$mn:00009484 ; ===========================================================================
.text$mn:00009484
.text$mn:00009484 ; Segment type: Pure code
.text$mn:00009484 ; Segment permissions: Read/Execute
.text$mn:00009484 _text$mn        segment para public 'CODE' use32
.text$mn:00009484                 assume cs:_text$mn
.text$mn:00009484                 ;org 9484h
.text$mn:00009484 ; COMDAT (pick any)
.text$mn:00009484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009484
.text$mn:00009484 ; =============== S U B R O U T I N E =======================================
.text$mn:00009484
.text$mn:00009484 ; Attributes: bp-based frame
.text$mn:00009484
.text$mn:00009484 ; _DWORD __thiscall foundInfo::~foundInfo(foundInfo *__hidden this)
.text$mn:00009484                 public ??1foundInfo@@QAE@XZ
.text$mn:00009484 ??1foundInfo@@QAE@XZ proc near          ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+44Bp
.text$mn:00009484                                         ; __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$1+6j ...
.text$mn:00009484
.text$mn:00009484 var_10          = dword ptr -10h
.text$mn:00009484 var_C           = dword ptr -0Ch
.text$mn:00009484 var_4           = dword ptr -4
.text$mn:00009484
.text$mn:00009484                 push    ebp
.text$mn:00009485                 mov     ebp, esp
.text$mn:00009487                 push    0FFFFFFFFh
.text$mn:00009489                 push    offset __ehhandler$??1foundInfo@@QAE@XZ
.text$mn:0000948E                 mov     eax, large fs:0
.text$mn:00009494                 push    eax
.text$mn:00009495                 push    ecx
.text$mn:00009496                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000949B                 xor     eax, ebp
.text$mn:0000949D                 push    eax
.text$mn:0000949E                 lea     eax, [ebp+var_C]
.text$mn:000094A1                 mov     large fs:0, eax
.text$mn:000094A7                 mov     [ebp+var_10], ecx
.text$mn:000094AA                 mov     [ebp+var_4], 1
.text$mn:000094B1                 mov     byte ptr [ebp+var_4], 0
.text$mn:000094B5                 mov     ecx, [ebp+var_10]
.text$mn:000094B8                 add     ecx, 1Ch
.text$mn:000094BB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000094C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000094C7                 mov     ecx, [ebp+var_10]
.text$mn:000094CA                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000094CF                 mov     ecx, [ebp+var_C]
.text$mn:000094D2                 mov     large fs:0, ecx
.text$mn:000094D9                 pop     ecx
.text$mn:000094DA                 mov     esp, ebp
.text$mn:000094DC                 pop     ebp
.text$mn:000094DD                 retn
.text$mn:000094DD ??1foundInfo@@QAE@XZ endp
.text$mn:000094DD
.text$mn:000094DD ; ---------------------------------------------------------------------------
.text$mn:000094DE                 align 10h
.text$mn:000094DE _text$mn        ends
.text$mn:000094DE
.text$x:000094E0 ; ===========================================================================
.text$x:000094E0
.text$x:000094E0 ; Segment type: Pure code
.text$x:000094E0 ; Segment permissions: Read/Execute
.text$x:000094E0 _text$x         segment para public 'CODE' use32
.text$x:000094E0                 assume cs:_text$x
.text$x:000094E0                 ;org 94E0h
.text$x:000094E0 ; COMDAT (pick associative to section at 9484)
.text$x:000094E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000094E0
.text$x:000094E0 ; =============== S U B R O U T I N E =======================================
.text$x:000094E0
.text$x:000094E0
.text$x:000094E0 __unwindfunclet$??1foundInfo@@QAE@XZ$0 proc near
.text$x:000094E0                                         ; DATA XREF: .xdata$x:0000F968o
.text$x:000094E0                 mov     ecx, [ebp-10h]
.text$x:000094E3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000094E3 __unwindfunclet$??1foundInfo@@QAE@XZ$0 endp
.text$x:000094E3
.text$x:000094E8
.text$x:000094E8 ; =============== S U B R O U T I N E =======================================
.text$x:000094E8
.text$x:000094E8
.text$x:000094E8 __unwindfunclet$??1foundInfo@@QAE@XZ$1 proc near
.text$x:000094E8                                         ; DATA XREF: .xdata$x:0000F970o
.text$x:000094E8                 mov     ecx, [ebp-10h]
.text$x:000094EB                 add     ecx, 1Ch
.text$x:000094EE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000094EE __unwindfunclet$??1foundInfo@@QAE@XZ$1 endp
.text$x:000094EE
.text$x:000094F3
.text$x:000094F3 ; =============== S U B R O U T I N E =======================================
.text$x:000094F3
.text$x:000094F3
.text$x:000094F3 __ehhandler$??1foundInfo@@QAE@XZ proc near
.text$x:000094F3                                         ; DATA XREF: foundInfo::~foundInfo(void)+5o
.text$x:000094F3
.text$x:000094F3 arg_4           = dword ptr  8
.text$x:000094F3
.text$x:000094F3                 mov     edx, [esp+arg_4]
.text$x:000094F7                 lea     eax, [edx+0Ch]
.text$x:000094FA                 mov     ecx, [edx-8]
.text$x:000094FD                 xor     ecx, eax
.text$x:000094FF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009504                 mov     eax, offset __ehfuncinfo$??1foundInfo@@QAE@XZ
.text$x:00009509                 jmp     ___CxxFrameHandler3
.text$x:00009509 __ehhandler$??1foundInfo@@QAE@XZ endp
.text$x:00009509
.text$x:00009509 ; ---------------------------------------------------------------------------
.text$x:0000950E                 align 10h
.text$x:0000950E _text$x         ends
.text$x:0000950E
.text$mn:00009510 ; ===========================================================================
.text$mn:00009510
.text$mn:00009510 ; Segment type: Pure code
.text$mn:00009510 ; Segment permissions: Read/Execute
.text$mn:00009510 _text$mn        segment para public 'CODE' use32
.text$mn:00009510                 assume cs:_text$mn
.text$mn:00009510                 ;org 9510h
.text$mn:00009510 ; COMDAT (pick any)
.text$mn:00009510                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009510
.text$mn:00009510 ; =============== S U B R O U T I N E =======================================
.text$mn:00009510
.text$mn:00009510 ; Attributes: bp-based frame
.text$mn:00009510
.text$mn:00009510 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00009510                 public ??2@YAPAXIPAX@Z
.text$mn:00009510 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00009510                                         ; std::allocator<FunctionParser *>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)+2Ep ...
.text$mn:00009510
.text$mn:00009510 arg_4           = dword ptr  0Ch
.text$mn:00009510
.text$mn:00009510                 push    ebp
.text$mn:00009511                 mov     ebp, esp
.text$mn:00009513                 mov     eax, [ebp+arg_4]
.text$mn:00009516                 pop     ebp
.text$mn:00009517                 retn
.text$mn:00009517 ??2@YAPAXIPAX@Z endp
.text$mn:00009517
.text$mn:00009517 _text$mn        ends
.text$mn:00009517
.text$mn:00009518 ; ===========================================================================
.text$mn:00009518
.text$mn:00009518 ; Segment type: Pure code
.text$mn:00009518 ; Segment permissions: Read/Execute
.text$mn:00009518 _text$mn        segment para public 'CODE' use32
.text$mn:00009518                 assume cs:_text$mn
.text$mn:00009518                 ;org 9518h
.text$mn:00009518 ; COMDAT (pick any)
.text$mn:00009518                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009518
.text$mn:00009518 ; =============== S U B R O U T I N E =======================================
.text$mn:00009518
.text$mn:00009518 ; Attributes: bp-based frame
.text$mn:00009518
.text$mn:00009518 ; void __cdecl operator delete(void *)
.text$mn:00009518                 public ??3@YAXPAX0@Z
.text$mn:00009518 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00009518                                         ; __unwindfunclet$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z$0+8p ...
.text$mn:00009518                 push    ebp
.text$mn:00009519                 mov     ebp, esp
.text$mn:0000951B                 pop     ebp
.text$mn:0000951C                 retn
.text$mn:0000951C ??3@YAXPAX0@Z   endp
.text$mn:0000951C
.text$mn:0000951C ; ---------------------------------------------------------------------------
.text$mn:0000951D                 align 10h
.text$mn:0000951D _text$mn        ends
.text$mn:0000951D
.text$mn:00009520 ; ===========================================================================
.text$mn:00009520
.text$mn:00009520 ; Segment type: Pure code
.text$mn:00009520 ; Segment permissions: Read/Execute
.text$mn:00009520 _text$mn        segment para public 'CODE' use32
.text$mn:00009520                 assume cs:_text$mn
.text$mn:00009520                 ;org 9520h
.text$mn:00009520 ; COMDAT (pick any)
.text$mn:00009520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009520
.text$mn:00009520 ; =============== S U B R O U T I N E =======================================
.text$mn:00009520
.text$mn:00009520 ; Attributes: bp-based frame
.text$mn:00009520
.text$mn:00009520 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00009520                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00009520 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$mn:00009520                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+277p
.text$mn:00009520                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+36Ap ...
.text$mn:00009520
.text$mn:00009520 var_2C          = dword ptr -2Ch
.text$mn:00009520 var_28          = dword ptr -28h
.text$mn:00009520 var_24          = dword ptr -24h
.text$mn:00009520 var_20          = dword ptr -20h
.text$mn:00009520 var_1C          = dword ptr -1Ch
.text$mn:00009520 var_18          = dword ptr -18h
.text$mn:00009520 var_14          = dword ptr -14h
.text$mn:00009520 var_F           = byte ptr -0Fh
.text$mn:00009520 var_E           = byte ptr -0Eh
.text$mn:00009520 var_D           = byte ptr -0Dh
.text$mn:00009520 var_C           = dword ptr -0Ch
.text$mn:00009520 var_4           = dword ptr -4
.text$mn:00009520 arg_0           = dword ptr  8
.text$mn:00009520
.text$mn:00009520                 push    ebp
.text$mn:00009521                 mov     ebp, esp
.text$mn:00009523                 push    0FFFFFFFFh
.text$mn:00009525                 push    offset __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:0000952A                 mov     eax, large fs:0
.text$mn:00009530                 push    eax
.text$mn:00009531                 sub     esp, 20h
.text$mn:00009534                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009539                 xor     eax, ebp
.text$mn:0000953B                 push    eax
.text$mn:0000953C                 lea     eax, [ebp+var_C]
.text$mn:0000953F                 mov     large fs:0, eax
.text$mn:00009545                 mov     [ebp+var_14], ecx
.text$mn:00009548                 mov     eax, [ebp+var_14]
.text$mn:0000954B                 cmp     eax, [ebp+arg_0]
.text$mn:0000954E                 jz      loc_9607
.text$mn:00009554                 push    0
.text$mn:00009556                 push    1
.text$mn:00009558                 mov     ecx, [ebp+var_14]
.text$mn:0000955B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00009560                 xor     ecx, ecx
.text$mn:00009562                 jz      short loc_9579
.text$mn:00009564                 lea     edx, [ebp+var_D]
.text$mn:00009567                 push    edx
.text$mn:00009568                 mov     ecx, [ebp+arg_0]
.text$mn:0000956B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009570                 push    eax
.text$mn:00009571                 mov     ecx, [ebp+var_14]
.text$mn:00009574                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00009579
.text$mn:00009579 loc_9579:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+42j
.text$mn:00009579                 lea     eax, [ebp+var_E]
.text$mn:0000957C                 push    eax
.text$mn:0000957D                 mov     ecx, [ebp+arg_0]
.text$mn:00009580                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009585                 push    eax
.text$mn:00009586                 lea     ecx, [ebp+var_F]
.text$mn:00009589                 push    ecx
.text$mn:0000958A                 mov     ecx, [ebp+var_14]
.text$mn:0000958D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009592                 push    eax
.text$mn:00009593                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00009598                 add     esp, 8
.text$mn:0000959B                 movzx   edx, al
.text$mn:0000959E                 test    edx, edx
.text$mn:000095A0                 jz      short loc_95F2
.text$mn:000095A2                 sub     esp, 0Ch
.text$mn:000095A5                 mov     eax, esp
.text$mn:000095A7                 mov     [ebp+var_20], esp
.text$mn:000095AA                 push    eax
.text$mn:000095AB                 mov     ecx, [ebp+arg_0]
.text$mn:000095AE                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:000095B3                 mov     [ebp+var_18], eax
.text$mn:000095B6                 mov     ecx, [ebp+var_18]
.text$mn:000095B9                 mov     [ebp+var_24], ecx
.text$mn:000095BC                 mov     [ebp+var_4], 0
.text$mn:000095C3                 sub     esp, 0Ch
.text$mn:000095C6                 mov     edx, esp
.text$mn:000095C8                 mov     [ebp+var_28], esp
.text$mn:000095CB                 push    edx
.text$mn:000095CC                 mov     ecx, [ebp+arg_0]
.text$mn:000095CF                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:000095D4                 mov     [ebp+var_1C], eax
.text$mn:000095D7                 mov     eax, [ebp+var_1C]
.text$mn:000095DA                 mov     [ebp+var_2C], eax
.text$mn:000095DD                 mov     byte ptr [ebp+var_4], 1
.text$mn:000095E1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000095E8                 mov     ecx, [ebp+var_14]
.text$mn:000095EB                 call    ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:000095F0                 jmp     short loc_9607
.text$mn:000095F2 ; ---------------------------------------------------------------------------
.text$mn:000095F2
.text$mn:000095F2 loc_95F2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+80j
.text$mn:000095F2                 mov     ecx, [ebp+arg_0]
.text$mn:000095F5                 push    ecx
.text$mn:000095F6                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000095FB                 add     esp, 4
.text$mn:000095FE                 push    eax
.text$mn:000095FF                 mov     ecx, [ebp+var_14]
.text$mn:00009602                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00009607
.text$mn:00009607 loc_9607:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ej
.text$mn:00009607                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D0j
.text$mn:00009607                 mov     eax, [ebp+var_14]
.text$mn:0000960A                 mov     ecx, [ebp+var_C]
.text$mn:0000960D                 mov     large fs:0, ecx
.text$mn:00009614                 pop     ecx
.text$mn:00009615                 mov     esp, ebp
.text$mn:00009617                 pop     ebp
.text$mn:00009618                 retn    4
.text$mn:00009618 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$mn:00009618
.text$mn:00009618 ; ---------------------------------------------------------------------------
.text$mn:0000961B                 align 4
.text$mn:0000961B _text$mn        ends
.text$mn:0000961B
.text$x:0000961C ; ===========================================================================
.text$x:0000961C
.text$x:0000961C ; Segment type: Pure code
.text$x:0000961C ; Segment permissions: Read/Execute
.text$x:0000961C _text$x         segment para public 'CODE' use32
.text$x:0000961C                 assume cs:_text$x
.text$x:0000961C                 ;org 961Ch
.text$x:0000961C ; COMDAT (pick associative to section at 9520)
.text$x:0000961C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000961C
.text$x:0000961C ; =============== S U B R O U T I N E =======================================
.text$x:0000961C
.text$x:0000961C
.text$x:0000961C __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 proc near
.text$x:0000961C                                         ; DATA XREF: .xdata$x:0000F3A4o
.text$x:0000961C                 mov     ecx, [ebp-20h]
.text$x:0000961F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000961F __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 endp
.text$x:0000961F
.text$x:00009624
.text$x:00009624 ; =============== S U B R O U T I N E =======================================
.text$x:00009624
.text$x:00009624
.text$x:00009624 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 proc near
.text$x:00009624                                         ; DATA XREF: .xdata$x:0000F3ACo
.text$x:00009624                 mov     ecx, [ebp-28h]
.text$x:00009627                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009627 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 endp
.text$x:00009627
.text$x:0000962C
.text$x:0000962C ; =============== S U B R O U T I N E =======================================
.text$x:0000962C
.text$x:0000962C
.text$x:0000962C __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$x:0000962C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:0000962C
.text$x:0000962C arg_4           = dword ptr  8
.text$x:0000962C
.text$x:0000962C                 mov     edx, [esp+arg_4]
.text$x:00009630                 lea     eax, [edx+0Ch]
.text$x:00009633                 mov     ecx, [edx-24h]
.text$x:00009636                 xor     ecx, eax
.text$x:00009638                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000963D                 mov     eax, offset __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$x:00009642                 jmp     ___CxxFrameHandler3
.text$x:00009642 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$x:00009642
.text$x:00009642 ; ---------------------------------------------------------------------------
.text$x:00009647                 align 4
.text$x:00009647 _text$x         ends
.text$x:00009647
.text$mn:00009648 ; ===========================================================================
.text$mn:00009648
.text$mn:00009648 ; Segment type: Pure code
.text$mn:00009648 ; Segment permissions: Read/Execute
.text$mn:00009648 _text$mn        segment para public 'CODE' use32
.text$mn:00009648                 assume cs:_text$mn
.text$mn:00009648                 ;org 9648h
.text$mn:00009648 ; COMDAT (pick any)
.text$mn:00009648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009648
.text$mn:00009648 ; =============== S U B R O U T I N E =======================================
.text$mn:00009648
.text$mn:00009648 ; Attributes: bp-based frame
.text$mn:00009648
.text$mn:00009648 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00009648                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00009648 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00009648                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+2B9p
.text$mn:00009648                                         ; TiXmlDocument::TiXmlDocument(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+64p
.text$mn:00009648
.text$mn:00009648 var_8           = dword ptr -8
.text$mn:00009648 var_3           = byte ptr -3
.text$mn:00009648 var_2           = byte ptr -2
.text$mn:00009648 var_1           = byte ptr -1
.text$mn:00009648 arg_0           = dword ptr  8
.text$mn:00009648
.text$mn:00009648                 push    ebp
.text$mn:00009649                 mov     ebp, esp
.text$mn:0000964B                 sub     esp, 8
.text$mn:0000964E                 mov     [ebp+var_8], ecx
.text$mn:00009651                 mov     eax, [ebp+var_8]
.text$mn:00009654                 cmp     eax, [ebp+arg_0]
.text$mn:00009657                 jz      short loc_96B3
.text$mn:00009659                 lea     ecx, [ebp+var_1]
.text$mn:0000965C                 push    ecx
.text$mn:0000965D                 mov     ecx, [ebp+arg_0]
.text$mn:00009660                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009665                 push    eax
.text$mn:00009666                 lea     edx, [ebp+var_2]
.text$mn:00009669                 push    edx
.text$mn:0000966A                 mov     ecx, [ebp+var_8]
.text$mn:0000966D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00009672                 push    eax
.text$mn:00009673                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00009678                 add     esp, 8
.text$mn:0000967B                 movzx   eax, al
.text$mn:0000967E                 test    eax, eax
.text$mn:00009680                 jz      short loc_96A7
.text$mn:00009682                 xor     ecx, ecx
.text$mn:00009684                 jz      short loc_96A7
.text$mn:00009686                 push    0
.text$mn:00009688                 push    1
.text$mn:0000968A                 mov     ecx, [ebp+var_8]
.text$mn:0000968D                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00009692                 lea     edx, [ebp+var_3]
.text$mn:00009695                 push    edx
.text$mn:00009696                 mov     ecx, [ebp+arg_0]
.text$mn:00009699                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000969E                 push    eax
.text$mn:0000969F                 mov     ecx, [ebp+var_8]
.text$mn:000096A2                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:000096A7
.text$mn:000096A7 loc_96A7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+38j
.text$mn:000096A7                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Cj
.text$mn:000096A7                 mov     eax, [ebp+arg_0]
.text$mn:000096AA                 push    eax
.text$mn:000096AB                 mov     ecx, [ebp+var_8]
.text$mn:000096AE                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000096B3
.text$mn:000096B3 loc_96B3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Fj
.text$mn:000096B3                 mov     eax, [ebp+var_8]
.text$mn:000096B6                 mov     esp, ebp
.text$mn:000096B8                 pop     ebp
.text$mn:000096B9                 retn    4
.text$mn:000096B9 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:000096B9
.text$mn:000096B9 _text$mn        ends
.text$mn:000096B9
.text$mn:000096BC ; ===========================================================================
.text$mn:000096BC
.text$mn:000096BC ; Segment type: Pure code
.text$mn:000096BC ; Segment permissions: Read/Execute
.text$mn:000096BC _text$mn        segment para public 'CODE' use32
.text$mn:000096BC                 assume cs:_text$mn
.text$mn:000096BC                 ;org 96BCh
.text$mn:000096BC ; COMDAT (pick any)
.text$mn:000096BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096BC
.text$mn:000096BC ; =============== S U B R O U T I N E =======================================
.text$mn:000096BC
.text$mn:000096BC ; Attributes: bp-based frame
.text$mn:000096BC
.text$mn:000096BC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:000096BC                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:000096BC ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:000096BC                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+1C7p
.text$mn:000096BC                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+18Cp ...
.text$mn:000096BC
.text$mn:000096BC var_4           = dword ptr -4
.text$mn:000096BC Str             = dword ptr  8
.text$mn:000096BC
.text$mn:000096BC                 push    ebp
.text$mn:000096BD                 mov     ebp, esp
.text$mn:000096BF                 push    ecx
.text$mn:000096C0                 mov     [ebp+var_4], ecx
.text$mn:000096C3                 mov     eax, [ebp+Str]
.text$mn:000096C6                 push    eax             ; Str
.text$mn:000096C7                 mov     ecx, [ebp+var_4]
.text$mn:000096CA                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:000096CF                 mov     esp, ebp
.text$mn:000096D1                 pop     ebp
.text$mn:000096D2                 retn    4
.text$mn:000096D2 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:000096D2
.text$mn:000096D2 ; ---------------------------------------------------------------------------
.text$mn:000096D5                 align 4
.text$mn:000096D5 _text$mn        ends
.text$mn:000096D5
.text$mn:000096D8 ; ===========================================================================
.text$mn:000096D8
.text$mn:000096D8 ; Segment type: Pure code
.text$mn:000096D8 ; Segment permissions: Read/Execute
.text$mn:000096D8 _text$mn        segment para public 'CODE' use32
.text$mn:000096D8                 assume cs:_text$mn
.text$mn:000096D8                 ;org 96D8h
.text$mn:000096D8 ; COMDAT (pick any)
.text$mn:000096D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000096D8
.text$mn:000096D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000096D8
.text$mn:000096D8 ; Attributes: bp-based frame
.text$mn:000096D8
.text$mn:000096D8 ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:000096D8                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:000096D8 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:000096D8                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:000096D8
.text$mn:000096D8 var_14          = byte ptr -14h
.text$mn:000096D8 var_10          = dword ptr -10h
.text$mn:000096D8 var_C           = dword ptr -0Ch
.text$mn:000096D8 var_4           = dword ptr -4
.text$mn:000096D8 arg_0           = dword ptr  8
.text$mn:000096D8
.text$mn:000096D8                 push    ebp
.text$mn:000096D9                 mov     ebp, esp
.text$mn:000096DB                 push    0FFFFFFFFh
.text$mn:000096DD                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:000096E2                 mov     eax, large fs:0
.text$mn:000096E8                 push    eax
.text$mn:000096E9                 sub     esp, 8
.text$mn:000096EC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000096F1                 xor     eax, ebp
.text$mn:000096F3                 push    eax
.text$mn:000096F4                 lea     eax, [ebp+var_C]
.text$mn:000096F7                 mov     large fs:0, eax
.text$mn:000096FD                 mov     [ebp+var_10], ecx
.text$mn:00009700                 mov     eax, [ebp+var_10]
.text$mn:00009703                 mov     ecx, [ebp+arg_0]
.text$mn:00009706                 mov     edx, [eax]
.text$mn:00009708                 cmp     edx, [ecx]
.text$mn:0000970A                 jnz     short loc_970E
.text$mn:0000970C                 jmp     short loc_9750
.text$mn:0000970E ; ---------------------------------------------------------------------------
.text$mn:0000970E
.text$mn:0000970E loc_970E:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:0000970E                 mov     eax, [ebp+arg_0]
.text$mn:00009711                 cmp     dword ptr [eax], 0
.text$mn:00009714                 jz      short loc_9728
.text$mn:00009716                 mov     ecx, [ebp+arg_0]
.text$mn:00009719                 mov     edx, [ecx]
.text$mn:0000971B                 mov     eax, [edx]
.text$mn:0000971D                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000971E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00009721                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00009726                 jmp     short loc_9750
.text$mn:00009728 ; ---------------------------------------------------------------------------
.text$mn:00009728
.text$mn:00009728 loc_9728:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:00009728                 push    3               ; int
.text$mn:0000972A                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000972D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00009732                 mov     [ebp+var_4], 0
.text$mn:00009739                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000973C                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00009741                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009748                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000974B                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00009750
.text$mn:00009750 loc_9750:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:00009750                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:00009750                 mov     eax, [ebp+var_10]
.text$mn:00009753                 mov     ecx, [ebp+var_C]
.text$mn:00009756                 mov     large fs:0, ecx
.text$mn:0000975D                 pop     ecx
.text$mn:0000975E                 mov     esp, ebp
.text$mn:00009760                 pop     ebp
.text$mn:00009761                 retn    4
.text$mn:00009761 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:00009761
.text$mn:00009761 _text$mn        ends
.text$mn:00009761
.text$x:00009764 ; ===========================================================================
.text$x:00009764
.text$x:00009764 ; Segment type: Pure code
.text$x:00009764 ; Segment permissions: Read/Execute
.text$x:00009764 _text$x         segment para public 'CODE' use32
.text$x:00009764                 assume cs:_text$x
.text$x:00009764                 ;org 9764h
.text$x:00009764 ; COMDAT (pick associative to section at 96D8)
.text$x:00009764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009764
.text$x:00009764 ; =============== S U B R O U T I N E =======================================
.text$x:00009764
.text$x:00009764
.text$x:00009764 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:00009764                                         ; DATA XREF: .xdata$x:0000EE98o
.text$x:00009764                 lea     ecx, [ebp-14h]  ; this
.text$x:00009767                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00009767 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:00009767
.text$x:0000976C
.text$x:0000976C ; =============== S U B R O U T I N E =======================================
.text$x:0000976C
.text$x:0000976C
.text$x:0000976C __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:0000976C                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:0000976C
.text$x:0000976C arg_4           = dword ptr  8
.text$x:0000976C
.text$x:0000976C                 mov     edx, [esp+arg_4]
.text$x:00009770                 lea     eax, [edx+0Ch]
.text$x:00009773                 mov     ecx, [edx-0Ch]
.text$x:00009776                 xor     ecx, eax
.text$x:00009778                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000977D                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:00009782                 jmp     ___CxxFrameHandler3
.text$x:00009782 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:00009782
.text$x:00009782 ; ---------------------------------------------------------------------------
.text$x:00009787                 align 4
.text$x:00009787 _text$x         ends
.text$x:00009787
.text$mn:00009788 ; ===========================================================================
.text$mn:00009788
.text$mn:00009788 ; Segment type: Pure code
.text$mn:00009788 ; Segment permissions: Read/Execute
.text$mn:00009788 _text$mn        segment para public 'CODE' use32
.text$mn:00009788                 assume cs:_text$mn
.text$mn:00009788                 ;org 9788h
.text$mn:00009788 ; COMDAT (pick any)
.text$mn:00009788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009788
.text$mn:00009788 ; =============== S U B R O U T I N E =======================================
.text$mn:00009788
.text$mn:00009788 ; Attributes: bp-based frame
.text$mn:00009788
.text$mn:00009788 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_Iterator_base12 *)
.text$mn:00009788                 public ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00009788 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00009788                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39p
.text$mn:00009788
.text$mn:00009788 var_8           = dword ptr -8
.text$mn:00009788 var_4           = dword ptr -4
.text$mn:00009788 arg_0           = dword ptr  8
.text$mn:00009788
.text$mn:00009788                 push    ebp
.text$mn:00009789                 mov     ebp, esp
.text$mn:0000978B                 sub     esp, 8
.text$mn:0000978E                 mov     [ebp+var_4], ecx
.text$mn:00009791                 mov     eax, [ebp+arg_0]
.text$mn:00009794                 push    eax             ; std::_Iterator_base12 *
.text$mn:00009795                 mov     ecx, [ebp+var_4]
.text$mn:00009798                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000979D                 mov     ecx, [ebp+var_4]
.text$mn:000097A0                 mov     edx, [ebp+arg_0]
.text$mn:000097A3                 mov     eax, [ecx+8]
.text$mn:000097A6                 cmp     eax, [edx+8]
.text$mn:000097A9                 jnz     short loc_97B4
.text$mn:000097AB                 mov     [ebp+var_8], 1
.text$mn:000097B2                 jmp     short loc_97BB
.text$mn:000097B4 ; ---------------------------------------------------------------------------
.text$mn:000097B4
.text$mn:000097B4 loc_97B4:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+21j
.text$mn:000097B4                 mov     [ebp+var_8], 0
.text$mn:000097BB
.text$mn:000097BB loc_97BB:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Aj
.text$mn:000097BB                 mov     al, byte ptr [ebp+var_8]
.text$mn:000097BE                 mov     esp, ebp
.text$mn:000097C0                 pop     ebp
.text$mn:000097C1                 retn    4
.text$mn:000097C1 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:000097C1
.text$mn:000097C1 _text$mn        ends
.text$mn:000097C1
.text$mn:000097C4 ; ===========================================================================
.text$mn:000097C4
.text$mn:000097C4 ; Segment type: Pure code
.text$mn:000097C4 ; Segment permissions: Read/Execute
.text$mn:000097C4 _text$mn        segment para public 'CODE' use32
.text$mn:000097C4                 assume cs:_text$mn
.text$mn:000097C4                 ;org 97C4h
.text$mn:000097C4 ; COMDAT (pick any)
.text$mn:000097C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000097C4
.text$mn:000097C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000097C4
.text$mn:000097C4 ; Attributes: bp-based frame
.text$mn:000097C4
.text$mn:000097C4 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:000097C4                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:000097C4 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:000097C4                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:000097C4                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:000097C4
.text$mn:000097C4 var_8           = dword ptr -8
.text$mn:000097C4 var_4           = dword ptr -4
.text$mn:000097C4 arg_0           = dword ptr  8
.text$mn:000097C4
.text$mn:000097C4                 push    ebp
.text$mn:000097C5                 mov     ebp, esp
.text$mn:000097C7                 sub     esp, 8
.text$mn:000097CA                 mov     [ebp+var_8], ecx
.text$mn:000097CD                 mov     eax, [ebp+var_8]
.text$mn:000097D0                 cmp     eax, [ebp+arg_0]
.text$mn:000097D3                 jnz     short loc_97DE
.text$mn:000097D5                 mov     [ebp+var_4], 1
.text$mn:000097DC                 jmp     short loc_97E5
.text$mn:000097DE ; ---------------------------------------------------------------------------
.text$mn:000097DE
.text$mn:000097DE loc_97DE:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:000097DE                 mov     [ebp+var_4], 0
.text$mn:000097E5
.text$mn:000097E5 loc_97E5:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:000097E5                 mov     al, byte ptr [ebp+var_4]
.text$mn:000097E8                 mov     esp, ebp
.text$mn:000097EA                 pop     ebp
.text$mn:000097EB                 retn    4
.text$mn:000097EB ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:000097EB
.text$mn:000097EB ; ---------------------------------------------------------------------------
.text$mn:000097EE                 align 10h
.text$mn:000097EE _text$mn        ends
.text$mn:000097EE
.text$mn:000097F0 ; ===========================================================================
.text$mn:000097F0
.text$mn:000097F0 ; Segment type: Pure code
.text$mn:000097F0 ; Segment permissions: Read/Execute
.text$mn:000097F0 _text$mn        segment para public 'CODE' use32
.text$mn:000097F0                 assume cs:_text$mn
.text$mn:000097F0                 ;org 97F0h
.text$mn:000097F0 ; COMDAT (pick any)
.text$mn:000097F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000097F0
.text$mn:000097F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000097F0
.text$mn:000097F0 ; Attributes: bp-based frame
.text$mn:000097F0
.text$mn:000097F0 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:000097F0                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:000097F0 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:000097F0                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:000097F0
.text$mn:000097F0 var_8           = dword ptr -8
.text$mn:000097F0 var_4           = dword ptr -4
.text$mn:000097F0 arg_0           = dword ptr  8
.text$mn:000097F0
.text$mn:000097F0                 push    ebp
.text$mn:000097F1                 mov     ebp, esp
.text$mn:000097F3                 sub     esp, 8
.text$mn:000097F6                 push    esi
.text$mn:000097F7                 mov     [ebp+var_4], ecx
.text$mn:000097FA                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000097FD                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00009802                 push    eax
.text$mn:00009803                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009806                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:0000980B                 mov     ecx, eax
.text$mn:0000980D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00009812                 movzx   eax, al
.text$mn:00009815                 test    eax, eax
.text$mn:00009817                 jz      short loc_9838
.text$mn:00009819                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000981C                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00009821                 mov     esi, eax
.text$mn:00009823                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00009826                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:0000982B                 cmp     esi, eax
.text$mn:0000982D                 jnz     short loc_9838
.text$mn:0000982F                 mov     [ebp+var_8], 1
.text$mn:00009836                 jmp     short loc_983F
.text$mn:00009838 ; ---------------------------------------------------------------------------
.text$mn:00009838
.text$mn:00009838 loc_9838:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00009838                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00009838                 mov     [ebp+var_8], 0
.text$mn:0000983F
.text$mn:0000983F loc_983F:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:0000983F                 mov     al, byte ptr [ebp+var_8]
.text$mn:00009842                 pop     esi
.text$mn:00009843                 mov     esp, ebp
.text$mn:00009845                 pop     ebp
.text$mn:00009846                 retn    4
.text$mn:00009846 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00009846
.text$mn:00009846 ; ---------------------------------------------------------------------------
.text$mn:00009849                 align 4
.text$mn:00009849 _text$mn        ends
.text$mn:00009849
.text$mn:0000984C ; ===========================================================================
.text$mn:0000984C
.text$mn:0000984C ; Segment type: Pure code
.text$mn:0000984C ; Segment permissions: Read/Execute
.text$mn:0000984C _text$mn        segment para public 'CODE' use32
.text$mn:0000984C                 assume cs:_text$mn
.text$mn:0000984C                 ;org 984Ch
.text$mn:0000984C ; COMDAT (pick any)
.text$mn:0000984C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000984C
.text$mn:0000984C ; =============== S U B R O U T I N E =======================================
.text$mn:0000984C
.text$mn:0000984C ; Attributes: bp-based frame
.text$mn:0000984C
.text$mn:0000984C ; public: class FunctionParser * & __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::operator[](unsigned int)
.text$mn:0000984C                 public ??A?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEAAPAVFunctionParser@@I@Z
.text$mn:0000984C ??A?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEAAPAVFunctionParser@@I@Z proc near
.text$mn:0000984C                                         ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+61p
.text$mn:0000984C                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+C0Cp ...
.text$mn:0000984C
.text$mn:0000984C var_4           = dword ptr -4
.text$mn:0000984C arg_0           = dword ptr  8
.text$mn:0000984C
.text$mn:0000984C                 push    ebp
.text$mn:0000984D                 mov     ebp, esp
.text$mn:0000984F                 push    ecx
.text$mn:00009850                 mov     [ebp+var_4], ecx
.text$mn:00009853                 mov     ecx, [ebp+var_4]
.text$mn:00009856                 call    ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::size(void)
.text$mn:0000985B                 cmp     eax, [ebp+arg_0]
.text$mn:0000985E                 ja      short loc_98C8
.text$mn:00009860                 push    4B1h            ; unsigned int
.text$mn:00009865                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000986A                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:0000986F                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009874                 add     esp, 0Ch
.text$mn:00009877                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000987C                 test    eax, eax
.text$mn:0000987E                 jz      short loc_9884
.text$mn:00009880                 xor     ecx, ecx
.text$mn:00009882                 jnz     short loc_98AA
.text$mn:00009884
.text$mn:00009884 loc_9884:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+32j
.text$mn:00009884                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009889                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000988E                 push    0
.text$mn:00009890                 push    4B2h
.text$mn:00009895                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000989A                 push    2
.text$mn:0000989C                 call    __CrtDbgReportW
.text$mn:000098A1                 add     esp, 18h
.text$mn:000098A4                 cmp     eax, 1
.text$mn:000098A7                 jnz     short loc_98AA
.text$mn:000098A9                 int     3               ; Trap to Debugger
.text$mn:000098AA
.text$mn:000098AA loc_98AA:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+36j
.text$mn:000098AA                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+5Bj
.text$mn:000098AA                 push    0
.text$mn:000098AC                 push    4B2h
.text$mn:000098B1                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000098B6                 push    offset ??_C@_1LO@NOICGNAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAP?$AAa?$AAr?$AAs?$AAe?$AAr@ ; "std::vector<class FunctionParser *,clas"...
.text$mn:000098BB                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:000098C0                 call    __invalid_parameter
.text$mn:000098C5                 add     esp, 14h
.text$mn:000098C8
.text$mn:000098C8 loc_98C8:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+12j
.text$mn:000098C8                 mov     eax, [ebp+var_4]
.text$mn:000098CB                 mov     ecx, [eax+4]
.text$mn:000098CE                 mov     edx, [ebp+arg_0]
.text$mn:000098D1                 lea     eax, [ecx+edx*4]
.text$mn:000098D4                 mov     esp, ebp
.text$mn:000098D6                 pop     ebp
.text$mn:000098D7                 retn    4
.text$mn:000098D7 ??A?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEAAPAVFunctionParser@@I@Z endp
.text$mn:000098D7
.text$mn:000098D7 ; ---------------------------------------------------------------------------
.text$mn:000098DA                 align 4
.text$mn:000098DA _text$mn        ends
.text$mn:000098DA
.text$mn:000098DC ; ===========================================================================
.text$mn:000098DC
.text$mn:000098DC ; Segment type: Pure code
.text$mn:000098DC ; Segment permissions: Read/Execute
.text$mn:000098DC _text$mn        segment para public 'CODE' use32
.text$mn:000098DC                 assume cs:_text$mn
.text$mn:000098DC                 ;org 98DCh
.text$mn:000098DC ; COMDAT (pick any)
.text$mn:000098DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000098DC
.text$mn:000098DC ; =============== S U B R O U T I N E =======================================
.text$mn:000098DC
.text$mn:000098DC ; Attributes: bp-based frame
.text$mn:000098DC
.text$mn:000098DC ; public: struct std::pair<int, int> & __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::operator[](unsigned int)
.text$mn:000098DC                 public ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z
.text$mn:000098DC ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z proc near
.text$mn:000098DC                                         ; CODE XREF: FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+38p
.text$mn:000098DC                                         ; FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+49p ...
.text$mn:000098DC
.text$mn:000098DC var_4           = dword ptr -4
.text$mn:000098DC arg_0           = dword ptr  8
.text$mn:000098DC
.text$mn:000098DC                 push    ebp
.text$mn:000098DD                 mov     ebp, esp
.text$mn:000098DF                 push    ecx
.text$mn:000098E0                 mov     [ebp+var_4], ecx
.text$mn:000098E3                 mov     ecx, [ebp+var_4]
.text$mn:000098E6                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:000098EB                 cmp     eax, [ebp+arg_0]
.text$mn:000098EE                 ja      short loc_9958
.text$mn:000098F0                 push    4B1h            ; unsigned int
.text$mn:000098F5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000098FA                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:000098FF                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009904                 add     esp, 0Ch
.text$mn:00009907                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000990C                 test    eax, eax
.text$mn:0000990E                 jz      short loc_9914
.text$mn:00009910                 xor     ecx, ecx
.text$mn:00009912                 jnz     short loc_993A
.text$mn:00009914
.text$mn:00009914 loc_9914:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+32j
.text$mn:00009914                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009919                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000991E                 push    0
.text$mn:00009920                 push    4B2h
.text$mn:00009925                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000992A                 push    2
.text$mn:0000992C                 call    __CrtDbgReportW
.text$mn:00009931                 add     esp, 18h
.text$mn:00009934                 cmp     eax, 1
.text$mn:00009937                 jnz     short loc_993A
.text$mn:00009939                 int     3               ; Trap to Debugger
.text$mn:0000993A
.text$mn:0000993A loc_993A:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+36j
.text$mn:0000993A                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+5Bj
.text$mn:0000993A                 push    0
.text$mn:0000993C                 push    4B2h
.text$mn:00009941                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009946                 push    offset ??_C@_1MM@CFLCIPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAi?$AAn?$AAt@ ; "std::vector<struct std::pair<int,int>,c"...
.text$mn:0000994B                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00009950                 call    __invalid_parameter
.text$mn:00009955                 add     esp, 14h
.text$mn:00009958
.text$mn:00009958 loc_9958:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+12j
.text$mn:00009958                 mov     eax, [ebp+var_4]
.text$mn:0000995B                 mov     ecx, [eax+4]
.text$mn:0000995E                 mov     edx, [ebp+arg_0]
.text$mn:00009961                 lea     eax, [ecx+edx*8]
.text$mn:00009964                 mov     esp, ebp
.text$mn:00009966                 pop     ebp
.text$mn:00009967                 retn    4
.text$mn:00009967 ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEAAU?$pair@HH@1@I@Z endp
.text$mn:00009967
.text$mn:00009967 ; ---------------------------------------------------------------------------
.text$mn:0000996A                 align 4
.text$mn:0000996A _text$mn        ends
.text$mn:0000996A
.text$mn:0000996C ; ===========================================================================
.text$mn:0000996C
.text$mn:0000996C ; Segment type: Pure code
.text$mn:0000996C ; Segment permissions: Read/Execute
.text$mn:0000996C _text$mn        segment para public 'CODE' use32
.text$mn:0000996C                 assume cs:_text$mn
.text$mn:0000996C                 ;org 996Ch
.text$mn:0000996C ; COMDAT (pick any)
.text$mn:0000996C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000996C
.text$mn:0000996C ; =============== S U B R O U T I N E =======================================
.text$mn:0000996C
.text$mn:0000996C ; Attributes: bp-based frame
.text$mn:0000996C
.text$mn:0000996C ; public: struct std::pair<int, int> const & __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::operator[](unsigned int)const
.text$mn:0000996C                 public ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEABU?$pair@HH@1@I@Z
.text$mn:0000996C ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEABU?$pair@HH@1@I@Z proc near
.text$mn:0000996C                                         ; CODE XREF: FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)+35p
.text$mn:0000996C                                         ; FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)+48p
.text$mn:0000996C
.text$mn:0000996C var_4           = dword ptr -4
.text$mn:0000996C arg_0           = dword ptr  8
.text$mn:0000996C
.text$mn:0000996C                 push    ebp
.text$mn:0000996D                 mov     ebp, esp
.text$mn:0000996F                 push    ecx
.text$mn:00009970                 mov     [ebp+var_4], ecx
.text$mn:00009973                 mov     ecx, [ebp+var_4]
.text$mn:00009976                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:0000997B                 cmp     eax, [ebp+arg_0]
.text$mn:0000997E                 ja      short loc_99E8
.text$mn:00009980                 push    4A1h            ; unsigned int
.text$mn:00009985                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000998A                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:0000998F                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009994                 add     esp, 0Ch
.text$mn:00009997                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000999C                 test    eax, eax
.text$mn:0000999E                 jz      short loc_99A4
.text$mn:000099A0                 xor     ecx, ecx
.text$mn:000099A2                 jnz     short loc_99CA
.text$mn:000099A4
.text$mn:000099A4 loc_99A4:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+32j
.text$mn:000099A4                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:000099A9                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000099AE                 push    0
.text$mn:000099B0                 push    4A2h
.text$mn:000099B5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000099BA                 push    2
.text$mn:000099BC                 call    __CrtDbgReportW
.text$mn:000099C1                 add     esp, 18h
.text$mn:000099C4                 cmp     eax, 1
.text$mn:000099C7                 jnz     short loc_99CA
.text$mn:000099C9                 int     3               ; Trap to Debugger
.text$mn:000099CA
.text$mn:000099CA loc_99CA:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+36j
.text$mn:000099CA                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+5Bj
.text$mn:000099CA                 push    0
.text$mn:000099CC                 push    4A2h
.text$mn:000099D1                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000099D6                 push    offset ??_C@_1MM@CFLCIPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAi?$AAn?$AAt@ ; "std::vector<struct std::pair<int,int>,c"...
.text$mn:000099DB                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:000099E0                 call    __invalid_parameter
.text$mn:000099E5                 add     esp, 14h
.text$mn:000099E8
.text$mn:000099E8 loc_99E8:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+12j
.text$mn:000099E8                 mov     eax, [ebp+var_4]
.text$mn:000099EB                 mov     ecx, [eax+4]
.text$mn:000099EE                 mov     edx, [ebp+arg_0]
.text$mn:000099F1                 lea     eax, [ecx+edx*8]
.text$mn:000099F4                 mov     esp, ebp
.text$mn:000099F6                 pop     ebp
.text$mn:000099F7                 retn    4
.text$mn:000099F7 ??A?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEABU?$pair@HH@1@I@Z endp
.text$mn:000099F7
.text$mn:000099F7 ; ---------------------------------------------------------------------------
.text$mn:000099FA                 align 4
.text$mn:000099FA _text$mn        ends
.text$mn:000099FA
.text$mn:000099FC ; ===========================================================================
.text$mn:000099FC
.text$mn:000099FC ; Segment type: Pure code
.text$mn:000099FC ; Segment permissions: Read/Execute
.text$mn:000099FC _text$mn        segment para public 'CODE' use32
.text$mn:000099FC                 assume cs:_text$mn
.text$mn:000099FC                 ;org 99FCh
.text$mn:000099FC ; COMDAT (pick any)
.text$mn:000099FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099FC
.text$mn:000099FC ; =============== S U B R O U T I N E =======================================
.text$mn:000099FC
.text$mn:000099FC ; Attributes: bp-based frame
.text$mn:000099FC
.text$mn:000099FC ; public: struct AssociationInfo & __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::operator[](unsigned int)
.text$mn:000099FC                 public ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z
.text$mn:000099FC ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z proc near
.text$mn:000099FC                                         ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+E7p
.text$mn:000099FC                                         ; FunctionParsersManager::getParser(AssociationInfo const &)+101p ...
.text$mn:000099FC
.text$mn:000099FC var_4           = dword ptr -4
.text$mn:000099FC arg_0           = dword ptr  8
.text$mn:000099FC
.text$mn:000099FC                 push    ebp
.text$mn:000099FD                 mov     ebp, esp
.text$mn:000099FF                 push    ecx
.text$mn:00009A00                 mov     [ebp+var_4], ecx
.text$mn:00009A03                 mov     ecx, [ebp+var_4]
.text$mn:00009A06                 call    ?size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::size(void)
.text$mn:00009A0B                 cmp     eax, [ebp+arg_0]
.text$mn:00009A0E                 ja      short loc_9A78
.text$mn:00009A10                 push    4B1h            ; unsigned int
.text$mn:00009A15                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009A1A                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00009A1F                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009A24                 add     esp, 0Ch
.text$mn:00009A27                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00009A2C                 test    eax, eax
.text$mn:00009A2E                 jz      short loc_9A34
.text$mn:00009A30                 xor     ecx, ecx
.text$mn:00009A32                 jnz     short loc_9A5A
.text$mn:00009A34
.text$mn:00009A34 loc_9A34:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)+32j
.text$mn:00009A34                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009A39                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00009A3E                 push    0
.text$mn:00009A40                 push    4B2h
.text$mn:00009A45                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009A4A                 push    2
.text$mn:00009A4C                 call    __CrtDbgReportW
.text$mn:00009A51                 add     esp, 18h
.text$mn:00009A54                 cmp     eax, 1
.text$mn:00009A57                 jnz     short loc_9A5A
.text$mn:00009A59                 int     3               ; Trap to Debugger
.text$mn:00009A5A
.text$mn:00009A5A loc_9A5A:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)+36j
.text$mn:00009A5A                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)+5Bj
.text$mn:00009A5A                 push    0
.text$mn:00009A5C                 push    4B2h
.text$mn:00009A61                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009A66                 push    offset ??_C@_1LO@IDGCAAML@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAA?$AAs?$AAs?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AAI?$AAn@ ; "std::vector<struct AssociationInfo,clas"...
.text$mn:00009A6B                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00009A70                 call    __invalid_parameter
.text$mn:00009A75                 add     esp, 14h
.text$mn:00009A78
.text$mn:00009A78 loc_9A78:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)+12j
.text$mn:00009A78                 mov     eax, [ebp+arg_0]
.text$mn:00009A7B                 shl     eax, 6
.text$mn:00009A7E                 mov     ecx, [ebp+var_4]
.text$mn:00009A81                 add     eax, [ecx+4]
.text$mn:00009A84                 mov     esp, ebp
.text$mn:00009A86                 pop     ebp
.text$mn:00009A87                 retn    4
.text$mn:00009A87 ??A?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEAAUAssociationInfo@@I@Z endp
.text$mn:00009A87
.text$mn:00009A87 ; ---------------------------------------------------------------------------
.text$mn:00009A8A                 align 4
.text$mn:00009A8A _text$mn        ends
.text$mn:00009A8A
.text$mn:00009A8C ; ===========================================================================
.text$mn:00009A8C
.text$mn:00009A8C ; Segment type: Pure code
.text$mn:00009A8C ; Segment permissions: Read/Execute
.text$mn:00009A8C _text$mn        segment para public 'CODE' use32
.text$mn:00009A8C                 assume cs:_text$mn
.text$mn:00009A8C                 ;org 9A8Ch
.text$mn:00009A8C ; COMDAT (pick any)
.text$mn:00009A8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A8C
.text$mn:00009A8C ; =============== S U B R O U T I N E =======================================
.text$mn:00009A8C
.text$mn:00009A8C ; Attributes: bp-based frame
.text$mn:00009A8C
.text$mn:00009A8C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::operator[](unsigned int)
.text$mn:00009A8C                 public ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z
.text$mn:00009A8C ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z proc near
.text$mn:00009A8C                                         ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+E6p
.text$mn:00009A8C
.text$mn:00009A8C var_4           = dword ptr -4
.text$mn:00009A8C arg_0           = dword ptr  8
.text$mn:00009A8C
.text$mn:00009A8C                 push    ebp
.text$mn:00009A8D                 mov     ebp, esp
.text$mn:00009A8F                 push    ecx
.text$mn:00009A90                 mov     [ebp+var_4], ecx
.text$mn:00009A93                 mov     ecx, [ebp+var_4]
.text$mn:00009A96                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00009A9B                 cmp     eax, [ebp+arg_0]
.text$mn:00009A9E                 ja      short loc_9B08
.text$mn:00009AA0                 push    4B1h            ; unsigned int
.text$mn:00009AA5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009AAA                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00009AAF                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009AB4                 add     esp, 0Ch
.text$mn:00009AB7                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00009ABC                 test    eax, eax
.text$mn:00009ABE                 jz      short loc_9AC4
.text$mn:00009AC0                 xor     ecx, ecx
.text$mn:00009AC2                 jnz     short loc_9AEA
.text$mn:00009AC4
.text$mn:00009AC4 loc_9AC4:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+32j
.text$mn:00009AC4                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009AC9                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00009ACE                 push    0
.text$mn:00009AD0                 push    4B2h
.text$mn:00009AD5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009ADA                 push    2
.text$mn:00009ADC                 call    __CrtDbgReportW
.text$mn:00009AE1                 add     esp, 18h
.text$mn:00009AE4                 cmp     eax, 1
.text$mn:00009AE7                 jnz     short loc_9AEA
.text$mn:00009AE9                 int     3               ; Trap to Debugger
.text$mn:00009AEA
.text$mn:00009AEA loc_9AEA:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+36j
.text$mn:00009AEA                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+5Bj
.text$mn:00009AEA                 push    0
.text$mn:00009AEC                 push    4B2h
.text$mn:00009AF1                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009AF6                 push    offset ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ ; "std::vector<class std::basic_string<wch"...
.text$mn:00009AFB                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00009B00                 call    __invalid_parameter
.text$mn:00009B05                 add     esp, 14h
.text$mn:00009B08
.text$mn:00009B08 loc_9B08:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+12j
.text$mn:00009B08                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00009B0C                 mov     ecx, [ebp+var_4]
.text$mn:00009B0F                 add     eax, [ecx+4]
.text$mn:00009B12                 mov     esp, ebp
.text$mn:00009B14                 pop     ebp
.text$mn:00009B15                 retn    4
.text$mn:00009B15 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z endp
.text$mn:00009B15
.text$mn:00009B15 _text$mn        ends
.text$mn:00009B15
.text$mn:00009B18 ; ===========================================================================
.text$mn:00009B18
.text$mn:00009B18 ; Segment type: Pure code
.text$mn:00009B18 ; Segment permissions: Read/Execute
.text$mn:00009B18 _text$mn        segment para public 'CODE' use32
.text$mn:00009B18                 assume cs:_text$mn
.text$mn:00009B18                 ;org 9B18h
.text$mn:00009B18 ; COMDAT (pick any)
.text$mn:00009B18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B18
.text$mn:00009B18 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B18
.text$mn:00009B18 ; Attributes: bp-based frame
.text$mn:00009B18
.text$mn:00009B18 ; public: wchar_t const & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00009B18                 public ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ
.text$mn:00009B18 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ proc near
.text$mn:00009B18                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Ap
.text$mn:00009B18
.text$mn:00009B18 var_4           = dword ptr -4
.text$mn:00009B18
.text$mn:00009B18                 push    ebp
.text$mn:00009B19                 mov     ebp, esp
.text$mn:00009B1B                 push    ecx
.text$mn:00009B1C                 push    esi
.text$mn:00009B1D                 mov     [ebp+var_4], ecx
.text$mn:00009B20                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009B23                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00009B28                 test    eax, eax
.text$mn:00009B2A                 jz      short loc_9B73
.text$mn:00009B2C                 mov     eax, [ebp+var_4]
.text$mn:00009B2F                 cmp     dword ptr [eax+8], 0
.text$mn:00009B33                 jz      short loc_9B73
.text$mn:00009B35                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009B38                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00009B3D                 mov     ecx, eax
.text$mn:00009B3F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009B44                 mov     ecx, [ebp+var_4]
.text$mn:00009B47                 cmp     [ecx+8], eax
.text$mn:00009B4A                 jb      short loc_9B73
.text$mn:00009B4C                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009B4F                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00009B54                 mov     ecx, eax
.text$mn:00009B56                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009B5B                 mov     esi, eax
.text$mn:00009B5D                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009B60                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00009B65                 mov     edx, [eax+14h]
.text$mn:00009B68                 lea     eax, [esi+edx*2]
.text$mn:00009B6B                 mov     ecx, [ebp+var_4]
.text$mn:00009B6E                 cmp     eax, [ecx+8]
.text$mn:00009B71                 ja      short loc_9BD2
.text$mn:00009B73
.text$mn:00009B73 loc_9B73:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+12j
.text$mn:00009B73                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+1Bj ...
.text$mn:00009B73                 push    4Fh ; 'O'       ; unsigned int
.text$mn:00009B75                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009B7A                 push    offset ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; "string iterator not dereferencable"
.text$mn:00009B7F                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00009B84                 add     esp, 0Ch
.text$mn:00009B87                 mov     edx, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00009B8C                 test    edx, edx
.text$mn:00009B8E                 jz      short loc_9B94
.text$mn:00009B90                 xor     eax, eax
.text$mn:00009B92                 jnz     short loc_9BB7
.text$mn:00009B94
.text$mn:00009B94 loc_9B94:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+76j
.text$mn:00009B94                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00009B99                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00009B9E                 push    0
.text$mn:00009BA0                 push    50h ; 'P'
.text$mn:00009BA2                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009BA7                 push    2
.text$mn:00009BA9                 call    __CrtDbgReportW
.text$mn:00009BAE                 add     esp, 18h
.text$mn:00009BB1                 cmp     eax, 1
.text$mn:00009BB4                 jnz     short loc_9BB7
.text$mn:00009BB6                 int     3               ; Trap to Debugger
.text$mn:00009BB7
.text$mn:00009BB7 loc_9BB7:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+7Aj
.text$mn:00009BB7                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+9Cj
.text$mn:00009BB7                 push    0
.text$mn:00009BB9                 push    50h ; 'P'
.text$mn:00009BBB                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00009BC0                 push    offset ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00009BC5                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00009BCA                 call    __invalid_parameter
.text$mn:00009BCF                 add     esp, 14h
.text$mn:00009BD2
.text$mn:00009BD2 loc_9BD2:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+59j
.text$mn:00009BD2                 mov     edx, [ebp+var_4]
.text$mn:00009BD5                 mov     eax, [edx+8]
.text$mn:00009BD8                 pop     esi
.text$mn:00009BD9                 mov     esp, ebp
.text$mn:00009BDB                 pop     ebp
.text$mn:00009BDC                 retn
.text$mn:00009BDC ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ endp
.text$mn:00009BDC
.text$mn:00009BDC ; ---------------------------------------------------------------------------
.text$mn:00009BDD                 align 10h
.text$mn:00009BDD _text$mn        ends
.text$mn:00009BDD
.text$mn:00009BE0 ; ===========================================================================
.text$mn:00009BE0
.text$mn:00009BE0 ; Segment type: Pure code
.text$mn:00009BE0 ; Segment permissions: Read/Execute
.text$mn:00009BE0 _text$mn        segment para public 'CODE' use32
.text$mn:00009BE0                 assume cs:_text$mn
.text$mn:00009BE0                 ;org 9BE0h
.text$mn:00009BE0 ; COMDAT (pick any)
.text$mn:00009BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BE0
.text$mn:00009BE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BE0
.text$mn:00009BE0 ; Attributes: bp-based frame
.text$mn:00009BE0
.text$mn:00009BE0 ; public: wchar_t & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00009BE0                 public ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ
.text$mn:00009BE0 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ proc near
.text$mn:00009BE0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+135p
.text$mn:00009BE0
.text$mn:00009BE0 var_4           = dword ptr -4
.text$mn:00009BE0
.text$mn:00009BE0                 push    ebp
.text$mn:00009BE1                 mov     ebp, esp
.text$mn:00009BE3                 push    ecx
.text$mn:00009BE4                 mov     [ebp+var_4], ecx
.text$mn:00009BE7                 mov     ecx, [ebp+var_4]
.text$mn:00009BEA                 call    ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:00009BEF                 mov     esp, ebp
.text$mn:00009BF1                 pop     ebp
.text$mn:00009BF2                 retn
.text$mn:00009BF2 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ endp
.text$mn:00009BF2
.text$mn:00009BF2 ; ---------------------------------------------------------------------------
.text$mn:00009BF3                 align 4
.text$mn:00009BF3 _text$mn        ends
.text$mn:00009BF3
.text$mn:00009BF4 ; ===========================================================================
.text$mn:00009BF4
.text$mn:00009BF4 ; Segment type: Pure code
.text$mn:00009BF4 ; Segment permissions: Read/Execute
.text$mn:00009BF4 _text$mn        segment para public 'CODE' use32
.text$mn:00009BF4                 assume cs:_text$mn
.text$mn:00009BF4                 ;org 9BF4h
.text$mn:00009BF4 ; COMDAT (pick any)
.text$mn:00009BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009BF4
.text$mn:00009BF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009BF4
.text$mn:00009BF4 ; Attributes: bp-based frame
.text$mn:00009BF4
.text$mn:00009BF4 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00009BF4                 public ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:00009BF4 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:00009BF4                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Bp
.text$mn:00009BF4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+42p
.text$mn:00009BF4
.text$mn:00009BF4 var_4           = dword ptr -4
.text$mn:00009BF4 arg_0           = dword ptr  8
.text$mn:00009BF4
.text$mn:00009BF4                 push    ebp
.text$mn:00009BF5                 mov     ebp, esp
.text$mn:00009BF7                 push    ecx
.text$mn:00009BF8                 mov     [ebp+var_4], ecx
.text$mn:00009BFB                 mov     eax, [ebp+arg_0]
.text$mn:00009BFE                 push    eax             ; std::_Iterator_base12 *
.text$mn:00009BFF                 mov     ecx, [ebp+var_4]
.text$mn:00009C02                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009C07                 mov     ecx, [ebp+var_4]
.text$mn:00009C0A                 mov     edx, [ebp+arg_0]
.text$mn:00009C0D                 mov     eax, [ecx+8]
.text$mn:00009C10                 sub     eax, [edx+8]
.text$mn:00009C13                 sar     eax, 1
.text$mn:00009C15                 mov     esp, ebp
.text$mn:00009C17                 pop     ebp
.text$mn:00009C18                 retn    4
.text$mn:00009C18 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:00009C18
.text$mn:00009C18 ; ---------------------------------------------------------------------------
.text$mn:00009C1B                 align 4
.text$mn:00009C1B _text$mn        ends
.text$mn:00009C1B
.text$mn:00009C1C ; ===========================================================================
.text$mn:00009C1C
.text$mn:00009C1C ; Segment type: Pure code
.text$mn:00009C1C ; Segment permissions: Read/Execute
.text$mn:00009C1C _text$mn        segment para public 'CODE' use32
.text$mn:00009C1C                 assume cs:_text$mn
.text$mn:00009C1C                 ;org 9C1Ch
.text$mn:00009C1C ; COMDAT (pick any)
.text$mn:00009C1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009C1C
.text$mn:00009C1C ; =============== S U B R O U T I N E =======================================
.text$mn:00009C1C
.text$mn:00009C1C ; Attributes: bp-based frame
.text$mn:00009C1C
.text$mn:00009C1C ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00009C1C                 public ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00009C1C ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$mn:00009C1C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+12Cp
.text$mn:00009C1C
.text$mn:00009C1C var_28          = byte ptr -28h
.text$mn:00009C1C var_1C          = dword ptr -1Ch
.text$mn:00009C1C var_18          = dword ptr -18h
.text$mn:00009C1C var_14          = dword ptr -14h
.text$mn:00009C1C var_10          = dword ptr -10h
.text$mn:00009C1C var_C           = dword ptr -0Ch
.text$mn:00009C1C var_4           = dword ptr -4
.text$mn:00009C1C arg_0           = dword ptr  8
.text$mn:00009C1C
.text$mn:00009C1C                 push    ebp
.text$mn:00009C1D                 mov     ebp, esp
.text$mn:00009C1F                 push    0FFFFFFFFh
.text$mn:00009C21                 push    offset __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00009C26                 mov     eax, large fs:0
.text$mn:00009C2C                 push    eax
.text$mn:00009C2D                 sub     esp, 1Ch
.text$mn:00009C30                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009C35                 xor     eax, ebp
.text$mn:00009C37                 push    eax
.text$mn:00009C38                 lea     eax, [ebp+var_C]
.text$mn:00009C3B                 mov     large fs:0, eax
.text$mn:00009C41                 mov     [ebp+var_10], ecx
.text$mn:00009C44                 mov     eax, [ebp+arg_0]
.text$mn:00009C47                 push    eax             ; std::_Iterator_base12 *
.text$mn:00009C48                 mov     ecx, [ebp+var_10]
.text$mn:00009C4B                 push    ecx             ; struct std::_Iterator_base12 *
.text$mn:00009C4C                 lea     ecx, [ebp+var_28]
.text$mn:00009C4F                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009C54                 mov     [ebp+var_14], eax
.text$mn:00009C57                 mov     edx, [ebp+var_14]
.text$mn:00009C5A                 mov     [ebp+var_18], edx
.text$mn:00009C5D                 mov     [ebp+var_4], 0
.text$mn:00009C64                 mov     ecx, [ebp+var_18]
.text$mn:00009C67                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009C6C                 mov     [ebp+var_1C], eax
.text$mn:00009C6F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009C76                 lea     ecx, [ebp+var_28]
.text$mn:00009C79                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00009C7E                 mov     eax, [ebp+var_1C]
.text$mn:00009C81                 mov     ecx, [ebp+var_C]
.text$mn:00009C84                 mov     large fs:0, ecx
.text$mn:00009C8B                 pop     ecx
.text$mn:00009C8C                 mov     esp, ebp
.text$mn:00009C8E                 pop     ebp
.text$mn:00009C8F                 retn    4
.text$mn:00009C8F ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$mn:00009C8F
.text$mn:00009C8F ; ---------------------------------------------------------------------------
.text$mn:00009C92                 align 4
.text$mn:00009C92 _text$mn        ends
.text$mn:00009C92
.text$x:00009C94 ; ===========================================================================
.text$x:00009C94
.text$x:00009C94 ; Segment type: Pure code
.text$x:00009C94 ; Segment permissions: Read/Execute
.text$x:00009C94 _text$x         segment para public 'CODE' use32
.text$x:00009C94                 assume cs:_text$x
.text$x:00009C94                 ;org 9C94h
.text$x:00009C94 ; COMDAT (pick associative to section at 9C1C)
.text$x:00009C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009C94
.text$x:00009C94 ; =============== S U B R O U T I N E =======================================
.text$x:00009C94
.text$x:00009C94
.text$x:00009C94 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 proc near
.text$x:00009C94                                         ; DATA XREF: .xdata$x:00010864o
.text$x:00009C94                 lea     ecx, [ebp-28h]
.text$x:00009C97                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009C97 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 endp
.text$x:00009C97
.text$x:00009C9C
.text$x:00009C9C ; =============== S U B R O U T I N E =======================================
.text$x:00009C9C
.text$x:00009C9C
.text$x:00009C9C __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$x:00009C9C                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00009C9C
.text$x:00009C9C arg_4           = dword ptr  8
.text$x:00009C9C
.text$x:00009C9C                 mov     edx, [esp+arg_4]
.text$x:00009CA0                 lea     eax, [edx+0Ch]
.text$x:00009CA3                 mov     ecx, [edx-20h]
.text$x:00009CA6                 xor     ecx, eax
.text$x:00009CA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009CAD                 mov     eax, offset __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$x:00009CB2                 jmp     ___CxxFrameHandler3
.text$x:00009CB2 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$x:00009CB2
.text$x:00009CB2 ; ---------------------------------------------------------------------------
.text$x:00009CB7                 align 4
.text$x:00009CB7 _text$x         ends
.text$x:00009CB7
.text$mn:00009CB8 ; ===========================================================================
.text$mn:00009CB8
.text$mn:00009CB8 ; Segment type: Pure code
.text$mn:00009CB8 ; Segment permissions: Read/Execute
.text$mn:00009CB8 _text$mn        segment para public 'CODE' use32
.text$mn:00009CB8                 assume cs:_text$mn
.text$mn:00009CB8                 ;org 9CB8h
.text$mn:00009CB8 ; COMDAT (pick any)
.text$mn:00009CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CB8
.text$mn:00009CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009CB8
.text$mn:00009CB8 ; Attributes: bp-based frame
.text$mn:00009CB8
.text$mn:00009CB8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:00009CB8                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00009CB8 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00009CB8                                         ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+6Ap
.text$mn:00009CB8                                         ; FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+77p ...
.text$mn:00009CB8
.text$mn:00009CB8 var_4           = dword ptr -4
.text$mn:00009CB8 Str             = dword ptr  8
.text$mn:00009CB8
.text$mn:00009CB8                 push    ebp
.text$mn:00009CB9                 mov     ebp, esp
.text$mn:00009CBB                 push    ecx
.text$mn:00009CBC                 mov     [ebp+var_4], ecx
.text$mn:00009CBF                 mov     eax, [ebp+Str]
.text$mn:00009CC2                 push    eax             ; Str
.text$mn:00009CC3                 mov     ecx, [ebp+var_4]
.text$mn:00009CC6                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:00009CCB                 mov     esp, ebp
.text$mn:00009CCD                 pop     ebp
.text$mn:00009CCE                 retn    4
.text$mn:00009CCE ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00009CCE
.text$mn:00009CCE ; ---------------------------------------------------------------------------
.text$mn:00009CD1                 align 4
.text$mn:00009CD1 _text$mn        ends
.text$mn:00009CD1
.text$mn:00009CD4 ; ===========================================================================
.text$mn:00009CD4
.text$mn:00009CD4 ; Segment type: Pure code
.text$mn:00009CD4 ; Segment permissions: Read/Execute
.text$mn:00009CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00009CD4                 assume cs:_text$mn
.text$mn:00009CD4                 ;org 9CD4h
.text$mn:00009CD4 ; COMDAT (pick any)
.text$mn:00009CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009CD4
.text$mn:00009CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009CD4
.text$mn:00009CD4 ; Attributes: bp-based frame
.text$mn:00009CD4
.text$mn:00009CD4 ; public: void * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:00009CD4                 public ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
.text$mn:00009CD4 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z proc near
.text$mn:00009CD4                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp
.text$mn:00009CD4
.text$mn:00009CD4 var_4           = dword ptr -4
.text$mn:00009CD4 arg_0           = dword ptr  8
.text$mn:00009CD4
.text$mn:00009CD4                 push    ebp
.text$mn:00009CD5                 mov     ebp, esp
.text$mn:00009CD7                 push    ecx
.text$mn:00009CD8                 mov     [ebp+var_4], ecx
.text$mn:00009CDB                 mov     ecx, [ebp+var_4]
.text$mn:00009CDE                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00009CE3                 mov     eax, [ebp+arg_0]
.text$mn:00009CE6                 and     eax, 1
.text$mn:00009CE9                 jz      short loc_9CF7
.text$mn:00009CEB                 mov     ecx, [ebp+var_4]
.text$mn:00009CEE                 push    ecx             ; void *
.text$mn:00009CEF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009CF4                 add     esp, 4
.text$mn:00009CF7
.text$mn:00009CF7 loc_9CF7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:00009CF7                 mov     eax, [ebp+var_4]
.text$mn:00009CFA                 mov     esp, ebp
.text$mn:00009CFC                 pop     ebp
.text$mn:00009CFD                 retn    4
.text$mn:00009CFD ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z endp
.text$mn:00009CFD
.text$mn:00009CFD _text$mn        ends
.text$mn:00009CFD
.text$mn:00009D00 ; ===========================================================================
.text$mn:00009D00
.text$mn:00009D00 ; Segment type: Pure code
.text$mn:00009D00 ; Segment permissions: Read/Execute
.text$mn:00009D00 _text$mn        segment para public 'CODE' use32
.text$mn:00009D00                 assume cs:_text$mn
.text$mn:00009D00                 ;org 9D00h
.text$mn:00009D00 ; COMDAT (pick any)
.text$mn:00009D00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D00
.text$mn:00009D00 ; =============== S U B R O U T I N E =======================================
.text$mn:00009D00
.text$mn:00009D00 ; Attributes: bp-based frame
.text$mn:00009D00
.text$mn:00009D00 ; public: void * __thiscall AssociationInfo::`scalar deleting destructor'(unsigned int)
.text$mn:00009D00                 public ??_GAssociationInfo@@QAEPAXI@Z
.text$mn:00009D00 ??_GAssociationInfo@@QAEPAXI@Z proc near
.text$mn:00009D00                                         ; CODE XREF: std::allocator<AssociationInfo>::destroy<AssociationInfo>(AssociationInfo *)+Cp
.text$mn:00009D00
.text$mn:00009D00 var_4           = dword ptr -4
.text$mn:00009D00 arg_0           = dword ptr  8
.text$mn:00009D00
.text$mn:00009D00                 push    ebp
.text$mn:00009D01                 mov     ebp, esp
.text$mn:00009D03                 push    ecx
.text$mn:00009D04                 mov     [ebp+var_4], ecx
.text$mn:00009D07                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009D0A                 call    ??1AssociationInfo@@QAE@XZ ; AssociationInfo::~AssociationInfo(void)
.text$mn:00009D0F                 mov     eax, [ebp+arg_0]
.text$mn:00009D12                 and     eax, 1
.text$mn:00009D15                 jz      short loc_9D23
.text$mn:00009D17                 mov     ecx, [ebp+var_4]
.text$mn:00009D1A                 push    ecx             ; void *
.text$mn:00009D1B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009D20                 add     esp, 4
.text$mn:00009D23
.text$mn:00009D23 loc_9D23:                               ; CODE XREF: AssociationInfo::`scalar deleting destructor'(uint)+15j
.text$mn:00009D23                 mov     eax, [ebp+var_4]
.text$mn:00009D26                 mov     esp, ebp
.text$mn:00009D28                 pop     ebp
.text$mn:00009D29                 retn    4
.text$mn:00009D29 ??_GAssociationInfo@@QAEPAXI@Z endp
.text$mn:00009D29
.text$mn:00009D29 _text$mn        ends
.text$mn:00009D29
.text$mn:00009D2C ; ===========================================================================
.text$mn:00009D2C
.text$mn:00009D2C ; Segment type: Pure code
.text$mn:00009D2C ; Segment permissions: Read/Execute
.text$mn:00009D2C _text$mn        segment para public 'CODE' use32
.text$mn:00009D2C                 assume cs:_text$mn
.text$mn:00009D2C                 ;org 9D2Ch
.text$mn:00009D2C ; COMDAT (pick any)
.text$mn:00009D2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D2C
.text$mn:00009D2C ; =============== S U B R O U T I N E =======================================
.text$mn:00009D2C
.text$mn:00009D2C ; Attributes: bp-based frame
.text$mn:00009D2C
.text$mn:00009D2C ; public: void * __thiscall FunctionParser::`scalar deleting destructor'(unsigned int)
.text$mn:00009D2C                 public ??_GFunctionParser@@QAEPAXI@Z
.text$mn:00009D2C ??_GFunctionParser@@QAEPAXI@Z proc near ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+7Cp
.text$mn:00009D2C
.text$mn:00009D2C var_4           = dword ptr -4
.text$mn:00009D2C arg_0           = dword ptr  8
.text$mn:00009D2C
.text$mn:00009D2C                 push    ebp
.text$mn:00009D2D                 mov     ebp, esp
.text$mn:00009D2F                 push    ecx
.text$mn:00009D30                 mov     [ebp+var_4], ecx
.text$mn:00009D33                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009D36                 call    ??1FunctionParser@@QAE@XZ ; FunctionParser::~FunctionParser(void)
.text$mn:00009D3B                 mov     eax, [ebp+arg_0]
.text$mn:00009D3E                 and     eax, 1
.text$mn:00009D41                 jz      short loc_9D4F
.text$mn:00009D43                 mov     ecx, [ebp+var_4]
.text$mn:00009D46                 push    ecx             ; void *
.text$mn:00009D47                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009D4C                 add     esp, 4
.text$mn:00009D4F
.text$mn:00009D4F loc_9D4F:                               ; CODE XREF: FunctionParser::`scalar deleting destructor'(uint)+15j
.text$mn:00009D4F                 mov     eax, [ebp+var_4]
.text$mn:00009D52                 mov     esp, ebp
.text$mn:00009D54                 pop     ebp
.text$mn:00009D55                 retn    4
.text$mn:00009D55 ??_GFunctionParser@@QAEPAXI@Z endp
.text$mn:00009D55
.text$mn:00009D55 _text$mn        ends
.text$mn:00009D55
.text$mn:00009D58 ; ===========================================================================
.text$mn:00009D58
.text$mn:00009D58 ; Segment type: Pure code
.text$mn:00009D58 ; Segment permissions: Read/Execute
.text$mn:00009D58 _text$mn        segment para public 'CODE' use32
.text$mn:00009D58                 assume cs:_text$mn
.text$mn:00009D58                 ;org 9D58h
.text$mn:00009D58 ; COMDAT (pick any)
.text$mn:00009D58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D58
.text$mn:00009D58 ; =============== S U B R O U T I N E =======================================
.text$mn:00009D58
.text$mn:00009D58 ; Attributes: bp-based frame
.text$mn:00009D58
.text$mn:00009D58 ; public: virtual void * __thiscall TiXmlDocument::`scalar deleting destructor'(unsigned int)
.text$mn:00009D58                 public ??_GTiXmlDocument@@UAEPAXI@Z
.text$mn:00009D58 ??_GTiXmlDocument@@UAEPAXI@Z proc near
.text$mn:00009D58
.text$mn:00009D58 var_4           = dword ptr -4
.text$mn:00009D58 arg_0           = dword ptr  8
.text$mn:00009D58
.text$mn:00009D58                 push    ebp
.text$mn:00009D59                 mov     ebp, esp
.text$mn:00009D5B                 push    ecx
.text$mn:00009D5C                 mov     [ebp+var_4], ecx
.text$mn:00009D5F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009D62                 call    ??1TiXmlDocument@@UAE@XZ ; TiXmlDocument::~TiXmlDocument(void)
.text$mn:00009D67                 mov     eax, [ebp+arg_0]
.text$mn:00009D6A                 and     eax, 1
.text$mn:00009D6D                 jz      short loc_9D7B
.text$mn:00009D6F                 mov     ecx, [ebp+var_4]
.text$mn:00009D72                 push    ecx             ; void *
.text$mn:00009D73                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009D78                 add     esp, 4
.text$mn:00009D7B
.text$mn:00009D7B loc_9D7B:                               ; CODE XREF: TiXmlDocument::`scalar deleting destructor'(uint)+15j
.text$mn:00009D7B                 mov     eax, [ebp+var_4]
.text$mn:00009D7E                 mov     esp, ebp
.text$mn:00009D80                 pop     ebp
.text$mn:00009D81                 retn    4
.text$mn:00009D81 ??_GTiXmlDocument@@UAEPAXI@Z endp
.text$mn:00009D81
.text$mn:00009D81 _text$mn        ends
.text$mn:00009D81
.text$mn:00009D84 ; ===========================================================================
.text$mn:00009D84
.text$mn:00009D84 ; Segment type: Pure code
.text$mn:00009D84 ; Segment permissions: Read/Execute
.text$mn:00009D84 _text$mn        segment para public 'CODE' use32
.text$mn:00009D84                 assume cs:_text$mn
.text$mn:00009D84                 ;org 9D84h
.text$mn:00009D84 ; COMDAT (pick any)
.text$mn:00009D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009D84
.text$mn:00009D84 ; =============== S U B R O U T I N E =======================================
.text$mn:00009D84
.text$mn:00009D84 ; Attributes: bp-based frame
.text$mn:00009D84
.text$mn:00009D84 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00009D84                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:00009D84 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:00009D84
.text$mn:00009D84 var_4           = dword ptr -4
.text$mn:00009D84 arg_0           = dword ptr  8
.text$mn:00009D84
.text$mn:00009D84                 push    ebp
.text$mn:00009D85                 mov     ebp, esp
.text$mn:00009D87                 push    ecx
.text$mn:00009D88                 mov     [ebp+var_4], ecx
.text$mn:00009D8B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009D8E                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00009D93                 mov     eax, [ebp+arg_0]
.text$mn:00009D96                 and     eax, 1
.text$mn:00009D99                 jz      short loc_9DA7
.text$mn:00009D9B                 mov     ecx, [ebp+var_4]
.text$mn:00009D9E                 push    ecx             ; void *
.text$mn:00009D9F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009DA4                 add     esp, 4
.text$mn:00009DA7
.text$mn:00009DA7 loc_9DA7:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00009DA7                 mov     eax, [ebp+var_4]
.text$mn:00009DAA                 mov     esp, ebp
.text$mn:00009DAC                 pop     ebp
.text$mn:00009DAD                 retn    4
.text$mn:00009DAD ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00009DAD
.text$mn:00009DAD _text$mn        ends
.text$mn:00009DAD
.text$mn:00009DB0 ; ===========================================================================
.text$mn:00009DB0
.text$mn:00009DB0 ; Segment type: Pure code
.text$mn:00009DB0 ; Segment permissions: Read/Execute
.text$mn:00009DB0 _text$mn        segment para public 'CODE' use32
.text$mn:00009DB0                 assume cs:_text$mn
.text$mn:00009DB0                 ;org 9DB0h
.text$mn:00009DB0 ; COMDAT (pick any)
.text$mn:00009DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009DB0
.text$mn:00009DB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00009DB0
.text$mn:00009DB0 ; Attributes: bp-based frame
.text$mn:00009DB0
.text$mn:00009DB0 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00009DB0                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00009DB0 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00009DB0
.text$mn:00009DB0 var_4           = dword ptr -4
.text$mn:00009DB0 arg_0           = dword ptr  8
.text$mn:00009DB0
.text$mn:00009DB0                 push    ebp
.text$mn:00009DB1                 mov     ebp, esp
.text$mn:00009DB3                 push    ecx
.text$mn:00009DB4                 mov     [ebp+var_4], ecx
.text$mn:00009DB7                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009DBA                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00009DBF                 mov     eax, [ebp+arg_0]
.text$mn:00009DC2                 and     eax, 1
.text$mn:00009DC5                 jz      short loc_9DD3
.text$mn:00009DC7                 mov     ecx, [ebp+var_4]
.text$mn:00009DCA                 push    ecx             ; void *
.text$mn:00009DCB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009DD0                 add     esp, 4
.text$mn:00009DD3
.text$mn:00009DD3 loc_9DD3:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00009DD3                 mov     eax, [ebp+var_4]
.text$mn:00009DD6                 mov     esp, ebp
.text$mn:00009DD8                 pop     ebp
.text$mn:00009DD9                 retn    4
.text$mn:00009DD9 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00009DD9
.text$mn:00009DD9 _text$mn        ends
.text$mn:00009DD9
.text$mn:00009DDC ; ===========================================================================
.text$mn:00009DDC
.text$mn:00009DDC ; Segment type: Pure code
.text$mn:00009DDC ; Segment permissions: Read/Execute
.text$mn:00009DDC _text$mn        segment para public 'CODE' use32
.text$mn:00009DDC                 assume cs:_text$mn
.text$mn:00009DDC                 ;org 9DDCh
.text$mn:00009DDC ; COMDAT (pick any)
.text$mn:00009DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009DDC
.text$mn:00009DDC ; =============== S U B R O U T I N E =======================================
.text$mn:00009DDC
.text$mn:00009DDC ; Attributes: bp-based frame
.text$mn:00009DDC
.text$mn:00009DDC ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00009DDC                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00009DDC ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00009DDC
.text$mn:00009DDC var_4           = dword ptr -4
.text$mn:00009DDC arg_0           = dword ptr  8
.text$mn:00009DDC
.text$mn:00009DDC                 push    ebp
.text$mn:00009DDD                 mov     ebp, esp
.text$mn:00009DDF                 push    ecx
.text$mn:00009DE0                 mov     [ebp+var_4], ecx
.text$mn:00009DE3                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009DE6                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:00009DEB                 mov     eax, [ebp+arg_0]
.text$mn:00009DEE                 and     eax, 1
.text$mn:00009DF1                 jz      short loc_9DFF
.text$mn:00009DF3                 mov     ecx, [ebp+var_4]
.text$mn:00009DF6                 push    ecx             ; void *
.text$mn:00009DF7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009DFC                 add     esp, 4
.text$mn:00009DFF
.text$mn:00009DFF loc_9DFF:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00009DFF                 mov     eax, [ebp+var_4]
.text$mn:00009E02                 mov     esp, ebp
.text$mn:00009E04                 pop     ebp
.text$mn:00009E05                 retn    4
.text$mn:00009E05 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00009E05
.text$mn:00009E05 _text$mn        ends
.text$mn:00009E05
.text$mn:00009E08 ; ===========================================================================
.text$mn:00009E08
.text$mn:00009E08 ; Segment type: Pure code
.text$mn:00009E08 ; Segment permissions: Read/Execute
.text$mn:00009E08 _text$mn        segment para public 'CODE' use32
.text$mn:00009E08                 assume cs:_text$mn
.text$mn:00009E08                 ;org 9E08h
.text$mn:00009E08 ; COMDAT (pick any)
.text$mn:00009E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E08
.text$mn:00009E08 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E08
.text$mn:00009E08 ; Attributes: bp-based frame
.text$mn:00009E08
.text$mn:00009E08 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00009E08                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00009E08 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00009E08
.text$mn:00009E08 var_4           = dword ptr -4
.text$mn:00009E08 arg_0           = dword ptr  8
.text$mn:00009E08
.text$mn:00009E08                 push    ebp
.text$mn:00009E09                 mov     ebp, esp
.text$mn:00009E0B                 push    ecx
.text$mn:00009E0C                 mov     [ebp+var_4], ecx
.text$mn:00009E0F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009E12                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00009E17                 mov     eax, [ebp+arg_0]
.text$mn:00009E1A                 and     eax, 1
.text$mn:00009E1D                 jz      short loc_9E2B
.text$mn:00009E1F                 mov     ecx, [ebp+var_4]
.text$mn:00009E22                 push    ecx             ; void *
.text$mn:00009E23                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009E28                 add     esp, 4
.text$mn:00009E2B
.text$mn:00009E2B loc_9E2B:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00009E2B                 mov     eax, [ebp+var_4]
.text$mn:00009E2E                 mov     esp, ebp
.text$mn:00009E30                 pop     ebp
.text$mn:00009E31                 retn    4
.text$mn:00009E31 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00009E31
.text$mn:00009E31 _text$mn        ends
.text$mn:00009E31
.text$mn:00009E34 ; ===========================================================================
.text$mn:00009E34
.text$mn:00009E34 ; Segment type: Pure code
.text$mn:00009E34 ; Segment permissions: Read/Execute
.text$mn:00009E34 _text$mn        segment para public 'CODE' use32
.text$mn:00009E34                 assume cs:_text$mn
.text$mn:00009E34                 ;org 9E34h
.text$mn:00009E34 ; COMDAT (pick any)
.text$mn:00009E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009E34
.text$mn:00009E34 ; =============== S U B R O U T I N E =======================================
.text$mn:00009E34
.text$mn:00009E34 ; Attributes: bp-based frame
.text$mn:00009E34
.text$mn:00009E34 ; public: void * __thiscall foundInfo::`scalar deleting destructor'(unsigned int)
.text$mn:00009E34                 public ??_GfoundInfo@@QAEPAXI@Z
.text$mn:00009E34 ??_GfoundInfo@@QAEPAXI@Z proc near      ; CODE XREF: std::allocator<foundInfo>::destroy<foundInfo>(foundInfo *)+Cp
.text$mn:00009E34
.text$mn:00009E34 var_4           = dword ptr -4
.text$mn:00009E34 arg_0           = dword ptr  8
.text$mn:00009E34
.text$mn:00009E34                 push    ebp
.text$mn:00009E35                 mov     ebp, esp
.text$mn:00009E37                 push    ecx
.text$mn:00009E38                 mov     [ebp+var_4], ecx
.text$mn:00009E3B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00009E3E                 call    ??1foundInfo@@QAE@XZ ; foundInfo::~foundInfo(void)
.text$mn:00009E43                 mov     eax, [ebp+arg_0]
.text$mn:00009E46                 and     eax, 1
.text$mn:00009E49                 jz      short loc_9E57
.text$mn:00009E4B                 mov     ecx, [ebp+var_4]
.text$mn:00009E4E                 push    ecx             ; void *
.text$mn:00009E4F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00009E54                 add     esp, 4
.text$mn:00009E57
.text$mn:00009E57 loc_9E57:                               ; CODE XREF: foundInfo::`scalar deleting destructor'(uint)+15j
.text$mn:00009E57                 mov     eax, [ebp+var_4]
.text$mn:00009E5A                 mov     esp, ebp
.text$mn:00009E5C                 pop     ebp
.text$mn:00009E5D                 retn    4
.text$mn:00009E5D ??_GfoundInfo@@QAEPAXI@Z endp
.text$mn:00009E5D
.text$mn:00009E5D _text$mn        ends
.text$mn:00009E5D
.text$di:00009E60 ; ===========================================================================
.text$di:00009E60
.text$di:00009E60 ; Segment type: Pure code
.text$di:00009E60 ; Segment permissions: Read/Execute
.text$di:00009E60 _text$di        segment para public 'CODE' use32
.text$di:00009E60                 assume cs:_text$di
.text$di:00009E60                 ;org 9E60h
.text$di:00009E60 ; COMDAT (pick any)
.text$di:00009E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009E60
.text$di:00009E60 ; =============== S U B R O U T I N E =======================================
.text$di:00009E60
.text$di:00009E60 ; Attributes: bp-based frame
.text$di:00009E60
.text$di:00009E60 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:00009E60 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:00009E60                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:00009E60                 push    ebp
.text$di:00009E61                 mov     ebp, esp
.text$di:00009E63                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:00009E68                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:00009E6D                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00009E72                 call    _atexit
.text$di:00009E77                 add     esp, 4
.text$di:00009E7A                 pop     ebp
.text$di:00009E7B                 retn
.text$di:00009E7B ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:00009E7B
.text$di:00009E7B _text$di        ends
.text$di:00009E7B
.text$di:00009E7C ; ===========================================================================
.text$di:00009E7C
.text$di:00009E7C ; Segment type: Pure code
.text$di:00009E7C ; Segment permissions: Read/Execute
.text$di:00009E7C _text$di        segment para public 'CODE' use32
.text$di:00009E7C                 assume cs:_text$di
.text$di:00009E7C                 ;org 9E7Ch
.text$di:00009E7C ; COMDAT (pick any)
.text$di:00009E7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009E7C
.text$di:00009E7C ; =============== S U B R O U T I N E =======================================
.text$di:00009E7C
.text$di:00009E7C ; Attributes: bp-based frame
.text$di:00009E7C
.text$di:00009E7C ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:00009E7C ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:00009E7C                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:00009E7C                 push    ebp
.text$di:00009E7D                 mov     ebp, esp
.text$di:00009E7F                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:00009E84                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:00009E89                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00009E8E                 call    _atexit
.text$di:00009E93                 add     esp, 4
.text$di:00009E96                 pop     ebp
.text$di:00009E97                 retn
.text$di:00009E97 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:00009E97
.text$di:00009E97 _text$di        ends
.text$di:00009E97
.text$di:00009E98 ; ===========================================================================
.text$di:00009E98
.text$di:00009E98 ; Segment type: Pure code
.text$di:00009E98 ; Segment permissions: Read/Execute
.text$di:00009E98 _text$di        segment para public 'CODE' use32
.text$di:00009E98                 assume cs:_text$di
.text$di:00009E98                 ;org 9E98h
.text$di:00009E98 ; COMDAT (pick any)
.text$di:00009E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009E98
.text$di:00009E98 ; =============== S U B R O U T I N E =======================================
.text$di:00009E98
.text$di:00009E98 ; Attributes: bp-based frame
.text$di:00009E98
.text$di:00009E98 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:00009E98 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:00009E98                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:00009E98                 push    ebp
.text$di:00009E99                 mov     ebp, esp
.text$di:00009E9B                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00009EA0                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00009EA5                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00009EAA                 call    _atexit
.text$di:00009EAF                 add     esp, 4
.text$di:00009EB2                 pop     ebp
.text$di:00009EB3                 retn
.text$di:00009EB3 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:00009EB3
.text$di:00009EB3 _text$di        ends
.text$di:00009EB3
.text$di:00009EB4 ; ===========================================================================
.text$di:00009EB4
.text$di:00009EB4 ; Segment type: Pure code
.text$di:00009EB4 ; Segment permissions: Read/Execute
.text$di:00009EB4 _text$di        segment para public 'CODE' use32
.text$di:00009EB4                 assume cs:_text$di
.text$di:00009EB4                 ;org 9EB4h
.text$di:00009EB4 ; COMDAT (pick any)
.text$di:00009EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009EB4
.text$di:00009EB4 ; =============== S U B R O U T I N E =======================================
.text$di:00009EB4
.text$di:00009EB4 ; Attributes: bp-based frame
.text$di:00009EB4
.text$di:00009EB4 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00009EB4 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00009EB4                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00009EB4                 push    ebp
.text$di:00009EB5                 mov     ebp, esp
.text$di:00009EB7                 push    0               ; unsigned int
.text$di:00009EB9                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00009EBE                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00009EC3                 pop     ebp
.text$di:00009EC4                 retn
.text$di:00009EC4 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00009EC4
.text$di:00009EC4 ; ---------------------------------------------------------------------------
.text$di:00009EC5                 align 4
.text$di:00009EC5 _text$di        ends
.text$di:00009EC5
.text$di:00009EC8 ; ===========================================================================
.text$di:00009EC8
.text$di:00009EC8 ; Segment type: Pure code
.text$di:00009EC8 ; Segment permissions: Read/Execute
.text$di:00009EC8 _text$di        segment para public 'CODE' use32
.text$di:00009EC8                 assume cs:_text$di
.text$di:00009EC8                 ;org 9EC8h
.text$di:00009EC8 ; COMDAT (pick any)
.text$di:00009EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009EC8
.text$di:00009EC8 ; =============== S U B R O U T I N E =======================================
.text$di:00009EC8
.text$di:00009EC8 ; Attributes: bp-based frame
.text$di:00009EC8
.text$di:00009EC8 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00009EC8 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00009EC8                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00009EC8                 push    ebp
.text$di:00009EC9                 mov     ebp, esp
.text$di:00009ECB                 push    0               ; unsigned int
.text$di:00009ECD                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00009ED2                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00009ED7                 pop     ebp
.text$di:00009ED8                 retn
.text$di:00009ED8 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00009ED8
.text$di:00009ED8 ; ---------------------------------------------------------------------------
.text$di:00009ED9                 align 4
.text$di:00009ED9 _text$di        ends
.text$di:00009ED9
.text$di:00009EDC ; ===========================================================================
.text$di:00009EDC
.text$di:00009EDC ; Segment type: Pure code
.text$di:00009EDC ; Segment permissions: Read/Execute
.text$di:00009EDC _text$di        segment para public 'CODE' use32
.text$di:00009EDC                 assume cs:_text$di
.text$di:00009EDC                 ;org 9EDCh
.text$di:00009EDC ; COMDAT (pick any)
.text$di:00009EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009EDC
.text$di:00009EDC ; =============== S U B R O U T I N E =======================================
.text$di:00009EDC
.text$di:00009EDC ; Attributes: bp-based frame
.text$di:00009EDC
.text$di:00009EDC ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00009EDC ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00009EDC                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00009EDC                 push    ebp
.text$di:00009EDD                 mov     ebp, esp
.text$di:00009EDF                 push    0               ; unsigned int
.text$di:00009EE1                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00009EE6                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00009EEB                 pop     ebp
.text$di:00009EEC                 retn
.text$di:00009EEC ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00009EEC
.text$di:00009EEC ; ---------------------------------------------------------------------------
.text$di:00009EED                 align 10h
.text$di:00009EED _text$di        ends
.text$di:00009EED
.text$di:00009EF0 ; ===========================================================================
.text$di:00009EF0
.text$di:00009EF0 ; Segment type: Pure code
.text$di:00009EF0 ; Segment permissions: Read/Execute
.text$di:00009EF0 _text$di        segment para public 'CODE' use32
.text$di:00009EF0                 assume cs:_text$di
.text$di:00009EF0                 ;org 9EF0h
.text$di:00009EF0 ; COMDAT (pick any)
.text$di:00009EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009EF0
.text$di:00009EF0 ; =============== S U B R O U T I N E =======================================
.text$di:00009EF0
.text$di:00009EF0 ; Attributes: bp-based frame
.text$di:00009EF0
.text$di:00009EF0 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:00009EF0 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00009EF0                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:00009EF0                 push    ebp
.text$di:00009EF1                 mov     ebp, esp
.text$di:00009EF3                 push    0               ; unsigned int
.text$di:00009EF5                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00009EFA                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00009EFF                 pop     ebp
.text$di:00009F00                 retn
.text$di:00009F00 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00009F00
.text$di:00009F00 ; ---------------------------------------------------------------------------
.text$di:00009F01                 align 4
.text$di:00009F01 _text$di        ends
.text$di:00009F01
.text$di:00009F04 ; ===========================================================================
.text$di:00009F04
.text$di:00009F04 ; Segment type: Pure code
.text$di:00009F04 ; Segment permissions: Read/Execute
.text$di:00009F04 _text$di        segment para public 'CODE' use32
.text$di:00009F04                 assume cs:_text$di
.text$di:00009F04                 ;org 9F04h
.text$di:00009F04 ; COMDAT (pick any)
.text$di:00009F04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009F04
.text$di:00009F04 ; =============== S U B R O U T I N E =======================================
.text$di:00009F04
.text$di:00009F04 ; Attributes: bp-based frame
.text$di:00009F04
.text$di:00009F04 ; void __cdecl std::`dynamic initializer for '_Tuple_alloc''(void)
.text$di:00009F04 ??__E_Tuple_alloc@std@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:__Tuple_alloc$initializer$o
.text$di:00009F04
.text$di:00009F04 var_1           = byte ptr -1
.text$di:00009F04
.text$di:00009F04                 push    ebp
.text$di:00009F05                 mov     ebp, esp
.text$di:00009F07                 push    ecx
.text$di:00009F08                 xor     eax, eax
.text$di:00009F0A                 mov     [ebp+var_1], al
.text$di:00009F0D                 mov     esp, ebp
.text$di:00009F0F                 pop     ebp
.text$di:00009F10                 retn
.text$di:00009F10 ??__E_Tuple_alloc@std@@YAXXZ endp
.text$di:00009F10
.text$di:00009F10 ; ---------------------------------------------------------------------------
.text$di:00009F11                 align 4
.text$di:00009F11 _text$di        ends
.text$di:00009F11
.text$di:00009F14 ; ===========================================================================
.text$di:00009F14
.text$di:00009F14 ; Segment type: Pure code
.text$di:00009F14 ; Segment permissions: Read/Execute
.text$di:00009F14 _text$di        segment para public 'CODE' use32
.text$di:00009F14                 assume cs:_text$di
.text$di:00009F14                 ;org 9F14h
.text$di:00009F14 ; COMDAT (pick any)
.text$di:00009F14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009F14
.text$di:00009F14 ; =============== S U B R O U T I N E =======================================
.text$di:00009F14
.text$di:00009F14 ; Attributes: bp-based frame
.text$di:00009F14
.text$di:00009F14 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00009F14 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00009F14
.text$di:00009F14 var_1           = byte ptr -1
.text$di:00009F14
.text$di:00009F14                 push    ebp
.text$di:00009F15                 mov     ebp, esp
.text$di:00009F17                 push    ecx
.text$di:00009F18                 xor     eax, eax
.text$di:00009F1A                 mov     [ebp+var_1], al
.text$di:00009F1D                 mov     esp, ebp
.text$di:00009F1F                 pop     ebp
.text$di:00009F20                 retn
.text$di:00009F20 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00009F20
.text$di:00009F20 ; ---------------------------------------------------------------------------
.text$di:00009F21                 align 4
.text$di:00009F21 _text$di        ends
.text$di:00009F21
.text$di:00009F24 ; ===========================================================================
.text$di:00009F24
.text$di:00009F24 ; Segment type: Pure code
.text$di:00009F24 ; Segment permissions: Read/Execute
.text$di:00009F24 _text$di        segment para public 'CODE' use32
.text$di:00009F24                 assume cs:_text$di
.text$di:00009F24                 ;org 9F24h
.text$di:00009F24 ; COMDAT (pick any)
.text$di:00009F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009F24
.text$di:00009F24 ; =============== S U B R O U T I N E =======================================
.text$di:00009F24
.text$di:00009F24 ; Attributes: bp-based frame
.text$di:00009F24
.text$di:00009F24 ; void __cdecl std::`dynamic initializer for 'ignore''(void)
.text$di:00009F24 ??__Eignore@std@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_ignore$initializer$o
.text$di:00009F24                 push    ebp
.text$di:00009F25                 mov     ebp, esp
.text$di:00009F27                 mov     ecx, offset _ignore ; this
.text$di:00009F2C                 call    ??0_Ignore@std@@QAE@XZ ; std::_Ignore::_Ignore(void)
.text$di:00009F31                 pop     ebp
.text$di:00009F32                 retn
.text$di:00009F32 ??__Eignore@std@@YAXXZ endp
.text$di:00009F32
.text$di:00009F32 ; ---------------------------------------------------------------------------
.text$di:00009F33                 align 4
.text$di:00009F33 _text$di        ends
.text$di:00009F33
.text$di:00009F34 ; ===========================================================================
.text$di:00009F34
.text$di:00009F34 ; Segment type: Pure code
.text$di:00009F34 ; Segment permissions: Read/Execute
.text$di:00009F34 _text$di        segment para public 'CODE' use32
.text$di:00009F34                 assume cs:_text$di
.text$di:00009F34                 ;org 9F34h
.text$di:00009F34 ; COMDAT (pick any)
.text$di:00009F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00009F34
.text$di:00009F34 ; =============== S U B R O U T I N E =======================================
.text$di:00009F34
.text$di:00009F34 ; Attributes: bp-based frame
.text$di:00009F34
.text$di:00009F34 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00009F34 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00009F34                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00009F34
.text$di:00009F34 var_1           = byte ptr -1
.text$di:00009F34
.text$di:00009F34                 push    ebp
.text$di:00009F35                 mov     ebp, esp
.text$di:00009F37                 push    ecx
.text$di:00009F38                 xor     eax, eax
.text$di:00009F3A                 mov     [ebp+var_1], al
.text$di:00009F3D                 mov     esp, ebp
.text$di:00009F3F                 pop     ebp
.text$di:00009F40                 retn
.text$di:00009F40 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:00009F40
.text$di:00009F40 ; ---------------------------------------------------------------------------
.text$di:00009F41                 align 4
.text$di:00009F41 _text$di        ends
.text$di:00009F41
.text$yd:00009F44 ; ===========================================================================
.text$yd:00009F44
.text$yd:00009F44 ; Segment type: Pure code
.text$yd:00009F44 ; Segment permissions: Read/Execute
.text$yd:00009F44 _text$yd        segment para public 'CODE' use32
.text$yd:00009F44                 assume cs:_text$yd
.text$yd:00009F44                 ;org 9F44h
.text$yd:00009F44 ; COMDAT (pick any)
.text$yd:00009F44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00009F44
.text$yd:00009F44 ; =============== S U B R O U T I N E =======================================
.text$yd:00009F44
.text$yd:00009F44 ; Attributes: bp-based frame
.text$yd:00009F44
.text$yd:00009F44 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00009F44 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00009F44                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00009F44                 push    ebp
.text$yd:00009F45                 mov     ebp, esp
.text$yd:00009F47                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00009F4C                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:00009F51                 pop     ebp
.text$yd:00009F52                 retn
.text$yd:00009F52 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:00009F52
.text$yd:00009F52 ; ---------------------------------------------------------------------------
.text$yd:00009F53                 align 4
.text$yd:00009F53 _text$yd        ends
.text$yd:00009F53
.text$yd:00009F54 ; ===========================================================================
.text$yd:00009F54
.text$yd:00009F54 ; Segment type: Pure code
.text$yd:00009F54 ; Segment permissions: Read/Execute
.text$yd:00009F54 _text$yd        segment para public 'CODE' use32
.text$yd:00009F54                 assume cs:_text$yd
.text$yd:00009F54                 ;org 9F54h
.text$yd:00009F54 ; COMDAT (pick any)
.text$yd:00009F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00009F54
.text$yd:00009F54 ; =============== S U B R O U T I N E =======================================
.text$yd:00009F54
.text$yd:00009F54 ; Attributes: bp-based frame
.text$yd:00009F54
.text$yd:00009F54 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00009F54 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00009F54                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00009F54                 push    ebp
.text$yd:00009F55                 mov     ebp, esp
.text$yd:00009F57                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00009F5C                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00009F61                 pop     ebp
.text$yd:00009F62                 retn
.text$yd:00009F62 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:00009F62
.text$yd:00009F62 ; ---------------------------------------------------------------------------
.text$yd:00009F63                 align 4
.text$yd:00009F63 _text$yd        ends
.text$yd:00009F63
.text$yd:00009F64 ; ===========================================================================
.text$yd:00009F64
.text$yd:00009F64 ; Segment type: Pure code
.text$yd:00009F64 ; Segment permissions: Read/Execute
.text$yd:00009F64 _text$yd        segment para public 'CODE' use32
.text$yd:00009F64                 assume cs:_text$yd
.text$yd:00009F64                 ;org 9F64h
.text$yd:00009F64 ; COMDAT (pick any)
.text$yd:00009F64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00009F64
.text$yd:00009F64 ; =============== S U B R O U T I N E =======================================
.text$yd:00009F64
.text$yd:00009F64 ; Attributes: bp-based frame
.text$yd:00009F64
.text$yd:00009F64 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00009F64 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00009F64                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00009F64                 push    ebp
.text$yd:00009F65                 mov     ebp, esp
.text$yd:00009F67                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00009F6C                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00009F71                 pop     ebp
.text$yd:00009F72                 retn
.text$yd:00009F72 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:00009F72
.text$yd:00009F72 ; ---------------------------------------------------------------------------
.text$yd:00009F73                 align 4
.text$yd:00009F73 _text$yd        ends
.text$yd:00009F73
.text$mn:00009F74 ; ===========================================================================
.text$mn:00009F74
.text$mn:00009F74 ; Segment type: Pure code
.text$mn:00009F74 ; Segment permissions: Read/Execute
.text$mn:00009F74 _text$mn        segment para public 'CODE' use32
.text$mn:00009F74                 assume cs:_text$mn
.text$mn:00009F74                 ;org 9F74h
.text$mn:00009F74 ; COMDAT (pick any)
.text$mn:00009F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F74
.text$mn:00009F74 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F74
.text$mn:00009F74 ; Attributes: bp-based frame
.text$mn:00009F74
.text$mn:00009F74 ; void __thiscall TiXmlCursor::Clear(TiXmlCursor *__hidden this)
.text$mn:00009F74                 public ?Clear@TiXmlCursor@@QAEXXZ
.text$mn:00009F74 ?Clear@TiXmlCursor@@QAEXXZ proc near    ; CODE XREF: TiXmlCursor::TiXmlCursor(void)+Ap
.text$mn:00009F74
.text$mn:00009F74 var_4           = dword ptr -4
.text$mn:00009F74
.text$mn:00009F74                 push    ebp
.text$mn:00009F75                 mov     ebp, esp
.text$mn:00009F77                 push    ecx
.text$mn:00009F78                 mov     [ebp+var_4], ecx
.text$mn:00009F7B                 mov     eax, [ebp+var_4]
.text$mn:00009F7E                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text$mn:00009F85                 mov     ecx, [ebp+var_4]
.text$mn:00009F88                 mov     dword ptr [ecx], 0FFFFFFFFh
.text$mn:00009F8E                 mov     esp, ebp
.text$mn:00009F90                 pop     ebp
.text$mn:00009F91                 retn
.text$mn:00009F91 ?Clear@TiXmlCursor@@QAEXXZ endp
.text$mn:00009F91
.text$mn:00009F91 ; ---------------------------------------------------------------------------
.text$mn:00009F92                 align 4
.text$mn:00009F92 _text$mn        ends
.text$mn:00009F92
.text$mn:00009F94 ; ===========================================================================
.text$mn:00009F94
.text$mn:00009F94 ; Segment type: Pure code
.text$mn:00009F94 ; Segment permissions: Read/Execute
.text$mn:00009F94 _text$mn        segment para public 'CODE' use32
.text$mn:00009F94                 assume cs:_text$mn
.text$mn:00009F94                 ;org 9F94h
.text$mn:00009F94 ; COMDAT (pick any)
.text$mn:00009F94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009F94
.text$mn:00009F94 ; =============== S U B R O U T I N E =======================================
.text$mn:00009F94
.text$mn:00009F94 ; Attributes: bp-based frame
.text$mn:00009F94
.text$mn:00009F94 ; struct TiXmlElement *__thiscall TiXmlNode::ToElement(TiXmlNode *__hidden this)
.text$mn:00009F94                 public ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ
.text$mn:00009F94 ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ proc near
.text$mn:00009F94                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+FFp
.text$mn:00009F94                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+151p ...
.text$mn:00009F94
.text$mn:00009F94 var_8           = dword ptr -8
.text$mn:00009F94 var_4           = dword ptr -4
.text$mn:00009F94
.text$mn:00009F94                 push    ebp
.text$mn:00009F95                 mov     ebp, esp
.text$mn:00009F97                 sub     esp, 8
.text$mn:00009F9A                 mov     [ebp+var_4], ecx
.text$mn:00009F9D                 cmp     [ebp+var_4], 0
.text$mn:00009FA1                 jz      short loc_9FB4
.text$mn:00009FA3                 mov     eax, [ebp+var_4]
.text$mn:00009FA6                 cmp     dword ptr [eax+10h], 1
.text$mn:00009FAA                 jnz     short loc_9FB4
.text$mn:00009FAC                 mov     ecx, [ebp+var_4]
.text$mn:00009FAF                 mov     [ebp+var_8], ecx
.text$mn:00009FB2                 jmp     short loc_9FBB
.text$mn:00009FB4 ; ---------------------------------------------------------------------------
.text$mn:00009FB4
.text$mn:00009FB4 loc_9FB4:                               ; CODE XREF: TiXmlNode::ToElement(void)+Dj
.text$mn:00009FB4                                         ; TiXmlNode::ToElement(void)+16j
.text$mn:00009FB4                 mov     [ebp+var_8], 0
.text$mn:00009FBB
.text$mn:00009FBB loc_9FBB:                               ; CODE XREF: TiXmlNode::ToElement(void)+1Ej
.text$mn:00009FBB                 mov     eax, [ebp+var_8]
.text$mn:00009FBE                 mov     esp, ebp
.text$mn:00009FC0                 pop     ebp
.text$mn:00009FC1                 retn
.text$mn:00009FC1 ?ToElement@TiXmlNode@@QBEPAVTiXmlElement@@XZ endp
.text$mn:00009FC1
.text$mn:00009FC1 ; ---------------------------------------------------------------------------
.text$mn:00009FC2                 align 4
.text$mn:00009FC2 _text$mn        ends
.text$mn:00009FC2
.text$mn:00009FC4 ; ===========================================================================
.text$mn:00009FC4
.text$mn:00009FC4 ; Segment type: Pure code
.text$mn:00009FC4 ; Segment permissions: Read/Execute
.text$mn:00009FC4 _text$mn        segment para public 'CODE' use32
.text$mn:00009FC4                 assume cs:_text$mn
.text$mn:00009FC4                 ;org 9FC4h
.text$mn:00009FC4 ; COMDAT (pick any)
.text$mn:00009FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009FC4
.text$mn:00009FC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00009FC4
.text$mn:00009FC4 ; Attributes: bp-based frame
.text$mn:00009FC4
.text$mn:00009FC4 ; int __thiscall TiXmlNode::Type(TiXmlNode *__hidden this)
.text$mn:00009FC4                 public ?Type@TiXmlNode@@UBEHXZ
.text$mn:00009FC4 ?Type@TiXmlNode@@UBEHXZ proc near       ; DATA XREF: .rdata:00010EFCo
.text$mn:00009FC4
.text$mn:00009FC4 var_4           = dword ptr -4
.text$mn:00009FC4
.text$mn:00009FC4                 push    ebp
.text$mn:00009FC5                 mov     ebp, esp
.text$mn:00009FC7                 push    ecx
.text$mn:00009FC8                 mov     [ebp+var_4], ecx
.text$mn:00009FCB                 mov     eax, [ebp+var_4]
.text$mn:00009FCE                 mov     eax, [eax+10h]
.text$mn:00009FD1                 mov     esp, ebp
.text$mn:00009FD3                 pop     ebp
.text$mn:00009FD4                 retn
.text$mn:00009FD4 ?Type@TiXmlNode@@UBEHXZ endp
.text$mn:00009FD4
.text$mn:00009FD4 ; ---------------------------------------------------------------------------
.text$mn:00009FD5                 align 4
.text$mn:00009FD5 _text$mn        ends
.text$mn:00009FD5
.text$mn:00009FD8 ; ===========================================================================
.text$mn:00009FD8
.text$mn:00009FD8 ; Segment type: Pure code
.text$mn:00009FD8 ; Segment permissions: Read/Execute
.text$mn:00009FD8 _text$mn        segment para public 'CODE' use32
.text$mn:00009FD8                 assume cs:_text$mn
.text$mn:00009FD8                 ;org 9FD8h
.text$mn:00009FD8 ; COMDAT (pick any)
.text$mn:00009FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009FD8
.text$mn:00009FD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00009FD8
.text$mn:00009FD8 ; Attributes: bp-based frame
.text$mn:00009FD8
.text$mn:00009FD8 ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:00009FD8                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:00009FD8 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:00009FD8                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+3Cp
.text$mn:00009FD8                                         ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)+45p ...
.text$mn:00009FD8
.text$mn:00009FD8 var_1C          = byte ptr -1Ch
.text$mn:00009FD8 var_18          = byte ptr -18h
.text$mn:00009FD8 var_14          = dword ptr -14h
.text$mn:00009FD8 var_10          = dword ptr -10h
.text$mn:00009FD8 var_C           = dword ptr -0Ch
.text$mn:00009FD8 var_4           = dword ptr -4
.text$mn:00009FD8 arg_0           = dword ptr  8
.text$mn:00009FD8
.text$mn:00009FD8                 push    ebp
.text$mn:00009FD9                 mov     ebp, esp
.text$mn:00009FDB                 push    0FFFFFFFFh
.text$mn:00009FDD                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:00009FE2                 mov     eax, large fs:0
.text$mn:00009FE8                 push    eax
.text$mn:00009FE9                 sub     esp, 10h
.text$mn:00009FEC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009FF1                 xor     eax, ebp
.text$mn:00009FF3                 push    eax
.text$mn:00009FF4                 lea     eax, [ebp+var_C]
.text$mn:00009FF7                 mov     large fs:0, eax
.text$mn:00009FFD                 mov     [ebp+var_10], ecx
.text$mn:0000A000                 cmp     [ebp+arg_0], 0
.text$mn:0000A004                 jnz     short loc_A030
.text$mn:0000A006                 push    3               ; int
.text$mn:0000A008                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000A00B                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000A010                 mov     [ebp+var_4], 0
.text$mn:0000A017                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000A01A                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:0000A01F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A026                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000A029                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000A02E                 jmp     short loc_A087
.text$mn:0000A030 ; ---------------------------------------------------------------------------
.text$mn:0000A030
.text$mn:0000A030 loc_A030:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:0000A030                 mov     eax, [ebp+arg_0]
.text$mn:0000A033                 mov     ecx, [eax]
.text$mn:0000A035                 mov     [ebp+var_14], ecx
.text$mn:0000A038                 mov     edx, [ebp+var_10]
.text$mn:0000A03B                 mov     eax, [edx]
.text$mn:0000A03D                 cmp     eax, [ebp+var_14]
.text$mn:0000A040                 jz      short loc_A087
.text$mn:0000A042                 push    3               ; int
.text$mn:0000A044                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000A047                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000A04C                 mov     [ebp+var_4], 1
.text$mn:0000A053                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000A056                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:0000A05B                 mov     ecx, [ebp+var_10]
.text$mn:0000A05E                 mov     edx, [ebp+var_14]
.text$mn:0000A061                 mov     eax, [edx+4]
.text$mn:0000A064                 mov     [ecx+4], eax
.text$mn:0000A067                 mov     ecx, [ebp+var_14]
.text$mn:0000A06A                 mov     edx, [ebp+var_10]
.text$mn:0000A06D                 mov     [ecx+4], edx
.text$mn:0000A070                 mov     eax, [ebp+var_10]
.text$mn:0000A073                 mov     ecx, [ebp+var_14]
.text$mn:0000A076                 mov     [eax], ecx
.text$mn:0000A078                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A07F                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000A082                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000A087
.text$mn:0000A087 loc_A087:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:0000A087                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:0000A087                 mov     ecx, [ebp+var_C]
.text$mn:0000A08A                 mov     large fs:0, ecx
.text$mn:0000A091                 pop     ecx
.text$mn:0000A092                 mov     esp, ebp
.text$mn:0000A094                 pop     ebp
.text$mn:0000A095                 retn    4
.text$mn:0000A095 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:0000A095
.text$mn:0000A095 _text$mn        ends
.text$mn:0000A095
.text$x:0000A098 ; ===========================================================================
.text$x:0000A098
.text$x:0000A098 ; Segment type: Pure code
.text$x:0000A098 ; Segment permissions: Read/Execute
.text$x:0000A098 _text$x         segment para public 'CODE' use32
.text$x:0000A098                 assume cs:_text$x
.text$x:0000A098                 ;org 0A098h
.text$x:0000A098 ; COMDAT (pick associative to section at 9FD8)
.text$x:0000A098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A098
.text$x:0000A098 ; =============== S U B R O U T I N E =======================================
.text$x:0000A098
.text$x:0000A098
.text$x:0000A098 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:0000A098                                         ; DATA XREF: .xdata$x:0000EEF0o
.text$x:0000A098                 lea     ecx, [ebp-18h]  ; this
.text$x:0000A09B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000A09B __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:0000A09B
.text$x:0000A0A0
.text$x:0000A0A0 ; =============== S U B R O U T I N E =======================================
.text$x:0000A0A0
.text$x:0000A0A0
.text$x:0000A0A0 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:0000A0A0                                         ; DATA XREF: .xdata$x:0000EEF8o
.text$x:0000A0A0                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000A0A3                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000A0A3 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:0000A0A3
.text$x:0000A0A8
.text$x:0000A0A8 ; =============== S U B R O U T I N E =======================================
.text$x:0000A0A8
.text$x:0000A0A8
.text$x:0000A0A8 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:0000A0A8                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:0000A0A8
.text$x:0000A0A8 arg_4           = dword ptr  8
.text$x:0000A0A8
.text$x:0000A0A8                 mov     edx, [esp+arg_4]
.text$x:0000A0AC                 lea     eax, [edx+0Ch]
.text$x:0000A0AF                 mov     ecx, [edx-14h]
.text$x:0000A0B2                 xor     ecx, eax
.text$x:0000A0B4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A0B9                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:0000A0BE                 jmp     ___CxxFrameHandler3
.text$x:0000A0BE __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:0000A0BE
.text$x:0000A0BE ; ---------------------------------------------------------------------------
.text$x:0000A0C3                 align 4
.text$x:0000A0C3 _text$x         ends
.text$x:0000A0C3
.text$mn:0000A0C4 ; ===========================================================================
.text$mn:0000A0C4
.text$mn:0000A0C4 ; Segment type: Pure code
.text$mn:0000A0C4 ; Segment permissions: Read/Execute
.text$mn:0000A0C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A0C4                 assume cs:_text$mn
.text$mn:0000A0C4                 ;org 0A0C4h
.text$mn:0000A0C4 ; COMDAT (pick any)
.text$mn:0000A0C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A0C4
.text$mn:0000A0C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A0C4
.text$mn:0000A0C4 ; Attributes: bp-based frame
.text$mn:0000A0C4
.text$mn:0000A0C4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:0000A0C4                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000A0C4 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000A0C4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:0000A0C4
.text$mn:0000A0C4 var_10          = byte ptr -10h
.text$mn:0000A0C4 var_8           = dword ptr -8
.text$mn:0000A0C4 var_1           = byte ptr -1
.text$mn:0000A0C4
.text$mn:0000A0C4                 push    ebp
.text$mn:0000A0C5                 mov     ebp, esp
.text$mn:0000A0C7                 sub     esp, 10h
.text$mn:0000A0CA                 mov     [ebp+var_8], ecx
.text$mn:0000A0CD                 lea     ecx, [ebp+var_1]
.text$mn:0000A0D0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000A0D5                 push    1
.text$mn:0000A0D7                 lea     ecx, [ebp+var_1]
.text$mn:0000A0DA                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000A0DF                 mov     ecx, [ebp+var_8]
.text$mn:0000A0E2                 mov     [ecx], eax
.text$mn:0000A0E4                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000A0E7                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000A0EC                 push    eax             ; int
.text$mn:0000A0ED                 mov     edx, [ebp+var_8]
.text$mn:0000A0F0                 mov     eax, [edx]
.text$mn:0000A0F2                 push    eax             ; void *
.text$mn:0000A0F3                 lea     ecx, [ebp+var_1]
.text$mn:0000A0F6                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000A0FB                 mov     ecx, [ebp+var_8]
.text$mn:0000A0FE                 mov     edx, [ecx]
.text$mn:0000A100                 mov     eax, [ebp+var_8]
.text$mn:0000A103                 mov     [edx], eax
.text$mn:0000A105                 mov     esp, ebp
.text$mn:0000A107                 pop     ebp
.text$mn:0000A108                 retn
.text$mn:0000A108 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000A108
.text$mn:0000A108 ; ---------------------------------------------------------------------------
.text$mn:0000A109                 align 4
.text$mn:0000A109 _text$mn        ends
.text$mn:0000A109
.text$mn:0000A10C ; ===========================================================================
.text$mn:0000A10C
.text$mn:0000A10C ; Segment type: Pure code
.text$mn:0000A10C ; Segment permissions: Read/Execute
.text$mn:0000A10C _text$mn        segment para public 'CODE' use32
.text$mn:0000A10C                 assume cs:_text$mn
.text$mn:0000A10C                 ;org 0A10Ch
.text$mn:0000A10C ; COMDAT (pick any)
.text$mn:0000A10C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A10C
.text$mn:0000A10C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A10C
.text$mn:0000A10C ; Attributes: bp-based frame
.text$mn:0000A10C
.text$mn:0000A10C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:0000A10C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000A10C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000A10C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:0000A10C
.text$mn:0000A10C var_10          = byte ptr -10h
.text$mn:0000A10C var_8           = dword ptr -8
.text$mn:0000A10C var_1           = byte ptr -1
.text$mn:0000A10C
.text$mn:0000A10C                 push    ebp
.text$mn:0000A10D                 mov     ebp, esp
.text$mn:0000A10F                 sub     esp, 10h
.text$mn:0000A112                 mov     [ebp+var_8], ecx
.text$mn:0000A115                 lea     ecx, [ebp+var_1]
.text$mn:0000A118                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000A11D                 push    1
.text$mn:0000A11F                 lea     ecx, [ebp+var_1]
.text$mn:0000A122                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000A127                 mov     ecx, [ebp+var_8]
.text$mn:0000A12A                 mov     [ecx], eax
.text$mn:0000A12C                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000A12F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000A134                 push    eax             ; int
.text$mn:0000A135                 mov     edx, [ebp+var_8]
.text$mn:0000A138                 mov     eax, [edx]
.text$mn:0000A13A                 push    eax             ; void *
.text$mn:0000A13B                 lea     ecx, [ebp+var_1]
.text$mn:0000A13E                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000A143                 mov     ecx, [ebp+var_8]
.text$mn:0000A146                 mov     edx, [ecx]
.text$mn:0000A148                 mov     eax, [ebp+var_8]
.text$mn:0000A14B                 mov     [edx], eax
.text$mn:0000A14D                 mov     esp, ebp
.text$mn:0000A14F                 pop     ebp
.text$mn:0000A150                 retn
.text$mn:0000A150 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000A150
.text$mn:0000A150 ; ---------------------------------------------------------------------------
.text$mn:0000A151                 align 4
.text$mn:0000A151 _text$mn        ends
.text$mn:0000A151
.text$mn:0000A154 ; ===========================================================================
.text$mn:0000A154
.text$mn:0000A154 ; Segment type: Pure code
.text$mn:0000A154 ; Segment permissions: Read/Execute
.text$mn:0000A154 _text$mn        segment para public 'CODE' use32
.text$mn:0000A154                 assume cs:_text$mn
.text$mn:0000A154                 ;org 0A154h
.text$mn:0000A154 ; COMDAT (pick any)
.text$mn:0000A154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A154
.text$mn:0000A154 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A154
.text$mn:0000A154 ; Attributes: bp-based frame
.text$mn:0000A154
.text$mn:0000A154 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>>::_Alloc_proxy(void)
.text$mn:0000A154                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAEXXZ
.text$mn:0000A154 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:0000A154                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(std::allocator<std::pair<int,int>> const &)+38p
.text$mn:0000A154
.text$mn:0000A154 var_10          = byte ptr -10h
.text$mn:0000A154 var_8           = dword ptr -8
.text$mn:0000A154 var_1           = byte ptr -1
.text$mn:0000A154
.text$mn:0000A154                 push    ebp
.text$mn:0000A155                 mov     ebp, esp
.text$mn:0000A157                 sub     esp, 10h
.text$mn:0000A15A                 mov     [ebp+var_8], ecx
.text$mn:0000A15D                 lea     ecx, [ebp+var_1]
.text$mn:0000A160                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000A165                 push    1
.text$mn:0000A167                 lea     ecx, [ebp+var_1]
.text$mn:0000A16A                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:0000A16F                 mov     ecx, [ebp+var_8]
.text$mn:0000A172                 mov     [ecx], eax
.text$mn:0000A174                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000A177                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000A17C                 push    eax             ; int
.text$mn:0000A17D                 mov     edx, [ebp+var_8]
.text$mn:0000A180                 mov     eax, [edx]
.text$mn:0000A182                 push    eax             ; void *
.text$mn:0000A183                 lea     ecx, [ebp+var_1]
.text$mn:0000A186                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000A18B                 mov     ecx, [ebp+var_8]
.text$mn:0000A18E                 mov     edx, [ecx]
.text$mn:0000A190                 mov     eax, [ebp+var_8]
.text$mn:0000A193                 mov     [edx], eax
.text$mn:0000A195                 mov     esp, ebp
.text$mn:0000A197                 pop     ebp
.text$mn:0000A198                 retn
.text$mn:0000A198 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000A198
.text$mn:0000A198 ; ---------------------------------------------------------------------------
.text$mn:0000A199                 align 4
.text$mn:0000A199 _text$mn        ends
.text$mn:0000A199
.text$mn:0000A19C ; ===========================================================================
.text$mn:0000A19C
.text$mn:0000A19C ; Segment type: Pure code
.text$mn:0000A19C ; Segment permissions: Read/Execute
.text$mn:0000A19C _text$mn        segment para public 'CODE' use32
.text$mn:0000A19C                 assume cs:_text$mn
.text$mn:0000A19C                 ;org 0A19Ch
.text$mn:0000A19C ; COMDAT (pick any)
.text$mn:0000A19C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A19C
.text$mn:0000A19C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A19C
.text$mn:0000A19C ; Attributes: bp-based frame
.text$mn:0000A19C
.text$mn:0000A19C ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:0000A19C                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:0000A19C ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:0000A19C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+38p
.text$mn:0000A19C
.text$mn:0000A19C var_10          = byte ptr -10h
.text$mn:0000A19C var_8           = dword ptr -8
.text$mn:0000A19C var_1           = byte ptr -1
.text$mn:0000A19C
.text$mn:0000A19C                 push    ebp
.text$mn:0000A19D                 mov     ebp, esp
.text$mn:0000A19F                 sub     esp, 10h
.text$mn:0000A1A2                 mov     [ebp+var_8], ecx
.text$mn:0000A1A5                 lea     ecx, [ebp+var_1]
.text$mn:0000A1A8                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000A1AD                 push    1
.text$mn:0000A1AF                 lea     ecx, [ebp+var_1]
.text$mn:0000A1B2                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:0000A1B7                 mov     ecx, [ebp+var_8]
.text$mn:0000A1BA                 mov     [ecx], eax
.text$mn:0000A1BC                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000A1BF                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:0000A1C4                 push    eax             ; int
.text$mn:0000A1C5                 mov     edx, [ebp+var_8]
.text$mn:0000A1C8                 mov     eax, [edx]
.text$mn:0000A1CA                 push    eax             ; void *
.text$mn:0000A1CB                 lea     ecx, [ebp+var_1]
.text$mn:0000A1CE                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:0000A1D3                 mov     ecx, [ebp+var_8]
.text$mn:0000A1D6                 mov     edx, [ecx]
.text$mn:0000A1D8                 mov     eax, [ebp+var_8]
.text$mn:0000A1DB                 mov     [edx], eax
.text$mn:0000A1DD                 mov     esp, ebp
.text$mn:0000A1DF                 pop     ebp
.text$mn:0000A1E0                 retn
.text$mn:0000A1E0 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000A1E0
.text$mn:0000A1E0 ; ---------------------------------------------------------------------------
.text$mn:0000A1E1                 align 4
.text$mn:0000A1E1 _text$mn        ends
.text$mn:0000A1E1
.text$mn:0000A1E4 ; ===========================================================================
.text$mn:0000A1E4
.text$mn:0000A1E4 ; Segment type: Pure code
.text$mn:0000A1E4 ; Segment permissions: Read/Execute
.text$mn:0000A1E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000A1E4                 assume cs:_text$mn
.text$mn:0000A1E4                 ;org 0A1E4h
.text$mn:0000A1E4 ; COMDAT (pick any)
.text$mn:0000A1E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A1E4
.text$mn:0000A1E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A1E4
.text$mn:0000A1E4 ; Attributes: bp-based frame
.text$mn:0000A1E4
.text$mn:0000A1E4 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:0000A1E4                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:0000A1E4 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:0000A1E4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+60p
.text$mn:0000A1E4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+E2p
.text$mn:0000A1E4
.text$mn:0000A1E4 var_8           = dword ptr -8
.text$mn:0000A1E4 var_1           = byte ptr -1
.text$mn:0000A1E4 arg_0           = dword ptr  8
.text$mn:0000A1E4
.text$mn:0000A1E4                 push    ebp
.text$mn:0000A1E5                 mov     ebp, esp
.text$mn:0000A1E7                 sub     esp, 8
.text$mn:0000A1EA                 mov     [ebp+var_8], ecx
.text$mn:0000A1ED                 mov     eax, [ebp+arg_0]
.text$mn:0000A1F0                 cmp     dword ptr [eax+18h], 8
.text$mn:0000A1F4                 jnb     short loc_A218
.text$mn:0000A1F6                 mov     ecx, [ebp+arg_0]
.text$mn:0000A1F9                 mov     edx, [ecx+14h]
.text$mn:0000A1FC                 add     edx, 1
.text$mn:0000A1FF                 push    edx             ; int
.text$mn:0000A200                 mov     eax, [ebp+arg_0]
.text$mn:0000A203                 add     eax, 4
.text$mn:0000A206                 push    eax             ; Src
.text$mn:0000A207                 mov     ecx, [ebp+var_8]
.text$mn:0000A20A                 add     ecx, 4
.text$mn:0000A20D                 push    ecx             ; Dst
.text$mn:0000A20E                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000A213                 add     esp, 0Ch
.text$mn:0000A216                 jmp     short loc_A243
.text$mn:0000A218 ; ---------------------------------------------------------------------------
.text$mn:0000A218
.text$mn:0000A218 loc_A218:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:0000A218                 mov     edx, [ebp+arg_0]
.text$mn:0000A21B                 add     edx, 4
.text$mn:0000A21E                 push    edx             ; int
.text$mn:0000A21F                 mov     eax, [ebp+var_8]
.text$mn:0000A222                 add     eax, 4
.text$mn:0000A225                 push    eax             ; void *
.text$mn:0000A226                 lea     ecx, [ebp+var_1]
.text$mn:0000A229                 push    ecx
.text$mn:0000A22A                 mov     ecx, [ebp+var_8]
.text$mn:0000A22D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000A232                 mov     ecx, eax
.text$mn:0000A234                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000A239                 mov     edx, [ebp+arg_0]
.text$mn:0000A23C                 mov     dword ptr [edx+4], 0
.text$mn:0000A243
.text$mn:0000A243 loc_A243:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:0000A243                 mov     eax, [ebp+var_8]
.text$mn:0000A246                 mov     ecx, [ebp+arg_0]
.text$mn:0000A249                 mov     edx, [ecx+14h]
.text$mn:0000A24C                 mov     [eax+14h], edx
.text$mn:0000A24F                 mov     eax, [ebp+var_8]
.text$mn:0000A252                 mov     ecx, [ebp+arg_0]
.text$mn:0000A255                 mov     edx, [ecx+18h]
.text$mn:0000A258                 mov     [eax+18h], edx
.text$mn:0000A25B                 push    0
.text$mn:0000A25D                 push    0
.text$mn:0000A25F                 mov     ecx, [ebp+arg_0]
.text$mn:0000A262                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000A267                 mov     esp, ebp
.text$mn:0000A269                 pop     ebp
.text$mn:0000A26A                 retn    4
.text$mn:0000A26A ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:0000A26A
.text$mn:0000A26A ; ---------------------------------------------------------------------------
.text$mn:0000A26D                 align 10h
.text$mn:0000A26D _text$mn        ends
.text$mn:0000A26D
.text$mn:0000A270 ; ===========================================================================
.text$mn:0000A270
.text$mn:0000A270 ; Segment type: Pure code
.text$mn:0000A270 ; Segment permissions: Read/Execute
.text$mn:0000A270 _text$mn        segment para public 'CODE' use32
.text$mn:0000A270                 assume cs:_text$mn
.text$mn:0000A270                 ;org 0A270h
.text$mn:0000A270 ; COMDAT (pick any)
.text$mn:0000A270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A270
.text$mn:0000A270 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A270
.text$mn:0000A270 ; Attributes: bp-based frame
.text$mn:0000A270
.text$mn:0000A270 ; protected: bool __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Buy(unsigned int)
.text$mn:0000A270                 public ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAE_NI@Z
.text$mn:0000A270 ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAE_NI@Z proc near
.text$mn:0000A270                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+62p
.text$mn:0000A270
.text$mn:0000A270 var_8           = dword ptr -8
.text$mn:0000A270 var_1           = byte ptr -1
.text$mn:0000A270 arg_0           = dword ptr  8
.text$mn:0000A270
.text$mn:0000A270                 push    ebp
.text$mn:0000A271                 mov     ebp, esp
.text$mn:0000A273                 sub     esp, 8
.text$mn:0000A276                 mov     [ebp+var_8], ecx
.text$mn:0000A279                 mov     eax, [ebp+var_8]
.text$mn:0000A27C                 mov     dword ptr [eax+4], 0
.text$mn:0000A283                 mov     ecx, [ebp+var_8]
.text$mn:0000A286                 mov     dword ptr [ecx+8], 0
.text$mn:0000A28D                 mov     edx, [ebp+var_8]
.text$mn:0000A290                 mov     dword ptr [edx+0Ch], 0
.text$mn:0000A297                 cmp     [ebp+arg_0], 0
.text$mn:0000A29B                 jnz     short loc_A2A3
.text$mn:0000A29D                 xor     al, al
.text$mn:0000A29F                 jmp     short loc_A2F5
.text$mn:0000A2A1 ; ---------------------------------------------------------------------------
.text$mn:0000A2A1                 jmp     short loc_A2F3
.text$mn:0000A2A3 ; ---------------------------------------------------------------------------
.text$mn:0000A2A3
.text$mn:0000A2A3 loc_A2A3:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+2Bj
.text$mn:0000A2A3                 mov     ecx, [ebp+var_8]
.text$mn:0000A2A6                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000A2AB                 cmp     eax, [ebp+arg_0]
.text$mn:0000A2AE                 jnb     short loc_A2BA
.text$mn:0000A2B0                 mov     ecx, [ebp+var_8]
.text$mn:0000A2B3                 call    ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)
.text$mn:0000A2B8                 jmp     short loc_A2F3
.text$mn:0000A2BA ; ---------------------------------------------------------------------------
.text$mn:0000A2BA
.text$mn:0000A2BA loc_A2BA:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+3Ej
.text$mn:0000A2BA                 mov     eax, [ebp+arg_0]
.text$mn:0000A2BD                 push    eax
.text$mn:0000A2BE                 lea     ecx, [ebp+var_1]
.text$mn:0000A2C1                 push    ecx
.text$mn:0000A2C2                 mov     ecx, [ebp+var_8]
.text$mn:0000A2C5                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000A2CA                 mov     ecx, eax
.text$mn:0000A2CC                 call    ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)
.text$mn:0000A2D1                 mov     edx, [ebp+var_8]
.text$mn:0000A2D4                 mov     [edx+4], eax
.text$mn:0000A2D7                 mov     eax, [ebp+var_8]
.text$mn:0000A2DA                 mov     ecx, [ebp+var_8]
.text$mn:0000A2DD                 mov     edx, [ecx+4]
.text$mn:0000A2E0                 mov     [eax+8], edx
.text$mn:0000A2E3                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:0000A2E7                 mov     ecx, [ebp+var_8]
.text$mn:0000A2EA                 add     eax, [ecx+4]
.text$mn:0000A2ED                 mov     edx, [ebp+var_8]
.text$mn:0000A2F0                 mov     [edx+0Ch], eax
.text$mn:0000A2F3
.text$mn:0000A2F3 loc_A2F3:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+31j
.text$mn:0000A2F3                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+48j
.text$mn:0000A2F3                 mov     al, 1
.text$mn:0000A2F5
.text$mn:0000A2F5 loc_A2F5:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+2Fj
.text$mn:0000A2F5                 mov     esp, ebp
.text$mn:0000A2F7                 pop     ebp
.text$mn:0000A2F8                 retn    4
.text$mn:0000A2F8 ?_Buy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAE_NI@Z endp
.text$mn:0000A2F8
.text$mn:0000A2F8 ; ---------------------------------------------------------------------------
.text$mn:0000A2FB                 align 4
.text$mn:0000A2FB _text$mn        ends
.text$mn:0000A2FB
.text$mn:0000A2FC ; ===========================================================================
.text$mn:0000A2FC
.text$mn:0000A2FC ; Segment type: Pure code
.text$mn:0000A2FC ; Segment permissions: Read/Execute
.text$mn:0000A2FC _text$mn        segment para public 'CODE' use32
.text$mn:0000A2FC                 assume cs:_text$mn
.text$mn:0000A2FC                 ;org 0A2FCh
.text$mn:0000A2FC ; COMDAT (pick any)
.text$mn:0000A2FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A2FC
.text$mn:0000A2FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A2FC
.text$mn:0000A2FC ; Attributes: bp-based frame
.text$mn:0000A2FC
.text$mn:0000A2FC ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:0000A2FC                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:0000A2FC ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:0000A2FC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:0000A2FC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Ap
.text$mn:0000A2FC
.text$mn:0000A2FC var_4           = dword ptr -4
.text$mn:0000A2FC
.text$mn:0000A2FC                 push    ebp
.text$mn:0000A2FD                 mov     ebp, esp
.text$mn:0000A2FF                 push    ecx
.text$mn:0000A300                 mov     [ebp+var_4], ecx
.text$mn:0000A303                 mov     esp, ebp
.text$mn:0000A305                 pop     ebp
.text$mn:0000A306                 retn    4
.text$mn:0000A306 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:0000A306
.text$mn:0000A306 ; ---------------------------------------------------------------------------
.text$mn:0000A309                 align 4
.text$mn:0000A309 _text$mn        ends
.text$mn:0000A309
.text$mn:0000A30C ; ===========================================================================
.text$mn:0000A30C
.text$mn:0000A30C ; Segment type: Pure code
.text$mn:0000A30C ; Segment permissions: Read/Execute
.text$mn:0000A30C _text$mn        segment para public 'CODE' use32
.text$mn:0000A30C                 assume cs:_text$mn
.text$mn:0000A30C                 ;org 0A30Ch
.text$mn:0000A30C ; COMDAT (pick any)
.text$mn:0000A30C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A30C
.text$mn:0000A30C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A30C
.text$mn:0000A30C ; Attributes: bp-based frame
.text$mn:0000A30C
.text$mn:0000A30C ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:0000A30C                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:0000A30C ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:0000A30C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+80p
.text$mn:0000A30C                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)+80p ...
.text$mn:0000A30C
.text$mn:0000A30C var_4           = dword ptr -4
.text$mn:0000A30C
.text$mn:0000A30C                 push    ebp
.text$mn:0000A30D                 mov     ebp, esp
.text$mn:0000A30F                 push    ecx
.text$mn:0000A310                 mov     [ebp+var_4], ecx
.text$mn:0000A313                 mov     eax, [ebp+var_4]
.text$mn:0000A316                 mov     dword ptr [eax], 0
.text$mn:0000A31C                 mov     esp, ebp
.text$mn:0000A31E                 pop     ebp
.text$mn:0000A31F                 retn
.text$mn:0000A31F ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:0000A31F
.text$mn:0000A31F _text$mn        ends
.text$mn:0000A31F
.text$mn:0000A320 ; ===========================================================================
.text$mn:0000A320
.text$mn:0000A320 ; Segment type: Pure code
.text$mn:0000A320 ; Segment permissions: Read/Execute
.text$mn:0000A320 _text$mn        segment para public 'CODE' use32
.text$mn:0000A320                 assume cs:_text$mn
.text$mn:0000A320                 ;org 0A320h
.text$mn:0000A320 ; COMDAT (pick any)
.text$mn:0000A320                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A320
.text$mn:0000A320 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A320
.text$mn:0000A320 ; Attributes: bp-based frame
.text$mn:0000A320
.text$mn:0000A320 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_Iterator_base12 *)
.text$mn:0000A320                 public ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:0000A320 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:0000A320                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+10p
.text$mn:0000A320                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+Ep
.text$mn:0000A320
.text$mn:0000A320 var_4           = dword ptr -4
.text$mn:0000A320 arg_0           = dword ptr  8
.text$mn:0000A320
.text$mn:0000A320                 push    ebp
.text$mn:0000A321                 mov     ebp, esp
.text$mn:0000A323                 push    ecx
.text$mn:0000A324                 push    esi
.text$mn:0000A325                 mov     [ebp+var_4], ecx
.text$mn:0000A328                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A32B                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A330                 test    eax, eax
.text$mn:0000A332                 jz      short loc_A34A
.text$mn:0000A334                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000A337                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A33C                 mov     esi, eax
.text$mn:0000A33E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000A341                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000A346                 cmp     esi, eax
.text$mn:0000A348                 jz      short loc_A3B2
.text$mn:0000A34A
.text$mn:0000A34A loc_A34A:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+12j
.text$mn:0000A34A                 push    0FAh ; '·'      ; unsigned int
.text$mn:0000A34F                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A354                 push    offset ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "string iterators incompatible"
.text$mn:0000A359                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000A35E                 add     esp, 0Ch
.text$mn:0000A361                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:0000A366                 test    eax, eax
.text$mn:0000A368                 jz      short loc_A36E
.text$mn:0000A36A                 xor     ecx, ecx
.text$mn:0000A36C                 jnz     short loc_A394
.text$mn:0000A36E
.text$mn:0000A36E loc_A36E:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+48j
.text$mn:0000A36E                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:0000A373                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000A378                 push    0
.text$mn:0000A37A                 push    0FBh ; 'v'
.text$mn:0000A37F                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A384                 push    2
.text$mn:0000A386                 call    __CrtDbgReportW
.text$mn:0000A38B                 add     esp, 18h
.text$mn:0000A38E                 cmp     eax, 1
.text$mn:0000A391                 jnz     short loc_A394
.text$mn:0000A393                 int     3               ; Trap to Debugger
.text$mn:0000A394
.text$mn:0000A394 loc_A394:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Cj
.text$mn:0000A394                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+71j
.text$mn:0000A394                 push    0
.text$mn:0000A396                 push    0FBh ; 'v'
.text$mn:0000A39B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000A3A0                 push    offset ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:0000A3A5                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:0000A3AA                 call    __invalid_parameter
.text$mn:0000A3AF                 add     esp, 14h
.text$mn:0000A3B2
.text$mn:0000A3B2 loc_A3B2:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+28j
.text$mn:0000A3B2                 pop     esi
.text$mn:0000A3B3                 mov     esp, ebp
.text$mn:0000A3B5                 pop     ebp
.text$mn:0000A3B6                 retn    4
.text$mn:0000A3B6 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:0000A3B6
.text$mn:0000A3B6 ; ---------------------------------------------------------------------------
.text$mn:0000A3B9                 align 4
.text$mn:0000A3B9 _text$mn        ends
.text$mn:0000A3B9
.text$mn:0000A3BC ; ===========================================================================
.text$mn:0000A3BC
.text$mn:0000A3BC ; Segment type: Pure code
.text$mn:0000A3BC ; Segment permissions: Read/Execute
.text$mn:0000A3BC _text$mn        segment para public 'CODE' use32
.text$mn:0000A3BC                 assume cs:_text$mn
.text$mn:0000A3BC                 ;org 0A3BCh
.text$mn:0000A3BC ; COMDAT (pick any)
.text$mn:0000A3BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A3BC
.text$mn:0000A3BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A3BC
.text$mn:0000A3BC ; Attributes: bp-based frame
.text$mn:0000A3BC
.text$mn:0000A3BC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:0000A3BC                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000A3BC ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:0000A3BC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:0000A3BC
.text$mn:0000A3BC var_20          = dword ptr -20h
.text$mn:0000A3BC var_1C          = dword ptr -1Ch
.text$mn:0000A3BC var_18          = dword ptr -18h
.text$mn:0000A3BC var_11          = byte ptr -11h
.text$mn:0000A3BC var_10          = dword ptr -10h
.text$mn:0000A3BC var_C           = byte ptr -0Ch
.text$mn:0000A3BC var_4           = dword ptr -4
.text$mn:0000A3BC arg_0           = dword ptr  8
.text$mn:0000A3BC
.text$mn:0000A3BC ; FUNCTION CHUNK AT .text$mn:0000A4DE SIZE 00000009 BYTES
.text$mn:0000A3BC
.text$mn:0000A3BC                 push    ebp
.text$mn:0000A3BD                 mov     ebp, esp
.text$mn:0000A3BF                 push    0FFFFFFFFh
.text$mn:0000A3C1                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000A3C6                 mov     eax, large fs:0
.text$mn:0000A3CC                 push    eax
.text$mn:0000A3CD                 push    ecx
.text$mn:0000A3CE                 sub     esp, 10h
.text$mn:0000A3D1                 push    ebx
.text$mn:0000A3D2                 push    esi
.text$mn:0000A3D3                 push    edi
.text$mn:0000A3D4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A3D9                 xor     eax, ebp
.text$mn:0000A3DB                 push    eax
.text$mn:0000A3DC                 lea     eax, [ebp+var_C]
.text$mn:0000A3DF                 mov     large fs:0, eax
.text$mn:0000A3E5                 mov     [ebp+var_10], esp
.text$mn:0000A3E8                 mov     [ebp+var_18], ecx
.text$mn:0000A3EB                 mov     eax, [ebp+arg_0]
.text$mn:0000A3EE                 or      eax, 0Fh
.text$mn:0000A3F1                 mov     [ebp+var_1C], eax
.text$mn:0000A3F4                 mov     ecx, [ebp+var_18]
.text$mn:0000A3F7                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000A3FC                 cmp     eax, [ebp+var_1C]
.text$mn:0000A3FF                 jnb     short loc_A409
.text$mn:0000A401                 mov     ecx, [ebp+arg_0]
.text$mn:0000A404                 mov     [ebp+var_1C], ecx
.text$mn:0000A407                 jmp     short loc_A45B
.text$mn:0000A409 ; ---------------------------------------------------------------------------
.text$mn:0000A409
.text$mn:0000A409 loc_A409:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:0000A409                 mov     edx, [ebp+var_18]
.text$mn:0000A40C                 mov     ecx, [edx+18h]
.text$mn:0000A40F                 shr     ecx, 1
.text$mn:0000A411                 mov     eax, [ebp+var_1C]
.text$mn:0000A414                 xor     edx, edx
.text$mn:0000A416                 mov     esi, 3
.text$mn:0000A41B                 div     esi
.text$mn:0000A41D                 cmp     ecx, eax
.text$mn:0000A41F                 ja      short loc_A423
.text$mn:0000A421                 jmp     short loc_A45B
.text$mn:0000A423 ; ---------------------------------------------------------------------------
.text$mn:0000A423
.text$mn:0000A423 loc_A423:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:0000A423                 mov     ecx, [ebp+var_18]
.text$mn:0000A426                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000A42B                 mov     edx, [ebp+var_18]
.text$mn:0000A42E                 mov     ecx, [edx+18h]
.text$mn:0000A431                 shr     ecx, 1
.text$mn:0000A433                 sub     eax, ecx
.text$mn:0000A435                 mov     edx, [ebp+var_18]
.text$mn:0000A438                 cmp     [edx+18h], eax
.text$mn:0000A43B                 ja      short loc_A450
.text$mn:0000A43D                 mov     eax, [ebp+var_18]
.text$mn:0000A440                 mov     ecx, [eax+18h]
.text$mn:0000A443                 shr     ecx, 1
.text$mn:0000A445                 mov     edx, [ebp+var_18]
.text$mn:0000A448                 add     ecx, [edx+18h]
.text$mn:0000A44B                 mov     [ebp+var_1C], ecx
.text$mn:0000A44E                 jmp     short loc_A45B
.text$mn:0000A450 ; ---------------------------------------------------------------------------
.text$mn:0000A450
.text$mn:0000A450 loc_A450:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:0000A450                 mov     ecx, [ebp+var_18]
.text$mn:0000A453                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000A458                 mov     [ebp+var_1C], eax
.text$mn:0000A45B
.text$mn:0000A45B loc_A45B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:0000A45B                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:0000A45B                 mov     [ebp+var_4], 0
.text$mn:0000A462                 mov     eax, [ebp+var_1C]
.text$mn:0000A465                 add     eax, 1
.text$mn:0000A468                 push    eax
.text$mn:0000A469                 lea     ecx, [ebp+var_11]
.text$mn:0000A46C                 push    ecx
.text$mn:0000A46D                 mov     ecx, [ebp+var_18]
.text$mn:0000A470                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000A475                 mov     ecx, eax
.text$mn:0000A477                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:0000A47C                 mov     [ebp+var_20], eax
.text$mn:0000A47F                 jmp     short loc_A4DE
.text$mn:0000A47F ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:0000A47F
.text$mn:0000A481
.text$mn:0000A481 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A481
.text$mn:0000A481
.text$mn:0000A481 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:0000A481                                         ; DATA XREF: .xdata$x:0000F034o
.text$mn:0000A481
.text$mn:0000A481 ; FUNCTION CHUNK AT .text$mn:0000A4C8 SIZE 00000009 BYTES
.text$mn:0000A481 ; FUNCTION CHUNK AT .text$mn:0000A4D8 SIZE 00000006 BYTES
.text$mn:0000A481
.text$mn:0000A481                 mov     [ebp-10h], esp
.text$mn:0000A484                 mov     edx, [ebp+8]
.text$mn:0000A487                 mov     [ebp-1Ch], edx
.text$mn:0000A48A                 mov     byte ptr [ebp-4], 2
.text$mn:0000A48E                 mov     eax, [ebp-1Ch]
.text$mn:0000A491                 add     eax, 1
.text$mn:0000A494                 push    eax
.text$mn:0000A495                 lea     ecx, [ebp-12h]
.text$mn:0000A498                 push    ecx
.text$mn:0000A499                 mov     ecx, [ebp-18h]
.text$mn:0000A49C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000A4A1                 mov     ecx, eax
.text$mn:0000A4A3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:0000A4A8                 mov     [ebp-20h], eax
.text$mn:0000A4AB                 jmp     short loc_A4C8
.text$mn:0000A4AB __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:0000A4AB
.text$mn:0000A4AD
.text$mn:0000A4AD ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4AD
.text$mn:0000A4AD ; Attributes: noreturn
.text$mn:0000A4AD
.text$mn:0000A4AD __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:0000A4AD                                         ; DATA XREF: .xdata$x:0000F044o
.text$mn:0000A4AD                 push    0               ; Size
.text$mn:0000A4AF                 push    1               ; char
.text$mn:0000A4B1                 mov     ecx, [ebp-18h]
.text$mn:0000A4B4                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000A4B9                 push    0
.text$mn:0000A4BB                 push    0
.text$mn:0000A4BD                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000A4BD __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:0000A4BD
.text$mn:0000A4C2 ; ---------------------------------------------------------------------------
.text$mn:0000A4C2                 mov     eax, offset $LN17
.text$mn:0000A4C7                 retn
.text$mn:0000A4C8 ; ---------------------------------------------------------------------------
.text$mn:0000A4C8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000A4C8
.text$mn:0000A4C8 loc_A4C8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:0000A4C8                 mov     dword ptr [ebp-4], 1
.text$mn:0000A4CF                 jmp     short loc_A4D8
.text$mn:0000A4CF ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000A4D1
.text$mn:0000A4D1 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4D1
.text$mn:0000A4D1
.text$mn:0000A4D1 $LN17           proc near               ; DATA XREF: .text$mn:0000A4C2o
.text$mn:0000A4D1                 mov     dword ptr [ebp-4], 1
.text$mn:0000A4D1 $LN17           endp ; sp-analysis failed
.text$mn:0000A4D1
.text$mn:0000A4D8 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000A4D8
.text$mn:0000A4D8 loc_A4D8:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:0000A4D8                 mov     eax, offset $LN19
.text$mn:0000A4DD                 retn
.text$mn:0000A4DD ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000A4DE ; ---------------------------------------------------------------------------
.text$mn:0000A4DE ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000A4DE
.text$mn:0000A4DE loc_A4DE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:0000A4DE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A4E5                 jmp     short loc_A4EE
.text$mn:0000A4E5 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000A4E7
.text$mn:0000A4E7 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A4E7
.text$mn:0000A4E7
.text$mn:0000A4E7 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_A4D8o
.text$mn:0000A4E7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000A4EE
.text$mn:0000A4EE loc_A4EE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:0000A4EE                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000A4F2                 jbe     short loc_A50D
.text$mn:0000A4F4                 mov     edx, [ebp+0Ch]
.text$mn:0000A4F7                 push    edx             ; Size
.text$mn:0000A4F8                 mov     ecx, [ebp-18h]
.text$mn:0000A4FB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000A500                 push    eax             ; Src
.text$mn:0000A501                 mov     eax, [ebp-20h]
.text$mn:0000A504                 push    eax             ; Dst
.text$mn:0000A505                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000A50A                 add     esp, 0Ch
.text$mn:0000A50D
.text$mn:0000A50D loc_A50D:                               ; CODE XREF: $LN19+Bj
.text$mn:0000A50D                 push    0               ; Size
.text$mn:0000A50F                 push    1               ; char
.text$mn:0000A511                 mov     ecx, [ebp-18h]
.text$mn:0000A514                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000A519                 lea     ecx, [ebp-20h]
.text$mn:0000A51C                 push    ecx             ; int
.text$mn:0000A51D                 mov     edx, [ebp-18h]
.text$mn:0000A520                 add     edx, 4
.text$mn:0000A523                 push    edx             ; void *
.text$mn:0000A524                 lea     eax, [ebp-13h]
.text$mn:0000A527                 push    eax
.text$mn:0000A528                 mov     ecx, [ebp-18h]
.text$mn:0000A52B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000A530                 mov     ecx, eax
.text$mn:0000A532                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:0000A537                 mov     ecx, [ebp-18h]
.text$mn:0000A53A                 mov     edx, [ebp-1Ch]
.text$mn:0000A53D                 mov     [ecx+18h], edx
.text$mn:0000A540                 mov     eax, [ebp+0Ch]
.text$mn:0000A543                 push    eax
.text$mn:0000A544                 mov     ecx, [ebp-18h]
.text$mn:0000A547                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000A54C                 mov     ecx, [ebp-0Ch]
.text$mn:0000A54F                 mov     large fs:0, ecx
.text$mn:0000A556                 pop     ecx
.text$mn:0000A557                 pop     edi
.text$mn:0000A558                 pop     esi
.text$mn:0000A559                 pop     ebx
.text$mn:0000A55A                 mov     esp, ebp
.text$mn:0000A55C                 pop     ebp
.text$mn:0000A55D                 retn    8
.text$mn:0000A55D $LN19           endp ; sp-analysis failed
.text$mn:0000A55D
.text$mn:0000A55D _text$mn        ends
.text$mn:0000A55D
.text$x:0000A560 ; ===========================================================================
.text$x:0000A560
.text$x:0000A560 ; Segment type: Pure code
.text$x:0000A560 ; Segment permissions: Read/Execute
.text$x:0000A560 _text$x         segment para public 'CODE' use32
.text$x:0000A560                 assume cs:_text$x
.text$x:0000A560                 ;org 0A560h
.text$x:0000A560 ; COMDAT (pick associative to section at A3BC)
.text$x:0000A560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A560
.text$x:0000A560 ; =============== S U B R O U T I N E =======================================
.text$x:0000A560
.text$x:0000A560
.text$x:0000A560 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:0000A560                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:0000A560
.text$x:0000A560 arg_4           = dword ptr  8
.text$x:0000A560
.text$x:0000A560                 mov     edx, [esp+arg_4]
.text$x:0000A564                 lea     eax, [edx+0Ch]
.text$x:0000A567                 mov     ecx, [edx-24h]
.text$x:0000A56A                 xor     ecx, eax
.text$x:0000A56C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A571                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:0000A576                 jmp     ___CxxFrameHandler3
.text$x:0000A576 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:0000A576
.text$x:0000A576 ; ---------------------------------------------------------------------------
.text$x:0000A57B                 align 4
.text$x:0000A57B _text$x         ends
.text$x:0000A57B
.text$mn:0000A57C ; ===========================================================================
.text$mn:0000A57C
.text$mn:0000A57C ; Segment type: Pure code
.text$mn:0000A57C ; Segment permissions: Read/Execute
.text$mn:0000A57C _text$mn        segment para public 'CODE' use32
.text$mn:0000A57C                 assume cs:_text$mn
.text$mn:0000A57C                 ;org 0A57Ch
.text$mn:0000A57C ; COMDAT (pick any)
.text$mn:0000A57C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A57C
.text$mn:0000A57C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A57C
.text$mn:0000A57C ; Attributes: bp-based frame
.text$mn:0000A57C
.text$mn:0000A57C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:0000A57C                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000A57C ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:0000A57C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:0000A57C
.text$mn:0000A57C var_20          = dword ptr -20h
.text$mn:0000A57C var_1C          = dword ptr -1Ch
.text$mn:0000A57C var_18          = dword ptr -18h
.text$mn:0000A57C var_11          = byte ptr -11h
.text$mn:0000A57C var_10          = dword ptr -10h
.text$mn:0000A57C var_C           = byte ptr -0Ch
.text$mn:0000A57C var_4           = dword ptr -4
.text$mn:0000A57C arg_0           = dword ptr  8
.text$mn:0000A57C
.text$mn:0000A57C ; FUNCTION CHUNK AT .text$mn:0000A69E SIZE 00000009 BYTES
.text$mn:0000A57C
.text$mn:0000A57C                 push    ebp
.text$mn:0000A57D                 mov     ebp, esp
.text$mn:0000A57F                 push    0FFFFFFFFh
.text$mn:0000A581                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000A586                 mov     eax, large fs:0
.text$mn:0000A58C                 push    eax
.text$mn:0000A58D                 push    ecx
.text$mn:0000A58E                 sub     esp, 10h
.text$mn:0000A591                 push    ebx
.text$mn:0000A592                 push    esi
.text$mn:0000A593                 push    edi
.text$mn:0000A594                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000A599                 xor     eax, ebp
.text$mn:0000A59B                 push    eax
.text$mn:0000A59C                 lea     eax, [ebp+var_C]
.text$mn:0000A59F                 mov     large fs:0, eax
.text$mn:0000A5A5                 mov     [ebp+var_10], esp
.text$mn:0000A5A8                 mov     [ebp+var_18], ecx
.text$mn:0000A5AB                 mov     eax, [ebp+arg_0]
.text$mn:0000A5AE                 or      eax, 7
.text$mn:0000A5B1                 mov     [ebp+var_1C], eax
.text$mn:0000A5B4                 mov     ecx, [ebp+var_18]
.text$mn:0000A5B7                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000A5BC                 cmp     eax, [ebp+var_1C]
.text$mn:0000A5BF                 jnb     short loc_A5C9
.text$mn:0000A5C1                 mov     ecx, [ebp+arg_0]
.text$mn:0000A5C4                 mov     [ebp+var_1C], ecx
.text$mn:0000A5C7                 jmp     short loc_A61B
.text$mn:0000A5C9 ; ---------------------------------------------------------------------------
.text$mn:0000A5C9
.text$mn:0000A5C9 loc_A5C9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:0000A5C9                 mov     edx, [ebp+var_18]
.text$mn:0000A5CC                 mov     ecx, [edx+18h]
.text$mn:0000A5CF                 shr     ecx, 1
.text$mn:0000A5D1                 mov     eax, [ebp+var_1C]
.text$mn:0000A5D4                 xor     edx, edx
.text$mn:0000A5D6                 mov     esi, 3
.text$mn:0000A5DB                 div     esi
.text$mn:0000A5DD                 cmp     ecx, eax
.text$mn:0000A5DF                 ja      short loc_A5E3
.text$mn:0000A5E1                 jmp     short loc_A61B
.text$mn:0000A5E3 ; ---------------------------------------------------------------------------
.text$mn:0000A5E3
.text$mn:0000A5E3 loc_A5E3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:0000A5E3                 mov     ecx, [ebp+var_18]
.text$mn:0000A5E6                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000A5EB                 mov     edx, [ebp+var_18]
.text$mn:0000A5EE                 mov     ecx, [edx+18h]
.text$mn:0000A5F1                 shr     ecx, 1
.text$mn:0000A5F3                 sub     eax, ecx
.text$mn:0000A5F5                 mov     edx, [ebp+var_18]
.text$mn:0000A5F8                 cmp     [edx+18h], eax
.text$mn:0000A5FB                 ja      short loc_A610
.text$mn:0000A5FD                 mov     eax, [ebp+var_18]
.text$mn:0000A600                 mov     ecx, [eax+18h]
.text$mn:0000A603                 shr     ecx, 1
.text$mn:0000A605                 mov     edx, [ebp+var_18]
.text$mn:0000A608                 add     ecx, [edx+18h]
.text$mn:0000A60B                 mov     [ebp+var_1C], ecx
.text$mn:0000A60E                 jmp     short loc_A61B
.text$mn:0000A610 ; ---------------------------------------------------------------------------
.text$mn:0000A610
.text$mn:0000A610 loc_A610:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:0000A610                 mov     ecx, [ebp+var_18]
.text$mn:0000A613                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000A618                 mov     [ebp+var_1C], eax
.text$mn:0000A61B
.text$mn:0000A61B loc_A61B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:0000A61B                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:0000A61B                 mov     [ebp+var_4], 0
.text$mn:0000A622                 mov     eax, [ebp+var_1C]
.text$mn:0000A625                 add     eax, 1
.text$mn:0000A628                 push    eax
.text$mn:0000A629                 lea     ecx, [ebp+var_11]
.text$mn:0000A62C                 push    ecx
.text$mn:0000A62D                 mov     ecx, [ebp+var_18]
.text$mn:0000A630                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000A635                 mov     ecx, eax
.text$mn:0000A637                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:0000A63C                 mov     [ebp+var_20], eax
.text$mn:0000A63F                 jmp     short loc_A69E
.text$mn:0000A63F ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:0000A63F
.text$mn:0000A641
.text$mn:0000A641 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A641
.text$mn:0000A641
.text$mn:0000A641 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:0000A641                                         ; DATA XREF: .xdata$x:0000F4F8o
.text$mn:0000A641
.text$mn:0000A641 ; FUNCTION CHUNK AT .text$mn:0000A688 SIZE 00000009 BYTES
.text$mn:0000A641 ; FUNCTION CHUNK AT .text$mn:0000A698 SIZE 00000006 BYTES
.text$mn:0000A641
.text$mn:0000A641                 mov     [ebp-10h], esp
.text$mn:0000A644                 mov     edx, [ebp+8]
.text$mn:0000A647                 mov     [ebp-1Ch], edx
.text$mn:0000A64A                 mov     byte ptr [ebp-4], 2
.text$mn:0000A64E                 mov     eax, [ebp-1Ch]
.text$mn:0000A651                 add     eax, 1
.text$mn:0000A654                 push    eax
.text$mn:0000A655                 lea     ecx, [ebp-12h]
.text$mn:0000A658                 push    ecx
.text$mn:0000A659                 mov     ecx, [ebp-18h]
.text$mn:0000A65C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000A661                 mov     ecx, eax
.text$mn:0000A663                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:0000A668                 mov     [ebp-20h], eax
.text$mn:0000A66B                 jmp     short loc_A688
.text$mn:0000A66B __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:0000A66B
.text$mn:0000A66D
.text$mn:0000A66D ; =============== S U B R O U T I N E =======================================
.text$mn:0000A66D
.text$mn:0000A66D ; Attributes: noreturn
.text$mn:0000A66D
.text$mn:0000A66D __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:0000A66D                                         ; DATA XREF: .xdata$x:0000F508o
.text$mn:0000A66D                 push    0
.text$mn:0000A66F                 push    1
.text$mn:0000A671                 mov     ecx, [ebp-18h]
.text$mn:0000A674                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000A679                 push    0
.text$mn:0000A67B                 push    0
.text$mn:0000A67D                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000A67D __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:0000A67D
.text$mn:0000A682 ; ---------------------------------------------------------------------------
.text$mn:0000A682                 mov     eax, offset $LN17_0
.text$mn:0000A687                 retn
.text$mn:0000A688 ; ---------------------------------------------------------------------------
.text$mn:0000A688 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000A688
.text$mn:0000A688 loc_A688:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:0000A688                 mov     dword ptr [ebp-4], 1
.text$mn:0000A68F                 jmp     short loc_A698
.text$mn:0000A68F ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000A691
.text$mn:0000A691 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A691
.text$mn:0000A691
.text$mn:0000A691 $LN17_0         proc near               ; DATA XREF: .text$mn:0000A682o
.text$mn:0000A691                 mov     dword ptr [ebp-4], 1
.text$mn:0000A691 $LN17_0         endp ; sp-analysis failed
.text$mn:0000A691
.text$mn:0000A698 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000A698
.text$mn:0000A698 loc_A698:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:0000A698                 mov     eax, offset $LN19_0
.text$mn:0000A69D                 retn
.text$mn:0000A69D ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000A69E ; ---------------------------------------------------------------------------
.text$mn:0000A69E ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000A69E
.text$mn:0000A69E loc_A69E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:0000A69E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000A6A5                 jmp     short loc_A6AE
.text$mn:0000A6A5 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000A6A7
.text$mn:0000A6A7 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A6A7
.text$mn:0000A6A7
.text$mn:0000A6A7 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_A698o
.text$mn:0000A6A7                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000A6AE
.text$mn:0000A6AE loc_A6AE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:0000A6AE                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000A6B2                 jbe     short loc_A6CD
.text$mn:0000A6B4                 mov     edx, [ebp+0Ch]
.text$mn:0000A6B7                 push    edx             ; int
.text$mn:0000A6B8                 mov     ecx, [ebp-18h]
.text$mn:0000A6BB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A6C0                 push    eax             ; Src
.text$mn:0000A6C1                 mov     eax, [ebp-20h]
.text$mn:0000A6C4                 push    eax             ; Dst
.text$mn:0000A6C5                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000A6CA                 add     esp, 0Ch
.text$mn:0000A6CD
.text$mn:0000A6CD loc_A6CD:                               ; CODE XREF: $LN19_0+Bj
.text$mn:0000A6CD                 push    0
.text$mn:0000A6CF                 push    1
.text$mn:0000A6D1                 mov     ecx, [ebp-18h]
.text$mn:0000A6D4                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000A6D9                 lea     ecx, [ebp-20h]
.text$mn:0000A6DC                 push    ecx             ; int
.text$mn:0000A6DD                 mov     edx, [ebp-18h]
.text$mn:0000A6E0                 add     edx, 4
.text$mn:0000A6E3                 push    edx             ; void *
.text$mn:0000A6E4                 lea     eax, [ebp-13h]
.text$mn:0000A6E7                 push    eax
.text$mn:0000A6E8                 mov     ecx, [ebp-18h]
.text$mn:0000A6EB                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000A6F0                 mov     ecx, eax
.text$mn:0000A6F2                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000A6F7                 mov     ecx, [ebp-18h]
.text$mn:0000A6FA                 mov     edx, [ebp-1Ch]
.text$mn:0000A6FD                 mov     [ecx+18h], edx
.text$mn:0000A700                 mov     eax, [ebp+0Ch]
.text$mn:0000A703                 push    eax
.text$mn:0000A704                 mov     ecx, [ebp-18h]
.text$mn:0000A707                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000A70C                 mov     ecx, [ebp-0Ch]
.text$mn:0000A70F                 mov     large fs:0, ecx
.text$mn:0000A716                 pop     ecx
.text$mn:0000A717                 pop     edi
.text$mn:0000A718                 pop     esi
.text$mn:0000A719                 pop     ebx
.text$mn:0000A71A                 mov     esp, ebp
.text$mn:0000A71C                 pop     ebp
.text$mn:0000A71D                 retn    8
.text$mn:0000A71D $LN19_0         endp ; sp-analysis failed
.text$mn:0000A71D
.text$mn:0000A71D _text$mn        ends
.text$mn:0000A71D
.text$x:0000A720 ; ===========================================================================
.text$x:0000A720
.text$x:0000A720 ; Segment type: Pure code
.text$x:0000A720 ; Segment permissions: Read/Execute
.text$x:0000A720 _text$x         segment para public 'CODE' use32
.text$x:0000A720                 assume cs:_text$x
.text$x:0000A720                 ;org 0A720h
.text$x:0000A720 ; COMDAT (pick associative to section at A57C)
.text$x:0000A720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000A720
.text$x:0000A720 ; =============== S U B R O U T I N E =======================================
.text$x:0000A720
.text$x:0000A720
.text$x:0000A720 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:0000A720                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:0000A720
.text$x:0000A720 arg_4           = dword ptr  8
.text$x:0000A720
.text$x:0000A720                 mov     edx, [esp+arg_4]
.text$x:0000A724                 lea     eax, [edx+0Ch]
.text$x:0000A727                 mov     ecx, [edx-24h]
.text$x:0000A72A                 xor     ecx, eax
.text$x:0000A72C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000A731                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:0000A736                 jmp     ___CxxFrameHandler3
.text$x:0000A736 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:0000A736
.text$x:0000A736 ; ---------------------------------------------------------------------------
.text$x:0000A73B                 align 4
.text$x:0000A73B _text$x         ends
.text$x:0000A73B
.text$mn:0000A73C ; ===========================================================================
.text$mn:0000A73C
.text$mn:0000A73C ; Segment type: Pure code
.text$mn:0000A73C ; Segment permissions: Read/Execute
.text$mn:0000A73C _text$mn        segment para public 'CODE' use32
.text$mn:0000A73C                 assume cs:_text$mn
.text$mn:0000A73C                 ;org 0A73Ch
.text$mn:0000A73C ; COMDAT (pick any)
.text$mn:0000A73C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A73C
.text$mn:0000A73C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A73C
.text$mn:0000A73C ; Attributes: bp-based frame
.text$mn:0000A73C
.text$mn:0000A73C ; protected: void __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Destroy(class FunctionParser * *, class FunctionParser * *)
.text$mn:0000A73C                 public ?_Destroy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXPAPAVFunctionParser@@0@Z
.text$mn:0000A73C ?_Destroy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXPAPAVFunctionParser@@0@Z proc near
.text$mn:0000A73C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)+CBp
.text$mn:0000A73C                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Tidy(void)+2Bp
.text$mn:0000A73C
.text$mn:0000A73C var_8           = dword ptr -8
.text$mn:0000A73C var_1           = byte ptr -1
.text$mn:0000A73C arg_0           = dword ptr  8
.text$mn:0000A73C arg_4           = dword ptr  0Ch
.text$mn:0000A73C
.text$mn:0000A73C                 push    ebp
.text$mn:0000A73D                 mov     ebp, esp
.text$mn:0000A73F                 sub     esp, 8
.text$mn:0000A742                 mov     [ebp+var_8], ecx
.text$mn:0000A745                 lea     eax, [ebp+var_1]
.text$mn:0000A748                 push    eax
.text$mn:0000A749                 mov     ecx, [ebp+var_8]
.text$mn:0000A74C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:0000A751                 lea     ecx, [ebp+var_1]
.text$mn:0000A754                 push    ecx
.text$mn:0000A755                 mov     edx, [ebp+arg_4]
.text$mn:0000A758                 push    edx
.text$mn:0000A759                 mov     eax, [ebp+arg_0]
.text$mn:0000A75C                 push    eax
.text$mn:0000A75D                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@YAXPAPAVFunctionParser@@0AAU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<FunctionParser *>>>(FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &)
.text$mn:0000A762                 add     esp, 0Ch
.text$mn:0000A765                 mov     esp, ebp
.text$mn:0000A767                 pop     ebp
.text$mn:0000A768                 retn    8
.text$mn:0000A768 ?_Destroy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXPAPAVFunctionParser@@0@Z endp
.text$mn:0000A768
.text$mn:0000A768 ; ---------------------------------------------------------------------------
.text$mn:0000A76B                 align 4
.text$mn:0000A76B _text$mn        ends
.text$mn:0000A76B
.text$mn:0000A76C ; ===========================================================================
.text$mn:0000A76C
.text$mn:0000A76C ; Segment type: Pure code
.text$mn:0000A76C ; Segment permissions: Read/Execute
.text$mn:0000A76C _text$mn        segment para public 'CODE' use32
.text$mn:0000A76C                 assume cs:_text$mn
.text$mn:0000A76C                 ;org 0A76Ch
.text$mn:0000A76C ; COMDAT (pick any)
.text$mn:0000A76C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A76C
.text$mn:0000A76C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A76C
.text$mn:0000A76C ; Attributes: bp-based frame
.text$mn:0000A76C
.text$mn:0000A76C ; protected: void __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Destroy(struct std::pair<int, int> *, struct std::pair<int, int> *)
.text$mn:0000A76C                 public ?_Destroy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXPAU?$pair@HH@2@0@Z
.text$mn:0000A76C ?_Destroy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXPAU?$pair@HH@2@0@Z proc near
.text$mn:0000A76C                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)+CBp
.text$mn:0000A76C                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Tidy(void)+2Bp
.text$mn:0000A76C
.text$mn:0000A76C var_8           = dword ptr -8
.text$mn:0000A76C var_1           = byte ptr -1
.text$mn:0000A76C arg_0           = dword ptr  8
.text$mn:0000A76C arg_4           = dword ptr  0Ch
.text$mn:0000A76C
.text$mn:0000A76C                 push    ebp
.text$mn:0000A76D                 mov     ebp, esp
.text$mn:0000A76F                 sub     esp, 8
.text$mn:0000A772                 mov     [ebp+var_8], ecx
.text$mn:0000A775                 lea     eax, [ebp+var_1]
.text$mn:0000A778                 push    eax
.text$mn:0000A779                 mov     ecx, [ebp+var_8]
.text$mn:0000A77C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:0000A781                 lea     ecx, [ebp+var_1]
.text$mn:0000A784                 push    ecx
.text$mn:0000A785                 mov     edx, [ebp+arg_4]
.text$mn:0000A788                 push    edx
.text$mn:0000A789                 mov     eax, [ebp+arg_0]
.text$mn:0000A78C                 push    eax
.text$mn:0000A78D                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@@std@@YAXPAU?$pair@HH@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<int,int>>>>(std::pair<int,int> *,std::pair<int,int> *,std::_Wrap_alloc<std::allocator<std::pair<int,int>>> &)
.text$mn:0000A792                 add     esp, 0Ch
.text$mn:0000A795                 mov     esp, ebp
.text$mn:0000A797                 pop     ebp
.text$mn:0000A798                 retn    8
.text$mn:0000A798 ?_Destroy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXPAU?$pair@HH@2@0@Z endp
.text$mn:0000A798
.text$mn:0000A798 ; ---------------------------------------------------------------------------
.text$mn:0000A79B                 align 4
.text$mn:0000A79B _text$mn        ends
.text$mn:0000A79B
.text$mn:0000A79C ; ===========================================================================
.text$mn:0000A79C
.text$mn:0000A79C ; Segment type: Pure code
.text$mn:0000A79C ; Segment permissions: Read/Execute
.text$mn:0000A79C _text$mn        segment para public 'CODE' use32
.text$mn:0000A79C                 assume cs:_text$mn
.text$mn:0000A79C                 ;org 0A79Ch
.text$mn:0000A79C ; COMDAT (pick any)
.text$mn:0000A79C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A79C
.text$mn:0000A79C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A79C
.text$mn:0000A79C ; Attributes: bp-based frame
.text$mn:0000A79C
.text$mn:0000A79C ; protected: void __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Destroy(struct AssociationInfo *, struct AssociationInfo *)
.text$mn:0000A79C                 public ?_Destroy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXPAUAssociationInfo@@0@Z
.text$mn:0000A79C ?_Destroy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXPAUAssociationInfo@@0@Z proc near
.text$mn:0000A79C                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)+CBp
.text$mn:0000A79C                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Tidy(void)+2Bp
.text$mn:0000A79C
.text$mn:0000A79C var_8           = dword ptr -8
.text$mn:0000A79C var_1           = byte ptr -1
.text$mn:0000A79C arg_0           = dword ptr  8
.text$mn:0000A79C arg_4           = dword ptr  0Ch
.text$mn:0000A79C
.text$mn:0000A79C                 push    ebp
.text$mn:0000A79D                 mov     ebp, esp
.text$mn:0000A79F                 sub     esp, 8
.text$mn:0000A7A2                 mov     [ebp+var_8], ecx
.text$mn:0000A7A5                 lea     eax, [ebp+var_1]
.text$mn:0000A7A8                 push    eax
.text$mn:0000A7A9                 mov     ecx, [ebp+var_8]
.text$mn:0000A7AC                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:0000A7B1                 lea     ecx, [ebp+var_1]
.text$mn:0000A7B4                 push    ecx
.text$mn:0000A7B5                 mov     edx, [ebp+arg_4]
.text$mn:0000A7B8                 push    edx
.text$mn:0000A7B9                 mov     eax, [ebp+arg_0]
.text$mn:0000A7BC                 push    eax
.text$mn:0000A7BD                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@YAXPAUAssociationInfo@@0AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<AssociationInfo>>>(AssociationInfo *,AssociationInfo *,std::_Wrap_alloc<std::allocator<AssociationInfo>> &)
.text$mn:0000A7C2                 add     esp, 0Ch
.text$mn:0000A7C5                 mov     esp, ebp
.text$mn:0000A7C7                 pop     ebp
.text$mn:0000A7C8                 retn    8
.text$mn:0000A7C8 ?_Destroy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXPAUAssociationInfo@@0@Z endp
.text$mn:0000A7C8
.text$mn:0000A7C8 ; ---------------------------------------------------------------------------
.text$mn:0000A7CB                 align 4
.text$mn:0000A7CB _text$mn        ends
.text$mn:0000A7CB
.text$mn:0000A7CC ; ===========================================================================
.text$mn:0000A7CC
.text$mn:0000A7CC ; Segment type: Pure code
.text$mn:0000A7CC ; Segment permissions: Read/Execute
.text$mn:0000A7CC _text$mn        segment para public 'CODE' use32
.text$mn:0000A7CC                 assume cs:_text$mn
.text$mn:0000A7CC                 ;org 0A7CCh
.text$mn:0000A7CC ; COMDAT (pick any)
.text$mn:0000A7CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7CC
.text$mn:0000A7CC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7CC
.text$mn:0000A7CC ; Attributes: bp-based frame
.text$mn:0000A7CC
.text$mn:0000A7CC ; protected: void __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Destroy(struct foundInfo *, struct foundInfo *)
.text$mn:0000A7CC                 public ?_Destroy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXPAUfoundInfo@@0@Z
.text$mn:0000A7CC ?_Destroy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXPAUfoundInfo@@0@Z proc near
.text$mn:0000A7CC                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+CBp
.text$mn:0000A7CC
.text$mn:0000A7CC var_8           = dword ptr -8
.text$mn:0000A7CC var_1           = byte ptr -1
.text$mn:0000A7CC arg_0           = dword ptr  8
.text$mn:0000A7CC arg_4           = dword ptr  0Ch
.text$mn:0000A7CC
.text$mn:0000A7CC                 push    ebp
.text$mn:0000A7CD                 mov     ebp, esp
.text$mn:0000A7CF                 sub     esp, 8
.text$mn:0000A7D2                 mov     [ebp+var_8], ecx
.text$mn:0000A7D5                 lea     eax, [ebp+var_1]
.text$mn:0000A7D8                 push    eax
.text$mn:0000A7D9                 mov     ecx, [ebp+var_8]
.text$mn:0000A7DC                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:0000A7E1                 lea     ecx, [ebp+var_1]
.text$mn:0000A7E4                 push    ecx
.text$mn:0000A7E5                 mov     edx, [ebp+arg_4]
.text$mn:0000A7E8                 push    edx
.text$mn:0000A7E9                 mov     eax, [ebp+arg_0]
.text$mn:0000A7EC                 push    eax
.text$mn:0000A7ED                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@@std@@YAXPAUfoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<foundInfo>>>(foundInfo *,foundInfo *,std::_Wrap_alloc<std::allocator<foundInfo>> &)
.text$mn:0000A7F2                 add     esp, 0Ch
.text$mn:0000A7F5                 mov     esp, ebp
.text$mn:0000A7F7                 pop     ebp
.text$mn:0000A7F8                 retn    8
.text$mn:0000A7F8 ?_Destroy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXPAUfoundInfo@@0@Z endp
.text$mn:0000A7F8
.text$mn:0000A7F8 ; ---------------------------------------------------------------------------
.text$mn:0000A7FB                 align 4
.text$mn:0000A7FB _text$mn        ends
.text$mn:0000A7FB
.text$mn:0000A7FC ; ===========================================================================
.text$mn:0000A7FC
.text$mn:0000A7FC ; Segment type: Pure code
.text$mn:0000A7FC ; Segment permissions: Read/Execute
.text$mn:0000A7FC _text$mn        segment para public 'CODE' use32
.text$mn:0000A7FC                 assume cs:_text$mn
.text$mn:0000A7FC                 ;org 0A7FCh
.text$mn:0000A7FC ; COMDAT (pick any)
.text$mn:0000A7FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A7FC
.text$mn:0000A7FC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A7FC
.text$mn:0000A7FC ; Attributes: bp-based frame
.text$mn:0000A7FC
.text$mn:0000A7FC ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Destroy(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:0000A7FC                 public ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:0000A7FC ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:0000A7FC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+CBp
.text$mn:0000A7FC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+2Bp ...
.text$mn:0000A7FC
.text$mn:0000A7FC var_8           = dword ptr -8
.text$mn:0000A7FC var_1           = byte ptr -1
.text$mn:0000A7FC arg_0           = dword ptr  8
.text$mn:0000A7FC arg_4           = dword ptr  0Ch
.text$mn:0000A7FC
.text$mn:0000A7FC                 push    ebp
.text$mn:0000A7FD                 mov     ebp, esp
.text$mn:0000A7FF                 sub     esp, 8
.text$mn:0000A802                 mov     [ebp+var_8], ecx
.text$mn:0000A805                 lea     eax, [ebp+var_1]
.text$mn:0000A808                 push    eax
.text$mn:0000A809                 mov     ecx, [ebp+var_8]
.text$mn:0000A80C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000A811                 lea     ecx, [ebp+var_1]
.text$mn:0000A814                 push    ecx
.text$mn:0000A815                 mov     edx, [ebp+arg_4]
.text$mn:0000A818                 push    edx
.text$mn:0000A819                 mov     eax, [ebp+arg_0]
.text$mn:0000A81C                 push    eax
.text$mn:0000A81D                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:0000A822                 add     esp, 0Ch
.text$mn:0000A825                 mov     esp, ebp
.text$mn:0000A827                 pop     ebp
.text$mn:0000A828                 retn    8
.text$mn:0000A828 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:0000A828
.text$mn:0000A828 ; ---------------------------------------------------------------------------
.text$mn:0000A82B                 align 4
.text$mn:0000A82B _text$mn        ends
.text$mn:0000A82B
.text$mn:0000A82C ; ===========================================================================
.text$mn:0000A82C
.text$mn:0000A82C ; Segment type: Pure code
.text$mn:0000A82C ; Segment permissions: Read/Execute
.text$mn:0000A82C _text$mn        segment para public 'CODE' use32
.text$mn:0000A82C                 assume cs:_text$mn
.text$mn:0000A82C                 ;org 0A82Ch
.text$mn:0000A82C ; COMDAT (pick any)
.text$mn:0000A82C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A82C
.text$mn:0000A82C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A82C
.text$mn:0000A82C ; Attributes: bp-based frame
.text$mn:0000A82C
.text$mn:0000A82C ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:0000A82C                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:0000A82C ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:0000A82C                                         ; CODE XREF: $LN19+60p
.text$mn:0000A82C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:0000A82C
.text$mn:0000A82C var_8           = dword ptr -8
.text$mn:0000A82C var_1           = byte ptr -1
.text$mn:0000A82C arg_0           = dword ptr  8
.text$mn:0000A82C
.text$mn:0000A82C                 push    ebp
.text$mn:0000A82D                 mov     ebp, esp
.text$mn:0000A82F                 sub     esp, 8
.text$mn:0000A832                 mov     [ebp+var_8], ecx
.text$mn:0000A835                 mov     [ebp+var_1], 0
.text$mn:0000A839                 mov     eax, [ebp+var_8]
.text$mn:0000A83C                 mov     ecx, [ebp+arg_0]
.text$mn:0000A83F                 mov     [eax+14h], ecx
.text$mn:0000A842                 lea     edx, [ebp+var_1]
.text$mn:0000A845                 push    edx
.text$mn:0000A846                 mov     ecx, [ebp+var_8]
.text$mn:0000A849                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000A84E                 add     eax, [ebp+arg_0]
.text$mn:0000A851                 push    eax
.text$mn:0000A852                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:0000A857                 add     esp, 8
.text$mn:0000A85A                 mov     esp, ebp
.text$mn:0000A85C                 pop     ebp
.text$mn:0000A85D                 retn    4
.text$mn:0000A85D ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:0000A85D
.text$mn:0000A85D _text$mn        ends
.text$mn:0000A85D
.text$mn:0000A860 ; ===========================================================================
.text$mn:0000A860
.text$mn:0000A860 ; Segment type: Pure code
.text$mn:0000A860 ; Segment permissions: Read/Execute
.text$mn:0000A860 _text$mn        segment para public 'CODE' use32
.text$mn:0000A860                 assume cs:_text$mn
.text$mn:0000A860                 ;org 0A860h
.text$mn:0000A860 ; COMDAT (pick any)
.text$mn:0000A860                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A860
.text$mn:0000A860 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A860
.text$mn:0000A860 ; Attributes: bp-based frame
.text$mn:0000A860
.text$mn:0000A860 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:0000A860                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:0000A860 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:0000A860                                         ; CODE XREF: $LN19_0+60p
.text$mn:0000A860                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:0000A860
.text$mn:0000A860 var_8           = dword ptr -8
.text$mn:0000A860 var_2           = word ptr -2
.text$mn:0000A860 arg_0           = dword ptr  8
.text$mn:0000A860
.text$mn:0000A860                 push    ebp
.text$mn:0000A861                 mov     ebp, esp
.text$mn:0000A863                 sub     esp, 8
.text$mn:0000A866                 mov     [ebp+var_8], ecx
.text$mn:0000A869                 xor     eax, eax
.text$mn:0000A86B                 mov     [ebp+var_2], ax
.text$mn:0000A86F                 mov     ecx, [ebp+var_8]
.text$mn:0000A872                 mov     edx, [ebp+arg_0]
.text$mn:0000A875                 mov     [ecx+14h], edx
.text$mn:0000A878                 lea     eax, [ebp+var_2]
.text$mn:0000A87B                 push    eax
.text$mn:0000A87C                 mov     ecx, [ebp+var_8]
.text$mn:0000A87F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000A884                 mov     ecx, [ebp+arg_0]
.text$mn:0000A887                 lea     edx, [eax+ecx*2]
.text$mn:0000A88A                 push    edx
.text$mn:0000A88B                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:0000A890                 add     esp, 8
.text$mn:0000A893                 mov     esp, ebp
.text$mn:0000A895                 pop     ebp
.text$mn:0000A896                 retn    4
.text$mn:0000A896 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:0000A896
.text$mn:0000A896 ; ---------------------------------------------------------------------------
.text$mn:0000A899                 align 4
.text$mn:0000A899 _text$mn        ends
.text$mn:0000A899
.text$mn:0000A89C ; ===========================================================================
.text$mn:0000A89C
.text$mn:0000A89C ; Segment type: Pure code
.text$mn:0000A89C ; Segment permissions: Read/Execute
.text$mn:0000A89C _text$mn        segment para public 'CODE' use32
.text$mn:0000A89C                 assume cs:_text$mn
.text$mn:0000A89C                 ;org 0A89Ch
.text$mn:0000A89C ; COMDAT (pick any)
.text$mn:0000A89C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A89C
.text$mn:0000A89C ; =============== S U B R O U T I N E =======================================
.text$mn:0000A89C
.text$mn:0000A89C ; Attributes: bp-based frame
.text$mn:0000A89C
.text$mn:0000A89C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:0000A89C                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000A89C ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000A89C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:0000A89C
.text$mn:0000A89C var_8           = dword ptr -8
.text$mn:0000A89C var_1           = byte ptr -1
.text$mn:0000A89C
.text$mn:0000A89C                 push    ebp
.text$mn:0000A89D                 mov     ebp, esp
.text$mn:0000A89F                 sub     esp, 8
.text$mn:0000A8A2                 mov     [ebp+var_8], ecx
.text$mn:0000A8A5                 lea     ecx, [ebp+var_1]
.text$mn:0000A8A8                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000A8AD                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000A8B0                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000A8B5                 mov     eax, [ebp+var_8]
.text$mn:0000A8B8                 mov     ecx, [eax]
.text$mn:0000A8BA                 push    ecx
.text$mn:0000A8BB                 lea     ecx, [ebp+var_1]
.text$mn:0000A8BE                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000A8C3                 push    1               ; int
.text$mn:0000A8C5                 mov     edx, [ebp+var_8]
.text$mn:0000A8C8                 mov     eax, [edx]
.text$mn:0000A8CA                 push    eax             ; void *
.text$mn:0000A8CB                 lea     ecx, [ebp+var_1]
.text$mn:0000A8CE                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000A8D3                 mov     ecx, [ebp+var_8]
.text$mn:0000A8D6                 mov     dword ptr [ecx], 0
.text$mn:0000A8DC                 mov     esp, ebp
.text$mn:0000A8DE                 pop     ebp
.text$mn:0000A8DF                 retn
.text$mn:0000A8DF ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000A8DF
.text$mn:0000A8DF _text$mn        ends
.text$mn:0000A8DF
.text$mn:0000A8E0 ; ===========================================================================
.text$mn:0000A8E0
.text$mn:0000A8E0 ; Segment type: Pure code
.text$mn:0000A8E0 ; Segment permissions: Read/Execute
.text$mn:0000A8E0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A8E0                 assume cs:_text$mn
.text$mn:0000A8E0                 ;org 0A8E0h
.text$mn:0000A8E0 ; COMDAT (pick any)
.text$mn:0000A8E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A8E0
.text$mn:0000A8E0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A8E0
.text$mn:0000A8E0 ; Attributes: bp-based frame
.text$mn:0000A8E0
.text$mn:0000A8E0 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:0000A8E0                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000A8E0 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000A8E0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:0000A8E0
.text$mn:0000A8E0 var_8           = dword ptr -8
.text$mn:0000A8E0 var_1           = byte ptr -1
.text$mn:0000A8E0
.text$mn:0000A8E0                 push    ebp
.text$mn:0000A8E1                 mov     ebp, esp
.text$mn:0000A8E3                 sub     esp, 8
.text$mn:0000A8E6                 mov     [ebp+var_8], ecx
.text$mn:0000A8E9                 lea     ecx, [ebp+var_1]
.text$mn:0000A8EC                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000A8F1                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000A8F4                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000A8F9                 mov     eax, [ebp+var_8]
.text$mn:0000A8FC                 mov     ecx, [eax]
.text$mn:0000A8FE                 push    ecx
.text$mn:0000A8FF                 lea     ecx, [ebp+var_1]
.text$mn:0000A902                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000A907                 push    1               ; int
.text$mn:0000A909                 mov     edx, [ebp+var_8]
.text$mn:0000A90C                 mov     eax, [edx]
.text$mn:0000A90E                 push    eax             ; void *
.text$mn:0000A90F                 lea     ecx, [ebp+var_1]
.text$mn:0000A912                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000A917                 mov     ecx, [ebp+var_8]
.text$mn:0000A91A                 mov     dword ptr [ecx], 0
.text$mn:0000A920                 mov     esp, ebp
.text$mn:0000A922                 pop     ebp
.text$mn:0000A923                 retn
.text$mn:0000A923 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000A923
.text$mn:0000A923 _text$mn        ends
.text$mn:0000A923
.text$mn:0000A924 ; ===========================================================================
.text$mn:0000A924
.text$mn:0000A924 ; Segment type: Pure code
.text$mn:0000A924 ; Segment permissions: Read/Execute
.text$mn:0000A924 _text$mn        segment para public 'CODE' use32
.text$mn:0000A924                 assume cs:_text$mn
.text$mn:0000A924                 ;org 0A924h
.text$mn:0000A924 ; COMDAT (pick any)
.text$mn:0000A924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A924
.text$mn:0000A924 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A924
.text$mn:0000A924 ; Attributes: bp-based frame
.text$mn:0000A924
.text$mn:0000A924 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class FunctionParser *, class std::allocator<class FunctionParser *>>>::_Free_proxy(void)
.text$mn:0000A924                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAEXXZ
.text$mn:0000A924 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000A924                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::~_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>(void)+30p
.text$mn:0000A924
.text$mn:0000A924 var_8           = dword ptr -8
.text$mn:0000A924 var_1           = byte ptr -1
.text$mn:0000A924
.text$mn:0000A924                 push    ebp
.text$mn:0000A925                 mov     ebp, esp
.text$mn:0000A927                 sub     esp, 8
.text$mn:0000A92A                 mov     [ebp+var_8], ecx
.text$mn:0000A92D                 lea     ecx, [ebp+var_1]
.text$mn:0000A930                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000A935                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000A938                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000A93D                 mov     eax, [ebp+var_8]
.text$mn:0000A940                 mov     ecx, [eax]
.text$mn:0000A942                 push    ecx
.text$mn:0000A943                 lea     ecx, [ebp+var_1]
.text$mn:0000A946                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000A94B                 push    1               ; int
.text$mn:0000A94D                 mov     edx, [ebp+var_8]
.text$mn:0000A950                 mov     eax, [edx]
.text$mn:0000A952                 push    eax             ; void *
.text$mn:0000A953                 lea     ecx, [ebp+var_1]
.text$mn:0000A956                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000A95B                 mov     ecx, [ebp+var_8]
.text$mn:0000A95E                 mov     dword ptr [ecx], 0
.text$mn:0000A964                 mov     esp, ebp
.text$mn:0000A966                 pop     ebp
.text$mn:0000A967                 retn
.text$mn:0000A967 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000A967
.text$mn:0000A967 _text$mn        ends
.text$mn:0000A967
.text$mn:0000A968 ; ===========================================================================
.text$mn:0000A968
.text$mn:0000A968 ; Segment type: Pure code
.text$mn:0000A968 ; Segment permissions: Read/Execute
.text$mn:0000A968 _text$mn        segment para public 'CODE' use32
.text$mn:0000A968                 assume cs:_text$mn
.text$mn:0000A968                 ;org 0A968h
.text$mn:0000A968 ; COMDAT (pick any)
.text$mn:0000A968                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A968
.text$mn:0000A968 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A968
.text$mn:0000A968 ; Attributes: bp-based frame
.text$mn:0000A968
.text$mn:0000A968 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>>::_Free_proxy(void)
.text$mn:0000A968                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAEXXZ
.text$mn:0000A968 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:0000A968                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>(void)+30p
.text$mn:0000A968
.text$mn:0000A968 var_8           = dword ptr -8
.text$mn:0000A968 var_1           = byte ptr -1
.text$mn:0000A968
.text$mn:0000A968                 push    ebp
.text$mn:0000A969                 mov     ebp, esp
.text$mn:0000A96B                 sub     esp, 8
.text$mn:0000A96E                 mov     [ebp+var_8], ecx
.text$mn:0000A971                 lea     ecx, [ebp+var_1]
.text$mn:0000A974                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000A979                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000A97C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000A981                 mov     eax, [ebp+var_8]
.text$mn:0000A984                 mov     ecx, [eax]
.text$mn:0000A986                 push    ecx
.text$mn:0000A987                 lea     ecx, [ebp+var_1]
.text$mn:0000A98A                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000A98F                 push    1               ; int
.text$mn:0000A991                 mov     edx, [ebp+var_8]
.text$mn:0000A994                 mov     eax, [edx]
.text$mn:0000A996                 push    eax             ; void *
.text$mn:0000A997                 lea     ecx, [ebp+var_1]
.text$mn:0000A99A                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000A99F                 mov     ecx, [ebp+var_8]
.text$mn:0000A9A2                 mov     dword ptr [ecx], 0
.text$mn:0000A9A8                 mov     esp, ebp
.text$mn:0000A9AA                 pop     ebp
.text$mn:0000A9AB                 retn
.text$mn:0000A9AB ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000A9AB
.text$mn:0000A9AB _text$mn        ends
.text$mn:0000A9AB
.text$mn:0000A9AC ; ===========================================================================
.text$mn:0000A9AC
.text$mn:0000A9AC ; Segment type: Pure code
.text$mn:0000A9AC ; Segment permissions: Read/Execute
.text$mn:0000A9AC _text$mn        segment para public 'CODE' use32
.text$mn:0000A9AC                 assume cs:_text$mn
.text$mn:0000A9AC                 ;org 0A9ACh
.text$mn:0000A9AC ; COMDAT (pick any)
.text$mn:0000A9AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9AC
.text$mn:0000A9AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9AC
.text$mn:0000A9AC ; Attributes: bp-based frame
.text$mn:0000A9AC
.text$mn:0000A9AC ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct AssociationInfo, class std::allocator<struct AssociationInfo>>>::_Free_proxy(void)
.text$mn:0000A9AC                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAEXXZ
.text$mn:0000A9AC ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000A9AC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::~_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>(void)+30p
.text$mn:0000A9AC
.text$mn:0000A9AC var_8           = dword ptr -8
.text$mn:0000A9AC var_1           = byte ptr -1
.text$mn:0000A9AC
.text$mn:0000A9AC                 push    ebp
.text$mn:0000A9AD                 mov     ebp, esp
.text$mn:0000A9AF                 sub     esp, 8
.text$mn:0000A9B2                 mov     [ebp+var_8], ecx
.text$mn:0000A9B5                 lea     ecx, [ebp+var_1]
.text$mn:0000A9B8                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000A9BD                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000A9C0                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000A9C5                 mov     eax, [ebp+var_8]
.text$mn:0000A9C8                 mov     ecx, [eax]
.text$mn:0000A9CA                 push    ecx
.text$mn:0000A9CB                 lea     ecx, [ebp+var_1]
.text$mn:0000A9CE                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000A9D3                 push    1               ; int
.text$mn:0000A9D5                 mov     edx, [ebp+var_8]
.text$mn:0000A9D8                 mov     eax, [edx]
.text$mn:0000A9DA                 push    eax             ; void *
.text$mn:0000A9DB                 lea     ecx, [ebp+var_1]
.text$mn:0000A9DE                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000A9E3                 mov     ecx, [ebp+var_8]
.text$mn:0000A9E6                 mov     dword ptr [ecx], 0
.text$mn:0000A9EC                 mov     esp, ebp
.text$mn:0000A9EE                 pop     ebp
.text$mn:0000A9EF                 retn
.text$mn:0000A9EF ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000A9EF
.text$mn:0000A9EF _text$mn        ends
.text$mn:0000A9EF
.text$mn:0000A9F0 ; ===========================================================================
.text$mn:0000A9F0
.text$mn:0000A9F0 ; Segment type: Pure code
.text$mn:0000A9F0 ; Segment permissions: Read/Execute
.text$mn:0000A9F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000A9F0                 assume cs:_text$mn
.text$mn:0000A9F0                 ;org 0A9F0h
.text$mn:0000A9F0 ; COMDAT (pick any)
.text$mn:0000A9F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000A9F0
.text$mn:0000A9F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000A9F0
.text$mn:0000A9F0 ; Attributes: bp-based frame
.text$mn:0000A9F0
.text$mn:0000A9F0 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:0000A9F0                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:0000A9F0 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:0000A9F0                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+30p
.text$mn:0000A9F0
.text$mn:0000A9F0 var_8           = dword ptr -8
.text$mn:0000A9F0 var_1           = byte ptr -1
.text$mn:0000A9F0
.text$mn:0000A9F0                 push    ebp
.text$mn:0000A9F1                 mov     ebp, esp
.text$mn:0000A9F3                 sub     esp, 8
.text$mn:0000A9F6                 mov     [ebp+var_8], ecx
.text$mn:0000A9F9                 lea     ecx, [ebp+var_1]
.text$mn:0000A9FC                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:0000AA01                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000AA04                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000AA09                 mov     eax, [ebp+var_8]
.text$mn:0000AA0C                 mov     ecx, [eax]
.text$mn:0000AA0E                 push    ecx
.text$mn:0000AA0F                 lea     ecx, [ebp+var_1]
.text$mn:0000AA12                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000AA17                 push    1               ; int
.text$mn:0000AA19                 mov     edx, [ebp+var_8]
.text$mn:0000AA1C                 mov     eax, [edx]
.text$mn:0000AA1E                 push    eax             ; void *
.text$mn:0000AA1F                 lea     ecx, [ebp+var_1]
.text$mn:0000AA22                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000AA27                 mov     ecx, [ebp+var_8]
.text$mn:0000AA2A                 mov     dword ptr [ecx], 0
.text$mn:0000AA30                 mov     esp, ebp
.text$mn:0000AA32                 pop     ebp
.text$mn:0000AA33                 retn
.text$mn:0000AA33 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:0000AA33
.text$mn:0000AA33 _text$mn        ends
.text$mn:0000AA33
.text$mn:0000AA34 ; ===========================================================================
.text$mn:0000AA34
.text$mn:0000AA34 ; Segment type: Pure code
.text$mn:0000AA34 ; Segment permissions: Read/Execute
.text$mn:0000AA34 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA34                 assume cs:_text$mn
.text$mn:0000AA34                 ;org 0AA34h
.text$mn:0000AA34 ; COMDAT (pick any)
.text$mn:0000AA34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA34
.text$mn:0000AA34 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA34
.text$mn:0000AA34 ; Attributes: bp-based frame
.text$mn:0000AA34
.text$mn:0000AA34 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:0000AA34                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:0000AA34 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:0000AA34                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:0000AA34                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:0000AA34
.text$mn:0000AA34 var_4           = dword ptr -4
.text$mn:0000AA34 arg_0           = dword ptr  8
.text$mn:0000AA34
.text$mn:0000AA34                 push    ebp
.text$mn:0000AA35                 mov     ebp, esp
.text$mn:0000AA37                 push    ecx
.text$mn:0000AA38                 mov     [ebp+var_4], ecx
.text$mn:0000AA3B                 mov     ecx, [ebp+arg_0]
.text$mn:0000AA3E                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:0000AA43                 mov     eax, [ebp+arg_0]
.text$mn:0000AA46                 mov     esp, ebp
.text$mn:0000AA48                 pop     ebp
.text$mn:0000AA49                 retn    4
.text$mn:0000AA49 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:0000AA49
.text$mn:0000AA49 _text$mn        ends
.text$mn:0000AA49
.text$mn:0000AA4C ; ===========================================================================
.text$mn:0000AA4C
.text$mn:0000AA4C ; Segment type: Pure code
.text$mn:0000AA4C ; Segment permissions: Read/Execute
.text$mn:0000AA4C _text$mn        segment para public 'CODE' use32
.text$mn:0000AA4C                 assume cs:_text$mn
.text$mn:0000AA4C                 ;org 0AA4Ch
.text$mn:0000AA4C ; COMDAT (pick any)
.text$mn:0000AA4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA4C
.text$mn:0000AA4C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA4C
.text$mn:0000AA4C ; Attributes: bp-based frame
.text$mn:0000AA4C
.text$mn:0000AA4C ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:0000AA4C                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:0000AA4C ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:0000AA4C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Fp
.text$mn:0000AA4C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p ...
.text$mn:0000AA4C
.text$mn:0000AA4C var_4           = dword ptr -4
.text$mn:0000AA4C arg_0           = dword ptr  8
.text$mn:0000AA4C
.text$mn:0000AA4C                 push    ebp
.text$mn:0000AA4D                 mov     ebp, esp
.text$mn:0000AA4F                 push    ecx
.text$mn:0000AA50                 mov     [ebp+var_4], ecx
.text$mn:0000AA53                 mov     ecx, [ebp+arg_0]
.text$mn:0000AA56                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:0000AA5B                 mov     eax, [ebp+arg_0]
.text$mn:0000AA5E                 mov     esp, ebp
.text$mn:0000AA60                 pop     ebp
.text$mn:0000AA61                 retn    4
.text$mn:0000AA61 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:0000AA61
.text$mn:0000AA61 _text$mn        ends
.text$mn:0000AA61
.text$mn:0000AA64 ; ===========================================================================
.text$mn:0000AA64
.text$mn:0000AA64 ; Segment type: Pure code
.text$mn:0000AA64 ; Segment permissions: Read/Execute
.text$mn:0000AA64 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA64                 assume cs:_text$mn
.text$mn:0000AA64                 ;org 0AA64h
.text$mn:0000AA64 ; COMDAT (pick any)
.text$mn:0000AA64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA64
.text$mn:0000AA64 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA64
.text$mn:0000AA64 ; Attributes: bp-based frame
.text$mn:0000AA64
.text$mn:0000AA64 ; public: struct std::_Wrap_alloc<class std::allocator<class FunctionParser *>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class FunctionParser *, class std::allocator<class FunctionParser *>>>::_Getal(void)const
.text$mn:0000AA64                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ
.text$mn:0000AA64 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ proc near
.text$mn:0000AA64                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Umove<FunctionParser * *>(FunctionParser * *,FunctionParser * *,FunctionParser * *)+10p
.text$mn:0000AA64                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Destroy(FunctionParser * *,FunctionParser * *)+10p ...
.text$mn:0000AA64
.text$mn:0000AA64 var_4           = dword ptr -4
.text$mn:0000AA64 arg_0           = dword ptr  8
.text$mn:0000AA64
.text$mn:0000AA64                 push    ebp
.text$mn:0000AA65                 mov     ebp, esp
.text$mn:0000AA67                 push    ecx
.text$mn:0000AA68                 mov     [ebp+var_4], ecx
.text$mn:0000AA6B                 mov     ecx, [ebp+arg_0]
.text$mn:0000AA6E                 call    ??0?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<FunctionParser *>>::_Wrap_alloc<std::allocator<FunctionParser *>>(void)
.text$mn:0000AA73                 mov     eax, [ebp+arg_0]
.text$mn:0000AA76                 mov     esp, ebp
.text$mn:0000AA78                 pop     ebp
.text$mn:0000AA79                 retn    4
.text$mn:0000AA79 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ endp
.text$mn:0000AA79
.text$mn:0000AA79 _text$mn        ends
.text$mn:0000AA79
.text$mn:0000AA7C ; ===========================================================================
.text$mn:0000AA7C
.text$mn:0000AA7C ; Segment type: Pure code
.text$mn:0000AA7C ; Segment permissions: Read/Execute
.text$mn:0000AA7C _text$mn        segment para public 'CODE' use32
.text$mn:0000AA7C                 assume cs:_text$mn
.text$mn:0000AA7C                 ;org 0AA7Ch
.text$mn:0000AA7C ; COMDAT (pick any)
.text$mn:0000AA7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA7C
.text$mn:0000AA7C ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA7C
.text$mn:0000AA7C ; Attributes: bp-based frame
.text$mn:0000AA7C
.text$mn:0000AA7C ; public: struct std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>>::_Getal(void)const
.text$mn:0000AA7C                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ
.text$mn:0000AA7C ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ proc near
.text$mn:0000AA7C                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Umove<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *)+10p
.text$mn:0000AA7C                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Destroy(std::pair<int,int> *,std::pair<int,int> *)+10p ...
.text$mn:0000AA7C
.text$mn:0000AA7C var_4           = dword ptr -4
.text$mn:0000AA7C arg_0           = dword ptr  8
.text$mn:0000AA7C
.text$mn:0000AA7C                 push    ebp
.text$mn:0000AA7D                 mov     ebp, esp
.text$mn:0000AA7F                 push    ecx
.text$mn:0000AA80                 mov     [ebp+var_4], ecx
.text$mn:0000AA83                 mov     ecx, [ebp+arg_0]
.text$mn:0000AA86                 call    ??0?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::_Wrap_alloc<std::allocator<std::pair<int,int>>>(void)
.text$mn:0000AA8B                 mov     eax, [ebp+arg_0]
.text$mn:0000AA8E                 mov     esp, ebp
.text$mn:0000AA90                 pop     ebp
.text$mn:0000AA91                 retn    4
.text$mn:0000AA91 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ endp
.text$mn:0000AA91
.text$mn:0000AA91 _text$mn        ends
.text$mn:0000AA91
.text$mn:0000AA94 ; ===========================================================================
.text$mn:0000AA94
.text$mn:0000AA94 ; Segment type: Pure code
.text$mn:0000AA94 ; Segment permissions: Read/Execute
.text$mn:0000AA94 _text$mn        segment para public 'CODE' use32
.text$mn:0000AA94                 assume cs:_text$mn
.text$mn:0000AA94                 ;org 0AA94h
.text$mn:0000AA94 ; COMDAT (pick any)
.text$mn:0000AA94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AA94
.text$mn:0000AA94 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AA94
.text$mn:0000AA94 ; Attributes: bp-based frame
.text$mn:0000AA94
.text$mn:0000AA94 ; public: struct std::_Wrap_alloc<class std::allocator<struct AssociationInfo>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct AssociationInfo, class std::allocator<struct AssociationInfo>>>::_Getal(void)const
.text$mn:0000AA94                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ
.text$mn:0000AA94 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ proc near
.text$mn:0000AA94                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Umove<AssociationInfo *>(AssociationInfo *,AssociationInfo *,AssociationInfo *)+10p
.text$mn:0000AA94                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Destroy(AssociationInfo *,AssociationInfo *)+10p ...
.text$mn:0000AA94
.text$mn:0000AA94 var_4           = dword ptr -4
.text$mn:0000AA94 arg_0           = dword ptr  8
.text$mn:0000AA94
.text$mn:0000AA94                 push    ebp
.text$mn:0000AA95                 mov     ebp, esp
.text$mn:0000AA97                 push    ecx
.text$mn:0000AA98                 mov     [ebp+var_4], ecx
.text$mn:0000AA9B                 mov     ecx, [ebp+arg_0]
.text$mn:0000AA9E                 call    ??0?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::_Wrap_alloc<std::allocator<AssociationInfo>>(void)
.text$mn:0000AAA3                 mov     eax, [ebp+arg_0]
.text$mn:0000AAA6                 mov     esp, ebp
.text$mn:0000AAA8                 pop     ebp
.text$mn:0000AAA9                 retn    4
.text$mn:0000AAA9 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ endp
.text$mn:0000AAA9
.text$mn:0000AAA9 _text$mn        ends
.text$mn:0000AAA9
.text$mn:0000AAAC ; ===========================================================================
.text$mn:0000AAAC
.text$mn:0000AAAC ; Segment type: Pure code
.text$mn:0000AAAC ; Segment permissions: Read/Execute
.text$mn:0000AAAC _text$mn        segment para public 'CODE' use32
.text$mn:0000AAAC                 assume cs:_text$mn
.text$mn:0000AAAC                 ;org 0AAACh
.text$mn:0000AAAC ; COMDAT (pick any)
.text$mn:0000AAAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAAC
.text$mn:0000AAAC ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAAC
.text$mn:0000AAAC ; Attributes: bp-based frame
.text$mn:0000AAAC
.text$mn:0000AAAC ; public: struct std::_Wrap_alloc<class std::allocator<struct foundInfo>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct foundInfo, class std::allocator<struct foundInfo>>>::_Getal(void)const
.text$mn:0000AAAC                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ
.text$mn:0000AAAC ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ proc near
.text$mn:0000AAAC                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Umove<foundInfo *>(foundInfo *,foundInfo *,foundInfo *)+10p
.text$mn:0000AAAC                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::_Destroy(foundInfo *,foundInfo *)+10p ...
.text$mn:0000AAAC
.text$mn:0000AAAC var_4           = dword ptr -4
.text$mn:0000AAAC arg_0           = dword ptr  8
.text$mn:0000AAAC
.text$mn:0000AAAC                 push    ebp
.text$mn:0000AAAD                 mov     ebp, esp
.text$mn:0000AAAF                 push    ecx
.text$mn:0000AAB0                 mov     [ebp+var_4], ecx
.text$mn:0000AAB3                 mov     ecx, [ebp+arg_0]
.text$mn:0000AAB6                 call    ??0?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<foundInfo>>::_Wrap_alloc<std::allocator<foundInfo>>(void)
.text$mn:0000AABB                 mov     eax, [ebp+arg_0]
.text$mn:0000AABE                 mov     esp, ebp
.text$mn:0000AAC0                 pop     ebp
.text$mn:0000AAC1                 retn    4
.text$mn:0000AAC1 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ endp
.text$mn:0000AAC1
.text$mn:0000AAC1 _text$mn        ends
.text$mn:0000AAC1
.text$mn:0000AAC4 ; ===========================================================================
.text$mn:0000AAC4
.text$mn:0000AAC4 ; Segment type: Pure code
.text$mn:0000AAC4 ; Segment permissions: Read/Execute
.text$mn:0000AAC4 _text$mn        segment para public 'CODE' use32
.text$mn:0000AAC4                 assume cs:_text$mn
.text$mn:0000AAC4                 ;org 0AAC4h
.text$mn:0000AAC4 ; COMDAT (pick any)
.text$mn:0000AAC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AAC4
.text$mn:0000AAC4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AAC4
.text$mn:0000AAC4 ; Attributes: bp-based frame
.text$mn:0000AAC4
.text$mn:0000AAC4 ; public: struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Getal(void)const
.text$mn:0000AAC4                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ
.text$mn:0000AAC4 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ proc near
.text$mn:0000AAC4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Ucopy<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+36p
.text$mn:0000AAC4                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p ...
.text$mn:0000AAC4
.text$mn:0000AAC4 var_4           = dword ptr -4
.text$mn:0000AAC4 arg_0           = dword ptr  8
.text$mn:0000AAC4
.text$mn:0000AAC4                 push    ebp
.text$mn:0000AAC5                 mov     ebp, esp
.text$mn:0000AAC7                 push    ecx
.text$mn:0000AAC8                 mov     [ebp+var_4], ecx
.text$mn:0000AACB                 mov     ecx, [ebp+arg_0]
.text$mn:0000AACE                 call    ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:0000AAD3                 mov     eax, [ebp+arg_0]
.text$mn:0000AAD6                 mov     esp, ebp
.text$mn:0000AAD8                 pop     ebp
.text$mn:0000AAD9                 retn    4
.text$mn:0000AAD9 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ endp
.text$mn:0000AAD9
.text$mn:0000AAD9 _text$mn        ends
.text$mn:0000AAD9
.text$mn:0000AADC ; ===========================================================================
.text$mn:0000AADC
.text$mn:0000AADC ; Segment type: Pure code
.text$mn:0000AADC ; Segment permissions: Read/Execute
.text$mn:0000AADC _text$mn        segment para public 'CODE' use32
.text$mn:0000AADC                 assume cs:_text$mn
.text$mn:0000AADC                 ;org 0AADCh
.text$mn:0000AADC ; COMDAT (pick any)
.text$mn:0000AADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AADC
.text$mn:0000AADC ; =============== S U B R O U T I N E =======================================
.text$mn:0000AADC
.text$mn:0000AADC ; Attributes: bp-based frame
.text$mn:0000AADC
.text$mn:0000AADC ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:0000AADC                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:0000AADC ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:0000AADC                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Bp
.text$mn:0000AADC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+20p ...
.text$mn:0000AADC
.text$mn:0000AADC var_8           = dword ptr -8
.text$mn:0000AADC var_4           = dword ptr -4
.text$mn:0000AADC
.text$mn:0000AADC                 push    ebp
.text$mn:0000AADD                 mov     ebp, esp
.text$mn:0000AADF                 sub     esp, 8
.text$mn:0000AAE2                 mov     [ebp+var_4], ecx
.text$mn:0000AAE5                 mov     eax, [ebp+var_4]
.text$mn:0000AAE8                 cmp     dword ptr [eax], 0
.text$mn:0000AAEB                 jnz     short loc_AAF6
.text$mn:0000AAED                 mov     [ebp+var_8], 0
.text$mn:0000AAF4                 jmp     short loc_AB00
.text$mn:0000AAF6 ; ---------------------------------------------------------------------------
.text$mn:0000AAF6
.text$mn:0000AAF6 loc_AAF6:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:0000AAF6                 mov     ecx, [ebp+var_4]
.text$mn:0000AAF9                 mov     edx, [ecx]
.text$mn:0000AAFB                 mov     eax, [edx]
.text$mn:0000AAFD                 mov     [ebp+var_8], eax
.text$mn:0000AB00
.text$mn:0000AB00 loc_AB00:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:0000AB00                 mov     eax, [ebp+var_8]
.text$mn:0000AB03                 mov     esp, ebp
.text$mn:0000AB05                 pop     ebp
.text$mn:0000AB06                 retn
.text$mn:0000AB06 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:0000AB06
.text$mn:0000AB06 ; ---------------------------------------------------------------------------
.text$mn:0000AB07                 align 4
.text$mn:0000AB07 _text$mn        ends
.text$mn:0000AB07
.text$mn:0000AB08 ; ===========================================================================
.text$mn:0000AB08
.text$mn:0000AB08 ; Segment type: Pure code
.text$mn:0000AB08 ; Segment permissions: Read/Execute
.text$mn:0000AB08 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB08                 assume cs:_text$mn
.text$mn:0000AB08                 ;org 0AB08h
.text$mn:0000AB08 ; COMDAT (pick any)
.text$mn:0000AB08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB08
.text$mn:0000AB08 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB08
.text$mn:0000AB08 ; Attributes: bp-based frame
.text$mn:0000AB08
.text$mn:0000AB08 ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:0000AB08                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:0000AB08 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:0000AB08                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+3Cp
.text$mn:0000AB08                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)+3Cp ...
.text$mn:0000AB08
.text$mn:0000AB08 var_8           = dword ptr -8
.text$mn:0000AB08 var_4           = dword ptr -4
.text$mn:0000AB08
.text$mn:0000AB08                 push    ebp
.text$mn:0000AB09                 mov     ebp, esp
.text$mn:0000AB0B                 sub     esp, 8
.text$mn:0000AB0E                 mov     [ebp+var_4], ecx
.text$mn:0000AB11                 mov     eax, [ebp+var_4]
.text$mn:0000AB14                 cmp     dword ptr [eax], 0
.text$mn:0000AB17                 jnz     short loc_AB22
.text$mn:0000AB19                 mov     [ebp+var_8], 0
.text$mn:0000AB20                 jmp     short loc_AB2D
.text$mn:0000AB22 ; ---------------------------------------------------------------------------
.text$mn:0000AB22
.text$mn:0000AB22 loc_AB22:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:0000AB22                 mov     ecx, [ebp+var_4]
.text$mn:0000AB25                 mov     edx, [ecx]
.text$mn:0000AB27                 add     edx, 4
.text$mn:0000AB2A                 mov     [ebp+var_8], edx
.text$mn:0000AB2D
.text$mn:0000AB2D loc_AB2D:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:0000AB2D                 mov     eax, [ebp+var_8]
.text$mn:0000AB30                 mov     esp, ebp
.text$mn:0000AB32                 pop     ebp
.text$mn:0000AB33                 retn
.text$mn:0000AB33 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:0000AB33
.text$mn:0000AB33 _text$mn        ends
.text$mn:0000AB33
.text$mn:0000AB34 ; ===========================================================================
.text$mn:0000AB34
.text$mn:0000AB34 ; Segment type: Pure code
.text$mn:0000AB34 ; Segment permissions: Read/Execute
.text$mn:0000AB34 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB34                 assume cs:_text$mn
.text$mn:0000AB34                 ;org 0AB34h
.text$mn:0000AB34 ; COMDAT (pick any)
.text$mn:0000AB34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB34
.text$mn:0000AB34 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB34
.text$mn:0000AB34 ; Attributes: bp-based frame
.text$mn:0000AB34
.text$mn:0000AB34 ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:0000AB34                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:0000AB34 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:0000AB34                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+71p
.text$mn:0000AB34                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+8Ap ...
.text$mn:0000AB34
.text$mn:0000AB34 var_4           = dword ptr -4
.text$mn:0000AB34
.text$mn:0000AB34                 push    ebp
.text$mn:0000AB35                 mov     ebp, esp
.text$mn:0000AB37                 push    ecx
.text$mn:0000AB38                 mov     [ebp+var_4], ecx
.text$mn:0000AB3B                 mov     eax, [ebp+var_4]
.text$mn:0000AB3E                 add     eax, 4
.text$mn:0000AB41                 mov     esp, ebp
.text$mn:0000AB43                 pop     ebp
.text$mn:0000AB44                 retn
.text$mn:0000AB44 ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:0000AB44
.text$mn:0000AB44 ; ---------------------------------------------------------------------------
.text$mn:0000AB45                 align 4
.text$mn:0000AB45 _text$mn        ends
.text$mn:0000AB45
.text$mn:0000AB48 ; ===========================================================================
.text$mn:0000AB48
.text$mn:0000AB48 ; Segment type: Pure code
.text$mn:0000AB48 ; Segment permissions: Read/Execute
.text$mn:0000AB48 _text$mn        segment para public 'CODE' use32
.text$mn:0000AB48                 assume cs:_text$mn
.text$mn:0000AB48                 ;org 0AB48h
.text$mn:0000AB48 ; COMDAT (pick any)
.text$mn:0000AB48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AB48
.text$mn:0000AB48 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AB48
.text$mn:0000AB48 ; Attributes: bp-based frame
.text$mn:0000AB48
.text$mn:0000AB48 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:0000AB48                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:0000AB48 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:0000AB48                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:0000AB48                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:0000AB48
.text$mn:0000AB48 var_C           = dword ptr -0Ch
.text$mn:0000AB48 Size            = dword ptr -8
.text$mn:0000AB48 var_4           = dword ptr -4
.text$mn:0000AB48 arg_0           = dword ptr  8
.text$mn:0000AB48 arg_4           = byte ptr  0Ch
.text$mn:0000AB48
.text$mn:0000AB48                 push    ebp
.text$mn:0000AB49                 mov     ebp, esp
.text$mn:0000AB4B                 sub     esp, 0Ch
.text$mn:0000AB4E                 mov     [ebp+var_4], ecx
.text$mn:0000AB51                 mov     ecx, [ebp+var_4]
.text$mn:0000AB54                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:0000AB59                 cmp     eax, [ebp+arg_0]
.text$mn:0000AB5C                 jnb     short loc_AB66
.text$mn:0000AB5E                 mov     ecx, [ebp+var_4]
.text$mn:0000AB61                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:0000AB66
.text$mn:0000AB66 loc_AB66:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:0000AB66                 mov     eax, [ebp+var_4]
.text$mn:0000AB69                 mov     ecx, [eax+18h]
.text$mn:0000AB6C                 cmp     ecx, [ebp+arg_0]
.text$mn:0000AB6F                 jnb     short loc_AB86
.text$mn:0000AB71                 mov     edx, [ebp+var_4]
.text$mn:0000AB74                 mov     eax, [edx+14h]
.text$mn:0000AB77                 push    eax
.text$mn:0000AB78                 mov     ecx, [ebp+arg_0]
.text$mn:0000AB7B                 push    ecx
.text$mn:0000AB7C                 mov     ecx, [ebp+var_4]
.text$mn:0000AB7F                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:0000AB84                 jmp     short loc_ABD0
.text$mn:0000AB86 ; ---------------------------------------------------------------------------
.text$mn:0000AB86
.text$mn:0000AB86 loc_AB86:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:0000AB86                 movzx   edx, [ebp+arg_4]
.text$mn:0000AB8A                 test    edx, edx
.text$mn:0000AB8C                 jz      short loc_ABC0
.text$mn:0000AB8E                 cmp     [ebp+arg_0], 10h
.text$mn:0000AB92                 jnb     short loc_ABC0
.text$mn:0000AB94                 mov     eax, [ebp+var_4]
.text$mn:0000AB97                 mov     ecx, [ebp+arg_0]
.text$mn:0000AB9A                 cmp     ecx, [eax+14h]
.text$mn:0000AB9D                 jnb     short loc_ABA7
.text$mn:0000AB9F                 mov     edx, [ebp+arg_0]
.text$mn:0000ABA2                 mov     [ebp+Size], edx
.text$mn:0000ABA5                 jmp     short loc_ABB0
.text$mn:0000ABA7 ; ---------------------------------------------------------------------------
.text$mn:0000ABA7
.text$mn:0000ABA7 loc_ABA7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:0000ABA7                 mov     eax, [ebp+var_4]
.text$mn:0000ABAA                 mov     ecx, [eax+14h]
.text$mn:0000ABAD                 mov     [ebp+Size], ecx
.text$mn:0000ABB0
.text$mn:0000ABB0 loc_ABB0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:0000ABB0                 mov     edx, [ebp+Size]
.text$mn:0000ABB3                 push    edx             ; Size
.text$mn:0000ABB4                 push    1               ; char
.text$mn:0000ABB6                 mov     ecx, [ebp+var_4]
.text$mn:0000ABB9                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000ABBE                 jmp     short loc_ABD0
.text$mn:0000ABC0 ; ---------------------------------------------------------------------------
.text$mn:0000ABC0
.text$mn:0000ABC0 loc_ABC0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:0000ABC0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:0000ABC0                 cmp     [ebp+arg_0], 0
.text$mn:0000ABC4                 jnz     short loc_ABD0
.text$mn:0000ABC6                 push    0
.text$mn:0000ABC8                 mov     ecx, [ebp+var_4]
.text$mn:0000ABCB                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000ABD0
.text$mn:0000ABD0 loc_ABD0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:0000ABD0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:0000ABD0                 cmp     [ebp+arg_0], 0
.text$mn:0000ABD4                 jbe     short loc_ABDF
.text$mn:0000ABD6                 mov     [ebp+var_C], 1
.text$mn:0000ABDD                 jmp     short loc_ABE6
.text$mn:0000ABDF ; ---------------------------------------------------------------------------
.text$mn:0000ABDF
.text$mn:0000ABDF loc_ABDF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:0000ABDF                 mov     [ebp+var_C], 0
.text$mn:0000ABE6
.text$mn:0000ABE6 loc_ABE6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:0000ABE6                 mov     al, byte ptr [ebp+var_C]
.text$mn:0000ABE9                 mov     esp, ebp
.text$mn:0000ABEB                 pop     ebp
.text$mn:0000ABEC                 retn    8
.text$mn:0000ABEC ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:0000ABEC
.text$mn:0000ABEC ; ---------------------------------------------------------------------------
.text$mn:0000ABEF                 align 10h
.text$mn:0000ABEF _text$mn        ends
.text$mn:0000ABEF
.text$mn:0000ABF0 ; ===========================================================================
.text$mn:0000ABF0
.text$mn:0000ABF0 ; Segment type: Pure code
.text$mn:0000ABF0 ; Segment permissions: Read/Execute
.text$mn:0000ABF0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ABF0                 assume cs:_text$mn
.text$mn:0000ABF0                 ;org 0ABF0h
.text$mn:0000ABF0 ; COMDAT (pick any)
.text$mn:0000ABF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ABF0
.text$mn:0000ABF0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ABF0
.text$mn:0000ABF0 ; Attributes: bp-based frame
.text$mn:0000ABF0
.text$mn:0000ABF0 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:0000ABF0                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:0000ABF0 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:0000ABF0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:0000ABF0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:0000ABF0
.text$mn:0000ABF0 var_C           = dword ptr -0Ch
.text$mn:0000ABF0 var_8           = dword ptr -8
.text$mn:0000ABF0 var_4           = dword ptr -4
.text$mn:0000ABF0 arg_0           = dword ptr  8
.text$mn:0000ABF0 arg_4           = byte ptr  0Ch
.text$mn:0000ABF0
.text$mn:0000ABF0                 push    ebp
.text$mn:0000ABF1                 mov     ebp, esp
.text$mn:0000ABF3                 sub     esp, 0Ch
.text$mn:0000ABF6                 mov     [ebp+var_4], ecx
.text$mn:0000ABF9                 mov     ecx, [ebp+var_4]
.text$mn:0000ABFC                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:0000AC01                 cmp     eax, [ebp+arg_0]
.text$mn:0000AC04                 jnb     short loc_AC0E
.text$mn:0000AC06                 mov     ecx, [ebp+var_4]
.text$mn:0000AC09                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000AC0E
.text$mn:0000AC0E loc_AC0E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:0000AC0E                 mov     eax, [ebp+var_4]
.text$mn:0000AC11                 mov     ecx, [eax+18h]
.text$mn:0000AC14                 cmp     ecx, [ebp+arg_0]
.text$mn:0000AC17                 jnb     short loc_AC2E
.text$mn:0000AC19                 mov     edx, [ebp+var_4]
.text$mn:0000AC1C                 mov     eax, [edx+14h]
.text$mn:0000AC1F                 push    eax
.text$mn:0000AC20                 mov     ecx, [ebp+arg_0]
.text$mn:0000AC23                 push    ecx
.text$mn:0000AC24                 mov     ecx, [ebp+var_4]
.text$mn:0000AC27                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:0000AC2C                 jmp     short loc_AC78
.text$mn:0000AC2E ; ---------------------------------------------------------------------------
.text$mn:0000AC2E
.text$mn:0000AC2E loc_AC2E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:0000AC2E                 movzx   edx, [ebp+arg_4]
.text$mn:0000AC32                 test    edx, edx
.text$mn:0000AC34                 jz      short loc_AC68
.text$mn:0000AC36                 cmp     [ebp+arg_0], 8
.text$mn:0000AC3A                 jnb     short loc_AC68
.text$mn:0000AC3C                 mov     eax, [ebp+var_4]
.text$mn:0000AC3F                 mov     ecx, [ebp+arg_0]
.text$mn:0000AC42                 cmp     ecx, [eax+14h]
.text$mn:0000AC45                 jnb     short loc_AC4F
.text$mn:0000AC47                 mov     edx, [ebp+arg_0]
.text$mn:0000AC4A                 mov     [ebp+var_8], edx
.text$mn:0000AC4D                 jmp     short loc_AC58
.text$mn:0000AC4F ; ---------------------------------------------------------------------------
.text$mn:0000AC4F
.text$mn:0000AC4F loc_AC4F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:0000AC4F                 mov     eax, [ebp+var_4]
.text$mn:0000AC52                 mov     ecx, [eax+14h]
.text$mn:0000AC55                 mov     [ebp+var_8], ecx
.text$mn:0000AC58
.text$mn:0000AC58 loc_AC58:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:0000AC58                 mov     edx, [ebp+var_8]
.text$mn:0000AC5B                 push    edx
.text$mn:0000AC5C                 push    1
.text$mn:0000AC5E                 mov     ecx, [ebp+var_4]
.text$mn:0000AC61                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000AC66                 jmp     short loc_AC78
.text$mn:0000AC68 ; ---------------------------------------------------------------------------
.text$mn:0000AC68
.text$mn:0000AC68 loc_AC68:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:0000AC68                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:0000AC68                 cmp     [ebp+arg_0], 0
.text$mn:0000AC6C                 jnz     short loc_AC78
.text$mn:0000AC6E                 push    0
.text$mn:0000AC70                 mov     ecx, [ebp+var_4]
.text$mn:0000AC73                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000AC78
.text$mn:0000AC78 loc_AC78:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:0000AC78                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:0000AC78                 cmp     [ebp+arg_0], 0
.text$mn:0000AC7C                 jbe     short loc_AC87
.text$mn:0000AC7E                 mov     [ebp+var_C], 1
.text$mn:0000AC85                 jmp     short loc_AC8E
.text$mn:0000AC87 ; ---------------------------------------------------------------------------
.text$mn:0000AC87
.text$mn:0000AC87 loc_AC87:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:0000AC87                 mov     [ebp+var_C], 0
.text$mn:0000AC8E
.text$mn:0000AC8E loc_AC8E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:0000AC8E                 mov     al, byte ptr [ebp+var_C]
.text$mn:0000AC91                 mov     esp, ebp
.text$mn:0000AC93                 pop     ebp
.text$mn:0000AC94                 retn    8
.text$mn:0000AC94 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:0000AC94
.text$mn:0000AC94 ; ---------------------------------------------------------------------------
.text$mn:0000AC97                 align 4
.text$mn:0000AC97 _text$mn        ends
.text$mn:0000AC97
.text$mn:0000AC98 ; ===========================================================================
.text$mn:0000AC98
.text$mn:0000AC98 ; Segment type: Pure code
.text$mn:0000AC98 ; Segment permissions: Read/Execute
.text$mn:0000AC98 _text$mn        segment para public 'CODE' use32
.text$mn:0000AC98                 assume cs:_text$mn
.text$mn:0000AC98                 ;org 0AC98h
.text$mn:0000AC98 ; COMDAT (pick any)
.text$mn:0000AC98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AC98
.text$mn:0000AC98 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AC98
.text$mn:0000AC98 ; Attributes: bp-based frame
.text$mn:0000AC98
.text$mn:0000AC98 ; protected: unsigned int __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Grow_to(unsigned int)const
.text$mn:0000AC98                 public ?_Grow_to@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEII@Z
.text$mn:0000AC98 ?_Grow_to@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEII@Z proc near
.text$mn:0000AC98                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)+45p
.text$mn:0000AC98
.text$mn:0000AC98 var_C           = dword ptr -0Ch
.text$mn:0000AC98 var_8           = dword ptr -8
.text$mn:0000AC98 var_4           = dword ptr -4
.text$mn:0000AC98 arg_0           = dword ptr  8
.text$mn:0000AC98
.text$mn:0000AC98                 push    ebp
.text$mn:0000AC99                 mov     ebp, esp
.text$mn:0000AC9B                 sub     esp, 0Ch
.text$mn:0000AC9E                 mov     [ebp+var_8], ecx
.text$mn:0000ACA1                 mov     ecx, [ebp+var_8]
.text$mn:0000ACA4                 call    ?capacity@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::capacity(void)
.text$mn:0000ACA9                 mov     [ebp+var_4], eax
.text$mn:0000ACAC                 mov     ecx, [ebp+var_8]
.text$mn:0000ACAF                 call    ?max_size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::max_size(void)
.text$mn:0000ACB4                 mov     ecx, [ebp+var_4]
.text$mn:0000ACB7                 shr     ecx, 1
.text$mn:0000ACB9                 sub     eax, ecx
.text$mn:0000ACBB                 cmp     eax, [ebp+var_4]
.text$mn:0000ACBE                 jnb     short loc_ACC9
.text$mn:0000ACC0                 mov     [ebp+var_C], 0
.text$mn:0000ACC7                 jmp     short loc_ACD4
.text$mn:0000ACC9 ; ---------------------------------------------------------------------------
.text$mn:0000ACC9
.text$mn:0000ACC9 loc_ACC9:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Grow_to(uint)+26j
.text$mn:0000ACC9                 mov     edx, [ebp+var_4]
.text$mn:0000ACCC                 shr     edx, 1
.text$mn:0000ACCE                 add     edx, [ebp+var_4]
.text$mn:0000ACD1                 mov     [ebp+var_C], edx
.text$mn:0000ACD4
.text$mn:0000ACD4 loc_ACD4:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Grow_to(uint)+2Fj
.text$mn:0000ACD4                 mov     eax, [ebp+var_C]
.text$mn:0000ACD7                 mov     [ebp+var_4], eax
.text$mn:0000ACDA                 mov     ecx, [ebp+var_4]
.text$mn:0000ACDD                 cmp     ecx, [ebp+arg_0]
.text$mn:0000ACE0                 jnb     short loc_ACE8
.text$mn:0000ACE2                 mov     edx, [ebp+arg_0]
.text$mn:0000ACE5                 mov     [ebp+var_4], edx
.text$mn:0000ACE8
.text$mn:0000ACE8 loc_ACE8:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Grow_to(uint)+48j
.text$mn:0000ACE8                 mov     eax, [ebp+var_4]
.text$mn:0000ACEB                 mov     esp, ebp
.text$mn:0000ACED                 pop     ebp
.text$mn:0000ACEE                 retn    4
.text$mn:0000ACEE ?_Grow_to@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEII@Z endp
.text$mn:0000ACEE
.text$mn:0000ACEE ; ---------------------------------------------------------------------------
.text$mn:0000ACF1                 align 4
.text$mn:0000ACF1 _text$mn        ends
.text$mn:0000ACF1
.text$mn:0000ACF4 ; ===========================================================================
.text$mn:0000ACF4
.text$mn:0000ACF4 ; Segment type: Pure code
.text$mn:0000ACF4 ; Segment permissions: Read/Execute
.text$mn:0000ACF4 _text$mn        segment para public 'CODE' use32
.text$mn:0000ACF4                 assume cs:_text$mn
.text$mn:0000ACF4                 ;org 0ACF4h
.text$mn:0000ACF4 ; COMDAT (pick any)
.text$mn:0000ACF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ACF4
.text$mn:0000ACF4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ACF4
.text$mn:0000ACF4 ; Attributes: bp-based frame
.text$mn:0000ACF4
.text$mn:0000ACF4 ; protected: unsigned int __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Grow_to(unsigned int)const
.text$mn:0000ACF4                 public ?_Grow_to@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEII@Z
.text$mn:0000ACF4 ?_Grow_to@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEII@Z proc near
.text$mn:0000ACF4                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)+45p
.text$mn:0000ACF4
.text$mn:0000ACF4 var_C           = dword ptr -0Ch
.text$mn:0000ACF4 var_8           = dword ptr -8
.text$mn:0000ACF4 var_4           = dword ptr -4
.text$mn:0000ACF4 arg_0           = dword ptr  8
.text$mn:0000ACF4
.text$mn:0000ACF4                 push    ebp
.text$mn:0000ACF5                 mov     ebp, esp
.text$mn:0000ACF7                 sub     esp, 0Ch
.text$mn:0000ACFA                 mov     [ebp+var_8], ecx
.text$mn:0000ACFD                 mov     ecx, [ebp+var_8]
.text$mn:0000AD00                 call    ?capacity@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::capacity(void)
.text$mn:0000AD05                 mov     [ebp+var_4], eax
.text$mn:0000AD08                 mov     ecx, [ebp+var_8]
.text$mn:0000AD0B                 call    ?max_size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::max_size(void)
.text$mn:0000AD10                 mov     ecx, [ebp+var_4]
.text$mn:0000AD13                 shr     ecx, 1
.text$mn:0000AD15                 sub     eax, ecx
.text$mn:0000AD17                 cmp     eax, [ebp+var_4]
.text$mn:0000AD1A                 jnb     short loc_AD25
.text$mn:0000AD1C                 mov     [ebp+var_C], 0
.text$mn:0000AD23                 jmp     short loc_AD30
.text$mn:0000AD25 ; ---------------------------------------------------------------------------
.text$mn:0000AD25
.text$mn:0000AD25 loc_AD25:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Grow_to(uint)+26j
.text$mn:0000AD25                 mov     edx, [ebp+var_4]
.text$mn:0000AD28                 shr     edx, 1
.text$mn:0000AD2A                 add     edx, [ebp+var_4]
.text$mn:0000AD2D                 mov     [ebp+var_C], edx
.text$mn:0000AD30
.text$mn:0000AD30 loc_AD30:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Grow_to(uint)+2Fj
.text$mn:0000AD30                 mov     eax, [ebp+var_C]
.text$mn:0000AD33                 mov     [ebp+var_4], eax
.text$mn:0000AD36                 mov     ecx, [ebp+var_4]
.text$mn:0000AD39                 cmp     ecx, [ebp+arg_0]
.text$mn:0000AD3C                 jnb     short loc_AD44
.text$mn:0000AD3E                 mov     edx, [ebp+arg_0]
.text$mn:0000AD41                 mov     [ebp+var_4], edx
.text$mn:0000AD44
.text$mn:0000AD44 loc_AD44:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Grow_to(uint)+48j
.text$mn:0000AD44                 mov     eax, [ebp+var_4]
.text$mn:0000AD47                 mov     esp, ebp
.text$mn:0000AD49                 pop     ebp
.text$mn:0000AD4A                 retn    4
.text$mn:0000AD4A ?_Grow_to@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEII@Z endp
.text$mn:0000AD4A
.text$mn:0000AD4A ; ---------------------------------------------------------------------------
.text$mn:0000AD4D                 align 10h
.text$mn:0000AD4D _text$mn        ends
.text$mn:0000AD4D
.text$mn:0000AD50 ; ===========================================================================
.text$mn:0000AD50
.text$mn:0000AD50 ; Segment type: Pure code
.text$mn:0000AD50 ; Segment permissions: Read/Execute
.text$mn:0000AD50 _text$mn        segment para public 'CODE' use32
.text$mn:0000AD50                 assume cs:_text$mn
.text$mn:0000AD50                 ;org 0AD50h
.text$mn:0000AD50 ; COMDAT (pick any)
.text$mn:0000AD50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AD50
.text$mn:0000AD50 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AD50
.text$mn:0000AD50 ; Attributes: bp-based frame
.text$mn:0000AD50
.text$mn:0000AD50 ; protected: unsigned int __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Grow_to(unsigned int)const
.text$mn:0000AD50                 public ?_Grow_to@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEII@Z
.text$mn:0000AD50 ?_Grow_to@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEII@Z proc near
.text$mn:0000AD50                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)+45p
.text$mn:0000AD50
.text$mn:0000AD50 var_C           = dword ptr -0Ch
.text$mn:0000AD50 var_8           = dword ptr -8
.text$mn:0000AD50 var_4           = dword ptr -4
.text$mn:0000AD50 arg_0           = dword ptr  8
.text$mn:0000AD50
.text$mn:0000AD50                 push    ebp
.text$mn:0000AD51                 mov     ebp, esp
.text$mn:0000AD53                 sub     esp, 0Ch
.text$mn:0000AD56                 mov     [ebp+var_8], ecx
.text$mn:0000AD59                 mov     ecx, [ebp+var_8]
.text$mn:0000AD5C                 call    ?capacity@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::capacity(void)
.text$mn:0000AD61                 mov     [ebp+var_4], eax
.text$mn:0000AD64                 mov     ecx, [ebp+var_8]
.text$mn:0000AD67                 call    ?max_size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::max_size(void)
.text$mn:0000AD6C                 mov     ecx, [ebp+var_4]
.text$mn:0000AD6F                 shr     ecx, 1
.text$mn:0000AD71                 sub     eax, ecx
.text$mn:0000AD73                 cmp     eax, [ebp+var_4]
.text$mn:0000AD76                 jnb     short loc_AD81
.text$mn:0000AD78                 mov     [ebp+var_C], 0
.text$mn:0000AD7F                 jmp     short loc_AD8C
.text$mn:0000AD81 ; ---------------------------------------------------------------------------
.text$mn:0000AD81
.text$mn:0000AD81 loc_AD81:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Grow_to(uint)+26j
.text$mn:0000AD81                 mov     edx, [ebp+var_4]
.text$mn:0000AD84                 shr     edx, 1
.text$mn:0000AD86                 add     edx, [ebp+var_4]
.text$mn:0000AD89                 mov     [ebp+var_C], edx
.text$mn:0000AD8C
.text$mn:0000AD8C loc_AD8C:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Grow_to(uint)+2Fj
.text$mn:0000AD8C                 mov     eax, [ebp+var_C]
.text$mn:0000AD8F                 mov     [ebp+var_4], eax
.text$mn:0000AD92                 mov     ecx, [ebp+var_4]
.text$mn:0000AD95                 cmp     ecx, [ebp+arg_0]
.text$mn:0000AD98                 jnb     short loc_ADA0
.text$mn:0000AD9A                 mov     edx, [ebp+arg_0]
.text$mn:0000AD9D                 mov     [ebp+var_4], edx
.text$mn:0000ADA0
.text$mn:0000ADA0 loc_ADA0:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Grow_to(uint)+48j
.text$mn:0000ADA0                 mov     eax, [ebp+var_4]
.text$mn:0000ADA3                 mov     esp, ebp
.text$mn:0000ADA5                 pop     ebp
.text$mn:0000ADA6                 retn    4
.text$mn:0000ADA6 ?_Grow_to@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEII@Z endp
.text$mn:0000ADA6
.text$mn:0000ADA6 ; ---------------------------------------------------------------------------
.text$mn:0000ADA9                 align 4
.text$mn:0000ADA9 _text$mn        ends
.text$mn:0000ADA9
.text$mn:0000ADAC ; ===========================================================================
.text$mn:0000ADAC
.text$mn:0000ADAC ; Segment type: Pure code
.text$mn:0000ADAC ; Segment permissions: Read/Execute
.text$mn:0000ADAC _text$mn        segment para public 'CODE' use32
.text$mn:0000ADAC                 assume cs:_text$mn
.text$mn:0000ADAC                 ;org 0ADACh
.text$mn:0000ADAC ; COMDAT (pick any)
.text$mn:0000ADAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ADAC
.text$mn:0000ADAC ; =============== S U B R O U T I N E =======================================
.text$mn:0000ADAC
.text$mn:0000ADAC ; Attributes: bp-based frame
.text$mn:0000ADAC
.text$mn:0000ADAC ; protected: unsigned int __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Grow_to(unsigned int)const
.text$mn:0000ADAC                 public ?_Grow_to@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEII@Z
.text$mn:0000ADAC ?_Grow_to@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEII@Z proc near
.text$mn:0000ADAC                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)+45p
.text$mn:0000ADAC
.text$mn:0000ADAC var_C           = dword ptr -0Ch
.text$mn:0000ADAC var_8           = dword ptr -8
.text$mn:0000ADAC var_4           = dword ptr -4
.text$mn:0000ADAC arg_0           = dword ptr  8
.text$mn:0000ADAC
.text$mn:0000ADAC                 push    ebp
.text$mn:0000ADAD                 mov     ebp, esp
.text$mn:0000ADAF                 sub     esp, 0Ch
.text$mn:0000ADB2                 mov     [ebp+var_8], ecx
.text$mn:0000ADB5                 mov     ecx, [ebp+var_8]
.text$mn:0000ADB8                 call    ?capacity@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::capacity(void)
.text$mn:0000ADBD                 mov     [ebp+var_4], eax
.text$mn:0000ADC0                 mov     ecx, [ebp+var_8]
.text$mn:0000ADC3                 call    ?max_size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::max_size(void)
.text$mn:0000ADC8                 mov     ecx, [ebp+var_4]
.text$mn:0000ADCB                 shr     ecx, 1
.text$mn:0000ADCD                 sub     eax, ecx
.text$mn:0000ADCF                 cmp     eax, [ebp+var_4]
.text$mn:0000ADD2                 jnb     short loc_ADDD
.text$mn:0000ADD4                 mov     [ebp+var_C], 0
.text$mn:0000ADDB                 jmp     short loc_ADE8
.text$mn:0000ADDD ; ---------------------------------------------------------------------------
.text$mn:0000ADDD
.text$mn:0000ADDD loc_ADDD:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Grow_to(uint)+26j
.text$mn:0000ADDD                 mov     edx, [ebp+var_4]
.text$mn:0000ADE0                 shr     edx, 1
.text$mn:0000ADE2                 add     edx, [ebp+var_4]
.text$mn:0000ADE5                 mov     [ebp+var_C], edx
.text$mn:0000ADE8
.text$mn:0000ADE8 loc_ADE8:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Grow_to(uint)+2Fj
.text$mn:0000ADE8                 mov     eax, [ebp+var_C]
.text$mn:0000ADEB                 mov     [ebp+var_4], eax
.text$mn:0000ADEE                 mov     ecx, [ebp+var_4]
.text$mn:0000ADF1                 cmp     ecx, [ebp+arg_0]
.text$mn:0000ADF4                 jnb     short loc_ADFC
.text$mn:0000ADF6                 mov     edx, [ebp+arg_0]
.text$mn:0000ADF9                 mov     [ebp+var_4], edx
.text$mn:0000ADFC
.text$mn:0000ADFC loc_ADFC:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Grow_to(uint)+48j
.text$mn:0000ADFC                 mov     eax, [ebp+var_4]
.text$mn:0000ADFF                 mov     esp, ebp
.text$mn:0000AE01                 pop     ebp
.text$mn:0000AE02                 retn    4
.text$mn:0000AE02 ?_Grow_to@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEII@Z endp
.text$mn:0000AE02
.text$mn:0000AE02 ; ---------------------------------------------------------------------------
.text$mn:0000AE05                 align 4
.text$mn:0000AE05 _text$mn        ends
.text$mn:0000AE05
.text$mn:0000AE08 ; ===========================================================================
.text$mn:0000AE08
.text$mn:0000AE08 ; Segment type: Pure code
.text$mn:0000AE08 ; Segment permissions: Read/Execute
.text$mn:0000AE08 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE08                 assume cs:_text$mn
.text$mn:0000AE08                 ;org 0AE08h
.text$mn:0000AE08 ; COMDAT (pick any)
.text$mn:0000AE08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE08
.text$mn:0000AE08 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE08
.text$mn:0000AE08 ; Attributes: bp-based frame
.text$mn:0000AE08
.text$mn:0000AE08 ; protected: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Grow_to(unsigned int)const
.text$mn:0000AE08                 public ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z
.text$mn:0000AE08 ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z proc near
.text$mn:0000AE08                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+45p
.text$mn:0000AE08
.text$mn:0000AE08 var_C           = dword ptr -0Ch
.text$mn:0000AE08 var_8           = dword ptr -8
.text$mn:0000AE08 var_4           = dword ptr -4
.text$mn:0000AE08 arg_0           = dword ptr  8
.text$mn:0000AE08
.text$mn:0000AE08                 push    ebp
.text$mn:0000AE09                 mov     ebp, esp
.text$mn:0000AE0B                 sub     esp, 0Ch
.text$mn:0000AE0E                 mov     [ebp+var_8], ecx
.text$mn:0000AE11                 mov     ecx, [ebp+var_8]
.text$mn:0000AE14                 call    ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::capacity(void)
.text$mn:0000AE19                 mov     [ebp+var_4], eax
.text$mn:0000AE1C                 mov     ecx, [ebp+var_8]
.text$mn:0000AE1F                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000AE24                 mov     ecx, [ebp+var_4]
.text$mn:0000AE27                 shr     ecx, 1
.text$mn:0000AE29                 sub     eax, ecx
.text$mn:0000AE2B                 cmp     eax, [ebp+var_4]
.text$mn:0000AE2E                 jnb     short loc_AE39
.text$mn:0000AE30                 mov     [ebp+var_C], 0
.text$mn:0000AE37                 jmp     short loc_AE44
.text$mn:0000AE39 ; ---------------------------------------------------------------------------
.text$mn:0000AE39
.text$mn:0000AE39 loc_AE39:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+26j
.text$mn:0000AE39                 mov     edx, [ebp+var_4]
.text$mn:0000AE3C                 shr     edx, 1
.text$mn:0000AE3E                 add     edx, [ebp+var_4]
.text$mn:0000AE41                 mov     [ebp+var_C], edx
.text$mn:0000AE44
.text$mn:0000AE44 loc_AE44:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+2Fj
.text$mn:0000AE44                 mov     eax, [ebp+var_C]
.text$mn:0000AE47                 mov     [ebp+var_4], eax
.text$mn:0000AE4A                 mov     ecx, [ebp+var_4]
.text$mn:0000AE4D                 cmp     ecx, [ebp+arg_0]
.text$mn:0000AE50                 jnb     short loc_AE58
.text$mn:0000AE52                 mov     edx, [ebp+arg_0]
.text$mn:0000AE55                 mov     [ebp+var_4], edx
.text$mn:0000AE58
.text$mn:0000AE58 loc_AE58:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+48j
.text$mn:0000AE58                 mov     eax, [ebp+var_4]
.text$mn:0000AE5B                 mov     esp, ebp
.text$mn:0000AE5D                 pop     ebp
.text$mn:0000AE5E                 retn    4
.text$mn:0000AE5E ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z endp
.text$mn:0000AE5E
.text$mn:0000AE5E ; ---------------------------------------------------------------------------
.text$mn:0000AE61                 align 4
.text$mn:0000AE61 _text$mn        ends
.text$mn:0000AE61
.text$mn:0000AE64 ; ===========================================================================
.text$mn:0000AE64
.text$mn:0000AE64 ; Segment type: Pure code
.text$mn:0000AE64 ; Segment permissions: Read/Execute
.text$mn:0000AE64 _text$mn        segment para public 'CODE' use32
.text$mn:0000AE64                 assume cs:_text$mn
.text$mn:0000AE64                 ;org 0AE64h
.text$mn:0000AE64 ; COMDAT (pick any)
.text$mn:0000AE64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AE64
.text$mn:0000AE64 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AE64
.text$mn:0000AE64 ; Attributes: bp-based frame
.text$mn:0000AE64
.text$mn:0000AE64 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:0000AE64                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:0000AE64 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:0000AE64                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:0000AE64
.text$mn:0000AE64 var_4           = dword ptr -4
.text$mn:0000AE64 arg_0           = dword ptr  8
.text$mn:0000AE64
.text$mn:0000AE64                 push    ebp
.text$mn:0000AE65                 mov     ebp, esp
.text$mn:0000AE67                 push    ecx
.text$mn:0000AE68                 mov     [ebp+var_4], ecx
.text$mn:0000AE6B                 cmp     [ebp+arg_0], 0
.text$mn:0000AE6F                 jz      short loc_AE91
.text$mn:0000AE71                 mov     ecx, [ebp+var_4]
.text$mn:0000AE74                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000AE79                 cmp     [ebp+arg_0], eax
.text$mn:0000AE7C                 jb      short loc_AE91
.text$mn:0000AE7E                 mov     ecx, [ebp+var_4]
.text$mn:0000AE81                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000AE86                 mov     ecx, [ebp+var_4]
.text$mn:0000AE89                 add     eax, [ecx+14h]
.text$mn:0000AE8C                 cmp     eax, [ebp+arg_0]
.text$mn:0000AE8F                 ja      short loc_AE97
.text$mn:0000AE91
.text$mn:0000AE91 loc_AE91:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:0000AE91                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:0000AE91                 xor     al, al
.text$mn:0000AE93                 jmp     short loc_AE99
.text$mn:0000AE95 ; ---------------------------------------------------------------------------
.text$mn:0000AE95                 jmp     short loc_AE99
.text$mn:0000AE97 ; ---------------------------------------------------------------------------
.text$mn:0000AE97
.text$mn:0000AE97 loc_AE97:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:0000AE97                 mov     al, 1
.text$mn:0000AE99
.text$mn:0000AE99 loc_AE99:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:0000AE99                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:0000AE99                 mov     esp, ebp
.text$mn:0000AE9B                 pop     ebp
.text$mn:0000AE9C                 retn    4
.text$mn:0000AE9C ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:0000AE9C
.text$mn:0000AE9C ; ---------------------------------------------------------------------------
.text$mn:0000AE9F                 align 10h
.text$mn:0000AE9F _text$mn        ends
.text$mn:0000AE9F
.text$mn:0000AEA0 ; ===========================================================================
.text$mn:0000AEA0
.text$mn:0000AEA0 ; Segment type: Pure code
.text$mn:0000AEA0 ; Segment permissions: Read/Execute
.text$mn:0000AEA0 _text$mn        segment para public 'CODE' use32
.text$mn:0000AEA0                 assume cs:_text$mn
.text$mn:0000AEA0                 ;org 0AEA0h
.text$mn:0000AEA0 ; COMDAT (pick any)
.text$mn:0000AEA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEA0
.text$mn:0000AEA0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEA0
.text$mn:0000AEA0 ; Attributes: bp-based frame
.text$mn:0000AEA0
.text$mn:0000AEA0 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000AEA0                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:0000AEA0 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:0000AEA0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:0000AEA0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap ...
.text$mn:0000AEA0
.text$mn:0000AEA0 var_4           = dword ptr -4
.text$mn:0000AEA0 arg_0           = dword ptr  8
.text$mn:0000AEA0
.text$mn:0000AEA0                 push    ebp
.text$mn:0000AEA1                 mov     ebp, esp
.text$mn:0000AEA3                 push    ecx
.text$mn:0000AEA4                 mov     [ebp+var_4], ecx
.text$mn:0000AEA7                 cmp     [ebp+arg_0], 0
.text$mn:0000AEAB                 jz      short loc_AED0
.text$mn:0000AEAD                 mov     ecx, [ebp+var_4]
.text$mn:0000AEB0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000AEB5                 cmp     [ebp+arg_0], eax
.text$mn:0000AEB8                 jb      short loc_AED0
.text$mn:0000AEBA                 mov     ecx, [ebp+var_4]
.text$mn:0000AEBD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000AEC2                 mov     ecx, [ebp+var_4]
.text$mn:0000AEC5                 mov     edx, [ecx+14h]
.text$mn:0000AEC8                 lea     eax, [eax+edx*2]
.text$mn:0000AECB                 cmp     eax, [ebp+arg_0]
.text$mn:0000AECE                 ja      short loc_AED6
.text$mn:0000AED0
.text$mn:0000AED0 loc_AED0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:0000AED0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:0000AED0                 xor     al, al
.text$mn:0000AED2                 jmp     short loc_AED8
.text$mn:0000AED4 ; ---------------------------------------------------------------------------
.text$mn:0000AED4                 jmp     short loc_AED8
.text$mn:0000AED6 ; ---------------------------------------------------------------------------
.text$mn:0000AED6
.text$mn:0000AED6 loc_AED6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:0000AED6                 mov     al, 1
.text$mn:0000AED8
.text$mn:0000AED8 loc_AED8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:0000AED8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:0000AED8                 mov     esp, ebp
.text$mn:0000AEDA                 pop     ebp
.text$mn:0000AEDB                 retn    4
.text$mn:0000AEDB ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:0000AEDB
.text$mn:0000AEDB ; ---------------------------------------------------------------------------
.text$mn:0000AEDE                 align 10h
.text$mn:0000AEDE _text$mn        ends
.text$mn:0000AEDE
.text$mn:0000AEE0 ; ===========================================================================
.text$mn:0000AEE0
.text$mn:0000AEE0 ; Segment type: Pure code
.text$mn:0000AEE0 ; Segment permissions: Read/Execute
.text$mn:0000AEE0 _text$mn        segment para public 'CODE' use32
.text$mn:0000AEE0                 assume cs:_text$mn
.text$mn:0000AEE0                 ;org 0AEE0h
.text$mn:0000AEE0 ; COMDAT (pick any)
.text$mn:0000AEE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AEE0
.text$mn:0000AEE0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AEE0
.text$mn:0000AEE0 ; Attributes: bp-based frame
.text$mn:0000AEE0
.text$mn:0000AEE0 ; protected: bool __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Inside(class FunctionParser * const *)const
.text$mn:0000AEE0                 public ?_Inside@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBE_NPBQAVFunctionParser@@@Z
.text$mn:0000AEE0 ?_Inside@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBE_NPBQAVFunctionParser@@@Z proc near
.text$mn:0000AEE0                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+19p
.text$mn:0000AEE0
.text$mn:0000AEE0 var_8           = dword ptr -8
.text$mn:0000AEE0 var_4           = dword ptr -4
.text$mn:0000AEE0 arg_0           = dword ptr  8
.text$mn:0000AEE0
.text$mn:0000AEE0                 push    ebp
.text$mn:0000AEE1                 mov     ebp, esp
.text$mn:0000AEE3                 sub     esp, 8
.text$mn:0000AEE6                 mov     [ebp+var_4], ecx
.text$mn:0000AEE9                 mov     eax, [ebp+var_4]
.text$mn:0000AEEC                 mov     ecx, [ebp+arg_0]
.text$mn:0000AEEF                 cmp     ecx, [eax+8]
.text$mn:0000AEF2                 jnb     short loc_AF08
.text$mn:0000AEF4                 mov     edx, [ebp+var_4]
.text$mn:0000AEF7                 mov     eax, [edx+4]
.text$mn:0000AEFA                 cmp     eax, [ebp+arg_0]
.text$mn:0000AEFD                 ja      short loc_AF08
.text$mn:0000AEFF                 mov     [ebp+var_8], 1
.text$mn:0000AF06                 jmp     short loc_AF0F
.text$mn:0000AF08 ; ---------------------------------------------------------------------------
.text$mn:0000AF08
.text$mn:0000AF08 loc_AF08:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Inside(FunctionParser * const *)+12j
.text$mn:0000AF08                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Inside(FunctionParser * const *)+1Dj
.text$mn:0000AF08                 mov     [ebp+var_8], 0
.text$mn:0000AF0F
.text$mn:0000AF0F loc_AF0F:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Inside(FunctionParser * const *)+26j
.text$mn:0000AF0F                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000AF12                 mov     esp, ebp
.text$mn:0000AF14                 pop     ebp
.text$mn:0000AF15                 retn    4
.text$mn:0000AF15 ?_Inside@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBE_NPBQAVFunctionParser@@@Z endp
.text$mn:0000AF15
.text$mn:0000AF15 _text$mn        ends
.text$mn:0000AF15
.text$mn:0000AF18 ; ===========================================================================
.text$mn:0000AF18
.text$mn:0000AF18 ; Segment type: Pure code
.text$mn:0000AF18 ; Segment permissions: Read/Execute
.text$mn:0000AF18 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF18                 assume cs:_text$mn
.text$mn:0000AF18                 ;org 0AF18h
.text$mn:0000AF18 ; COMDAT (pick any)
.text$mn:0000AF18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF18
.text$mn:0000AF18 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF18
.text$mn:0000AF18 ; Attributes: bp-based frame
.text$mn:0000AF18
.text$mn:0000AF18 ; protected: bool __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Inside(struct std::pair<int, int> const *)const
.text$mn:0000AF18                 public ?_Inside@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBE_NPBU?$pair@HH@2@@Z
.text$mn:0000AF18 ?_Inside@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBE_NPBU?$pair@HH@2@@Z proc near
.text$mn:0000AF18                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+19p
.text$mn:0000AF18
.text$mn:0000AF18 var_8           = dword ptr -8
.text$mn:0000AF18 var_4           = dword ptr -4
.text$mn:0000AF18 arg_0           = dword ptr  8
.text$mn:0000AF18
.text$mn:0000AF18                 push    ebp
.text$mn:0000AF19                 mov     ebp, esp
.text$mn:0000AF1B                 sub     esp, 8
.text$mn:0000AF1E                 mov     [ebp+var_4], ecx
.text$mn:0000AF21                 mov     eax, [ebp+var_4]
.text$mn:0000AF24                 mov     ecx, [ebp+arg_0]
.text$mn:0000AF27                 cmp     ecx, [eax+8]
.text$mn:0000AF2A                 jnb     short loc_AF40
.text$mn:0000AF2C                 mov     edx, [ebp+var_4]
.text$mn:0000AF2F                 mov     eax, [edx+4]
.text$mn:0000AF32                 cmp     eax, [ebp+arg_0]
.text$mn:0000AF35                 ja      short loc_AF40
.text$mn:0000AF37                 mov     [ebp+var_8], 1
.text$mn:0000AF3E                 jmp     short loc_AF47
.text$mn:0000AF40 ; ---------------------------------------------------------------------------
.text$mn:0000AF40
.text$mn:0000AF40 loc_AF40:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Inside(std::pair<int,int> const *)+12j
.text$mn:0000AF40                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Inside(std::pair<int,int> const *)+1Dj
.text$mn:0000AF40                 mov     [ebp+var_8], 0
.text$mn:0000AF47
.text$mn:0000AF47 loc_AF47:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Inside(std::pair<int,int> const *)+26j
.text$mn:0000AF47                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000AF4A                 mov     esp, ebp
.text$mn:0000AF4C                 pop     ebp
.text$mn:0000AF4D                 retn    4
.text$mn:0000AF4D ?_Inside@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBE_NPBU?$pair@HH@2@@Z endp
.text$mn:0000AF4D
.text$mn:0000AF4D _text$mn        ends
.text$mn:0000AF4D
.text$mn:0000AF50 ; ===========================================================================
.text$mn:0000AF50
.text$mn:0000AF50 ; Segment type: Pure code
.text$mn:0000AF50 ; Segment permissions: Read/Execute
.text$mn:0000AF50 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF50                 assume cs:_text$mn
.text$mn:0000AF50                 ;org 0AF50h
.text$mn:0000AF50 ; COMDAT (pick any)
.text$mn:0000AF50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF50
.text$mn:0000AF50 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF50
.text$mn:0000AF50 ; Attributes: bp-based frame
.text$mn:0000AF50
.text$mn:0000AF50 ; protected: bool __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Inside(struct AssociationInfo const *)const
.text$mn:0000AF50                 public ?_Inside@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBE_NPBUAssociationInfo@@@Z
.text$mn:0000AF50 ?_Inside@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBE_NPBUAssociationInfo@@@Z proc near
.text$mn:0000AF50                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+19p
.text$mn:0000AF50
.text$mn:0000AF50 var_8           = dword ptr -8
.text$mn:0000AF50 var_4           = dword ptr -4
.text$mn:0000AF50 arg_0           = dword ptr  8
.text$mn:0000AF50
.text$mn:0000AF50                 push    ebp
.text$mn:0000AF51                 mov     ebp, esp
.text$mn:0000AF53                 sub     esp, 8
.text$mn:0000AF56                 mov     [ebp+var_4], ecx
.text$mn:0000AF59                 mov     eax, [ebp+var_4]
.text$mn:0000AF5C                 mov     ecx, [ebp+arg_0]
.text$mn:0000AF5F                 cmp     ecx, [eax+8]
.text$mn:0000AF62                 jnb     short loc_AF78
.text$mn:0000AF64                 mov     edx, [ebp+var_4]
.text$mn:0000AF67                 mov     eax, [edx+4]
.text$mn:0000AF6A                 cmp     eax, [ebp+arg_0]
.text$mn:0000AF6D                 ja      short loc_AF78
.text$mn:0000AF6F                 mov     [ebp+var_8], 1
.text$mn:0000AF76                 jmp     short loc_AF7F
.text$mn:0000AF78 ; ---------------------------------------------------------------------------
.text$mn:0000AF78
.text$mn:0000AF78 loc_AF78:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Inside(AssociationInfo const *)+12j
.text$mn:0000AF78                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Inside(AssociationInfo const *)+1Dj
.text$mn:0000AF78                 mov     [ebp+var_8], 0
.text$mn:0000AF7F
.text$mn:0000AF7F loc_AF7F:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Inside(AssociationInfo const *)+26j
.text$mn:0000AF7F                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000AF82                 mov     esp, ebp
.text$mn:0000AF84                 pop     ebp
.text$mn:0000AF85                 retn    4
.text$mn:0000AF85 ?_Inside@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBE_NPBUAssociationInfo@@@Z endp
.text$mn:0000AF85
.text$mn:0000AF85 _text$mn        ends
.text$mn:0000AF85
.text$mn:0000AF88 ; ===========================================================================
.text$mn:0000AF88
.text$mn:0000AF88 ; Segment type: Pure code
.text$mn:0000AF88 ; Segment permissions: Read/Execute
.text$mn:0000AF88 _text$mn        segment para public 'CODE' use32
.text$mn:0000AF88                 assume cs:_text$mn
.text$mn:0000AF88                 ;org 0AF88h
.text$mn:0000AF88 ; COMDAT (pick any)
.text$mn:0000AF88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AF88
.text$mn:0000AF88 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AF88
.text$mn:0000AF88 ; Attributes: bp-based frame
.text$mn:0000AF88
.text$mn:0000AF88 ; protected: bool __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Inside(struct foundInfo const *)const
.text$mn:0000AF88                 public ?_Inside@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBE_NPBUfoundInfo@@@Z
.text$mn:0000AF88 ?_Inside@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBE_NPBUfoundInfo@@@Z proc near
.text$mn:0000AF88                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+19p
.text$mn:0000AF88
.text$mn:0000AF88 var_8           = dword ptr -8
.text$mn:0000AF88 var_4           = dword ptr -4
.text$mn:0000AF88 arg_0           = dword ptr  8
.text$mn:0000AF88
.text$mn:0000AF88                 push    ebp
.text$mn:0000AF89                 mov     ebp, esp
.text$mn:0000AF8B                 sub     esp, 8
.text$mn:0000AF8E                 mov     [ebp+var_4], ecx
.text$mn:0000AF91                 mov     eax, [ebp+var_4]
.text$mn:0000AF94                 mov     ecx, [ebp+arg_0]
.text$mn:0000AF97                 cmp     ecx, [eax+8]
.text$mn:0000AF9A                 jnb     short loc_AFB0
.text$mn:0000AF9C                 mov     edx, [ebp+var_4]
.text$mn:0000AF9F                 mov     eax, [edx+4]
.text$mn:0000AFA2                 cmp     eax, [ebp+arg_0]
.text$mn:0000AFA5                 ja      short loc_AFB0
.text$mn:0000AFA7                 mov     [ebp+var_8], 1
.text$mn:0000AFAE                 jmp     short loc_AFB7
.text$mn:0000AFB0 ; ---------------------------------------------------------------------------
.text$mn:0000AFB0
.text$mn:0000AFB0 loc_AFB0:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Inside(foundInfo const *)+12j
.text$mn:0000AFB0                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::_Inside(foundInfo const *)+1Dj
.text$mn:0000AFB0                 mov     [ebp+var_8], 0
.text$mn:0000AFB7
.text$mn:0000AFB7 loc_AFB7:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Inside(foundInfo const *)+26j
.text$mn:0000AFB7                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000AFBA                 mov     esp, ebp
.text$mn:0000AFBC                 pop     ebp
.text$mn:0000AFBD                 retn    4
.text$mn:0000AFBD ?_Inside@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBE_NPBUfoundInfo@@@Z endp
.text$mn:0000AFBD
.text$mn:0000AFBD _text$mn        ends
.text$mn:0000AFBD
.text$mn:0000AFC0 ; ===========================================================================
.text$mn:0000AFC0
.text$mn:0000AFC0 ; Segment type: Pure code
.text$mn:0000AFC0 ; Segment permissions: Read/Execute
.text$mn:0000AFC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000AFC0                 assume cs:_text$mn
.text$mn:0000AFC0                 ;org 0AFC0h
.text$mn:0000AFC0 ; COMDAT (pick any)
.text$mn:0000AFC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AFC0
.text$mn:0000AFC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AFC0
.text$mn:0000AFC0 ; Attributes: bp-based frame
.text$mn:0000AFC0
.text$mn:0000AFC0 ; protected: bool __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Inside(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *)const
.text$mn:0000AFC0                 public ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000AFC0 ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000AFC0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+19p
.text$mn:0000AFC0
.text$mn:0000AFC0 var_8           = dword ptr -8
.text$mn:0000AFC0 var_4           = dword ptr -4
.text$mn:0000AFC0 arg_0           = dword ptr  8
.text$mn:0000AFC0
.text$mn:0000AFC0                 push    ebp
.text$mn:0000AFC1                 mov     ebp, esp
.text$mn:0000AFC3                 sub     esp, 8
.text$mn:0000AFC6                 mov     [ebp+var_4], ecx
.text$mn:0000AFC9                 mov     eax, [ebp+var_4]
.text$mn:0000AFCC                 mov     ecx, [ebp+arg_0]
.text$mn:0000AFCF                 cmp     ecx, [eax+8]
.text$mn:0000AFD2                 jnb     short loc_AFE8
.text$mn:0000AFD4                 mov     edx, [ebp+var_4]
.text$mn:0000AFD7                 mov     eax, [edx+4]
.text$mn:0000AFDA                 cmp     eax, [ebp+arg_0]
.text$mn:0000AFDD                 ja      short loc_AFE8
.text$mn:0000AFDF                 mov     [ebp+var_8], 1
.text$mn:0000AFE6                 jmp     short loc_AFEF
.text$mn:0000AFE8 ; ---------------------------------------------------------------------------
.text$mn:0000AFE8
.text$mn:0000AFE8 loc_AFE8:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+12j
.text$mn:0000AFE8                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+1Dj
.text$mn:0000AFE8                 mov     [ebp+var_8], 0
.text$mn:0000AFEF
.text$mn:0000AFEF loc_AFEF:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+26j
.text$mn:0000AFEF                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000AFF2                 mov     esp, ebp
.text$mn:0000AFF4                 pop     ebp
.text$mn:0000AFF5                 retn    4
.text$mn:0000AFF5 ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:0000AFF5
.text$mn:0000AFF5 _text$mn        ends
.text$mn:0000AFF5
.text$mn:0000AFF8 ; ===========================================================================
.text$mn:0000AFF8
.text$mn:0000AFF8 ; Segment type: Pure code
.text$mn:0000AFF8 ; Segment permissions: Read/Execute
.text$mn:0000AFF8 _text$mn        segment para public 'CODE' use32
.text$mn:0000AFF8                 assume cs:_text$mn
.text$mn:0000AFF8                 ;org 0AFF8h
.text$mn:0000AFF8 ; COMDAT (pick any)
.text$mn:0000AFF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000AFF8
.text$mn:0000AFF8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000AFF8
.text$mn:0000AFF8 ; Attributes: bp-based frame
.text$mn:0000AFF8
.text$mn:0000AFF8 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Make_iter(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>)const
.text$mn:0000AFF8                 public ?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$mn:0000AFF8 ?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z proc near
.text$mn:0000AFF8                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+EEp
.text$mn:0000AFF8
.text$mn:0000AFF8 var_14          = dword ptr -14h
.text$mn:0000AFF8 var_10          = dword ptr -10h
.text$mn:0000AFF8 var_C           = dword ptr -0Ch
.text$mn:0000AFF8 var_4           = dword ptr -4
.text$mn:0000AFF8 arg_0           = dword ptr  8
.text$mn:0000AFF8 arg_4           = byte ptr  0Ch
.text$mn:0000AFF8 arg_C           = dword ptr  14h
.text$mn:0000AFF8
.text$mn:0000AFF8                 push    ebp
.text$mn:0000AFF9                 mov     ebp, esp
.text$mn:0000AFFB                 push    0FFFFFFFFh
.text$mn:0000AFFD                 push    offset __ehhandler$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$mn:0000B002                 mov     eax, large fs:0
.text$mn:0000B008                 push    eax
.text$mn:0000B009                 sub     esp, 8
.text$mn:0000B00C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B011                 xor     eax, ebp
.text$mn:0000B013                 push    eax
.text$mn:0000B014                 lea     eax, [ebp+var_C]
.text$mn:0000B017                 mov     large fs:0, eax
.text$mn:0000B01D                 mov     [ebp+var_14], ecx
.text$mn:0000B020                 mov     [ebp+var_10], 0
.text$mn:0000B027                 mov     [ebp+var_4], 1
.text$mn:0000B02E                 mov     eax, [ebp+var_14]
.text$mn:0000B031                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000B032                 mov     ecx, [ebp+arg_C]
.text$mn:0000B035                 push    ecx             ; int
.text$mn:0000B036                 mov     ecx, [ebp+arg_0]
.text$mn:0000B039                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000B03E                 mov     edx, [ebp+var_10]
.text$mn:0000B041                 or      edx, 1
.text$mn:0000B044                 mov     [ebp+var_10], edx
.text$mn:0000B047                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000B04B                 lea     ecx, [ebp+arg_4]
.text$mn:0000B04E                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:0000B053                 mov     eax, [ebp+arg_0]
.text$mn:0000B056                 mov     ecx, [ebp+var_C]
.text$mn:0000B059                 mov     large fs:0, ecx
.text$mn:0000B060                 pop     ecx
.text$mn:0000B061                 mov     esp, ebp
.text$mn:0000B063                 pop     ebp
.text$mn:0000B064                 retn    10h
.text$mn:0000B064 ?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z endp
.text$mn:0000B064
.text$mn:0000B064 ; ---------------------------------------------------------------------------
.text$mn:0000B067                 align 4
.text$mn:0000B067 _text$mn        ends
.text$mn:0000B067
.text$x:0000B068 ; ===========================================================================
.text$x:0000B068
.text$x:0000B068 ; Segment type: Pure code
.text$x:0000B068 ; Segment permissions: Read/Execute
.text$x:0000B068 _text$x         segment para public 'CODE' use32
.text$x:0000B068                 assume cs:_text$x
.text$x:0000B068                 ;org 0B068h
.text$x:0000B068 ; COMDAT (pick associative to section at AFF8)
.text$x:0000B068                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B068
.text$x:0000B068 ; =============== S U B R O U T I N E =======================================
.text$x:0000B068
.text$x:0000B068
.text$x:0000B068 __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0 proc near
.text$x:0000B068                                         ; DATA XREF: .xdata$x:0000F848o
.text$x:0000B068                 lea     ecx, [ebp+0Ch]
.text$x:0000B06B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000B06B __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0 endp
.text$x:0000B06B
.text$x:0000B070
.text$x:0000B070 ; =============== S U B R O U T I N E =======================================
.text$x:0000B070
.text$x:0000B070
.text$x:0000B070 __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1 proc near
.text$x:0000B070                                         ; DATA XREF: .xdata$x:0000F840o
.text$x:0000B070                 mov     eax, [ebp-10h]
.text$x:0000B073                 and     eax, 1
.text$x:0000B076                 jz      $LN5
.text$x:0000B07C                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000B080                 mov     ecx, [ebp+8]
.text$x:0000B083                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000B088 ; ---------------------------------------------------------------------------
.text$x:0000B088
.text$x:0000B088 $LN5:                                   ; CODE XREF: __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1+6j
.text$x:0000B088                 retn
.text$x:0000B088 __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1 endp
.text$x:0000B088
.text$x:0000B089
.text$x:0000B089 ; =============== S U B R O U T I N E =======================================
.text$x:0000B089
.text$x:0000B089
.text$x:0000B089 __ehhandler$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z proc near
.text$x:0000B089                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+5o
.text$x:0000B089
.text$x:0000B089 arg_4           = dword ptr  8
.text$x:0000B089
.text$x:0000B089                 mov     edx, [esp+arg_4]
.text$x:0000B08D                 lea     eax, [edx+0Ch]
.text$x:0000B090                 mov     ecx, [edx-0Ch]
.text$x:0000B093                 xor     ecx, eax
.text$x:0000B095                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B09A                 mov     eax, offset __ehfuncinfo$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$x:0000B09F                 jmp     ___CxxFrameHandler3
.text$x:0000B09F __ehhandler$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z endp
.text$x:0000B09F
.text$x:0000B09F _text$x         ends
.text$x:0000B09F
.text$mn:0000B0A4 ; ===========================================================================
.text$mn:0000B0A4
.text$mn:0000B0A4 ; Segment type: Pure code
.text$mn:0000B0A4 ; Segment permissions: Read/Execute
.text$mn:0000B0A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000B0A4                 assume cs:_text$mn
.text$mn:0000B0A4                 ;org 0B0A4h
.text$mn:0000B0A4 ; COMDAT (pick any)
.text$mn:0000B0A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B0A4
.text$mn:0000B0A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B0A4
.text$mn:0000B0A4 ; Attributes: bp-based frame
.text$mn:0000B0A4
.text$mn:0000B0A4 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000B0A4                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:0000B0A4 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:0000B0A4                                         ; CODE XREF: $LN19+14p
.text$mn:0000B0A4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:0000B0A4
.text$mn:0000B0A4 var_8           = dword ptr -8
.text$mn:0000B0A4 var_4           = dword ptr -4
.text$mn:0000B0A4
.text$mn:0000B0A4                 push    ebp
.text$mn:0000B0A5                 mov     ebp, esp
.text$mn:0000B0A7                 sub     esp, 8
.text$mn:0000B0AA                 mov     [ebp+var_4], ecx
.text$mn:0000B0AD                 mov     eax, [ebp+var_4]
.text$mn:0000B0B0                 cmp     dword ptr [eax+18h], 10h
.text$mn:0000B0B4                 jb      short loc_B0CA
.text$mn:0000B0B6                 mov     ecx, [ebp+var_4]
.text$mn:0000B0B9                 mov     edx, [ecx+4]
.text$mn:0000B0BC                 push    edx
.text$mn:0000B0BD                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:0000B0C2                 add     esp, 4
.text$mn:0000B0C5                 mov     [ebp+var_8], eax
.text$mn:0000B0C8                 jmp     short loc_B0D3
.text$mn:0000B0CA ; ---------------------------------------------------------------------------
.text$mn:0000B0CA
.text$mn:0000B0CA loc_B0CA:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:0000B0CA                 mov     eax, [ebp+var_4]
.text$mn:0000B0CD                 add     eax, 4
.text$mn:0000B0D0                 mov     [ebp+var_8], eax
.text$mn:0000B0D3
.text$mn:0000B0D3 loc_B0D3:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:0000B0D3                 mov     eax, [ebp+var_8]
.text$mn:0000B0D6                 mov     esp, ebp
.text$mn:0000B0D8                 pop     ebp
.text$mn:0000B0D9                 retn
.text$mn:0000B0D9 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:0000B0D9
.text$mn:0000B0D9 ; ---------------------------------------------------------------------------
.text$mn:0000B0DA                 align 4
.text$mn:0000B0DA _text$mn        ends
.text$mn:0000B0DA
.text$mn:0000B0DC ; ===========================================================================
.text$mn:0000B0DC
.text$mn:0000B0DC ; Segment type: Pure code
.text$mn:0000B0DC ; Segment permissions: Read/Execute
.text$mn:0000B0DC _text$mn        segment para public 'CODE' use32
.text$mn:0000B0DC                 assume cs:_text$mn
.text$mn:0000B0DC                 ;org 0B0DCh
.text$mn:0000B0DC ; COMDAT (pick any)
.text$mn:0000B0DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B0DC
.text$mn:0000B0DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000B0DC
.text$mn:0000B0DC ; Attributes: bp-based frame
.text$mn:0000B0DC
.text$mn:0000B0DC ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:0000B0DC                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:0000B0DC ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:0000B0DC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:0000B0DC
.text$mn:0000B0DC var_8           = dword ptr -8
.text$mn:0000B0DC var_4           = dword ptr -4
.text$mn:0000B0DC
.text$mn:0000B0DC                 push    ebp
.text$mn:0000B0DD                 mov     ebp, esp
.text$mn:0000B0DF                 sub     esp, 8
.text$mn:0000B0E2                 mov     [ebp+var_4], ecx
.text$mn:0000B0E5                 mov     eax, [ebp+var_4]
.text$mn:0000B0E8                 cmp     dword ptr [eax+18h], 10h
.text$mn:0000B0EC                 jb      short loc_B102
.text$mn:0000B0EE                 mov     ecx, [ebp+var_4]
.text$mn:0000B0F1                 mov     edx, [ecx+4]
.text$mn:0000B0F4                 push    edx
.text$mn:0000B0F5                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:0000B0FA                 add     esp, 4
.text$mn:0000B0FD                 mov     [ebp+var_8], eax
.text$mn:0000B100                 jmp     short loc_B10B
.text$mn:0000B102 ; ---------------------------------------------------------------------------
.text$mn:0000B102
.text$mn:0000B102 loc_B102:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:0000B102                 mov     eax, [ebp+var_4]
.text$mn:0000B105                 add     eax, 4
.text$mn:0000B108                 mov     [ebp+var_8], eax
.text$mn:0000B10B
.text$mn:0000B10B loc_B10B:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:0000B10B                 mov     eax, [ebp+var_8]
.text$mn:0000B10E                 mov     esp, ebp
.text$mn:0000B110                 pop     ebp
.text$mn:0000B111                 retn
.text$mn:0000B111 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:0000B111
.text$mn:0000B111 ; ---------------------------------------------------------------------------
.text$mn:0000B112                 align 4
.text$mn:0000B112 _text$mn        ends
.text$mn:0000B112
.text$mn:0000B114 ; ===========================================================================
.text$mn:0000B114
.text$mn:0000B114 ; Segment type: Pure code
.text$mn:0000B114 ; Segment permissions: Read/Execute
.text$mn:0000B114 _text$mn        segment para public 'CODE' use32
.text$mn:0000B114                 assume cs:_text$mn
.text$mn:0000B114                 ;org 0B114h
.text$mn:0000B114 ; COMDAT (pick any)
.text$mn:0000B114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B114
.text$mn:0000B114 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B114
.text$mn:0000B114 ; Attributes: bp-based frame
.text$mn:0000B114
.text$mn:0000B114 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000B114                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:0000B114 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:0000B114                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+27p
.text$mn:0000B114                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+3Ep ...
.text$mn:0000B114
.text$mn:0000B114 var_8           = dword ptr -8
.text$mn:0000B114 var_4           = dword ptr -4
.text$mn:0000B114
.text$mn:0000B114                 push    ebp
.text$mn:0000B115                 mov     ebp, esp
.text$mn:0000B117                 sub     esp, 8
.text$mn:0000B11A                 mov     [ebp+var_4], ecx
.text$mn:0000B11D                 mov     eax, [ebp+var_4]
.text$mn:0000B120                 cmp     dword ptr [eax+18h], 8
.text$mn:0000B124                 jb      short loc_B13A
.text$mn:0000B126                 mov     ecx, [ebp+var_4]
.text$mn:0000B129                 mov     edx, [ecx+4]
.text$mn:0000B12C                 push    edx
.text$mn:0000B12D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000B132                 add     esp, 4
.text$mn:0000B135                 mov     [ebp+var_8], eax
.text$mn:0000B138                 jmp     short loc_B143
.text$mn:0000B13A ; ---------------------------------------------------------------------------
.text$mn:0000B13A
.text$mn:0000B13A loc_B13A:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:0000B13A                 mov     eax, [ebp+var_4]
.text$mn:0000B13D                 add     eax, 4
.text$mn:0000B140                 mov     [ebp+var_8], eax
.text$mn:0000B143
.text$mn:0000B143 loc_B143:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000B143                 mov     eax, [ebp+var_8]
.text$mn:0000B146                 mov     esp, ebp
.text$mn:0000B148                 pop     ebp
.text$mn:0000B149                 retn
.text$mn:0000B149 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:0000B149
.text$mn:0000B149 ; ---------------------------------------------------------------------------
.text$mn:0000B14A                 align 4
.text$mn:0000B14A _text$mn        ends
.text$mn:0000B14A
.text$mn:0000B14C ; ===========================================================================
.text$mn:0000B14C
.text$mn:0000B14C ; Segment type: Pure code
.text$mn:0000B14C ; Segment permissions: Read/Execute
.text$mn:0000B14C _text$mn        segment para public 'CODE' use32
.text$mn:0000B14C                 assume cs:_text$mn
.text$mn:0000B14C                 ;org 0B14Ch
.text$mn:0000B14C ; COMDAT (pick any)
.text$mn:0000B14C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B14C
.text$mn:0000B14C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B14C
.text$mn:0000B14C ; Attributes: bp-based frame
.text$mn:0000B14C
.text$mn:0000B14C ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:0000B14C                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:0000B14C ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:0000B14C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p
.text$mn:0000B14C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp ...
.text$mn:0000B14C
.text$mn:0000B14C var_8           = dword ptr -8
.text$mn:0000B14C var_4           = dword ptr -4
.text$mn:0000B14C
.text$mn:0000B14C                 push    ebp
.text$mn:0000B14D                 mov     ebp, esp
.text$mn:0000B14F                 sub     esp, 8
.text$mn:0000B152                 mov     [ebp+var_4], ecx
.text$mn:0000B155                 mov     eax, [ebp+var_4]
.text$mn:0000B158                 cmp     dword ptr [eax+18h], 8
.text$mn:0000B15C                 jb      short loc_B172
.text$mn:0000B15E                 mov     ecx, [ebp+var_4]
.text$mn:0000B161                 mov     edx, [ecx+4]
.text$mn:0000B164                 push    edx
.text$mn:0000B165                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000B16A                 add     esp, 4
.text$mn:0000B16D                 mov     [ebp+var_8], eax
.text$mn:0000B170                 jmp     short loc_B17B
.text$mn:0000B172 ; ---------------------------------------------------------------------------
.text$mn:0000B172
.text$mn:0000B172 loc_B172:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:0000B172                 mov     eax, [ebp+var_4]
.text$mn:0000B175                 add     eax, 4
.text$mn:0000B178                 mov     [ebp+var_8], eax
.text$mn:0000B17B
.text$mn:0000B17B loc_B17B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000B17B                 mov     eax, [ebp+var_8]
.text$mn:0000B17E                 mov     esp, ebp
.text$mn:0000B180                 pop     ebp
.text$mn:0000B181                 retn
.text$mn:0000B181 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:0000B181
.text$mn:0000B181 ; ---------------------------------------------------------------------------
.text$mn:0000B182                 align 4
.text$mn:0000B182 _text$mn        ends
.text$mn:0000B182
.text$mn:0000B184 ; ===========================================================================
.text$mn:0000B184
.text$mn:0000B184 ; Segment type: Pure code
.text$mn:0000B184 ; Segment permissions: Read/Execute
.text$mn:0000B184 _text$mn        segment para public 'CODE' use32
.text$mn:0000B184                 assume cs:_text$mn
.text$mn:0000B184                 ;org 0B184h
.text$mn:0000B184 ; COMDAT (pick any)
.text$mn:0000B184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B184
.text$mn:0000B184 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B184
.text$mn:0000B184 ; Attributes: bp-based frame
.text$mn:0000B184
.text$mn:0000B184 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:0000B184                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000B184 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:0000B184                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:0000B184                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:0000B184
.text$mn:0000B184 var_18          = byte ptr -18h
.text$mn:0000B184 var_14          = dword ptr -14h
.text$mn:0000B184 var_10          = dword ptr -10h
.text$mn:0000B184 var_C           = dword ptr -0Ch
.text$mn:0000B184 var_4           = dword ptr -4
.text$mn:0000B184
.text$mn:0000B184                 push    ebp
.text$mn:0000B185                 mov     ebp, esp
.text$mn:0000B187                 push    0FFFFFFFFh
.text$mn:0000B189                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000B18E                 mov     eax, large fs:0
.text$mn:0000B194                 push    eax
.text$mn:0000B195                 sub     esp, 0Ch
.text$mn:0000B198                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B19D                 xor     eax, ebp
.text$mn:0000B19F                 push    eax
.text$mn:0000B1A0                 lea     eax, [ebp+var_C]
.text$mn:0000B1A3                 mov     large fs:0, eax
.text$mn:0000B1A9                 mov     [ebp+var_14], ecx
.text$mn:0000B1AC                 mov     eax, [ebp+var_14]
.text$mn:0000B1AF                 cmp     dword ptr [eax], 0
.text$mn:0000B1B2                 jz      short loc_B20F
.text$mn:0000B1B4                 push    3               ; int
.text$mn:0000B1B6                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B1B9                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000B1BE                 mov     [ebp+var_4], 0
.text$mn:0000B1C5                 mov     ecx, [ebp+var_14]
.text$mn:0000B1C8                 mov     edx, [ecx]
.text$mn:0000B1CA                 add     edx, 4
.text$mn:0000B1CD                 mov     [ebp+var_10], edx
.text$mn:0000B1D0                 jmp     short loc_B1DF
.text$mn:0000B1D2 ; ---------------------------------------------------------------------------
.text$mn:0000B1D2
.text$mn:0000B1D2 loc_B1D2:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:0000B1D2                 mov     eax, [ebp+var_10]
.text$mn:0000B1D5                 mov     ecx, [eax]
.text$mn:0000B1D7                 mov     edx, [ebp+var_10]
.text$mn:0000B1DA                 mov     eax, [ecx+4]
.text$mn:0000B1DD                 mov     [edx], eax
.text$mn:0000B1DF
.text$mn:0000B1DF loc_B1DF:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:0000B1DF                 mov     ecx, [ebp+var_10]
.text$mn:0000B1E2                 cmp     dword ptr [ecx], 0
.text$mn:0000B1E5                 jz      short loc_B1F4
.text$mn:0000B1E7                 mov     edx, [ebp+var_10]
.text$mn:0000B1EA                 mov     eax, [edx]
.text$mn:0000B1EC                 mov     dword ptr [eax], 0
.text$mn:0000B1F2                 jmp     short loc_B1D2
.text$mn:0000B1F4 ; ---------------------------------------------------------------------------
.text$mn:0000B1F4
.text$mn:0000B1F4 loc_B1F4:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:0000B1F4                 mov     ecx, [ebp+var_14]
.text$mn:0000B1F7                 mov     edx, [ecx]
.text$mn:0000B1F9                 mov     dword ptr [edx+4], 0
.text$mn:0000B200                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B207                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B20A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000B20F
.text$mn:0000B20F loc_B20F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:0000B20F                 mov     ecx, [ebp+var_C]
.text$mn:0000B212                 mov     large fs:0, ecx
.text$mn:0000B219                 pop     ecx
.text$mn:0000B21A                 mov     esp, ebp
.text$mn:0000B21C                 pop     ebp
.text$mn:0000B21D                 retn
.text$mn:0000B21D ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:0000B21D
.text$mn:0000B21D ; ---------------------------------------------------------------------------
.text$mn:0000B21E                 align 10h
.text$mn:0000B21E _text$mn        ends
.text$mn:0000B21E
.text$x:0000B220 ; ===========================================================================
.text$x:0000B220
.text$x:0000B220 ; Segment type: Pure code
.text$x:0000B220 ; Segment permissions: Read/Execute
.text$x:0000B220 _text$x         segment para public 'CODE' use32
.text$x:0000B220                 assume cs:_text$x
.text$x:0000B220                 ;org 0B220h
.text$x:0000B220 ; COMDAT (pick associative to section at B184)
.text$x:0000B220                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B220
.text$x:0000B220 ; =============== S U B R O U T I N E =======================================
.text$x:0000B220
.text$x:0000B220
.text$x:0000B220 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:0000B220                                         ; DATA XREF: .xdata$x:0000EE6Co
.text$x:0000B220                 lea     ecx, [ebp-18h]  ; this
.text$x:0000B223                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000B223 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:0000B223
.text$x:0000B228
.text$x:0000B228 ; =============== S U B R O U T I N E =======================================
.text$x:0000B228
.text$x:0000B228
.text$x:0000B228 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:0000B228                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:0000B228
.text$x:0000B228 arg_4           = dword ptr  8
.text$x:0000B228
.text$x:0000B228                 mov     edx, [esp+arg_4]
.text$x:0000B22C                 lea     eax, [edx+0Ch]
.text$x:0000B22F                 mov     ecx, [edx-10h]
.text$x:0000B232                 xor     ecx, eax
.text$x:0000B234                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B239                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:0000B23E                 jmp     ___CxxFrameHandler3
.text$x:0000B23E __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:0000B23E
.text$x:0000B23E ; ---------------------------------------------------------------------------
.text$x:0000B243                 align 4
.text$x:0000B243 _text$x         ends
.text$x:0000B243
.text$mn:0000B244 ; ===========================================================================
.text$mn:0000B244
.text$mn:0000B244 ; Segment type: Pure code
.text$mn:0000B244 ; Segment permissions: Read/Execute
.text$mn:0000B244 _text$mn        segment para public 'CODE' use32
.text$mn:0000B244                 assume cs:_text$mn
.text$mn:0000B244                 ;org 0B244h
.text$mn:0000B244 ; COMDAT (pick any)
.text$mn:0000B244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B244
.text$mn:0000B244 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B244
.text$mn:0000B244 ; Attributes: bp-based frame
.text$mn:0000B244
.text$mn:0000B244 ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:0000B244                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:0000B244 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:0000B244                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:0000B244                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:0000B244
.text$mn:0000B244 var_8           = dword ptr -8
.text$mn:0000B244 var_4           = dword ptr -4
.text$mn:0000B244
.text$mn:0000B244                 push    ebp
.text$mn:0000B245                 mov     ebp, esp
.text$mn:0000B247                 sub     esp, 8
.text$mn:0000B24A                 mov     [ebp+var_8], ecx
.text$mn:0000B24D                 mov     eax, [ebp+var_8]
.text$mn:0000B250                 cmp     dword ptr [eax], 0
.text$mn:0000B253                 jz      short loc_B2B2
.text$mn:0000B255                 mov     ecx, [ebp+var_8]
.text$mn:0000B258                 mov     edx, [ecx]
.text$mn:0000B25A                 add     edx, 4
.text$mn:0000B25D                 mov     [ebp+var_4], edx
.text$mn:0000B260
.text$mn:0000B260 loc_B260:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:0000B260                 mov     eax, [ebp+var_4]
.text$mn:0000B263                 cmp     dword ptr [eax], 0
.text$mn:0000B266                 jz      short loc_B27F
.text$mn:0000B268                 mov     ecx, [ebp+var_4]
.text$mn:0000B26B                 mov     edx, [ecx]
.text$mn:0000B26D                 cmp     edx, [ebp+var_8]
.text$mn:0000B270                 jz      short loc_B27F
.text$mn:0000B272                 mov     eax, [ebp+var_4]
.text$mn:0000B275                 mov     ecx, [eax]
.text$mn:0000B277                 add     ecx, 4
.text$mn:0000B27A                 mov     [ebp+var_4], ecx
.text$mn:0000B27D                 jmp     short loc_B260
.text$mn:0000B27F ; ---------------------------------------------------------------------------
.text$mn:0000B27F
.text$mn:0000B27F loc_B27F:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:0000B27F                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:0000B27F                 mov     edx, [ebp+var_4]
.text$mn:0000B282                 cmp     dword ptr [edx], 0
.text$mn:0000B285                 jnz     short loc_B29E
.text$mn:0000B287                 push    0C9h ; '+'      ; unsigned int
.text$mn:0000B28C                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000B291                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:0000B296                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000B29B                 add     esp, 0Ch
.text$mn:0000B29E
.text$mn:0000B29E loc_B29E:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:0000B29E                 mov     eax, [ebp+var_4]
.text$mn:0000B2A1                 mov     ecx, [ebp+var_8]
.text$mn:0000B2A4                 mov     edx, [ecx+4]
.text$mn:0000B2A7                 mov     [eax], edx
.text$mn:0000B2A9                 mov     eax, [ebp+var_8]
.text$mn:0000B2AC                 mov     dword ptr [eax], 0
.text$mn:0000B2B2
.text$mn:0000B2B2 loc_B2B2:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:0000B2B2                 mov     esp, ebp
.text$mn:0000B2B4                 pop     ebp
.text$mn:0000B2B5                 retn
.text$mn:0000B2B5 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:0000B2B5
.text$mn:0000B2B5 ; ---------------------------------------------------------------------------
.text$mn:0000B2B6                 align 4
.text$mn:0000B2B6 _text$mn        ends
.text$mn:0000B2B6
.text$mn:0000B2B8 ; ===========================================================================
.text$mn:0000B2B8
.text$mn:0000B2B8 ; Segment type: Pure code
.text$mn:0000B2B8 ; Segment permissions: Read/Execute
.text$mn:0000B2B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000B2B8                 assume cs:_text$mn
.text$mn:0000B2B8                 ;org 0B2B8h
.text$mn:0000B2B8 ; COMDAT (pick any)
.text$mn:0000B2B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B2B8
.text$mn:0000B2B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B2B8
.text$mn:0000B2B8 ; Attributes: bp-based frame
.text$mn:0000B2B8
.text$mn:0000B2B8 ; protected: void __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Orphan_range(class FunctionParser * *, class FunctionParser * *)const
.text$mn:0000B2B8                 public ?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z
.text$mn:0000B2B8 ?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z proc near
.text$mn:0000B2B8                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+6Ap
.text$mn:0000B2B8                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+D9p
.text$mn:0000B2B8
.text$mn:0000B2B8 var_18          = byte ptr -18h
.text$mn:0000B2B8 var_14          = dword ptr -14h
.text$mn:0000B2B8 var_10          = dword ptr -10h
.text$mn:0000B2B8 var_C           = dword ptr -0Ch
.text$mn:0000B2B8 var_4           = dword ptr -4
.text$mn:0000B2B8 arg_0           = dword ptr  8
.text$mn:0000B2B8 arg_4           = dword ptr  0Ch
.text$mn:0000B2B8
.text$mn:0000B2B8                 push    ebp
.text$mn:0000B2B9                 mov     ebp, esp
.text$mn:0000B2BB                 push    0FFFFFFFFh
.text$mn:0000B2BD                 push    offset __ehhandler$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z
.text$mn:0000B2C2                 mov     eax, large fs:0
.text$mn:0000B2C8                 push    eax
.text$mn:0000B2C9                 sub     esp, 0Ch
.text$mn:0000B2CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B2D1                 xor     eax, ebp
.text$mn:0000B2D3                 push    eax
.text$mn:0000B2D4                 lea     eax, [ebp+var_C]
.text$mn:0000B2D7                 mov     large fs:0, eax
.text$mn:0000B2DD                 mov     [ebp+var_14], ecx
.text$mn:0000B2E0                 push    3               ; int
.text$mn:0000B2E2                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B2E5                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000B2EA                 mov     [ebp+var_4], 0
.text$mn:0000B2F1                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000B2F4                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000B2F9                 mov     [ebp+var_10], eax
.text$mn:0000B2FC                 cmp     [ebp+var_10], 0
.text$mn:0000B300                 jz      short loc_B350
.text$mn:0000B302
.text$mn:0000B302 loc_B302:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *):loc_B34Ej
.text$mn:0000B302                 mov     eax, [ebp+var_10]
.text$mn:0000B305                 cmp     dword ptr [eax], 0
.text$mn:0000B308                 jz      short loc_B350
.text$mn:0000B30A                 mov     ecx, [ebp+var_10]
.text$mn:0000B30D                 mov     edx, [ecx]
.text$mn:0000B30F                 mov     eax, [edx+8]
.text$mn:0000B312                 cmp     eax, [ebp+arg_0]
.text$mn:0000B315                 jb      short loc_B324
.text$mn:0000B317                 mov     ecx, [ebp+var_10]
.text$mn:0000B31A                 mov     edx, [ecx]
.text$mn:0000B31C                 mov     eax, [ebp+arg_4]
.text$mn:0000B31F                 cmp     eax, [edx+8]
.text$mn:0000B322                 jnb     short loc_B333
.text$mn:0000B324
.text$mn:0000B324 loc_B324:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+5Dj
.text$mn:0000B324                 mov     ecx, [ebp+var_10]
.text$mn:0000B327                 mov     ecx, [ecx]      ; this
.text$mn:0000B329                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B32E                 mov     [ebp+var_10], eax
.text$mn:0000B331                 jmp     short loc_B34E
.text$mn:0000B333 ; ---------------------------------------------------------------------------
.text$mn:0000B333
.text$mn:0000B333 loc_B333:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+6Aj
.text$mn:0000B333                 mov     edx, [ebp+var_10]
.text$mn:0000B336                 mov     ecx, [edx]      ; this
.text$mn:0000B338                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000B33D                 mov     eax, [ebp+var_10]
.text$mn:0000B340                 mov     ecx, [eax]      ; this
.text$mn:0000B342                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B347                 mov     ecx, [ebp+var_10]
.text$mn:0000B34A                 mov     edx, [eax]
.text$mn:0000B34C                 mov     [ecx], edx
.text$mn:0000B34E
.text$mn:0000B34E loc_B34E:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+79j
.text$mn:0000B34E                 jmp     short loc_B302
.text$mn:0000B350 ; ---------------------------------------------------------------------------
.text$mn:0000B350
.text$mn:0000B350 loc_B350:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+48j
.text$mn:0000B350                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+50j
.text$mn:0000B350                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B357                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B35A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000B35F                 mov     ecx, [ebp+var_C]
.text$mn:0000B362                 mov     large fs:0, ecx
.text$mn:0000B369                 pop     ecx
.text$mn:0000B36A                 mov     esp, ebp
.text$mn:0000B36C                 pop     ebp
.text$mn:0000B36D                 retn    8
.text$mn:0000B36D ?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z endp
.text$mn:0000B36D
.text$mn:0000B36D _text$mn        ends
.text$mn:0000B36D
.text$x:0000B370 ; ===========================================================================
.text$x:0000B370
.text$x:0000B370 ; Segment type: Pure code
.text$x:0000B370 ; Segment permissions: Read/Execute
.text$x:0000B370 _text$x         segment para public 'CODE' use32
.text$x:0000B370                 assume cs:_text$x
.text$x:0000B370                 ;org 0B370h
.text$x:0000B370 ; COMDAT (pick associative to section at B2B8)
.text$x:0000B370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B370
.text$x:0000B370 ; =============== S U B R O U T I N E =======================================
.text$x:0000B370
.text$x:0000B370
.text$x:0000B370 __unwindfunclet$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z$0 proc near
.text$x:0000B370                                         ; DATA XREF: .xdata$x:00010260o
.text$x:0000B370                 lea     ecx, [ebp-18h]  ; this
.text$x:0000B373                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000B373 __unwindfunclet$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z$0 endp
.text$x:0000B373
.text$x:0000B378
.text$x:0000B378 ; =============== S U B R O U T I N E =======================================
.text$x:0000B378
.text$x:0000B378
.text$x:0000B378 __ehhandler$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z proc near
.text$x:0000B378                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)+5o
.text$x:0000B378
.text$x:0000B378 arg_4           = dword ptr  8
.text$x:0000B378
.text$x:0000B378                 mov     edx, [esp+arg_4]
.text$x:0000B37C                 lea     eax, [edx+0Ch]
.text$x:0000B37F                 mov     ecx, [edx-10h]
.text$x:0000B382                 xor     ecx, eax
.text$x:0000B384                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B389                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z
.text$x:0000B38E                 jmp     ___CxxFrameHandler3
.text$x:0000B38E __ehhandler$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z endp
.text$x:0000B38E
.text$x:0000B38E ; ---------------------------------------------------------------------------
.text$x:0000B393                 align 4
.text$x:0000B393 _text$x         ends
.text$x:0000B393
.text$mn:0000B394 ; ===========================================================================
.text$mn:0000B394
.text$mn:0000B394 ; Segment type: Pure code
.text$mn:0000B394 ; Segment permissions: Read/Execute
.text$mn:0000B394 _text$mn        segment para public 'CODE' use32
.text$mn:0000B394                 assume cs:_text$mn
.text$mn:0000B394                 ;org 0B394h
.text$mn:0000B394 ; COMDAT (pick any)
.text$mn:0000B394                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B394
.text$mn:0000B394 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B394
.text$mn:0000B394 ; Attributes: bp-based frame
.text$mn:0000B394
.text$mn:0000B394 ; protected: void __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Orphan_range(struct std::pair<int, int> *, struct std::pair<int, int> *)const
.text$mn:0000B394                 public ?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z
.text$mn:0000B394 ?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z proc near
.text$mn:0000B394                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+6Ap
.text$mn:0000B394                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+D9p
.text$mn:0000B394
.text$mn:0000B394 var_18          = byte ptr -18h
.text$mn:0000B394 var_14          = dword ptr -14h
.text$mn:0000B394 var_10          = dword ptr -10h
.text$mn:0000B394 var_C           = dword ptr -0Ch
.text$mn:0000B394 var_4           = dword ptr -4
.text$mn:0000B394 arg_0           = dword ptr  8
.text$mn:0000B394 arg_4           = dword ptr  0Ch
.text$mn:0000B394
.text$mn:0000B394                 push    ebp
.text$mn:0000B395                 mov     ebp, esp
.text$mn:0000B397                 push    0FFFFFFFFh
.text$mn:0000B399                 push    offset __ehhandler$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z
.text$mn:0000B39E                 mov     eax, large fs:0
.text$mn:0000B3A4                 push    eax
.text$mn:0000B3A5                 sub     esp, 0Ch
.text$mn:0000B3A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B3AD                 xor     eax, ebp
.text$mn:0000B3AF                 push    eax
.text$mn:0000B3B0                 lea     eax, [ebp+var_C]
.text$mn:0000B3B3                 mov     large fs:0, eax
.text$mn:0000B3B9                 mov     [ebp+var_14], ecx
.text$mn:0000B3BC                 push    3               ; int
.text$mn:0000B3BE                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B3C1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000B3C6                 mov     [ebp+var_4], 0
.text$mn:0000B3CD                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000B3D0                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000B3D5                 mov     [ebp+var_10], eax
.text$mn:0000B3D8                 cmp     [ebp+var_10], 0
.text$mn:0000B3DC                 jz      short loc_B42C
.text$mn:0000B3DE
.text$mn:0000B3DE loc_B3DE:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *):loc_B42Aj
.text$mn:0000B3DE                 mov     eax, [ebp+var_10]
.text$mn:0000B3E1                 cmp     dword ptr [eax], 0
.text$mn:0000B3E4                 jz      short loc_B42C
.text$mn:0000B3E6                 mov     ecx, [ebp+var_10]
.text$mn:0000B3E9                 mov     edx, [ecx]
.text$mn:0000B3EB                 mov     eax, [edx+8]
.text$mn:0000B3EE                 cmp     eax, [ebp+arg_0]
.text$mn:0000B3F1                 jb      short loc_B400
.text$mn:0000B3F3                 mov     ecx, [ebp+var_10]
.text$mn:0000B3F6                 mov     edx, [ecx]
.text$mn:0000B3F8                 mov     eax, [ebp+arg_4]
.text$mn:0000B3FB                 cmp     eax, [edx+8]
.text$mn:0000B3FE                 jnb     short loc_B40F
.text$mn:0000B400
.text$mn:0000B400 loc_B400:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)+5Dj
.text$mn:0000B400                 mov     ecx, [ebp+var_10]
.text$mn:0000B403                 mov     ecx, [ecx]      ; this
.text$mn:0000B405                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B40A                 mov     [ebp+var_10], eax
.text$mn:0000B40D                 jmp     short loc_B42A
.text$mn:0000B40F ; ---------------------------------------------------------------------------
.text$mn:0000B40F
.text$mn:0000B40F loc_B40F:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)+6Aj
.text$mn:0000B40F                 mov     edx, [ebp+var_10]
.text$mn:0000B412                 mov     ecx, [edx]      ; this
.text$mn:0000B414                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000B419                 mov     eax, [ebp+var_10]
.text$mn:0000B41C                 mov     ecx, [eax]      ; this
.text$mn:0000B41E                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B423                 mov     ecx, [ebp+var_10]
.text$mn:0000B426                 mov     edx, [eax]
.text$mn:0000B428                 mov     [ecx], edx
.text$mn:0000B42A
.text$mn:0000B42A loc_B42A:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)+79j
.text$mn:0000B42A                 jmp     short loc_B3DE
.text$mn:0000B42C ; ---------------------------------------------------------------------------
.text$mn:0000B42C
.text$mn:0000B42C loc_B42C:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)+48j
.text$mn:0000B42C                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)+50j
.text$mn:0000B42C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B433                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B436                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000B43B                 mov     ecx, [ebp+var_C]
.text$mn:0000B43E                 mov     large fs:0, ecx
.text$mn:0000B445                 pop     ecx
.text$mn:0000B446                 mov     esp, ebp
.text$mn:0000B448                 pop     ebp
.text$mn:0000B449                 retn    8
.text$mn:0000B449 ?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z endp
.text$mn:0000B449
.text$mn:0000B449 _text$mn        ends
.text$mn:0000B449
.text$x:0000B44C ; ===========================================================================
.text$x:0000B44C
.text$x:0000B44C ; Segment type: Pure code
.text$x:0000B44C ; Segment permissions: Read/Execute
.text$x:0000B44C _text$x         segment para public 'CODE' use32
.text$x:0000B44C                 assume cs:_text$x
.text$x:0000B44C                 ;org 0B44Ch
.text$x:0000B44C ; COMDAT (pick associative to section at B394)
.text$x:0000B44C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B44C
.text$x:0000B44C ; =============== S U B R O U T I N E =======================================
.text$x:0000B44C
.text$x:0000B44C
.text$x:0000B44C __unwindfunclet$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z$0 proc near
.text$x:0000B44C                                         ; DATA XREF: .xdata$x:00010704o
.text$x:0000B44C                 lea     ecx, [ebp-18h]  ; this
.text$x:0000B44F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000B44F __unwindfunclet$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z$0 endp
.text$x:0000B44F
.text$x:0000B454
.text$x:0000B454 ; =============== S U B R O U T I N E =======================================
.text$x:0000B454
.text$x:0000B454
.text$x:0000B454 __ehhandler$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z proc near
.text$x:0000B454                                         ; DATA XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)+5o
.text$x:0000B454
.text$x:0000B454 arg_4           = dword ptr  8
.text$x:0000B454
.text$x:0000B454                 mov     edx, [esp+arg_4]
.text$x:0000B458                 lea     eax, [edx+0Ch]
.text$x:0000B45B                 mov     ecx, [edx-10h]
.text$x:0000B45E                 xor     ecx, eax
.text$x:0000B460                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B465                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z
.text$x:0000B46A                 jmp     ___CxxFrameHandler3
.text$x:0000B46A __ehhandler$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z endp
.text$x:0000B46A
.text$x:0000B46A ; ---------------------------------------------------------------------------
.text$x:0000B46F                 align 10h
.text$x:0000B46F _text$x         ends
.text$x:0000B46F
.text$mn:0000B470 ; ===========================================================================
.text$mn:0000B470
.text$mn:0000B470 ; Segment type: Pure code
.text$mn:0000B470 ; Segment permissions: Read/Execute
.text$mn:0000B470 _text$mn        segment para public 'CODE' use32
.text$mn:0000B470                 assume cs:_text$mn
.text$mn:0000B470                 ;org 0B470h
.text$mn:0000B470 ; COMDAT (pick any)
.text$mn:0000B470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B470
.text$mn:0000B470 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B470
.text$mn:0000B470 ; Attributes: bp-based frame
.text$mn:0000B470
.text$mn:0000B470 ; protected: void __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Orphan_range(struct AssociationInfo *, struct AssociationInfo *)const
.text$mn:0000B470                 public ?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z
.text$mn:0000B470 ?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z proc near
.text$mn:0000B470                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+6Ap
.text$mn:0000B470                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+D9p
.text$mn:0000B470
.text$mn:0000B470 var_18          = byte ptr -18h
.text$mn:0000B470 var_14          = dword ptr -14h
.text$mn:0000B470 var_10          = dword ptr -10h
.text$mn:0000B470 var_C           = dword ptr -0Ch
.text$mn:0000B470 var_4           = dword ptr -4
.text$mn:0000B470 arg_0           = dword ptr  8
.text$mn:0000B470 arg_4           = dword ptr  0Ch
.text$mn:0000B470
.text$mn:0000B470                 push    ebp
.text$mn:0000B471                 mov     ebp, esp
.text$mn:0000B473                 push    0FFFFFFFFh
.text$mn:0000B475                 push    offset __ehhandler$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z
.text$mn:0000B47A                 mov     eax, large fs:0
.text$mn:0000B480                 push    eax
.text$mn:0000B481                 sub     esp, 0Ch
.text$mn:0000B484                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B489                 xor     eax, ebp
.text$mn:0000B48B                 push    eax
.text$mn:0000B48C                 lea     eax, [ebp+var_C]
.text$mn:0000B48F                 mov     large fs:0, eax
.text$mn:0000B495                 mov     [ebp+var_14], ecx
.text$mn:0000B498                 push    3               ; int
.text$mn:0000B49A                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B49D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000B4A2                 mov     [ebp+var_4], 0
.text$mn:0000B4A9                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000B4AC                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000B4B1                 mov     [ebp+var_10], eax
.text$mn:0000B4B4                 cmp     [ebp+var_10], 0
.text$mn:0000B4B8                 jz      short loc_B508
.text$mn:0000B4BA
.text$mn:0000B4BA loc_B4BA:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *):loc_B506j
.text$mn:0000B4BA                 mov     eax, [ebp+var_10]
.text$mn:0000B4BD                 cmp     dword ptr [eax], 0
.text$mn:0000B4C0                 jz      short loc_B508
.text$mn:0000B4C2                 mov     ecx, [ebp+var_10]
.text$mn:0000B4C5                 mov     edx, [ecx]
.text$mn:0000B4C7                 mov     eax, [edx+8]
.text$mn:0000B4CA                 cmp     eax, [ebp+arg_0]
.text$mn:0000B4CD                 jb      short loc_B4DC
.text$mn:0000B4CF                 mov     ecx, [ebp+var_10]
.text$mn:0000B4D2                 mov     edx, [ecx]
.text$mn:0000B4D4                 mov     eax, [ebp+arg_4]
.text$mn:0000B4D7                 cmp     eax, [edx+8]
.text$mn:0000B4DA                 jnb     short loc_B4EB
.text$mn:0000B4DC
.text$mn:0000B4DC loc_B4DC:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *)+5Dj
.text$mn:0000B4DC                 mov     ecx, [ebp+var_10]
.text$mn:0000B4DF                 mov     ecx, [ecx]      ; this
.text$mn:0000B4E1                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B4E6                 mov     [ebp+var_10], eax
.text$mn:0000B4E9                 jmp     short loc_B506
.text$mn:0000B4EB ; ---------------------------------------------------------------------------
.text$mn:0000B4EB
.text$mn:0000B4EB loc_B4EB:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *)+6Aj
.text$mn:0000B4EB                 mov     edx, [ebp+var_10]
.text$mn:0000B4EE                 mov     ecx, [edx]      ; this
.text$mn:0000B4F0                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000B4F5                 mov     eax, [ebp+var_10]
.text$mn:0000B4F8                 mov     ecx, [eax]      ; this
.text$mn:0000B4FA                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B4FF                 mov     ecx, [ebp+var_10]
.text$mn:0000B502                 mov     edx, [eax]
.text$mn:0000B504                 mov     [ecx], edx
.text$mn:0000B506
.text$mn:0000B506 loc_B506:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *)+79j
.text$mn:0000B506                 jmp     short loc_B4BA
.text$mn:0000B508 ; ---------------------------------------------------------------------------
.text$mn:0000B508
.text$mn:0000B508 loc_B508:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *)+48j
.text$mn:0000B508                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *)+50j
.text$mn:0000B508                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B50F                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B512                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000B517                 mov     ecx, [ebp+var_C]
.text$mn:0000B51A                 mov     large fs:0, ecx
.text$mn:0000B521                 pop     ecx
.text$mn:0000B522                 mov     esp, ebp
.text$mn:0000B524                 pop     ebp
.text$mn:0000B525                 retn    8
.text$mn:0000B525 ?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z endp
.text$mn:0000B525
.text$mn:0000B525 _text$mn        ends
.text$mn:0000B525
.text$x:0000B528 ; ===========================================================================
.text$x:0000B528
.text$x:0000B528 ; Segment type: Pure code
.text$x:0000B528 ; Segment permissions: Read/Execute
.text$x:0000B528 _text$x         segment para public 'CODE' use32
.text$x:0000B528                 assume cs:_text$x
.text$x:0000B528                 ;org 0B528h
.text$x:0000B528 ; COMDAT (pick associative to section at B470)
.text$x:0000B528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B528
.text$x:0000B528 ; =============== S U B R O U T I N E =======================================
.text$x:0000B528
.text$x:0000B528
.text$x:0000B528 __unwindfunclet$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z$0 proc near
.text$x:0000B528                                         ; DATA XREF: .xdata$x:00010368o
.text$x:0000B528                 lea     ecx, [ebp-18h]  ; this
.text$x:0000B52B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000B52B __unwindfunclet$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z$0 endp
.text$x:0000B52B
.text$x:0000B530
.text$x:0000B530 ; =============== S U B R O U T I N E =======================================
.text$x:0000B530
.text$x:0000B530
.text$x:0000B530 __ehhandler$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z proc near
.text$x:0000B530                                         ; DATA XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *)+5o
.text$x:0000B530
.text$x:0000B530 arg_4           = dword ptr  8
.text$x:0000B530
.text$x:0000B530                 mov     edx, [esp+arg_4]
.text$x:0000B534                 lea     eax, [edx+0Ch]
.text$x:0000B537                 mov     ecx, [edx-10h]
.text$x:0000B53A                 xor     ecx, eax
.text$x:0000B53C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B541                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z
.text$x:0000B546                 jmp     ___CxxFrameHandler3
.text$x:0000B546 __ehhandler$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z endp
.text$x:0000B546
.text$x:0000B546 ; ---------------------------------------------------------------------------
.text$x:0000B54B                 align 4
.text$x:0000B54B _text$x         ends
.text$x:0000B54B
.text$mn:0000B54C ; ===========================================================================
.text$mn:0000B54C
.text$mn:0000B54C ; Segment type: Pure code
.text$mn:0000B54C ; Segment permissions: Read/Execute
.text$mn:0000B54C _text$mn        segment para public 'CODE' use32
.text$mn:0000B54C                 assume cs:_text$mn
.text$mn:0000B54C                 ;org 0B54Ch
.text$mn:0000B54C ; COMDAT (pick any)
.text$mn:0000B54C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B54C
.text$mn:0000B54C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B54C
.text$mn:0000B54C ; Attributes: bp-based frame
.text$mn:0000B54C
.text$mn:0000B54C ; protected: void __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Orphan_range(struct foundInfo *, struct foundInfo *)const
.text$mn:0000B54C                 public ?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z
.text$mn:0000B54C ?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z proc near
.text$mn:0000B54C                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+66p
.text$mn:0000B54C                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+CCp
.text$mn:0000B54C
.text$mn:0000B54C var_18          = byte ptr -18h
.text$mn:0000B54C var_14          = dword ptr -14h
.text$mn:0000B54C var_10          = dword ptr -10h
.text$mn:0000B54C var_C           = dword ptr -0Ch
.text$mn:0000B54C var_4           = dword ptr -4
.text$mn:0000B54C arg_0           = dword ptr  8
.text$mn:0000B54C arg_4           = dword ptr  0Ch
.text$mn:0000B54C
.text$mn:0000B54C                 push    ebp
.text$mn:0000B54D                 mov     ebp, esp
.text$mn:0000B54F                 push    0FFFFFFFFh
.text$mn:0000B551                 push    offset __ehhandler$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z
.text$mn:0000B556                 mov     eax, large fs:0
.text$mn:0000B55C                 push    eax
.text$mn:0000B55D                 sub     esp, 0Ch
.text$mn:0000B560                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B565                 xor     eax, ebp
.text$mn:0000B567                 push    eax
.text$mn:0000B568                 lea     eax, [ebp+var_C]
.text$mn:0000B56B                 mov     large fs:0, eax
.text$mn:0000B571                 mov     [ebp+var_14], ecx
.text$mn:0000B574                 push    3               ; int
.text$mn:0000B576                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B579                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000B57E                 mov     [ebp+var_4], 0
.text$mn:0000B585                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000B588                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000B58D                 mov     [ebp+var_10], eax
.text$mn:0000B590                 cmp     [ebp+var_10], 0
.text$mn:0000B594                 jz      short loc_B5E4
.text$mn:0000B596
.text$mn:0000B596 loc_B596:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *):loc_B5E2j
.text$mn:0000B596                 mov     eax, [ebp+var_10]
.text$mn:0000B599                 cmp     dword ptr [eax], 0
.text$mn:0000B59C                 jz      short loc_B5E4
.text$mn:0000B59E                 mov     ecx, [ebp+var_10]
.text$mn:0000B5A1                 mov     edx, [ecx]
.text$mn:0000B5A3                 mov     eax, [edx+8]
.text$mn:0000B5A6                 cmp     eax, [ebp+arg_0]
.text$mn:0000B5A9                 jb      short loc_B5B8
.text$mn:0000B5AB                 mov     ecx, [ebp+var_10]
.text$mn:0000B5AE                 mov     edx, [ecx]
.text$mn:0000B5B0                 mov     eax, [ebp+arg_4]
.text$mn:0000B5B3                 cmp     eax, [edx+8]
.text$mn:0000B5B6                 jnb     short loc_B5C7
.text$mn:0000B5B8
.text$mn:0000B5B8 loc_B5B8:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *)+5Dj
.text$mn:0000B5B8                 mov     ecx, [ebp+var_10]
.text$mn:0000B5BB                 mov     ecx, [ecx]      ; this
.text$mn:0000B5BD                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B5C2                 mov     [ebp+var_10], eax
.text$mn:0000B5C5                 jmp     short loc_B5E2
.text$mn:0000B5C7 ; ---------------------------------------------------------------------------
.text$mn:0000B5C7
.text$mn:0000B5C7 loc_B5C7:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *)+6Aj
.text$mn:0000B5C7                 mov     edx, [ebp+var_10]
.text$mn:0000B5CA                 mov     ecx, [edx]      ; this
.text$mn:0000B5CC                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000B5D1                 mov     eax, [ebp+var_10]
.text$mn:0000B5D4                 mov     ecx, [eax]      ; this
.text$mn:0000B5D6                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B5DB                 mov     ecx, [ebp+var_10]
.text$mn:0000B5DE                 mov     edx, [eax]
.text$mn:0000B5E0                 mov     [ecx], edx
.text$mn:0000B5E2
.text$mn:0000B5E2 loc_B5E2:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *)+79j
.text$mn:0000B5E2                 jmp     short loc_B596
.text$mn:0000B5E4 ; ---------------------------------------------------------------------------
.text$mn:0000B5E4
.text$mn:0000B5E4 loc_B5E4:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *)+48j
.text$mn:0000B5E4                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *)+50j
.text$mn:0000B5E4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B5EB                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B5EE                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000B5F3                 mov     ecx, [ebp+var_C]
.text$mn:0000B5F6                 mov     large fs:0, ecx
.text$mn:0000B5FD                 pop     ecx
.text$mn:0000B5FE                 mov     esp, ebp
.text$mn:0000B600                 pop     ebp
.text$mn:0000B601                 retn    8
.text$mn:0000B601 ?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z endp
.text$mn:0000B601
.text$mn:0000B601 _text$mn        ends
.text$mn:0000B601
.text$x:0000B604 ; ===========================================================================
.text$x:0000B604
.text$x:0000B604 ; Segment type: Pure code
.text$x:0000B604 ; Segment permissions: Read/Execute
.text$x:0000B604 _text$x         segment para public 'CODE' use32
.text$x:0000B604                 assume cs:_text$x
.text$x:0000B604                 ;org 0B604h
.text$x:0000B604 ; COMDAT (pick associative to section at B54C)
.text$x:0000B604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B604
.text$x:0000B604 ; =============== S U B R O U T I N E =======================================
.text$x:0000B604
.text$x:0000B604
.text$x:0000B604 __unwindfunclet$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z$0 proc near
.text$x:0000B604                                         ; DATA XREF: .xdata$x:00010418o
.text$x:0000B604                 lea     ecx, [ebp-18h]  ; this
.text$x:0000B607                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000B607 __unwindfunclet$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z$0 endp
.text$x:0000B607
.text$x:0000B60C
.text$x:0000B60C ; =============== S U B R O U T I N E =======================================
.text$x:0000B60C
.text$x:0000B60C
.text$x:0000B60C __ehhandler$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z proc near
.text$x:0000B60C                                         ; DATA XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *)+5o
.text$x:0000B60C
.text$x:0000B60C arg_4           = dword ptr  8
.text$x:0000B60C
.text$x:0000B60C                 mov     edx, [esp+arg_4]
.text$x:0000B610                 lea     eax, [edx+0Ch]
.text$x:0000B613                 mov     ecx, [edx-10h]
.text$x:0000B616                 xor     ecx, eax
.text$x:0000B618                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B61D                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z
.text$x:0000B622                 jmp     ___CxxFrameHandler3
.text$x:0000B622 __ehhandler$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z endp
.text$x:0000B622
.text$x:0000B622 ; ---------------------------------------------------------------------------
.text$x:0000B627                 align 4
.text$x:0000B627 _text$x         ends
.text$x:0000B627
.text$mn:0000B628 ; ===========================================================================
.text$mn:0000B628
.text$mn:0000B628 ; Segment type: Pure code
.text$mn:0000B628 ; Segment permissions: Read/Execute
.text$mn:0000B628 _text$mn        segment para public 'CODE' use32
.text$mn:0000B628                 assume cs:_text$mn
.text$mn:0000B628                 ;org 0B628h
.text$mn:0000B628 ; COMDAT (pick any)
.text$mn:0000B628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B628
.text$mn:0000B628 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B628
.text$mn:0000B628 ; Attributes: bp-based frame
.text$mn:0000B628
.text$mn:0000B628 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Orphan_range(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)const
.text$mn:0000B628                 public ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:0000B628 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:0000B628                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+B1p
.text$mn:0000B628                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+6Fp ...
.text$mn:0000B628
.text$mn:0000B628 var_18          = byte ptr -18h
.text$mn:0000B628 var_14          = dword ptr -14h
.text$mn:0000B628 var_10          = dword ptr -10h
.text$mn:0000B628 var_C           = dword ptr -0Ch
.text$mn:0000B628 var_4           = dword ptr -4
.text$mn:0000B628 arg_0           = dword ptr  8
.text$mn:0000B628 arg_4           = dword ptr  0Ch
.text$mn:0000B628
.text$mn:0000B628                 push    ebp
.text$mn:0000B629                 mov     ebp, esp
.text$mn:0000B62B                 push    0FFFFFFFFh
.text$mn:0000B62D                 push    offset __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:0000B632                 mov     eax, large fs:0
.text$mn:0000B638                 push    eax
.text$mn:0000B639                 sub     esp, 0Ch
.text$mn:0000B63C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B641                 xor     eax, ebp
.text$mn:0000B643                 push    eax
.text$mn:0000B644                 lea     eax, [ebp+var_C]
.text$mn:0000B647                 mov     large fs:0, eax
.text$mn:0000B64D                 mov     [ebp+var_14], ecx
.text$mn:0000B650                 push    3               ; int
.text$mn:0000B652                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B655                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:0000B65A                 mov     [ebp+var_4], 0
.text$mn:0000B661                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000B664                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:0000B669                 mov     [ebp+var_10], eax
.text$mn:0000B66C                 cmp     [ebp+var_10], 0
.text$mn:0000B670                 jz      short loc_B6C0
.text$mn:0000B672
.text$mn:0000B672 loc_B672:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_B6BEj
.text$mn:0000B672                 mov     eax, [ebp+var_10]
.text$mn:0000B675                 cmp     dword ptr [eax], 0
.text$mn:0000B678                 jz      short loc_B6C0
.text$mn:0000B67A                 mov     ecx, [ebp+var_10]
.text$mn:0000B67D                 mov     edx, [ecx]
.text$mn:0000B67F                 mov     eax, [edx+8]
.text$mn:0000B682                 cmp     eax, [ebp+arg_0]
.text$mn:0000B685                 jb      short loc_B694
.text$mn:0000B687                 mov     ecx, [ebp+var_10]
.text$mn:0000B68A                 mov     edx, [ecx]
.text$mn:0000B68C                 mov     eax, [ebp+arg_4]
.text$mn:0000B68F                 cmp     eax, [edx+8]
.text$mn:0000B692                 jnb     short loc_B6A3
.text$mn:0000B694
.text$mn:0000B694 loc_B694:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Dj
.text$mn:0000B694                 mov     ecx, [ebp+var_10]
.text$mn:0000B697                 mov     ecx, [ecx]      ; this
.text$mn:0000B699                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B69E                 mov     [ebp+var_10], eax
.text$mn:0000B6A1                 jmp     short loc_B6BE
.text$mn:0000B6A3 ; ---------------------------------------------------------------------------
.text$mn:0000B6A3
.text$mn:0000B6A3 loc_B6A3:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+6Aj
.text$mn:0000B6A3                 mov     edx, [ebp+var_10]
.text$mn:0000B6A6                 mov     ecx, [edx]      ; this
.text$mn:0000B6A8                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000B6AD                 mov     eax, [ebp+var_10]
.text$mn:0000B6B0                 mov     ecx, [eax]      ; this
.text$mn:0000B6B2                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000B6B7                 mov     ecx, [ebp+var_10]
.text$mn:0000B6BA                 mov     edx, [eax]
.text$mn:0000B6BC                 mov     [ecx], edx
.text$mn:0000B6BE
.text$mn:0000B6BE loc_B6BE:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+79j
.text$mn:0000B6BE                 jmp     short loc_B672
.text$mn:0000B6C0 ; ---------------------------------------------------------------------------
.text$mn:0000B6C0
.text$mn:0000B6C0 loc_B6C0:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+48j
.text$mn:0000B6C0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+50j
.text$mn:0000B6C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B6C7                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000B6CA                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000B6CF                 mov     ecx, [ebp+var_C]
.text$mn:0000B6D2                 mov     large fs:0, ecx
.text$mn:0000B6D9                 pop     ecx
.text$mn:0000B6DA                 mov     esp, ebp
.text$mn:0000B6DC                 pop     ebp
.text$mn:0000B6DD                 retn    8
.text$mn:0000B6DD ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:0000B6DD
.text$mn:0000B6DD _text$mn        ends
.text$mn:0000B6DD
.text$x:0000B6E0 ; ===========================================================================
.text$x:0000B6E0
.text$x:0000B6E0 ; Segment type: Pure code
.text$x:0000B6E0 ; Segment permissions: Read/Execute
.text$x:0000B6E0 _text$x         segment para public 'CODE' use32
.text$x:0000B6E0                 assume cs:_text$x
.text$x:0000B6E0                 ;org 0B6E0h
.text$x:0000B6E0 ; COMDAT (pick associative to section at B628)
.text$x:0000B6E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B6E0
.text$x:0000B6E0 ; =============== S U B R O U T I N E =======================================
.text$x:0000B6E0
.text$x:0000B6E0
.text$x:0000B6E0 __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 proc near
.text$x:0000B6E0                                         ; DATA XREF: .xdata$x:0000F908o
.text$x:0000B6E0                 lea     ecx, [ebp-18h]  ; this
.text$x:0000B6E3                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000B6E3 __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 endp
.text$x:0000B6E3
.text$x:0000B6E8
.text$x:0000B6E8 ; =============== S U B R O U T I N E =======================================
.text$x:0000B6E8
.text$x:0000B6E8
.text$x:0000B6E8 __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$x:0000B6E8                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:0000B6E8
.text$x:0000B6E8 arg_4           = dword ptr  8
.text$x:0000B6E8
.text$x:0000B6E8                 mov     edx, [esp+arg_4]
.text$x:0000B6EC                 lea     eax, [edx+0Ch]
.text$x:0000B6EF                 mov     ecx, [edx-10h]
.text$x:0000B6F2                 xor     ecx, eax
.text$x:0000B6F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B6F9                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$x:0000B6FE                 jmp     ___CxxFrameHandler3
.text$x:0000B6FE __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$x:0000B6FE
.text$x:0000B6FE ; ---------------------------------------------------------------------------
.text$x:0000B703                 align 4
.text$x:0000B703 _text$x         ends
.text$x:0000B703
.text$mn:0000B704 ; ===========================================================================
.text$mn:0000B704
.text$mn:0000B704 ; Segment type: Pure code
.text$mn:0000B704 ; Segment permissions: Read/Execute
.text$mn:0000B704 _text$mn        segment para public 'CODE' use32
.text$mn:0000B704                 assume cs:_text$mn
.text$mn:0000B704                 ;org 0B704h
.text$mn:0000B704 ; COMDAT (pick any)
.text$mn:0000B704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B704
.text$mn:0000B704 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B704
.text$mn:0000B704 ; Attributes: bp-based frame
.text$mn:0000B704
.text$mn:0000B704 ; public: static unsigned int __cdecl std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Pdif(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:0000B704                 public ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:0000B704 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$mn:0000B704                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+89p
.text$mn:0000B704                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+FAp ...
.text$mn:0000B704
.text$mn:0000B704 var_14          = dword ptr -14h
.text$mn:0000B704 var_10          = dword ptr -10h
.text$mn:0000B704 var_C           = dword ptr -0Ch
.text$mn:0000B704 var_4           = dword ptr -4
.text$mn:0000B704 arg_0           = byte ptr  8
.text$mn:0000B704 arg_8           = dword ptr  10h
.text$mn:0000B704 arg_C           = byte ptr  14h
.text$mn:0000B704
.text$mn:0000B704                 push    ebp
.text$mn:0000B705                 mov     ebp, esp
.text$mn:0000B707                 push    0FFFFFFFFh
.text$mn:0000B709                 push    offset __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:0000B70E                 mov     eax, large fs:0
.text$mn:0000B714                 push    eax
.text$mn:0000B715                 sub     esp, 8
.text$mn:0000B718                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B71D                 xor     eax, ebp
.text$mn:0000B71F                 push    eax
.text$mn:0000B720                 lea     eax, [ebp+var_C]
.text$mn:0000B723                 mov     large fs:0, eax
.text$mn:0000B729                 mov     [ebp+var_4], 1
.text$mn:0000B730                 cmp     [ebp+arg_8], 0
.text$mn:0000B734                 jnz     short loc_B73F
.text$mn:0000B736                 mov     [ebp+var_10], 0
.text$mn:0000B73D                 jmp     short loc_B74E
.text$mn:0000B73F ; ---------------------------------------------------------------------------
.text$mn:0000B73F
.text$mn:0000B73F loc_B73F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+30j
.text$mn:0000B73F                 lea     eax, [ebp+arg_C]
.text$mn:0000B742                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000B743                 lea     ecx, [ebp+arg_0]
.text$mn:0000B746                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000B74B                 mov     [ebp+var_10], eax
.text$mn:0000B74E
.text$mn:0000B74E loc_B74E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39j
.text$mn:0000B74E                 mov     ecx, [ebp+var_10]
.text$mn:0000B751                 mov     [ebp+var_14], ecx
.text$mn:0000B754                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000B758                 lea     ecx, [ebp+arg_0]
.text$mn:0000B75B                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000B760                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B767                 lea     ecx, [ebp+arg_C]
.text$mn:0000B76A                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000B76F                 mov     eax, [ebp+var_14]
.text$mn:0000B772                 mov     ecx, [ebp+var_C]
.text$mn:0000B775                 mov     large fs:0, ecx
.text$mn:0000B77C                 pop     ecx
.text$mn:0000B77D                 mov     esp, ebp
.text$mn:0000B77F                 pop     ebp
.text$mn:0000B780                 retn
.text$mn:0000B780 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$mn:0000B780
.text$mn:0000B780 ; ---------------------------------------------------------------------------
.text$mn:0000B781                 align 4
.text$mn:0000B781 _text$mn        ends
.text$mn:0000B781
.text$x:0000B784 ; ===========================================================================
.text$x:0000B784
.text$x:0000B784 ; Segment type: Pure code
.text$x:0000B784 ; Segment permissions: Read/Execute
.text$x:0000B784 _text$x         segment para public 'CODE' use32
.text$x:0000B784                 assume cs:_text$x
.text$x:0000B784                 ;org 0B784h
.text$x:0000B784 ; COMDAT (pick associative to section at B704)
.text$x:0000B784                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B784
.text$x:0000B784 ; =============== S U B R O U T I N E =======================================
.text$x:0000B784
.text$x:0000B784
.text$x:0000B784 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 proc near
.text$x:0000B784                                         ; DATA XREF: .xdata$x:0000F57Co
.text$x:0000B784                 lea     ecx, [ebp+14h]
.text$x:0000B787                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000B787 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 endp
.text$x:0000B787
.text$x:0000B78C
.text$x:0000B78C ; =============== S U B R O U T I N E =======================================
.text$x:0000B78C
.text$x:0000B78C
.text$x:0000B78C __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 proc near
.text$x:0000B78C                                         ; DATA XREF: .xdata$x:0000F584o
.text$x:0000B78C                 lea     ecx, [ebp+8]
.text$x:0000B78F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000B78F __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 endp
.text$x:0000B78F
.text$x:0000B794
.text$x:0000B794 ; =============== S U B R O U T I N E =======================================
.text$x:0000B794
.text$x:0000B794
.text$x:0000B794 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$x:0000B794                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000B794
.text$x:0000B794 arg_4           = dword ptr  8
.text$x:0000B794
.text$x:0000B794                 mov     edx, [esp+arg_4]
.text$x:0000B798                 lea     eax, [edx+0Ch]
.text$x:0000B79B                 mov     ecx, [edx-0Ch]
.text$x:0000B79E                 xor     ecx, eax
.text$x:0000B7A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B7A5                 mov     eax, offset __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$x:0000B7AA                 jmp     ___CxxFrameHandler3
.text$x:0000B7AA __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$x:0000B7AA
.text$x:0000B7AA ; ---------------------------------------------------------------------------
.text$x:0000B7AF                 align 10h
.text$x:0000B7AF _text$x         ends
.text$x:0000B7AF
.text$mn:0000B7B0 ; ===========================================================================
.text$mn:0000B7B0
.text$mn:0000B7B0 ; Segment type: Pure code
.text$mn:0000B7B0 ; Segment permissions: Read/Execute
.text$mn:0000B7B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000B7B0                 assume cs:_text$mn
.text$mn:0000B7B0                 ;org 0B7B0h
.text$mn:0000B7B0 ; COMDAT (pick any)
.text$mn:0000B7B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B7B0
.text$mn:0000B7B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B7B0
.text$mn:0000B7B0 ; Attributes: bp-based frame
.text$mn:0000B7B0
.text$mn:0000B7B0 ; protected: void __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Reallocate(unsigned int)
.text$mn:0000B7B0                 public ?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.text$mn:0000B7B0 ?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000B7B0                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)+4Ep
.text$mn:0000B7B0
.text$mn:0000B7B0 var_20          = dword ptr -20h
.text$mn:0000B7B0 var_1C          = dword ptr -1Ch
.text$mn:0000B7B0 var_18          = dword ptr -18h
.text$mn:0000B7B0 var_13          = byte ptr -13h
.text$mn:0000B7B0 var_11          = byte ptr -11h
.text$mn:0000B7B0 var_10          = dword ptr -10h
.text$mn:0000B7B0 var_C           = dword ptr -0Ch
.text$mn:0000B7B0 var_4           = dword ptr -4
.text$mn:0000B7B0 arg_0           = dword ptr  8
.text$mn:0000B7B0
.text$mn:0000B7B0 ; FUNCTION CHUNK AT .text$mn:0000B846 SIZE 00000009 BYTES
.text$mn:0000B7B0 ; FUNCTION CHUNK AT .text$mn:0000B856 SIZE 00000097 BYTES
.text$mn:0000B7B0
.text$mn:0000B7B0                 push    ebp
.text$mn:0000B7B1                 mov     ebp, esp
.text$mn:0000B7B3                 push    0FFFFFFFFh
.text$mn:0000B7B5                 push    offset __ehhandler$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.text$mn:0000B7BA                 mov     eax, large fs:0
.text$mn:0000B7C0                 push    eax
.text$mn:0000B7C1                 push    ecx
.text$mn:0000B7C2                 sub     esp, 10h
.text$mn:0000B7C5                 push    ebx
.text$mn:0000B7C6                 push    esi
.text$mn:0000B7C7                 push    edi
.text$mn:0000B7C8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B7CD                 xor     eax, ebp
.text$mn:0000B7CF                 push    eax
.text$mn:0000B7D0                 lea     eax, [ebp+var_C]
.text$mn:0000B7D3                 mov     large fs:0, eax
.text$mn:0000B7D9                 mov     [ebp+var_10], esp
.text$mn:0000B7DC                 mov     [ebp+var_18], ecx
.text$mn:0000B7DF                 mov     eax, [ebp+arg_0]
.text$mn:0000B7E2                 push    eax
.text$mn:0000B7E3                 lea     ecx, [ebp+var_11]
.text$mn:0000B7E6                 push    ecx
.text$mn:0000B7E7                 mov     ecx, [ebp+var_18]
.text$mn:0000B7EA                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:0000B7EF                 mov     ecx, eax
.text$mn:0000B7F1                 call    ?allocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEPAPAVFunctionParser@@I@Z ; std::_Wrap_alloc<std::allocator<FunctionParser *>>::allocate(uint)
.text$mn:0000B7F6                 mov     [ebp+var_1C], eax
.text$mn:0000B7F9                 mov     [ebp+var_4], 0
.text$mn:0000B800                 mov     edx, [ebp+var_1C]
.text$mn:0000B803                 push    edx
.text$mn:0000B804                 mov     eax, [ebp+var_18]
.text$mn:0000B807                 mov     ecx, [eax+8]
.text$mn:0000B80A                 push    ecx
.text$mn:0000B80B                 mov     edx, [ebp+var_18]
.text$mn:0000B80E                 mov     eax, [edx+4]
.text$mn:0000B811                 push    eax
.text$mn:0000B812                 mov     ecx, [ebp+var_18]
.text$mn:0000B815                 call    ??$_Umove@PAPAVFunctionParser@@@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEPAPAVFunctionParser@@PAPAV2@00@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Umove<FunctionParser * *>(FunctionParser * *,FunctionParser * *,FunctionParser * *)
.text$mn:0000B81A                 jmp     short loc_B846
.text$mn:0000B81A ?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z endp
.text$mn:0000B81A
.text$mn:0000B81C
.text$mn:0000B81C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B81C
.text$mn:0000B81C ; Attributes: noreturn
.text$mn:0000B81C
.text$mn:0000B81C __catch$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z$0 proc near
.text$mn:0000B81C                                         ; DATA XREF: .xdata$x:00010210o
.text$mn:0000B81C                 mov     ecx, [ebp+8]
.text$mn:0000B81F                 push    ecx             ; int
.text$mn:0000B820                 mov     edx, [ebp-1Ch]
.text$mn:0000B823                 push    edx             ; void *
.text$mn:0000B824                 lea     eax, [ebp-12h]
.text$mn:0000B827                 push    eax
.text$mn:0000B828                 mov     ecx, [ebp-18h]
.text$mn:0000B82B                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:0000B830                 mov     ecx, eax
.text$mn:0000B832                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@I@Z ; std::_Wrap_alloc<std::allocator<FunctionParser *>>::deallocate(FunctionParser * *,uint)
.text$mn:0000B837                 push    0
.text$mn:0000B839                 push    0
.text$mn:0000B83B                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000B83B __catch$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z$0 endp
.text$mn:0000B83B
.text$mn:0000B840 ; ---------------------------------------------------------------------------
.text$mn:0000B840                 mov     eax, offset $LN8_1
.text$mn:0000B845                 retn
.text$mn:0000B846 ; ---------------------------------------------------------------------------
.text$mn:0000B846 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.text$mn:0000B846
.text$mn:0000B846 loc_B846:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)+6Aj
.text$mn:0000B846                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B84D                 jmp     short loc_B856
.text$mn:0000B84D ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.text$mn:0000B84F
.text$mn:0000B84F ; =============== S U B R O U T I N E =======================================
.text$mn:0000B84F
.text$mn:0000B84F
.text$mn:0000B84F $LN8_1          proc near               ; DATA XREF: .text$mn:0000B840o
.text$mn:0000B84F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000B84F $LN8_1          endp ; sp-analysis failed
.text$mn:0000B84F
.text$mn:0000B856 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.text$mn:0000B856
.text$mn:0000B856 loc_B856:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)+9Dj
.text$mn:0000B856                 mov     ecx, [ebp+var_18]
.text$mn:0000B859                 call    ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::size(void)
.text$mn:0000B85E                 mov     [ebp+var_20], eax
.text$mn:0000B861                 mov     ecx, [ebp+var_18]
.text$mn:0000B864                 cmp     dword ptr [ecx+4], 0
.text$mn:0000B868                 jz      short loc_B8AA
.text$mn:0000B86A                 mov     edx, [ebp+var_18]
.text$mn:0000B86D                 mov     eax, [edx+8]
.text$mn:0000B870                 push    eax
.text$mn:0000B871                 mov     ecx, [ebp+var_18]
.text$mn:0000B874                 mov     edx, [ecx+4]
.text$mn:0000B877                 push    edx
.text$mn:0000B878                 mov     ecx, [ebp+var_18]
.text$mn:0000B87B                 call    ?_Destroy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXPAPAVFunctionParser@@0@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Destroy(FunctionParser * *,FunctionParser * *)
.text$mn:0000B880                 mov     eax, [ebp+var_18]
.text$mn:0000B883                 mov     ecx, [ebp+var_18]
.text$mn:0000B886                 mov     edx, [eax+0Ch]
.text$mn:0000B889                 sub     edx, [ecx+4]
.text$mn:0000B88C                 sar     edx, 2
.text$mn:0000B88F                 push    edx             ; int
.text$mn:0000B890                 mov     eax, [ebp+var_18]
.text$mn:0000B893                 mov     ecx, [eax+4]
.text$mn:0000B896                 push    ecx             ; void *
.text$mn:0000B897                 lea     edx, [ebp+var_13]
.text$mn:0000B89A                 push    edx
.text$mn:0000B89B                 mov     ecx, [ebp+var_18]
.text$mn:0000B89E                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:0000B8A3                 mov     ecx, eax
.text$mn:0000B8A5                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@I@Z ; std::_Wrap_alloc<std::allocator<FunctionParser *>>::deallocate(FunctionParser * *,uint)
.text$mn:0000B8AA
.text$mn:0000B8AA loc_B8AA:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)+B8j
.text$mn:0000B8AA                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000B8AD                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000B8B2                 mov     eax, [ebp+arg_0]
.text$mn:0000B8B5                 mov     ecx, [ebp+var_1C]
.text$mn:0000B8B8                 lea     edx, [ecx+eax*4]
.text$mn:0000B8BB                 mov     eax, [ebp+var_18]
.text$mn:0000B8BE                 mov     [eax+0Ch], edx
.text$mn:0000B8C1                 mov     ecx, [ebp+var_20]
.text$mn:0000B8C4                 mov     edx, [ebp+var_1C]
.text$mn:0000B8C7                 lea     eax, [edx+ecx*4]
.text$mn:0000B8CA                 mov     ecx, [ebp+var_18]
.text$mn:0000B8CD                 mov     [ecx+8], eax
.text$mn:0000B8D0                 mov     edx, [ebp+var_18]
.text$mn:0000B8D3                 mov     eax, [ebp+var_1C]
.text$mn:0000B8D6                 mov     [edx+4], eax
.text$mn:0000B8D9                 mov     ecx, [ebp+var_C]
.text$mn:0000B8DC                 mov     large fs:0, ecx
.text$mn:0000B8E3                 pop     ecx
.text$mn:0000B8E4                 pop     edi
.text$mn:0000B8E5                 pop     esi
.text$mn:0000B8E6                 pop     ebx
.text$mn:0000B8E7                 mov     esp, ebp
.text$mn:0000B8E9                 pop     ebp
.text$mn:0000B8EA                 retn    4
.text$mn:0000B8EA ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.text$mn:0000B8EA ; ---------------------------------------------------------------------------
.text$mn:0000B8ED                 align 10h
.text$mn:0000B8ED _text$mn        ends
.text$mn:0000B8ED
.text$x:0000B8F0 ; ===========================================================================
.text$x:0000B8F0
.text$x:0000B8F0 ; Segment type: Pure code
.text$x:0000B8F0 ; Segment permissions: Read/Execute
.text$x:0000B8F0 _text$x         segment para public 'CODE' use32
.text$x:0000B8F0                 assume cs:_text$x
.text$x:0000B8F0                 ;org 0B8F0h
.text$x:0000B8F0 ; COMDAT (pick associative to section at B7B0)
.text$x:0000B8F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000B8F0
.text$x:0000B8F0 ; =============== S U B R O U T I N E =======================================
.text$x:0000B8F0
.text$x:0000B8F0
.text$x:0000B8F0 __ehhandler$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z proc near
.text$x:0000B8F0                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)+5o
.text$x:0000B8F0
.text$x:0000B8F0 arg_4           = dword ptr  8
.text$x:0000B8F0
.text$x:0000B8F0                 mov     edx, [esp+arg_4]
.text$x:0000B8F4                 lea     eax, [edx+0Ch]
.text$x:0000B8F7                 mov     ecx, [edx-24h]
.text$x:0000B8FA                 xor     ecx, eax
.text$x:0000B8FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000B901                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.text$x:0000B906                 jmp     ___CxxFrameHandler3
.text$x:0000B906 __ehhandler$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z endp
.text$x:0000B906
.text$x:0000B906 ; ---------------------------------------------------------------------------
.text$x:0000B90B                 align 4
.text$x:0000B90B _text$x         ends
.text$x:0000B90B
.text$mn:0000B90C ; ===========================================================================
.text$mn:0000B90C
.text$mn:0000B90C ; Segment type: Pure code
.text$mn:0000B90C ; Segment permissions: Read/Execute
.text$mn:0000B90C _text$mn        segment para public 'CODE' use32
.text$mn:0000B90C                 assume cs:_text$mn
.text$mn:0000B90C                 ;org 0B90Ch
.text$mn:0000B90C ; COMDAT (pick any)
.text$mn:0000B90C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000B90C
.text$mn:0000B90C ; =============== S U B R O U T I N E =======================================
.text$mn:0000B90C
.text$mn:0000B90C ; Attributes: bp-based frame
.text$mn:0000B90C
.text$mn:0000B90C ; protected: void __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Reallocate(unsigned int)
.text$mn:0000B90C                 public ?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.text$mn:0000B90C ?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z proc near
.text$mn:0000B90C                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)+4Ep
.text$mn:0000B90C
.text$mn:0000B90C var_20          = dword ptr -20h
.text$mn:0000B90C var_1C          = dword ptr -1Ch
.text$mn:0000B90C var_18          = dword ptr -18h
.text$mn:0000B90C var_13          = byte ptr -13h
.text$mn:0000B90C var_11          = byte ptr -11h
.text$mn:0000B90C var_10          = dword ptr -10h
.text$mn:0000B90C var_C           = dword ptr -0Ch
.text$mn:0000B90C var_4           = dword ptr -4
.text$mn:0000B90C arg_0           = dword ptr  8
.text$mn:0000B90C
.text$mn:0000B90C ; FUNCTION CHUNK AT .text$mn:0000B9A2 SIZE 00000009 BYTES
.text$mn:0000B90C ; FUNCTION CHUNK AT .text$mn:0000B9B2 SIZE 00000097 BYTES
.text$mn:0000B90C
.text$mn:0000B90C                 push    ebp
.text$mn:0000B90D                 mov     ebp, esp
.text$mn:0000B90F                 push    0FFFFFFFFh
.text$mn:0000B911                 push    offset __ehhandler$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.text$mn:0000B916                 mov     eax, large fs:0
.text$mn:0000B91C                 push    eax
.text$mn:0000B91D                 push    ecx
.text$mn:0000B91E                 sub     esp, 10h
.text$mn:0000B921                 push    ebx
.text$mn:0000B922                 push    esi
.text$mn:0000B923                 push    edi
.text$mn:0000B924                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000B929                 xor     eax, ebp
.text$mn:0000B92B                 push    eax
.text$mn:0000B92C                 lea     eax, [ebp+var_C]
.text$mn:0000B92F                 mov     large fs:0, eax
.text$mn:0000B935                 mov     [ebp+var_10], esp
.text$mn:0000B938                 mov     [ebp+var_18], ecx
.text$mn:0000B93B                 mov     eax, [ebp+arg_0]
.text$mn:0000B93E                 push    eax
.text$mn:0000B93F                 lea     ecx, [ebp+var_11]
.text$mn:0000B942                 push    ecx
.text$mn:0000B943                 mov     ecx, [ebp+var_18]
.text$mn:0000B946                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:0000B94B                 mov     ecx, eax
.text$mn:0000B94D                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEPAU?$pair@HH@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::allocate(uint)
.text$mn:0000B952                 mov     [ebp+var_1C], eax
.text$mn:0000B955                 mov     [ebp+var_4], 0
.text$mn:0000B95C                 mov     edx, [ebp+var_1C]
.text$mn:0000B95F                 push    edx
.text$mn:0000B960                 mov     eax, [ebp+var_18]
.text$mn:0000B963                 mov     ecx, [eax+8]
.text$mn:0000B966                 push    ecx
.text$mn:0000B967                 mov     edx, [ebp+var_18]
.text$mn:0000B96A                 mov     eax, [edx+4]
.text$mn:0000B96D                 push    eax
.text$mn:0000B96E                 mov     ecx, [ebp+var_18]
.text$mn:0000B971                 call    ??$_Umove@PAU?$pair@HH@std@@@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEPAU?$pair@HH@1@PAU21@00@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Umove<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,std::pair<int,int> *)
.text$mn:0000B976                 jmp     short loc_B9A2
.text$mn:0000B976 ?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z endp
.text$mn:0000B976
.text$mn:0000B978
.text$mn:0000B978 ; =============== S U B R O U T I N E =======================================
.text$mn:0000B978
.text$mn:0000B978 ; Attributes: noreturn
.text$mn:0000B978
.text$mn:0000B978 __catch$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z$0 proc near
.text$mn:0000B978                                         ; DATA XREF: .xdata$x:000106B4o
.text$mn:0000B978                 mov     ecx, [ebp+8]
.text$mn:0000B97B                 push    ecx             ; int
.text$mn:0000B97C                 mov     edx, [ebp-1Ch]
.text$mn:0000B97F                 push    edx             ; void *
.text$mn:0000B980                 lea     eax, [ebp-12h]
.text$mn:0000B983                 push    eax
.text$mn:0000B984                 mov     ecx, [ebp-18h]
.text$mn:0000B987                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:0000B98C                 mov     ecx, eax
.text$mn:0000B98E                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::deallocate(std::pair<int,int> *,uint)
.text$mn:0000B993                 push    0
.text$mn:0000B995                 push    0
.text$mn:0000B997                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000B997 __catch$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z$0 endp
.text$mn:0000B997
.text$mn:0000B99C ; ---------------------------------------------------------------------------
.text$mn:0000B99C                 mov     eax, offset $LN8_4
.text$mn:0000B9A1                 retn
.text$mn:0000B9A2 ; ---------------------------------------------------------------------------
.text$mn:0000B9A2 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.text$mn:0000B9A2
.text$mn:0000B9A2 loc_B9A2:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)+6Aj
.text$mn:0000B9A2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000B9A9                 jmp     short loc_B9B2
.text$mn:0000B9A9 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.text$mn:0000B9AB
.text$mn:0000B9AB ; =============== S U B R O U T I N E =======================================
.text$mn:0000B9AB
.text$mn:0000B9AB
.text$mn:0000B9AB $LN8_4          proc near               ; DATA XREF: .text$mn:0000B99Co
.text$mn:0000B9AB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000B9AB $LN8_4          endp ; sp-analysis failed
.text$mn:0000B9AB
.text$mn:0000B9B2 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.text$mn:0000B9B2
.text$mn:0000B9B2 loc_B9B2:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)+9Dj
.text$mn:0000B9B2                 mov     ecx, [ebp+var_18]
.text$mn:0000B9B5                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:0000B9BA                 mov     [ebp+var_20], eax
.text$mn:0000B9BD                 mov     ecx, [ebp+var_18]
.text$mn:0000B9C0                 cmp     dword ptr [ecx+4], 0
.text$mn:0000B9C4                 jz      short loc_BA06
.text$mn:0000B9C6                 mov     edx, [ebp+var_18]
.text$mn:0000B9C9                 mov     eax, [edx+8]
.text$mn:0000B9CC                 push    eax
.text$mn:0000B9CD                 mov     ecx, [ebp+var_18]
.text$mn:0000B9D0                 mov     edx, [ecx+4]
.text$mn:0000B9D3                 push    edx
.text$mn:0000B9D4                 mov     ecx, [ebp+var_18]
.text$mn:0000B9D7                 call    ?_Destroy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXPAU?$pair@HH@2@0@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Destroy(std::pair<int,int> *,std::pair<int,int> *)
.text$mn:0000B9DC                 mov     eax, [ebp+var_18]
.text$mn:0000B9DF                 mov     ecx, [ebp+var_18]
.text$mn:0000B9E2                 mov     edx, [eax+0Ch]
.text$mn:0000B9E5                 sub     edx, [ecx+4]
.text$mn:0000B9E8                 sar     edx, 3
.text$mn:0000B9EB                 push    edx             ; int
.text$mn:0000B9EC                 mov     eax, [ebp+var_18]
.text$mn:0000B9EF                 mov     ecx, [eax+4]
.text$mn:0000B9F2                 push    ecx             ; void *
.text$mn:0000B9F3                 lea     edx, [ebp+var_13]
.text$mn:0000B9F6                 push    edx
.text$mn:0000B9F7                 mov     ecx, [ebp+var_18]
.text$mn:0000B9FA                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:0000B9FF                 mov     ecx, eax
.text$mn:0000BA01                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::deallocate(std::pair<int,int> *,uint)
.text$mn:0000BA06
.text$mn:0000BA06 loc_BA06:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)+B8j
.text$mn:0000BA06                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000BA09                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000BA0E                 mov     eax, [ebp+arg_0]
.text$mn:0000BA11                 mov     ecx, [ebp+var_1C]
.text$mn:0000BA14                 lea     edx, [ecx+eax*8]
.text$mn:0000BA17                 mov     eax, [ebp+var_18]
.text$mn:0000BA1A                 mov     [eax+0Ch], edx
.text$mn:0000BA1D                 mov     ecx, [ebp+var_20]
.text$mn:0000BA20                 mov     edx, [ebp+var_1C]
.text$mn:0000BA23                 lea     eax, [edx+ecx*8]
.text$mn:0000BA26                 mov     ecx, [ebp+var_18]
.text$mn:0000BA29                 mov     [ecx+8], eax
.text$mn:0000BA2C                 mov     edx, [ebp+var_18]
.text$mn:0000BA2F                 mov     eax, [ebp+var_1C]
.text$mn:0000BA32                 mov     [edx+4], eax
.text$mn:0000BA35                 mov     ecx, [ebp+var_C]
.text$mn:0000BA38                 mov     large fs:0, ecx
.text$mn:0000BA3F                 pop     ecx
.text$mn:0000BA40                 pop     edi
.text$mn:0000BA41                 pop     esi
.text$mn:0000BA42                 pop     ebx
.text$mn:0000BA43                 mov     esp, ebp
.text$mn:0000BA45                 pop     ebp
.text$mn:0000BA46                 retn    4
.text$mn:0000BA46 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.text$mn:0000BA46 ; ---------------------------------------------------------------------------
.text$mn:0000BA49                 align 4
.text$mn:0000BA49 _text$mn        ends
.text$mn:0000BA49
.text$x:0000BA4C ; ===========================================================================
.text$x:0000BA4C
.text$x:0000BA4C ; Segment type: Pure code
.text$x:0000BA4C ; Segment permissions: Read/Execute
.text$x:0000BA4C _text$x         segment para public 'CODE' use32
.text$x:0000BA4C                 assume cs:_text$x
.text$x:0000BA4C                 ;org 0BA4Ch
.text$x:0000BA4C ; COMDAT (pick associative to section at B90C)
.text$x:0000BA4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BA4C
.text$x:0000BA4C ; =============== S U B R O U T I N E =======================================
.text$x:0000BA4C
.text$x:0000BA4C
.text$x:0000BA4C __ehhandler$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z proc near
.text$x:0000BA4C                                         ; DATA XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)+5o
.text$x:0000BA4C
.text$x:0000BA4C arg_4           = dword ptr  8
.text$x:0000BA4C
.text$x:0000BA4C                 mov     edx, [esp+arg_4]
.text$x:0000BA50                 lea     eax, [edx+0Ch]
.text$x:0000BA53                 mov     ecx, [edx-24h]
.text$x:0000BA56                 xor     ecx, eax
.text$x:0000BA58                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BA5D                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.text$x:0000BA62                 jmp     ___CxxFrameHandler3
.text$x:0000BA62 __ehhandler$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z endp
.text$x:0000BA62
.text$x:0000BA62 ; ---------------------------------------------------------------------------
.text$x:0000BA67                 align 4
.text$x:0000BA67 _text$x         ends
.text$x:0000BA67
.text$mn:0000BA68 ; ===========================================================================
.text$mn:0000BA68
.text$mn:0000BA68 ; Segment type: Pure code
.text$mn:0000BA68 ; Segment permissions: Read/Execute
.text$mn:0000BA68 _text$mn        segment para public 'CODE' use32
.text$mn:0000BA68                 assume cs:_text$mn
.text$mn:0000BA68                 ;org 0BA68h
.text$mn:0000BA68 ; COMDAT (pick any)
.text$mn:0000BA68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BA68
.text$mn:0000BA68 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BA68
.text$mn:0000BA68 ; Attributes: bp-based frame
.text$mn:0000BA68
.text$mn:0000BA68 ; protected: void __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Reallocate(unsigned int)
.text$mn:0000BA68                 public ?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BA68 ?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000BA68                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)+4Ep
.text$mn:0000BA68
.text$mn:0000BA68 var_20          = dword ptr -20h
.text$mn:0000BA68 var_1C          = dword ptr -1Ch
.text$mn:0000BA68 var_18          = dword ptr -18h
.text$mn:0000BA68 var_13          = byte ptr -13h
.text$mn:0000BA68 var_11          = byte ptr -11h
.text$mn:0000BA68 var_10          = dword ptr -10h
.text$mn:0000BA68 var_C           = dword ptr -0Ch
.text$mn:0000BA68 var_4           = dword ptr -4
.text$mn:0000BA68 arg_0           = dword ptr  8
.text$mn:0000BA68
.text$mn:0000BA68 ; FUNCTION CHUNK AT .text$mn:0000BAFE SIZE 00000009 BYTES
.text$mn:0000BA68 ; FUNCTION CHUNK AT .text$mn:0000BB0E SIZE 00000097 BYTES
.text$mn:0000BA68
.text$mn:0000BA68                 push    ebp
.text$mn:0000BA69                 mov     ebp, esp
.text$mn:0000BA6B                 push    0FFFFFFFFh
.text$mn:0000BA6D                 push    offset __ehhandler$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BA72                 mov     eax, large fs:0
.text$mn:0000BA78                 push    eax
.text$mn:0000BA79                 push    ecx
.text$mn:0000BA7A                 sub     esp, 10h
.text$mn:0000BA7D                 push    ebx
.text$mn:0000BA7E                 push    esi
.text$mn:0000BA7F                 push    edi
.text$mn:0000BA80                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BA85                 xor     eax, ebp
.text$mn:0000BA87                 push    eax
.text$mn:0000BA88                 lea     eax, [ebp+var_C]
.text$mn:0000BA8B                 mov     large fs:0, eax
.text$mn:0000BA91                 mov     [ebp+var_10], esp
.text$mn:0000BA94                 mov     [ebp+var_18], ecx
.text$mn:0000BA97                 mov     eax, [ebp+arg_0]
.text$mn:0000BA9A                 push    eax
.text$mn:0000BA9B                 lea     ecx, [ebp+var_11]
.text$mn:0000BA9E                 push    ecx
.text$mn:0000BA9F                 mov     ecx, [ebp+var_18]
.text$mn:0000BAA2                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:0000BAA7                 mov     ecx, eax
.text$mn:0000BAA9                 call    ?allocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEPAUAssociationInfo@@I@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::allocate(uint)
.text$mn:0000BAAE                 mov     [ebp+var_1C], eax
.text$mn:0000BAB1                 mov     [ebp+var_4], 0
.text$mn:0000BAB8                 mov     edx, [ebp+var_1C]
.text$mn:0000BABB                 push    edx
.text$mn:0000BABC                 mov     eax, [ebp+var_18]
.text$mn:0000BABF                 mov     ecx, [eax+8]
.text$mn:0000BAC2                 push    ecx
.text$mn:0000BAC3                 mov     edx, [ebp+var_18]
.text$mn:0000BAC6                 mov     eax, [edx+4]
.text$mn:0000BAC9                 push    eax
.text$mn:0000BACA                 mov     ecx, [ebp+var_18]
.text$mn:0000BACD                 call    ??$_Umove@PAUAssociationInfo@@@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEPAUAssociationInfo@@PAU2@00@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Umove<AssociationInfo *>(AssociationInfo *,AssociationInfo *,AssociationInfo *)
.text$mn:0000BAD2                 jmp     short loc_BAFE
.text$mn:0000BAD2 ?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z endp
.text$mn:0000BAD2
.text$mn:0000BAD4
.text$mn:0000BAD4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BAD4
.text$mn:0000BAD4 ; Attributes: noreturn
.text$mn:0000BAD4
.text$mn:0000BAD4 __catch$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z$0 proc near
.text$mn:0000BAD4                                         ; DATA XREF: .xdata$x:00010318o
.text$mn:0000BAD4                 mov     ecx, [ebp+8]
.text$mn:0000BAD7                 push    ecx             ; int
.text$mn:0000BAD8                 mov     edx, [ebp-1Ch]
.text$mn:0000BADB                 push    edx             ; void *
.text$mn:0000BADC                 lea     eax, [ebp-12h]
.text$mn:0000BADF                 push    eax
.text$mn:0000BAE0                 mov     ecx, [ebp-18h]
.text$mn:0000BAE3                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:0000BAE8                 mov     ecx, eax
.text$mn:0000BAEA                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@I@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::deallocate(AssociationInfo *,uint)
.text$mn:0000BAEF                 push    0
.text$mn:0000BAF1                 push    0
.text$mn:0000BAF3                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000BAF3 __catch$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z$0 endp
.text$mn:0000BAF3
.text$mn:0000BAF8 ; ---------------------------------------------------------------------------
.text$mn:0000BAF8                 mov     eax, offset $LN8_2
.text$mn:0000BAFD                 retn
.text$mn:0000BAFE ; ---------------------------------------------------------------------------
.text$mn:0000BAFE ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BAFE
.text$mn:0000BAFE loc_BAFE:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)+6Aj
.text$mn:0000BAFE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BB05                 jmp     short loc_BB0E
.text$mn:0000BB05 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BB07
.text$mn:0000BB07 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BB07
.text$mn:0000BB07
.text$mn:0000BB07 $LN8_2          proc near               ; DATA XREF: .text$mn:0000BAF8o
.text$mn:0000BB07                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000BB07 $LN8_2          endp ; sp-analysis failed
.text$mn:0000BB07
.text$mn:0000BB0E ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BB0E
.text$mn:0000BB0E loc_BB0E:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)+9Dj
.text$mn:0000BB0E                 mov     ecx, [ebp+var_18]
.text$mn:0000BB11                 call    ?size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::size(void)
.text$mn:0000BB16                 mov     [ebp+var_20], eax
.text$mn:0000BB19                 mov     ecx, [ebp+var_18]
.text$mn:0000BB1C                 cmp     dword ptr [ecx+4], 0
.text$mn:0000BB20                 jz      short loc_BB62
.text$mn:0000BB22                 mov     edx, [ebp+var_18]
.text$mn:0000BB25                 mov     eax, [edx+8]
.text$mn:0000BB28                 push    eax
.text$mn:0000BB29                 mov     ecx, [ebp+var_18]
.text$mn:0000BB2C                 mov     edx, [ecx+4]
.text$mn:0000BB2F                 push    edx
.text$mn:0000BB30                 mov     ecx, [ebp+var_18]
.text$mn:0000BB33                 call    ?_Destroy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXPAUAssociationInfo@@0@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Destroy(AssociationInfo *,AssociationInfo *)
.text$mn:0000BB38                 mov     eax, [ebp+var_18]
.text$mn:0000BB3B                 mov     ecx, [ebp+var_18]
.text$mn:0000BB3E                 mov     edx, [eax+0Ch]
.text$mn:0000BB41                 sub     edx, [ecx+4]
.text$mn:0000BB44                 sar     edx, 6
.text$mn:0000BB47                 push    edx             ; int
.text$mn:0000BB48                 mov     eax, [ebp+var_18]
.text$mn:0000BB4B                 mov     ecx, [eax+4]
.text$mn:0000BB4E                 push    ecx             ; void *
.text$mn:0000BB4F                 lea     edx, [ebp+var_13]
.text$mn:0000BB52                 push    edx
.text$mn:0000BB53                 mov     ecx, [ebp+var_18]
.text$mn:0000BB56                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:0000BB5B                 mov     ecx, eax
.text$mn:0000BB5D                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@I@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::deallocate(AssociationInfo *,uint)
.text$mn:0000BB62
.text$mn:0000BB62 loc_BB62:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)+B8j
.text$mn:0000BB62                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000BB65                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000BB6A                 mov     eax, [ebp+arg_0]
.text$mn:0000BB6D                 shl     eax, 6
.text$mn:0000BB70                 add     eax, [ebp+var_1C]
.text$mn:0000BB73                 mov     ecx, [ebp+var_18]
.text$mn:0000BB76                 mov     [ecx+0Ch], eax
.text$mn:0000BB79                 mov     edx, [ebp+var_20]
.text$mn:0000BB7C                 shl     edx, 6
.text$mn:0000BB7F                 add     edx, [ebp+var_1C]
.text$mn:0000BB82                 mov     eax, [ebp+var_18]
.text$mn:0000BB85                 mov     [eax+8], edx
.text$mn:0000BB88                 mov     ecx, [ebp+var_18]
.text$mn:0000BB8B                 mov     edx, [ebp+var_1C]
.text$mn:0000BB8E                 mov     [ecx+4], edx
.text$mn:0000BB91                 mov     ecx, [ebp+var_C]
.text$mn:0000BB94                 mov     large fs:0, ecx
.text$mn:0000BB9B                 pop     ecx
.text$mn:0000BB9C                 pop     edi
.text$mn:0000BB9D                 pop     esi
.text$mn:0000BB9E                 pop     ebx
.text$mn:0000BB9F                 mov     esp, ebp
.text$mn:0000BBA1                 pop     ebp
.text$mn:0000BBA2                 retn    4
.text$mn:0000BBA2 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BBA2 ; ---------------------------------------------------------------------------
.text$mn:0000BBA5                 align 4
.text$mn:0000BBA5 _text$mn        ends
.text$mn:0000BBA5
.text$x:0000BBA8 ; ===========================================================================
.text$x:0000BBA8
.text$x:0000BBA8 ; Segment type: Pure code
.text$x:0000BBA8 ; Segment permissions: Read/Execute
.text$x:0000BBA8 _text$x         segment para public 'CODE' use32
.text$x:0000BBA8                 assume cs:_text$x
.text$x:0000BBA8                 ;org 0BBA8h
.text$x:0000BBA8 ; COMDAT (pick associative to section at BA68)
.text$x:0000BBA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BBA8
.text$x:0000BBA8 ; =============== S U B R O U T I N E =======================================
.text$x:0000BBA8
.text$x:0000BBA8
.text$x:0000BBA8 __ehhandler$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z proc near
.text$x:0000BBA8                                         ; DATA XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)+5o
.text$x:0000BBA8
.text$x:0000BBA8 arg_4           = dword ptr  8
.text$x:0000BBA8
.text$x:0000BBA8                 mov     edx, [esp+arg_4]
.text$x:0000BBAC                 lea     eax, [edx+0Ch]
.text$x:0000BBAF                 mov     ecx, [edx-24h]
.text$x:0000BBB2                 xor     ecx, eax
.text$x:0000BBB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BBB9                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.text$x:0000BBBE                 jmp     ___CxxFrameHandler3
.text$x:0000BBBE __ehhandler$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z endp
.text$x:0000BBBE
.text$x:0000BBBE ; ---------------------------------------------------------------------------
.text$x:0000BBC3                 align 4
.text$x:0000BBC3 _text$x         ends
.text$x:0000BBC3
.text$mn:0000BBC4 ; ===========================================================================
.text$mn:0000BBC4
.text$mn:0000BBC4 ; Segment type: Pure code
.text$mn:0000BBC4 ; Segment permissions: Read/Execute
.text$mn:0000BBC4 _text$mn        segment para public 'CODE' use32
.text$mn:0000BBC4                 assume cs:_text$mn
.text$mn:0000BBC4                 ;org 0BBC4h
.text$mn:0000BBC4 ; COMDAT (pick any)
.text$mn:0000BBC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BBC4
.text$mn:0000BBC4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BBC4
.text$mn:0000BBC4 ; Attributes: bp-based frame
.text$mn:0000BBC4
.text$mn:0000BBC4 ; protected: void __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Reallocate(unsigned int)
.text$mn:0000BBC4                 public ?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BBC4 ?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000BBC4                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)+4Ep
.text$mn:0000BBC4
.text$mn:0000BBC4 var_20          = dword ptr -20h
.text$mn:0000BBC4 var_1C          = dword ptr -1Ch
.text$mn:0000BBC4 var_18          = dword ptr -18h
.text$mn:0000BBC4 var_13          = byte ptr -13h
.text$mn:0000BBC4 var_11          = byte ptr -11h
.text$mn:0000BBC4 var_10          = dword ptr -10h
.text$mn:0000BBC4 var_C           = dword ptr -0Ch
.text$mn:0000BBC4 var_4           = dword ptr -4
.text$mn:0000BBC4 arg_0           = dword ptr  8
.text$mn:0000BBC4
.text$mn:0000BBC4 ; FUNCTION CHUNK AT .text$mn:0000BC5A SIZE 00000009 BYTES
.text$mn:0000BBC4 ; FUNCTION CHUNK AT .text$mn:0000BC6A SIZE 00000097 BYTES
.text$mn:0000BBC4
.text$mn:0000BBC4                 push    ebp
.text$mn:0000BBC5                 mov     ebp, esp
.text$mn:0000BBC7                 push    0FFFFFFFFh
.text$mn:0000BBC9                 push    offset __ehhandler$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BBCE                 mov     eax, large fs:0
.text$mn:0000BBD4                 push    eax
.text$mn:0000BBD5                 push    ecx
.text$mn:0000BBD6                 sub     esp, 10h
.text$mn:0000BBD9                 push    ebx
.text$mn:0000BBDA                 push    esi
.text$mn:0000BBDB                 push    edi
.text$mn:0000BBDC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BBE1                 xor     eax, ebp
.text$mn:0000BBE3                 push    eax
.text$mn:0000BBE4                 lea     eax, [ebp+var_C]
.text$mn:0000BBE7                 mov     large fs:0, eax
.text$mn:0000BBED                 mov     [ebp+var_10], esp
.text$mn:0000BBF0                 mov     [ebp+var_18], ecx
.text$mn:0000BBF3                 mov     eax, [ebp+arg_0]
.text$mn:0000BBF6                 push    eax
.text$mn:0000BBF7                 lea     ecx, [ebp+var_11]
.text$mn:0000BBFA                 push    ecx
.text$mn:0000BBFB                 mov     ecx, [ebp+var_18]
.text$mn:0000BBFE                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:0000BC03                 mov     ecx, eax
.text$mn:0000BC05                 call    ?allocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEPAUfoundInfo@@I@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::allocate(uint)
.text$mn:0000BC0A                 mov     [ebp+var_1C], eax
.text$mn:0000BC0D                 mov     [ebp+var_4], 0
.text$mn:0000BC14                 mov     edx, [ebp+var_1C]
.text$mn:0000BC17                 push    edx
.text$mn:0000BC18                 mov     eax, [ebp+var_18]
.text$mn:0000BC1B                 mov     ecx, [eax+8]
.text$mn:0000BC1E                 push    ecx
.text$mn:0000BC1F                 mov     edx, [ebp+var_18]
.text$mn:0000BC22                 mov     eax, [edx+4]
.text$mn:0000BC25                 push    eax
.text$mn:0000BC26                 mov     ecx, [ebp+var_18]
.text$mn:0000BC29                 call    ??$_Umove@PAUfoundInfo@@@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEPAUfoundInfo@@PAU2@00@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Umove<foundInfo *>(foundInfo *,foundInfo *,foundInfo *)
.text$mn:0000BC2E                 jmp     short loc_BC5A
.text$mn:0000BC2E ?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z endp
.text$mn:0000BC2E
.text$mn:0000BC30
.text$mn:0000BC30 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BC30
.text$mn:0000BC30 ; Attributes: noreturn
.text$mn:0000BC30
.text$mn:0000BC30 __catch$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z$0 proc near
.text$mn:0000BC30                                         ; DATA XREF: .xdata$x:000103C8o
.text$mn:0000BC30                 mov     ecx, [ebp+8]
.text$mn:0000BC33                 push    ecx             ; int
.text$mn:0000BC34                 mov     edx, [ebp-1Ch]
.text$mn:0000BC37                 push    edx             ; void *
.text$mn:0000BC38                 lea     eax, [ebp-12h]
.text$mn:0000BC3B                 push    eax
.text$mn:0000BC3C                 mov     ecx, [ebp-18h]
.text$mn:0000BC3F                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:0000BC44                 mov     ecx, eax
.text$mn:0000BC46                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::deallocate(foundInfo *,uint)
.text$mn:0000BC4B                 push    0
.text$mn:0000BC4D                 push    0
.text$mn:0000BC4F                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000BC4F __catch$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z$0 endp
.text$mn:0000BC4F
.text$mn:0000BC54 ; ---------------------------------------------------------------------------
.text$mn:0000BC54                 mov     eax, offset $LN8_3
.text$mn:0000BC59                 retn
.text$mn:0000BC5A ; ---------------------------------------------------------------------------
.text$mn:0000BC5A ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BC5A
.text$mn:0000BC5A loc_BC5A:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+6Aj
.text$mn:0000BC5A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BC61                 jmp     short loc_BC6A
.text$mn:0000BC61 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BC63
.text$mn:0000BC63 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BC63
.text$mn:0000BC63
.text$mn:0000BC63 $LN8_3          proc near               ; DATA XREF: .text$mn:0000BC54o
.text$mn:0000BC63                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000BC63 $LN8_3          endp ; sp-analysis failed
.text$mn:0000BC63
.text$mn:0000BC6A ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BC6A
.text$mn:0000BC6A loc_BC6A:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+9Dj
.text$mn:0000BC6A                 mov     ecx, [ebp+var_18]
.text$mn:0000BC6D                 call    ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::size(void)
.text$mn:0000BC72                 mov     [ebp+var_20], eax
.text$mn:0000BC75                 mov     ecx, [ebp+var_18]
.text$mn:0000BC78                 cmp     dword ptr [ecx+4], 0
.text$mn:0000BC7C                 jz      short loc_BCBE
.text$mn:0000BC7E                 mov     edx, [ebp+var_18]
.text$mn:0000BC81                 mov     eax, [edx+8]
.text$mn:0000BC84                 push    eax
.text$mn:0000BC85                 mov     ecx, [ebp+var_18]
.text$mn:0000BC88                 mov     edx, [ecx+4]
.text$mn:0000BC8B                 push    edx
.text$mn:0000BC8C                 mov     ecx, [ebp+var_18]
.text$mn:0000BC8F                 call    ?_Destroy@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXPAUfoundInfo@@0@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Destroy(foundInfo *,foundInfo *)
.text$mn:0000BC94                 mov     eax, [ebp+var_18]
.text$mn:0000BC97                 mov     ecx, [ebp+var_18]
.text$mn:0000BC9A                 mov     edx, [eax+0Ch]
.text$mn:0000BC9D                 sub     edx, [ecx+4]
.text$mn:0000BCA0                 sar     edx, 6
.text$mn:0000BCA3                 push    edx             ; int
.text$mn:0000BCA4                 mov     eax, [ebp+var_18]
.text$mn:0000BCA7                 mov     ecx, [eax+4]
.text$mn:0000BCAA                 push    ecx             ; void *
.text$mn:0000BCAB                 lea     edx, [ebp+var_13]
.text$mn:0000BCAE                 push    edx
.text$mn:0000BCAF                 mov     ecx, [ebp+var_18]
.text$mn:0000BCB2                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:0000BCB7                 mov     ecx, eax
.text$mn:0000BCB9                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::deallocate(foundInfo *,uint)
.text$mn:0000BCBE
.text$mn:0000BCBE loc_BCBE:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+B8j
.text$mn:0000BCBE                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000BCC1                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000BCC6                 mov     eax, [ebp+arg_0]
.text$mn:0000BCC9                 shl     eax, 6
.text$mn:0000BCCC                 add     eax, [ebp+var_1C]
.text$mn:0000BCCF                 mov     ecx, [ebp+var_18]
.text$mn:0000BCD2                 mov     [ecx+0Ch], eax
.text$mn:0000BCD5                 mov     edx, [ebp+var_20]
.text$mn:0000BCD8                 shl     edx, 6
.text$mn:0000BCDB                 add     edx, [ebp+var_1C]
.text$mn:0000BCDE                 mov     eax, [ebp+var_18]
.text$mn:0000BCE1                 mov     [eax+8], edx
.text$mn:0000BCE4                 mov     ecx, [ebp+var_18]
.text$mn:0000BCE7                 mov     edx, [ebp+var_1C]
.text$mn:0000BCEA                 mov     [ecx+4], edx
.text$mn:0000BCED                 mov     ecx, [ebp+var_C]
.text$mn:0000BCF0                 mov     large fs:0, ecx
.text$mn:0000BCF7                 pop     ecx
.text$mn:0000BCF8                 pop     edi
.text$mn:0000BCF9                 pop     esi
.text$mn:0000BCFA                 pop     ebx
.text$mn:0000BCFB                 mov     esp, ebp
.text$mn:0000BCFD                 pop     ebp
.text$mn:0000BCFE                 retn    4
.text$mn:0000BCFE ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BCFE ; ---------------------------------------------------------------------------
.text$mn:0000BD01                 align 4
.text$mn:0000BD01 _text$mn        ends
.text$mn:0000BD01
.text$x:0000BD04 ; ===========================================================================
.text$x:0000BD04
.text$x:0000BD04 ; Segment type: Pure code
.text$x:0000BD04 ; Segment permissions: Read/Execute
.text$x:0000BD04 _text$x         segment para public 'CODE' use32
.text$x:0000BD04                 assume cs:_text$x
.text$x:0000BD04                 ;org 0BD04h
.text$x:0000BD04 ; COMDAT (pick associative to section at BBC4)
.text$x:0000BD04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BD04
.text$x:0000BD04 ; =============== S U B R O U T I N E =======================================
.text$x:0000BD04
.text$x:0000BD04
.text$x:0000BD04 __ehhandler$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z proc near
.text$x:0000BD04                                         ; DATA XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+5o
.text$x:0000BD04
.text$x:0000BD04 arg_4           = dword ptr  8
.text$x:0000BD04
.text$x:0000BD04                 mov     edx, [esp+arg_4]
.text$x:0000BD08                 lea     eax, [edx+0Ch]
.text$x:0000BD0B                 mov     ecx, [edx-24h]
.text$x:0000BD0E                 xor     ecx, eax
.text$x:0000BD10                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BD15                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.text$x:0000BD1A                 jmp     ___CxxFrameHandler3
.text$x:0000BD1A __ehhandler$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z endp
.text$x:0000BD1A
.text$x:0000BD1A ; ---------------------------------------------------------------------------
.text$x:0000BD1F                 align 10h
.text$x:0000BD1F _text$x         ends
.text$x:0000BD1F
.text$mn:0000BD20 ; ===========================================================================
.text$mn:0000BD20
.text$mn:0000BD20 ; Segment type: Pure code
.text$mn:0000BD20 ; Segment permissions: Read/Execute
.text$mn:0000BD20 _text$mn        segment para public 'CODE' use32
.text$mn:0000BD20                 assume cs:_text$mn
.text$mn:0000BD20                 ;org 0BD20h
.text$mn:0000BD20 ; COMDAT (pick any)
.text$mn:0000BD20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BD20
.text$mn:0000BD20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD20
.text$mn:0000BD20 ; Attributes: bp-based frame
.text$mn:0000BD20
.text$mn:0000BD20 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reallocate(unsigned int)
.text$mn:0000BD20                 public ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BD20 ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:0000BD20                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+4Ep
.text$mn:0000BD20
.text$mn:0000BD20 var_20          = dword ptr -20h
.text$mn:0000BD20 var_1C          = dword ptr -1Ch
.text$mn:0000BD20 var_18          = dword ptr -18h
.text$mn:0000BD20 var_13          = byte ptr -13h
.text$mn:0000BD20 var_11          = byte ptr -11h
.text$mn:0000BD20 var_10          = dword ptr -10h
.text$mn:0000BD20 var_C           = dword ptr -0Ch
.text$mn:0000BD20 var_4           = dword ptr -4
.text$mn:0000BD20 arg_0           = dword ptr  8
.text$mn:0000BD20
.text$mn:0000BD20 ; FUNCTION CHUNK AT .text$mn:0000BDB6 SIZE 00000009 BYTES
.text$mn:0000BD20 ; FUNCTION CHUNK AT .text$mn:0000BDC6 SIZE 00000098 BYTES
.text$mn:0000BD20
.text$mn:0000BD20                 push    ebp
.text$mn:0000BD21                 mov     ebp, esp
.text$mn:0000BD23                 push    0FFFFFFFFh
.text$mn:0000BD25                 push    offset __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BD2A                 mov     eax, large fs:0
.text$mn:0000BD30                 push    eax
.text$mn:0000BD31                 push    ecx
.text$mn:0000BD32                 sub     esp, 10h
.text$mn:0000BD35                 push    ebx
.text$mn:0000BD36                 push    esi
.text$mn:0000BD37                 push    edi
.text$mn:0000BD38                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000BD3D                 xor     eax, ebp
.text$mn:0000BD3F                 push    eax
.text$mn:0000BD40                 lea     eax, [ebp+var_C]
.text$mn:0000BD43                 mov     large fs:0, eax
.text$mn:0000BD49                 mov     [ebp+var_10], esp
.text$mn:0000BD4C                 mov     [ebp+var_18], ecx
.text$mn:0000BD4F                 mov     eax, [ebp+arg_0]
.text$mn:0000BD52                 push    eax
.text$mn:0000BD53                 lea     ecx, [ebp+var_11]
.text$mn:0000BD56                 push    ecx
.text$mn:0000BD57                 mov     ecx, [ebp+var_18]
.text$mn:0000BD5A                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000BD5F                 mov     ecx, eax
.text$mn:0000BD61                 call    ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)
.text$mn:0000BD66                 mov     [ebp+var_1C], eax
.text$mn:0000BD69                 mov     [ebp+var_4], 0
.text$mn:0000BD70                 mov     edx, [ebp+var_1C]
.text$mn:0000BD73                 push    edx
.text$mn:0000BD74                 mov     eax, [ebp+var_18]
.text$mn:0000BD77                 mov     ecx, [eax+8]
.text$mn:0000BD7A                 push    ecx
.text$mn:0000BD7B                 mov     edx, [ebp+var_18]
.text$mn:0000BD7E                 mov     eax, [edx+4]
.text$mn:0000BD81                 push    eax
.text$mn:0000BD82                 mov     ecx, [ebp+var_18]
.text$mn:0000BD85                 call    ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000BD8A                 jmp     short loc_BDB6
.text$mn:0000BD8A ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:0000BD8A
.text$mn:0000BD8C
.text$mn:0000BD8C ; =============== S U B R O U T I N E =======================================
.text$mn:0000BD8C
.text$mn:0000BD8C ; Attributes: noreturn
.text$mn:0000BD8C
.text$mn:0000BD8C __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 proc near
.text$mn:0000BD8C                                         ; DATA XREF: .xdata$x:0000F8B8o
.text$mn:0000BD8C                 mov     ecx, [ebp+8]
.text$mn:0000BD8F                 push    ecx             ; int
.text$mn:0000BD90                 mov     edx, [ebp-1Ch]
.text$mn:0000BD93                 push    edx             ; void *
.text$mn:0000BD94                 lea     eax, [ebp-12h]
.text$mn:0000BD97                 push    eax
.text$mn:0000BD98                 mov     ecx, [ebp-18h]
.text$mn:0000BD9B                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000BDA0                 mov     ecx, eax
.text$mn:0000BDA2                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000BDA7                 push    0
.text$mn:0000BDA9                 push    0
.text$mn:0000BDAB                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000BDAB __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 endp
.text$mn:0000BDAB
.text$mn:0000BDB0 ; ---------------------------------------------------------------------------
.text$mn:0000BDB0                 mov     eax, offset $LN8_0
.text$mn:0000BDB5                 retn
.text$mn:0000BDB6 ; ---------------------------------------------------------------------------
.text$mn:0000BDB6 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BDB6
.text$mn:0000BDB6 loc_BDB6:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+6Aj
.text$mn:0000BDB6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000BDBD                 jmp     short loc_BDC6
.text$mn:0000BDBD ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BDBF
.text$mn:0000BDBF ; =============== S U B R O U T I N E =======================================
.text$mn:0000BDBF
.text$mn:0000BDBF
.text$mn:0000BDBF $LN8_0          proc near               ; DATA XREF: .text$mn:0000BDB0o
.text$mn:0000BDBF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000BDBF $LN8_0          endp ; sp-analysis failed
.text$mn:0000BDBF
.text$mn:0000BDC6 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BDC6
.text$mn:0000BDC6 loc_BDC6:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+9Dj
.text$mn:0000BDC6                 mov     ecx, [ebp+var_18]
.text$mn:0000BDC9                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000BDCE                 mov     [ebp+var_20], eax
.text$mn:0000BDD1                 mov     ecx, [ebp+var_18]
.text$mn:0000BDD4                 cmp     dword ptr [ecx+4], 0
.text$mn:0000BDD8                 jz      short loc_BE1F
.text$mn:0000BDDA                 mov     edx, [ebp+var_18]
.text$mn:0000BDDD                 mov     eax, [edx+8]
.text$mn:0000BDE0                 push    eax
.text$mn:0000BDE1                 mov     ecx, [ebp+var_18]
.text$mn:0000BDE4                 mov     edx, [ecx+4]
.text$mn:0000BDE7                 push    edx
.text$mn:0000BDE8                 mov     ecx, [ebp+var_18]
.text$mn:0000BDEB                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000BDF0                 mov     eax, [ebp+var_18]
.text$mn:0000BDF3                 mov     ecx, [ebp+var_18]
.text$mn:0000BDF6                 mov     eax, [eax+0Ch]
.text$mn:0000BDF9                 sub     eax, [ecx+4]
.text$mn:0000BDFC                 cdq
.text$mn:0000BDFD                 mov     ecx, 1Ch
.text$mn:0000BE02                 idiv    ecx
.text$mn:0000BE04                 push    eax             ; int
.text$mn:0000BE05                 mov     edx, [ebp+var_18]
.text$mn:0000BE08                 mov     eax, [edx+4]
.text$mn:0000BE0B                 push    eax             ; void *
.text$mn:0000BE0C                 lea     ecx, [ebp+var_13]
.text$mn:0000BE0F                 push    ecx
.text$mn:0000BE10                 mov     ecx, [ebp+var_18]
.text$mn:0000BE13                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000BE18                 mov     ecx, eax
.text$mn:0000BE1A                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000BE1F
.text$mn:0000BE1F loc_BE1F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+B8j
.text$mn:0000BE1F                 mov     ecx, [ebp+var_18] ; this
.text$mn:0000BE22                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000BE27                 imul    edx, [ebp+arg_0], 1Ch
.text$mn:0000BE2B                 add     edx, [ebp+var_1C]
.text$mn:0000BE2E                 mov     eax, [ebp+var_18]
.text$mn:0000BE31                 mov     [eax+0Ch], edx
.text$mn:0000BE34                 imul    ecx, [ebp+var_20], 1Ch
.text$mn:0000BE38                 add     ecx, [ebp+var_1C]
.text$mn:0000BE3B                 mov     edx, [ebp+var_18]
.text$mn:0000BE3E                 mov     [edx+8], ecx
.text$mn:0000BE41                 mov     eax, [ebp+var_18]
.text$mn:0000BE44                 mov     ecx, [ebp+var_1C]
.text$mn:0000BE47                 mov     [eax+4], ecx
.text$mn:0000BE4A                 mov     ecx, [ebp+var_C]
.text$mn:0000BE4D                 mov     large fs:0, ecx
.text$mn:0000BE54                 pop     ecx
.text$mn:0000BE55                 pop     edi
.text$mn:0000BE56                 pop     esi
.text$mn:0000BE57                 pop     ebx
.text$mn:0000BE58                 mov     esp, ebp
.text$mn:0000BE5A                 pop     ebp
.text$mn:0000BE5B                 retn    4
.text$mn:0000BE5B ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BE5B ; ---------------------------------------------------------------------------
.text$mn:0000BE5E                 align 10h
.text$mn:0000BE5E _text$mn        ends
.text$mn:0000BE5E
.text$x:0000BE60 ; ===========================================================================
.text$x:0000BE60
.text$x:0000BE60 ; Segment type: Pure code
.text$x:0000BE60 ; Segment permissions: Read/Execute
.text$x:0000BE60 _text$x         segment para public 'CODE' use32
.text$x:0000BE60                 assume cs:_text$x
.text$x:0000BE60                 ;org 0BE60h
.text$x:0000BE60 ; COMDAT (pick associative to section at BD20)
.text$x:0000BE60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000BE60
.text$x:0000BE60 ; =============== S U B R O U T I N E =======================================
.text$x:0000BE60
.text$x:0000BE60
.text$x:0000BE60 __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$x:0000BE60                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+5o
.text$x:0000BE60
.text$x:0000BE60 arg_4           = dword ptr  8
.text$x:0000BE60
.text$x:0000BE60                 mov     edx, [esp+arg_4]
.text$x:0000BE64                 lea     eax, [edx+0Ch]
.text$x:0000BE67                 mov     ecx, [edx-24h]
.text$x:0000BE6A                 xor     ecx, eax
.text$x:0000BE6C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000BE71                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$x:0000BE76                 jmp     ___CxxFrameHandler3
.text$x:0000BE76 __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$x:0000BE76
.text$x:0000BE76 ; ---------------------------------------------------------------------------
.text$x:0000BE7B                 align 4
.text$x:0000BE7B _text$x         ends
.text$x:0000BE7B
.text$mn:0000BE7C ; ===========================================================================
.text$mn:0000BE7C
.text$mn:0000BE7C ; Segment type: Pure code
.text$mn:0000BE7C ; Segment permissions: Read/Execute
.text$mn:0000BE7C _text$mn        segment para public 'CODE' use32
.text$mn:0000BE7C                 assume cs:_text$mn
.text$mn:0000BE7C                 ;org 0BE7Ch
.text$mn:0000BE7C ; COMDAT (pick any)
.text$mn:0000BE7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BE7C
.text$mn:0000BE7C ; =============== S U B R O U T I N E =======================================
.text$mn:0000BE7C
.text$mn:0000BE7C ; Attributes: bp-based frame
.text$mn:0000BE7C
.text$mn:0000BE7C ; protected: void __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Reserve(unsigned int)
.text$mn:0000BE7C                 public ?_Reserve@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.text$mn:0000BE7C ?_Reserve@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000BE7C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+54p
.text$mn:0000BE7C                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+C3p
.text$mn:0000BE7C
.text$mn:0000BE7C var_4           = dword ptr -4
.text$mn:0000BE7C arg_0           = dword ptr  8
.text$mn:0000BE7C
.text$mn:0000BE7C                 push    ebp
.text$mn:0000BE7D                 mov     ebp, esp
.text$mn:0000BE7F                 push    ecx
.text$mn:0000BE80                 push    esi
.text$mn:0000BE81                 mov     [ebp+var_4], ecx
.text$mn:0000BE84                 mov     ecx, [ebp+var_4]
.text$mn:0000BE87                 call    ?_Unused_capacity@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Unused_capacity(void)
.text$mn:0000BE8C                 cmp     eax, [ebp+arg_0]
.text$mn:0000BE8F                 jnb     short loc_BECF
.text$mn:0000BE91                 mov     ecx, [ebp+var_4]
.text$mn:0000BE94                 call    ?max_size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::max_size(void)
.text$mn:0000BE99                 mov     esi, eax
.text$mn:0000BE9B                 mov     ecx, [ebp+var_4]
.text$mn:0000BE9E                 call    ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::size(void)
.text$mn:0000BEA3                 sub     esi, eax
.text$mn:0000BEA5                 cmp     esi, [ebp+arg_0]
.text$mn:0000BEA8                 jnb     short loc_BEB2
.text$mn:0000BEAA                 mov     ecx, [ebp+var_4]
.text$mn:0000BEAD                 call    ?_Xlen@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Xlen(void)
.text$mn:0000BEB2
.text$mn:0000BEB2 loc_BEB2:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)+2Cj
.text$mn:0000BEB2                 mov     ecx, [ebp+var_4]
.text$mn:0000BEB5                 call    ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::size(void)
.text$mn:0000BEBA                 add     eax, [ebp+arg_0]
.text$mn:0000BEBD                 push    eax
.text$mn:0000BEBE                 mov     ecx, [ebp+var_4]
.text$mn:0000BEC1                 call    ?_Grow_to@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEII@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Grow_to(uint)
.text$mn:0000BEC6                 push    eax
.text$mn:0000BEC7                 mov     ecx, [ebp+var_4]
.text$mn:0000BECA                 call    ?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)
.text$mn:0000BECF
.text$mn:0000BECF loc_BECF:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)+13j
.text$mn:0000BECF                 pop     esi
.text$mn:0000BED0                 mov     esp, ebp
.text$mn:0000BED2                 pop     ebp
.text$mn:0000BED3                 retn    4
.text$mn:0000BED3 ?_Reserve@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z endp
.text$mn:0000BED3
.text$mn:0000BED3 ; ---------------------------------------------------------------------------
.text$mn:0000BED6                 align 4
.text$mn:0000BED6 _text$mn        ends
.text$mn:0000BED6
.text$mn:0000BED8 ; ===========================================================================
.text$mn:0000BED8
.text$mn:0000BED8 ; Segment type: Pure code
.text$mn:0000BED8 ; Segment permissions: Read/Execute
.text$mn:0000BED8 _text$mn        segment para public 'CODE' use32
.text$mn:0000BED8                 assume cs:_text$mn
.text$mn:0000BED8                 ;org 0BED8h
.text$mn:0000BED8 ; COMDAT (pick any)
.text$mn:0000BED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BED8
.text$mn:0000BED8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BED8
.text$mn:0000BED8 ; Attributes: bp-based frame
.text$mn:0000BED8
.text$mn:0000BED8 ; protected: void __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Reserve(unsigned int)
.text$mn:0000BED8                 public ?_Reserve@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.text$mn:0000BED8 ?_Reserve@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z proc near
.text$mn:0000BED8                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+54p
.text$mn:0000BED8                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+C3p
.text$mn:0000BED8
.text$mn:0000BED8 var_4           = dword ptr -4
.text$mn:0000BED8 arg_0           = dword ptr  8
.text$mn:0000BED8
.text$mn:0000BED8                 push    ebp
.text$mn:0000BED9                 mov     ebp, esp
.text$mn:0000BEDB                 push    ecx
.text$mn:0000BEDC                 push    esi
.text$mn:0000BEDD                 mov     [ebp+var_4], ecx
.text$mn:0000BEE0                 mov     ecx, [ebp+var_4]
.text$mn:0000BEE3                 call    ?_Unused_capacity@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Unused_capacity(void)
.text$mn:0000BEE8                 cmp     eax, [ebp+arg_0]
.text$mn:0000BEEB                 jnb     short loc_BF2B
.text$mn:0000BEED                 mov     ecx, [ebp+var_4]
.text$mn:0000BEF0                 call    ?max_size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::max_size(void)
.text$mn:0000BEF5                 mov     esi, eax
.text$mn:0000BEF7                 mov     ecx, [ebp+var_4]
.text$mn:0000BEFA                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:0000BEFF                 sub     esi, eax
.text$mn:0000BF01                 cmp     esi, [ebp+arg_0]
.text$mn:0000BF04                 jnb     short loc_BF0E
.text$mn:0000BF06                 mov     ecx, [ebp+var_4]
.text$mn:0000BF09                 call    ?_Xlen@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Xlen(void)
.text$mn:0000BF0E
.text$mn:0000BF0E loc_BF0E:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)+2Cj
.text$mn:0000BF0E                 mov     ecx, [ebp+var_4]
.text$mn:0000BF11                 call    ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::size(void)
.text$mn:0000BF16                 add     eax, [ebp+arg_0]
.text$mn:0000BF19                 push    eax
.text$mn:0000BF1A                 mov     ecx, [ebp+var_4]
.text$mn:0000BF1D                 call    ?_Grow_to@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEII@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Grow_to(uint)
.text$mn:0000BF22                 push    eax
.text$mn:0000BF23                 mov     ecx, [ebp+var_4]
.text$mn:0000BF26                 call    ?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)
.text$mn:0000BF2B
.text$mn:0000BF2B loc_BF2B:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)+13j
.text$mn:0000BF2B                 pop     esi
.text$mn:0000BF2C                 mov     esp, ebp
.text$mn:0000BF2E                 pop     ebp
.text$mn:0000BF2F                 retn    4
.text$mn:0000BF2F ?_Reserve@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z endp
.text$mn:0000BF2F
.text$mn:0000BF2F ; ---------------------------------------------------------------------------
.text$mn:0000BF32                 align 4
.text$mn:0000BF32 _text$mn        ends
.text$mn:0000BF32
.text$mn:0000BF34 ; ===========================================================================
.text$mn:0000BF34
.text$mn:0000BF34 ; Segment type: Pure code
.text$mn:0000BF34 ; Segment permissions: Read/Execute
.text$mn:0000BF34 _text$mn        segment para public 'CODE' use32
.text$mn:0000BF34                 assume cs:_text$mn
.text$mn:0000BF34                 ;org 0BF34h
.text$mn:0000BF34 ; COMDAT (pick any)
.text$mn:0000BF34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BF34
.text$mn:0000BF34 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BF34
.text$mn:0000BF34 ; Attributes: bp-based frame
.text$mn:0000BF34
.text$mn:0000BF34 ; protected: void __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Reserve(unsigned int)
.text$mn:0000BF34                 public ?_Reserve@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BF34 ?_Reserve@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000BF34                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+54p
.text$mn:0000BF34                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+C3p
.text$mn:0000BF34
.text$mn:0000BF34 var_4           = dword ptr -4
.text$mn:0000BF34 arg_0           = dword ptr  8
.text$mn:0000BF34
.text$mn:0000BF34                 push    ebp
.text$mn:0000BF35                 mov     ebp, esp
.text$mn:0000BF37                 push    ecx
.text$mn:0000BF38                 push    esi
.text$mn:0000BF39                 mov     [ebp+var_4], ecx
.text$mn:0000BF3C                 mov     ecx, [ebp+var_4]
.text$mn:0000BF3F                 call    ?_Unused_capacity@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Unused_capacity(void)
.text$mn:0000BF44                 cmp     eax, [ebp+arg_0]
.text$mn:0000BF47                 jnb     short loc_BF87
.text$mn:0000BF49                 mov     ecx, [ebp+var_4]
.text$mn:0000BF4C                 call    ?max_size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::max_size(void)
.text$mn:0000BF51                 mov     esi, eax
.text$mn:0000BF53                 mov     ecx, [ebp+var_4]
.text$mn:0000BF56                 call    ?size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::size(void)
.text$mn:0000BF5B                 sub     esi, eax
.text$mn:0000BF5D                 cmp     esi, [ebp+arg_0]
.text$mn:0000BF60                 jnb     short loc_BF6A
.text$mn:0000BF62                 mov     ecx, [ebp+var_4]
.text$mn:0000BF65                 call    ?_Xlen@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Xlen(void)
.text$mn:0000BF6A
.text$mn:0000BF6A loc_BF6A:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)+2Cj
.text$mn:0000BF6A                 mov     ecx, [ebp+var_4]
.text$mn:0000BF6D                 call    ?size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::size(void)
.text$mn:0000BF72                 add     eax, [ebp+arg_0]
.text$mn:0000BF75                 push    eax
.text$mn:0000BF76                 mov     ecx, [ebp+var_4]
.text$mn:0000BF79                 call    ?_Grow_to@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEII@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Grow_to(uint)
.text$mn:0000BF7E                 push    eax
.text$mn:0000BF7F                 mov     ecx, [ebp+var_4]
.text$mn:0000BF82                 call    ?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)
.text$mn:0000BF87
.text$mn:0000BF87 loc_BF87:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)+13j
.text$mn:0000BF87                 pop     esi
.text$mn:0000BF88                 mov     esp, ebp
.text$mn:0000BF8A                 pop     ebp
.text$mn:0000BF8B                 retn    4
.text$mn:0000BF8B ?_Reserve@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z endp
.text$mn:0000BF8B
.text$mn:0000BF8B ; ---------------------------------------------------------------------------
.text$mn:0000BF8E                 align 10h
.text$mn:0000BF8E _text$mn        ends
.text$mn:0000BF8E
.text$mn:0000BF90 ; ===========================================================================
.text$mn:0000BF90
.text$mn:0000BF90 ; Segment type: Pure code
.text$mn:0000BF90 ; Segment permissions: Read/Execute
.text$mn:0000BF90 _text$mn        segment para public 'CODE' use32
.text$mn:0000BF90                 assume cs:_text$mn
.text$mn:0000BF90                 ;org 0BF90h
.text$mn:0000BF90 ; COMDAT (pick any)
.text$mn:0000BF90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BF90
.text$mn:0000BF90 ; =============== S U B R O U T I N E =======================================
.text$mn:0000BF90
.text$mn:0000BF90 ; Attributes: bp-based frame
.text$mn:0000BF90
.text$mn:0000BF90 ; protected: void __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Reserve(unsigned int)
.text$mn:0000BF90                 public ?_Reserve@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.text$mn:0000BF90 ?_Reserve@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000BF90                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+50p
.text$mn:0000BF90                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+B6p
.text$mn:0000BF90
.text$mn:0000BF90 var_4           = dword ptr -4
.text$mn:0000BF90 arg_0           = dword ptr  8
.text$mn:0000BF90
.text$mn:0000BF90                 push    ebp
.text$mn:0000BF91                 mov     ebp, esp
.text$mn:0000BF93                 push    ecx
.text$mn:0000BF94                 push    esi
.text$mn:0000BF95                 mov     [ebp+var_4], ecx
.text$mn:0000BF98                 mov     ecx, [ebp+var_4]
.text$mn:0000BF9B                 call    ?_Unused_capacity@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::_Unused_capacity(void)
.text$mn:0000BFA0                 cmp     eax, [ebp+arg_0]
.text$mn:0000BFA3                 jnb     short loc_BFE3
.text$mn:0000BFA5                 mov     ecx, [ebp+var_4]
.text$mn:0000BFA8                 call    ?max_size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::max_size(void)
.text$mn:0000BFAD                 mov     esi, eax
.text$mn:0000BFAF                 mov     ecx, [ebp+var_4]
.text$mn:0000BFB2                 call    ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::size(void)
.text$mn:0000BFB7                 sub     esi, eax
.text$mn:0000BFB9                 cmp     esi, [ebp+arg_0]
.text$mn:0000BFBC                 jnb     short loc_BFC6
.text$mn:0000BFBE                 mov     ecx, [ebp+var_4]
.text$mn:0000BFC1                 call    ?_Xlen@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::_Xlen(void)
.text$mn:0000BFC6
.text$mn:0000BFC6 loc_BFC6:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)+2Cj
.text$mn:0000BFC6                 mov     ecx, [ebp+var_4]
.text$mn:0000BFC9                 call    ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::vector<foundInfo,std::allocator<foundInfo>>::size(void)
.text$mn:0000BFCE                 add     eax, [ebp+arg_0]
.text$mn:0000BFD1                 push    eax
.text$mn:0000BFD2                 mov     ecx, [ebp+var_4]
.text$mn:0000BFD5                 call    ?_Grow_to@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEII@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Grow_to(uint)
.text$mn:0000BFDA                 push    eax
.text$mn:0000BFDB                 mov     ecx, [ebp+var_4]
.text$mn:0000BFDE                 call    ?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)
.text$mn:0000BFE3
.text$mn:0000BFE3 loc_BFE3:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)+13j
.text$mn:0000BFE3                 pop     esi
.text$mn:0000BFE4                 mov     esp, ebp
.text$mn:0000BFE6                 pop     ebp
.text$mn:0000BFE7                 retn    4
.text$mn:0000BFE7 ?_Reserve@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z endp
.text$mn:0000BFE7
.text$mn:0000BFE7 ; ---------------------------------------------------------------------------
.text$mn:0000BFEA                 align 4
.text$mn:0000BFEA _text$mn        ends
.text$mn:0000BFEA
.text$mn:0000BFEC ; ===========================================================================
.text$mn:0000BFEC
.text$mn:0000BFEC ; Segment type: Pure code
.text$mn:0000BFEC ; Segment permissions: Read/Execute
.text$mn:0000BFEC _text$mn        segment para public 'CODE' use32
.text$mn:0000BFEC                 assume cs:_text$mn
.text$mn:0000BFEC                 ;org 0BFECh
.text$mn:0000BFEC ; COMDAT (pick any)
.text$mn:0000BFEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000BFEC
.text$mn:0000BFEC ; =============== S U B R O U T I N E =======================================
.text$mn:0000BFEC
.text$mn:0000BFEC ; Attributes: bp-based frame
.text$mn:0000BFEC
.text$mn:0000BFEC ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reserve(unsigned int)
.text$mn:0000BFEC                 public ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:0000BFEC ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:0000BFEC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+59p
.text$mn:0000BFEC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+C6p
.text$mn:0000BFEC
.text$mn:0000BFEC var_4           = dword ptr -4
.text$mn:0000BFEC arg_0           = dword ptr  8
.text$mn:0000BFEC
.text$mn:0000BFEC                 push    ebp
.text$mn:0000BFED                 mov     ebp, esp
.text$mn:0000BFEF                 push    ecx
.text$mn:0000BFF0                 push    esi
.text$mn:0000BFF1                 mov     [ebp+var_4], ecx
.text$mn:0000BFF4                 mov     ecx, [ebp+var_4]
.text$mn:0000BFF7                 call    ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Unused_capacity(void)
.text$mn:0000BFFC                 cmp     eax, [ebp+arg_0]
.text$mn:0000BFFF                 jnb     short loc_C03F
.text$mn:0000C001                 mov     ecx, [ebp+var_4]
.text$mn:0000C004                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000C009                 mov     esi, eax
.text$mn:0000C00B                 mov     ecx, [ebp+var_4]
.text$mn:0000C00E                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000C013                 sub     esi, eax
.text$mn:0000C015                 cmp     esi, [ebp+arg_0]
.text$mn:0000C018                 jnb     short loc_C022
.text$mn:0000C01A                 mov     ecx, [ebp+var_4]
.text$mn:0000C01D                 call    ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)
.text$mn:0000C022
.text$mn:0000C022 loc_C022:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+2Cj
.text$mn:0000C022                 mov     ecx, [ebp+var_4]
.text$mn:0000C025                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000C02A                 add     eax, [ebp+arg_0]
.text$mn:0000C02D                 push    eax
.text$mn:0000C02E                 mov     ecx, [ebp+var_4]
.text$mn:0000C031                 call    ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)
.text$mn:0000C036                 push    eax
.text$mn:0000C037                 mov     ecx, [ebp+var_4]
.text$mn:0000C03A                 call    ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)
.text$mn:0000C03F
.text$mn:0000C03F loc_C03F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+13j
.text$mn:0000C03F                 pop     esi
.text$mn:0000C040                 mov     esp, ebp
.text$mn:0000C042                 pop     ebp
.text$mn:0000C043                 retn    4
.text$mn:0000C043 ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:0000C043
.text$mn:0000C043 ; ---------------------------------------------------------------------------
.text$mn:0000C046                 align 4
.text$mn:0000C046 _text$mn        ends
.text$mn:0000C046
.text$mn:0000C048 ; ===========================================================================
.text$mn:0000C048
.text$mn:0000C048 ; Segment type: Pure code
.text$mn:0000C048 ; Segment permissions: Read/Execute
.text$mn:0000C048 _text$mn        segment para public 'CODE' use32
.text$mn:0000C048                 assume cs:_text$mn
.text$mn:0000C048                 ;org 0C048h
.text$mn:0000C048 ; COMDAT (pick any)
.text$mn:0000C048                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C048
.text$mn:0000C048 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C048
.text$mn:0000C048 ; Attributes: bp-based frame
.text$mn:0000C048
.text$mn:0000C048 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:0000C048                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:0000C048 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:0000C048                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:0000C048                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:0000C048
.text$mn:0000C048 var_C           = dword ptr -0Ch
.text$mn:0000C048 var_8           = dword ptr -8
.text$mn:0000C048 var_2           = byte ptr -2
.text$mn:0000C048 var_1           = byte ptr -1
.text$mn:0000C048 arg_0           = byte ptr  8
.text$mn:0000C048 Size            = dword ptr  0Ch
.text$mn:0000C048
.text$mn:0000C048                 push    ebp
.text$mn:0000C049                 mov     ebp, esp
.text$mn:0000C04B                 sub     esp, 0Ch
.text$mn:0000C04E                 mov     [ebp+var_8], ecx
.text$mn:0000C051                 movzx   eax, [ebp+arg_0]
.text$mn:0000C055                 test    eax, eax
.text$mn:0000C057                 jnz     short loc_C05B
.text$mn:0000C059                 jmp     short loc_C0CE
.text$mn:0000C05B ; ---------------------------------------------------------------------------
.text$mn:0000C05B
.text$mn:0000C05B loc_C05B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:0000C05B                 mov     ecx, [ebp+var_8]
.text$mn:0000C05E                 cmp     dword ptr [ecx+18h], 10h
.text$mn:0000C062                 jb      short loc_C0CE
.text$mn:0000C064                 mov     edx, [ebp+var_8]
.text$mn:0000C067                 mov     eax, [edx+4]
.text$mn:0000C06A                 mov     [ebp+var_C], eax
.text$mn:0000C06D                 mov     ecx, [ebp+var_8]
.text$mn:0000C070                 add     ecx, 4
.text$mn:0000C073                 push    ecx
.text$mn:0000C074                 lea     edx, [ebp+var_1]
.text$mn:0000C077                 push    edx
.text$mn:0000C078                 mov     ecx, [ebp+var_8]
.text$mn:0000C07B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000C080                 mov     ecx, eax
.text$mn:0000C082                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:0000C087                 cmp     [ebp+Size], 0
.text$mn:0000C08B                 jbe     short loc_C0AD
.text$mn:0000C08D                 mov     eax, [ebp+Size]
.text$mn:0000C090                 push    eax             ; Size
.text$mn:0000C091                 mov     ecx, [ebp+var_C]
.text$mn:0000C094                 push    ecx
.text$mn:0000C095                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:0000C09A                 add     esp, 4
.text$mn:0000C09D                 push    eax             ; Src
.text$mn:0000C09E                 mov     edx, [ebp+var_8]
.text$mn:0000C0A1                 add     edx, 4
.text$mn:0000C0A4                 push    edx             ; Dst
.text$mn:0000C0A5                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000C0AA                 add     esp, 0Ch
.text$mn:0000C0AD
.text$mn:0000C0AD loc_C0AD:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:0000C0AD                 mov     eax, [ebp+var_8]
.text$mn:0000C0B0                 mov     ecx, [eax+18h]
.text$mn:0000C0B3                 add     ecx, 1
.text$mn:0000C0B6                 push    ecx             ; int
.text$mn:0000C0B7                 mov     edx, [ebp+var_C]
.text$mn:0000C0BA                 push    edx             ; void *
.text$mn:0000C0BB                 lea     eax, [ebp+var_2]
.text$mn:0000C0BE                 push    eax
.text$mn:0000C0BF                 mov     ecx, [ebp+var_8]
.text$mn:0000C0C2                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000C0C7                 mov     ecx, eax
.text$mn:0000C0C9                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:0000C0CE
.text$mn:0000C0CE loc_C0CE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:0000C0CE                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:0000C0CE                 mov     ecx, [ebp+var_8]
.text$mn:0000C0D1                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:0000C0D8                 mov     edx, [ebp+Size]
.text$mn:0000C0DB                 push    edx
.text$mn:0000C0DC                 mov     ecx, [ebp+var_8]
.text$mn:0000C0DF                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000C0E4                 mov     esp, ebp
.text$mn:0000C0E6                 pop     ebp
.text$mn:0000C0E7                 retn    8
.text$mn:0000C0E7 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:0000C0E7
.text$mn:0000C0E7 ; ---------------------------------------------------------------------------
.text$mn:0000C0EA                 align 4
.text$mn:0000C0EA _text$mn        ends
.text$mn:0000C0EA
.text$mn:0000C0EC ; ===========================================================================
.text$mn:0000C0EC
.text$mn:0000C0EC ; Segment type: Pure code
.text$mn:0000C0EC ; Segment permissions: Read/Execute
.text$mn:0000C0EC _text$mn        segment para public 'CODE' use32
.text$mn:0000C0EC                 assume cs:_text$mn
.text$mn:0000C0EC                 ;org 0C0ECh
.text$mn:0000C0EC ; COMDAT (pick any)
.text$mn:0000C0EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C0EC
.text$mn:0000C0EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C0EC
.text$mn:0000C0EC ; Attributes: bp-based frame
.text$mn:0000C0EC
.text$mn:0000C0EC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:0000C0EC                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:0000C0EC ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:0000C0EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Bp
.text$mn:0000C0EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p ...
.text$mn:0000C0EC
.text$mn:0000C0EC var_C           = dword ptr -0Ch
.text$mn:0000C0EC var_8           = dword ptr -8
.text$mn:0000C0EC var_2           = byte ptr -2
.text$mn:0000C0EC var_1           = byte ptr -1
.text$mn:0000C0EC arg_0           = byte ptr  8
.text$mn:0000C0EC arg_4           = dword ptr  0Ch
.text$mn:0000C0EC
.text$mn:0000C0EC                 push    ebp
.text$mn:0000C0ED                 mov     ebp, esp
.text$mn:0000C0EF                 sub     esp, 0Ch
.text$mn:0000C0F2                 mov     [ebp+var_8], ecx
.text$mn:0000C0F5                 movzx   eax, [ebp+arg_0]
.text$mn:0000C0F9                 test    eax, eax
.text$mn:0000C0FB                 jnz     short loc_C0FF
.text$mn:0000C0FD                 jmp     short loc_C172
.text$mn:0000C0FF ; ---------------------------------------------------------------------------
.text$mn:0000C0FF
.text$mn:0000C0FF loc_C0FF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:0000C0FF                 mov     ecx, [ebp+var_8]
.text$mn:0000C102                 cmp     dword ptr [ecx+18h], 8
.text$mn:0000C106                 jb      short loc_C172
.text$mn:0000C108                 mov     edx, [ebp+var_8]
.text$mn:0000C10B                 mov     eax, [edx+4]
.text$mn:0000C10E                 mov     [ebp+var_C], eax
.text$mn:0000C111                 mov     ecx, [ebp+var_8]
.text$mn:0000C114                 add     ecx, 4
.text$mn:0000C117                 push    ecx
.text$mn:0000C118                 lea     edx, [ebp+var_1]
.text$mn:0000C11B                 push    edx
.text$mn:0000C11C                 mov     ecx, [ebp+var_8]
.text$mn:0000C11F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000C124                 mov     ecx, eax
.text$mn:0000C126                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000C12B                 cmp     [ebp+arg_4], 0
.text$mn:0000C12F                 jbe     short loc_C151
.text$mn:0000C131                 mov     eax, [ebp+arg_4]
.text$mn:0000C134                 push    eax             ; int
.text$mn:0000C135                 mov     ecx, [ebp+var_C]
.text$mn:0000C138                 push    ecx
.text$mn:0000C139                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000C13E                 add     esp, 4
.text$mn:0000C141                 push    eax             ; Src
.text$mn:0000C142                 mov     edx, [ebp+var_8]
.text$mn:0000C145                 add     edx, 4
.text$mn:0000C148                 push    edx             ; Dst
.text$mn:0000C149                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C14E                 add     esp, 0Ch
.text$mn:0000C151
.text$mn:0000C151 loc_C151:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:0000C151                 mov     eax, [ebp+var_8]
.text$mn:0000C154                 mov     ecx, [eax+18h]
.text$mn:0000C157                 add     ecx, 1
.text$mn:0000C15A                 push    ecx             ; int
.text$mn:0000C15B                 mov     edx, [ebp+var_C]
.text$mn:0000C15E                 push    edx             ; void *
.text$mn:0000C15F                 lea     eax, [ebp+var_2]
.text$mn:0000C162                 push    eax
.text$mn:0000C163                 mov     ecx, [ebp+var_8]
.text$mn:0000C166                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000C16B                 mov     ecx, eax
.text$mn:0000C16D                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:0000C172
.text$mn:0000C172 loc_C172:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:0000C172                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:0000C172                 mov     ecx, [ebp+var_8]
.text$mn:0000C175                 mov     dword ptr [ecx+18h], 7
.text$mn:0000C17C                 mov     edx, [ebp+arg_4]
.text$mn:0000C17F                 push    edx
.text$mn:0000C180                 mov     ecx, [ebp+var_8]
.text$mn:0000C183                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000C188                 mov     esp, ebp
.text$mn:0000C18A                 pop     ebp
.text$mn:0000C18B                 retn    8
.text$mn:0000C18B ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:0000C18B
.text$mn:0000C18B ; ---------------------------------------------------------------------------
.text$mn:0000C18E                 align 10h
.text$mn:0000C18E _text$mn        ends
.text$mn:0000C18E
.text$mn:0000C190 ; ===========================================================================
.text$mn:0000C190
.text$mn:0000C190 ; Segment type: Pure code
.text$mn:0000C190 ; Segment permissions: Read/Execute
.text$mn:0000C190 _text$mn        segment para public 'CODE' use32
.text$mn:0000C190                 assume cs:_text$mn
.text$mn:0000C190                 ;org 0C190h
.text$mn:0000C190 ; COMDAT (pick any)
.text$mn:0000C190                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C190
.text$mn:0000C190 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C190
.text$mn:0000C190 ; Attributes: bp-based frame
.text$mn:0000C190
.text$mn:0000C190 ; protected: void __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Tidy(void)
.text$mn:0000C190                 public ?_Tidy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXXZ
.text$mn:0000C190 ?_Tidy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXXZ proc near
.text$mn:0000C190                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::~vector<FunctionParser *,std::allocator<FunctionParser *>>(void)+30p
.text$mn:0000C190
.text$mn:0000C190 var_8           = dword ptr -8
.text$mn:0000C190 var_1           = byte ptr -1
.text$mn:0000C190
.text$mn:0000C190                 push    ebp
.text$mn:0000C191                 mov     ebp, esp
.text$mn:0000C193                 sub     esp, 8
.text$mn:0000C196                 mov     [ebp+var_8], ecx
.text$mn:0000C199                 mov     eax, [ebp+var_8]
.text$mn:0000C19C                 cmp     dword ptr [eax+4], 0
.text$mn:0000C1A0                 jz      short loc_C208
.text$mn:0000C1A2                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000C1A5                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000C1AA                 mov     ecx, [ebp+var_8]
.text$mn:0000C1AD                 mov     edx, [ecx+8]
.text$mn:0000C1B0                 push    edx
.text$mn:0000C1B1                 mov     eax, [ebp+var_8]
.text$mn:0000C1B4                 mov     ecx, [eax+4]
.text$mn:0000C1B7                 push    ecx
.text$mn:0000C1B8                 mov     ecx, [ebp+var_8]
.text$mn:0000C1BB                 call    ?_Destroy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXPAPAVFunctionParser@@0@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Destroy(FunctionParser * *,FunctionParser * *)
.text$mn:0000C1C0                 mov     edx, [ebp+var_8]
.text$mn:0000C1C3                 mov     eax, [ebp+var_8]
.text$mn:0000C1C6                 mov     ecx, [edx+0Ch]
.text$mn:0000C1C9                 sub     ecx, [eax+4]
.text$mn:0000C1CC                 sar     ecx, 2
.text$mn:0000C1CF                 push    ecx             ; int
.text$mn:0000C1D0                 mov     edx, [ebp+var_8]
.text$mn:0000C1D3                 mov     eax, [edx+4]
.text$mn:0000C1D6                 push    eax             ; void *
.text$mn:0000C1D7                 lea     ecx, [ebp+var_1]
.text$mn:0000C1DA                 push    ecx
.text$mn:0000C1DB                 mov     ecx, [ebp+var_8]
.text$mn:0000C1DE                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:0000C1E3                 mov     ecx, eax
.text$mn:0000C1E5                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@I@Z ; std::_Wrap_alloc<std::allocator<FunctionParser *>>::deallocate(FunctionParser * *,uint)
.text$mn:0000C1EA                 mov     edx, [ebp+var_8]
.text$mn:0000C1ED                 mov     dword ptr [edx+4], 0
.text$mn:0000C1F4                 mov     eax, [ebp+var_8]
.text$mn:0000C1F7                 mov     dword ptr [eax+8], 0
.text$mn:0000C1FE                 mov     ecx, [ebp+var_8]
.text$mn:0000C201                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000C208
.text$mn:0000C208 loc_C208:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Tidy(void)+10j
.text$mn:0000C208                 mov     esp, ebp
.text$mn:0000C20A                 pop     ebp
.text$mn:0000C20B                 retn
.text$mn:0000C20B ?_Tidy@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXXZ endp
.text$mn:0000C20B
.text$mn:0000C20B _text$mn        ends
.text$mn:0000C20B
.text$mn:0000C20C ; ===========================================================================
.text$mn:0000C20C
.text$mn:0000C20C ; Segment type: Pure code
.text$mn:0000C20C ; Segment permissions: Read/Execute
.text$mn:0000C20C _text$mn        segment para public 'CODE' use32
.text$mn:0000C20C                 assume cs:_text$mn
.text$mn:0000C20C                 ;org 0C20Ch
.text$mn:0000C20C ; COMDAT (pick any)
.text$mn:0000C20C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C20C
.text$mn:0000C20C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C20C
.text$mn:0000C20C ; Attributes: bp-based frame
.text$mn:0000C20C
.text$mn:0000C20C ; protected: void __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Tidy(void)
.text$mn:0000C20C                 public ?_Tidy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXXZ
.text$mn:0000C20C ?_Tidy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXXZ proc near
.text$mn:0000C20C                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::~vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>(void)+30p
.text$mn:0000C20C
.text$mn:0000C20C var_8           = dword ptr -8
.text$mn:0000C20C var_1           = byte ptr -1
.text$mn:0000C20C
.text$mn:0000C20C                 push    ebp
.text$mn:0000C20D                 mov     ebp, esp
.text$mn:0000C20F                 sub     esp, 8
.text$mn:0000C212                 mov     [ebp+var_8], ecx
.text$mn:0000C215                 mov     eax, [ebp+var_8]
.text$mn:0000C218                 cmp     dword ptr [eax+4], 0
.text$mn:0000C21C                 jz      short loc_C284
.text$mn:0000C21E                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000C221                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000C226                 mov     ecx, [ebp+var_8]
.text$mn:0000C229                 mov     edx, [ecx+8]
.text$mn:0000C22C                 push    edx
.text$mn:0000C22D                 mov     eax, [ebp+var_8]
.text$mn:0000C230                 mov     ecx, [eax+4]
.text$mn:0000C233                 push    ecx
.text$mn:0000C234                 mov     ecx, [ebp+var_8]
.text$mn:0000C237                 call    ?_Destroy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXPAU?$pair@HH@2@0@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Destroy(std::pair<int,int> *,std::pair<int,int> *)
.text$mn:0000C23C                 mov     edx, [ebp+var_8]
.text$mn:0000C23F                 mov     eax, [ebp+var_8]
.text$mn:0000C242                 mov     ecx, [edx+0Ch]
.text$mn:0000C245                 sub     ecx, [eax+4]
.text$mn:0000C248                 sar     ecx, 3
.text$mn:0000C24B                 push    ecx             ; int
.text$mn:0000C24C                 mov     edx, [ebp+var_8]
.text$mn:0000C24F                 mov     eax, [edx+4]
.text$mn:0000C252                 push    eax             ; void *
.text$mn:0000C253                 lea     ecx, [ebp+var_1]
.text$mn:0000C256                 push    ecx
.text$mn:0000C257                 mov     ecx, [ebp+var_8]
.text$mn:0000C25A                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:0000C25F                 mov     ecx, eax
.text$mn:0000C261                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::deallocate(std::pair<int,int> *,uint)
.text$mn:0000C266                 mov     edx, [ebp+var_8]
.text$mn:0000C269                 mov     dword ptr [edx+4], 0
.text$mn:0000C270                 mov     eax, [ebp+var_8]
.text$mn:0000C273                 mov     dword ptr [eax+8], 0
.text$mn:0000C27A                 mov     ecx, [ebp+var_8]
.text$mn:0000C27D                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000C284
.text$mn:0000C284 loc_C284:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Tidy(void)+10j
.text$mn:0000C284                 mov     esp, ebp
.text$mn:0000C286                 pop     ebp
.text$mn:0000C287                 retn
.text$mn:0000C287 ?_Tidy@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXXZ endp
.text$mn:0000C287
.text$mn:0000C287 _text$mn        ends
.text$mn:0000C287
.text$mn:0000C288 ; ===========================================================================
.text$mn:0000C288
.text$mn:0000C288 ; Segment type: Pure code
.text$mn:0000C288 ; Segment permissions: Read/Execute
.text$mn:0000C288 _text$mn        segment para public 'CODE' use32
.text$mn:0000C288                 assume cs:_text$mn
.text$mn:0000C288                 ;org 0C288h
.text$mn:0000C288 ; COMDAT (pick any)
.text$mn:0000C288                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C288
.text$mn:0000C288 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C288
.text$mn:0000C288 ; Attributes: bp-based frame
.text$mn:0000C288
.text$mn:0000C288 ; protected: void __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Tidy(void)
.text$mn:0000C288                 public ?_Tidy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXXZ
.text$mn:0000C288 ?_Tidy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXXZ proc near
.text$mn:0000C288                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::~vector<AssociationInfo,std::allocator<AssociationInfo>>(void)+30p
.text$mn:0000C288
.text$mn:0000C288 var_8           = dword ptr -8
.text$mn:0000C288 var_1           = byte ptr -1
.text$mn:0000C288
.text$mn:0000C288                 push    ebp
.text$mn:0000C289                 mov     ebp, esp
.text$mn:0000C28B                 sub     esp, 8
.text$mn:0000C28E                 mov     [ebp+var_8], ecx
.text$mn:0000C291                 mov     eax, [ebp+var_8]
.text$mn:0000C294                 cmp     dword ptr [eax+4], 0
.text$mn:0000C298                 jz      short loc_C300
.text$mn:0000C29A                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000C29D                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000C2A2                 mov     ecx, [ebp+var_8]
.text$mn:0000C2A5                 mov     edx, [ecx+8]
.text$mn:0000C2A8                 push    edx
.text$mn:0000C2A9                 mov     eax, [ebp+var_8]
.text$mn:0000C2AC                 mov     ecx, [eax+4]
.text$mn:0000C2AF                 push    ecx
.text$mn:0000C2B0                 mov     ecx, [ebp+var_8]
.text$mn:0000C2B3                 call    ?_Destroy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXPAUAssociationInfo@@0@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Destroy(AssociationInfo *,AssociationInfo *)
.text$mn:0000C2B8                 mov     edx, [ebp+var_8]
.text$mn:0000C2BB                 mov     eax, [ebp+var_8]
.text$mn:0000C2BE                 mov     ecx, [edx+0Ch]
.text$mn:0000C2C1                 sub     ecx, [eax+4]
.text$mn:0000C2C4                 sar     ecx, 6
.text$mn:0000C2C7                 push    ecx             ; int
.text$mn:0000C2C8                 mov     edx, [ebp+var_8]
.text$mn:0000C2CB                 mov     eax, [edx+4]
.text$mn:0000C2CE                 push    eax             ; void *
.text$mn:0000C2CF                 lea     ecx, [ebp+var_1]
.text$mn:0000C2D2                 push    ecx
.text$mn:0000C2D3                 mov     ecx, [ebp+var_8]
.text$mn:0000C2D6                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:0000C2DB                 mov     ecx, eax
.text$mn:0000C2DD                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@I@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::deallocate(AssociationInfo *,uint)
.text$mn:0000C2E2                 mov     edx, [ebp+var_8]
.text$mn:0000C2E5                 mov     dword ptr [edx+4], 0
.text$mn:0000C2EC                 mov     eax, [ebp+var_8]
.text$mn:0000C2EF                 mov     dword ptr [eax+8], 0
.text$mn:0000C2F6                 mov     ecx, [ebp+var_8]
.text$mn:0000C2F9                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000C300
.text$mn:0000C300 loc_C300:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Tidy(void)+10j
.text$mn:0000C300                 mov     esp, ebp
.text$mn:0000C302                 pop     ebp
.text$mn:0000C303                 retn
.text$mn:0000C303 ?_Tidy@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXXZ endp
.text$mn:0000C303
.text$mn:0000C303 _text$mn        ends
.text$mn:0000C303
.text$mn:0000C304 ; ===========================================================================
.text$mn:0000C304
.text$mn:0000C304 ; Segment type: Pure code
.text$mn:0000C304 ; Segment permissions: Read/Execute
.text$mn:0000C304 _text$mn        segment para public 'CODE' use32
.text$mn:0000C304                 assume cs:_text$mn
.text$mn:0000C304                 ;org 0C304h
.text$mn:0000C304 ; COMDAT (pick any)
.text$mn:0000C304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C304
.text$mn:0000C304 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C304
.text$mn:0000C304 ; Attributes: bp-based frame
.text$mn:0000C304
.text$mn:0000C304 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:0000C304                 public ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ
.text$mn:0000C304 ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ proc near
.text$mn:0000C304                                         ; CODE XREF: __catch$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$0+3p
.text$mn:0000C304                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+30p
.text$mn:0000C304
.text$mn:0000C304 var_8           = dword ptr -8
.text$mn:0000C304 var_1           = byte ptr -1
.text$mn:0000C304
.text$mn:0000C304                 push    ebp
.text$mn:0000C305                 mov     ebp, esp
.text$mn:0000C307                 sub     esp, 8
.text$mn:0000C30A                 mov     [ebp+var_8], ecx
.text$mn:0000C30D                 mov     eax, [ebp+var_8]
.text$mn:0000C310                 cmp     dword ptr [eax+4], 0
.text$mn:0000C314                 jz      short loc_C383
.text$mn:0000C316                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000C319                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:0000C31E                 mov     ecx, [ebp+var_8]
.text$mn:0000C321                 mov     edx, [ecx+8]
.text$mn:0000C324                 push    edx
.text$mn:0000C325                 mov     eax, [ebp+var_8]
.text$mn:0000C328                 mov     ecx, [eax+4]
.text$mn:0000C32B                 push    ecx
.text$mn:0000C32C                 mov     ecx, [ebp+var_8]
.text$mn:0000C32F                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000C334                 mov     edx, [ebp+var_8]
.text$mn:0000C337                 mov     eax, [ebp+var_8]
.text$mn:0000C33A                 mov     ecx, [edx+0Ch]
.text$mn:0000C33D                 sub     ecx, [eax+4]
.text$mn:0000C340                 mov     eax, ecx
.text$mn:0000C342                 cdq
.text$mn:0000C343                 mov     ecx, 1Ch
.text$mn:0000C348                 idiv    ecx
.text$mn:0000C34A                 push    eax             ; int
.text$mn:0000C34B                 mov     edx, [ebp+var_8]
.text$mn:0000C34E                 mov     eax, [edx+4]
.text$mn:0000C351                 push    eax             ; void *
.text$mn:0000C352                 lea     ecx, [ebp+var_1]
.text$mn:0000C355                 push    ecx
.text$mn:0000C356                 mov     ecx, [ebp+var_8]
.text$mn:0000C359                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000C35E                 mov     ecx, eax
.text$mn:0000C360                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000C365                 mov     edx, [ebp+var_8]
.text$mn:0000C368                 mov     dword ptr [edx+4], 0
.text$mn:0000C36F                 mov     eax, [ebp+var_8]
.text$mn:0000C372                 mov     dword ptr [eax+8], 0
.text$mn:0000C379                 mov     ecx, [ebp+var_8]
.text$mn:0000C37C                 mov     dword ptr [ecx+0Ch], 0
.text$mn:0000C383
.text$mn:0000C383 loc_C383:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+10j
.text$mn:0000C383                 mov     esp, ebp
.text$mn:0000C385                 pop     ebp
.text$mn:0000C386                 retn
.text$mn:0000C386 ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ endp
.text$mn:0000C386
.text$mn:0000C386 ; ---------------------------------------------------------------------------
.text$mn:0000C387                 align 4
.text$mn:0000C387 _text$mn        ends
.text$mn:0000C387
.text$mn:0000C388 ; ===========================================================================
.text$mn:0000C388
.text$mn:0000C388 ; Segment type: Pure code
.text$mn:0000C388 ; Segment permissions: Read/Execute
.text$mn:0000C388 _text$mn        segment para public 'CODE' use32
.text$mn:0000C388                 assume cs:_text$mn
.text$mn:0000C388                 ;org 0C388h
.text$mn:0000C388 ; COMDAT (pick any)
.text$mn:0000C388                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C388
.text$mn:0000C388 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C388
.text$mn:0000C388 ; Attributes: bp-based frame
.text$mn:0000C388
.text$mn:0000C388 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const * __thiscall std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Unchecked(void)const
.text$mn:0000C388                 public ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
.text$mn:0000C388 ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ proc near
.text$mn:0000C388                                         ; CODE XREF: std::_Unchecked<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+2Dp
.text$mn:0000C388
.text$mn:0000C388 var_4           = dword ptr -4
.text$mn:0000C388
.text$mn:0000C388                 push    ebp
.text$mn:0000C389                 mov     ebp, esp
.text$mn:0000C38B                 push    ecx
.text$mn:0000C38C                 mov     [ebp+var_4], ecx
.text$mn:0000C38F                 mov     eax, [ebp+var_4]
.text$mn:0000C392                 mov     eax, [eax+8]
.text$mn:0000C395                 mov     esp, ebp
.text$mn:0000C397                 pop     ebp
.text$mn:0000C398                 retn
.text$mn:0000C398 ?_Unchecked@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ endp
.text$mn:0000C398
.text$mn:0000C398 ; ---------------------------------------------------------------------------
.text$mn:0000C399                 align 4
.text$mn:0000C399 _text$mn        ends
.text$mn:0000C399
.text$mn:0000C39C ; ===========================================================================
.text$mn:0000C39C
.text$mn:0000C39C ; Segment type: Pure code
.text$mn:0000C39C ; Segment permissions: Read/Execute
.text$mn:0000C39C _text$mn        segment para public 'CODE' use32
.text$mn:0000C39C                 assume cs:_text$mn
.text$mn:0000C39C                 ;org 0C39Ch
.text$mn:0000C39C ; COMDAT (pick any)
.text$mn:0000C39C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C39C
.text$mn:0000C39C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C39C
.text$mn:0000C39C ; Attributes: bp-based frame
.text$mn:0000C39C
.text$mn:0000C39C ; public: unsigned int __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Unused_capacity(void)const
.text$mn:0000C39C                 public ?_Unused_capacity@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ
.text$mn:0000C39C ?_Unused_capacity@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ proc near
.text$mn:0000C39C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)+Bp
.text$mn:0000C39C
.text$mn:0000C39C var_4           = dword ptr -4
.text$mn:0000C39C
.text$mn:0000C39C                 push    ebp
.text$mn:0000C39D                 mov     ebp, esp
.text$mn:0000C39F                 push    ecx
.text$mn:0000C3A0                 mov     [ebp+var_4], ecx
.text$mn:0000C3A3                 mov     eax, [ebp+var_4]
.text$mn:0000C3A6                 mov     ecx, [ebp+var_4]
.text$mn:0000C3A9                 mov     eax, [eax+0Ch]
.text$mn:0000C3AC                 sub     eax, [ecx+8]
.text$mn:0000C3AF                 sar     eax, 2
.text$mn:0000C3B2                 mov     esp, ebp
.text$mn:0000C3B4                 pop     ebp
.text$mn:0000C3B5                 retn
.text$mn:0000C3B5 ?_Unused_capacity@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ endp
.text$mn:0000C3B5
.text$mn:0000C3B5 ; ---------------------------------------------------------------------------
.text$mn:0000C3B6                 align 4
.text$mn:0000C3B6 _text$mn        ends
.text$mn:0000C3B6
.text$mn:0000C3B8 ; ===========================================================================
.text$mn:0000C3B8
.text$mn:0000C3B8 ; Segment type: Pure code
.text$mn:0000C3B8 ; Segment permissions: Read/Execute
.text$mn:0000C3B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C3B8                 assume cs:_text$mn
.text$mn:0000C3B8                 ;org 0C3B8h
.text$mn:0000C3B8 ; COMDAT (pick any)
.text$mn:0000C3B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C3B8
.text$mn:0000C3B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C3B8
.text$mn:0000C3B8 ; Attributes: bp-based frame
.text$mn:0000C3B8
.text$mn:0000C3B8 ; public: unsigned int __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Unused_capacity(void)const
.text$mn:0000C3B8                 public ?_Unused_capacity@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ
.text$mn:0000C3B8 ?_Unused_capacity@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000C3B8                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)+Bp
.text$mn:0000C3B8
.text$mn:0000C3B8 var_4           = dword ptr -4
.text$mn:0000C3B8
.text$mn:0000C3B8                 push    ebp
.text$mn:0000C3B9                 mov     ebp, esp
.text$mn:0000C3BB                 push    ecx
.text$mn:0000C3BC                 mov     [ebp+var_4], ecx
.text$mn:0000C3BF                 mov     eax, [ebp+var_4]
.text$mn:0000C3C2                 mov     ecx, [ebp+var_4]
.text$mn:0000C3C5                 mov     eax, [eax+0Ch]
.text$mn:0000C3C8                 sub     eax, [ecx+8]
.text$mn:0000C3CB                 sar     eax, 3
.text$mn:0000C3CE                 mov     esp, ebp
.text$mn:0000C3D0                 pop     ebp
.text$mn:0000C3D1                 retn
.text$mn:0000C3D1 ?_Unused_capacity@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ endp
.text$mn:0000C3D1
.text$mn:0000C3D1 ; ---------------------------------------------------------------------------
.text$mn:0000C3D2                 align 4
.text$mn:0000C3D2 _text$mn        ends
.text$mn:0000C3D2
.text$mn:0000C3D4 ; ===========================================================================
.text$mn:0000C3D4
.text$mn:0000C3D4 ; Segment type: Pure code
.text$mn:0000C3D4 ; Segment permissions: Read/Execute
.text$mn:0000C3D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C3D4                 assume cs:_text$mn
.text$mn:0000C3D4                 ;org 0C3D4h
.text$mn:0000C3D4 ; COMDAT (pick any)
.text$mn:0000C3D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C3D4
.text$mn:0000C3D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C3D4
.text$mn:0000C3D4 ; Attributes: bp-based frame
.text$mn:0000C3D4
.text$mn:0000C3D4 ; public: unsigned int __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Unused_capacity(void)const
.text$mn:0000C3D4                 public ?_Unused_capacity@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ
.text$mn:0000C3D4 ?_Unused_capacity@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000C3D4                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)+Bp
.text$mn:0000C3D4
.text$mn:0000C3D4 var_4           = dword ptr -4
.text$mn:0000C3D4
.text$mn:0000C3D4                 push    ebp
.text$mn:0000C3D5                 mov     ebp, esp
.text$mn:0000C3D7                 push    ecx
.text$mn:0000C3D8                 mov     [ebp+var_4], ecx
.text$mn:0000C3DB                 mov     eax, [ebp+var_4]
.text$mn:0000C3DE                 mov     ecx, [ebp+var_4]
.text$mn:0000C3E1                 mov     eax, [eax+0Ch]
.text$mn:0000C3E4                 sub     eax, [ecx+8]
.text$mn:0000C3E7                 sar     eax, 6
.text$mn:0000C3EA                 mov     esp, ebp
.text$mn:0000C3EC                 pop     ebp
.text$mn:0000C3ED                 retn
.text$mn:0000C3ED ?_Unused_capacity@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000C3ED
.text$mn:0000C3ED ; ---------------------------------------------------------------------------
.text$mn:0000C3EE                 align 10h
.text$mn:0000C3EE _text$mn        ends
.text$mn:0000C3EE
.text$mn:0000C3F0 ; ===========================================================================
.text$mn:0000C3F0
.text$mn:0000C3F0 ; Segment type: Pure code
.text$mn:0000C3F0 ; Segment permissions: Read/Execute
.text$mn:0000C3F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000C3F0                 assume cs:_text$mn
.text$mn:0000C3F0                 ;org 0C3F0h
.text$mn:0000C3F0 ; COMDAT (pick any)
.text$mn:0000C3F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C3F0
.text$mn:0000C3F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C3F0
.text$mn:0000C3F0 ; Attributes: bp-based frame
.text$mn:0000C3F0
.text$mn:0000C3F0 ; public: unsigned int __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Unused_capacity(void)const
.text$mn:0000C3F0                 public ?_Unused_capacity@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ
.text$mn:0000C3F0 ?_Unused_capacity@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000C3F0                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)+Bp
.text$mn:0000C3F0
.text$mn:0000C3F0 var_4           = dword ptr -4
.text$mn:0000C3F0
.text$mn:0000C3F0                 push    ebp
.text$mn:0000C3F1                 mov     ebp, esp
.text$mn:0000C3F3                 push    ecx
.text$mn:0000C3F4                 mov     [ebp+var_4], ecx
.text$mn:0000C3F7                 mov     eax, [ebp+var_4]
.text$mn:0000C3FA                 mov     ecx, [ebp+var_4]
.text$mn:0000C3FD                 mov     eax, [eax+0Ch]
.text$mn:0000C400                 sub     eax, [ecx+8]
.text$mn:0000C403                 sar     eax, 6
.text$mn:0000C406                 mov     esp, ebp
.text$mn:0000C408                 pop     ebp
.text$mn:0000C409                 retn
.text$mn:0000C409 ?_Unused_capacity@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000C409
.text$mn:0000C409 ; ---------------------------------------------------------------------------
.text$mn:0000C40A                 align 4
.text$mn:0000C40A _text$mn        ends
.text$mn:0000C40A
.text$mn:0000C40C ; ===========================================================================
.text$mn:0000C40C
.text$mn:0000C40C ; Segment type: Pure code
.text$mn:0000C40C ; Segment permissions: Read/Execute
.text$mn:0000C40C _text$mn        segment para public 'CODE' use32
.text$mn:0000C40C                 assume cs:_text$mn
.text$mn:0000C40C                 ;org 0C40Ch
.text$mn:0000C40C ; COMDAT (pick any)
.text$mn:0000C40C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C40C
.text$mn:0000C40C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C40C
.text$mn:0000C40C ; Attributes: bp-based frame
.text$mn:0000C40C
.text$mn:0000C40C ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Unused_capacity(void)const
.text$mn:0000C40C                 public ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000C40C ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000C40C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+Bp
.text$mn:0000C40C
.text$mn:0000C40C var_4           = dword ptr -4
.text$mn:0000C40C
.text$mn:0000C40C                 push    ebp
.text$mn:0000C40D                 mov     ebp, esp
.text$mn:0000C40F                 push    ecx
.text$mn:0000C410                 mov     [ebp+var_4], ecx
.text$mn:0000C413                 mov     eax, [ebp+var_4]
.text$mn:0000C416                 mov     ecx, [ebp+var_4]
.text$mn:0000C419                 mov     eax, [eax+0Ch]
.text$mn:0000C41C                 sub     eax, [ecx+8]
.text$mn:0000C41F                 cdq
.text$mn:0000C420                 mov     ecx, 1Ch
.text$mn:0000C425                 idiv    ecx
.text$mn:0000C427                 mov     esp, ebp
.text$mn:0000C429                 pop     ebp
.text$mn:0000C42A                 retn
.text$mn:0000C42A ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000C42A
.text$mn:0000C42A ; ---------------------------------------------------------------------------
.text$mn:0000C42B                 align 4
.text$mn:0000C42B _text$mn        ends
.text$mn:0000C42B
.text$mn:0000C42C ; ===========================================================================
.text$mn:0000C42C
.text$mn:0000C42C ; Segment type: Pure code
.text$mn:0000C42C ; Segment permissions: Read/Execute
.text$mn:0000C42C _text$mn        segment para public 'CODE' use32
.text$mn:0000C42C                 assume cs:_text$mn
.text$mn:0000C42C                 ;org 0C42Ch
.text$mn:0000C42C ; COMDAT (pick any)
.text$mn:0000C42C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C42C
.text$mn:0000C42C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C42C
.text$mn:0000C42C ; Attributes: bp-based frame
.text$mn:0000C42C
.text$mn:0000C42C ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:0000C42C                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:0000C42C ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:0000C42C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:0000C42C
.text$mn:0000C42C var_4           = dword ptr -4
.text$mn:0000C42C
.text$mn:0000C42C                 push    ebp
.text$mn:0000C42D                 mov     ebp, esp
.text$mn:0000C42F                 push    ecx
.text$mn:0000C430                 mov     [ebp+var_4], ecx
.text$mn:0000C433                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:0000C438                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C43D                 mov     esp, ebp
.text$mn:0000C43F                 pop     ebp
.text$mn:0000C440                 retn
.text$mn:0000C440 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000C440
.text$mn:0000C440 ; ---------------------------------------------------------------------------
.text$mn:0000C441                 align 4
.text$mn:0000C441 _text$mn        ends
.text$mn:0000C441
.text$mn:0000C444 ; ===========================================================================
.text$mn:0000C444
.text$mn:0000C444 ; Segment type: Pure code
.text$mn:0000C444 ; Segment permissions: Read/Execute
.text$mn:0000C444 _text$mn        segment para public 'CODE' use32
.text$mn:0000C444                 assume cs:_text$mn
.text$mn:0000C444                 ;org 0C444h
.text$mn:0000C444 ; COMDAT (pick any)
.text$mn:0000C444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C444
.text$mn:0000C444 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C444
.text$mn:0000C444 ; Attributes: bp-based frame
.text$mn:0000C444
.text$mn:0000C444 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:0000C444                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:0000C444 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:0000C444                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:0000C444                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:0000C444
.text$mn:0000C444 var_4           = dword ptr -4
.text$mn:0000C444
.text$mn:0000C444                 push    ebp
.text$mn:0000C445                 mov     ebp, esp
.text$mn:0000C447                 push    ecx
.text$mn:0000C448                 mov     [ebp+var_4], ecx
.text$mn:0000C44B                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:0000C450                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C455                 mov     esp, ebp
.text$mn:0000C457                 pop     ebp
.text$mn:0000C458                 retn
.text$mn:0000C458 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000C458
.text$mn:0000C458 ; ---------------------------------------------------------------------------
.text$mn:0000C459                 align 4
.text$mn:0000C459 _text$mn        ends
.text$mn:0000C459
.text$mn:0000C45C ; ===========================================================================
.text$mn:0000C45C
.text$mn:0000C45C ; Segment type: Pure code
.text$mn:0000C45C ; Segment permissions: Read/Execute
.text$mn:0000C45C _text$mn        segment para public 'CODE' use32
.text$mn:0000C45C                 assume cs:_text$mn
.text$mn:0000C45C                 ;org 0C45Ch
.text$mn:0000C45C ; COMDAT (pick any)
.text$mn:0000C45C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C45C
.text$mn:0000C45C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C45C
.text$mn:0000C45C ; Attributes: bp-based frame
.text$mn:0000C45C
.text$mn:0000C45C ; protected: void __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::_Xlen(void)const
.text$mn:0000C45C                 public ?_Xlen@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXXZ
.text$mn:0000C45C ?_Xlen@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXXZ proc near
.text$mn:0000C45C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)+31p
.text$mn:0000C45C
.text$mn:0000C45C var_4           = dword ptr -4
.text$mn:0000C45C
.text$mn:0000C45C                 push    ebp
.text$mn:0000C45D                 mov     ebp, esp
.text$mn:0000C45F                 push    ecx
.text$mn:0000C460                 mov     [ebp+var_4], ecx
.text$mn:0000C463                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000C468                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C46D                 mov     esp, ebp
.text$mn:0000C46F                 pop     ebp
.text$mn:0000C470                 retn
.text$mn:0000C470 ?_Xlen@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXXZ endp
.text$mn:0000C470
.text$mn:0000C470 ; ---------------------------------------------------------------------------
.text$mn:0000C471                 align 4
.text$mn:0000C471 _text$mn        ends
.text$mn:0000C471
.text$mn:0000C474 ; ===========================================================================
.text$mn:0000C474
.text$mn:0000C474 ; Segment type: Pure code
.text$mn:0000C474 ; Segment permissions: Read/Execute
.text$mn:0000C474 _text$mn        segment para public 'CODE' use32
.text$mn:0000C474                 assume cs:_text$mn
.text$mn:0000C474                 ;org 0C474h
.text$mn:0000C474 ; COMDAT (pick any)
.text$mn:0000C474                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C474
.text$mn:0000C474 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C474
.text$mn:0000C474 ; Attributes: bp-based frame
.text$mn:0000C474
.text$mn:0000C474 ; protected: void __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::_Xlen(void)const
.text$mn:0000C474                 public ?_Xlen@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXXZ
.text$mn:0000C474 ?_Xlen@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXXZ proc near
.text$mn:0000C474                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)+31p
.text$mn:0000C474
.text$mn:0000C474 var_4           = dword ptr -4
.text$mn:0000C474
.text$mn:0000C474                 push    ebp
.text$mn:0000C475                 mov     ebp, esp
.text$mn:0000C477                 push    ecx
.text$mn:0000C478                 mov     [ebp+var_4], ecx
.text$mn:0000C47B                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000C480                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C485                 mov     esp, ebp
.text$mn:0000C487                 pop     ebp
.text$mn:0000C488                 retn
.text$mn:0000C488 ?_Xlen@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXXZ endp
.text$mn:0000C488
.text$mn:0000C488 ; ---------------------------------------------------------------------------
.text$mn:0000C489                 align 4
.text$mn:0000C489 _text$mn        ends
.text$mn:0000C489
.text$mn:0000C48C ; ===========================================================================
.text$mn:0000C48C
.text$mn:0000C48C ; Segment type: Pure code
.text$mn:0000C48C ; Segment permissions: Read/Execute
.text$mn:0000C48C _text$mn        segment para public 'CODE' use32
.text$mn:0000C48C                 assume cs:_text$mn
.text$mn:0000C48C                 ;org 0C48Ch
.text$mn:0000C48C ; COMDAT (pick any)
.text$mn:0000C48C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C48C
.text$mn:0000C48C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C48C
.text$mn:0000C48C ; Attributes: bp-based frame
.text$mn:0000C48C
.text$mn:0000C48C ; protected: void __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::_Xlen(void)const
.text$mn:0000C48C                 public ?_Xlen@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXXZ
.text$mn:0000C48C ?_Xlen@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXXZ proc near
.text$mn:0000C48C                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)+31p
.text$mn:0000C48C
.text$mn:0000C48C var_4           = dword ptr -4
.text$mn:0000C48C
.text$mn:0000C48C                 push    ebp
.text$mn:0000C48D                 mov     ebp, esp
.text$mn:0000C48F                 push    ecx
.text$mn:0000C490                 mov     [ebp+var_4], ecx
.text$mn:0000C493                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000C498                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C49D                 mov     esp, ebp
.text$mn:0000C49F                 pop     ebp
.text$mn:0000C4A0                 retn
.text$mn:0000C4A0 ?_Xlen@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXXZ endp
.text$mn:0000C4A0
.text$mn:0000C4A0 ; ---------------------------------------------------------------------------
.text$mn:0000C4A1                 align 4
.text$mn:0000C4A1 _text$mn        ends
.text$mn:0000C4A1
.text$mn:0000C4A4 ; ===========================================================================
.text$mn:0000C4A4
.text$mn:0000C4A4 ; Segment type: Pure code
.text$mn:0000C4A4 ; Segment permissions: Read/Execute
.text$mn:0000C4A4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C4A4                 assume cs:_text$mn
.text$mn:0000C4A4                 ;org 0C4A4h
.text$mn:0000C4A4 ; COMDAT (pick any)
.text$mn:0000C4A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4A4
.text$mn:0000C4A4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4A4
.text$mn:0000C4A4 ; Attributes: bp-based frame
.text$mn:0000C4A4
.text$mn:0000C4A4 ; protected: void __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::_Xlen(void)const
.text$mn:0000C4A4                 public ?_Xlen@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXXZ
.text$mn:0000C4A4 ?_Xlen@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXXZ proc near
.text$mn:0000C4A4                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)+31p
.text$mn:0000C4A4
.text$mn:0000C4A4 var_4           = dword ptr -4
.text$mn:0000C4A4
.text$mn:0000C4A4                 push    ebp
.text$mn:0000C4A5                 mov     ebp, esp
.text$mn:0000C4A7                 push    ecx
.text$mn:0000C4A8                 mov     [ebp+var_4], ecx
.text$mn:0000C4AB                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000C4B0                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C4B5                 mov     esp, ebp
.text$mn:0000C4B7                 pop     ebp
.text$mn:0000C4B8                 retn
.text$mn:0000C4B8 ?_Xlen@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXXZ endp
.text$mn:0000C4B8
.text$mn:0000C4B8 ; ---------------------------------------------------------------------------
.text$mn:0000C4B9                 align 4
.text$mn:0000C4B9 _text$mn        ends
.text$mn:0000C4B9
.text$mn:0000C4BC ; ===========================================================================
.text$mn:0000C4BC
.text$mn:0000C4BC ; Segment type: Pure code
.text$mn:0000C4BC ; Segment permissions: Read/Execute
.text$mn:0000C4BC _text$mn        segment para public 'CODE' use32
.text$mn:0000C4BC                 assume cs:_text$mn
.text$mn:0000C4BC                 ;org 0C4BCh
.text$mn:0000C4BC ; COMDAT (pick any)
.text$mn:0000C4BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4BC
.text$mn:0000C4BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4BC
.text$mn:0000C4BC ; Attributes: bp-based frame
.text$mn:0000C4BC
.text$mn:0000C4BC ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Xlen(void)const
.text$mn:0000C4BC                 public ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ
.text$mn:0000C4BC ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ proc near
.text$mn:0000C4BC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+43p
.text$mn:0000C4BC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+31p
.text$mn:0000C4BC
.text$mn:0000C4BC var_4           = dword ptr -4
.text$mn:0000C4BC
.text$mn:0000C4BC                 push    ebp
.text$mn:0000C4BD                 mov     ebp, esp
.text$mn:0000C4BF                 push    ecx
.text$mn:0000C4C0                 mov     [ebp+var_4], ecx
.text$mn:0000C4C3                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:0000C4C8                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:0000C4CD                 mov     esp, ebp
.text$mn:0000C4CF                 pop     ebp
.text$mn:0000C4D0                 retn
.text$mn:0000C4D0 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ endp
.text$mn:0000C4D0
.text$mn:0000C4D0 ; ---------------------------------------------------------------------------
.text$mn:0000C4D1                 align 4
.text$mn:0000C4D1 _text$mn        ends
.text$mn:0000C4D1
.text$mn:0000C4D4 ; ===========================================================================
.text$mn:0000C4D4
.text$mn:0000C4D4 ; Segment type: Pure code
.text$mn:0000C4D4 ; Segment permissions: Read/Execute
.text$mn:0000C4D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C4D4                 assume cs:_text$mn
.text$mn:0000C4D4                 ;org 0C4D4h
.text$mn:0000C4D4 ; COMDAT (pick any)
.text$mn:0000C4D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4D4
.text$mn:0000C4D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4D4
.text$mn:0000C4D4 ; Attributes: bp-based frame
.text$mn:0000C4D4
.text$mn:0000C4D4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:0000C4D4                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:0000C4D4 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:0000C4D4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:0000C4D4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:0000C4D4
.text$mn:0000C4D4 var_4           = dword ptr -4
.text$mn:0000C4D4
.text$mn:0000C4D4                 push    ebp
.text$mn:0000C4D5                 mov     ebp, esp
.text$mn:0000C4D7                 push    ecx
.text$mn:0000C4D8                 mov     [ebp+var_4], ecx
.text$mn:0000C4DB                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000C4E0                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000C4E5                 mov     esp, ebp
.text$mn:0000C4E7                 pop     ebp
.text$mn:0000C4E8                 retn
.text$mn:0000C4E8 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000C4E8
.text$mn:0000C4E8 ; ---------------------------------------------------------------------------
.text$mn:0000C4E9                 align 4
.text$mn:0000C4E9 _text$mn        ends
.text$mn:0000C4E9
.text$mn:0000C4EC ; ===========================================================================
.text$mn:0000C4EC
.text$mn:0000C4EC ; Segment type: Pure code
.text$mn:0000C4EC ; Segment permissions: Read/Execute
.text$mn:0000C4EC _text$mn        segment para public 'CODE' use32
.text$mn:0000C4EC                 assume cs:_text$mn
.text$mn:0000C4EC                 ;org 0C4ECh
.text$mn:0000C4EC ; COMDAT (pick any)
.text$mn:0000C4EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C4EC
.text$mn:0000C4EC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C4EC
.text$mn:0000C4EC ; Attributes: bp-based frame
.text$mn:0000C4EC
.text$mn:0000C4EC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:0000C4EC                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:0000C4EC ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:0000C4EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:0000C4EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:0000C4EC
.text$mn:0000C4EC var_4           = dword ptr -4
.text$mn:0000C4EC
.text$mn:0000C4EC                 push    ebp
.text$mn:0000C4ED                 mov     ebp, esp
.text$mn:0000C4EF                 push    ecx
.text$mn:0000C4F0                 mov     [ebp+var_4], ecx
.text$mn:0000C4F3                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000C4F8                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000C4FD                 mov     esp, ebp
.text$mn:0000C4FF                 pop     ebp
.text$mn:0000C500                 retn
.text$mn:0000C500 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:0000C500
.text$mn:0000C500 ; ---------------------------------------------------------------------------
.text$mn:0000C501                 align 4
.text$mn:0000C501 _text$mn        ends
.text$mn:0000C501
.text$mn:0000C504 ; ===========================================================================
.text$mn:0000C504
.text$mn:0000C504 ; Segment type: Pure code
.text$mn:0000C504 ; Segment permissions: Read/Execute
.text$mn:0000C504 _text$mn        segment para public 'CODE' use32
.text$mn:0000C504                 assume cs:_text$mn
.text$mn:0000C504                 ;org 0C504h
.text$mn:0000C504 ; COMDAT (pick any)
.text$mn:0000C504                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C504
.text$mn:0000C504 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C504
.text$mn:0000C504 ; Attributes: bp-based frame
.text$mn:0000C504
.text$mn:0000C504 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:0000C504                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:0000C504 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:0000C504                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:0000C504                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:0000C504
.text$mn:0000C504 var_4           = dword ptr -4
.text$mn:0000C504 arg_0           = dword ptr  8
.text$mn:0000C504
.text$mn:0000C504                 push    ebp
.text$mn:0000C505                 mov     ebp, esp
.text$mn:0000C507                 push    ecx
.text$mn:0000C508                 mov     [ebp+var_4], ecx
.text$mn:0000C50B                 mov     eax, [ebp+arg_0]
.text$mn:0000C50E                 push    eax
.text$mn:0000C50F                 mov     ecx, [ebp+var_4]
.text$mn:0000C512                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:0000C517                 mov     esp, ebp
.text$mn:0000C519                 pop     ebp
.text$mn:0000C51A                 retn    4
.text$mn:0000C51A ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:0000C51A
.text$mn:0000C51A ; ---------------------------------------------------------------------------
.text$mn:0000C51D                 align 10h
.text$mn:0000C51D _text$mn        ends
.text$mn:0000C51D
.text$mn:0000C520 ; ===========================================================================
.text$mn:0000C520
.text$mn:0000C520 ; Segment type: Pure code
.text$mn:0000C520 ; Segment permissions: Read/Execute
.text$mn:0000C520 _text$mn        segment para public 'CODE' use32
.text$mn:0000C520                 assume cs:_text$mn
.text$mn:0000C520                 ;org 0C520h
.text$mn:0000C520 ; COMDAT (pick any)
.text$mn:0000C520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C520
.text$mn:0000C520 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C520
.text$mn:0000C520 ; Attributes: bp-based frame
.text$mn:0000C520
.text$mn:0000C520 ; public: class FunctionParser * * __thiscall std::_Wrap_alloc<class std::allocator<class FunctionParser *>>::allocate(unsigned int)
.text$mn:0000C520                 public ?allocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEPAPAVFunctionParser@@I@Z
.text$mn:0000C520 ?allocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEPAPAVFunctionParser@@I@Z proc near
.text$mn:0000C520                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)+41p
.text$mn:0000C520
.text$mn:0000C520 var_4           = dword ptr -4
.text$mn:0000C520 arg_0           = dword ptr  8
.text$mn:0000C520
.text$mn:0000C520                 push    ebp
.text$mn:0000C521                 mov     ebp, esp
.text$mn:0000C523                 push    ecx
.text$mn:0000C524                 mov     [ebp+var_4], ecx
.text$mn:0000C527                 mov     eax, [ebp+arg_0]
.text$mn:0000C52A                 push    eax
.text$mn:0000C52B                 mov     ecx, [ebp+var_4]
.text$mn:0000C52E                 call    ?allocate@?$allocator@PAVFunctionParser@@@std@@QAEPAPAVFunctionParser@@I@Z ; std::allocator<FunctionParser *>::allocate(uint)
.text$mn:0000C533                 mov     esp, ebp
.text$mn:0000C535                 pop     ebp
.text$mn:0000C536                 retn    4
.text$mn:0000C536 ?allocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEPAPAVFunctionParser@@I@Z endp
.text$mn:0000C536
.text$mn:0000C536 ; ---------------------------------------------------------------------------
.text$mn:0000C539                 align 4
.text$mn:0000C539 _text$mn        ends
.text$mn:0000C539
.text$mn:0000C53C ; ===========================================================================
.text$mn:0000C53C
.text$mn:0000C53C ; Segment type: Pure code
.text$mn:0000C53C ; Segment permissions: Read/Execute
.text$mn:0000C53C _text$mn        segment para public 'CODE' use32
.text$mn:0000C53C                 assume cs:_text$mn
.text$mn:0000C53C                 ;org 0C53Ch
.text$mn:0000C53C ; COMDAT (pick any)
.text$mn:0000C53C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C53C
.text$mn:0000C53C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C53C
.text$mn:0000C53C ; Attributes: bp-based frame
.text$mn:0000C53C
.text$mn:0000C53C ; public: struct std::pair<int, int> * __thiscall std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>>::allocate(unsigned int)
.text$mn:0000C53C                 public ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEPAU?$pair@HH@2@I@Z
.text$mn:0000C53C ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEPAU?$pair@HH@2@I@Z proc near
.text$mn:0000C53C                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)+41p
.text$mn:0000C53C
.text$mn:0000C53C var_4           = dword ptr -4
.text$mn:0000C53C arg_0           = dword ptr  8
.text$mn:0000C53C
.text$mn:0000C53C                 push    ebp
.text$mn:0000C53D                 mov     ebp, esp
.text$mn:0000C53F                 push    ecx
.text$mn:0000C540                 mov     [ebp+var_4], ecx
.text$mn:0000C543                 mov     eax, [ebp+arg_0]
.text$mn:0000C546                 push    eax
.text$mn:0000C547                 mov     ecx, [ebp+var_4]
.text$mn:0000C54A                 call    ?allocate@?$allocator@U?$pair@HH@std@@@std@@QAEPAU?$pair@HH@2@I@Z ; std::allocator<std::pair<int,int>>::allocate(uint)
.text$mn:0000C54F                 mov     esp, ebp
.text$mn:0000C551                 pop     ebp
.text$mn:0000C552                 retn    4
.text$mn:0000C552 ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEPAU?$pair@HH@2@I@Z endp
.text$mn:0000C552
.text$mn:0000C552 ; ---------------------------------------------------------------------------
.text$mn:0000C555                 align 4
.text$mn:0000C555 _text$mn        ends
.text$mn:0000C555
.text$mn:0000C558 ; ===========================================================================
.text$mn:0000C558
.text$mn:0000C558 ; Segment type: Pure code
.text$mn:0000C558 ; Segment permissions: Read/Execute
.text$mn:0000C558 _text$mn        segment para public 'CODE' use32
.text$mn:0000C558                 assume cs:_text$mn
.text$mn:0000C558                 ;org 0C558h
.text$mn:0000C558 ; COMDAT (pick any)
.text$mn:0000C558                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C558
.text$mn:0000C558 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C558
.text$mn:0000C558 ; Attributes: bp-based frame
.text$mn:0000C558
.text$mn:0000C558 ; public: struct AssociationInfo * __thiscall std::_Wrap_alloc<class std::allocator<struct AssociationInfo>>::allocate(unsigned int)
.text$mn:0000C558                 public ?allocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEPAUAssociationInfo@@I@Z
.text$mn:0000C558 ?allocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEPAUAssociationInfo@@I@Z proc near
.text$mn:0000C558                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)+41p
.text$mn:0000C558
.text$mn:0000C558 var_4           = dword ptr -4
.text$mn:0000C558 arg_0           = dword ptr  8
.text$mn:0000C558
.text$mn:0000C558                 push    ebp
.text$mn:0000C559                 mov     ebp, esp
.text$mn:0000C55B                 push    ecx
.text$mn:0000C55C                 mov     [ebp+var_4], ecx
.text$mn:0000C55F                 mov     eax, [ebp+arg_0]
.text$mn:0000C562                 push    eax
.text$mn:0000C563                 mov     ecx, [ebp+var_4]
.text$mn:0000C566                 call    ?allocate@?$allocator@UAssociationInfo@@@std@@QAEPAUAssociationInfo@@I@Z ; std::allocator<AssociationInfo>::allocate(uint)
.text$mn:0000C56B                 mov     esp, ebp
.text$mn:0000C56D                 pop     ebp
.text$mn:0000C56E                 retn    4
.text$mn:0000C56E ?allocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEPAUAssociationInfo@@I@Z endp
.text$mn:0000C56E
.text$mn:0000C56E ; ---------------------------------------------------------------------------
.text$mn:0000C571                 align 4
.text$mn:0000C571 _text$mn        ends
.text$mn:0000C571
.text$mn:0000C574 ; ===========================================================================
.text$mn:0000C574
.text$mn:0000C574 ; Segment type: Pure code
.text$mn:0000C574 ; Segment permissions: Read/Execute
.text$mn:0000C574 _text$mn        segment para public 'CODE' use32
.text$mn:0000C574                 assume cs:_text$mn
.text$mn:0000C574                 ;org 0C574h
.text$mn:0000C574 ; COMDAT (pick any)
.text$mn:0000C574                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C574
.text$mn:0000C574 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C574
.text$mn:0000C574 ; Attributes: bp-based frame
.text$mn:0000C574
.text$mn:0000C574 ; public: struct std::_Container_proxy * __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::allocate(unsigned int)
.text$mn:0000C574                 public ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:0000C574 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:0000C574                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Alloc_proxy(void)+16p
.text$mn:0000C574                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+16p
.text$mn:0000C574
.text$mn:0000C574 var_4           = dword ptr -4
.text$mn:0000C574 arg_0           = dword ptr  8
.text$mn:0000C574
.text$mn:0000C574                 push    ebp
.text$mn:0000C575                 mov     ebp, esp
.text$mn:0000C577                 push    ecx
.text$mn:0000C578                 mov     [ebp+var_4], ecx
.text$mn:0000C57B                 mov     eax, [ebp+arg_0]
.text$mn:0000C57E                 push    eax
.text$mn:0000C57F                 mov     ecx, [ebp+var_4]
.text$mn:0000C582                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:0000C587                 mov     esp, ebp
.text$mn:0000C589                 pop     ebp
.text$mn:0000C58A                 retn    4
.text$mn:0000C58A ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:0000C58A
.text$mn:0000C58A ; ---------------------------------------------------------------------------
.text$mn:0000C58D                 align 10h
.text$mn:0000C58D _text$mn        ends
.text$mn:0000C58D
.text$mn:0000C590 ; ===========================================================================
.text$mn:0000C590
.text$mn:0000C590 ; Segment type: Pure code
.text$mn:0000C590 ; Segment permissions: Read/Execute
.text$mn:0000C590 _text$mn        segment para public 'CODE' use32
.text$mn:0000C590                 assume cs:_text$mn
.text$mn:0000C590                 ;org 0C590h
.text$mn:0000C590 ; COMDAT (pick any)
.text$mn:0000C590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C590
.text$mn:0000C590 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C590
.text$mn:0000C590 ; Attributes: bp-based frame
.text$mn:0000C590
.text$mn:0000C590 ; public: struct foundInfo * __thiscall std::_Wrap_alloc<class std::allocator<struct foundInfo>>::allocate(unsigned int)
.text$mn:0000C590                 public ?allocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEPAUfoundInfo@@I@Z
.text$mn:0000C590 ?allocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEPAUfoundInfo@@I@Z proc near
.text$mn:0000C590                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+41p
.text$mn:0000C590
.text$mn:0000C590 var_4           = dword ptr -4
.text$mn:0000C590 arg_0           = dword ptr  8
.text$mn:0000C590
.text$mn:0000C590                 push    ebp
.text$mn:0000C591                 mov     ebp, esp
.text$mn:0000C593                 push    ecx
.text$mn:0000C594                 mov     [ebp+var_4], ecx
.text$mn:0000C597                 mov     eax, [ebp+arg_0]
.text$mn:0000C59A                 push    eax
.text$mn:0000C59B                 mov     ecx, [ebp+var_4]
.text$mn:0000C59E                 call    ?allocate@?$allocator@UfoundInfo@@@std@@QAEPAUfoundInfo@@I@Z ; std::allocator<foundInfo>::allocate(uint)
.text$mn:0000C5A3                 mov     esp, ebp
.text$mn:0000C5A5                 pop     ebp
.text$mn:0000C5A6                 retn    4
.text$mn:0000C5A6 ?allocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEPAUfoundInfo@@I@Z endp
.text$mn:0000C5A6
.text$mn:0000C5A6 ; ---------------------------------------------------------------------------
.text$mn:0000C5A9                 align 4
.text$mn:0000C5A9 _text$mn        ends
.text$mn:0000C5A9
.text$mn:0000C5AC ; ===========================================================================
.text$mn:0000C5AC
.text$mn:0000C5AC ; Segment type: Pure code
.text$mn:0000C5AC ; Segment permissions: Read/Execute
.text$mn:0000C5AC _text$mn        segment para public 'CODE' use32
.text$mn:0000C5AC                 assume cs:_text$mn
.text$mn:0000C5AC                 ;org 0C5ACh
.text$mn:0000C5AC ; COMDAT (pick any)
.text$mn:0000C5AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C5AC
.text$mn:0000C5AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C5AC
.text$mn:0000C5AC ; Attributes: bp-based frame
.text$mn:0000C5AC
.text$mn:0000C5AC ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::allocate(unsigned int)
.text$mn:0000C5AC                 public ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000C5AC ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000C5AC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+5Cp
.text$mn:0000C5AC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+41p
.text$mn:0000C5AC
.text$mn:0000C5AC var_4           = dword ptr -4
.text$mn:0000C5AC arg_0           = dword ptr  8
.text$mn:0000C5AC
.text$mn:0000C5AC                 push    ebp
.text$mn:0000C5AD                 mov     ebp, esp
.text$mn:0000C5AF                 push    ecx
.text$mn:0000C5B0                 mov     [ebp+var_4], ecx
.text$mn:0000C5B3                 mov     eax, [ebp+arg_0]
.text$mn:0000C5B6                 push    eax
.text$mn:0000C5B7                 mov     ecx, [ebp+var_4]
.text$mn:0000C5BA                 call    ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)
.text$mn:0000C5BF                 mov     esp, ebp
.text$mn:0000C5C1                 pop     ebp
.text$mn:0000C5C2                 retn    4
.text$mn:0000C5C2 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000C5C2
.text$mn:0000C5C2 ; ---------------------------------------------------------------------------
.text$mn:0000C5C5                 align 4
.text$mn:0000C5C5 _text$mn        ends
.text$mn:0000C5C5
.text$mn:0000C5C8 ; ===========================================================================
.text$mn:0000C5C8
.text$mn:0000C5C8 ; Segment type: Pure code
.text$mn:0000C5C8 ; Segment permissions: Read/Execute
.text$mn:0000C5C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C5C8                 assume cs:_text$mn
.text$mn:0000C5C8                 ;org 0C5C8h
.text$mn:0000C5C8 ; COMDAT (pick any)
.text$mn:0000C5C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C5C8
.text$mn:0000C5C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C5C8
.text$mn:0000C5C8 ; Attributes: bp-based frame
.text$mn:0000C5C8
.text$mn:0000C5C8 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:0000C5C8                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:0000C5C8 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:0000C5C8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:0000C5C8                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:0000C5C8
.text$mn:0000C5C8 var_4           = dword ptr -4
.text$mn:0000C5C8 arg_0           = dword ptr  8
.text$mn:0000C5C8
.text$mn:0000C5C8                 push    ebp
.text$mn:0000C5C9                 mov     ebp, esp
.text$mn:0000C5CB                 push    ecx
.text$mn:0000C5CC                 mov     [ebp+var_4], ecx
.text$mn:0000C5CF                 mov     eax, [ebp+arg_0]
.text$mn:0000C5D2                 push    eax
.text$mn:0000C5D3                 mov     ecx, [ebp+var_4]
.text$mn:0000C5D6                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:0000C5DB                 mov     esp, ebp
.text$mn:0000C5DD                 pop     ebp
.text$mn:0000C5DE                 retn    4
.text$mn:0000C5DE ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:0000C5DE
.text$mn:0000C5DE ; ---------------------------------------------------------------------------
.text$mn:0000C5E1                 align 4
.text$mn:0000C5E1 _text$mn        ends
.text$mn:0000C5E1
.text$mn:0000C5E4 ; ===========================================================================
.text$mn:0000C5E4
.text$mn:0000C5E4 ; Segment type: Pure code
.text$mn:0000C5E4 ; Segment permissions: Read/Execute
.text$mn:0000C5E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C5E4                 assume cs:_text$mn
.text$mn:0000C5E4                 ;org 0C5E4h
.text$mn:0000C5E4 ; COMDAT (pick any)
.text$mn:0000C5E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C5E4
.text$mn:0000C5E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C5E4
.text$mn:0000C5E4 ; Attributes: bp-based frame
.text$mn:0000C5E4
.text$mn:0000C5E4 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:0000C5E4                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:0000C5E4 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:0000C5E4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:0000C5E4
.text$mn:0000C5E4 var_4           = dword ptr -4
.text$mn:0000C5E4 arg_0           = dword ptr  8
.text$mn:0000C5E4
.text$mn:0000C5E4                 push    ebp
.text$mn:0000C5E5                 mov     ebp, esp
.text$mn:0000C5E7                 push    ecx
.text$mn:0000C5E8                 mov     [ebp+var_4], ecx
.text$mn:0000C5EB                 push    0
.text$mn:0000C5ED                 mov     eax, [ebp+arg_0]
.text$mn:0000C5F0                 push    eax
.text$mn:0000C5F1                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:0000C5F6                 add     esp, 8
.text$mn:0000C5F9                 mov     esp, ebp
.text$mn:0000C5FB                 pop     ebp
.text$mn:0000C5FC                 retn    4
.text$mn:0000C5FC ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:0000C5FC
.text$mn:0000C5FC ; ---------------------------------------------------------------------------
.text$mn:0000C5FF                 align 10h
.text$mn:0000C5FF _text$mn        ends
.text$mn:0000C5FF
.text$mn:0000C600 ; ===========================================================================
.text$mn:0000C600
.text$mn:0000C600 ; Segment type: Pure code
.text$mn:0000C600 ; Segment permissions: Read/Execute
.text$mn:0000C600 _text$mn        segment para public 'CODE' use32
.text$mn:0000C600                 assume cs:_text$mn
.text$mn:0000C600                 ;org 0C600h
.text$mn:0000C600 ; COMDAT (pick any)
.text$mn:0000C600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C600
.text$mn:0000C600 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C600
.text$mn:0000C600 ; Attributes: bp-based frame
.text$mn:0000C600
.text$mn:0000C600 ; public: class FunctionParser * * __thiscall std::allocator<class FunctionParser *>::allocate(unsigned int)
.text$mn:0000C600                 public ?allocate@?$allocator@PAVFunctionParser@@@std@@QAEPAPAVFunctionParser@@I@Z
.text$mn:0000C600 ?allocate@?$allocator@PAVFunctionParser@@@std@@QAEPAPAVFunctionParser@@I@Z proc near
.text$mn:0000C600                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<FunctionParser *>>::allocate(uint)+Ep
.text$mn:0000C600
.text$mn:0000C600 var_4           = dword ptr -4
.text$mn:0000C600 arg_0           = dword ptr  8
.text$mn:0000C600
.text$mn:0000C600                 push    ebp
.text$mn:0000C601                 mov     ebp, esp
.text$mn:0000C603                 push    ecx
.text$mn:0000C604                 mov     [ebp+var_4], ecx
.text$mn:0000C607                 push    0
.text$mn:0000C609                 mov     eax, [ebp+arg_0]
.text$mn:0000C60C                 push    eax
.text$mn:0000C60D                 call    ??$_Allocate@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@IPAPAV1@@Z ; std::_Allocate<FunctionParser *>(uint,FunctionParser * *)
.text$mn:0000C612                 add     esp, 8
.text$mn:0000C615                 mov     esp, ebp
.text$mn:0000C617                 pop     ebp
.text$mn:0000C618                 retn    4
.text$mn:0000C618 ?allocate@?$allocator@PAVFunctionParser@@@std@@QAEPAPAVFunctionParser@@I@Z endp
.text$mn:0000C618
.text$mn:0000C618 ; ---------------------------------------------------------------------------
.text$mn:0000C61B                 align 4
.text$mn:0000C61B _text$mn        ends
.text$mn:0000C61B
.text$mn:0000C61C ; ===========================================================================
.text$mn:0000C61C
.text$mn:0000C61C ; Segment type: Pure code
.text$mn:0000C61C ; Segment permissions: Read/Execute
.text$mn:0000C61C _text$mn        segment para public 'CODE' use32
.text$mn:0000C61C                 assume cs:_text$mn
.text$mn:0000C61C                 ;org 0C61Ch
.text$mn:0000C61C ; COMDAT (pick any)
.text$mn:0000C61C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C61C
.text$mn:0000C61C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C61C
.text$mn:0000C61C ; Attributes: bp-based frame
.text$mn:0000C61C
.text$mn:0000C61C ; public: struct std::pair<int, int> * __thiscall std::allocator<struct std::pair<int, int>>::allocate(unsigned int)
.text$mn:0000C61C                 public ?allocate@?$allocator@U?$pair@HH@std@@@std@@QAEPAU?$pair@HH@2@I@Z
.text$mn:0000C61C ?allocate@?$allocator@U?$pair@HH@std@@@std@@QAEPAU?$pair@HH@2@I@Z proc near
.text$mn:0000C61C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::allocate(uint)+Ep
.text$mn:0000C61C
.text$mn:0000C61C var_4           = dword ptr -4
.text$mn:0000C61C arg_0           = dword ptr  8
.text$mn:0000C61C
.text$mn:0000C61C                 push    ebp
.text$mn:0000C61D                 mov     ebp, esp
.text$mn:0000C61F                 push    ecx
.text$mn:0000C620                 mov     [ebp+var_4], ecx
.text$mn:0000C623                 push    0
.text$mn:0000C625                 mov     eax, [ebp+arg_0]
.text$mn:0000C628                 push    eax
.text$mn:0000C629                 call    ??$_Allocate@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@IPAU10@@Z ; std::_Allocate<std::pair<int,int>>(uint,std::pair<int,int> *)
.text$mn:0000C62E                 add     esp, 8
.text$mn:0000C631                 mov     esp, ebp
.text$mn:0000C633                 pop     ebp
.text$mn:0000C634                 retn    4
.text$mn:0000C634 ?allocate@?$allocator@U?$pair@HH@std@@@std@@QAEPAU?$pair@HH@2@I@Z endp
.text$mn:0000C634
.text$mn:0000C634 ; ---------------------------------------------------------------------------
.text$mn:0000C637                 align 4
.text$mn:0000C637 _text$mn        ends
.text$mn:0000C637
.text$mn:0000C638 ; ===========================================================================
.text$mn:0000C638
.text$mn:0000C638 ; Segment type: Pure code
.text$mn:0000C638 ; Segment permissions: Read/Execute
.text$mn:0000C638 _text$mn        segment para public 'CODE' use32
.text$mn:0000C638                 assume cs:_text$mn
.text$mn:0000C638                 ;org 0C638h
.text$mn:0000C638 ; COMDAT (pick any)
.text$mn:0000C638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C638
.text$mn:0000C638 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C638
.text$mn:0000C638 ; Attributes: bp-based frame
.text$mn:0000C638
.text$mn:0000C638 ; public: struct AssociationInfo * __thiscall std::allocator<struct AssociationInfo>::allocate(unsigned int)
.text$mn:0000C638                 public ?allocate@?$allocator@UAssociationInfo@@@std@@QAEPAUAssociationInfo@@I@Z
.text$mn:0000C638 ?allocate@?$allocator@UAssociationInfo@@@std@@QAEPAUAssociationInfo@@I@Z proc near
.text$mn:0000C638                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<AssociationInfo>>::allocate(uint)+Ep
.text$mn:0000C638
.text$mn:0000C638 var_4           = dword ptr -4
.text$mn:0000C638 arg_0           = dword ptr  8
.text$mn:0000C638
.text$mn:0000C638                 push    ebp
.text$mn:0000C639                 mov     ebp, esp
.text$mn:0000C63B                 push    ecx
.text$mn:0000C63C                 mov     [ebp+var_4], ecx
.text$mn:0000C63F                 push    0
.text$mn:0000C641                 mov     eax, [ebp+arg_0]
.text$mn:0000C644                 push    eax
.text$mn:0000C645                 call    ??$_Allocate@UAssociationInfo@@@std@@YAPAUAssociationInfo@@IPAU1@@Z ; std::_Allocate<AssociationInfo>(uint,AssociationInfo *)
.text$mn:0000C64A                 add     esp, 8
.text$mn:0000C64D                 mov     esp, ebp
.text$mn:0000C64F                 pop     ebp
.text$mn:0000C650                 retn    4
.text$mn:0000C650 ?allocate@?$allocator@UAssociationInfo@@@std@@QAEPAUAssociationInfo@@I@Z endp
.text$mn:0000C650
.text$mn:0000C650 ; ---------------------------------------------------------------------------
.text$mn:0000C653                 align 4
.text$mn:0000C653 _text$mn        ends
.text$mn:0000C653
.text$mn:0000C654 ; ===========================================================================
.text$mn:0000C654
.text$mn:0000C654 ; Segment type: Pure code
.text$mn:0000C654 ; Segment permissions: Read/Execute
.text$mn:0000C654 _text$mn        segment para public 'CODE' use32
.text$mn:0000C654                 assume cs:_text$mn
.text$mn:0000C654                 ;org 0C654h
.text$mn:0000C654 ; COMDAT (pick any)
.text$mn:0000C654                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C654
.text$mn:0000C654 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C654
.text$mn:0000C654 ; Attributes: bp-based frame
.text$mn:0000C654
.text$mn:0000C654 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:0000C654                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:0000C654 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:0000C654                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:0000C654                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p ...
.text$mn:0000C654
.text$mn:0000C654 var_4           = dword ptr -4
.text$mn:0000C654 arg_0           = dword ptr  8
.text$mn:0000C654
.text$mn:0000C654                 push    ebp
.text$mn:0000C655                 mov     ebp, esp
.text$mn:0000C657                 push    ecx
.text$mn:0000C658                 mov     [ebp+var_4], ecx
.text$mn:0000C65B                 push    0
.text$mn:0000C65D                 mov     eax, [ebp+arg_0]
.text$mn:0000C660                 push    eax
.text$mn:0000C661                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:0000C666                 add     esp, 8
.text$mn:0000C669                 mov     esp, ebp
.text$mn:0000C66B                 pop     ebp
.text$mn:0000C66C                 retn    4
.text$mn:0000C66C ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:0000C66C
.text$mn:0000C66C ; ---------------------------------------------------------------------------
.text$mn:0000C66F                 align 10h
.text$mn:0000C66F _text$mn        ends
.text$mn:0000C66F
.text$mn:0000C670 ; ===========================================================================
.text$mn:0000C670
.text$mn:0000C670 ; Segment type: Pure code
.text$mn:0000C670 ; Segment permissions: Read/Execute
.text$mn:0000C670 _text$mn        segment para public 'CODE' use32
.text$mn:0000C670                 assume cs:_text$mn
.text$mn:0000C670                 ;org 0C670h
.text$mn:0000C670 ; COMDAT (pick any)
.text$mn:0000C670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C670
.text$mn:0000C670 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C670
.text$mn:0000C670 ; Attributes: bp-based frame
.text$mn:0000C670
.text$mn:0000C670 ; public: struct foundInfo * __thiscall std::allocator<struct foundInfo>::allocate(unsigned int)
.text$mn:0000C670                 public ?allocate@?$allocator@UfoundInfo@@@std@@QAEPAUfoundInfo@@I@Z
.text$mn:0000C670 ?allocate@?$allocator@UfoundInfo@@@std@@QAEPAUfoundInfo@@I@Z proc near
.text$mn:0000C670                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::allocate(uint)+Ep
.text$mn:0000C670
.text$mn:0000C670 var_4           = dword ptr -4
.text$mn:0000C670 arg_0           = dword ptr  8
.text$mn:0000C670
.text$mn:0000C670                 push    ebp
.text$mn:0000C671                 mov     ebp, esp
.text$mn:0000C673                 push    ecx
.text$mn:0000C674                 mov     [ebp+var_4], ecx
.text$mn:0000C677                 push    0
.text$mn:0000C679                 mov     eax, [ebp+arg_0]
.text$mn:0000C67C                 push    eax
.text$mn:0000C67D                 call    ??$_Allocate@UfoundInfo@@@std@@YAPAUfoundInfo@@IPAU1@@Z ; std::_Allocate<foundInfo>(uint,foundInfo *)
.text$mn:0000C682                 add     esp, 8
.text$mn:0000C685                 mov     esp, ebp
.text$mn:0000C687                 pop     ebp
.text$mn:0000C688                 retn    4
.text$mn:0000C688 ?allocate@?$allocator@UfoundInfo@@@std@@QAEPAUfoundInfo@@I@Z endp
.text$mn:0000C688
.text$mn:0000C688 ; ---------------------------------------------------------------------------
.text$mn:0000C68B                 align 4
.text$mn:0000C68B _text$mn        ends
.text$mn:0000C68B
.text$mn:0000C68C ; ===========================================================================
.text$mn:0000C68C
.text$mn:0000C68C ; Segment type: Pure code
.text$mn:0000C68C ; Segment permissions: Read/Execute
.text$mn:0000C68C _text$mn        segment para public 'CODE' use32
.text$mn:0000C68C                 assume cs:_text$mn
.text$mn:0000C68C                 ;org 0C68Ch
.text$mn:0000C68C ; COMDAT (pick any)
.text$mn:0000C68C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C68C
.text$mn:0000C68C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C68C
.text$mn:0000C68C ; Attributes: bp-based frame
.text$mn:0000C68C
.text$mn:0000C68C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocate(unsigned int)
.text$mn:0000C68C                 public ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000C68C ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000C68C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)+Ep
.text$mn:0000C68C
.text$mn:0000C68C var_4           = dword ptr -4
.text$mn:0000C68C arg_0           = dword ptr  8
.text$mn:0000C68C
.text$mn:0000C68C                 push    ebp
.text$mn:0000C68D                 mov     ebp, esp
.text$mn:0000C68F                 push    ecx
.text$mn:0000C690                 mov     [ebp+var_4], ecx
.text$mn:0000C693                 push    0
.text$mn:0000C695                 mov     eax, [ebp+arg_0]
.text$mn:0000C698                 push    eax
.text$mn:0000C699                 call    ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000C69E                 add     esp, 8
.text$mn:0000C6A1                 mov     esp, ebp
.text$mn:0000C6A3                 pop     ebp
.text$mn:0000C6A4                 retn    4
.text$mn:0000C6A4 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000C6A4
.text$mn:0000C6A4 ; ---------------------------------------------------------------------------
.text$mn:0000C6A7                 align 4
.text$mn:0000C6A7 _text$mn        ends
.text$mn:0000C6A7
.text$mn:0000C6A8 ; ===========================================================================
.text$mn:0000C6A8
.text$mn:0000C6A8 ; Segment type: Pure code
.text$mn:0000C6A8 ; Segment permissions: Read/Execute
.text$mn:0000C6A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000C6A8                 assume cs:_text$mn
.text$mn:0000C6A8                 ;org 0C6A8h
.text$mn:0000C6A8 ; COMDAT (pick any)
.text$mn:0000C6A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C6A8
.text$mn:0000C6A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C6A8
.text$mn:0000C6A8 ; Attributes: bp-based frame
.text$mn:0000C6A8
.text$mn:0000C6A8 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:0000C6A8                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:0000C6A8 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:0000C6A8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:0000C6A8
.text$mn:0000C6A8 var_4           = dword ptr -4
.text$mn:0000C6A8 arg_0           = dword ptr  8
.text$mn:0000C6A8
.text$mn:0000C6A8                 push    ebp
.text$mn:0000C6A9                 mov     ebp, esp
.text$mn:0000C6AB                 push    ecx
.text$mn:0000C6AC                 mov     [ebp+var_4], ecx
.text$mn:0000C6AF                 push    0
.text$mn:0000C6B1                 mov     eax, [ebp+arg_0]
.text$mn:0000C6B4                 push    eax
.text$mn:0000C6B5                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:0000C6BA                 add     esp, 8
.text$mn:0000C6BD                 mov     esp, ebp
.text$mn:0000C6BF                 pop     ebp
.text$mn:0000C6C0                 retn    4
.text$mn:0000C6C0 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:0000C6C0
.text$mn:0000C6C0 ; ---------------------------------------------------------------------------
.text$mn:0000C6C3                 align 4
.text$mn:0000C6C3 _text$mn        ends
.text$mn:0000C6C3
.text$mn:0000C6C4 ; ===========================================================================
.text$mn:0000C6C4
.text$mn:0000C6C4 ; Segment type: Pure code
.text$mn:0000C6C4 ; Segment permissions: Read/Execute
.text$mn:0000C6C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000C6C4                 assume cs:_text$mn
.text$mn:0000C6C4                 ;org 0C6C4h
.text$mn:0000C6C4 ; COMDAT (pick any)
.text$mn:0000C6C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C6C4
.text$mn:0000C6C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C6C4
.text$mn:0000C6C4 ; Attributes: bp-based frame
.text$mn:0000C6C4
.text$mn:0000C6C4 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000C6C4                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000C6C4 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000C6C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:0000C6C4
.text$mn:0000C6C4 var_8           = dword ptr -8
.text$mn:0000C6C4 var_4           = dword ptr -4
.text$mn:0000C6C4 arg_0           = dword ptr  8
.text$mn:0000C6C4 arg_4           = dword ptr  0Ch
.text$mn:0000C6C4 arg_8           = dword ptr  10h
.text$mn:0000C6C4
.text$mn:0000C6C4                 push    ebp
.text$mn:0000C6C5                 mov     ebp, esp
.text$mn:0000C6C7                 sub     esp, 8
.text$mn:0000C6CA                 mov     [ebp+var_4], ecx
.text$mn:0000C6CD                 mov     ecx, [ebp+arg_0]
.text$mn:0000C6D0                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000C6D5                 cmp     eax, [ebp+arg_4]
.text$mn:0000C6D8                 jnb     short loc_C6E2
.text$mn:0000C6DA                 mov     ecx, [ebp+var_4]
.text$mn:0000C6DD                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000C6E2
.text$mn:0000C6E2 loc_C6E2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:0000C6E2                 mov     ecx, [ebp+arg_0]
.text$mn:0000C6E5                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000C6EA                 sub     eax, [ebp+arg_4]
.text$mn:0000C6ED                 mov     [ebp+var_8], eax
.text$mn:0000C6F0                 mov     eax, [ebp+var_8]
.text$mn:0000C6F3                 cmp     eax, [ebp+arg_8]
.text$mn:0000C6F6                 jnb     short loc_C6FE
.text$mn:0000C6F8                 mov     ecx, [ebp+var_8]
.text$mn:0000C6FB                 mov     [ebp+arg_8], ecx
.text$mn:0000C6FE
.text$mn:0000C6FE loc_C6FE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000C6FE                 mov     edx, [ebp+var_4]
.text$mn:0000C701                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000C706                 sub     eax, [edx+14h]
.text$mn:0000C709                 cmp     eax, [ebp+arg_8]
.text$mn:0000C70C                 ja      short loc_C716
.text$mn:0000C70E                 mov     ecx, [ebp+var_4]
.text$mn:0000C711                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000C716
.text$mn:0000C716 loc_C716:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:0000C716                 cmp     [ebp+arg_8], 0
.text$mn:0000C71A                 jbe     short loc_C776
.text$mn:0000C71C                 mov     ecx, [ebp+var_4]
.text$mn:0000C71F                 mov     edx, [ecx+14h]
.text$mn:0000C722                 add     edx, [ebp+arg_8]
.text$mn:0000C725                 mov     [ebp+var_8], edx
.text$mn:0000C728                 push    0
.text$mn:0000C72A                 mov     eax, [ebp+var_8]
.text$mn:0000C72D                 push    eax
.text$mn:0000C72E                 mov     ecx, [ebp+var_4]
.text$mn:0000C731                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000C736                 movzx   ecx, al
.text$mn:0000C739                 test    ecx, ecx
.text$mn:0000C73B                 jz      short loc_C776
.text$mn:0000C73D                 mov     edx, [ebp+arg_8]
.text$mn:0000C740                 push    edx             ; int
.text$mn:0000C741                 mov     ecx, [ebp+arg_0]
.text$mn:0000C744                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C749                 mov     ecx, [ebp+arg_4]
.text$mn:0000C74C                 lea     edx, [eax+ecx*2]
.text$mn:0000C74F                 push    edx             ; Src
.text$mn:0000C750                 mov     ecx, [ebp+var_4]
.text$mn:0000C753                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C758                 mov     ecx, [ebp+var_4]
.text$mn:0000C75B                 mov     edx, [ecx+14h]
.text$mn:0000C75E                 lea     eax, [eax+edx*2]
.text$mn:0000C761                 push    eax             ; Dst
.text$mn:0000C762                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C767                 add     esp, 0Ch
.text$mn:0000C76A                 mov     ecx, [ebp+var_8]
.text$mn:0000C76D                 push    ecx
.text$mn:0000C76E                 mov     ecx, [ebp+var_4]
.text$mn:0000C771                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000C776
.text$mn:0000C776 loc_C776:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:0000C776                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:0000C776                 mov     eax, [ebp+var_4]
.text$mn:0000C779                 mov     esp, ebp
.text$mn:0000C77B                 pop     ebp
.text$mn:0000C77C                 retn    0Ch
.text$mn:0000C77C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000C77C
.text$mn:0000C77C ; ---------------------------------------------------------------------------
.text$mn:0000C77F                 align 10h
.text$mn:0000C77F _text$mn        ends
.text$mn:0000C77F
.text$mn:0000C780 ; ===========================================================================
.text$mn:0000C780
.text$mn:0000C780 ; Segment type: Pure code
.text$mn:0000C780 ; Segment permissions: Read/Execute
.text$mn:0000C780 _text$mn        segment para public 'CODE' use32
.text$mn:0000C780                 assume cs:_text$mn
.text$mn:0000C780                 ;org 0C780h
.text$mn:0000C780 ; COMDAT (pick any)
.text$mn:0000C780                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C780
.text$mn:0000C780 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C780
.text$mn:0000C780 ; Attributes: bp-based frame
.text$mn:0000C780
.text$mn:0000C780 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:0000C780                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000C780 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000C780                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:0000C780
.text$mn:0000C780 var_4           = dword ptr -4
.text$mn:0000C780 Str             = dword ptr  8
.text$mn:0000C780
.text$mn:0000C780                 push    ebp
.text$mn:0000C781                 mov     ebp, esp
.text$mn:0000C783                 push    ecx
.text$mn:0000C784                 mov     [ebp+var_4], ecx
.text$mn:0000C787                 push    43Eh            ; unsigned int
.text$mn:0000C78C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C791                 mov     eax, [ebp+Str]
.text$mn:0000C794                 push    eax             ; int
.text$mn:0000C795                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000C79A                 add     esp, 0Ch
.text$mn:0000C79D                 mov     ecx, [ebp+Str]
.text$mn:0000C7A0                 push    ecx             ; Str
.text$mn:0000C7A1                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000C7A6                 add     esp, 4
.text$mn:0000C7A9                 push    eax             ; int
.text$mn:0000C7AA                 mov     edx, [ebp+Str]
.text$mn:0000C7AD                 push    edx             ; Src
.text$mn:0000C7AE                 mov     ecx, [ebp+var_4]
.text$mn:0000C7B1                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:0000C7B6                 mov     esp, ebp
.text$mn:0000C7B8                 pop     ebp
.text$mn:0000C7B9                 retn    4
.text$mn:0000C7B9 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:0000C7B9
.text$mn:0000C7B9 _text$mn        ends
.text$mn:0000C7B9
.text$mn:0000C7BC ; ===========================================================================
.text$mn:0000C7BC
.text$mn:0000C7BC ; Segment type: Pure code
.text$mn:0000C7BC ; Segment permissions: Read/Execute
.text$mn:0000C7BC _text$mn        segment para public 'CODE' use32
.text$mn:0000C7BC                 assume cs:_text$mn
.text$mn:0000C7BC                 ;org 0C7BCh
.text$mn:0000C7BC ; COMDAT (pick any)
.text$mn:0000C7BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C7BC
.text$mn:0000C7BC ; =============== S U B R O U T I N E =======================================
.text$mn:0000C7BC
.text$mn:0000C7BC ; Attributes: bp-based frame
.text$mn:0000C7BC
.text$mn:0000C7BC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:0000C7BC                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:0000C7BC ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:0000C7BC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:0000C7BC
.text$mn:0000C7BC var_8           = dword ptr -8
.text$mn:0000C7BC var_4           = dword ptr -4
.text$mn:0000C7BC Src             = dword ptr  8
.text$mn:0000C7BC arg_4           = dword ptr  0Ch
.text$mn:0000C7BC
.text$mn:0000C7BC                 push    ebp
.text$mn:0000C7BD                 mov     ebp, esp
.text$mn:0000C7BF                 sub     esp, 8
.text$mn:0000C7C2                 mov     [ebp+var_4], ecx
.text$mn:0000C7C5                 cmp     [ebp+arg_4], 0
.text$mn:0000C7C9                 jz      short loc_C7E1
.text$mn:0000C7CB                 push    42Ah            ; unsigned int
.text$mn:0000C7D0                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C7D5                 mov     eax, [ebp+Src]
.text$mn:0000C7D8                 push    eax             ; int
.text$mn:0000C7D9                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000C7DE                 add     esp, 0Ch
.text$mn:0000C7E1
.text$mn:0000C7E1 loc_C7E1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:0000C7E1                 mov     ecx, [ebp+Src]
.text$mn:0000C7E4                 push    ecx
.text$mn:0000C7E5                 mov     ecx, [ebp+var_4]
.text$mn:0000C7E8                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000C7ED                 movzx   edx, al
.text$mn:0000C7F0                 test    edx, edx
.text$mn:0000C7F2                 jz      short loc_C816
.text$mn:0000C7F4                 mov     eax, [ebp+arg_4]
.text$mn:0000C7F7                 push    eax
.text$mn:0000C7F8                 mov     ecx, [ebp+var_4]
.text$mn:0000C7FB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C800                 mov     ecx, [ebp+Src]
.text$mn:0000C803                 sub     ecx, eax
.text$mn:0000C805                 sar     ecx, 1
.text$mn:0000C807                 push    ecx
.text$mn:0000C808                 mov     edx, [ebp+var_4]
.text$mn:0000C80B                 push    edx
.text$mn:0000C80C                 mov     ecx, [ebp+var_4]
.text$mn:0000C80F                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000C814                 jmp     short loc_C887
.text$mn:0000C816 ; ---------------------------------------------------------------------------
.text$mn:0000C816
.text$mn:0000C816 loc_C816:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:0000C816                 mov     eax, [ebp+var_4]
.text$mn:0000C819                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000C81F                 sub     ecx, [eax+14h]
.text$mn:0000C822                 cmp     ecx, [ebp+arg_4]
.text$mn:0000C825                 ja      short loc_C82F
.text$mn:0000C827                 mov     ecx, [ebp+var_4]
.text$mn:0000C82A                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000C82F
.text$mn:0000C82F loc_C82F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:0000C82F                 cmp     [ebp+arg_4], 0
.text$mn:0000C833                 jbe     short loc_C884
.text$mn:0000C835                 mov     edx, [ebp+var_4]
.text$mn:0000C838                 mov     eax, [edx+14h]
.text$mn:0000C83B                 add     eax, [ebp+arg_4]
.text$mn:0000C83E                 mov     [ebp+var_8], eax
.text$mn:0000C841                 push    0
.text$mn:0000C843                 mov     ecx, [ebp+var_8]
.text$mn:0000C846                 push    ecx
.text$mn:0000C847                 mov     ecx, [ebp+var_4]
.text$mn:0000C84A                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000C84F                 movzx   edx, al
.text$mn:0000C852                 test    edx, edx
.text$mn:0000C854                 jz      short loc_C884
.text$mn:0000C856                 mov     eax, [ebp+arg_4]
.text$mn:0000C859                 push    eax             ; int
.text$mn:0000C85A                 mov     ecx, [ebp+Src]
.text$mn:0000C85D                 push    ecx             ; Src
.text$mn:0000C85E                 mov     ecx, [ebp+var_4]
.text$mn:0000C861                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000C866                 mov     edx, [ebp+var_4]
.text$mn:0000C869                 mov     ecx, [edx+14h]
.text$mn:0000C86C                 lea     edx, [eax+ecx*2]
.text$mn:0000C86F                 push    edx             ; Dst
.text$mn:0000C870                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000C875                 add     esp, 0Ch
.text$mn:0000C878                 mov     eax, [ebp+var_8]
.text$mn:0000C87B                 push    eax
.text$mn:0000C87C                 mov     ecx, [ebp+var_4]
.text$mn:0000C87F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000C884
.text$mn:0000C884 loc_C884:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:0000C884                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:0000C884                 mov     eax, [ebp+var_4]
.text$mn:0000C887
.text$mn:0000C887 loc_C887:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:0000C887                 mov     esp, ebp
.text$mn:0000C889                 pop     ebp
.text$mn:0000C88A                 retn    8
.text$mn:0000C88A ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000C88A
.text$mn:0000C88A ; ---------------------------------------------------------------------------
.text$mn:0000C88D                 align 10h
.text$mn:0000C88D _text$mn        ends
.text$mn:0000C88D
.text$mn:0000C890 ; ===========================================================================
.text$mn:0000C890
.text$mn:0000C890 ; Segment type: Pure code
.text$mn:0000C890 ; Segment permissions: Read/Execute
.text$mn:0000C890 _text$mn        segment para public 'CODE' use32
.text$mn:0000C890                 assume cs:_text$mn
.text$mn:0000C890                 ;org 0C890h
.text$mn:0000C890 ; COMDAT (pick any)
.text$mn:0000C890                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C890
.text$mn:0000C890 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C890
.text$mn:0000C890 ; Attributes: bp-based frame
.text$mn:0000C890
.text$mn:0000C890 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:0000C890                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000C890 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000C890                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:0000C890
.text$mn:0000C890 Size            = dword ptr -8
.text$mn:0000C890 var_4           = dword ptr -4
.text$mn:0000C890 arg_0           = dword ptr  8
.text$mn:0000C890 arg_4           = dword ptr  0Ch
.text$mn:0000C890 arg_8           = dword ptr  10h
.text$mn:0000C890
.text$mn:0000C890                 push    ebp
.text$mn:0000C891                 mov     ebp, esp
.text$mn:0000C893                 sub     esp, 8
.text$mn:0000C896                 mov     [ebp+var_4], ecx
.text$mn:0000C899                 mov     ecx, [ebp+arg_0]
.text$mn:0000C89C                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000C8A1                 cmp     eax, [ebp+arg_4]
.text$mn:0000C8A4                 jnb     short loc_C8AE
.text$mn:0000C8A6                 mov     ecx, [ebp+var_4]
.text$mn:0000C8A9                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000C8AE
.text$mn:0000C8AE loc_C8AE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:0000C8AE                 mov     ecx, [ebp+arg_0]
.text$mn:0000C8B1                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:0000C8B6                 sub     eax, [ebp+arg_4]
.text$mn:0000C8B9                 mov     [ebp+Size], eax
.text$mn:0000C8BC                 mov     eax, [ebp+arg_8]
.text$mn:0000C8BF                 cmp     eax, [ebp+Size]
.text$mn:0000C8C2                 jnb     short loc_C8CA
.text$mn:0000C8C4                 mov     ecx, [ebp+arg_8]
.text$mn:0000C8C7                 mov     [ebp+Size], ecx
.text$mn:0000C8CA
.text$mn:0000C8CA loc_C8CA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:0000C8CA                 mov     edx, [ebp+var_4]
.text$mn:0000C8CD                 cmp     edx, [ebp+arg_0]
.text$mn:0000C8D0                 jnz     short loc_C8F1
.text$mn:0000C8D2                 mov     eax, [ebp+arg_4]
.text$mn:0000C8D5                 add     eax, [ebp+Size]
.text$mn:0000C8D8                 push    eax
.text$mn:0000C8D9                 mov     ecx, [ebp+var_4]
.text$mn:0000C8DC                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:0000C8E1                 mov     ecx, [ebp+arg_4]
.text$mn:0000C8E4                 push    ecx
.text$mn:0000C8E5                 push    0
.text$mn:0000C8E7                 mov     ecx, [ebp+var_4]
.text$mn:0000C8EA                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:0000C8EF                 jmp     short loc_C933
.text$mn:0000C8F1 ; ---------------------------------------------------------------------------
.text$mn:0000C8F1
.text$mn:0000C8F1 loc_C8F1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:0000C8F1                 push    0
.text$mn:0000C8F3                 mov     edx, [ebp+Size]
.text$mn:0000C8F6                 push    edx
.text$mn:0000C8F7                 mov     ecx, [ebp+var_4]
.text$mn:0000C8FA                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000C8FF                 movzx   eax, al
.text$mn:0000C902                 test    eax, eax
.text$mn:0000C904                 jz      short loc_C933
.text$mn:0000C906                 mov     ecx, [ebp+Size]
.text$mn:0000C909                 push    ecx             ; Size
.text$mn:0000C90A                 mov     ecx, [ebp+arg_0]
.text$mn:0000C90D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000C912                 add     eax, [ebp+arg_4]
.text$mn:0000C915                 push    eax             ; Src
.text$mn:0000C916                 mov     ecx, [ebp+var_4]
.text$mn:0000C919                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000C91E                 push    eax             ; Dst
.text$mn:0000C91F                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000C924                 add     esp, 0Ch
.text$mn:0000C927                 mov     edx, [ebp+Size]
.text$mn:0000C92A                 push    edx
.text$mn:0000C92B                 mov     ecx, [ebp+var_4]
.text$mn:0000C92E                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000C933
.text$mn:0000C933 loc_C933:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:0000C933                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:0000C933                 mov     eax, [ebp+var_4]
.text$mn:0000C936                 mov     esp, ebp
.text$mn:0000C938                 pop     ebp
.text$mn:0000C939                 retn    0Ch
.text$mn:0000C939 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000C939
.text$mn:0000C939 _text$mn        ends
.text$mn:0000C939
.text$mn:0000C93C ; ===========================================================================
.text$mn:0000C93C
.text$mn:0000C93C ; Segment type: Pure code
.text$mn:0000C93C ; Segment permissions: Read/Execute
.text$mn:0000C93C _text$mn        segment para public 'CODE' use32
.text$mn:0000C93C                 assume cs:_text$mn
.text$mn:0000C93C                 ;org 0C93Ch
.text$mn:0000C93C ; COMDAT (pick any)
.text$mn:0000C93C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C93C
.text$mn:0000C93C ; =============== S U B R O U T I N E =======================================
.text$mn:0000C93C
.text$mn:0000C93C ; Attributes: bp-based frame
.text$mn:0000C93C
.text$mn:0000C93C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:0000C93C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:0000C93C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:0000C93C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:0000C93C
.text$mn:0000C93C var_4           = dword ptr -4
.text$mn:0000C93C Str             = dword ptr  8
.text$mn:0000C93C
.text$mn:0000C93C                 push    ebp
.text$mn:0000C93D                 mov     ebp, esp
.text$mn:0000C93F                 push    ecx
.text$mn:0000C940                 mov     [ebp+var_4], ecx
.text$mn:0000C943                 push    490h            ; unsigned int
.text$mn:0000C948                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C94D                 mov     eax, [ebp+Str]
.text$mn:0000C950                 push    eax             ; int
.text$mn:0000C951                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000C956                 add     esp, 0Ch
.text$mn:0000C959                 mov     ecx, [ebp+Str]
.text$mn:0000C95C                 push    ecx             ; Str
.text$mn:0000C95D                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:0000C962                 add     esp, 4
.text$mn:0000C965                 push    eax             ; Size
.text$mn:0000C966                 mov     edx, [ebp+Str]
.text$mn:0000C969                 push    edx             ; Src
.text$mn:0000C96A                 mov     ecx, [ebp+var_4]
.text$mn:0000C96D                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:0000C972                 mov     esp, ebp
.text$mn:0000C974                 pop     ebp
.text$mn:0000C975                 retn    4
.text$mn:0000C975 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:0000C975
.text$mn:0000C975 _text$mn        ends
.text$mn:0000C975
.text$mn:0000C978 ; ===========================================================================
.text$mn:0000C978
.text$mn:0000C978 ; Segment type: Pure code
.text$mn:0000C978 ; Segment permissions: Read/Execute
.text$mn:0000C978 _text$mn        segment para public 'CODE' use32
.text$mn:0000C978                 assume cs:_text$mn
.text$mn:0000C978                 ;org 0C978h
.text$mn:0000C978 ; COMDAT (pick any)
.text$mn:0000C978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000C978
.text$mn:0000C978 ; =============== S U B R O U T I N E =======================================
.text$mn:0000C978
.text$mn:0000C978 ; Attributes: bp-based frame
.text$mn:0000C978
.text$mn:0000C978 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:0000C978                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:0000C978 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:0000C978                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:0000C978
.text$mn:0000C978 var_4           = dword ptr -4
.text$mn:0000C978 Src             = dword ptr  8
.text$mn:0000C978 Size            = dword ptr  0Ch
.text$mn:0000C978
.text$mn:0000C978                 push    ebp
.text$mn:0000C979                 mov     ebp, esp
.text$mn:0000C97B                 push    ecx
.text$mn:0000C97C                 mov     [ebp+var_4], ecx
.text$mn:0000C97F                 cmp     [ebp+Size], 0
.text$mn:0000C983                 jz      short loc_C99B
.text$mn:0000C985                 push    47Fh            ; unsigned int
.text$mn:0000C98A                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000C98F                 mov     eax, [ebp+Src]
.text$mn:0000C992                 push    eax             ; int
.text$mn:0000C993                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000C998                 add     esp, 0Ch
.text$mn:0000C99B
.text$mn:0000C99B loc_C99B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:0000C99B                 mov     ecx, [ebp+Src]
.text$mn:0000C99E                 push    ecx
.text$mn:0000C99F                 mov     ecx, [ebp+var_4]
.text$mn:0000C9A2                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:0000C9A7                 movzx   edx, al
.text$mn:0000C9AA                 test    edx, edx
.text$mn:0000C9AC                 jz      short loc_C9CE
.text$mn:0000C9AE                 mov     eax, [ebp+Size]
.text$mn:0000C9B1                 push    eax
.text$mn:0000C9B2                 mov     ecx, [ebp+var_4]
.text$mn:0000C9B5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000C9BA                 mov     ecx, [ebp+Src]
.text$mn:0000C9BD                 sub     ecx, eax
.text$mn:0000C9BF                 push    ecx
.text$mn:0000C9C0                 mov     edx, [ebp+var_4]
.text$mn:0000C9C3                 push    edx
.text$mn:0000C9C4                 mov     ecx, [ebp+var_4]
.text$mn:0000C9C7                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:0000C9CC                 jmp     short loc_CA0B
.text$mn:0000C9CE ; ---------------------------------------------------------------------------
.text$mn:0000C9CE
.text$mn:0000C9CE loc_C9CE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:0000C9CE                 push    0
.text$mn:0000C9D0                 mov     eax, [ebp+Size]
.text$mn:0000C9D3                 push    eax
.text$mn:0000C9D4                 mov     ecx, [ebp+var_4]
.text$mn:0000C9D7                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:0000C9DC                 movzx   ecx, al
.text$mn:0000C9DF                 test    ecx, ecx
.text$mn:0000C9E1                 jz      short loc_CA08
.text$mn:0000C9E3                 mov     edx, [ebp+Size]
.text$mn:0000C9E6                 push    edx             ; Size
.text$mn:0000C9E7                 mov     eax, [ebp+Src]
.text$mn:0000C9EA                 push    eax             ; Src
.text$mn:0000C9EB                 mov     ecx, [ebp+var_4]
.text$mn:0000C9EE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000C9F3                 push    eax             ; Dst
.text$mn:0000C9F4                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000C9F9                 add     esp, 0Ch
.text$mn:0000C9FC                 mov     ecx, [ebp+Size]
.text$mn:0000C9FF                 push    ecx
.text$mn:0000CA00                 mov     ecx, [ebp+var_4]
.text$mn:0000CA03                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000CA08
.text$mn:0000CA08 loc_CA08:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:0000CA08                 mov     eax, [ebp+var_4]
.text$mn:0000CA0B
.text$mn:0000CA0B loc_CA0B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:0000CA0B                 mov     esp, ebp
.text$mn:0000CA0D                 pop     ebp
.text$mn:0000CA0E                 retn    8
.text$mn:0000CA0E ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:0000CA0E
.text$mn:0000CA0E ; ---------------------------------------------------------------------------
.text$mn:0000CA11                 align 4
.text$mn:0000CA11 _text$mn        ends
.text$mn:0000CA11
.text$mn:0000CA14 ; ===========================================================================
.text$mn:0000CA14
.text$mn:0000CA14 ; Segment type: Pure code
.text$mn:0000CA14 ; Segment permissions: Read/Execute
.text$mn:0000CA14 _text$mn        segment para public 'CODE' use32
.text$mn:0000CA14                 assume cs:_text$mn
.text$mn:0000CA14                 ;org 0CA14h
.text$mn:0000CA14 ; COMDAT (pick any)
.text$mn:0000CA14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CA14
.text$mn:0000CA14 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CA14
.text$mn:0000CA14 ; Attributes: bp-based frame
.text$mn:0000CA14
.text$mn:0000CA14 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000CA14                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:0000CA14 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:0000CA14                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+66p
.text$mn:0000CA14
.text$mn:0000CA14 var_4           = dword ptr -4
.text$mn:0000CA14 arg_0           = dword ptr  8
.text$mn:0000CA14
.text$mn:0000CA14                 push    ebp
.text$mn:0000CA15                 mov     ebp, esp
.text$mn:0000CA17                 push    ecx
.text$mn:0000CA18                 mov     [ebp+var_4], ecx
.text$mn:0000CA1B                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:0000CA20                 push    eax
.text$mn:0000CA21                 push    0
.text$mn:0000CA23                 mov     ecx, [ebp+arg_0]
.text$mn:0000CA26                 push    ecx
.text$mn:0000CA27                 mov     ecx, [ebp+var_4]
.text$mn:0000CA2A                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000CA2F                 mov     esp, ebp
.text$mn:0000CA31                 pop     ebp
.text$mn:0000CA32                 retn    4
.text$mn:0000CA32 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000CA32
.text$mn:0000CA32 ; ---------------------------------------------------------------------------
.text$mn:0000CA35                 align 4
.text$mn:0000CA35 _text$mn        ends
.text$mn:0000CA35
.text$mn:0000CA38 ; ===========================================================================
.text$mn:0000CA38
.text$mn:0000CA38 ; Segment type: Pure code
.text$mn:0000CA38 ; Segment permissions: Read/Execute
.text$mn:0000CA38 _text$mn        segment para public 'CODE' use32
.text$mn:0000CA38                 assume cs:_text$mn
.text$mn:0000CA38                 ;org 0CA38h
.text$mn:0000CA38 ; COMDAT (pick any)
.text$mn:0000CA38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CA38
.text$mn:0000CA38 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CA38
.text$mn:0000CA38 ; Attributes: bp-based frame
.text$mn:0000CA38
.text$mn:0000CA38 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000CA38                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:0000CA38 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:0000CA38                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:0000CA38                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p ...
.text$mn:0000CA38
.text$mn:0000CA38 var_8           = dword ptr -8
.text$mn:0000CA38 var_4           = dword ptr -4
.text$mn:0000CA38 arg_0           = dword ptr  8
.text$mn:0000CA38 arg_4           = dword ptr  0Ch
.text$mn:0000CA38 arg_8           = dword ptr  10h
.text$mn:0000CA38
.text$mn:0000CA38                 push    ebp
.text$mn:0000CA39                 mov     ebp, esp
.text$mn:0000CA3B                 sub     esp, 8
.text$mn:0000CA3E                 mov     [ebp+var_4], ecx
.text$mn:0000CA41                 mov     ecx, [ebp+arg_0]
.text$mn:0000CA44                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000CA49                 cmp     eax, [ebp+arg_4]
.text$mn:0000CA4C                 jnb     short loc_CA56
.text$mn:0000CA4E                 mov     ecx, [ebp+var_4]
.text$mn:0000CA51                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000CA56
.text$mn:0000CA56 loc_CA56:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:0000CA56                 mov     ecx, [ebp+arg_0]
.text$mn:0000CA59                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000CA5E                 sub     eax, [ebp+arg_4]
.text$mn:0000CA61                 mov     [ebp+var_8], eax
.text$mn:0000CA64                 mov     eax, [ebp+arg_8]
.text$mn:0000CA67                 cmp     eax, [ebp+var_8]
.text$mn:0000CA6A                 jnb     short loc_CA72
.text$mn:0000CA6C                 mov     ecx, [ebp+arg_8]
.text$mn:0000CA6F                 mov     [ebp+var_8], ecx
.text$mn:0000CA72
.text$mn:0000CA72 loc_CA72:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:0000CA72                 mov     edx, [ebp+var_4]
.text$mn:0000CA75                 cmp     edx, [ebp+arg_0]
.text$mn:0000CA78                 jnz     short loc_CA99
.text$mn:0000CA7A                 mov     eax, [ebp+arg_4]
.text$mn:0000CA7D                 add     eax, [ebp+var_8]
.text$mn:0000CA80                 push    eax
.text$mn:0000CA81                 mov     ecx, [ebp+var_4]
.text$mn:0000CA84                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:0000CA89                 mov     ecx, [ebp+arg_4]
.text$mn:0000CA8C                 push    ecx
.text$mn:0000CA8D                 push    0
.text$mn:0000CA8F                 mov     ecx, [ebp+var_4]
.text$mn:0000CA92                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000CA97                 jmp     short loc_CADE
.text$mn:0000CA99 ; ---------------------------------------------------------------------------
.text$mn:0000CA99
.text$mn:0000CA99 loc_CA99:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:0000CA99                 push    0
.text$mn:0000CA9B                 mov     edx, [ebp+var_8]
.text$mn:0000CA9E                 push    edx
.text$mn:0000CA9F                 mov     ecx, [ebp+var_4]
.text$mn:0000CAA2                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000CAA7                 movzx   eax, al
.text$mn:0000CAAA                 test    eax, eax
.text$mn:0000CAAC                 jz      short loc_CADE
.text$mn:0000CAAE                 mov     ecx, [ebp+var_8]
.text$mn:0000CAB1                 push    ecx             ; int
.text$mn:0000CAB2                 mov     ecx, [ebp+arg_0]
.text$mn:0000CAB5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CABA                 mov     edx, [ebp+arg_4]
.text$mn:0000CABD                 lea     eax, [eax+edx*2]
.text$mn:0000CAC0                 push    eax             ; Src
.text$mn:0000CAC1                 mov     ecx, [ebp+var_4]
.text$mn:0000CAC4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CAC9                 push    eax             ; Dst
.text$mn:0000CACA                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000CACF                 add     esp, 0Ch
.text$mn:0000CAD2                 mov     ecx, [ebp+var_8]
.text$mn:0000CAD5                 push    ecx
.text$mn:0000CAD6                 mov     ecx, [ebp+var_4]
.text$mn:0000CAD9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000CADE
.text$mn:0000CADE loc_CADE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:0000CADE                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:0000CADE                 mov     eax, [ebp+var_4]
.text$mn:0000CAE1                 mov     esp, ebp
.text$mn:0000CAE3                 pop     ebp
.text$mn:0000CAE4                 retn    0Ch
.text$mn:0000CAE4 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000CAE4
.text$mn:0000CAE4 ; ---------------------------------------------------------------------------
.text$mn:0000CAE7                 align 4
.text$mn:0000CAE7 _text$mn        ends
.text$mn:0000CAE7
.text$mn:0000CAE8 ; ===========================================================================
.text$mn:0000CAE8
.text$mn:0000CAE8 ; Segment type: Pure code
.text$mn:0000CAE8 ; Segment permissions: Read/Execute
.text$mn:0000CAE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000CAE8                 assume cs:_text$mn
.text$mn:0000CAE8                 ;org 0CAE8h
.text$mn:0000CAE8 ; COMDAT (pick any)
.text$mn:0000CAE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CAE8
.text$mn:0000CAE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CAE8
.text$mn:0000CAE8 ; Attributes: bp-based frame
.text$mn:0000CAE8
.text$mn:0000CAE8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:0000CAE8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:0000CAE8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:0000CAE8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:0000CAE8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:0000CAE8
.text$mn:0000CAE8 var_4           = dword ptr -4
.text$mn:0000CAE8 Str             = dword ptr  8
.text$mn:0000CAE8
.text$mn:0000CAE8                 push    ebp
.text$mn:0000CAE9                 mov     ebp, esp
.text$mn:0000CAEB                 push    ecx
.text$mn:0000CAEC                 mov     [ebp+var_4], ecx
.text$mn:0000CAEF                 push    490h            ; unsigned int
.text$mn:0000CAF4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000CAF9                 mov     eax, [ebp+Str]
.text$mn:0000CAFC                 push    eax             ; int
.text$mn:0000CAFD                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CB02                 add     esp, 0Ch
.text$mn:0000CB05                 mov     ecx, [ebp+Str]
.text$mn:0000CB08                 push    ecx             ; Str
.text$mn:0000CB09                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000CB0E                 add     esp, 4
.text$mn:0000CB11                 push    eax             ; int
.text$mn:0000CB12                 mov     edx, [ebp+Str]
.text$mn:0000CB15                 push    edx             ; Src
.text$mn:0000CB16                 mov     ecx, [ebp+var_4]
.text$mn:0000CB19                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:0000CB1E                 mov     esp, ebp
.text$mn:0000CB20                 pop     ebp
.text$mn:0000CB21                 retn    4
.text$mn:0000CB21 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:0000CB21
.text$mn:0000CB21 _text$mn        ends
.text$mn:0000CB21
.text$mn:0000CB24 ; ===========================================================================
.text$mn:0000CB24
.text$mn:0000CB24 ; Segment type: Pure code
.text$mn:0000CB24 ; Segment permissions: Read/Execute
.text$mn:0000CB24 _text$mn        segment para public 'CODE' use32
.text$mn:0000CB24                 assume cs:_text$mn
.text$mn:0000CB24                 ;org 0CB24h
.text$mn:0000CB24 ; COMDAT (pick any)
.text$mn:0000CB24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CB24
.text$mn:0000CB24 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CB24
.text$mn:0000CB24 ; Attributes: bp-based frame
.text$mn:0000CB24
.text$mn:0000CB24 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:0000CB24                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:0000CB24 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:0000CB24                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:0000CB24
.text$mn:0000CB24 var_4           = dword ptr -4
.text$mn:0000CB24 Src             = dword ptr  8
.text$mn:0000CB24 arg_4           = dword ptr  0Ch
.text$mn:0000CB24
.text$mn:0000CB24                 push    ebp
.text$mn:0000CB25                 mov     ebp, esp
.text$mn:0000CB27                 push    ecx
.text$mn:0000CB28                 mov     [ebp+var_4], ecx
.text$mn:0000CB2B                 cmp     [ebp+arg_4], 0
.text$mn:0000CB2F                 jz      short loc_CB47
.text$mn:0000CB31                 push    47Fh            ; unsigned int
.text$mn:0000CB36                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000CB3B                 mov     eax, [ebp+Src]
.text$mn:0000CB3E                 push    eax             ; int
.text$mn:0000CB3F                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CB44                 add     esp, 0Ch
.text$mn:0000CB47
.text$mn:0000CB47 loc_CB47:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:0000CB47                 mov     ecx, [ebp+Src]
.text$mn:0000CB4A                 push    ecx
.text$mn:0000CB4B                 mov     ecx, [ebp+var_4]
.text$mn:0000CB4E                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000CB53                 movzx   edx, al
.text$mn:0000CB56                 test    edx, edx
.text$mn:0000CB58                 jz      short loc_CB7C
.text$mn:0000CB5A                 mov     eax, [ebp+arg_4]
.text$mn:0000CB5D                 push    eax
.text$mn:0000CB5E                 mov     ecx, [ebp+var_4]
.text$mn:0000CB61                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CB66                 mov     ecx, [ebp+Src]
.text$mn:0000CB69                 sub     ecx, eax
.text$mn:0000CB6B                 sar     ecx, 1
.text$mn:0000CB6D                 push    ecx
.text$mn:0000CB6E                 mov     edx, [ebp+var_4]
.text$mn:0000CB71                 push    edx
.text$mn:0000CB72                 mov     ecx, [ebp+var_4]
.text$mn:0000CB75                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000CB7A                 jmp     short loc_CBB9
.text$mn:0000CB7C ; ---------------------------------------------------------------------------
.text$mn:0000CB7C
.text$mn:0000CB7C loc_CB7C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:0000CB7C                 push    0
.text$mn:0000CB7E                 mov     eax, [ebp+arg_4]
.text$mn:0000CB81                 push    eax
.text$mn:0000CB82                 mov     ecx, [ebp+var_4]
.text$mn:0000CB85                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000CB8A                 movzx   ecx, al
.text$mn:0000CB8D                 test    ecx, ecx
.text$mn:0000CB8F                 jz      short loc_CBB6
.text$mn:0000CB91                 mov     edx, [ebp+arg_4]
.text$mn:0000CB94                 push    edx             ; int
.text$mn:0000CB95                 mov     eax, [ebp+Src]
.text$mn:0000CB98                 push    eax             ; Src
.text$mn:0000CB99                 mov     ecx, [ebp+var_4]
.text$mn:0000CB9C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CBA1                 push    eax             ; Dst
.text$mn:0000CBA2                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000CBA7                 add     esp, 0Ch
.text$mn:0000CBAA                 mov     ecx, [ebp+arg_4]
.text$mn:0000CBAD                 push    ecx
.text$mn:0000CBAE                 mov     ecx, [ebp+var_4]
.text$mn:0000CBB1                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000CBB6
.text$mn:0000CBB6 loc_CBB6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:0000CBB6                 mov     eax, [ebp+var_4]
.text$mn:0000CBB9
.text$mn:0000CBB9 loc_CBB9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:0000CBB9                 mov     esp, ebp
.text$mn:0000CBBB                 pop     ebp
.text$mn:0000CBBC                 retn    8
.text$mn:0000CBBC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:0000CBBC
.text$mn:0000CBBC ; ---------------------------------------------------------------------------
.text$mn:0000CBBF                 align 10h
.text$mn:0000CBBF _text$mn        ends
.text$mn:0000CBBF
.text$mn:0000CBC0 ; ===========================================================================
.text$mn:0000CBC0
.text$mn:0000CBC0 ; Segment type: Pure code
.text$mn:0000CBC0 ; Segment permissions: Read/Execute
.text$mn:0000CBC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000CBC0                 assume cs:_text$mn
.text$mn:0000CBC0                 ;org 0CBC0h
.text$mn:0000CBC0 ; COMDAT (pick any)
.text$mn:0000CBC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CBC0
.text$mn:0000CBC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CBC0
.text$mn:0000CBC0 ; Attributes: bp-based frame
.text$mn:0000CBC0
.text$mn:0000CBC0 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:0000CBC0                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:0000CBC0 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:0000CBC0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:0000CBC0
.text$mn:0000CBC0 arg_0           = dword ptr  8
.text$mn:0000CBC0 arg_4           = dword ptr  0Ch
.text$mn:0000CBC0
.text$mn:0000CBC0                 push    ebp
.text$mn:0000CBC1                 mov     ebp, esp
.text$mn:0000CBC3                 mov     eax, [ebp+arg_0]
.text$mn:0000CBC6                 mov     ecx, [ebp+arg_4]
.text$mn:0000CBC9                 mov     dl, [ecx]
.text$mn:0000CBCB                 mov     [eax], dl
.text$mn:0000CBCD                 pop     ebp
.text$mn:0000CBCE                 retn
.text$mn:0000CBCE ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:0000CBCE
.text$mn:0000CBCE ; ---------------------------------------------------------------------------
.text$mn:0000CBCF                 align 10h
.text$mn:0000CBCF _text$mn        ends
.text$mn:0000CBCF
.text$mn:0000CBD0 ; ===========================================================================
.text$mn:0000CBD0
.text$mn:0000CBD0 ; Segment type: Pure code
.text$mn:0000CBD0 ; Segment permissions: Read/Execute
.text$mn:0000CBD0 _text$mn        segment para public 'CODE' use32
.text$mn:0000CBD0                 assume cs:_text$mn
.text$mn:0000CBD0                 ;org 0CBD0h
.text$mn:0000CBD0 ; COMDAT (pick any)
.text$mn:0000CBD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CBD0
.text$mn:0000CBD0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CBD0
.text$mn:0000CBD0 ; Attributes: bp-based frame
.text$mn:0000CBD0
.text$mn:0000CBD0 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:0000CBD0                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:0000CBD0 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:0000CBD0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:0000CBD0
.text$mn:0000CBD0 arg_0           = dword ptr  8
.text$mn:0000CBD0 arg_4           = dword ptr  0Ch
.text$mn:0000CBD0
.text$mn:0000CBD0                 push    ebp
.text$mn:0000CBD1                 mov     ebp, esp
.text$mn:0000CBD3                 mov     eax, [ebp+arg_0]
.text$mn:0000CBD6                 mov     ecx, [ebp+arg_4]
.text$mn:0000CBD9                 mov     dx, [ecx]
.text$mn:0000CBDC                 mov     [eax], dx
.text$mn:0000CBDF                 pop     ebp
.text$mn:0000CBE0                 retn
.text$mn:0000CBE0 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:0000CBE0
.text$mn:0000CBE0 ; ---------------------------------------------------------------------------
.text$mn:0000CBE1                 align 4
.text$mn:0000CBE1 _text$mn        ends
.text$mn:0000CBE1
.text$mn:0000CBE4 ; ===========================================================================
.text$mn:0000CBE4
.text$mn:0000CBE4 ; Segment type: Pure code
.text$mn:0000CBE4 ; Segment permissions: Read/Execute
.text$mn:0000CBE4 _text$mn        segment para public 'CODE' use32
.text$mn:0000CBE4                 assume cs:_text$mn
.text$mn:0000CBE4                 ;org 0CBE4h
.text$mn:0000CBE4 ; COMDAT (pick any)
.text$mn:0000CBE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CBE4
.text$mn:0000CBE4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CBE4
.text$mn:0000CBE4 ; Attributes: bp-based frame
.text$mn:0000CBE4
.text$mn:0000CBE4 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::begin(void)
.text$mn:0000CBE4                 public ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000CBE4 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:0000CBE4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+A9p
.text$mn:0000CBE4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+AFp ...
.text$mn:0000CBE4
.text$mn:0000CBE4 var_14          = dword ptr -14h
.text$mn:0000CBE4 var_10          = dword ptr -10h
.text$mn:0000CBE4 var_C           = dword ptr -0Ch
.text$mn:0000CBE4 var_4           = dword ptr -4
.text$mn:0000CBE4 arg_0           = dword ptr  8
.text$mn:0000CBE4
.text$mn:0000CBE4                 push    ebp
.text$mn:0000CBE5                 mov     ebp, esp
.text$mn:0000CBE7                 push    0FFFFFFFFh
.text$mn:0000CBE9                 push    offset __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000CBEE                 mov     eax, large fs:0
.text$mn:0000CBF4                 push    eax
.text$mn:0000CBF5                 sub     esp, 8
.text$mn:0000CBF8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000CBFD                 xor     eax, ebp
.text$mn:0000CBFF                 push    eax
.text$mn:0000CC00                 lea     eax, [ebp+var_C]
.text$mn:0000CC03                 mov     large fs:0, eax
.text$mn:0000CC09                 mov     [ebp+var_10], ecx
.text$mn:0000CC0C                 mov     [ebp+var_14], 0
.text$mn:0000CC13                 mov     eax, [ebp+var_10]
.text$mn:0000CC16                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000CC17                 mov     ecx, [ebp+var_10]
.text$mn:0000CC1A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CC1F                 push    eax             ; int
.text$mn:0000CC20                 mov     ecx, [ebp+arg_0]
.text$mn:0000CC23                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:0000CC28                 mov     [ebp+var_4], 0
.text$mn:0000CC2F                 mov     ecx, [ebp+var_14]
.text$mn:0000CC32                 or      ecx, 1
.text$mn:0000CC35                 mov     [ebp+var_14], ecx
.text$mn:0000CC38                 mov     eax, [ebp+arg_0]
.text$mn:0000CC3B                 mov     ecx, [ebp+var_C]
.text$mn:0000CC3E                 mov     large fs:0, ecx
.text$mn:0000CC45                 pop     ecx
.text$mn:0000CC46                 mov     esp, ebp
.text$mn:0000CC48                 pop     ebp
.text$mn:0000CC49                 retn    4
.text$mn:0000CC49 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:0000CC49
.text$mn:0000CC49 _text$mn        ends
.text$mn:0000CC49
.text$x:0000CC4C ; ===========================================================================
.text$x:0000CC4C
.text$x:0000CC4C ; Segment type: Pure code
.text$x:0000CC4C ; Segment permissions: Read/Execute
.text$x:0000CC4C _text$x         segment para public 'CODE' use32
.text$x:0000CC4C                 assume cs:_text$x
.text$x:0000CC4C                 ;org 0CC4Ch
.text$x:0000CC4C ; COMDAT (pick associative to section at CBE4)
.text$x:0000CC4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000CC4C
.text$x:0000CC4C ; =============== S U B R O U T I N E =======================================
.text$x:0000CC4C
.text$x:0000CC4C
.text$x:0000CC4C __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:0000CC4C                                         ; DATA XREF: .xdata$x:0000F498o
.text$x:0000CC4C                 mov     eax, [ebp-14h]
.text$x:0000CC4F                 and     eax, 1
.text$x:0000CC52                 jz      $LN4
.text$x:0000CC58                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000CC5C                 mov     ecx, [ebp+8]
.text$x:0000CC5F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000CC64 ; ---------------------------------------------------------------------------
.text$x:0000CC64
.text$x:0000CC64 $LN4:                                   ; CODE XREF: __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:0000CC64                 retn
.text$x:0000CC64 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:0000CC64
.text$x:0000CC65
.text$x:0000CC65 ; =============== S U B R O U T I N E =======================================
.text$x:0000CC65
.text$x:0000CC65
.text$x:0000CC65 __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:0000CC65                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+5o
.text$x:0000CC65
.text$x:0000CC65 arg_4           = dword ptr  8
.text$x:0000CC65
.text$x:0000CC65                 mov     edx, [esp+arg_4]
.text$x:0000CC69                 lea     eax, [edx+0Ch]
.text$x:0000CC6C                 mov     ecx, [edx-0Ch]
.text$x:0000CC6F                 xor     ecx, eax
.text$x:0000CC71                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CC76                 mov     eax, offset __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:0000CC7B                 jmp     ___CxxFrameHandler3
.text$x:0000CC7B __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:0000CC7B
.text$x:0000CC7B _text$x         ends
.text$x:0000CC7B
.text$mn:0000CC80 ; ===========================================================================
.text$mn:0000CC80
.text$mn:0000CC80 ; Segment type: Pure code
.text$mn:0000CC80 ; Segment permissions: Read/Execute
.text$mn:0000CC80 _text$mn        segment para public 'CODE' use32
.text$mn:0000CC80                 assume cs:_text$mn
.text$mn:0000CC80                 ;org 0CC80h
.text$mn:0000CC80 ; COMDAT (pick any)
.text$mn:0000CC80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CC80
.text$mn:0000CC80 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CC80
.text$mn:0000CC80 ; Attributes: bp-based frame
.text$mn:0000CC80
.text$mn:0000CC80 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::begin(void)
.text$mn:0000CC80                 public ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000CC80 ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$mn:0000CC80                                         ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+1A4p
.text$mn:0000CC80
.text$mn:0000CC80 var_14          = dword ptr -14h
.text$mn:0000CC80 var_10          = dword ptr -10h
.text$mn:0000CC80 var_C           = dword ptr -0Ch
.text$mn:0000CC80 var_4           = dword ptr -4
.text$mn:0000CC80 arg_0           = dword ptr  8
.text$mn:0000CC80
.text$mn:0000CC80                 push    ebp
.text$mn:0000CC81                 mov     ebp, esp
.text$mn:0000CC83                 push    0FFFFFFFFh
.text$mn:0000CC85                 push    offset __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000CC8A                 mov     eax, large fs:0
.text$mn:0000CC90                 push    eax
.text$mn:0000CC91                 sub     esp, 8
.text$mn:0000CC94                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000CC99                 xor     eax, ebp
.text$mn:0000CC9B                 push    eax
.text$mn:0000CC9C                 lea     eax, [ebp+var_C]
.text$mn:0000CC9F                 mov     large fs:0, eax
.text$mn:0000CCA5                 mov     [ebp+var_10], ecx
.text$mn:0000CCA8                 mov     [ebp+var_14], 0
.text$mn:0000CCAF                 mov     eax, [ebp+var_10]
.text$mn:0000CCB2                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000CCB3                 mov     ecx, [ebp+var_10]
.text$mn:0000CCB6                 mov     edx, [ecx+4]
.text$mn:0000CCB9                 push    edx             ; int
.text$mn:0000CCBA                 mov     ecx, [ebp+arg_0]
.text$mn:0000CCBD                 call    ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000CCC2                 mov     [ebp+var_4], 0
.text$mn:0000CCC9                 mov     eax, [ebp+var_14]
.text$mn:0000CCCC                 or      eax, 1
.text$mn:0000CCCF                 mov     [ebp+var_14], eax
.text$mn:0000CCD2                 mov     eax, [ebp+arg_0]
.text$mn:0000CCD5                 mov     ecx, [ebp+var_C]
.text$mn:0000CCD8                 mov     large fs:0, ecx
.text$mn:0000CCDF                 pop     ecx
.text$mn:0000CCE0                 mov     esp, ebp
.text$mn:0000CCE2                 pop     ebp
.text$mn:0000CCE3                 retn    4
.text$mn:0000CCE3 ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$mn:0000CCE3
.text$mn:0000CCE3 ; ---------------------------------------------------------------------------
.text$mn:0000CCE6                 align 4
.text$mn:0000CCE6 _text$mn        ends
.text$mn:0000CCE6
.text$x:0000CCE8 ; ===========================================================================
.text$x:0000CCE8
.text$x:0000CCE8 ; Segment type: Pure code
.text$x:0000CCE8 ; Segment permissions: Read/Execute
.text$x:0000CCE8 _text$x         segment para public 'CODE' use32
.text$x:0000CCE8                 assume cs:_text$x
.text$x:0000CCE8                 ;org 0CCE8h
.text$x:0000CCE8 ; COMDAT (pick associative to section at CC80)
.text$x:0000CCE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000CCE8
.text$x:0000CCE8 ; =============== S U B R O U T I N E =======================================
.text$x:0000CCE8
.text$x:0000CCE8
.text$x:0000CCE8 __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000CCE8                                         ; DATA XREF: .xdata$x:0000F7BCo
.text$x:0000CCE8                 mov     eax, [ebp-14h]
.text$x:0000CCEB                 and     eax, 1
.text$x:0000CCEE                 jz      $LN4_1
.text$x:0000CCF4                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000CCF8                 mov     ecx, [ebp+8]
.text$x:0000CCFB                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000CD00 ; ---------------------------------------------------------------------------
.text$x:0000CD00
.text$x:0000CD00 $LN4_1:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0+6j
.text$x:0000CD00                 retn
.text$x:0000CD00 __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 endp
.text$x:0000CD00
.text$x:0000CD01
.text$x:0000CD01 ; =============== S U B R O U T I N E =======================================
.text$x:0000CD01
.text$x:0000CD01
.text$x:0000CD01 __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$x:0000CD01                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+5o
.text$x:0000CD01
.text$x:0000CD01 arg_4           = dword ptr  8
.text$x:0000CD01
.text$x:0000CD01                 mov     edx, [esp+arg_4]
.text$x:0000CD05                 lea     eax, [edx+0Ch]
.text$x:0000CD08                 mov     ecx, [edx-0Ch]
.text$x:0000CD0B                 xor     ecx, eax
.text$x:0000CD0D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CD12                 mov     eax, offset __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$x:0000CD17                 jmp     ___CxxFrameHandler3
.text$x:0000CD17 __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$x:0000CD17
.text$x:0000CD17 _text$x         ends
.text$x:0000CD17
.text$mn:0000CD1C ; ===========================================================================
.text$mn:0000CD1C
.text$mn:0000CD1C ; Segment type: Pure code
.text$mn:0000CD1C ; Segment permissions: Read/Execute
.text$mn:0000CD1C _text$mn        segment para public 'CODE' use32
.text$mn:0000CD1C                 assume cs:_text$mn
.text$mn:0000CD1C                 ;org 0CD1Ch
.text$mn:0000CD1C ; COMDAT (pick any)
.text$mn:0000CD1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CD1C
.text$mn:0000CD1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CD1C
.text$mn:0000CD1C ; Attributes: bp-based frame
.text$mn:0000CD1C
.text$mn:0000CD1C ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::begin(void)const
.text$mn:0000CD1C                 public ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000CD1C ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$mn:0000CD1C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+A7p
.text$mn:0000CD1C
.text$mn:0000CD1C var_14          = dword ptr -14h
.text$mn:0000CD1C var_10          = dword ptr -10h
.text$mn:0000CD1C var_C           = dword ptr -0Ch
.text$mn:0000CD1C var_4           = dword ptr -4
.text$mn:0000CD1C arg_0           = dword ptr  8
.text$mn:0000CD1C
.text$mn:0000CD1C                 push    ebp
.text$mn:0000CD1D                 mov     ebp, esp
.text$mn:0000CD1F                 push    0FFFFFFFFh
.text$mn:0000CD21                 push    offset __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000CD26                 mov     eax, large fs:0
.text$mn:0000CD2C                 push    eax
.text$mn:0000CD2D                 sub     esp, 8
.text$mn:0000CD30                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000CD35                 xor     eax, ebp
.text$mn:0000CD37                 push    eax
.text$mn:0000CD38                 lea     eax, [ebp+var_C]
.text$mn:0000CD3B                 mov     large fs:0, eax
.text$mn:0000CD41                 mov     [ebp+var_10], ecx
.text$mn:0000CD44                 mov     [ebp+var_14], 0
.text$mn:0000CD4B                 mov     eax, [ebp+var_10]
.text$mn:0000CD4E                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000CD4F                 mov     ecx, [ebp+var_10]
.text$mn:0000CD52                 mov     edx, [ecx+4]
.text$mn:0000CD55                 push    edx             ; int
.text$mn:0000CD56                 mov     ecx, [ebp+arg_0]
.text$mn:0000CD59                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000CD5E                 mov     [ebp+var_4], 0
.text$mn:0000CD65                 mov     eax, [ebp+var_14]
.text$mn:0000CD68                 or      eax, 1
.text$mn:0000CD6B                 mov     [ebp+var_14], eax
.text$mn:0000CD6E                 mov     eax, [ebp+arg_0]
.text$mn:0000CD71                 mov     ecx, [ebp+var_C]
.text$mn:0000CD74                 mov     large fs:0, ecx
.text$mn:0000CD7B                 pop     ecx
.text$mn:0000CD7C                 mov     esp, ebp
.text$mn:0000CD7E                 pop     ebp
.text$mn:0000CD7F                 retn    4
.text$mn:0000CD7F ?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$mn:0000CD7F
.text$mn:0000CD7F ; ---------------------------------------------------------------------------
.text$mn:0000CD82                 align 4
.text$mn:0000CD82 _text$mn        ends
.text$mn:0000CD82
.text$x:0000CD84 ; ===========================================================================
.text$x:0000CD84
.text$x:0000CD84 ; Segment type: Pure code
.text$x:0000CD84 ; Segment permissions: Read/Execute
.text$x:0000CD84 _text$x         segment para public 'CODE' use32
.text$x:0000CD84                 assume cs:_text$x
.text$x:0000CD84                 ;org 0CD84h
.text$x:0000CD84 ; COMDAT (pick associative to section at CD1C)
.text$x:0000CD84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000CD84
.text$x:0000CD84 ; =============== S U B R O U T I N E =======================================
.text$x:0000CD84
.text$x:0000CD84
.text$x:0000CD84 __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000CD84                                         ; DATA XREF: .xdata$x:0000F7E8o
.text$x:0000CD84                 mov     eax, [ebp-14h]
.text$x:0000CD87                 and     eax, 1
.text$x:0000CD8A                 jz      $LN4_2
.text$x:0000CD90                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000CD94                 mov     ecx, [ebp+8]
.text$x:0000CD97                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000CD9C ; ---------------------------------------------------------------------------
.text$x:0000CD9C
.text$x:0000CD9C $LN4_2:                                 ; CODE XREF: __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0+6j
.text$x:0000CD9C                 retn
.text$x:0000CD9C __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 endp
.text$x:0000CD9C
.text$x:0000CD9D
.text$x:0000CD9D ; =============== S U B R O U T I N E =======================================
.text$x:0000CD9D
.text$x:0000CD9D
.text$x:0000CD9D __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$x:0000CD9D                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::begin(void)+5o
.text$x:0000CD9D
.text$x:0000CD9D arg_4           = dword ptr  8
.text$x:0000CD9D
.text$x:0000CD9D                 mov     edx, [esp+arg_4]
.text$x:0000CDA1                 lea     eax, [edx+0Ch]
.text$x:0000CDA4                 mov     ecx, [edx-0Ch]
.text$x:0000CDA7                 xor     ecx, eax
.text$x:0000CDA9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000CDAE                 mov     eax, offset __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$x:0000CDB3                 jmp     ___CxxFrameHandler3
.text$x:0000CDB3 __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$x:0000CDB3
.text$x:0000CDB3 _text$x         ends
.text$x:0000CDB3
.text$mn:0000CDB8 ; ===========================================================================
.text$mn:0000CDB8
.text$mn:0000CDB8 ; Segment type: Pure code
.text$mn:0000CDB8 ; Segment permissions: Read/Execute
.text$mn:0000CDB8 _text$mn        segment para public 'CODE' use32
.text$mn:0000CDB8                 assume cs:_text$mn
.text$mn:0000CDB8                 ;org 0CDB8h
.text$mn:0000CDB8 ; COMDAT (pick any)
.text$mn:0000CDB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CDB8
.text$mn:0000CDB8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CDB8
.text$mn:0000CDB8 ; Attributes: bp-based frame
.text$mn:0000CDB8
.text$mn:0000CDB8 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:0000CDB8                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:0000CDB8 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:0000CDB8                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+BCp
.text$mn:0000CDB8                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+42Bp ...
.text$mn:0000CDB8
.text$mn:0000CDB8 var_4           = dword ptr -4
.text$mn:0000CDB8
.text$mn:0000CDB8                 push    ebp
.text$mn:0000CDB9                 mov     ebp, esp
.text$mn:0000CDBB                 push    ecx
.text$mn:0000CDBC                 mov     [ebp+var_4], ecx
.text$mn:0000CDBF                 mov     ecx, [ebp+var_4]
.text$mn:0000CDC2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CDC7                 mov     esp, ebp
.text$mn:0000CDC9                 pop     ebp
.text$mn:0000CDCA                 retn
.text$mn:0000CDCA ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:0000CDCA
.text$mn:0000CDCA ; ---------------------------------------------------------------------------
.text$mn:0000CDCB                 align 4
.text$mn:0000CDCB _text$mn        ends
.text$mn:0000CDCB
.text$mn:0000CDCC ; ===========================================================================
.text$mn:0000CDCC
.text$mn:0000CDCC ; Segment type: Pure code
.text$mn:0000CDCC ; Segment permissions: Read/Execute
.text$mn:0000CDCC _text$mn        segment para public 'CODE' use32
.text$mn:0000CDCC                 assume cs:_text$mn
.text$mn:0000CDCC                 ;org 0CDCCh
.text$mn:0000CDCC ; COMDAT (pick any)
.text$mn:0000CDCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CDCC
.text$mn:0000CDCC ; =============== S U B R O U T I N E =======================================
.text$mn:0000CDCC
.text$mn:0000CDCC ; Attributes: bp-based frame
.text$mn:0000CDCC
.text$mn:0000CDCC ; public: unsigned int __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::capacity(void)const
.text$mn:0000CDCC                 public ?capacity@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ
.text$mn:0000CDCC ?capacity@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ proc near
.text$mn:0000CDCC                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Grow_to(uint)+Cp
.text$mn:0000CDCC
.text$mn:0000CDCC var_4           = dword ptr -4
.text$mn:0000CDCC
.text$mn:0000CDCC                 push    ebp
.text$mn:0000CDCD                 mov     ebp, esp
.text$mn:0000CDCF                 push    ecx
.text$mn:0000CDD0                 mov     [ebp+var_4], ecx
.text$mn:0000CDD3                 mov     eax, [ebp+var_4]
.text$mn:0000CDD6                 mov     ecx, [ebp+var_4]
.text$mn:0000CDD9                 mov     eax, [eax+0Ch]
.text$mn:0000CDDC                 sub     eax, [ecx+4]
.text$mn:0000CDDF                 sar     eax, 2
.text$mn:0000CDE2                 mov     esp, ebp
.text$mn:0000CDE4                 pop     ebp
.text$mn:0000CDE5                 retn
.text$mn:0000CDE5 ?capacity@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ endp
.text$mn:0000CDE5
.text$mn:0000CDE5 ; ---------------------------------------------------------------------------
.text$mn:0000CDE6                 align 4
.text$mn:0000CDE6 _text$mn        ends
.text$mn:0000CDE6
.text$mn:0000CDE8 ; ===========================================================================
.text$mn:0000CDE8
.text$mn:0000CDE8 ; Segment type: Pure code
.text$mn:0000CDE8 ; Segment permissions: Read/Execute
.text$mn:0000CDE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000CDE8                 assume cs:_text$mn
.text$mn:0000CDE8                 ;org 0CDE8h
.text$mn:0000CDE8 ; COMDAT (pick any)
.text$mn:0000CDE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CDE8
.text$mn:0000CDE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CDE8
.text$mn:0000CDE8 ; Attributes: bp-based frame
.text$mn:0000CDE8
.text$mn:0000CDE8 ; public: unsigned int __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::capacity(void)const
.text$mn:0000CDE8                 public ?capacity@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ
.text$mn:0000CDE8 ?capacity@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000CDE8                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Grow_to(uint)+Cp
.text$mn:0000CDE8
.text$mn:0000CDE8 var_4           = dword ptr -4
.text$mn:0000CDE8
.text$mn:0000CDE8                 push    ebp
.text$mn:0000CDE9                 mov     ebp, esp
.text$mn:0000CDEB                 push    ecx
.text$mn:0000CDEC                 mov     [ebp+var_4], ecx
.text$mn:0000CDEF                 mov     eax, [ebp+var_4]
.text$mn:0000CDF2                 mov     ecx, [ebp+var_4]
.text$mn:0000CDF5                 mov     eax, [eax+0Ch]
.text$mn:0000CDF8                 sub     eax, [ecx+4]
.text$mn:0000CDFB                 sar     eax, 3
.text$mn:0000CDFE                 mov     esp, ebp
.text$mn:0000CE00                 pop     ebp
.text$mn:0000CE01                 retn
.text$mn:0000CE01 ?capacity@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ endp
.text$mn:0000CE01
.text$mn:0000CE01 ; ---------------------------------------------------------------------------
.text$mn:0000CE02                 align 4
.text$mn:0000CE02 _text$mn        ends
.text$mn:0000CE02
.text$mn:0000CE04 ; ===========================================================================
.text$mn:0000CE04
.text$mn:0000CE04 ; Segment type: Pure code
.text$mn:0000CE04 ; Segment permissions: Read/Execute
.text$mn:0000CE04 _text$mn        segment para public 'CODE' use32
.text$mn:0000CE04                 assume cs:_text$mn
.text$mn:0000CE04                 ;org 0CE04h
.text$mn:0000CE04 ; COMDAT (pick any)
.text$mn:0000CE04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE04
.text$mn:0000CE04 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE04
.text$mn:0000CE04 ; Attributes: bp-based frame
.text$mn:0000CE04
.text$mn:0000CE04 ; public: unsigned int __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::capacity(void)const
.text$mn:0000CE04                 public ?capacity@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ
.text$mn:0000CE04 ?capacity@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000CE04                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Grow_to(uint)+Cp
.text$mn:0000CE04
.text$mn:0000CE04 var_4           = dword ptr -4
.text$mn:0000CE04
.text$mn:0000CE04                 push    ebp
.text$mn:0000CE05                 mov     ebp, esp
.text$mn:0000CE07                 push    ecx
.text$mn:0000CE08                 mov     [ebp+var_4], ecx
.text$mn:0000CE0B                 mov     eax, [ebp+var_4]
.text$mn:0000CE0E                 mov     ecx, [ebp+var_4]
.text$mn:0000CE11                 mov     eax, [eax+0Ch]
.text$mn:0000CE14                 sub     eax, [ecx+4]
.text$mn:0000CE17                 sar     eax, 6
.text$mn:0000CE1A                 mov     esp, ebp
.text$mn:0000CE1C                 pop     ebp
.text$mn:0000CE1D                 retn
.text$mn:0000CE1D ?capacity@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000CE1D
.text$mn:0000CE1D ; ---------------------------------------------------------------------------
.text$mn:0000CE1E                 align 10h
.text$mn:0000CE1E _text$mn        ends
.text$mn:0000CE1E
.text$mn:0000CE20 ; ===========================================================================
.text$mn:0000CE20
.text$mn:0000CE20 ; Segment type: Pure code
.text$mn:0000CE20 ; Segment permissions: Read/Execute
.text$mn:0000CE20 _text$mn        segment para public 'CODE' use32
.text$mn:0000CE20                 assume cs:_text$mn
.text$mn:0000CE20                 ;org 0CE20h
.text$mn:0000CE20 ; COMDAT (pick any)
.text$mn:0000CE20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE20
.text$mn:0000CE20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE20
.text$mn:0000CE20 ; Attributes: bp-based frame
.text$mn:0000CE20
.text$mn:0000CE20 ; public: unsigned int __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::capacity(void)const
.text$mn:0000CE20                 public ?capacity@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ
.text$mn:0000CE20 ?capacity@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000CE20                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Grow_to(uint)+Cp
.text$mn:0000CE20
.text$mn:0000CE20 var_4           = dword ptr -4
.text$mn:0000CE20
.text$mn:0000CE20                 push    ebp
.text$mn:0000CE21                 mov     ebp, esp
.text$mn:0000CE23                 push    ecx
.text$mn:0000CE24                 mov     [ebp+var_4], ecx
.text$mn:0000CE27                 mov     eax, [ebp+var_4]
.text$mn:0000CE2A                 mov     ecx, [ebp+var_4]
.text$mn:0000CE2D                 mov     eax, [eax+0Ch]
.text$mn:0000CE30                 sub     eax, [ecx+4]
.text$mn:0000CE33                 sar     eax, 6
.text$mn:0000CE36                 mov     esp, ebp
.text$mn:0000CE38                 pop     ebp
.text$mn:0000CE39                 retn
.text$mn:0000CE39 ?capacity@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000CE39
.text$mn:0000CE39 ; ---------------------------------------------------------------------------
.text$mn:0000CE3A                 align 4
.text$mn:0000CE3A _text$mn        ends
.text$mn:0000CE3A
.text$mn:0000CE3C ; ===========================================================================
.text$mn:0000CE3C
.text$mn:0000CE3C ; Segment type: Pure code
.text$mn:0000CE3C ; Segment permissions: Read/Execute
.text$mn:0000CE3C _text$mn        segment para public 'CODE' use32
.text$mn:0000CE3C                 assume cs:_text$mn
.text$mn:0000CE3C                 ;org 0CE3Ch
.text$mn:0000CE3C ; COMDAT (pick any)
.text$mn:0000CE3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE3C
.text$mn:0000CE3C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE3C
.text$mn:0000CE3C ; Attributes: bp-based frame
.text$mn:0000CE3C
.text$mn:0000CE3C ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::capacity(void)const
.text$mn:0000CE3C                 public ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000CE3C ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000CE3C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+Cp
.text$mn:0000CE3C
.text$mn:0000CE3C var_4           = dword ptr -4
.text$mn:0000CE3C
.text$mn:0000CE3C                 push    ebp
.text$mn:0000CE3D                 mov     ebp, esp
.text$mn:0000CE3F                 push    ecx
.text$mn:0000CE40                 mov     [ebp+var_4], ecx
.text$mn:0000CE43                 mov     eax, [ebp+var_4]
.text$mn:0000CE46                 mov     ecx, [ebp+var_4]
.text$mn:0000CE49                 mov     eax, [eax+0Ch]
.text$mn:0000CE4C                 sub     eax, [ecx+4]
.text$mn:0000CE4F                 cdq
.text$mn:0000CE50                 mov     ecx, 1Ch
.text$mn:0000CE55                 idiv    ecx
.text$mn:0000CE57                 mov     esp, ebp
.text$mn:0000CE59                 pop     ebp
.text$mn:0000CE5A                 retn
.text$mn:0000CE5A ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000CE5A
.text$mn:0000CE5A ; ---------------------------------------------------------------------------
.text$mn:0000CE5B                 align 4
.text$mn:0000CE5B _text$mn        ends
.text$mn:0000CE5B
.text$mn:0000CE5C ; ===========================================================================
.text$mn:0000CE5C
.text$mn:0000CE5C ; Segment type: Pure code
.text$mn:0000CE5C ; Segment permissions: Read/Execute
.text$mn:0000CE5C _text$mn        segment para public 'CODE' use32
.text$mn:0000CE5C                 assume cs:_text$mn
.text$mn:0000CE5C                 ;org 0CE5Ch
.text$mn:0000CE5C ; COMDAT (pick any)
.text$mn:0000CE5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE5C
.text$mn:0000CE5C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE5C
.text$mn:0000CE5C ; Attributes: bp-based frame
.text$mn:0000CE5C
.text$mn:0000CE5C ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:0000CE5C                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:0000CE5C ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000CE5C                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:0000CE5C
.text$mn:0000CE5C var_4           = dword ptr -4
.text$mn:0000CE5C
.text$mn:0000CE5C                 push    ebp
.text$mn:0000CE5D                 mov     ebp, esp
.text$mn:0000CE5F                 push    ecx
.text$mn:0000CE60                 mov     [ebp+var_4], ecx
.text$mn:0000CE63                 mov     eax, [ebp+var_4]
.text$mn:0000CE66                 mov     eax, [eax+4]
.text$mn:0000CE69                 mov     esp, ebp
.text$mn:0000CE6B                 pop     ebp
.text$mn:0000CE6C                 retn
.text$mn:0000CE6C ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:0000CE6C
.text$mn:0000CE6C ; ---------------------------------------------------------------------------
.text$mn:0000CE6D                 align 10h
.text$mn:0000CE6D _text$mn        ends
.text$mn:0000CE6D
.text$mn:0000CE70 ; ===========================================================================
.text$mn:0000CE70
.text$mn:0000CE70 ; Segment type: Pure code
.text$mn:0000CE70 ; Segment permissions: Read/Execute
.text$mn:0000CE70 _text$mn        segment para public 'CODE' use32
.text$mn:0000CE70                 assume cs:_text$mn
.text$mn:0000CE70                 ;org 0CE70h
.text$mn:0000CE70 ; COMDAT (pick any)
.text$mn:0000CE70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE70
.text$mn:0000CE70 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE70
.text$mn:0000CE70 ; Attributes: bp-based frame
.text$mn:0000CE70
.text$mn:0000CE70 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:0000CE70                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:0000CE70 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:0000CE70                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:0000CE70                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:0000CE70
.text$mn:0000CE70 var_4           = dword ptr -4
.text$mn:0000CE70
.text$mn:0000CE70                 push    ebp
.text$mn:0000CE71                 mov     ebp, esp
.text$mn:0000CE73                 push    ecx
.text$mn:0000CE74                 mov     [ebp+var_4], ecx
.text$mn:0000CE77                 mov     eax, [ebp+var_4]
.text$mn:0000CE7A                 mov     eax, [eax+4]
.text$mn:0000CE7D                 mov     esp, ebp
.text$mn:0000CE7F                 pop     ebp
.text$mn:0000CE80                 retn
.text$mn:0000CE80 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:0000CE80
.text$mn:0000CE80 ; ---------------------------------------------------------------------------
.text$mn:0000CE81                 align 4
.text$mn:0000CE81 _text$mn        ends
.text$mn:0000CE81
.text$mn:0000CE84 ; ===========================================================================
.text$mn:0000CE84
.text$mn:0000CE84 ; Segment type: Pure code
.text$mn:0000CE84 ; Segment permissions: Read/Execute
.text$mn:0000CE84 _text$mn        segment para public 'CODE' use32
.text$mn:0000CE84                 assume cs:_text$mn
.text$mn:0000CE84                 ;org 0CE84h
.text$mn:0000CE84 ; COMDAT (pick any)
.text$mn:0000CE84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CE84
.text$mn:0000CE84 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CE84
.text$mn:0000CE84 ; Attributes: bp-based frame
.text$mn:0000CE84
.text$mn:0000CE84 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)const
.text$mn:0000CE84                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z
.text$mn:0000CE84 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z proc near
.text$mn:0000CE84                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Bp
.text$mn:0000CE84
.text$mn:0000CE84 var_4           = dword ptr -4
.text$mn:0000CE84 arg_0           = dword ptr  8
.text$mn:0000CE84
.text$mn:0000CE84                 push    ebp
.text$mn:0000CE85                 mov     ebp, esp
.text$mn:0000CE87                 push    ecx
.text$mn:0000CE88                 mov     [ebp+var_4], ecx
.text$mn:0000CE8B                 mov     ecx, [ebp+arg_0]
.text$mn:0000CE8E                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000CE93                 push    eax
.text$mn:0000CE94                 mov     ecx, [ebp+arg_0]
.text$mn:0000CE97                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CE9C                 push    eax
.text$mn:0000CE9D                 mov     eax, [ebp+var_4]
.text$mn:0000CEA0                 mov     ecx, [eax+14h]
.text$mn:0000CEA3                 push    ecx
.text$mn:0000CEA4                 push    0
.text$mn:0000CEA6                 mov     ecx, [ebp+var_4]
.text$mn:0000CEA9                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000CEAE                 mov     esp, ebp
.text$mn:0000CEB0                 pop     ebp
.text$mn:0000CEB1                 retn    4
.text$mn:0000CEB1 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHABV12@@Z endp
.text$mn:0000CEB1
.text$mn:0000CEB1 _text$mn        ends
.text$mn:0000CEB1
.text$mn:0000CEB4 ; ===========================================================================
.text$mn:0000CEB4
.text$mn:0000CEB4 ; Segment type: Pure code
.text$mn:0000CEB4 ; Segment permissions: Read/Execute
.text$mn:0000CEB4 _text$mn        segment para public 'CODE' use32
.text$mn:0000CEB4                 assume cs:_text$mn
.text$mn:0000CEB4                 ;org 0CEB4h
.text$mn:0000CEB4 ; COMDAT (pick any)
.text$mn:0000CEB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CEB4
.text$mn:0000CEB4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CEB4
.text$mn:0000CEB4 ; Attributes: bp-based frame
.text$mn:0000CEB4
.text$mn:0000CEB4 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:0000CEB4                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:0000CEB4 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:0000CEB4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+25p
.text$mn:0000CEB4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:0000CEB4
.text$mn:0000CEB4 var_18          = dword ptr -18h
.text$mn:0000CEB4 var_14          = dword ptr -14h
.text$mn:0000CEB4 var_10          = dword ptr -10h
.text$mn:0000CEB4 var_C           = dword ptr -0Ch
.text$mn:0000CEB4 var_8           = dword ptr -8
.text$mn:0000CEB4 var_4           = dword ptr -4
.text$mn:0000CEB4 arg_0           = dword ptr  8
.text$mn:0000CEB4 arg_4           = dword ptr  0Ch
.text$mn:0000CEB4 arg_8           = dword ptr  10h
.text$mn:0000CEB4 arg_C           = dword ptr  14h
.text$mn:0000CEB4
.text$mn:0000CEB4                 push    ebp
.text$mn:0000CEB5                 mov     ebp, esp
.text$mn:0000CEB7                 sub     esp, 18h
.text$mn:0000CEBA                 mov     [ebp+var_4], ecx
.text$mn:0000CEBD                 cmp     [ebp+arg_C], 0
.text$mn:0000CEC1                 jz      short loc_CED9
.text$mn:0000CEC3                 push    87Dh            ; unsigned int
.text$mn:0000CEC8                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000CECD                 mov     eax, [ebp+arg_8]
.text$mn:0000CED0                 push    eax             ; int
.text$mn:0000CED1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CED6                 add     esp, 0Ch
.text$mn:0000CED9
.text$mn:0000CED9 loc_CED9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000CED9                 mov     ecx, [ebp+var_4]
.text$mn:0000CEDC                 mov     edx, [ecx+14h]
.text$mn:0000CEDF                 cmp     edx, [ebp+arg_0]
.text$mn:0000CEE2                 jnb     short loc_CEEC
.text$mn:0000CEE4                 mov     ecx, [ebp+var_4]
.text$mn:0000CEE7                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000CEEC
.text$mn:0000CEEC loc_CEEC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:0000CEEC                 mov     eax, [ebp+var_4]
.text$mn:0000CEEF                 mov     ecx, [eax+14h]
.text$mn:0000CEF2                 sub     ecx, [ebp+arg_0]
.text$mn:0000CEF5                 cmp     ecx, [ebp+arg_4]
.text$mn:0000CEF8                 jnb     short loc_CF06
.text$mn:0000CEFA                 mov     edx, [ebp+var_4]
.text$mn:0000CEFD                 mov     eax, [edx+14h]
.text$mn:0000CF00                 sub     eax, [ebp+arg_0]
.text$mn:0000CF03                 mov     [ebp+arg_4], eax
.text$mn:0000CF06
.text$mn:0000CF06 loc_CF06:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:0000CF06                 mov     ecx, [ebp+arg_4]
.text$mn:0000CF09                 cmp     ecx, [ebp+arg_C]
.text$mn:0000CF0C                 jnb     short loc_CF16
.text$mn:0000CF0E                 mov     edx, [ebp+arg_4]
.text$mn:0000CF11                 mov     [ebp+var_8], edx
.text$mn:0000CF14                 jmp     short loc_CF1C
.text$mn:0000CF16 ; ---------------------------------------------------------------------------
.text$mn:0000CF16
.text$mn:0000CF16 loc_CF16:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:0000CF16                 mov     eax, [ebp+arg_C]
.text$mn:0000CF19                 mov     [ebp+var_8], eax
.text$mn:0000CF1C
.text$mn:0000CF1C loc_CF1C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000CF1C                 mov     ecx, [ebp+var_8]
.text$mn:0000CF1F                 push    ecx
.text$mn:0000CF20                 mov     edx, [ebp+arg_8]
.text$mn:0000CF23                 push    edx
.text$mn:0000CF24                 mov     ecx, [ebp+var_4]
.text$mn:0000CF27                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000CF2C                 mov     ecx, [ebp+arg_0]
.text$mn:0000CF2F                 lea     edx, [eax+ecx*2]
.text$mn:0000CF32                 push    edx
.text$mn:0000CF33                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CF38                 add     esp, 0Ch
.text$mn:0000CF3B                 mov     [ebp+var_C], eax
.text$mn:0000CF3E                 cmp     [ebp+var_C], 0
.text$mn:0000CF42                 jz      short loc_CF4C
.text$mn:0000CF44                 mov     eax, [ebp+var_C]
.text$mn:0000CF47                 mov     [ebp+var_18], eax
.text$mn:0000CF4A                 jmp     short loc_CF81
.text$mn:0000CF4C ; ---------------------------------------------------------------------------
.text$mn:0000CF4C
.text$mn:0000CF4C loc_CF4C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:0000CF4C                 mov     ecx, [ebp+arg_4]
.text$mn:0000CF4F                 cmp     ecx, [ebp+arg_C]
.text$mn:0000CF52                 jnb     short loc_CF5D
.text$mn:0000CF54                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:0000CF5B                 jmp     short loc_CF7B
.text$mn:0000CF5D ; ---------------------------------------------------------------------------
.text$mn:0000CF5D
.text$mn:0000CF5D loc_CF5D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:0000CF5D                 mov     edx, [ebp+arg_4]
.text$mn:0000CF60                 cmp     edx, [ebp+arg_C]
.text$mn:0000CF63                 jnz     short loc_CF6E
.text$mn:0000CF65                 mov     [ebp+var_10], 0
.text$mn:0000CF6C                 jmp     short loc_CF75
.text$mn:0000CF6E ; ---------------------------------------------------------------------------
.text$mn:0000CF6E
.text$mn:0000CF6E loc_CF6E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:0000CF6E                 mov     [ebp+var_10], 1
.text$mn:0000CF75
.text$mn:0000CF75 loc_CF75:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:0000CF75                 mov     eax, [ebp+var_10]
.text$mn:0000CF78                 mov     [ebp+var_14], eax
.text$mn:0000CF7B
.text$mn:0000CF7B loc_CF7B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:0000CF7B                 mov     ecx, [ebp+var_14]
.text$mn:0000CF7E                 mov     [ebp+var_18], ecx
.text$mn:0000CF81
.text$mn:0000CF81 loc_CF81:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:0000CF81                 mov     eax, [ebp+var_18]
.text$mn:0000CF84                 mov     esp, ebp
.text$mn:0000CF86                 pop     ebp
.text$mn:0000CF87                 retn    10h
.text$mn:0000CF87 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:0000CF87
.text$mn:0000CF87 ; ---------------------------------------------------------------------------
.text$mn:0000CF8A                 align 4
.text$mn:0000CF8A _text$mn        ends
.text$mn:0000CF8A
.text$mn:0000CF8C ; ===========================================================================
.text$mn:0000CF8C
.text$mn:0000CF8C ; Segment type: Pure code
.text$mn:0000CF8C ; Segment permissions: Read/Execute
.text$mn:0000CF8C _text$mn        segment para public 'CODE' use32
.text$mn:0000CF8C                 assume cs:_text$mn
.text$mn:0000CF8C                 ;org 0CF8Ch
.text$mn:0000CF8C ; COMDAT (pick any)
.text$mn:0000CF8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CF8C
.text$mn:0000CF8C ; =============== S U B R O U T I N E =======================================
.text$mn:0000CF8C
.text$mn:0000CF8C ; Attributes: bp-based frame
.text$mn:0000CF8C
.text$mn:0000CF8C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:0000CF8C                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:0000CF8C ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:0000CF8C                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:0000CF8C
.text$mn:0000CF8C var_4           = dword ptr -4
.text$mn:0000CF8C Str             = dword ptr  8
.text$mn:0000CF8C
.text$mn:0000CF8C                 push    ebp
.text$mn:0000CF8D                 mov     ebp, esp
.text$mn:0000CF8F                 push    ecx
.text$mn:0000CF90                 mov     [ebp+var_4], ecx
.text$mn:0000CF93                 push    86Eh            ; unsigned int
.text$mn:0000CF98                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000CF9D                 mov     eax, [ebp+Str]
.text$mn:0000CFA0                 push    eax             ; int
.text$mn:0000CFA1                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000CFA6                 add     esp, 0Ch
.text$mn:0000CFA9                 mov     ecx, [ebp+Str]
.text$mn:0000CFAC                 push    ecx             ; Str
.text$mn:0000CFAD                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000CFB2                 add     esp, 4
.text$mn:0000CFB5                 push    eax
.text$mn:0000CFB6                 mov     edx, [ebp+Str]
.text$mn:0000CFB9                 push    edx
.text$mn:0000CFBA                 mov     eax, [ebp+var_4]
.text$mn:0000CFBD                 mov     ecx, [eax+14h]
.text$mn:0000CFC0                 push    ecx
.text$mn:0000CFC1                 push    0
.text$mn:0000CFC3                 mov     ecx, [ebp+var_4]
.text$mn:0000CFC6                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:0000CFCB                 mov     esp, ebp
.text$mn:0000CFCD                 pop     ebp
.text$mn:0000CFCE                 retn    4
.text$mn:0000CFCE ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:0000CFCE
.text$mn:0000CFCE ; ---------------------------------------------------------------------------
.text$mn:0000CFD1                 align 4
.text$mn:0000CFD1 _text$mn        ends
.text$mn:0000CFD1
.text$mn:0000CFD4 ; ===========================================================================
.text$mn:0000CFD4
.text$mn:0000CFD4 ; Segment type: Pure code
.text$mn:0000CFD4 ; Segment permissions: Read/Execute
.text$mn:0000CFD4 _text$mn        segment para public 'CODE' use32
.text$mn:0000CFD4                 assume cs:_text$mn
.text$mn:0000CFD4                 ;org 0CFD4h
.text$mn:0000CFD4 ; COMDAT (pick any)
.text$mn:0000CFD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000CFD4
.text$mn:0000CFD4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000CFD4
.text$mn:0000CFD4 ; Attributes: bp-based frame
.text$mn:0000CFD4
.text$mn:0000CFD4 ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:0000CFD4                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:0000CFD4 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:0000CFD4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:0000CFD4
.text$mn:0000CFD4 var_4           = dword ptr -4
.text$mn:0000CFD4 arg_0           = dword ptr  8
.text$mn:0000CFD4 arg_4           = dword ptr  0Ch
.text$mn:0000CFD4 arg_8           = dword ptr  10h
.text$mn:0000CFD4
.text$mn:0000CFD4                 push    ebp
.text$mn:0000CFD5                 mov     ebp, esp
.text$mn:0000CFD7                 push    ecx
.text$mn:0000CFD8                 cmp     [ebp+arg_8], 0
.text$mn:0000CFDC                 jnz     short loc_CFE7
.text$mn:0000CFDE                 mov     [ebp+var_4], 0
.text$mn:0000CFE5                 jmp     short loc_CFFE
.text$mn:0000CFE7 ; ---------------------------------------------------------------------------
.text$mn:0000CFE7
.text$mn:0000CFE7 loc_CFE7:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:0000CFE7                 mov     eax, [ebp+arg_8]
.text$mn:0000CFEA                 push    eax
.text$mn:0000CFEB                 mov     ecx, [ebp+arg_4]
.text$mn:0000CFEE                 push    ecx
.text$mn:0000CFEF                 mov     edx, [ebp+arg_0]
.text$mn:0000CFF2                 push    edx
.text$mn:0000CFF3                 call    _wmemcmp
.text$mn:0000CFF8                 add     esp, 0Ch
.text$mn:0000CFFB                 mov     [ebp+var_4], eax
.text$mn:0000CFFE
.text$mn:0000CFFE loc_CFFE:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:0000CFFE                 mov     eax, [ebp+var_4]
.text$mn:0000D001                 mov     esp, ebp
.text$mn:0000D003                 pop     ebp
.text$mn:0000D004                 retn
.text$mn:0000D004 ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:0000D004
.text$mn:0000D004 ; ---------------------------------------------------------------------------
.text$mn:0000D005                 align 4
.text$mn:0000D005 _text$mn        ends
.text$mn:0000D005
.text$mn:0000D008 ; ===========================================================================
.text$mn:0000D008
.text$mn:0000D008 ; Segment type: Pure code
.text$mn:0000D008 ; Segment permissions: Read/Execute
.text$mn:0000D008 _text$mn        segment para public 'CODE' use32
.text$mn:0000D008                 assume cs:_text$mn
.text$mn:0000D008                 ;org 0D008h
.text$mn:0000D008 ; COMDAT (pick any)
.text$mn:0000D008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D008
.text$mn:0000D008 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D008
.text$mn:0000D008 ; Attributes: bp-based frame
.text$mn:0000D008
.text$mn:0000D008 ; int __stdcall std::allocator<foundInfo>::construct(void *, int)
.text$mn:0000D008                 public ?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z
.text$mn:0000D008 ?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z proc near
.text$mn:0000D008                                         ; CODE XREF: std::allocator_traits<std::allocator<foundInfo>>::construct<foundInfo,foundInfo const &>(std::allocator<foundInfo> &,foundInfo *,foundInfo const &)+17p
.text$mn:0000D008
.text$mn:0000D008 var_1C          = dword ptr -1Ch
.text$mn:0000D008 var_18          = dword ptr -18h
.text$mn:0000D008 var_14          = dword ptr -14h
.text$mn:0000D008 var_10          = dword ptr -10h
.text$mn:0000D008 var_C           = dword ptr -0Ch
.text$mn:0000D008 var_4           = dword ptr -4
.text$mn:0000D008 arg_0           = dword ptr  8
.text$mn:0000D008 arg_4           = dword ptr  0Ch
.text$mn:0000D008
.text$mn:0000D008                 push    ebp
.text$mn:0000D009                 mov     ebp, esp
.text$mn:0000D00B                 push    0FFFFFFFFh
.text$mn:0000D00D                 push    offset __ehhandler$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z
.text$mn:0000D012                 mov     eax, large fs:0
.text$mn:0000D018                 push    eax
.text$mn:0000D019                 sub     esp, 10h
.text$mn:0000D01C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000D021                 xor     eax, ebp
.text$mn:0000D023                 push    eax
.text$mn:0000D024                 lea     eax, [ebp+var_C]
.text$mn:0000D027                 mov     large fs:0, eax
.text$mn:0000D02D                 mov     [ebp+var_18], ecx
.text$mn:0000D030                 mov     eax, [ebp+arg_0]
.text$mn:0000D033                 push    eax             ; void *
.text$mn:0000D034                 push    40h ; '@'       ; unsigned int
.text$mn:0000D036                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000D03B                 add     esp, 8
.text$mn:0000D03E                 mov     [ebp+var_10], eax
.text$mn:0000D041                 mov     [ebp+var_4], 0
.text$mn:0000D048                 cmp     [ebp+var_10], 0
.text$mn:0000D04C                 jz      short loc_D05F
.text$mn:0000D04E                 mov     ecx, [ebp+arg_4]
.text$mn:0000D051                 push    ecx
.text$mn:0000D052                 mov     ecx, [ebp+var_10]
.text$mn:0000D055                 call    ??0foundInfo@@QAE@ABU0@@Z ; foundInfo::foundInfo(foundInfo const &)
.text$mn:0000D05A                 mov     [ebp+var_14], eax
.text$mn:0000D05D                 jmp     short loc_D066
.text$mn:0000D05F ; ---------------------------------------------------------------------------
.text$mn:0000D05F
.text$mn:0000D05F loc_D05F:                               ; CODE XREF: std::allocator<foundInfo>::construct(foundInfo *,foundInfo const &)+44j
.text$mn:0000D05F                 mov     [ebp+var_14], 0
.text$mn:0000D066
.text$mn:0000D066 loc_D066:                               ; CODE XREF: std::allocator<foundInfo>::construct(foundInfo *,foundInfo const &)+55j
.text$mn:0000D066                 mov     edx, [ebp+var_14]
.text$mn:0000D069                 mov     [ebp+var_1C], edx
.text$mn:0000D06C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000D073                 mov     ecx, [ebp+var_C]
.text$mn:0000D076                 mov     large fs:0, ecx
.text$mn:0000D07D                 pop     ecx
.text$mn:0000D07E                 mov     esp, ebp
.text$mn:0000D080                 pop     ebp
.text$mn:0000D081                 retn    8
.text$mn:0000D081 ?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z endp
.text$mn:0000D081
.text$mn:0000D081 _text$mn        ends
.text$mn:0000D081
.text$x:0000D084 ; ===========================================================================
.text$x:0000D084
.text$x:0000D084 ; Segment type: Pure code
.text$x:0000D084 ; Segment permissions: Read/Execute
.text$x:0000D084 _text$x         segment para public 'CODE' use32
.text$x:0000D084                 assume cs:_text$x
.text$x:0000D084                 ;org 0D084h
.text$x:0000D084 ; COMDAT (pick associative to section at D008)
.text$x:0000D084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D084
.text$x:0000D084 ; =============== S U B R O U T I N E =======================================
.text$x:0000D084
.text$x:0000D084
.text$x:0000D084 __unwindfunclet$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z$0 proc near
.text$x:0000D084                                         ; DATA XREF: .xdata$x:00010394o
.text$x:0000D084                 mov     eax, [ebp+8]
.text$x:0000D087                 push    eax
.text$x:0000D088                 mov     eax, [ebp-10h]
.text$x:0000D08B                 push    eax             ; void *
.text$x:0000D08C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000D091                 add     esp, 8
.text$x:0000D094                 retn
.text$x:0000D094 __unwindfunclet$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z$0 endp
.text$x:0000D094
.text$x:0000D095
.text$x:0000D095 ; =============== S U B R O U T I N E =======================================
.text$x:0000D095
.text$x:0000D095
.text$x:0000D095 __ehhandler$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z proc near
.text$x:0000D095                                         ; DATA XREF: std::allocator<foundInfo>::construct(foundInfo *,foundInfo const &)+5o
.text$x:0000D095
.text$x:0000D095 arg_4           = dword ptr  8
.text$x:0000D095
.text$x:0000D095                 mov     edx, [esp+arg_4]
.text$x:0000D099                 lea     eax, [edx+0Ch]
.text$x:0000D09C                 mov     ecx, [edx-14h]
.text$x:0000D09F                 xor     ecx, eax
.text$x:0000D0A1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D0A6                 mov     eax, offset __ehfuncinfo$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z
.text$x:0000D0AB                 jmp     ___CxxFrameHandler3
.text$x:0000D0AB __ehhandler$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z endp
.text$x:0000D0AB
.text$x:0000D0AB _text$x         ends
.text$x:0000D0AB
.text$mn:0000D0B0 ; ===========================================================================
.text$mn:0000D0B0
.text$mn:0000D0B0 ; Segment type: Pure code
.text$mn:0000D0B0 ; Segment permissions: Read/Execute
.text$mn:0000D0B0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D0B0                 assume cs:_text$mn
.text$mn:0000D0B0                 ;org 0D0B0h
.text$mn:0000D0B0 ; COMDAT (pick any)
.text$mn:0000D0B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D0B0
.text$mn:0000D0B0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D0B0
.text$mn:0000D0B0 ; Attributes: bp-based frame
.text$mn:0000D0B0
.text$mn:0000D0B0 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(void *, int)
.text$mn:0000D0B0                 public ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$mn:0000D0B0 ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z proc near
.text$mn:0000D0B0                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+17p
.text$mn:0000D0B0
.text$mn:0000D0B0 var_1C          = dword ptr -1Ch
.text$mn:0000D0B0 var_18          = dword ptr -18h
.text$mn:0000D0B0 var_14          = dword ptr -14h
.text$mn:0000D0B0 var_10          = dword ptr -10h
.text$mn:0000D0B0 var_C           = dword ptr -0Ch
.text$mn:0000D0B0 var_4           = dword ptr -4
.text$mn:0000D0B0 arg_0           = dword ptr  8
.text$mn:0000D0B0 arg_4           = dword ptr  0Ch
.text$mn:0000D0B0
.text$mn:0000D0B0                 push    ebp
.text$mn:0000D0B1                 mov     ebp, esp
.text$mn:0000D0B3                 push    0FFFFFFFFh
.text$mn:0000D0B5                 push    offset __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$mn:0000D0BA                 mov     eax, large fs:0
.text$mn:0000D0C0                 push    eax
.text$mn:0000D0C1                 sub     esp, 10h
.text$mn:0000D0C4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000D0C9                 xor     eax, ebp
.text$mn:0000D0CB                 push    eax
.text$mn:0000D0CC                 lea     eax, [ebp+var_C]
.text$mn:0000D0CF                 mov     large fs:0, eax
.text$mn:0000D0D5                 mov     [ebp+var_18], ecx
.text$mn:0000D0D8                 mov     eax, [ebp+arg_0]
.text$mn:0000D0DB                 push    eax             ; void *
.text$mn:0000D0DC                 push    1Ch             ; unsigned int
.text$mn:0000D0DE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000D0E3                 add     esp, 8
.text$mn:0000D0E6                 mov     [ebp+var_10], eax
.text$mn:0000D0E9                 mov     [ebp+var_4], 0
.text$mn:0000D0F0                 cmp     [ebp+var_10], 0
.text$mn:0000D0F4                 jz      short loc_D107
.text$mn:0000D0F6                 mov     ecx, [ebp+arg_4]
.text$mn:0000D0F9                 push    ecx
.text$mn:0000D0FA                 mov     ecx, [ebp+var_10]
.text$mn:0000D0FD                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000D102                 mov     [ebp+var_14], eax
.text$mn:0000D105                 jmp     short loc_D10E
.text$mn:0000D107 ; ---------------------------------------------------------------------------
.text$mn:0000D107
.text$mn:0000D107 loc_D107:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+44j
.text$mn:0000D107                 mov     [ebp+var_14], 0
.text$mn:0000D10E
.text$mn:0000D10E loc_D10E:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+55j
.text$mn:0000D10E                 mov     edx, [ebp+var_14]
.text$mn:0000D111                 mov     [ebp+var_1C], edx
.text$mn:0000D114                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000D11B                 mov     ecx, [ebp+var_C]
.text$mn:0000D11E                 mov     large fs:0, ecx
.text$mn:0000D125                 pop     ecx
.text$mn:0000D126                 mov     esp, ebp
.text$mn:0000D128                 pop     ebp
.text$mn:0000D129                 retn    8
.text$mn:0000D129 ?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z endp
.text$mn:0000D129
.text$mn:0000D129 _text$mn        ends
.text$mn:0000D129
.text$x:0000D12C ; ===========================================================================
.text$x:0000D12C
.text$x:0000D12C ; Segment type: Pure code
.text$x:0000D12C ; Segment permissions: Read/Execute
.text$x:0000D12C _text$x         segment para public 'CODE' use32
.text$x:0000D12C                 assume cs:_text$x
.text$x:0000D12C                 ;org 0D12Ch
.text$x:0000D12C ; COMDAT (pick associative to section at D0B0)
.text$x:0000D12C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D12C
.text$x:0000D12C ; =============== S U B R O U T I N E =======================================
.text$x:0000D12C
.text$x:0000D12C
.text$x:0000D12C __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0 proc near
.text$x:0000D12C                                         ; DATA XREF: .xdata$x:0000F618o
.text$x:0000D12C                 mov     eax, [ebp+8]
.text$x:0000D12F                 push    eax
.text$x:0000D130                 mov     eax, [ebp-10h]
.text$x:0000D133                 push    eax             ; void *
.text$x:0000D134                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:0000D139                 add     esp, 8
.text$x:0000D13C                 retn
.text$x:0000D13C __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0 endp
.text$x:0000D13C
.text$x:0000D13D
.text$x:0000D13D ; =============== S U B R O U T I N E =======================================
.text$x:0000D13D
.text$x:0000D13D
.text$x:0000D13D __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z proc near
.text$x:0000D13D                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:0000D13D
.text$x:0000D13D arg_4           = dword ptr  8
.text$x:0000D13D
.text$x:0000D13D                 mov     edx, [esp+arg_4]
.text$x:0000D141                 lea     eax, [edx+0Ch]
.text$x:0000D144                 mov     ecx, [edx-14h]
.text$x:0000D147                 xor     ecx, eax
.text$x:0000D149                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D14E                 mov     eax, offset __ehfuncinfo$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.text$x:0000D153                 jmp     ___CxxFrameHandler3
.text$x:0000D153 __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z endp
.text$x:0000D153
.text$x:0000D153 _text$x         ends
.text$x:0000D153
.text$mn:0000D158 ; ===========================================================================
.text$mn:0000D158
.text$mn:0000D158 ; Segment type: Pure code
.text$mn:0000D158 ; Segment permissions: Read/Execute
.text$mn:0000D158 _text$mn        segment para public 'CODE' use32
.text$mn:0000D158                 assume cs:_text$mn
.text$mn:0000D158                 ;org 0D158h
.text$mn:0000D158 ; COMDAT (pick any)
.text$mn:0000D158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D158
.text$mn:0000D158 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D158
.text$mn:0000D158 ; Attributes: bp-based frame
.text$mn:0000D158
.text$mn:0000D158 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:0000D158                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000D158 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:0000D158                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:0000D158
.text$mn:0000D158 var_4           = dword ptr -4
.text$mn:0000D158 Dst             = dword ptr  8
.text$mn:0000D158 Src             = dword ptr  0Ch
.text$mn:0000D158 Size            = dword ptr  10h
.text$mn:0000D158
.text$mn:0000D158                 push    ebp
.text$mn:0000D159                 mov     ebp, esp
.text$mn:0000D15B                 push    ecx
.text$mn:0000D15C                 cmp     [ebp+Size], 0
.text$mn:0000D160                 jnz     short loc_D16A
.text$mn:0000D162                 mov     eax, [ebp+Dst]
.text$mn:0000D165                 mov     [ebp+var_4], eax
.text$mn:0000D168                 jmp     short loc_D181
.text$mn:0000D16A ; ---------------------------------------------------------------------------
.text$mn:0000D16A
.text$mn:0000D16A loc_D16A:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:0000D16A                 mov     ecx, [ebp+Size]
.text$mn:0000D16D                 push    ecx             ; Size
.text$mn:0000D16E                 mov     edx, [ebp+Src]
.text$mn:0000D171                 push    edx             ; Src
.text$mn:0000D172                 mov     eax, [ebp+Dst]
.text$mn:0000D175                 push    eax             ; Dst
.text$mn:0000D176                 call    _memcpy
.text$mn:0000D17B                 add     esp, 0Ch
.text$mn:0000D17E                 mov     [ebp+var_4], eax
.text$mn:0000D181
.text$mn:0000D181 loc_D181:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:0000D181                 mov     eax, [ebp+var_4]
.text$mn:0000D184                 mov     esp, ebp
.text$mn:0000D186                 pop     ebp
.text$mn:0000D187                 retn
.text$mn:0000D187 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000D187
.text$mn:0000D187 _text$mn        ends
.text$mn:0000D187
.text$mn:0000D188 ; ===========================================================================
.text$mn:0000D188
.text$mn:0000D188 ; Segment type: Pure code
.text$mn:0000D188 ; Segment permissions: Read/Execute
.text$mn:0000D188 _text$mn        segment para public 'CODE' use32
.text$mn:0000D188                 assume cs:_text$mn
.text$mn:0000D188                 ;org 0D188h
.text$mn:0000D188 ; COMDAT (pick any)
.text$mn:0000D188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D188
.text$mn:0000D188 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D188
.text$mn:0000D188 ; Attributes: bp-based frame
.text$mn:0000D188
.text$mn:0000D188 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:0000D188                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000D188 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000D188                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:0000D188                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:0000D188
.text$mn:0000D188 var_4           = dword ptr -4
.text$mn:0000D188 Dst             = dword ptr  8
.text$mn:0000D188 Src             = dword ptr  0Ch
.text$mn:0000D188 arg_8           = dword ptr  10h
.text$mn:0000D188
.text$mn:0000D188                 push    ebp
.text$mn:0000D189                 mov     ebp, esp
.text$mn:0000D18B                 push    ecx
.text$mn:0000D18C                 cmp     [ebp+arg_8], 0
.text$mn:0000D190                 jnz     short loc_D19A
.text$mn:0000D192                 mov     eax, [ebp+Dst]
.text$mn:0000D195                 mov     [ebp+var_4], eax
.text$mn:0000D198                 jmp     short loc_D1B1
.text$mn:0000D19A ; ---------------------------------------------------------------------------
.text$mn:0000D19A
.text$mn:0000D19A loc_D19A:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000D19A                 mov     ecx, [ebp+arg_8]
.text$mn:0000D19D                 push    ecx             ; int
.text$mn:0000D19E                 mov     edx, [ebp+Src]
.text$mn:0000D1A1                 push    edx             ; Src
.text$mn:0000D1A2                 mov     eax, [ebp+Dst]
.text$mn:0000D1A5                 push    eax             ; Dst
.text$mn:0000D1A6                 call    _wmemcpy
.text$mn:0000D1AB                 add     esp, 0Ch
.text$mn:0000D1AE                 mov     [ebp+var_4], eax
.text$mn:0000D1B1
.text$mn:0000D1B1 loc_D1B1:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000D1B1                 mov     eax, [ebp+var_4]
.text$mn:0000D1B4                 mov     esp, ebp
.text$mn:0000D1B6                 pop     ebp
.text$mn:0000D1B7                 retn
.text$mn:0000D1B7 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000D1B7
.text$mn:0000D1B7 _text$mn        ends
.text$mn:0000D1B7
.text$mn:0000D1B8 ; ===========================================================================
.text$mn:0000D1B8
.text$mn:0000D1B8 ; Segment type: Pure code
.text$mn:0000D1B8 ; Segment permissions: Read/Execute
.text$mn:0000D1B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D1B8                 assume cs:_text$mn
.text$mn:0000D1B8                 ;org 0D1B8h
.text$mn:0000D1B8 ; COMDAT (pick any)
.text$mn:0000D1B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D1B8
.text$mn:0000D1B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D1B8
.text$mn:0000D1B8 ; Attributes: bp-based frame
.text$mn:0000D1B8
.text$mn:0000D1B8 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:0000D1B8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:0000D1B8 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:0000D1B8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:0000D1B8
.text$mn:0000D1B8 var_4           = dword ptr -4
.text$mn:0000D1B8 arg_0           = dword ptr  8
.text$mn:0000D1B8 arg_4           = dword ptr  0Ch
.text$mn:0000D1B8
.text$mn:0000D1B8                 push    ebp
.text$mn:0000D1B9                 mov     ebp, esp
.text$mn:0000D1BB                 push    ecx
.text$mn:0000D1BC                 mov     [ebp+var_4], ecx
.text$mn:0000D1BF                 mov     eax, [ebp+arg_4]
.text$mn:0000D1C2                 push    eax             ; int
.text$mn:0000D1C3                 mov     ecx, [ebp+arg_0]
.text$mn:0000D1C6                 push    ecx             ; void *
.text$mn:0000D1C7                 mov     ecx, [ebp+var_4]
.text$mn:0000D1CA                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:0000D1CF                 mov     esp, ebp
.text$mn:0000D1D1                 pop     ebp
.text$mn:0000D1D2                 retn    8
.text$mn:0000D1D2 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:0000D1D2
.text$mn:0000D1D2 ; ---------------------------------------------------------------------------
.text$mn:0000D1D5                 align 4
.text$mn:0000D1D5 _text$mn        ends
.text$mn:0000D1D5
.text$mn:0000D1D8 ; ===========================================================================
.text$mn:0000D1D8
.text$mn:0000D1D8 ; Segment type: Pure code
.text$mn:0000D1D8 ; Segment permissions: Read/Execute
.text$mn:0000D1D8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D1D8                 assume cs:_text$mn
.text$mn:0000D1D8                 ;org 0D1D8h
.text$mn:0000D1D8 ; COMDAT (pick any)
.text$mn:0000D1D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D1D8
.text$mn:0000D1D8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D1D8
.text$mn:0000D1D8 ; Attributes: bp-based frame
.text$mn:0000D1D8
.text$mn:0000D1D8 ; int __stdcall std::_Wrap_alloc<std::allocator<FunctionParser *>>::deallocate(void *, int)
.text$mn:0000D1D8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@I@Z
.text$mn:0000D1D8 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@I@Z proc near
.text$mn:0000D1D8                                         ; CODE XREF: __catch$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z$0+16p
.text$mn:0000D1D8                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reallocate(uint)+F5p ...
.text$mn:0000D1D8
.text$mn:0000D1D8 var_4           = dword ptr -4
.text$mn:0000D1D8 arg_0           = dword ptr  8
.text$mn:0000D1D8 arg_4           = dword ptr  0Ch
.text$mn:0000D1D8
.text$mn:0000D1D8                 push    ebp
.text$mn:0000D1D9                 mov     ebp, esp
.text$mn:0000D1DB                 push    ecx
.text$mn:0000D1DC                 mov     [ebp+var_4], ecx
.text$mn:0000D1DF                 mov     eax, [ebp+arg_4]
.text$mn:0000D1E2                 push    eax             ; int
.text$mn:0000D1E3                 mov     ecx, [ebp+arg_0]
.text$mn:0000D1E6                 push    ecx             ; void *
.text$mn:0000D1E7                 mov     ecx, [ebp+var_4]
.text$mn:0000D1EA                 call    ?deallocate@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@I@Z ; std::allocator<FunctionParser *>::deallocate(FunctionParser * *,uint)
.text$mn:0000D1EF                 mov     esp, ebp
.text$mn:0000D1F1                 pop     ebp
.text$mn:0000D1F2                 retn    8
.text$mn:0000D1F2 ?deallocate@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@I@Z endp
.text$mn:0000D1F2
.text$mn:0000D1F2 ; ---------------------------------------------------------------------------
.text$mn:0000D1F5                 align 4
.text$mn:0000D1F5 _text$mn        ends
.text$mn:0000D1F5
.text$mn:0000D1F8 ; ===========================================================================
.text$mn:0000D1F8
.text$mn:0000D1F8 ; Segment type: Pure code
.text$mn:0000D1F8 ; Segment permissions: Read/Execute
.text$mn:0000D1F8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D1F8                 assume cs:_text$mn
.text$mn:0000D1F8                 ;org 0D1F8h
.text$mn:0000D1F8 ; COMDAT (pick any)
.text$mn:0000D1F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D1F8
.text$mn:0000D1F8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D1F8
.text$mn:0000D1F8 ; Attributes: bp-based frame
.text$mn:0000D1F8
.text$mn:0000D1F8 ; int __stdcall std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::deallocate(void *, int)
.text$mn:0000D1F8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@2@I@Z
.text$mn:0000D1F8 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@2@I@Z proc near
.text$mn:0000D1F8                                         ; CODE XREF: __catch$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z$0+16p
.text$mn:0000D1F8                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reallocate(uint)+F5p ...
.text$mn:0000D1F8
.text$mn:0000D1F8 var_4           = dword ptr -4
.text$mn:0000D1F8 arg_0           = dword ptr  8
.text$mn:0000D1F8 arg_4           = dword ptr  0Ch
.text$mn:0000D1F8
.text$mn:0000D1F8                 push    ebp
.text$mn:0000D1F9                 mov     ebp, esp
.text$mn:0000D1FB                 push    ecx
.text$mn:0000D1FC                 mov     [ebp+var_4], ecx
.text$mn:0000D1FF                 mov     eax, [ebp+arg_4]
.text$mn:0000D202                 push    eax             ; int
.text$mn:0000D203                 mov     ecx, [ebp+arg_0]
.text$mn:0000D206                 push    ecx             ; void *
.text$mn:0000D207                 mov     ecx, [ebp+var_4]
.text$mn:0000D20A                 call    ?deallocate@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@2@I@Z ; std::allocator<std::pair<int,int>>::deallocate(std::pair<int,int> *,uint)
.text$mn:0000D20F                 mov     esp, ebp
.text$mn:0000D211                 pop     ebp
.text$mn:0000D212                 retn    8
.text$mn:0000D212 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@2@I@Z endp
.text$mn:0000D212
.text$mn:0000D212 ; ---------------------------------------------------------------------------
.text$mn:0000D215                 align 4
.text$mn:0000D215 _text$mn        ends
.text$mn:0000D215
.text$mn:0000D218 ; ===========================================================================
.text$mn:0000D218
.text$mn:0000D218 ; Segment type: Pure code
.text$mn:0000D218 ; Segment permissions: Read/Execute
.text$mn:0000D218 _text$mn        segment para public 'CODE' use32
.text$mn:0000D218                 assume cs:_text$mn
.text$mn:0000D218                 ;org 0D218h
.text$mn:0000D218 ; COMDAT (pick any)
.text$mn:0000D218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D218
.text$mn:0000D218 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D218
.text$mn:0000D218 ; Attributes: bp-based frame
.text$mn:0000D218
.text$mn:0000D218 ; int __stdcall std::_Wrap_alloc<std::allocator<AssociationInfo>>::deallocate(void *, int)
.text$mn:0000D218                 public ?deallocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@I@Z
.text$mn:0000D218 ?deallocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@I@Z proc near
.text$mn:0000D218                                         ; CODE XREF: __catch$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z$0+16p
.text$mn:0000D218                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reallocate(uint)+F5p ...
.text$mn:0000D218
.text$mn:0000D218 var_4           = dword ptr -4
.text$mn:0000D218 arg_0           = dword ptr  8
.text$mn:0000D218 arg_4           = dword ptr  0Ch
.text$mn:0000D218
.text$mn:0000D218                 push    ebp
.text$mn:0000D219                 mov     ebp, esp
.text$mn:0000D21B                 push    ecx
.text$mn:0000D21C                 mov     [ebp+var_4], ecx
.text$mn:0000D21F                 mov     eax, [ebp+arg_4]
.text$mn:0000D222                 push    eax             ; int
.text$mn:0000D223                 mov     ecx, [ebp+arg_0]
.text$mn:0000D226                 push    ecx             ; void *
.text$mn:0000D227                 mov     ecx, [ebp+var_4]
.text$mn:0000D22A                 call    ?deallocate@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@I@Z ; std::allocator<AssociationInfo>::deallocate(AssociationInfo *,uint)
.text$mn:0000D22F                 mov     esp, ebp
.text$mn:0000D231                 pop     ebp
.text$mn:0000D232                 retn    8
.text$mn:0000D232 ?deallocate@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@I@Z endp
.text$mn:0000D232
.text$mn:0000D232 ; ---------------------------------------------------------------------------
.text$mn:0000D235                 align 4
.text$mn:0000D235 _text$mn        ends
.text$mn:0000D235
.text$mn:0000D238 ; ===========================================================================
.text$mn:0000D238
.text$mn:0000D238 ; Segment type: Pure code
.text$mn:0000D238 ; Segment permissions: Read/Execute
.text$mn:0000D238 _text$mn        segment para public 'CODE' use32
.text$mn:0000D238                 assume cs:_text$mn
.text$mn:0000D238                 ;org 0D238h
.text$mn:0000D238 ; COMDAT (pick any)
.text$mn:0000D238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D238
.text$mn:0000D238 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D238
.text$mn:0000D238 ; Attributes: bp-based frame
.text$mn:0000D238
.text$mn:0000D238 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(void *, int)
.text$mn:0000D238                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000D238 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000D238                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Free_proxy(void)+32p
.text$mn:0000D238                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Free_proxy(void)+32p ...
.text$mn:0000D238
.text$mn:0000D238 var_4           = dword ptr -4
.text$mn:0000D238 arg_0           = dword ptr  8
.text$mn:0000D238 arg_4           = dword ptr  0Ch
.text$mn:0000D238
.text$mn:0000D238                 push    ebp
.text$mn:0000D239                 mov     ebp, esp
.text$mn:0000D23B                 push    ecx
.text$mn:0000D23C                 mov     [ebp+var_4], ecx
.text$mn:0000D23F                 mov     eax, [ebp+arg_4]
.text$mn:0000D242                 push    eax             ; int
.text$mn:0000D243                 mov     ecx, [ebp+arg_0]
.text$mn:0000D246                 push    ecx             ; void *
.text$mn:0000D247                 mov     ecx, [ebp+var_4]
.text$mn:0000D24A                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000D24F                 mov     esp, ebp
.text$mn:0000D251                 pop     ebp
.text$mn:0000D252                 retn    8
.text$mn:0000D252 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000D252
.text$mn:0000D252 ; ---------------------------------------------------------------------------
.text$mn:0000D255                 align 4
.text$mn:0000D255 _text$mn        ends
.text$mn:0000D255
.text$mn:0000D258 ; ===========================================================================
.text$mn:0000D258
.text$mn:0000D258 ; Segment type: Pure code
.text$mn:0000D258 ; Segment permissions: Read/Execute
.text$mn:0000D258 _text$mn        segment para public 'CODE' use32
.text$mn:0000D258                 assume cs:_text$mn
.text$mn:0000D258                 ;org 0D258h
.text$mn:0000D258 ; COMDAT (pick any)
.text$mn:0000D258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D258
.text$mn:0000D258 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D258
.text$mn:0000D258 ; Attributes: bp-based frame
.text$mn:0000D258
.text$mn:0000D258 ; int __stdcall std::_Wrap_alloc<std::allocator<foundInfo>>::deallocate(void *, int)
.text$mn:0000D258                 public ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z
.text$mn:0000D258 ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z proc near
.text$mn:0000D258                                         ; CODE XREF: __catch$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z$0+16p
.text$mn:0000D258                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+F5p
.text$mn:0000D258
.text$mn:0000D258 var_4           = dword ptr -4
.text$mn:0000D258 arg_0           = dword ptr  8
.text$mn:0000D258 arg_4           = dword ptr  0Ch
.text$mn:0000D258
.text$mn:0000D258                 push    ebp
.text$mn:0000D259                 mov     ebp, esp
.text$mn:0000D25B                 push    ecx
.text$mn:0000D25C                 mov     [ebp+var_4], ecx
.text$mn:0000D25F                 mov     eax, [ebp+arg_4]
.text$mn:0000D262                 push    eax             ; int
.text$mn:0000D263                 mov     ecx, [ebp+arg_0]
.text$mn:0000D266                 push    ecx             ; void *
.text$mn:0000D267                 mov     ecx, [ebp+var_4]
.text$mn:0000D26A                 call    ?deallocate@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@I@Z ; std::allocator<foundInfo>::deallocate(foundInfo *,uint)
.text$mn:0000D26F                 mov     esp, ebp
.text$mn:0000D271                 pop     ebp
.text$mn:0000D272                 retn    8
.text$mn:0000D272 ?deallocate@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@I@Z endp
.text$mn:0000D272
.text$mn:0000D272 ; ---------------------------------------------------------------------------
.text$mn:0000D275                 align 4
.text$mn:0000D275 _text$mn        ends
.text$mn:0000D275
.text$mn:0000D278 ; ===========================================================================
.text$mn:0000D278
.text$mn:0000D278 ; Segment type: Pure code
.text$mn:0000D278 ; Segment permissions: Read/Execute
.text$mn:0000D278 _text$mn        segment para public 'CODE' use32
.text$mn:0000D278                 assume cs:_text$mn
.text$mn:0000D278                 ;org 0D278h
.text$mn:0000D278 ; COMDAT (pick any)
.text$mn:0000D278                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D278
.text$mn:0000D278 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D278
.text$mn:0000D278 ; Attributes: bp-based frame
.text$mn:0000D278
.text$mn:0000D278 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(void *, int)
.text$mn:0000D278                 public ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000D278 ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000D278                                         ; CODE XREF: __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0+16p
.text$mn:0000D278                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+FAp ...
.text$mn:0000D278
.text$mn:0000D278 var_4           = dword ptr -4
.text$mn:0000D278 arg_0           = dword ptr  8
.text$mn:0000D278 arg_4           = dword ptr  0Ch
.text$mn:0000D278
.text$mn:0000D278                 push    ebp
.text$mn:0000D279                 mov     ebp, esp
.text$mn:0000D27B                 push    ecx
.text$mn:0000D27C                 mov     [ebp+var_4], ecx
.text$mn:0000D27F                 mov     eax, [ebp+arg_4]
.text$mn:0000D282                 push    eax             ; int
.text$mn:0000D283                 mov     ecx, [ebp+arg_0]
.text$mn:0000D286                 push    ecx             ; void *
.text$mn:0000D287                 mov     ecx, [ebp+var_4]
.text$mn:0000D28A                 call    ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:0000D28F                 mov     esp, ebp
.text$mn:0000D291                 pop     ebp
.text$mn:0000D292                 retn    8
.text$mn:0000D292 ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000D292
.text$mn:0000D292 ; ---------------------------------------------------------------------------
.text$mn:0000D295                 align 4
.text$mn:0000D295 _text$mn        ends
.text$mn:0000D295
.text$mn:0000D298 ; ===========================================================================
.text$mn:0000D298
.text$mn:0000D298 ; Segment type: Pure code
.text$mn:0000D298 ; Segment permissions: Read/Execute
.text$mn:0000D298 _text$mn        segment para public 'CODE' use32
.text$mn:0000D298                 assume cs:_text$mn
.text$mn:0000D298                 ;org 0D298h
.text$mn:0000D298 ; COMDAT (pick any)
.text$mn:0000D298                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D298
.text$mn:0000D298 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D298
.text$mn:0000D298 ; Attributes: bp-based frame
.text$mn:0000D298
.text$mn:0000D298 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:0000D298                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:0000D298 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:0000D298                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:0000D298
.text$mn:0000D298 var_4           = dword ptr -4
.text$mn:0000D298 arg_0           = dword ptr  8
.text$mn:0000D298 arg_4           = dword ptr  0Ch
.text$mn:0000D298
.text$mn:0000D298                 push    ebp
.text$mn:0000D299                 mov     ebp, esp
.text$mn:0000D29B                 push    ecx
.text$mn:0000D29C                 mov     [ebp+var_4], ecx
.text$mn:0000D29F                 mov     eax, [ebp+arg_4]
.text$mn:0000D2A2                 push    eax             ; int
.text$mn:0000D2A3                 mov     ecx, [ebp+arg_0]
.text$mn:0000D2A6                 push    ecx             ; void *
.text$mn:0000D2A7                 mov     ecx, [ebp+var_4]
.text$mn:0000D2AA                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:0000D2AF                 mov     esp, ebp
.text$mn:0000D2B1                 pop     ebp
.text$mn:0000D2B2                 retn    8
.text$mn:0000D2B2 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:0000D2B2
.text$mn:0000D2B2 ; ---------------------------------------------------------------------------
.text$mn:0000D2B5                 align 4
.text$mn:0000D2B5 _text$mn        ends
.text$mn:0000D2B5
.text$mn:0000D2B8 ; ===========================================================================
.text$mn:0000D2B8
.text$mn:0000D2B8 ; Segment type: Pure code
.text$mn:0000D2B8 ; Segment permissions: Read/Execute
.text$mn:0000D2B8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D2B8                 assume cs:_text$mn
.text$mn:0000D2B8                 ;org 0D2B8h
.text$mn:0000D2B8 ; COMDAT (pick any)
.text$mn:0000D2B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D2B8
.text$mn:0000D2B8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D2B8
.text$mn:0000D2B8 ; Attributes: bp-based frame
.text$mn:0000D2B8
.text$mn:0000D2B8 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:0000D2B8                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:0000D2B8 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:0000D2B8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:0000D2B8
.text$mn:0000D2B8 var_4           = dword ptr -4
.text$mn:0000D2B8 arg_0           = dword ptr  8
.text$mn:0000D2B8
.text$mn:0000D2B8                 push    ebp
.text$mn:0000D2B9                 mov     ebp, esp
.text$mn:0000D2BB                 push    ecx
.text$mn:0000D2BC                 mov     [ebp+var_4], ecx
.text$mn:0000D2BF                 mov     eax, [ebp+arg_0]
.text$mn:0000D2C2                 push    eax             ; void *
.text$mn:0000D2C3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D2C8                 add     esp, 4
.text$mn:0000D2CB                 mov     esp, ebp
.text$mn:0000D2CD                 pop     ebp
.text$mn:0000D2CE                 retn    8
.text$mn:0000D2CE ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:0000D2CE
.text$mn:0000D2CE ; ---------------------------------------------------------------------------
.text$mn:0000D2D1                 align 4
.text$mn:0000D2D1 _text$mn        ends
.text$mn:0000D2D1
.text$mn:0000D2D4 ; ===========================================================================
.text$mn:0000D2D4
.text$mn:0000D2D4 ; Segment type: Pure code
.text$mn:0000D2D4 ; Segment permissions: Read/Execute
.text$mn:0000D2D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000D2D4                 assume cs:_text$mn
.text$mn:0000D2D4                 ;org 0D2D4h
.text$mn:0000D2D4 ; COMDAT (pick any)
.text$mn:0000D2D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D2D4
.text$mn:0000D2D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D2D4
.text$mn:0000D2D4 ; Attributes: bp-based frame
.text$mn:0000D2D4
.text$mn:0000D2D4 ; int __stdcall std::allocator<FunctionParser *>::deallocate(void *, int)
.text$mn:0000D2D4                 public ?deallocate@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@I@Z
.text$mn:0000D2D4 ?deallocate@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@I@Z proc near
.text$mn:0000D2D4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<FunctionParser *>>::deallocate(FunctionParser * *,uint)+12p
.text$mn:0000D2D4
.text$mn:0000D2D4 var_4           = dword ptr -4
.text$mn:0000D2D4 arg_0           = dword ptr  8
.text$mn:0000D2D4
.text$mn:0000D2D4                 push    ebp
.text$mn:0000D2D5                 mov     ebp, esp
.text$mn:0000D2D7                 push    ecx
.text$mn:0000D2D8                 mov     [ebp+var_4], ecx
.text$mn:0000D2DB                 mov     eax, [ebp+arg_0]
.text$mn:0000D2DE                 push    eax             ; void *
.text$mn:0000D2DF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D2E4                 add     esp, 4
.text$mn:0000D2E7                 mov     esp, ebp
.text$mn:0000D2E9                 pop     ebp
.text$mn:0000D2EA                 retn    8
.text$mn:0000D2EA ?deallocate@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@I@Z endp
.text$mn:0000D2EA
.text$mn:0000D2EA ; ---------------------------------------------------------------------------
.text$mn:0000D2ED                 align 10h
.text$mn:0000D2ED _text$mn        ends
.text$mn:0000D2ED
.text$mn:0000D2F0 ; ===========================================================================
.text$mn:0000D2F0
.text$mn:0000D2F0 ; Segment type: Pure code
.text$mn:0000D2F0 ; Segment permissions: Read/Execute
.text$mn:0000D2F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D2F0                 assume cs:_text$mn
.text$mn:0000D2F0                 ;org 0D2F0h
.text$mn:0000D2F0 ; COMDAT (pick any)
.text$mn:0000D2F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D2F0
.text$mn:0000D2F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D2F0
.text$mn:0000D2F0 ; Attributes: bp-based frame
.text$mn:0000D2F0
.text$mn:0000D2F0 ; int __stdcall std::allocator<std::pair<int,int>>::deallocate(void *, int)
.text$mn:0000D2F0                 public ?deallocate@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@2@I@Z
.text$mn:0000D2F0 ?deallocate@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@2@I@Z proc near
.text$mn:0000D2F0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::deallocate(std::pair<int,int> *,uint)+12p
.text$mn:0000D2F0
.text$mn:0000D2F0 var_4           = dword ptr -4
.text$mn:0000D2F0 arg_0           = dword ptr  8
.text$mn:0000D2F0
.text$mn:0000D2F0                 push    ebp
.text$mn:0000D2F1                 mov     ebp, esp
.text$mn:0000D2F3                 push    ecx
.text$mn:0000D2F4                 mov     [ebp+var_4], ecx
.text$mn:0000D2F7                 mov     eax, [ebp+arg_0]
.text$mn:0000D2FA                 push    eax             ; void *
.text$mn:0000D2FB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D300                 add     esp, 4
.text$mn:0000D303                 mov     esp, ebp
.text$mn:0000D305                 pop     ebp
.text$mn:0000D306                 retn    8
.text$mn:0000D306 ?deallocate@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@2@I@Z endp
.text$mn:0000D306
.text$mn:0000D306 ; ---------------------------------------------------------------------------
.text$mn:0000D309                 align 4
.text$mn:0000D309 _text$mn        ends
.text$mn:0000D309
.text$mn:0000D30C ; ===========================================================================
.text$mn:0000D30C
.text$mn:0000D30C ; Segment type: Pure code
.text$mn:0000D30C ; Segment permissions: Read/Execute
.text$mn:0000D30C _text$mn        segment para public 'CODE' use32
.text$mn:0000D30C                 assume cs:_text$mn
.text$mn:0000D30C                 ;org 0D30Ch
.text$mn:0000D30C ; COMDAT (pick any)
.text$mn:0000D30C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D30C
.text$mn:0000D30C ; =============== S U B R O U T I N E =======================================
.text$mn:0000D30C
.text$mn:0000D30C ; Attributes: bp-based frame
.text$mn:0000D30C
.text$mn:0000D30C ; int __stdcall std::allocator<AssociationInfo>::deallocate(void *, int)
.text$mn:0000D30C                 public ?deallocate@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@I@Z
.text$mn:0000D30C ?deallocate@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@I@Z proc near
.text$mn:0000D30C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<AssociationInfo>>::deallocate(AssociationInfo *,uint)+12p
.text$mn:0000D30C
.text$mn:0000D30C var_4           = dword ptr -4
.text$mn:0000D30C arg_0           = dword ptr  8
.text$mn:0000D30C
.text$mn:0000D30C                 push    ebp
.text$mn:0000D30D                 mov     ebp, esp
.text$mn:0000D30F                 push    ecx
.text$mn:0000D310                 mov     [ebp+var_4], ecx
.text$mn:0000D313                 mov     eax, [ebp+arg_0]
.text$mn:0000D316                 push    eax             ; void *
.text$mn:0000D317                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D31C                 add     esp, 4
.text$mn:0000D31F                 mov     esp, ebp
.text$mn:0000D321                 pop     ebp
.text$mn:0000D322                 retn    8
.text$mn:0000D322 ?deallocate@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@I@Z endp
.text$mn:0000D322
.text$mn:0000D322 ; ---------------------------------------------------------------------------
.text$mn:0000D325                 align 4
.text$mn:0000D325 _text$mn        ends
.text$mn:0000D325
.text$mn:0000D328 ; ===========================================================================
.text$mn:0000D328
.text$mn:0000D328 ; Segment type: Pure code
.text$mn:0000D328 ; Segment permissions: Read/Execute
.text$mn:0000D328 _text$mn        segment para public 'CODE' use32
.text$mn:0000D328                 assume cs:_text$mn
.text$mn:0000D328                 ;org 0D328h
.text$mn:0000D328 ; COMDAT (pick any)
.text$mn:0000D328                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D328
.text$mn:0000D328 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D328
.text$mn:0000D328 ; Attributes: bp-based frame
.text$mn:0000D328
.text$mn:0000D328 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:0000D328                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:0000D328 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:0000D328                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:0000D328                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p ...
.text$mn:0000D328
.text$mn:0000D328 var_4           = dword ptr -4
.text$mn:0000D328 arg_0           = dword ptr  8
.text$mn:0000D328
.text$mn:0000D328                 push    ebp
.text$mn:0000D329                 mov     ebp, esp
.text$mn:0000D32B                 push    ecx
.text$mn:0000D32C                 mov     [ebp+var_4], ecx
.text$mn:0000D32F                 mov     eax, [ebp+arg_0]
.text$mn:0000D332                 push    eax             ; void *
.text$mn:0000D333                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D338                 add     esp, 4
.text$mn:0000D33B                 mov     esp, ebp
.text$mn:0000D33D                 pop     ebp
.text$mn:0000D33E                 retn    8
.text$mn:0000D33E ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000D33E
.text$mn:0000D33E ; ---------------------------------------------------------------------------
.text$mn:0000D341                 align 4
.text$mn:0000D341 _text$mn        ends
.text$mn:0000D341
.text$mn:0000D344 ; ===========================================================================
.text$mn:0000D344
.text$mn:0000D344 ; Segment type: Pure code
.text$mn:0000D344 ; Segment permissions: Read/Execute
.text$mn:0000D344 _text$mn        segment para public 'CODE' use32
.text$mn:0000D344                 assume cs:_text$mn
.text$mn:0000D344                 ;org 0D344h
.text$mn:0000D344 ; COMDAT (pick any)
.text$mn:0000D344                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D344
.text$mn:0000D344 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D344
.text$mn:0000D344 ; Attributes: bp-based frame
.text$mn:0000D344
.text$mn:0000D344 ; int __stdcall std::allocator<foundInfo>::deallocate(void *, int)
.text$mn:0000D344                 public ?deallocate@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@I@Z
.text$mn:0000D344 ?deallocate@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@I@Z proc near
.text$mn:0000D344                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::deallocate(foundInfo *,uint)+12p
.text$mn:0000D344
.text$mn:0000D344 var_4           = dword ptr -4
.text$mn:0000D344 arg_0           = dword ptr  8
.text$mn:0000D344
.text$mn:0000D344                 push    ebp
.text$mn:0000D345                 mov     ebp, esp
.text$mn:0000D347                 push    ecx
.text$mn:0000D348                 mov     [ebp+var_4], ecx
.text$mn:0000D34B                 mov     eax, [ebp+arg_0]
.text$mn:0000D34E                 push    eax             ; void *
.text$mn:0000D34F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D354                 add     esp, 4
.text$mn:0000D357                 mov     esp, ebp
.text$mn:0000D359                 pop     ebp
.text$mn:0000D35A                 retn    8
.text$mn:0000D35A ?deallocate@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@I@Z endp
.text$mn:0000D35A
.text$mn:0000D35A ; ---------------------------------------------------------------------------
.text$mn:0000D35D                 align 10h
.text$mn:0000D35D _text$mn        ends
.text$mn:0000D35D
.text$mn:0000D360 ; ===========================================================================
.text$mn:0000D360
.text$mn:0000D360 ; Segment type: Pure code
.text$mn:0000D360 ; Segment permissions: Read/Execute
.text$mn:0000D360 _text$mn        segment para public 'CODE' use32
.text$mn:0000D360                 assume cs:_text$mn
.text$mn:0000D360                 ;org 0D360h
.text$mn:0000D360 ; COMDAT (pick any)
.text$mn:0000D360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D360
.text$mn:0000D360 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D360
.text$mn:0000D360 ; Attributes: bp-based frame
.text$mn:0000D360
.text$mn:0000D360 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(void *, int)
.text$mn:0000D360                 public ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000D360 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000D360                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)+12p
.text$mn:0000D360
.text$mn:0000D360 var_4           = dword ptr -4
.text$mn:0000D360 arg_0           = dword ptr  8
.text$mn:0000D360
.text$mn:0000D360                 push    ebp
.text$mn:0000D361                 mov     ebp, esp
.text$mn:0000D363                 push    ecx
.text$mn:0000D364                 mov     [ebp+var_4], ecx
.text$mn:0000D367                 mov     eax, [ebp+arg_0]
.text$mn:0000D36A                 push    eax             ; void *
.text$mn:0000D36B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D370                 add     esp, 4
.text$mn:0000D373                 mov     esp, ebp
.text$mn:0000D375                 pop     ebp
.text$mn:0000D376                 retn    8
.text$mn:0000D376 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:0000D376
.text$mn:0000D376 ; ---------------------------------------------------------------------------
.text$mn:0000D379                 align 4
.text$mn:0000D379 _text$mn        ends
.text$mn:0000D379
.text$mn:0000D37C ; ===========================================================================
.text$mn:0000D37C
.text$mn:0000D37C ; Segment type: Pure code
.text$mn:0000D37C ; Segment permissions: Read/Execute
.text$mn:0000D37C _text$mn        segment para public 'CODE' use32
.text$mn:0000D37C                 assume cs:_text$mn
.text$mn:0000D37C                 ;org 0D37Ch
.text$mn:0000D37C ; COMDAT (pick any)
.text$mn:0000D37C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D37C
.text$mn:0000D37C ; =============== S U B R O U T I N E =======================================
.text$mn:0000D37C
.text$mn:0000D37C ; Attributes: bp-based frame
.text$mn:0000D37C
.text$mn:0000D37C ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:0000D37C                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:0000D37C ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:0000D37C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:0000D37C
.text$mn:0000D37C var_4           = dword ptr -4
.text$mn:0000D37C arg_0           = dword ptr  8
.text$mn:0000D37C
.text$mn:0000D37C                 push    ebp
.text$mn:0000D37D                 mov     ebp, esp
.text$mn:0000D37F                 push    ecx
.text$mn:0000D380                 mov     [ebp+var_4], ecx
.text$mn:0000D383                 mov     eax, [ebp+arg_0]
.text$mn:0000D386                 push    eax             ; void *
.text$mn:0000D387                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000D38C                 add     esp, 4
.text$mn:0000D38F                 mov     esp, ebp
.text$mn:0000D391                 pop     ebp
.text$mn:0000D392                 retn    8
.text$mn:0000D392 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:0000D392
.text$mn:0000D392 ; ---------------------------------------------------------------------------
.text$mn:0000D395                 align 4
.text$mn:0000D395 _text$mn        ends
.text$mn:0000D395
.text$mn:0000D398 ; ===========================================================================
.text$mn:0000D398
.text$mn:0000D398 ; Segment type: Pure code
.text$mn:0000D398 ; Segment permissions: Read/Execute
.text$mn:0000D398 _text$mn        segment para public 'CODE' use32
.text$mn:0000D398                 assume cs:_text$mn
.text$mn:0000D398                 ;org 0D398h
.text$mn:0000D398 ; COMDAT (pick any)
.text$mn:0000D398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D398
.text$mn:0000D398 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D398
.text$mn:0000D398 ; Attributes: bp-based frame
.text$mn:0000D398
.text$mn:0000D398 ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:0000D398                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000D398 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000D398                                         ; DATA XREF: .rdata:00010EB8o
.text$mn:0000D398
.text$mn:0000D398 var_4           = dword ptr -4
.text$mn:0000D398 arg_0           = dword ptr  8
.text$mn:0000D398 arg_4           = dword ptr  0Ch
.text$mn:0000D398
.text$mn:0000D398                 push    ebp
.text$mn:0000D399                 mov     ebp, esp
.text$mn:0000D39B                 push    ecx
.text$mn:0000D39C                 mov     [ebp+var_4], ecx
.text$mn:0000D39F                 mov     eax, [ebp+arg_4]
.text$mn:0000D3A2                 push    eax             ; int
.text$mn:0000D3A3                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000D3A8                 add     esp, 4
.text$mn:0000D3AB                 test    eax, eax
.text$mn:0000D3AD                 jz      short loc_D3C8
.text$mn:0000D3AF                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:0000D3B4                 push    eax             ; struct std::error_category *
.text$mn:0000D3B5                 mov     ecx, [ebp+arg_4]
.text$mn:0000D3B8                 push    ecx             ; int
.text$mn:0000D3B9                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D3BC                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000D3C1                 mov     eax, [ebp+arg_0]
.text$mn:0000D3C4                 jmp     short loc_D3DD
.text$mn:0000D3C6 ; ---------------------------------------------------------------------------
.text$mn:0000D3C6                 jmp     short loc_D3DD
.text$mn:0000D3C8 ; ---------------------------------------------------------------------------
.text$mn:0000D3C8
.text$mn:0000D3C8 loc_D3C8:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:0000D3C8                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:0000D3CD                 push    eax             ; struct std::error_category *
.text$mn:0000D3CE                 mov     edx, [ebp+arg_4]
.text$mn:0000D3D1                 push    edx             ; int
.text$mn:0000D3D2                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D3D5                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000D3DA                 mov     eax, [ebp+arg_0]
.text$mn:0000D3DD
.text$mn:0000D3DD loc_D3DD:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:0000D3DD                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:0000D3DD                 mov     esp, ebp
.text$mn:0000D3DF                 pop     ebp
.text$mn:0000D3E0                 retn    8
.text$mn:0000D3E0 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000D3E0
.text$mn:0000D3E0 ; ---------------------------------------------------------------------------
.text$mn:0000D3E3                 align 4
.text$mn:0000D3E3 _text$mn        ends
.text$mn:0000D3E3
.text$mn:0000D3E4 ; ===========================================================================
.text$mn:0000D3E4
.text$mn:0000D3E4 ; Segment type: Pure code
.text$mn:0000D3E4 ; Segment permissions: Read/Execute
.text$mn:0000D3E4 _text$mn        segment para public 'CODE' use32
.text$mn:0000D3E4                 assume cs:_text$mn
.text$mn:0000D3E4                 ;org 0D3E4h
.text$mn:0000D3E4 ; COMDAT (pick any)
.text$mn:0000D3E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D3E4
.text$mn:0000D3E4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D3E4
.text$mn:0000D3E4 ; Attributes: bp-based frame
.text$mn:0000D3E4
.text$mn:0000D3E4 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:0000D3E4                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000D3E4 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000D3E4                                         ; DATA XREF: .rdata:00010E28o
.text$mn:0000D3E4                                         ; .rdata:00010E44o ...
.text$mn:0000D3E4
.text$mn:0000D3E4 var_4           = dword ptr -4
.text$mn:0000D3E4 arg_0           = dword ptr  8
.text$mn:0000D3E4 arg_4           = dword ptr  0Ch
.text$mn:0000D3E4
.text$mn:0000D3E4                 push    ebp
.text$mn:0000D3E5                 mov     ebp, esp
.text$mn:0000D3E7                 push    ecx
.text$mn:0000D3E8                 mov     [ebp+var_4], ecx
.text$mn:0000D3EB                 mov     eax, [ebp+var_4]
.text$mn:0000D3EE                 push    eax             ; struct std::error_category *
.text$mn:0000D3EF                 mov     ecx, [ebp+arg_4]
.text$mn:0000D3F2                 push    ecx             ; int
.text$mn:0000D3F3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D3F6                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000D3FB                 mov     eax, [ebp+arg_0]
.text$mn:0000D3FE                 mov     esp, ebp
.text$mn:0000D400                 pop     ebp
.text$mn:0000D401                 retn    8
.text$mn:0000D401 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:0000D401
.text$mn:0000D401 _text$mn        ends
.text$mn:0000D401
.text$mn:0000D404 ; ===========================================================================
.text$mn:0000D404
.text$mn:0000D404 ; Segment type: Pure code
.text$mn:0000D404 ; Segment permissions: Read/Execute
.text$mn:0000D404 _text$mn        segment para public 'CODE' use32
.text$mn:0000D404                 assume cs:_text$mn
.text$mn:0000D404                 ;org 0D404h
.text$mn:0000D404 ; COMDAT (pick any)
.text$mn:0000D404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D404
.text$mn:0000D404 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D404
.text$mn:0000D404 ; Attributes: bp-based frame
.text$mn:0000D404
.text$mn:0000D404 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::end(void)
.text$mn:0000D404                 public ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000D404 ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:0000D404                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+72p
.text$mn:0000D404                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+8Ep
.text$mn:0000D404
.text$mn:0000D404 var_14          = dword ptr -14h
.text$mn:0000D404 var_10          = dword ptr -10h
.text$mn:0000D404 var_C           = dword ptr -0Ch
.text$mn:0000D404 var_4           = dword ptr -4
.text$mn:0000D404 arg_0           = dword ptr  8
.text$mn:0000D404
.text$mn:0000D404                 push    ebp
.text$mn:0000D405                 mov     ebp, esp
.text$mn:0000D407                 push    0FFFFFFFFh
.text$mn:0000D409                 push    offset __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000D40E                 mov     eax, large fs:0
.text$mn:0000D414                 push    eax
.text$mn:0000D415                 sub     esp, 8
.text$mn:0000D418                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000D41D                 xor     eax, ebp
.text$mn:0000D41F                 push    eax
.text$mn:0000D420                 lea     eax, [ebp+var_C]
.text$mn:0000D423                 mov     large fs:0, eax
.text$mn:0000D429                 mov     [ebp+var_10], ecx
.text$mn:0000D42C                 mov     [ebp+var_14], 0
.text$mn:0000D433                 mov     eax, [ebp+var_10]
.text$mn:0000D436                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000D437                 mov     ecx, [ebp+var_10]
.text$mn:0000D43A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000D43F                 mov     ecx, [ebp+var_10]
.text$mn:0000D442                 mov     edx, [ecx+14h]
.text$mn:0000D445                 lea     eax, [eax+edx*2]
.text$mn:0000D448                 push    eax             ; int
.text$mn:0000D449                 mov     ecx, [ebp+arg_0]
.text$mn:0000D44C                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:0000D451                 mov     [ebp+var_4], 0
.text$mn:0000D458                 mov     ecx, [ebp+var_14]
.text$mn:0000D45B                 or      ecx, 1
.text$mn:0000D45E                 mov     [ebp+var_14], ecx
.text$mn:0000D461                 mov     eax, [ebp+arg_0]
.text$mn:0000D464                 mov     ecx, [ebp+var_C]
.text$mn:0000D467                 mov     large fs:0, ecx
.text$mn:0000D46E                 pop     ecx
.text$mn:0000D46F                 mov     esp, ebp
.text$mn:0000D471                 pop     ebp
.text$mn:0000D472                 retn    4
.text$mn:0000D472 ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:0000D472
.text$mn:0000D472 ; ---------------------------------------------------------------------------
.text$mn:0000D475                 align 4
.text$mn:0000D475 _text$mn        ends
.text$mn:0000D475
.text$x:0000D478 ; ===========================================================================
.text$x:0000D478
.text$x:0000D478 ; Segment type: Pure code
.text$x:0000D478 ; Segment permissions: Read/Execute
.text$x:0000D478 _text$x         segment para public 'CODE' use32
.text$x:0000D478                 assume cs:_text$x
.text$x:0000D478                 ;org 0D478h
.text$x:0000D478 ; COMDAT (pick associative to section at D404)
.text$x:0000D478                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D478
.text$x:0000D478 ; =============== S U B R O U T I N E =======================================
.text$x:0000D478
.text$x:0000D478
.text$x:0000D478 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:0000D478                                         ; DATA XREF: .xdata$x:0000F4C4o
.text$x:0000D478                 mov     eax, [ebp-14h]
.text$x:0000D47B                 and     eax, 1
.text$x:0000D47E                 jz      $LN4_0
.text$x:0000D484                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000D488                 mov     ecx, [ebp+8]
.text$x:0000D48B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000D490 ; ---------------------------------------------------------------------------
.text$x:0000D490
.text$x:0000D490 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:0000D490                 retn
.text$x:0000D490 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:0000D490
.text$x:0000D491
.text$x:0000D491 ; =============== S U B R O U T I N E =======================================
.text$x:0000D491
.text$x:0000D491
.text$x:0000D491 __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:0000D491                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+5o
.text$x:0000D491
.text$x:0000D491 arg_4           = dword ptr  8
.text$x:0000D491
.text$x:0000D491                 mov     edx, [esp+arg_4]
.text$x:0000D495                 lea     eax, [edx+0Ch]
.text$x:0000D498                 mov     ecx, [edx-0Ch]
.text$x:0000D49B                 xor     ecx, eax
.text$x:0000D49D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D4A2                 mov     eax, offset __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:0000D4A7                 jmp     ___CxxFrameHandler3
.text$x:0000D4A7 __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:0000D4A7
.text$x:0000D4A7 _text$x         ends
.text$x:0000D4A7
.text$mn:0000D4AC ; ===========================================================================
.text$mn:0000D4AC
.text$mn:0000D4AC ; Segment type: Pure code
.text$mn:0000D4AC ; Segment permissions: Read/Execute
.text$mn:0000D4AC _text$mn        segment para public 'CODE' use32
.text$mn:0000D4AC                 assume cs:_text$mn
.text$mn:0000D4AC                 ;org 0D4ACh
.text$mn:0000D4AC ; COMDAT (pick any)
.text$mn:0000D4AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D4AC
.text$mn:0000D4AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000D4AC
.text$mn:0000D4AC ; Attributes: bp-based frame
.text$mn:0000D4AC
.text$mn:0000D4AC ; public: class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::end(void)const
.text$mn:0000D4AC                 public ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000D4AC ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$mn:0000D4AC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+89p
.text$mn:0000D4AC
.text$mn:0000D4AC var_14          = dword ptr -14h
.text$mn:0000D4AC var_10          = dword ptr -10h
.text$mn:0000D4AC var_C           = dword ptr -0Ch
.text$mn:0000D4AC var_4           = dword ptr -4
.text$mn:0000D4AC arg_0           = dword ptr  8
.text$mn:0000D4AC
.text$mn:0000D4AC                 push    ebp
.text$mn:0000D4AD                 mov     ebp, esp
.text$mn:0000D4AF                 push    0FFFFFFFFh
.text$mn:0000D4B1                 push    offset __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$mn:0000D4B6                 mov     eax, large fs:0
.text$mn:0000D4BC                 push    eax
.text$mn:0000D4BD                 sub     esp, 8
.text$mn:0000D4C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000D4C5                 xor     eax, ebp
.text$mn:0000D4C7                 push    eax
.text$mn:0000D4C8                 lea     eax, [ebp+var_C]
.text$mn:0000D4CB                 mov     large fs:0, eax
.text$mn:0000D4D1                 mov     [ebp+var_10], ecx
.text$mn:0000D4D4                 mov     [ebp+var_14], 0
.text$mn:0000D4DB                 mov     eax, [ebp+var_10]
.text$mn:0000D4DE                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000D4DF                 mov     ecx, [ebp+var_10]
.text$mn:0000D4E2                 mov     edx, [ecx+8]
.text$mn:0000D4E5                 push    edx             ; int
.text$mn:0000D4E6                 mov     ecx, [ebp+arg_0]
.text$mn:0000D4E9                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Container_base12 const *)
.text$mn:0000D4EE                 mov     [ebp+var_4], 0
.text$mn:0000D4F5                 mov     eax, [ebp+var_14]
.text$mn:0000D4F8                 or      eax, 1
.text$mn:0000D4FB                 mov     [ebp+var_14], eax
.text$mn:0000D4FE                 mov     eax, [ebp+arg_0]
.text$mn:0000D501                 mov     ecx, [ebp+var_C]
.text$mn:0000D504                 mov     large fs:0, ecx
.text$mn:0000D50B                 pop     ecx
.text$mn:0000D50C                 mov     esp, ebp
.text$mn:0000D50E                 pop     ebp
.text$mn:0000D50F                 retn    4
.text$mn:0000D50F ?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$mn:0000D50F
.text$mn:0000D50F ; ---------------------------------------------------------------------------
.text$mn:0000D512                 align 4
.text$mn:0000D512 _text$mn        ends
.text$mn:0000D512
.text$x:0000D514 ; ===========================================================================
.text$x:0000D514
.text$x:0000D514 ; Segment type: Pure code
.text$x:0000D514 ; Segment permissions: Read/Execute
.text$x:0000D514 _text$x         segment para public 'CODE' use32
.text$x:0000D514                 assume cs:_text$x
.text$x:0000D514                 ;org 0D514h
.text$x:0000D514 ; COMDAT (pick associative to section at D4AC)
.text$x:0000D514                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D514
.text$x:0000D514 ; =============== S U B R O U T I N E =======================================
.text$x:0000D514
.text$x:0000D514
.text$x:0000D514 __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 proc near
.text$x:0000D514                                         ; DATA XREF: .xdata$x:0000F814o
.text$x:0000D514                 mov     eax, [ebp-14h]
.text$x:0000D517                 and     eax, 1
.text$x:0000D51A                 jz      $LN4_3
.text$x:0000D520                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000D524                 mov     ecx, [ebp+8]
.text$x:0000D527                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000D52C ; ---------------------------------------------------------------------------
.text$x:0000D52C
.text$x:0000D52C $LN4_3:                                 ; CODE XREF: __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0+6j
.text$x:0000D52C                 retn
.text$x:0000D52C __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 endp
.text$x:0000D52C
.text$x:0000D52D
.text$x:0000D52D ; =============== S U B R O U T I N E =======================================
.text$x:0000D52D
.text$x:0000D52D
.text$x:0000D52D __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ proc near
.text$x:0000D52D                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::end(void)+5o
.text$x:0000D52D
.text$x:0000D52D arg_4           = dword ptr  8
.text$x:0000D52D
.text$x:0000D52D                 mov     edx, [esp+arg_4]
.text$x:0000D531                 lea     eax, [edx+0Ch]
.text$x:0000D534                 mov     ecx, [edx-0Ch]
.text$x:0000D537                 xor     ecx, eax
.text$x:0000D539                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D53E                 mov     eax, offset __ehfuncinfo$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.text$x:0000D543                 jmp     ___CxxFrameHandler3
.text$x:0000D543 __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ endp
.text$x:0000D543
.text$x:0000D543 _text$x         ends
.text$x:0000D543
.text$mn:0000D548 ; ===========================================================================
.text$mn:0000D548
.text$mn:0000D548 ; Segment type: Pure code
.text$mn:0000D548 ; Segment permissions: Read/Execute
.text$mn:0000D548 _text$mn        segment para public 'CODE' use32
.text$mn:0000D548                 assume cs:_text$mn
.text$mn:0000D548                 ;org 0D548h
.text$mn:0000D548 ; COMDAT (pick any)
.text$mn:0000D548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D548
.text$mn:0000D548 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D548
.text$mn:0000D548 ; Attributes: bp-based frame
.text$mn:0000D548
.text$mn:0000D548 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:0000D548                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:0000D548 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:0000D548                                         ; DATA XREF: .rdata:00010E2Co
.text$mn:0000D548                                         ; .rdata:00010E48o ...
.text$mn:0000D548
.text$mn:0000D548 var_8           = dword ptr -8
.text$mn:0000D548 var_4           = dword ptr -4
.text$mn:0000D548 arg_0           = dword ptr  8
.text$mn:0000D548 arg_4           = dword ptr  0Ch
.text$mn:0000D548
.text$mn:0000D548                 push    ebp
.text$mn:0000D549                 mov     ebp, esp
.text$mn:0000D54B                 sub     esp, 8
.text$mn:0000D54E                 mov     [ebp+var_8], ecx
.text$mn:0000D551                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D554                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:0000D559                 push    eax
.text$mn:0000D55A                 mov     ecx, [ebp+var_8]
.text$mn:0000D55D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:0000D562                 movzx   eax, al
.text$mn:0000D565                 test    eax, eax
.text$mn:0000D567                 jz      short loc_D57F
.text$mn:0000D569                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000D56C                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:0000D571                 cmp     eax, [ebp+arg_4]
.text$mn:0000D574                 jnz     short loc_D57F
.text$mn:0000D576                 mov     [ebp+var_4], 1
.text$mn:0000D57D                 jmp     short loc_D586
.text$mn:0000D57F ; ---------------------------------------------------------------------------
.text$mn:0000D57F
.text$mn:0000D57F loc_D57F:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:0000D57F                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:0000D57F                 mov     [ebp+var_4], 0
.text$mn:0000D586
.text$mn:0000D586 loc_D586:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:0000D586                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000D589                 mov     esp, ebp
.text$mn:0000D58B                 pop     ebp
.text$mn:0000D58C                 retn    8
.text$mn:0000D58C ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:0000D58C
.text$mn:0000D58C ; ---------------------------------------------------------------------------
.text$mn:0000D58F                 align 10h
.text$mn:0000D58F _text$mn        ends
.text$mn:0000D58F
.text$mn:0000D590 ; ===========================================================================
.text$mn:0000D590
.text$mn:0000D590 ; Segment type: Pure code
.text$mn:0000D590 ; Segment permissions: Read/Execute
.text$mn:0000D590 _text$mn        segment para public 'CODE' use32
.text$mn:0000D590                 assume cs:_text$mn
.text$mn:0000D590                 ;org 0D590h
.text$mn:0000D590 ; COMDAT (pick any)
.text$mn:0000D590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D590
.text$mn:0000D590 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D590
.text$mn:0000D590 ; Attributes: bp-based frame
.text$mn:0000D590
.text$mn:0000D590 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:0000D590                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:0000D590 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:0000D590                                         ; DATA XREF: .rdata:00010E30o
.text$mn:0000D590                                         ; .rdata:00010E4Co ...
.text$mn:0000D590
.text$mn:0000D590 var_C           = byte ptr -0Ch
.text$mn:0000D590 var_4           = dword ptr -4
.text$mn:0000D590 arg_0           = dword ptr  8
.text$mn:0000D590 arg_4           = dword ptr  0Ch
.text$mn:0000D590
.text$mn:0000D590                 push    ebp
.text$mn:0000D591                 mov     ebp, esp
.text$mn:0000D593                 sub     esp, 0Ch
.text$mn:0000D596                 mov     [ebp+var_4], ecx
.text$mn:0000D599                 mov     eax, [ebp+arg_4]
.text$mn:0000D59C                 push    eax             ; std::error_condition *
.text$mn:0000D59D                 mov     ecx, [ebp+arg_0]
.text$mn:0000D5A0                 push    ecx
.text$mn:0000D5A1                 lea     edx, [ebp+var_C]
.text$mn:0000D5A4                 push    edx
.text$mn:0000D5A5                 mov     eax, [ebp+var_4]
.text$mn:0000D5A8                 mov     edx, [eax]
.text$mn:0000D5AA                 mov     ecx, [ebp+var_4]
.text$mn:0000D5AD                 mov     eax, [edx+0Ch]
.text$mn:0000D5B0                 call    eax
.text$mn:0000D5B2                 mov     ecx, eax
.text$mn:0000D5B4                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:0000D5B9                 mov     esp, ebp
.text$mn:0000D5BB                 pop     ebp
.text$mn:0000D5BC                 retn    8
.text$mn:0000D5BC ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:0000D5BC
.text$mn:0000D5BC ; ---------------------------------------------------------------------------
.text$mn:0000D5BF                 align 10h
.text$mn:0000D5BF _text$mn        ends
.text$mn:0000D5BF
.text$mn:0000D5C0 ; ===========================================================================
.text$mn:0000D5C0
.text$mn:0000D5C0 ; Segment type: Pure code
.text$mn:0000D5C0 ; Segment permissions: Read/Execute
.text$mn:0000D5C0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D5C0                 assume cs:_text$mn
.text$mn:0000D5C0                 ;org 0D5C0h
.text$mn:0000D5C0 ; COMDAT (pick any)
.text$mn:0000D5C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D5C0
.text$mn:0000D5C0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D5C0
.text$mn:0000D5C0 ; Attributes: bp-based frame
.text$mn:0000D5C0
.text$mn:0000D5C0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:0000D5C0                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:0000D5C0 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000D5C0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:0000D5C0
.text$mn:0000D5C0 var_4           = dword ptr -4
.text$mn:0000D5C0 arg_0           = dword ptr  8
.text$mn:0000D5C0
.text$mn:0000D5C0                 push    ebp
.text$mn:0000D5C1                 mov     ebp, esp
.text$mn:0000D5C3                 push    ecx
.text$mn:0000D5C4                 mov     [ebp+var_4], ecx
.text$mn:0000D5C7                 mov     eax, [ebp+var_4]
.text$mn:0000D5CA                 mov     ecx, [eax+14h]
.text$mn:0000D5CD                 cmp     ecx, [ebp+arg_0]
.text$mn:0000D5D0                 jnb     short loc_D5DA
.text$mn:0000D5D2                 mov     ecx, [ebp+var_4]
.text$mn:0000D5D5                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000D5DA
.text$mn:0000D5DA loc_D5DA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:0000D5DA                 mov     edx, [ebp+arg_0]
.text$mn:0000D5DD                 push    edx
.text$mn:0000D5DE                 mov     ecx, [ebp+var_4]
.text$mn:0000D5E1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000D5E6                 mov     eax, [ebp+var_4]
.text$mn:0000D5E9                 mov     esp, ebp
.text$mn:0000D5EB                 pop     ebp
.text$mn:0000D5EC                 retn    4
.text$mn:0000D5EC ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000D5EC
.text$mn:0000D5EC ; ---------------------------------------------------------------------------
.text$mn:0000D5EF                 align 10h
.text$mn:0000D5EF _text$mn        ends
.text$mn:0000D5EF
.text$mn:0000D5F0 ; ===========================================================================
.text$mn:0000D5F0
.text$mn:0000D5F0 ; Segment type: Pure code
.text$mn:0000D5F0 ; Segment permissions: Read/Execute
.text$mn:0000D5F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D5F0                 assume cs:_text$mn
.text$mn:0000D5F0                 ;org 0D5F0h
.text$mn:0000D5F0 ; COMDAT (pick any)
.text$mn:0000D5F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D5F0
.text$mn:0000D5F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D5F0
.text$mn:0000D5F0 ; Attributes: bp-based frame
.text$mn:0000D5F0
.text$mn:0000D5F0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:0000D5F0                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:0000D5F0 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000D5F0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:0000D5F0
.text$mn:0000D5F0 var_C           = dword ptr -0Ch
.text$mn:0000D5F0 Dst             = dword ptr -8
.text$mn:0000D5F0 var_4           = dword ptr -4
.text$mn:0000D5F0 arg_0           = dword ptr  8
.text$mn:0000D5F0 arg_4           = dword ptr  0Ch
.text$mn:0000D5F0
.text$mn:0000D5F0                 push    ebp
.text$mn:0000D5F1                 mov     ebp, esp
.text$mn:0000D5F3                 sub     esp, 0Ch
.text$mn:0000D5F6                 mov     [ebp+var_4], ecx
.text$mn:0000D5F9                 mov     eax, [ebp+var_4]
.text$mn:0000D5FC                 mov     ecx, [eax+14h]
.text$mn:0000D5FF                 cmp     ecx, [ebp+arg_0]
.text$mn:0000D602                 jnb     short loc_D60C
.text$mn:0000D604                 mov     ecx, [ebp+var_4]
.text$mn:0000D607                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:0000D60C
.text$mn:0000D60C loc_D60C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:0000D60C                 mov     edx, [ebp+var_4]
.text$mn:0000D60F                 mov     eax, [edx+14h]
.text$mn:0000D612                 sub     eax, [ebp+arg_0]
.text$mn:0000D615                 cmp     eax, [ebp+arg_4]
.text$mn:0000D618                 ja      short loc_D628
.text$mn:0000D61A                 mov     ecx, [ebp+arg_0]
.text$mn:0000D61D                 push    ecx
.text$mn:0000D61E                 mov     ecx, [ebp+var_4]
.text$mn:0000D621                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000D626                 jmp     short loc_D66E
.text$mn:0000D628 ; ---------------------------------------------------------------------------
.text$mn:0000D628
.text$mn:0000D628 loc_D628:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:0000D628                 cmp     [ebp+arg_4], 0
.text$mn:0000D62C                 jbe     short loc_D66E
.text$mn:0000D62E                 mov     ecx, [ebp+var_4]
.text$mn:0000D631                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000D636                 add     eax, [ebp+arg_0]
.text$mn:0000D639                 mov     [ebp+Dst], eax
.text$mn:0000D63C                 mov     edx, [ebp+var_4]
.text$mn:0000D63F                 mov     eax, [edx+14h]
.text$mn:0000D642                 sub     eax, [ebp+arg_4]
.text$mn:0000D645                 mov     [ebp+var_C], eax
.text$mn:0000D648                 mov     ecx, [ebp+var_C]
.text$mn:0000D64B                 sub     ecx, [ebp+arg_0]
.text$mn:0000D64E                 push    ecx             ; Size
.text$mn:0000D64F                 mov     edx, [ebp+Dst]
.text$mn:0000D652                 add     edx, [ebp+arg_4]
.text$mn:0000D655                 push    edx             ; Src
.text$mn:0000D656                 mov     eax, [ebp+Dst]
.text$mn:0000D659                 push    eax             ; Dst
.text$mn:0000D65A                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000D65F                 add     esp, 0Ch
.text$mn:0000D662                 mov     ecx, [ebp+var_C]
.text$mn:0000D665                 push    ecx
.text$mn:0000D666                 mov     ecx, [ebp+var_4]
.text$mn:0000D669                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000D66E
.text$mn:0000D66E loc_D66E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000D66E                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000D66E                 mov     eax, [ebp+var_4]
.text$mn:0000D671                 mov     esp, ebp
.text$mn:0000D673                 pop     ebp
.text$mn:0000D674                 retn    8
.text$mn:0000D674 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000D674
.text$mn:0000D674 ; ---------------------------------------------------------------------------
.text$mn:0000D677                 align 4
.text$mn:0000D677 _text$mn        ends
.text$mn:0000D677
.text$mn:0000D678 ; ===========================================================================
.text$mn:0000D678
.text$mn:0000D678 ; Segment type: Pure code
.text$mn:0000D678 ; Segment permissions: Read/Execute
.text$mn:0000D678 _text$mn        segment para public 'CODE' use32
.text$mn:0000D678                 assume cs:_text$mn
.text$mn:0000D678                 ;org 0D678h
.text$mn:0000D678 ; COMDAT (pick any)
.text$mn:0000D678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D678
.text$mn:0000D678 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D678
.text$mn:0000D678 ; Attributes: bp-based frame
.text$mn:0000D678
.text$mn:0000D678 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:0000D678                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:0000D678 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:0000D678                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:0000D678
.text$mn:0000D678 var_4           = dword ptr -4
.text$mn:0000D678 arg_0           = dword ptr  8
.text$mn:0000D678
.text$mn:0000D678                 push    ebp
.text$mn:0000D679                 mov     ebp, esp
.text$mn:0000D67B                 push    ecx
.text$mn:0000D67C                 mov     [ebp+var_4], ecx
.text$mn:0000D67F                 mov     eax, [ebp+var_4]
.text$mn:0000D682                 mov     ecx, [eax+14h]
.text$mn:0000D685                 cmp     ecx, [ebp+arg_0]
.text$mn:0000D688                 jnb     short loc_D692
.text$mn:0000D68A                 mov     ecx, [ebp+var_4]
.text$mn:0000D68D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000D692
.text$mn:0000D692 loc_D692:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:0000D692                 mov     edx, [ebp+arg_0]
.text$mn:0000D695                 push    edx
.text$mn:0000D696                 mov     ecx, [ebp+var_4]
.text$mn:0000D699                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000D69E                 mov     eax, [ebp+var_4]
.text$mn:0000D6A1                 mov     esp, ebp
.text$mn:0000D6A3                 pop     ebp
.text$mn:0000D6A4                 retn    4
.text$mn:0000D6A4 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:0000D6A4
.text$mn:0000D6A4 ; ---------------------------------------------------------------------------
.text$mn:0000D6A7                 align 4
.text$mn:0000D6A7 _text$mn        ends
.text$mn:0000D6A7
.text$mn:0000D6A8 ; ===========================================================================
.text$mn:0000D6A8
.text$mn:0000D6A8 ; Segment type: Pure code
.text$mn:0000D6A8 ; Segment permissions: Read/Execute
.text$mn:0000D6A8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D6A8                 assume cs:_text$mn
.text$mn:0000D6A8                 ;org 0D6A8h
.text$mn:0000D6A8 ; COMDAT (pick any)
.text$mn:0000D6A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D6A8
.text$mn:0000D6A8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D6A8
.text$mn:0000D6A8 ; Attributes: bp-based frame
.text$mn:0000D6A8
.text$mn:0000D6A8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:0000D6A8                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:0000D6A8 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:0000D6A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:0000D6A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+10Cp
.text$mn:0000D6A8
.text$mn:0000D6A8 var_C           = dword ptr -0Ch
.text$mn:0000D6A8 Dst             = dword ptr -8
.text$mn:0000D6A8 var_4           = dword ptr -4
.text$mn:0000D6A8 arg_0           = dword ptr  8
.text$mn:0000D6A8 arg_4           = dword ptr  0Ch
.text$mn:0000D6A8
.text$mn:0000D6A8                 push    ebp
.text$mn:0000D6A9                 mov     ebp, esp
.text$mn:0000D6AB                 sub     esp, 0Ch
.text$mn:0000D6AE                 mov     [ebp+var_4], ecx
.text$mn:0000D6B1                 mov     eax, [ebp+var_4]
.text$mn:0000D6B4                 mov     ecx, [eax+14h]
.text$mn:0000D6B7                 cmp     ecx, [ebp+arg_0]
.text$mn:0000D6BA                 jnb     short loc_D6C4
.text$mn:0000D6BC                 mov     ecx, [ebp+var_4]
.text$mn:0000D6BF                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000D6C4
.text$mn:0000D6C4 loc_D6C4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:0000D6C4                 mov     edx, [ebp+var_4]
.text$mn:0000D6C7                 mov     eax, [edx+14h]
.text$mn:0000D6CA                 sub     eax, [ebp+arg_0]
.text$mn:0000D6CD                 cmp     eax, [ebp+arg_4]
.text$mn:0000D6D0                 ja      short loc_D6E0
.text$mn:0000D6D2                 mov     ecx, [ebp+arg_0]
.text$mn:0000D6D5                 push    ecx
.text$mn:0000D6D6                 mov     ecx, [ebp+var_4]
.text$mn:0000D6D9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000D6DE                 jmp     short loc_D72C
.text$mn:0000D6E0 ; ---------------------------------------------------------------------------
.text$mn:0000D6E0
.text$mn:0000D6E0 loc_D6E0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:0000D6E0                 cmp     [ebp+arg_4], 0
.text$mn:0000D6E4                 jbe     short loc_D72C
.text$mn:0000D6E6                 mov     ecx, [ebp+var_4]
.text$mn:0000D6E9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000D6EE                 mov     edx, [ebp+arg_0]
.text$mn:0000D6F1                 lea     eax, [eax+edx*2]
.text$mn:0000D6F4                 mov     [ebp+Dst], eax
.text$mn:0000D6F7                 mov     ecx, [ebp+var_4]
.text$mn:0000D6FA                 mov     edx, [ecx+14h]
.text$mn:0000D6FD                 sub     edx, [ebp+arg_4]
.text$mn:0000D700                 mov     [ebp+var_C], edx
.text$mn:0000D703                 mov     eax, [ebp+var_C]
.text$mn:0000D706                 sub     eax, [ebp+arg_0]
.text$mn:0000D709                 push    eax             ; int
.text$mn:0000D70A                 mov     ecx, [ebp+arg_4]
.text$mn:0000D70D                 mov     edx, [ebp+Dst]
.text$mn:0000D710                 lea     eax, [edx+ecx*2]
.text$mn:0000D713                 push    eax             ; Src
.text$mn:0000D714                 mov     ecx, [ebp+Dst]
.text$mn:0000D717                 push    ecx             ; Dst
.text$mn:0000D718                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000D71D                 add     esp, 0Ch
.text$mn:0000D720                 mov     edx, [ebp+var_C]
.text$mn:0000D723                 push    edx
.text$mn:0000D724                 mov     ecx, [ebp+var_4]
.text$mn:0000D727                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000D72C
.text$mn:0000D72C loc_D72C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:0000D72C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:0000D72C                 mov     eax, [ebp+var_4]
.text$mn:0000D72F                 mov     esp, ebp
.text$mn:0000D731                 pop     ebp
.text$mn:0000D732                 retn    8
.text$mn:0000D732 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:0000D732
.text$mn:0000D732 ; ---------------------------------------------------------------------------
.text$mn:0000D735                 align 4
.text$mn:0000D735 _text$mn        ends
.text$mn:0000D735
.text$mn:0000D738 ; ===========================================================================
.text$mn:0000D738
.text$mn:0000D738 ; Segment type: Pure code
.text$mn:0000D738 ; Segment permissions: Read/Execute
.text$mn:0000D738 _text$mn        segment para public 'CODE' use32
.text$mn:0000D738                 assume cs:_text$mn
.text$mn:0000D738                 ;org 0D738h
.text$mn:0000D738 ; COMDAT (pick any)
.text$mn:0000D738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D738
.text$mn:0000D738 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D738
.text$mn:0000D738 ; Attributes: bp-based frame
.text$mn:0000D738
.text$mn:0000D738 ; public: class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::erase(class std::_Vector_const_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>)
.text$mn:0000D738                 public ?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$mn:0000D738 ?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z proc near
.text$mn:0000D738                                         ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+1FAp
.text$mn:0000D738
.text$mn:0000D738 var_24          = dword ptr -24h
.text$mn:0000D738 var_20          = dword ptr -20h
.text$mn:0000D738 var_1C          = dword ptr -1Ch
.text$mn:0000D738 var_18          = dword ptr -18h
.text$mn:0000D738 var_14          = dword ptr -14h
.text$mn:0000D738 var_10          = dword ptr -10h
.text$mn:0000D738 var_C           = dword ptr -0Ch
.text$mn:0000D738 var_4           = dword ptr -4
.text$mn:0000D738 arg_0           = dword ptr  8
.text$mn:0000D738 arg_4           = byte ptr  0Ch
.text$mn:0000D738 arg_C           = dword ptr  14h
.text$mn:0000D738
.text$mn:0000D738                 push    ebp
.text$mn:0000D739                 mov     ebp, esp
.text$mn:0000D73B                 push    0FFFFFFFFh
.text$mn:0000D73D                 push    offset __ehhandler$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$mn:0000D742                 mov     eax, large fs:0
.text$mn:0000D748                 push    eax
.text$mn:0000D749                 sub     esp, 18h
.text$mn:0000D74C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000D751                 xor     eax, ebp
.text$mn:0000D753                 push    eax
.text$mn:0000D754                 lea     eax, [ebp+var_C]
.text$mn:0000D757                 mov     large fs:0, eax
.text$mn:0000D75D                 mov     [ebp+var_10], ecx
.text$mn:0000D760                 mov     [ebp+var_14], 0
.text$mn:0000D767                 mov     [ebp+var_4], 1
.text$mn:0000D76E                 lea     ecx, [ebp+arg_4] ; this
.text$mn:0000D771                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000D776                 cmp     eax, [ebp+var_10]
.text$mn:0000D779                 jnz     short loc_D791
.text$mn:0000D77B                 mov     eax, [ebp+var_10]
.text$mn:0000D77E                 mov     ecx, [ebp+arg_C]
.text$mn:0000D781                 cmp     ecx, [eax+4]
.text$mn:0000D784                 jb      short loc_D791
.text$mn:0000D786                 mov     edx, [ebp+var_10]
.text$mn:0000D789                 mov     eax, [edx+8]
.text$mn:0000D78C                 cmp     eax, [ebp+arg_C]
.text$mn:0000D78F                 ja      short loc_D7A8
.text$mn:0000D791
.text$mn:0000D791 loc_D791:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+41j
.text$mn:0000D791                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+4Cj
.text$mn:0000D791                 push    5A2h            ; unsigned int
.text$mn:0000D796                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000D79B                 push    offset ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; "vector erase iterator outside range"
.text$mn:0000D7A0                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000D7A5                 add     esp, 0Ch
.text$mn:0000D7A8
.text$mn:0000D7A8 loc_D7A8:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+57j
.text$mn:0000D7A8                 mov     ecx, [ebp+arg_C]
.text$mn:0000D7AB                 push    ecx
.text$mn:0000D7AC                 mov     edx, [ebp+var_10]
.text$mn:0000D7AF                 mov     eax, [edx+8]
.text$mn:0000D7B2                 push    eax
.text$mn:0000D7B3                 mov     ecx, [ebp+arg_C]
.text$mn:0000D7B6                 add     ecx, 1Ch
.text$mn:0000D7B9                 push    ecx
.text$mn:0000D7BA                 call    ??$_Move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00@Z ; std::_Move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000D7BF                 add     esp, 0Ch
.text$mn:0000D7C2                 mov     edx, [ebp+var_10]
.text$mn:0000D7C5                 mov     eax, [edx+8]
.text$mn:0000D7C8                 push    eax
.text$mn:0000D7C9                 mov     ecx, [ebp+var_10]
.text$mn:0000D7CC                 mov     edx, [ecx+8]
.text$mn:0000D7CF                 sub     edx, 1Ch
.text$mn:0000D7D2                 push    edx
.text$mn:0000D7D3                 mov     ecx, [ebp+var_10]
.text$mn:0000D7D6                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000D7DB                 mov     eax, [ebp+var_10]
.text$mn:0000D7DE                 mov     ecx, [eax+8]
.text$mn:0000D7E1                 push    ecx
.text$mn:0000D7E2                 mov     edx, [ebp+arg_C]
.text$mn:0000D7E5                 push    edx
.text$mn:0000D7E6                 mov     ecx, [ebp+var_10]
.text$mn:0000D7E9                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000D7EE                 mov     eax, [ebp+var_10]
.text$mn:0000D7F1                 mov     ecx, [eax+8]
.text$mn:0000D7F4                 sub     ecx, 1Ch
.text$mn:0000D7F7                 mov     edx, [ebp+var_10]
.text$mn:0000D7FA                 mov     [edx+8], ecx
.text$mn:0000D7FD                 sub     esp, 0Ch
.text$mn:0000D800                 mov     ecx, esp
.text$mn:0000D802                 mov     [ebp+var_1C], esp
.text$mn:0000D805                 lea     eax, [ebp+arg_4]
.text$mn:0000D808                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000D809                 call    ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> const &)
.text$mn:0000D80E                 mov     [ebp+var_18], eax
.text$mn:0000D811                 mov     ecx, [ebp+var_18]
.text$mn:0000D814                 mov     [ebp+var_20], ecx
.text$mn:0000D817                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000D81B                 mov     edx, [ebp+arg_0]
.text$mn:0000D81E                 push    edx
.text$mn:0000D81F                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000D823                 mov     ecx, [ebp+var_10]
.text$mn:0000D826                 call    ?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)
.text$mn:0000D82B                 mov     [ebp+var_24], eax
.text$mn:0000D82E                 mov     eax, [ebp+var_14]
.text$mn:0000D831                 or      eax, 1
.text$mn:0000D834                 mov     [ebp+var_14], eax
.text$mn:0000D837                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000D83B                 lea     ecx, [ebp+arg_4]
.text$mn:0000D83E                 call    ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:0000D843                 mov     eax, [ebp+arg_0]
.text$mn:0000D846                 mov     ecx, [ebp+var_C]
.text$mn:0000D849                 mov     large fs:0, ecx
.text$mn:0000D850                 pop     ecx
.text$mn:0000D851                 mov     esp, ebp
.text$mn:0000D853                 pop     ebp
.text$mn:0000D854                 retn    10h
.text$mn:0000D854 ?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z endp
.text$mn:0000D854
.text$mn:0000D854 ; ---------------------------------------------------------------------------
.text$mn:0000D857                 align 4
.text$mn:0000D857 _text$mn        ends
.text$mn:0000D857
.text$x:0000D858 ; ===========================================================================
.text$x:0000D858
.text$x:0000D858 ; Segment type: Pure code
.text$x:0000D858 ; Segment permissions: Read/Execute
.text$x:0000D858 _text$x         segment para public 'CODE' use32
.text$x:0000D858                 assume cs:_text$x
.text$x:0000D858                 ;org 0D858h
.text$x:0000D858 ; COMDAT (pick associative to section at D738)
.text$x:0000D858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000D858
.text$x:0000D858 ; =============== S U B R O U T I N E =======================================
.text$x:0000D858
.text$x:0000D858
.text$x:0000D858 __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0 proc near
.text$x:0000D858                                         ; DATA XREF: .xdata$x:0000F87Co
.text$x:0000D858                 lea     ecx, [ebp+0Ch]
.text$x:0000D85B                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000D85B __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0 endp
.text$x:0000D85B
.text$x:0000D860
.text$x:0000D860 ; =============== S U B R O U T I N E =======================================
.text$x:0000D860
.text$x:0000D860
.text$x:0000D860 __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1 proc near
.text$x:0000D860                                         ; DATA XREF: .xdata$x:0000F884o
.text$x:0000D860                 mov     ecx, [ebp-1Ch]
.text$x:0000D863                 jmp     ??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000D863 __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1 endp
.text$x:0000D863
.text$x:0000D868
.text$x:0000D868 ; =============== S U B R O U T I N E =======================================
.text$x:0000D868
.text$x:0000D868
.text$x:0000D868 __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$2 proc near
.text$x:0000D868                                         ; DATA XREF: .xdata$x:0000F874o
.text$x:0000D868                 mov     eax, [ebp-14h]
.text$x:0000D86B                 and     eax, 1
.text$x:0000D86E                 jz      $LN8
.text$x:0000D874                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:0000D878                 mov     ecx, [ebp+8]
.text$x:0000D87B                 jmp     ??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:0000D880 ; ---------------------------------------------------------------------------
.text$x:0000D880
.text$x:0000D880 $LN8:                                   ; CODE XREF: __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$2+6j
.text$x:0000D880                 retn
.text$x:0000D880 __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$2 endp
.text$x:0000D880
.text$x:0000D881
.text$x:0000D881 ; =============== S U B R O U T I N E =======================================
.text$x:0000D881
.text$x:0000D881
.text$x:0000D881 __ehhandler$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z proc near
.text$x:0000D881                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+5o
.text$x:0000D881
.text$x:0000D881 arg_4           = dword ptr  8
.text$x:0000D881
.text$x:0000D881                 mov     edx, [esp+arg_4]
.text$x:0000D885                 lea     eax, [edx+0Ch]
.text$x:0000D888                 mov     ecx, [edx-1Ch]
.text$x:0000D88B                 xor     ecx, eax
.text$x:0000D88D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000D892                 mov     eax, offset __ehfuncinfo$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.text$x:0000D897                 jmp     ___CxxFrameHandler3
.text$x:0000D897 __ehhandler$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z endp
.text$x:0000D897
.text$x:0000D897 _text$x         ends
.text$x:0000D897
.text$mn:0000D89C ; ===========================================================================
.text$mn:0000D89C
.text$mn:0000D89C ; Segment type: Pure code
.text$mn:0000D89C ; Segment permissions: Read/Execute
.text$mn:0000D89C _text$mn        segment para public 'CODE' use32
.text$mn:0000D89C                 assume cs:_text$mn
.text$mn:0000D89C                 ;org 0D89Ch
.text$mn:0000D89C ; COMDAT (pick any)
.text$mn:0000D89C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D89C
.text$mn:0000D89C ; =============== S U B R O U T I N E =======================================
.text$mn:0000D89C
.text$mn:0000D89C ; Attributes: bp-based frame
.text$mn:0000D89C
.text$mn:0000D89C ; __int32 __thiscall ScintillaEditView::execute(ScintillaEditView *this, unsigned int, unsigned int, __int32)
.text$mn:0000D89C                 public ?execute@ScintillaEditView@@QBEJIIJ@Z
.text$mn:0000D89C ?execute@ScintillaEditView@@QBEJIIJ@Z proc near
.text$mn:0000D89C                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+97p
.text$mn:0000D89C                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+104p ...
.text$mn:0000D89C
.text$mn:0000D89C var_4           = dword ptr -4
.text$mn:0000D89C arg_0           = dword ptr  8
.text$mn:0000D89C arg_4           = dword ptr  0Ch
.text$mn:0000D89C arg_8           = dword ptr  10h
.text$mn:0000D89C
.text$mn:0000D89C                 push    ebp
.text$mn:0000D89D                 mov     ebp, esp
.text$mn:0000D89F                 push    ecx
.text$mn:0000D8A0                 mov     [ebp+var_4], ecx
.text$mn:0000D8A3                 mov     eax, [ebp+arg_8]
.text$mn:0000D8A6                 push    eax
.text$mn:0000D8A7                 mov     ecx, [ebp+arg_4]
.text$mn:0000D8AA                 push    ecx
.text$mn:0000D8AB                 mov     edx, [ebp+arg_0]
.text$mn:0000D8AE                 push    edx
.text$mn:0000D8AF                 mov     eax, [ebp+var_4]
.text$mn:0000D8B2                 mov     ecx, [eax+14h]
.text$mn:0000D8B5                 push    ecx
.text$mn:0000D8B6                 mov     edx, [ebp+var_4]
.text$mn:0000D8B9                 mov     eax, [edx+10h]
.text$mn:0000D8BC                 call    eax
.text$mn:0000D8BE                 add     esp, 10h
.text$mn:0000D8C1                 mov     esp, ebp
.text$mn:0000D8C3                 pop     ebp
.text$mn:0000D8C4                 retn    0Ch
.text$mn:0000D8C4 ?execute@ScintillaEditView@@QBEJIIJ@Z endp
.text$mn:0000D8C4
.text$mn:0000D8C4 ; ---------------------------------------------------------------------------
.text$mn:0000D8C7                 align 4
.text$mn:0000D8C7 _text$mn        ends
.text$mn:0000D8C7
.text$mn:0000D8C8 ; ===========================================================================
.text$mn:0000D8C8
.text$mn:0000D8C8 ; Segment type: Pure code
.text$mn:0000D8C8 ; Segment permissions: Read/Execute
.text$mn:0000D8C8 _text$mn        segment para public 'CODE' use32
.text$mn:0000D8C8                 assume cs:_text$mn
.text$mn:0000D8C8                 ;org 0D8C8h
.text$mn:0000D8C8 ; COMDAT (pick any)
.text$mn:0000D8C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D8C8
.text$mn:0000D8C8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D8C8
.text$mn:0000D8C8 ; Attributes: bp-based frame
.text$mn:0000D8C8
.text$mn:0000D8C8 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:0000D8C8                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:0000D8C8 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000D8C8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:0000D8C8                 push    ebp
.text$mn:0000D8C9                 mov     ebp, esp
.text$mn:0000D8CB                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:0000D8D0                 pop     ebp
.text$mn:0000D8D1                 retn
.text$mn:0000D8D1 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000D8D1
.text$mn:0000D8D1 ; ---------------------------------------------------------------------------
.text$mn:0000D8D2                 align 4
.text$mn:0000D8D2 _text$mn        ends
.text$mn:0000D8D2
.text$mn:0000D8D4 ; ===========================================================================
.text$mn:0000D8D4
.text$mn:0000D8D4 ; Segment type: Pure code
.text$mn:0000D8D4 ; Segment permissions: Read/Execute
.text$mn:0000D8D4 _text$mn        segment para public 'CODE' use32
.text$mn:0000D8D4                 assume cs:_text$mn
.text$mn:0000D8D4                 ;org 0D8D4h
.text$mn:0000D8D4 ; COMDAT (pick any)
.text$mn:0000D8D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D8D4
.text$mn:0000D8D4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D8D4
.text$mn:0000D8D4 ; Attributes: bp-based frame
.text$mn:0000D8D4
.text$mn:0000D8D4 ; int __thiscall ScintillaEditView::getCurrentDocLen(ScintillaEditView *__hidden this)
.text$mn:0000D8D4                 public ?getCurrentDocLen@ScintillaEditView@@QBEHXZ
.text$mn:0000D8D4 ?getCurrentDocLen@ScintillaEditView@@QBEHXZ proc near
.text$mn:0000D8D4                                         ; CODE XREF: FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+37p
.text$mn:0000D8D4                                         ; FunctionParsersManager::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,AssociationInfo const &)+55p
.text$mn:0000D8D4
.text$mn:0000D8D4 var_4           = dword ptr -4
.text$mn:0000D8D4
.text$mn:0000D8D4                 push    ebp
.text$mn:0000D8D5                 mov     ebp, esp
.text$mn:0000D8D7                 push    ecx
.text$mn:0000D8D8                 mov     [ebp+var_4], ecx
.text$mn:0000D8DB                 push    0               ; __int32
.text$mn:0000D8DD                 push    0               ; unsigned int
.text$mn:0000D8DF                 push    7D6h            ; unsigned int
.text$mn:0000D8E4                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000D8E7                 call    ?execute@ScintillaEditView@@QBEJIIJ@Z ; ScintillaEditView::execute(uint,uint,long)
.text$mn:0000D8EC                 mov     esp, ebp
.text$mn:0000D8EE                 pop     ebp
.text$mn:0000D8EF                 retn
.text$mn:0000D8EF ?getCurrentDocLen@ScintillaEditView@@QBEHXZ endp
.text$mn:0000D8EF
.text$mn:0000D8EF _text$mn        ends
.text$mn:0000D8EF
.text$mn:0000D8F0 ; ===========================================================================
.text$mn:0000D8F0
.text$mn:0000D8F0 ; Segment type: Pure code
.text$mn:0000D8F0 ; Segment permissions: Read/Execute
.text$mn:0000D8F0 _text$mn        segment para public 'CODE' use32
.text$mn:0000D8F0                 assume cs:_text$mn
.text$mn:0000D8F0                 ;org 0D8F0h
.text$mn:0000D8F0 ; COMDAT (pick any)
.text$mn:0000D8F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D8F0
.text$mn:0000D8F0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D8F0
.text$mn:0000D8F0 ; Attributes: bp-based frame
.text$mn:0000D8F0
.text$mn:0000D8F0 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::length(void)const
.text$mn:0000D8F0                 public ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000D8F0 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000D8F0                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+5Dp
.text$mn:0000D8F0                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+ADp ...
.text$mn:0000D8F0
.text$mn:0000D8F0 var_4           = dword ptr -4
.text$mn:0000D8F0
.text$mn:0000D8F0                 push    ebp
.text$mn:0000D8F1                 mov     ebp, esp
.text$mn:0000D8F3                 push    ecx
.text$mn:0000D8F4                 mov     [ebp+var_4], ecx
.text$mn:0000D8F7                 mov     eax, [ebp+var_4]
.text$mn:0000D8FA                 mov     eax, [eax+14h]
.text$mn:0000D8FD                 mov     esp, ebp
.text$mn:0000D8FF                 pop     ebp
.text$mn:0000D900                 retn
.text$mn:0000D900 ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000D900
.text$mn:0000D900 ; ---------------------------------------------------------------------------
.text$mn:0000D901                 align 4
.text$mn:0000D901 _text$mn        ends
.text$mn:0000D901
.text$mn:0000D904 ; ===========================================================================
.text$mn:0000D904
.text$mn:0000D904 ; Segment type: Pure code
.text$mn:0000D904 ; Segment permissions: Read/Execute
.text$mn:0000D904 _text$mn        segment para public 'CODE' use32
.text$mn:0000D904                 assume cs:_text$mn
.text$mn:0000D904                 ;org 0D904h
.text$mn:0000D904 ; COMDAT (pick any)
.text$mn:0000D904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D904
.text$mn:0000D904 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D904
.text$mn:0000D904 ; Attributes: bp-based frame
.text$mn:0000D904
.text$mn:0000D904 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:0000D904                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:0000D904 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:0000D904                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:0000D904
.text$mn:0000D904 var_4           = dword ptr -4
.text$mn:0000D904 Str             = dword ptr  8
.text$mn:0000D904
.text$mn:0000D904                 push    ebp
.text$mn:0000D905                 mov     ebp, esp
.text$mn:0000D907                 push    ecx
.text$mn:0000D908                 mov     eax, [ebp+Str]
.text$mn:0000D90B                 movsx   ecx, byte ptr [eax]
.text$mn:0000D90E                 test    ecx, ecx
.text$mn:0000D910                 jnz     short loc_D91B
.text$mn:0000D912                 mov     [ebp+var_4], 0
.text$mn:0000D919                 jmp     short loc_D92A
.text$mn:0000D91B ; ---------------------------------------------------------------------------
.text$mn:0000D91B
.text$mn:0000D91B loc_D91B:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:0000D91B                 mov     edx, [ebp+Str]
.text$mn:0000D91E                 push    edx             ; Str
.text$mn:0000D91F                 call    _strlen
.text$mn:0000D924                 add     esp, 4
.text$mn:0000D927                 mov     [ebp+var_4], eax
.text$mn:0000D92A
.text$mn:0000D92A loc_D92A:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:0000D92A                 mov     eax, [ebp+var_4]
.text$mn:0000D92D                 mov     esp, ebp
.text$mn:0000D92F                 pop     ebp
.text$mn:0000D930                 retn
.text$mn:0000D930 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:0000D930
.text$mn:0000D930 ; ---------------------------------------------------------------------------
.text$mn:0000D931                 align 4
.text$mn:0000D931 _text$mn        ends
.text$mn:0000D931
.text$mn:0000D934 ; ===========================================================================
.text$mn:0000D934
.text$mn:0000D934 ; Segment type: Pure code
.text$mn:0000D934 ; Segment permissions: Read/Execute
.text$mn:0000D934 _text$mn        segment para public 'CODE' use32
.text$mn:0000D934                 assume cs:_text$mn
.text$mn:0000D934                 ;org 0D934h
.text$mn:0000D934 ; COMDAT (pick any)
.text$mn:0000D934                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D934
.text$mn:0000D934 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D934
.text$mn:0000D934 ; Attributes: bp-based frame
.text$mn:0000D934
.text$mn:0000D934 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:0000D934                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:0000D934 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:0000D934                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p
.text$mn:0000D934                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p ...
.text$mn:0000D934
.text$mn:0000D934 var_4           = dword ptr -4
.text$mn:0000D934 Str             = dword ptr  8
.text$mn:0000D934
.text$mn:0000D934                 push    ebp
.text$mn:0000D935                 mov     ebp, esp
.text$mn:0000D937                 push    ecx
.text$mn:0000D938                 mov     eax, [ebp+Str]
.text$mn:0000D93B                 movzx   ecx, word ptr [eax]
.text$mn:0000D93E                 test    ecx, ecx
.text$mn:0000D940                 jnz     short loc_D94B
.text$mn:0000D942                 mov     [ebp+var_4], 0
.text$mn:0000D949                 jmp     short loc_D95A
.text$mn:0000D94B ; ---------------------------------------------------------------------------
.text$mn:0000D94B
.text$mn:0000D94B loc_D94B:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:0000D94B                 mov     edx, [ebp+Str]
.text$mn:0000D94E                 push    edx             ; Str
.text$mn:0000D94F                 call    _wcslen
.text$mn:0000D954                 add     esp, 4
.text$mn:0000D957                 mov     [ebp+var_4], eax
.text$mn:0000D95A
.text$mn:0000D95A loc_D95A:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:0000D95A                 mov     eax, [ebp+var_4]
.text$mn:0000D95D                 mov     esp, ebp
.text$mn:0000D95F                 pop     ebp
.text$mn:0000D960                 retn
.text$mn:0000D960 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:0000D960
.text$mn:0000D960 ; ---------------------------------------------------------------------------
.text$mn:0000D961                 align 4
.text$mn:0000D961 _text$mn        ends
.text$mn:0000D961
.text$mn:0000D964 ; ===========================================================================
.text$mn:0000D964
.text$mn:0000D964 ; Segment type: Pure code
.text$mn:0000D964 ; Segment permissions: Read/Execute
.text$mn:0000D964 _text$mn        segment para public 'CODE' use32
.text$mn:0000D964                 assume cs:_text$mn
.text$mn:0000D964                 ;org 0D964h
.text$mn:0000D964 ; COMDAT (pick any)
.text$mn:0000D964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D964
.text$mn:0000D964 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D964
.text$mn:0000D964 ; Attributes: bp-based frame
.text$mn:0000D964
.text$mn:0000D964 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:0000D964                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:0000D964 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:0000D964                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:0000D964
.text$mn:0000D964 var_4           = dword ptr -4
.text$mn:0000D964
.text$mn:0000D964                 push    ebp
.text$mn:0000D965                 mov     ebp, esp
.text$mn:0000D967                 push    ecx
.text$mn:0000D968                 mov     [ebp+var_4], ecx
.text$mn:0000D96B                 mov     eax, [ebp+var_4]
.text$mn:0000D96E                 push    eax
.text$mn:0000D96F                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:0000D974                 add     esp, 4
.text$mn:0000D977                 mov     esp, ebp
.text$mn:0000D979                 pop     ebp
.text$mn:0000D97A                 retn
.text$mn:0000D97A ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000D97A
.text$mn:0000D97A ; ---------------------------------------------------------------------------
.text$mn:0000D97B                 align 4
.text$mn:0000D97B _text$mn        ends
.text$mn:0000D97B
.text$mn:0000D97C ; ===========================================================================
.text$mn:0000D97C
.text$mn:0000D97C ; Segment type: Pure code
.text$mn:0000D97C ; Segment permissions: Read/Execute
.text$mn:0000D97C _text$mn        segment para public 'CODE' use32
.text$mn:0000D97C                 assume cs:_text$mn
.text$mn:0000D97C                 ;org 0D97Ch
.text$mn:0000D97C ; COMDAT (pick any)
.text$mn:0000D97C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D97C
.text$mn:0000D97C ; =============== S U B R O U T I N E =======================================
.text$mn:0000D97C
.text$mn:0000D97C ; Attributes: bp-based frame
.text$mn:0000D97C
.text$mn:0000D97C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<class FunctionParser *>>::max_size(void)const
.text$mn:0000D97C                 public ?max_size@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ
.text$mn:0000D97C ?max_size@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ proc near
.text$mn:0000D97C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::max_size(void)+17p
.text$mn:0000D97C
.text$mn:0000D97C var_4           = dword ptr -4
.text$mn:0000D97C
.text$mn:0000D97C                 push    ebp
.text$mn:0000D97D                 mov     ebp, esp
.text$mn:0000D97F                 push    ecx
.text$mn:0000D980                 mov     [ebp+var_4], ecx
.text$mn:0000D983                 mov     eax, [ebp+var_4]
.text$mn:0000D986                 push    eax
.text$mn:0000D987                 call    ?max_size@?$allocator_traits@V?$allocator@PAVFunctionParser@@@std@@@std@@SAIABV?$allocator@PAVFunctionParser@@@2@@Z ; std::allocator_traits<std::allocator<FunctionParser *>>::max_size(std::allocator<FunctionParser *> const &)
.text$mn:0000D98C                 add     esp, 4
.text$mn:0000D98F                 mov     esp, ebp
.text$mn:0000D991                 pop     ebp
.text$mn:0000D992                 retn
.text$mn:0000D992 ?max_size@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ endp
.text$mn:0000D992
.text$mn:0000D992 ; ---------------------------------------------------------------------------
.text$mn:0000D993                 align 4
.text$mn:0000D993 _text$mn        ends
.text$mn:0000D993
.text$mn:0000D994 ; ===========================================================================
.text$mn:0000D994
.text$mn:0000D994 ; Segment type: Pure code
.text$mn:0000D994 ; Segment permissions: Read/Execute
.text$mn:0000D994 _text$mn        segment para public 'CODE' use32
.text$mn:0000D994                 assume cs:_text$mn
.text$mn:0000D994                 ;org 0D994h
.text$mn:0000D994 ; COMDAT (pick any)
.text$mn:0000D994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D994
.text$mn:0000D994 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D994
.text$mn:0000D994 ; Attributes: bp-based frame
.text$mn:0000D994
.text$mn:0000D994 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct std::pair<int, int>>>::max_size(void)const
.text$mn:0000D994                 public ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QBEIXZ
.text$mn:0000D994 ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QBEIXZ proc near
.text$mn:0000D994                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::max_size(void)+17p
.text$mn:0000D994
.text$mn:0000D994 var_4           = dword ptr -4
.text$mn:0000D994
.text$mn:0000D994                 push    ebp
.text$mn:0000D995                 mov     ebp, esp
.text$mn:0000D997                 push    ecx
.text$mn:0000D998                 mov     [ebp+var_4], ecx
.text$mn:0000D99B                 mov     eax, [ebp+var_4]
.text$mn:0000D99E                 push    eax
.text$mn:0000D99F                 call    ?max_size@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAIABV?$allocator@U?$pair@HH@std@@@2@@Z ; std::allocator_traits<std::allocator<std::pair<int,int>>>::max_size(std::allocator<std::pair<int,int>> const &)
.text$mn:0000D9A4                 add     esp, 4
.text$mn:0000D9A7                 mov     esp, ebp
.text$mn:0000D9A9                 pop     ebp
.text$mn:0000D9AA                 retn
.text$mn:0000D9AA ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QBEIXZ endp
.text$mn:0000D9AA
.text$mn:0000D9AA ; ---------------------------------------------------------------------------
.text$mn:0000D9AB                 align 4
.text$mn:0000D9AB _text$mn        ends
.text$mn:0000D9AB
.text$mn:0000D9AC ; ===========================================================================
.text$mn:0000D9AC
.text$mn:0000D9AC ; Segment type: Pure code
.text$mn:0000D9AC ; Segment permissions: Read/Execute
.text$mn:0000D9AC _text$mn        segment para public 'CODE' use32
.text$mn:0000D9AC                 assume cs:_text$mn
.text$mn:0000D9AC                 ;org 0D9ACh
.text$mn:0000D9AC ; COMDAT (pick any)
.text$mn:0000D9AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D9AC
.text$mn:0000D9AC ; =============== S U B R O U T I N E =======================================
.text$mn:0000D9AC
.text$mn:0000D9AC ; Attributes: bp-based frame
.text$mn:0000D9AC
.text$mn:0000D9AC ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct AssociationInfo>>::max_size(void)const
.text$mn:0000D9AC                 public ?max_size@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ
.text$mn:0000D9AC ?max_size@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000D9AC                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::max_size(void)+17p
.text$mn:0000D9AC
.text$mn:0000D9AC var_4           = dword ptr -4
.text$mn:0000D9AC
.text$mn:0000D9AC                 push    ebp
.text$mn:0000D9AD                 mov     ebp, esp
.text$mn:0000D9AF                 push    ecx
.text$mn:0000D9B0                 mov     [ebp+var_4], ecx
.text$mn:0000D9B3                 mov     eax, [ebp+var_4]
.text$mn:0000D9B6                 push    eax
.text$mn:0000D9B7                 call    ?max_size@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAIABV?$allocator@UAssociationInfo@@@2@@Z ; std::allocator_traits<std::allocator<AssociationInfo>>::max_size(std::allocator<AssociationInfo> const &)
.text$mn:0000D9BC                 add     esp, 4
.text$mn:0000D9BF                 mov     esp, ebp
.text$mn:0000D9C1                 pop     ebp
.text$mn:0000D9C2                 retn
.text$mn:0000D9C2 ?max_size@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000D9C2
.text$mn:0000D9C2 ; ---------------------------------------------------------------------------
.text$mn:0000D9C3                 align 4
.text$mn:0000D9C3 _text$mn        ends
.text$mn:0000D9C3
.text$mn:0000D9C4 ; ===========================================================================
.text$mn:0000D9C4
.text$mn:0000D9C4 ; Segment type: Pure code
.text$mn:0000D9C4 ; Segment permissions: Read/Execute
.text$mn:0000D9C4 _text$mn        segment para public 'CODE' use32
.text$mn:0000D9C4                 assume cs:_text$mn
.text$mn:0000D9C4                 ;org 0D9C4h
.text$mn:0000D9C4 ; COMDAT (pick any)
.text$mn:0000D9C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D9C4
.text$mn:0000D9C4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D9C4
.text$mn:0000D9C4 ; Attributes: bp-based frame
.text$mn:0000D9C4
.text$mn:0000D9C4 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct foundInfo>>::max_size(void)const
.text$mn:0000D9C4                 public ?max_size@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ
.text$mn:0000D9C4 ?max_size@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000D9C4                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::max_size(void)+17p
.text$mn:0000D9C4
.text$mn:0000D9C4 var_4           = dword ptr -4
.text$mn:0000D9C4
.text$mn:0000D9C4                 push    ebp
.text$mn:0000D9C5                 mov     ebp, esp
.text$mn:0000D9C7                 push    ecx
.text$mn:0000D9C8                 mov     [ebp+var_4], ecx
.text$mn:0000D9CB                 mov     eax, [ebp+var_4]
.text$mn:0000D9CE                 push    eax
.text$mn:0000D9CF                 call    ?max_size@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAIABV?$allocator@UfoundInfo@@@2@@Z ; std::allocator_traits<std::allocator<foundInfo>>::max_size(std::allocator<foundInfo> const &)
.text$mn:0000D9D4                 add     esp, 4
.text$mn:0000D9D7                 mov     esp, ebp
.text$mn:0000D9D9                 pop     ebp
.text$mn:0000D9DA                 retn
.text$mn:0000D9DA ?max_size@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000D9DA
.text$mn:0000D9DA ; ---------------------------------------------------------------------------
.text$mn:0000D9DB                 align 4
.text$mn:0000D9DB _text$mn        ends
.text$mn:0000D9DB
.text$mn:0000D9DC ; ===========================================================================
.text$mn:0000D9DC
.text$mn:0000D9DC ; Segment type: Pure code
.text$mn:0000D9DC ; Segment permissions: Read/Execute
.text$mn:0000D9DC _text$mn        segment para public 'CODE' use32
.text$mn:0000D9DC                 assume cs:_text$mn
.text$mn:0000D9DC                 ;org 0D9DCh
.text$mn:0000D9DC ; COMDAT (pick any)
.text$mn:0000D9DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D9DC
.text$mn:0000D9DC ; =============== S U B R O U T I N E =======================================
.text$mn:0000D9DC
.text$mn:0000D9DC ; Attributes: bp-based frame
.text$mn:0000D9DC
.text$mn:0000D9DC ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000D9DC                 public ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ
.text$mn:0000D9DC ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ proc near
.text$mn:0000D9DC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+17p
.text$mn:0000D9DC
.text$mn:0000D9DC var_4           = dword ptr -4
.text$mn:0000D9DC
.text$mn:0000D9DC                 push    ebp
.text$mn:0000D9DD                 mov     ebp, esp
.text$mn:0000D9DF                 push    ecx
.text$mn:0000D9E0                 mov     [ebp+var_4], ecx
.text$mn:0000D9E3                 mov     eax, [ebp+var_4]
.text$mn:0000D9E6                 push    eax
.text$mn:0000D9E7                 call    ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000D9EC                 add     esp, 4
.text$mn:0000D9EF                 mov     esp, ebp
.text$mn:0000D9F1                 pop     ebp
.text$mn:0000D9F2                 retn
.text$mn:0000D9F2 ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ endp
.text$mn:0000D9F2
.text$mn:0000D9F2 ; ---------------------------------------------------------------------------
.text$mn:0000D9F3                 align 4
.text$mn:0000D9F3 _text$mn        ends
.text$mn:0000D9F3
.text$mn:0000D9F4 ; ===========================================================================
.text$mn:0000D9F4
.text$mn:0000D9F4 ; Segment type: Pure code
.text$mn:0000D9F4 ; Segment permissions: Read/Execute
.text$mn:0000D9F4 _text$mn        segment para public 'CODE' use32
.text$mn:0000D9F4                 assume cs:_text$mn
.text$mn:0000D9F4                 ;org 0D9F4h
.text$mn:0000D9F4 ; COMDAT (pick any)
.text$mn:0000D9F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000D9F4
.text$mn:0000D9F4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000D9F4
.text$mn:0000D9F4 ; Attributes: bp-based frame
.text$mn:0000D9F4
.text$mn:0000D9F4 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000D9F4                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:0000D9F4 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:0000D9F4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:0000D9F4
.text$mn:0000D9F4 var_4           = dword ptr -4
.text$mn:0000D9F4
.text$mn:0000D9F4                 push    ebp
.text$mn:0000D9F5                 mov     ebp, esp
.text$mn:0000D9F7                 push    ecx
.text$mn:0000D9F8                 mov     [ebp+var_4], ecx
.text$mn:0000D9FB                 mov     eax, [ebp+var_4]
.text$mn:0000D9FE                 push    eax
.text$mn:0000D9FF                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:0000DA04                 add     esp, 4
.text$mn:0000DA07                 mov     esp, ebp
.text$mn:0000DA09                 pop     ebp
.text$mn:0000DA0A                 retn
.text$mn:0000DA0A ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:0000DA0A
.text$mn:0000DA0A ; ---------------------------------------------------------------------------
.text$mn:0000DA0B                 align 4
.text$mn:0000DA0B _text$mn        ends
.text$mn:0000DA0B
.text$mn:0000DA0C ; ===========================================================================
.text$mn:0000DA0C
.text$mn:0000DA0C ; Segment type: Pure code
.text$mn:0000DA0C ; Segment permissions: Read/Execute
.text$mn:0000DA0C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA0C                 assume cs:_text$mn
.text$mn:0000DA0C                 ;org 0DA0Ch
.text$mn:0000DA0C ; COMDAT (pick any)
.text$mn:0000DA0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA0C
.text$mn:0000DA0C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA0C
.text$mn:0000DA0C ; Attributes: bp-based frame
.text$mn:0000DA0C
.text$mn:0000DA0C ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:0000DA0C                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:0000DA0C ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:0000DA0C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:0000DA0C
.text$mn:0000DA0C var_4           = dword ptr -4
.text$mn:0000DA0C
.text$mn:0000DA0C                 push    ebp
.text$mn:0000DA0D                 mov     ebp, esp
.text$mn:0000DA0F                 push    ecx
.text$mn:0000DA10                 mov     [ebp+var_4], ecx
.text$mn:0000DA13                 or      eax, 0FFFFFFFFh
.text$mn:0000DA16                 mov     esp, ebp
.text$mn:0000DA18                 pop     ebp
.text$mn:0000DA19                 retn
.text$mn:0000DA19 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:0000DA19
.text$mn:0000DA19 ; ---------------------------------------------------------------------------
.text$mn:0000DA1A                 align 4
.text$mn:0000DA1A _text$mn        ends
.text$mn:0000DA1A
.text$mn:0000DA1C ; ===========================================================================
.text$mn:0000DA1C
.text$mn:0000DA1C ; Segment type: Pure code
.text$mn:0000DA1C ; Segment permissions: Read/Execute
.text$mn:0000DA1C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA1C                 assume cs:_text$mn
.text$mn:0000DA1C                 ;org 0DA1Ch
.text$mn:0000DA1C ; COMDAT (pick any)
.text$mn:0000DA1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA1C
.text$mn:0000DA1C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA1C
.text$mn:0000DA1C ; Attributes: bp-based frame
.text$mn:0000DA1C
.text$mn:0000DA1C ; public: unsigned int __thiscall std::allocator<class FunctionParser *>::max_size(void)const
.text$mn:0000DA1C                 public ?max_size@?$allocator@PAVFunctionParser@@@std@@QBEIXZ
.text$mn:0000DA1C ?max_size@?$allocator@PAVFunctionParser@@@std@@QBEIXZ proc near
.text$mn:0000DA1C                                         ; CODE XREF: std::allocator_traits<std::allocator<FunctionParser *>>::max_size(std::allocator<FunctionParser *> const &)+6p
.text$mn:0000DA1C
.text$mn:0000DA1C var_4           = dword ptr -4
.text$mn:0000DA1C
.text$mn:0000DA1C                 push    ebp
.text$mn:0000DA1D                 mov     ebp, esp
.text$mn:0000DA1F                 push    ecx
.text$mn:0000DA20                 mov     [ebp+var_4], ecx
.text$mn:0000DA23                 mov     eax, 3FFFFFFFh
.text$mn:0000DA28                 mov     esp, ebp
.text$mn:0000DA2A                 pop     ebp
.text$mn:0000DA2B                 retn
.text$mn:0000DA2B ?max_size@?$allocator@PAVFunctionParser@@@std@@QBEIXZ endp
.text$mn:0000DA2B
.text$mn:0000DA2B _text$mn        ends
.text$mn:0000DA2B
.text$mn:0000DA2C ; ===========================================================================
.text$mn:0000DA2C
.text$mn:0000DA2C ; Segment type: Pure code
.text$mn:0000DA2C ; Segment permissions: Read/Execute
.text$mn:0000DA2C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA2C                 assume cs:_text$mn
.text$mn:0000DA2C                 ;org 0DA2Ch
.text$mn:0000DA2C ; COMDAT (pick any)
.text$mn:0000DA2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA2C
.text$mn:0000DA2C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA2C
.text$mn:0000DA2C ; Attributes: bp-based frame
.text$mn:0000DA2C
.text$mn:0000DA2C ; public: unsigned int __thiscall std::allocator<struct std::pair<int, int>>::max_size(void)const
.text$mn:0000DA2C                 public ?max_size@?$allocator@U?$pair@HH@std@@@std@@QBEIXZ
.text$mn:0000DA2C ?max_size@?$allocator@U?$pair@HH@std@@@std@@QBEIXZ proc near
.text$mn:0000DA2C                                         ; CODE XREF: std::allocator_traits<std::allocator<std::pair<int,int>>>::max_size(std::allocator<std::pair<int,int>> const &)+6p
.text$mn:0000DA2C
.text$mn:0000DA2C var_4           = dword ptr -4
.text$mn:0000DA2C
.text$mn:0000DA2C                 push    ebp
.text$mn:0000DA2D                 mov     ebp, esp
.text$mn:0000DA2F                 push    ecx
.text$mn:0000DA30                 mov     [ebp+var_4], ecx
.text$mn:0000DA33                 mov     eax, 1FFFFFFFh
.text$mn:0000DA38                 mov     esp, ebp
.text$mn:0000DA3A                 pop     ebp
.text$mn:0000DA3B                 retn
.text$mn:0000DA3B ?max_size@?$allocator@U?$pair@HH@std@@@std@@QBEIXZ endp
.text$mn:0000DA3B
.text$mn:0000DA3B _text$mn        ends
.text$mn:0000DA3B
.text$mn:0000DA3C ; ===========================================================================
.text$mn:0000DA3C
.text$mn:0000DA3C ; Segment type: Pure code
.text$mn:0000DA3C ; Segment permissions: Read/Execute
.text$mn:0000DA3C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA3C                 assume cs:_text$mn
.text$mn:0000DA3C                 ;org 0DA3Ch
.text$mn:0000DA3C ; COMDAT (pick any)
.text$mn:0000DA3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA3C
.text$mn:0000DA3C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA3C
.text$mn:0000DA3C ; Attributes: bp-based frame
.text$mn:0000DA3C
.text$mn:0000DA3C ; public: unsigned int __thiscall std::allocator<struct AssociationInfo>::max_size(void)const
.text$mn:0000DA3C                 public ?max_size@?$allocator@UAssociationInfo@@@std@@QBEIXZ
.text$mn:0000DA3C ?max_size@?$allocator@UAssociationInfo@@@std@@QBEIXZ proc near
.text$mn:0000DA3C                                         ; CODE XREF: std::allocator_traits<std::allocator<AssociationInfo>>::max_size(std::allocator<AssociationInfo> const &)+6p
.text$mn:0000DA3C
.text$mn:0000DA3C var_4           = dword ptr -4
.text$mn:0000DA3C
.text$mn:0000DA3C                 push    ebp
.text$mn:0000DA3D                 mov     ebp, esp
.text$mn:0000DA3F                 push    ecx
.text$mn:0000DA40                 mov     [ebp+var_4], ecx
.text$mn:0000DA43                 mov     eax, 3FFFFFFh
.text$mn:0000DA48                 mov     esp, ebp
.text$mn:0000DA4A                 pop     ebp
.text$mn:0000DA4B                 retn
.text$mn:0000DA4B ?max_size@?$allocator@UAssociationInfo@@@std@@QBEIXZ endp
.text$mn:0000DA4B
.text$mn:0000DA4B _text$mn        ends
.text$mn:0000DA4B
.text$mn:0000DA4C ; ===========================================================================
.text$mn:0000DA4C
.text$mn:0000DA4C ; Segment type: Pure code
.text$mn:0000DA4C ; Segment permissions: Read/Execute
.text$mn:0000DA4C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA4C                 assume cs:_text$mn
.text$mn:0000DA4C                 ;org 0DA4Ch
.text$mn:0000DA4C ; COMDAT (pick any)
.text$mn:0000DA4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA4C
.text$mn:0000DA4C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA4C
.text$mn:0000DA4C ; Attributes: bp-based frame
.text$mn:0000DA4C
.text$mn:0000DA4C ; public: unsigned int __thiscall std::allocator<struct foundInfo>::max_size(void)const
.text$mn:0000DA4C                 public ?max_size@?$allocator@UfoundInfo@@@std@@QBEIXZ
.text$mn:0000DA4C ?max_size@?$allocator@UfoundInfo@@@std@@QBEIXZ proc near
.text$mn:0000DA4C                                         ; CODE XREF: std::allocator_traits<std::allocator<foundInfo>>::max_size(std::allocator<foundInfo> const &)+6p
.text$mn:0000DA4C
.text$mn:0000DA4C var_4           = dword ptr -4
.text$mn:0000DA4C
.text$mn:0000DA4C                 push    ebp
.text$mn:0000DA4D                 mov     ebp, esp
.text$mn:0000DA4F                 push    ecx
.text$mn:0000DA50                 mov     [ebp+var_4], ecx
.text$mn:0000DA53                 mov     eax, 3FFFFFFh
.text$mn:0000DA58                 mov     esp, ebp
.text$mn:0000DA5A                 pop     ebp
.text$mn:0000DA5B                 retn
.text$mn:0000DA5B ?max_size@?$allocator@UfoundInfo@@@std@@QBEIXZ endp
.text$mn:0000DA5B
.text$mn:0000DA5B _text$mn        ends
.text$mn:0000DA5B
.text$mn:0000DA5C ; ===========================================================================
.text$mn:0000DA5C
.text$mn:0000DA5C ; Segment type: Pure code
.text$mn:0000DA5C ; Segment permissions: Read/Execute
.text$mn:0000DA5C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA5C                 assume cs:_text$mn
.text$mn:0000DA5C                 ;org 0DA5Ch
.text$mn:0000DA5C ; COMDAT (pick any)
.text$mn:0000DA5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA5C
.text$mn:0000DA5C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA5C
.text$mn:0000DA5C ; Attributes: bp-based frame
.text$mn:0000DA5C
.text$mn:0000DA5C ; public: unsigned int __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::max_size(void)const
.text$mn:0000DA5C                 public ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ
.text$mn:0000DA5C ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ proc near
.text$mn:0000DA5C                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+6p
.text$mn:0000DA5C
.text$mn:0000DA5C var_4           = dword ptr -4
.text$mn:0000DA5C
.text$mn:0000DA5C                 push    ebp
.text$mn:0000DA5D                 mov     ebp, esp
.text$mn:0000DA5F                 push    ecx
.text$mn:0000DA60                 mov     [ebp+var_4], ecx
.text$mn:0000DA63                 mov     eax, 9249249h
.text$mn:0000DA68                 mov     esp, ebp
.text$mn:0000DA6A                 pop     ebp
.text$mn:0000DA6B                 retn
.text$mn:0000DA6B ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ endp
.text$mn:0000DA6B
.text$mn:0000DA6B _text$mn        ends
.text$mn:0000DA6B
.text$mn:0000DA6C ; ===========================================================================
.text$mn:0000DA6C
.text$mn:0000DA6C ; Segment type: Pure code
.text$mn:0000DA6C ; Segment permissions: Read/Execute
.text$mn:0000DA6C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA6C                 assume cs:_text$mn
.text$mn:0000DA6C                 ;org 0DA6Ch
.text$mn:0000DA6C ; COMDAT (pick any)
.text$mn:0000DA6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA6C
.text$mn:0000DA6C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA6C
.text$mn:0000DA6C ; Attributes: bp-based frame
.text$mn:0000DA6C
.text$mn:0000DA6C ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:0000DA6C                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:0000DA6C ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:0000DA6C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:0000DA6C
.text$mn:0000DA6C var_4           = dword ptr -4
.text$mn:0000DA6C
.text$mn:0000DA6C                 push    ebp
.text$mn:0000DA6D                 mov     ebp, esp
.text$mn:0000DA6F                 push    ecx
.text$mn:0000DA70                 mov     [ebp+var_4], ecx
.text$mn:0000DA73                 mov     eax, 7FFFFFFFh
.text$mn:0000DA78                 mov     esp, ebp
.text$mn:0000DA7A                 pop     ebp
.text$mn:0000DA7B                 retn
.text$mn:0000DA7B ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:0000DA7B
.text$mn:0000DA7B _text$mn        ends
.text$mn:0000DA7B
.text$mn:0000DA7C ; ===========================================================================
.text$mn:0000DA7C
.text$mn:0000DA7C ; Segment type: Pure code
.text$mn:0000DA7C ; Segment permissions: Read/Execute
.text$mn:0000DA7C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA7C                 assume cs:_text$mn
.text$mn:0000DA7C                 ;org 0DA7Ch
.text$mn:0000DA7C ; COMDAT (pick any)
.text$mn:0000DA7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA7C
.text$mn:0000DA7C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA7C
.text$mn:0000DA7C ; Attributes: bp-based frame
.text$mn:0000DA7C
.text$mn:0000DA7C ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:0000DA7C                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:0000DA7C ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:0000DA7C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:0000DA7C
.text$mn:0000DA7C arg_0           = dword ptr  8
.text$mn:0000DA7C
.text$mn:0000DA7C                 push    ebp
.text$mn:0000DA7D                 mov     ebp, esp
.text$mn:0000DA7F                 mov     ecx, [ebp+arg_0]
.text$mn:0000DA82                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:0000DA87                 pop     ebp
.text$mn:0000DA88                 retn
.text$mn:0000DA88 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:0000DA88
.text$mn:0000DA88 ; ---------------------------------------------------------------------------
.text$mn:0000DA89                 align 4
.text$mn:0000DA89 _text$mn        ends
.text$mn:0000DA89
.text$mn:0000DA8C ; ===========================================================================
.text$mn:0000DA8C
.text$mn:0000DA8C ; Segment type: Pure code
.text$mn:0000DA8C ; Segment permissions: Read/Execute
.text$mn:0000DA8C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA8C                 assume cs:_text$mn
.text$mn:0000DA8C                 ;org 0DA8Ch
.text$mn:0000DA8C ; COMDAT (pick any)
.text$mn:0000DA8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA8C
.text$mn:0000DA8C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA8C
.text$mn:0000DA8C ; Attributes: bp-based frame
.text$mn:0000DA8C
.text$mn:0000DA8C ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<class FunctionParser *>>::max_size(class std::allocator<class FunctionParser *> const &)
.text$mn:0000DA8C                 public ?max_size@?$allocator_traits@V?$allocator@PAVFunctionParser@@@std@@@std@@SAIABV?$allocator@PAVFunctionParser@@@2@@Z
.text$mn:0000DA8C ?max_size@?$allocator_traits@V?$allocator@PAVFunctionParser@@@std@@@std@@SAIABV?$allocator@PAVFunctionParser@@@2@@Z proc near
.text$mn:0000DA8C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<FunctionParser *>>::max_size(void)+Bp
.text$mn:0000DA8C
.text$mn:0000DA8C arg_0           = dword ptr  8
.text$mn:0000DA8C
.text$mn:0000DA8C                 push    ebp
.text$mn:0000DA8D                 mov     ebp, esp
.text$mn:0000DA8F                 mov     ecx, [ebp+arg_0]
.text$mn:0000DA92                 call    ?max_size@?$allocator@PAVFunctionParser@@@std@@QBEIXZ ; std::allocator<FunctionParser *>::max_size(void)
.text$mn:0000DA97                 pop     ebp
.text$mn:0000DA98                 retn
.text$mn:0000DA98 ?max_size@?$allocator_traits@V?$allocator@PAVFunctionParser@@@std@@@std@@SAIABV?$allocator@PAVFunctionParser@@@2@@Z endp
.text$mn:0000DA98
.text$mn:0000DA98 ; ---------------------------------------------------------------------------
.text$mn:0000DA99                 align 4
.text$mn:0000DA99 _text$mn        ends
.text$mn:0000DA99
.text$mn:0000DA9C ; ===========================================================================
.text$mn:0000DA9C
.text$mn:0000DA9C ; Segment type: Pure code
.text$mn:0000DA9C ; Segment permissions: Read/Execute
.text$mn:0000DA9C _text$mn        segment para public 'CODE' use32
.text$mn:0000DA9C                 assume cs:_text$mn
.text$mn:0000DA9C                 ;org 0DA9Ch
.text$mn:0000DA9C ; COMDAT (pick any)
.text$mn:0000DA9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DA9C
.text$mn:0000DA9C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DA9C
.text$mn:0000DA9C ; Attributes: bp-based frame
.text$mn:0000DA9C
.text$mn:0000DA9C ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct std::pair<int, int>>>::max_size(class std::allocator<struct std::pair<int, int>> const &)
.text$mn:0000DA9C                 public ?max_size@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAIABV?$allocator@U?$pair@HH@std@@@2@@Z
.text$mn:0000DA9C ?max_size@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAIABV?$allocator@U?$pair@HH@std@@@2@@Z proc near
.text$mn:0000DA9C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::max_size(void)+Bp
.text$mn:0000DA9C
.text$mn:0000DA9C arg_0           = dword ptr  8
.text$mn:0000DA9C
.text$mn:0000DA9C                 push    ebp
.text$mn:0000DA9D                 mov     ebp, esp
.text$mn:0000DA9F                 mov     ecx, [ebp+arg_0]
.text$mn:0000DAA2                 call    ?max_size@?$allocator@U?$pair@HH@std@@@std@@QBEIXZ ; std::allocator<std::pair<int,int>>::max_size(void)
.text$mn:0000DAA7                 pop     ebp
.text$mn:0000DAA8                 retn
.text$mn:0000DAA8 ?max_size@?$allocator_traits@V?$allocator@U?$pair@HH@std@@@std@@@std@@SAIABV?$allocator@U?$pair@HH@std@@@2@@Z endp
.text$mn:0000DAA8
.text$mn:0000DAA8 ; ---------------------------------------------------------------------------
.text$mn:0000DAA9                 align 4
.text$mn:0000DAA9 _text$mn        ends
.text$mn:0000DAA9
.text$mn:0000DAAC ; ===========================================================================
.text$mn:0000DAAC
.text$mn:0000DAAC ; Segment type: Pure code
.text$mn:0000DAAC ; Segment permissions: Read/Execute
.text$mn:0000DAAC _text$mn        segment para public 'CODE' use32
.text$mn:0000DAAC                 assume cs:_text$mn
.text$mn:0000DAAC                 ;org 0DAACh
.text$mn:0000DAAC ; COMDAT (pick any)
.text$mn:0000DAAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DAAC
.text$mn:0000DAAC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DAAC
.text$mn:0000DAAC ; Attributes: bp-based frame
.text$mn:0000DAAC
.text$mn:0000DAAC ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct AssociationInfo>>::max_size(class std::allocator<struct AssociationInfo> const &)
.text$mn:0000DAAC                 public ?max_size@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAIABV?$allocator@UAssociationInfo@@@2@@Z
.text$mn:0000DAAC ?max_size@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAIABV?$allocator@UAssociationInfo@@@2@@Z proc near
.text$mn:0000DAAC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<AssociationInfo>>::max_size(void)+Bp
.text$mn:0000DAAC
.text$mn:0000DAAC arg_0           = dword ptr  8
.text$mn:0000DAAC
.text$mn:0000DAAC                 push    ebp
.text$mn:0000DAAD                 mov     ebp, esp
.text$mn:0000DAAF                 mov     ecx, [ebp+arg_0]
.text$mn:0000DAB2                 call    ?max_size@?$allocator@UAssociationInfo@@@std@@QBEIXZ ; std::allocator<AssociationInfo>::max_size(void)
.text$mn:0000DAB7                 pop     ebp
.text$mn:0000DAB8                 retn
.text$mn:0000DAB8 ?max_size@?$allocator_traits@V?$allocator@UAssociationInfo@@@std@@@std@@SAIABV?$allocator@UAssociationInfo@@@2@@Z endp
.text$mn:0000DAB8
.text$mn:0000DAB8 ; ---------------------------------------------------------------------------
.text$mn:0000DAB9                 align 4
.text$mn:0000DAB9 _text$mn        ends
.text$mn:0000DAB9
.text$mn:0000DABC ; ===========================================================================
.text$mn:0000DABC
.text$mn:0000DABC ; Segment type: Pure code
.text$mn:0000DABC ; Segment permissions: Read/Execute
.text$mn:0000DABC _text$mn        segment para public 'CODE' use32
.text$mn:0000DABC                 assume cs:_text$mn
.text$mn:0000DABC                 ;org 0DABCh
.text$mn:0000DABC ; COMDAT (pick any)
.text$mn:0000DABC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DABC
.text$mn:0000DABC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DABC
.text$mn:0000DABC ; Attributes: bp-based frame
.text$mn:0000DABC
.text$mn:0000DABC ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct foundInfo>>::max_size(class std::allocator<struct foundInfo> const &)
.text$mn:0000DABC                 public ?max_size@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAIABV?$allocator@UfoundInfo@@@2@@Z
.text$mn:0000DABC ?max_size@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAIABV?$allocator@UfoundInfo@@@2@@Z proc near
.text$mn:0000DABC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<foundInfo>>::max_size(void)+Bp
.text$mn:0000DABC
.text$mn:0000DABC arg_0           = dword ptr  8
.text$mn:0000DABC
.text$mn:0000DABC                 push    ebp
.text$mn:0000DABD                 mov     ebp, esp
.text$mn:0000DABF                 mov     ecx, [ebp+arg_0]
.text$mn:0000DAC2                 call    ?max_size@?$allocator@UfoundInfo@@@std@@QBEIXZ ; std::allocator<foundInfo>::max_size(void)
.text$mn:0000DAC7                 pop     ebp
.text$mn:0000DAC8                 retn
.text$mn:0000DAC8 ?max_size@?$allocator_traits@V?$allocator@UfoundInfo@@@std@@@std@@SAIABV?$allocator@UfoundInfo@@@2@@Z endp
.text$mn:0000DAC8
.text$mn:0000DAC8 ; ---------------------------------------------------------------------------
.text$mn:0000DAC9                 align 4
.text$mn:0000DAC9 _text$mn        ends
.text$mn:0000DAC9
.text$mn:0000DACC ; ===========================================================================
.text$mn:0000DACC
.text$mn:0000DACC ; Segment type: Pure code
.text$mn:0000DACC ; Segment permissions: Read/Execute
.text$mn:0000DACC _text$mn        segment para public 'CODE' use32
.text$mn:0000DACC                 assume cs:_text$mn
.text$mn:0000DACC                 ;org 0DACCh
.text$mn:0000DACC ; COMDAT (pick any)
.text$mn:0000DACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DACC
.text$mn:0000DACC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DACC
.text$mn:0000DACC ; Attributes: bp-based frame
.text$mn:0000DACC
.text$mn:0000DACC ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:0000DACC                 public ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z
.text$mn:0000DACC ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z proc near
.text$mn:0000DACC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+Bp
.text$mn:0000DACC
.text$mn:0000DACC arg_0           = dword ptr  8
.text$mn:0000DACC
.text$mn:0000DACC                 push    ebp
.text$mn:0000DACD                 mov     ebp, esp
.text$mn:0000DACF                 mov     ecx, [ebp+arg_0]
.text$mn:0000DAD2                 call    ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::max_size(void)
.text$mn:0000DAD7                 pop     ebp
.text$mn:0000DAD8                 retn
.text$mn:0000DAD8 ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z endp
.text$mn:0000DAD8
.text$mn:0000DAD8 ; ---------------------------------------------------------------------------
.text$mn:0000DAD9                 align 4
.text$mn:0000DAD9 _text$mn        ends
.text$mn:0000DAD9
.text$mn:0000DADC ; ===========================================================================
.text$mn:0000DADC
.text$mn:0000DADC ; Segment type: Pure code
.text$mn:0000DADC ; Segment permissions: Read/Execute
.text$mn:0000DADC _text$mn        segment para public 'CODE' use32
.text$mn:0000DADC                 assume cs:_text$mn
.text$mn:0000DADC                 ;org 0DADCh
.text$mn:0000DADC ; COMDAT (pick any)
.text$mn:0000DADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DADC
.text$mn:0000DADC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DADC
.text$mn:0000DADC ; Attributes: bp-based frame
.text$mn:0000DADC
.text$mn:0000DADC ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:0000DADC                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:0000DADC ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:0000DADC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:0000DADC
.text$mn:0000DADC arg_0           = dword ptr  8
.text$mn:0000DADC
.text$mn:0000DADC                 push    ebp
.text$mn:0000DADD                 mov     ebp, esp
.text$mn:0000DADF                 mov     ecx, [ebp+arg_0]
.text$mn:0000DAE2                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:0000DAE7                 pop     ebp
.text$mn:0000DAE8                 retn
.text$mn:0000DAE8 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:0000DAE8
.text$mn:0000DAE8 ; ---------------------------------------------------------------------------
.text$mn:0000DAE9                 align 4
.text$mn:0000DAE9 _text$mn        ends
.text$mn:0000DAE9
.text$mn:0000DAEC ; ===========================================================================
.text$mn:0000DAEC
.text$mn:0000DAEC ; Segment type: Pure code
.text$mn:0000DAEC ; Segment permissions: Read/Execute
.text$mn:0000DAEC _text$mn        segment para public 'CODE' use32
.text$mn:0000DAEC                 assume cs:_text$mn
.text$mn:0000DAEC                 ;org 0DAECh
.text$mn:0000DAEC ; COMDAT (pick any)
.text$mn:0000DAEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DAEC
.text$mn:0000DAEC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DAEC
.text$mn:0000DAEC ; Attributes: bp-based frame
.text$mn:0000DAEC
.text$mn:0000DAEC ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:0000DAEC                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000DAEC ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000DAEC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:0000DAEC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000DAEC
.text$mn:0000DAEC var_10          = dword ptr -10h
.text$mn:0000DAEC var_C           = dword ptr -0Ch
.text$mn:0000DAEC var_8           = dword ptr -8
.text$mn:0000DAEC var_1           = byte ptr -1
.text$mn:0000DAEC
.text$mn:0000DAEC                 push    ebp
.text$mn:0000DAED                 mov     ebp, esp
.text$mn:0000DAEF                 sub     esp, 10h
.text$mn:0000DAF2                 mov     [ebp+var_10], ecx
.text$mn:0000DAF5                 lea     eax, [ebp+var_1]
.text$mn:0000DAF8                 push    eax
.text$mn:0000DAF9                 mov     ecx, [ebp+var_10]
.text$mn:0000DAFC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000DB01                 mov     ecx, eax
.text$mn:0000DB03                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:0000DB08                 mov     [ebp+var_8], eax
.text$mn:0000DB0B                 cmp     [ebp+var_8], 1
.text$mn:0000DB0F                 ja      short loc_DB1A
.text$mn:0000DB11                 mov     [ebp+var_C], 1
.text$mn:0000DB18                 jmp     short loc_DB23
.text$mn:0000DB1A ; ---------------------------------------------------------------------------
.text$mn:0000DB1A
.text$mn:0000DB1A loc_DB1A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:0000DB1A                 mov     ecx, [ebp+var_8]
.text$mn:0000DB1D                 sub     ecx, 1
.text$mn:0000DB20                 mov     [ebp+var_C], ecx
.text$mn:0000DB23
.text$mn:0000DB23 loc_DB23:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:0000DB23                 mov     eax, [ebp+var_C]
.text$mn:0000DB26                 mov     esp, ebp
.text$mn:0000DB28                 pop     ebp
.text$mn:0000DB29                 retn
.text$mn:0000DB29 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000DB29
.text$mn:0000DB29 ; ---------------------------------------------------------------------------
.text$mn:0000DB2A                 align 4
.text$mn:0000DB2A _text$mn        ends
.text$mn:0000DB2A
.text$mn:0000DB2C ; ===========================================================================
.text$mn:0000DB2C
.text$mn:0000DB2C ; Segment type: Pure code
.text$mn:0000DB2C ; Segment permissions: Read/Execute
.text$mn:0000DB2C _text$mn        segment para public 'CODE' use32
.text$mn:0000DB2C                 assume cs:_text$mn
.text$mn:0000DB2C                 ;org 0DB2Ch
.text$mn:0000DB2C ; COMDAT (pick any)
.text$mn:0000DB2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DB2C
.text$mn:0000DB2C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DB2C
.text$mn:0000DB2C ; Attributes: bp-based frame
.text$mn:0000DB2C
.text$mn:0000DB2C ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000DB2C                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000DB2C ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000DB2C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:0000DB2C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000DB2C
.text$mn:0000DB2C var_10          = dword ptr -10h
.text$mn:0000DB2C var_C           = dword ptr -0Ch
.text$mn:0000DB2C var_8           = dword ptr -8
.text$mn:0000DB2C var_1           = byte ptr -1
.text$mn:0000DB2C
.text$mn:0000DB2C                 push    ebp
.text$mn:0000DB2D                 mov     ebp, esp
.text$mn:0000DB2F                 sub     esp, 10h
.text$mn:0000DB32                 mov     [ebp+var_10], ecx
.text$mn:0000DB35                 lea     eax, [ebp+var_1]
.text$mn:0000DB38                 push    eax
.text$mn:0000DB39                 mov     ecx, [ebp+var_10]
.text$mn:0000DB3C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000DB41                 mov     ecx, eax
.text$mn:0000DB43                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:0000DB48                 mov     [ebp+var_8], eax
.text$mn:0000DB4B                 cmp     [ebp+var_8], 1
.text$mn:0000DB4F                 ja      short loc_DB5A
.text$mn:0000DB51                 mov     [ebp+var_C], 1
.text$mn:0000DB58                 jmp     short loc_DB63
.text$mn:0000DB5A ; ---------------------------------------------------------------------------
.text$mn:0000DB5A
.text$mn:0000DB5A loc_DB5A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:0000DB5A                 mov     ecx, [ebp+var_8]
.text$mn:0000DB5D                 sub     ecx, 1
.text$mn:0000DB60                 mov     [ebp+var_C], ecx
.text$mn:0000DB63
.text$mn:0000DB63 loc_DB63:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:0000DB63                 mov     eax, [ebp+var_C]
.text$mn:0000DB66                 mov     esp, ebp
.text$mn:0000DB68                 pop     ebp
.text$mn:0000DB69                 retn
.text$mn:0000DB69 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000DB69
.text$mn:0000DB69 ; ---------------------------------------------------------------------------
.text$mn:0000DB6A                 align 4
.text$mn:0000DB6A _text$mn        ends
.text$mn:0000DB6A
.text$mn:0000DB6C ; ===========================================================================
.text$mn:0000DB6C
.text$mn:0000DB6C ; Segment type: Pure code
.text$mn:0000DB6C ; Segment permissions: Read/Execute
.text$mn:0000DB6C _text$mn        segment para public 'CODE' use32
.text$mn:0000DB6C                 assume cs:_text$mn
.text$mn:0000DB6C                 ;org 0DB6Ch
.text$mn:0000DB6C ; COMDAT (pick any)
.text$mn:0000DB6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DB6C
.text$mn:0000DB6C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DB6C
.text$mn:0000DB6C ; Attributes: bp-based frame
.text$mn:0000DB6C
.text$mn:0000DB6C ; public: unsigned int __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::max_size(void)const
.text$mn:0000DB6C                 public ?max_size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ
.text$mn:0000DB6C ?max_size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ proc near
.text$mn:0000DB6C                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Grow_to(uint)+17p
.text$mn:0000DB6C                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)+18p
.text$mn:0000DB6C
.text$mn:0000DB6C var_8           = dword ptr -8
.text$mn:0000DB6C var_1           = byte ptr -1
.text$mn:0000DB6C
.text$mn:0000DB6C                 push    ebp
.text$mn:0000DB6D                 mov     ebp, esp
.text$mn:0000DB6F                 sub     esp, 8
.text$mn:0000DB72                 mov     [ebp+var_8], ecx
.text$mn:0000DB75                 lea     eax, [ebp+var_1]
.text$mn:0000DB78                 push    eax
.text$mn:0000DB79                 mov     ecx, [ebp+var_8]
.text$mn:0000DB7C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:0000DB81                 mov     ecx, eax
.text$mn:0000DB83                 call    ?max_size@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<FunctionParser *>>::max_size(void)
.text$mn:0000DB88                 mov     esp, ebp
.text$mn:0000DB8A                 pop     ebp
.text$mn:0000DB8B                 retn
.text$mn:0000DB8B ?max_size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ endp
.text$mn:0000DB8B
.text$mn:0000DB8B _text$mn        ends
.text$mn:0000DB8B
.text$mn:0000DB8C ; ===========================================================================
.text$mn:0000DB8C
.text$mn:0000DB8C ; Segment type: Pure code
.text$mn:0000DB8C ; Segment permissions: Read/Execute
.text$mn:0000DB8C _text$mn        segment para public 'CODE' use32
.text$mn:0000DB8C                 assume cs:_text$mn
.text$mn:0000DB8C                 ;org 0DB8Ch
.text$mn:0000DB8C ; COMDAT (pick any)
.text$mn:0000DB8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DB8C
.text$mn:0000DB8C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DB8C
.text$mn:0000DB8C ; Attributes: bp-based frame
.text$mn:0000DB8C
.text$mn:0000DB8C ; public: unsigned int __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::max_size(void)const
.text$mn:0000DB8C                 public ?max_size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ
.text$mn:0000DB8C ?max_size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000DB8C                                         ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Grow_to(uint)+17p
.text$mn:0000DB8C                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)+18p
.text$mn:0000DB8C
.text$mn:0000DB8C var_8           = dword ptr -8
.text$mn:0000DB8C var_1           = byte ptr -1
.text$mn:0000DB8C
.text$mn:0000DB8C                 push    ebp
.text$mn:0000DB8D                 mov     ebp, esp
.text$mn:0000DB8F                 sub     esp, 8
.text$mn:0000DB92                 mov     [ebp+var_8], ecx
.text$mn:0000DB95                 lea     eax, [ebp+var_1]
.text$mn:0000DB98                 push    eax
.text$mn:0000DB99                 mov     ecx, [ebp+var_8]
.text$mn:0000DB9C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:0000DBA1                 mov     ecx, eax
.text$mn:0000DBA3                 call    ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::max_size(void)
.text$mn:0000DBA8                 mov     esp, ebp
.text$mn:0000DBAA                 pop     ebp
.text$mn:0000DBAB                 retn
.text$mn:0000DBAB ?max_size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ endp
.text$mn:0000DBAB
.text$mn:0000DBAB _text$mn        ends
.text$mn:0000DBAB
.text$mn:0000DBAC ; ===========================================================================
.text$mn:0000DBAC
.text$mn:0000DBAC ; Segment type: Pure code
.text$mn:0000DBAC ; Segment permissions: Read/Execute
.text$mn:0000DBAC _text$mn        segment para public 'CODE' use32
.text$mn:0000DBAC                 assume cs:_text$mn
.text$mn:0000DBAC                 ;org 0DBACh
.text$mn:0000DBAC ; COMDAT (pick any)
.text$mn:0000DBAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DBAC
.text$mn:0000DBAC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DBAC
.text$mn:0000DBAC ; Attributes: bp-based frame
.text$mn:0000DBAC
.text$mn:0000DBAC ; public: unsigned int __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::max_size(void)const
.text$mn:0000DBAC                 public ?max_size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ
.text$mn:0000DBAC ?max_size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000DBAC                                         ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Grow_to(uint)+17p
.text$mn:0000DBAC                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)+18p
.text$mn:0000DBAC
.text$mn:0000DBAC var_8           = dword ptr -8
.text$mn:0000DBAC var_1           = byte ptr -1
.text$mn:0000DBAC
.text$mn:0000DBAC                 push    ebp
.text$mn:0000DBAD                 mov     ebp, esp
.text$mn:0000DBAF                 sub     esp, 8
.text$mn:0000DBB2                 mov     [ebp+var_8], ecx
.text$mn:0000DBB5                 lea     eax, [ebp+var_1]
.text$mn:0000DBB8                 push    eax
.text$mn:0000DBB9                 mov     ecx, [ebp+var_8]
.text$mn:0000DBBC                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:0000DBC1                 mov     ecx, eax
.text$mn:0000DBC3                 call    ?max_size@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::max_size(void)
.text$mn:0000DBC8                 mov     esp, ebp
.text$mn:0000DBCA                 pop     ebp
.text$mn:0000DBCB                 retn
.text$mn:0000DBCB ?max_size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000DBCB
.text$mn:0000DBCB _text$mn        ends
.text$mn:0000DBCB
.text$mn:0000DBCC ; ===========================================================================
.text$mn:0000DBCC
.text$mn:0000DBCC ; Segment type: Pure code
.text$mn:0000DBCC ; Segment permissions: Read/Execute
.text$mn:0000DBCC _text$mn        segment para public 'CODE' use32
.text$mn:0000DBCC                 assume cs:_text$mn
.text$mn:0000DBCC                 ;org 0DBCCh
.text$mn:0000DBCC ; COMDAT (pick any)
.text$mn:0000DBCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DBCC
.text$mn:0000DBCC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DBCC
.text$mn:0000DBCC ; Attributes: bp-based frame
.text$mn:0000DBCC
.text$mn:0000DBCC ; public: unsigned int __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::max_size(void)const
.text$mn:0000DBCC                 public ?max_size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ
.text$mn:0000DBCC ?max_size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000DBCC                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Grow_to(uint)+17p
.text$mn:0000DBCC                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)+18p
.text$mn:0000DBCC
.text$mn:0000DBCC var_8           = dword ptr -8
.text$mn:0000DBCC var_1           = byte ptr -1
.text$mn:0000DBCC
.text$mn:0000DBCC                 push    ebp
.text$mn:0000DBCD                 mov     ebp, esp
.text$mn:0000DBCF                 sub     esp, 8
.text$mn:0000DBD2                 mov     [ebp+var_8], ecx
.text$mn:0000DBD5                 lea     eax, [ebp+var_1]
.text$mn:0000DBD8                 push    eax
.text$mn:0000DBD9                 mov     ecx, [ebp+var_8]
.text$mn:0000DBDC                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:0000DBE1                 mov     ecx, eax
.text$mn:0000DBE3                 call    ?max_size@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<foundInfo>>::max_size(void)
.text$mn:0000DBE8                 mov     esp, ebp
.text$mn:0000DBEA                 pop     ebp
.text$mn:0000DBEB                 retn
.text$mn:0000DBEB ?max_size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000DBEB
.text$mn:0000DBEB _text$mn        ends
.text$mn:0000DBEB
.text$mn:0000DBEC ; ===========================================================================
.text$mn:0000DBEC
.text$mn:0000DBEC ; Segment type: Pure code
.text$mn:0000DBEC ; Segment permissions: Read/Execute
.text$mn:0000DBEC _text$mn        segment para public 'CODE' use32
.text$mn:0000DBEC                 assume cs:_text$mn
.text$mn:0000DBEC                 ;org 0DBECh
.text$mn:0000DBEC ; COMDAT (pick any)
.text$mn:0000DBEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DBEC
.text$mn:0000DBEC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DBEC
.text$mn:0000DBEC ; Attributes: bp-based frame
.text$mn:0000DBEC
.text$mn:0000DBEC ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:0000DBEC                 public ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000DBEC ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000DBEC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Buy(uint)+36p
.text$mn:0000DBEC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+17p ...
.text$mn:0000DBEC
.text$mn:0000DBEC var_8           = dword ptr -8
.text$mn:0000DBEC var_1           = byte ptr -1
.text$mn:0000DBEC
.text$mn:0000DBEC                 push    ebp
.text$mn:0000DBED                 mov     ebp, esp
.text$mn:0000DBEF                 sub     esp, 8
.text$mn:0000DBF2                 mov     [ebp+var_8], ecx
.text$mn:0000DBF5                 lea     eax, [ebp+var_1]
.text$mn:0000DBF8                 push    eax
.text$mn:0000DBF9                 mov     ecx, [ebp+var_8]
.text$mn:0000DBFC                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000DC01                 mov     ecx, eax
.text$mn:0000DC03                 call    ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:0000DC08                 mov     esp, ebp
.text$mn:0000DC0A                 pop     ebp
.text$mn:0000DC0B                 retn
.text$mn:0000DC0B ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000DC0B
.text$mn:0000DC0B _text$mn        ends
.text$mn:0000DC0B
.text$mn:0000DC0C ; ===========================================================================
.text$mn:0000DC0C
.text$mn:0000DC0C ; Segment type: Pure code
.text$mn:0000DC0C ; Segment permissions: Read/Execute
.text$mn:0000DC0C _text$mn        segment para public 'CODE' use32
.text$mn:0000DC0C                 assume cs:_text$mn
.text$mn:0000DC0C                 ;org 0DC0Ch
.text$mn:0000DC0C ; COMDAT (pick any)
.text$mn:0000DC0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DC0C
.text$mn:0000DC0C ; =============== S U B R O U T I N E =======================================
.text$mn:0000DC0C
.text$mn:0000DC0C ; Attributes: bp-based frame
.text$mn:0000DC0C
.text$mn:0000DC0C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:0000DC0C                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000DC0C ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000DC0C                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:0000DC0C                                         ; DATA XREF: .rdata:00010E40o
.text$mn:0000DC0C
.text$mn:0000DC0C var_1C          = dword ptr -1Ch
.text$mn:0000DC0C var_18          = dword ptr -18h
.text$mn:0000DC0C Str             = dword ptr -14h
.text$mn:0000DC0C var_10          = dword ptr -10h
.text$mn:0000DC0C var_C           = dword ptr -0Ch
.text$mn:0000DC0C var_4           = dword ptr -4
.text$mn:0000DC0C arg_0           = dword ptr  8
.text$mn:0000DC0C arg_4           = dword ptr  0Ch
.text$mn:0000DC0C
.text$mn:0000DC0C                 push    ebp
.text$mn:0000DC0D                 mov     ebp, esp
.text$mn:0000DC0F                 push    0FFFFFFFFh
.text$mn:0000DC11                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000DC16                 mov     eax, large fs:0
.text$mn:0000DC1C                 push    eax
.text$mn:0000DC1D                 sub     esp, 10h
.text$mn:0000DC20                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000DC25                 xor     eax, ebp
.text$mn:0000DC27                 push    eax
.text$mn:0000DC28                 lea     eax, [ebp+var_C]
.text$mn:0000DC2B                 mov     large fs:0, eax
.text$mn:0000DC31                 mov     [ebp+var_1C], ecx
.text$mn:0000DC34                 mov     [ebp+var_18], 0
.text$mn:0000DC3B                 mov     eax, [ebp+arg_4]
.text$mn:0000DC3E                 push    eax             ; int
.text$mn:0000DC3F                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000DC44                 add     esp, 4
.text$mn:0000DC47                 mov     [ebp+var_10], eax
.text$mn:0000DC4A                 cmp     [ebp+var_10], 0
.text$mn:0000DC4E                 jz      short loc_DC58
.text$mn:0000DC50                 mov     ecx, [ebp+var_10]
.text$mn:0000DC53                 mov     [ebp+Str], ecx
.text$mn:0000DC56                 jmp     short loc_DC5F
.text$mn:0000DC58 ; ---------------------------------------------------------------------------
.text$mn:0000DC58
.text$mn:0000DC58 loc_DC58:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:0000DC58                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000DC5F
.text$mn:0000DC5F loc_DC5F:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:0000DC5F                 mov     edx, [ebp+Str]
.text$mn:0000DC62                 push    edx             ; Str
.text$mn:0000DC63                 mov     ecx, [ebp+arg_0]
.text$mn:0000DC66                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000DC6B                 mov     [ebp+var_4], 0
.text$mn:0000DC72                 mov     eax, [ebp+var_18]
.text$mn:0000DC75                 or      eax, 1
.text$mn:0000DC78                 mov     [ebp+var_18], eax
.text$mn:0000DC7B                 mov     eax, [ebp+arg_0]
.text$mn:0000DC7E                 mov     ecx, [ebp+var_C]
.text$mn:0000DC81                 mov     large fs:0, ecx
.text$mn:0000DC88                 pop     ecx
.text$mn:0000DC89                 mov     esp, ebp
.text$mn:0000DC8B                 pop     ebp
.text$mn:0000DC8C                 retn    8
.text$mn:0000DC8C ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000DC8C
.text$mn:0000DC8C ; ---------------------------------------------------------------------------
.text$mn:0000DC8F                 align 10h
.text$mn:0000DC8F _text$mn        ends
.text$mn:0000DC8F
.text$x:0000DC90 ; ===========================================================================
.text$x:0000DC90
.text$x:0000DC90 ; Segment type: Pure code
.text$x:0000DC90 ; Segment permissions: Read/Execute
.text$x:0000DC90 _text$x         segment para public 'CODE' use32
.text$x:0000DC90                 assume cs:_text$x
.text$x:0000DC90                 ;org 0DC90h
.text$x:0000DC90 ; COMDAT (pick associative to section at DC0C)
.text$x:0000DC90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000DC90
.text$x:0000DC90 ; =============== S U B R O U T I N E =======================================
.text$x:0000DC90
.text$x:0000DC90
.text$x:0000DC90 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000DC90                                         ; DATA XREF: .xdata$x:0000F0E4o
.text$x:0000DC90                 mov     eax, [ebp-18h]
.text$x:0000DC93                 and     eax, 1
.text$x:0000DC96                 jz      $LN6
.text$x:0000DC9C                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000DCA0                 mov     ecx, [ebp+8]
.text$x:0000DCA3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000DCA8 ; ---------------------------------------------------------------------------
.text$x:0000DCA8
.text$x:0000DCA8 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000DCA8                 retn
.text$x:0000DCA8 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000DCA8
.text$x:0000DCA9
.text$x:0000DCA9 ; =============== S U B R O U T I N E =======================================
.text$x:0000DCA9
.text$x:0000DCA9
.text$x:0000DCA9 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000DCA9                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:0000DCA9
.text$x:0000DCA9 arg_4           = dword ptr  8
.text$x:0000DCA9
.text$x:0000DCA9                 mov     edx, [esp+arg_4]
.text$x:0000DCAD                 lea     eax, [edx+0Ch]
.text$x:0000DCB0                 mov     ecx, [edx-14h]
.text$x:0000DCB3                 xor     ecx, eax
.text$x:0000DCB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000DCBA                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000DCBF                 jmp     ___CxxFrameHandler3
.text$x:0000DCBF __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000DCBF
.text$x:0000DCBF _text$x         ends
.text$x:0000DCBF
.text$mn:0000DCC4 ; ===========================================================================
.text$mn:0000DCC4
.text$mn:0000DCC4 ; Segment type: Pure code
.text$mn:0000DCC4 ; Segment permissions: Read/Execute
.text$mn:0000DCC4 _text$mn        segment para public 'CODE' use32
.text$mn:0000DCC4                 assume cs:_text$mn
.text$mn:0000DCC4                 ;org 0DCC4h
.text$mn:0000DCC4 ; COMDAT (pick any)
.text$mn:0000DCC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DCC4
.text$mn:0000DCC4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DCC4
.text$mn:0000DCC4 ; Attributes: bp-based frame
.text$mn:0000DCC4
.text$mn:0000DCC4 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:0000DCC4                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000DCC4 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000DCC4                                         ; DATA XREF: .rdata:00010E74o
.text$mn:0000DCC4
.text$mn:0000DCC4 var_14          = dword ptr -14h
.text$mn:0000DCC4 var_10          = dword ptr -10h
.text$mn:0000DCC4 var_C           = dword ptr -0Ch
.text$mn:0000DCC4 var_4           = dword ptr -4
.text$mn:0000DCC4 arg_0           = dword ptr  8
.text$mn:0000DCC4 arg_4           = dword ptr  0Ch
.text$mn:0000DCC4
.text$mn:0000DCC4                 push    ebp
.text$mn:0000DCC5                 mov     ebp, esp
.text$mn:0000DCC7                 push    0FFFFFFFFh
.text$mn:0000DCC9                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000DCCE                 mov     eax, large fs:0
.text$mn:0000DCD4                 push    eax
.text$mn:0000DCD5                 sub     esp, 8
.text$mn:0000DCD8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000DCDD                 xor     eax, ebp
.text$mn:0000DCDF                 push    eax
.text$mn:0000DCE0                 lea     eax, [ebp+var_C]
.text$mn:0000DCE3                 mov     large fs:0, eax
.text$mn:0000DCE9                 mov     [ebp+var_14], ecx
.text$mn:0000DCEC                 mov     [ebp+var_10], 0
.text$mn:0000DCF3                 cmp     [ebp+arg_4], 1
.text$mn:0000DCF7                 jnz     short loc_DD1D
.text$mn:0000DCF9                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:0000DCFE                 mov     ecx, [ebp+arg_0]
.text$mn:0000DD01                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000DD06                 mov     [ebp+var_4], 0
.text$mn:0000DD0D                 mov     eax, [ebp+var_10]
.text$mn:0000DD10                 or      eax, 1
.text$mn:0000DD13                 mov     [ebp+var_10], eax
.text$mn:0000DD16                 mov     eax, [ebp+arg_0]
.text$mn:0000DD19                 jmp     short loc_DD40
.text$mn:0000DD1B ; ---------------------------------------------------------------------------
.text$mn:0000DD1B                 jmp     short loc_DD40
.text$mn:0000DD1D ; ---------------------------------------------------------------------------
.text$mn:0000DD1D
.text$mn:0000DD1D loc_DD1D:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:0000DD1D                 mov     ecx, [ebp+arg_4]
.text$mn:0000DD20                 push    ecx
.text$mn:0000DD21                 mov     edx, [ebp+arg_0]
.text$mn:0000DD24                 push    edx
.text$mn:0000DD25                 mov     ecx, [ebp+var_14]
.text$mn:0000DD28                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:0000DD2D                 mov     [ebp+var_4], 0
.text$mn:0000DD34                 mov     eax, [ebp+var_10]
.text$mn:0000DD37                 or      eax, 1
.text$mn:0000DD3A                 mov     [ebp+var_10], eax
.text$mn:0000DD3D                 mov     eax, [ebp+arg_0]
.text$mn:0000DD40
.text$mn:0000DD40 loc_DD40:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:0000DD40                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:0000DD40                 mov     ecx, [ebp+var_C]
.text$mn:0000DD43                 mov     large fs:0, ecx
.text$mn:0000DD4A                 pop     ecx
.text$mn:0000DD4B                 mov     esp, ebp
.text$mn:0000DD4D                 pop     ebp
.text$mn:0000DD4E                 retn    8
.text$mn:0000DD4E ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000DD4E
.text$mn:0000DD4E ; ---------------------------------------------------------------------------
.text$mn:0000DD51                 align 4
.text$mn:0000DD51 _text$mn        ends
.text$mn:0000DD51
.text$x:0000DD54 ; ===========================================================================
.text$x:0000DD54
.text$x:0000DD54 ; Segment type: Pure code
.text$x:0000DD54 ; Segment permissions: Read/Execute
.text$x:0000DD54 _text$x         segment para public 'CODE' use32
.text$x:0000DD54                 assume cs:_text$x
.text$x:0000DD54                 ;org 0DD54h
.text$x:0000DD54 ; COMDAT (pick associative to section at DCC4)
.text$x:0000DD54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000DD54
.text$x:0000DD54 ; =============== S U B R O U T I N E =======================================
.text$x:0000DD54
.text$x:0000DD54
.text$x:0000DD54 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000DD54                                         ; DATA XREF: .xdata$x:0000F168o
.text$x:0000DD54                 mov     eax, [ebp-10h]
.text$x:0000DD57                 and     eax, 1
.text$x:0000DD5A                 jz      $LN6_0
.text$x:0000DD60                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:0000DD64                 mov     ecx, [ebp+8]
.text$x:0000DD67                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000DD6C ; ---------------------------------------------------------------------------
.text$x:0000DD6C
.text$x:0000DD6C $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000DD6C                 retn
.text$x:0000DD6C __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000DD6C
.text$x:0000DD6D
.text$x:0000DD6D ; =============== S U B R O U T I N E =======================================
.text$x:0000DD6D
.text$x:0000DD6D
.text$x:0000DD6D __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000DD6D                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:0000DD6D
.text$x:0000DD6D arg_4           = dword ptr  8
.text$x:0000DD6D
.text$x:0000DD6D                 mov     edx, [esp+arg_4]
.text$x:0000DD71                 lea     eax, [edx+0Ch]
.text$x:0000DD74                 mov     ecx, [edx-0Ch]
.text$x:0000DD77                 xor     ecx, eax
.text$x:0000DD79                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000DD7E                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000DD83                 jmp     ___CxxFrameHandler3
.text$x:0000DD83 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000DD83
.text$x:0000DD83 _text$x         ends
.text$x:0000DD83
.text$mn:0000DD88 ; ===========================================================================
.text$mn:0000DD88
.text$mn:0000DD88 ; Segment type: Pure code
.text$mn:0000DD88 ; Segment permissions: Read/Execute
.text$mn:0000DD88 _text$mn        segment para public 'CODE' use32
.text$mn:0000DD88                 assume cs:_text$mn
.text$mn:0000DD88                 ;org 0DD88h
.text$mn:0000DD88 ; COMDAT (pick any)
.text$mn:0000DD88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DD88
.text$mn:0000DD88 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DD88
.text$mn:0000DD88 ; Attributes: bp-based frame
.text$mn:0000DD88
.text$mn:0000DD88 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:0000DD88                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000DD88 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000DD88                                         ; DATA XREF: .rdata:00010EB4o
.text$mn:0000DD88
.text$mn:0000DD88 var_1C          = dword ptr -1Ch
.text$mn:0000DD88 var_18          = dword ptr -18h
.text$mn:0000DD88 Str             = dword ptr -14h
.text$mn:0000DD88 var_10          = dword ptr -10h
.text$mn:0000DD88 var_C           = dword ptr -0Ch
.text$mn:0000DD88 var_4           = dword ptr -4
.text$mn:0000DD88 arg_0           = dword ptr  8
.text$mn:0000DD88 arg_4           = dword ptr  0Ch
.text$mn:0000DD88
.text$mn:0000DD88                 push    ebp
.text$mn:0000DD89                 mov     ebp, esp
.text$mn:0000DD8B                 push    0FFFFFFFFh
.text$mn:0000DD8D                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000DD92                 mov     eax, large fs:0
.text$mn:0000DD98                 push    eax
.text$mn:0000DD99                 sub     esp, 10h
.text$mn:0000DD9C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000DDA1                 xor     eax, ebp
.text$mn:0000DDA3                 push    eax
.text$mn:0000DDA4                 lea     eax, [ebp+var_C]
.text$mn:0000DDA7                 mov     large fs:0, eax
.text$mn:0000DDAD                 mov     [ebp+var_1C], ecx
.text$mn:0000DDB0                 mov     [ebp+var_18], 0
.text$mn:0000DDB7                 mov     eax, [ebp+arg_4]
.text$mn:0000DDBA                 push    eax             ; int
.text$mn:0000DDBB                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:0000DDC0                 add     esp, 4
.text$mn:0000DDC3                 mov     [ebp+var_10], eax
.text$mn:0000DDC6                 cmp     [ebp+var_10], 0
.text$mn:0000DDCA                 jz      short loc_DDD4
.text$mn:0000DDCC                 mov     ecx, [ebp+var_10]
.text$mn:0000DDCF                 mov     [ebp+Str], ecx
.text$mn:0000DDD2                 jmp     short loc_DDDB
.text$mn:0000DDD4 ; ---------------------------------------------------------------------------
.text$mn:0000DDD4
.text$mn:0000DDD4 loc_DDD4:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:0000DDD4                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000DDDB
.text$mn:0000DDDB loc_DDDB:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:0000DDDB                 mov     edx, [ebp+Str]
.text$mn:0000DDDE                 push    edx             ; Str
.text$mn:0000DDDF                 mov     ecx, [ebp+arg_0]
.text$mn:0000DDE2                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000DDE7                 mov     [ebp+var_4], 0
.text$mn:0000DDEE                 mov     eax, [ebp+var_18]
.text$mn:0000DDF1                 or      eax, 1
.text$mn:0000DDF4                 mov     [ebp+var_18], eax
.text$mn:0000DDF7                 mov     eax, [ebp+arg_0]
.text$mn:0000DDFA                 mov     ecx, [ebp+var_C]
.text$mn:0000DDFD                 mov     large fs:0, ecx
.text$mn:0000DE04                 pop     ecx
.text$mn:0000DE05                 mov     esp, ebp
.text$mn:0000DE07                 pop     ebp
.text$mn:0000DE08                 retn    8
.text$mn:0000DE08 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000DE08
.text$mn:0000DE08 ; ---------------------------------------------------------------------------
.text$mn:0000DE0B                 align 4
.text$mn:0000DE0B _text$mn        ends
.text$mn:0000DE0B
.text$x:0000DE0C ; ===========================================================================
.text$x:0000DE0C
.text$x:0000DE0C ; Segment type: Pure code
.text$x:0000DE0C ; Segment permissions: Read/Execute
.text$x:0000DE0C _text$x         segment para public 'CODE' use32
.text$x:0000DE0C                 assume cs:_text$x
.text$x:0000DE0C                 ;org 0DE0Ch
.text$x:0000DE0C ; COMDAT (pick associative to section at DD88)
.text$x:0000DE0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000DE0C
.text$x:0000DE0C ; =============== S U B R O U T I N E =======================================
.text$x:0000DE0C
.text$x:0000DE0C
.text$x:0000DE0C __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000DE0C                                         ; DATA XREF: .xdata$x:0000F1ECo
.text$x:0000DE0C                 mov     eax, [ebp-18h]
.text$x:0000DE0F                 and     eax, 1
.text$x:0000DE12                 jz      $LN6_1
.text$x:0000DE18                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000DE1C                 mov     ecx, [ebp+8]
.text$x:0000DE1F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000DE24 ; ---------------------------------------------------------------------------
.text$x:0000DE24
.text$x:0000DE24 $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000DE24                 retn
.text$x:0000DE24 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000DE24
.text$x:0000DE25
.text$x:0000DE25 ; =============== S U B R O U T I N E =======================================
.text$x:0000DE25
.text$x:0000DE25
.text$x:0000DE25 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000DE25                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:0000DE25
.text$x:0000DE25 arg_4           = dword ptr  8
.text$x:0000DE25
.text$x:0000DE25                 mov     edx, [esp+arg_4]
.text$x:0000DE29                 lea     eax, [edx+0Ch]
.text$x:0000DE2C                 mov     ecx, [edx-14h]
.text$x:0000DE2F                 xor     ecx, eax
.text$x:0000DE31                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000DE36                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000DE3B                 jmp     ___CxxFrameHandler3
.text$x:0000DE3B __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000DE3B
.text$x:0000DE3B _text$x         ends
.text$x:0000DE3B
.text$mn:0000DE40 ; ===========================================================================
.text$mn:0000DE40
.text$mn:0000DE40 ; Segment type: Pure code
.text$mn:0000DE40 ; Segment permissions: Read/Execute
.text$mn:0000DE40 _text$mn        segment para public 'CODE' use32
.text$mn:0000DE40                 assume cs:_text$mn
.text$mn:0000DE40                 ;org 0DE40h
.text$mn:0000DE40 ; COMDAT (pick any)
.text$mn:0000DE40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DE40
.text$mn:0000DE40 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DE40
.text$mn:0000DE40 ; Attributes: bp-based frame
.text$mn:0000DE40
.text$mn:0000DE40 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:0000DE40                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:0000DE40 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:0000DE40                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:0000DE40
.text$mn:0000DE40 var_4           = dword ptr -4
.text$mn:0000DE40 Dst             = dword ptr  8
.text$mn:0000DE40 Src             = dword ptr  0Ch
.text$mn:0000DE40 Size            = dword ptr  10h
.text$mn:0000DE40
.text$mn:0000DE40                 push    ebp
.text$mn:0000DE41                 mov     ebp, esp
.text$mn:0000DE43                 push    ecx
.text$mn:0000DE44                 cmp     [ebp+Size], 0
.text$mn:0000DE48                 jnz     short loc_DE52
.text$mn:0000DE4A                 mov     eax, [ebp+Dst]
.text$mn:0000DE4D                 mov     [ebp+var_4], eax
.text$mn:0000DE50                 jmp     short loc_DE69
.text$mn:0000DE52 ; ---------------------------------------------------------------------------
.text$mn:0000DE52
.text$mn:0000DE52 loc_DE52:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:0000DE52                 mov     ecx, [ebp+Size]
.text$mn:0000DE55                 push    ecx             ; Size
.text$mn:0000DE56                 mov     edx, [ebp+Src]
.text$mn:0000DE59                 push    edx             ; Src
.text$mn:0000DE5A                 mov     eax, [ebp+Dst]
.text$mn:0000DE5D                 push    eax             ; Dst
.text$mn:0000DE5E                 call    _memmove
.text$mn:0000DE63                 add     esp, 0Ch
.text$mn:0000DE66                 mov     [ebp+var_4], eax
.text$mn:0000DE69
.text$mn:0000DE69 loc_DE69:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:0000DE69                 mov     eax, [ebp+var_4]
.text$mn:0000DE6C                 mov     esp, ebp
.text$mn:0000DE6E                 pop     ebp
.text$mn:0000DE6F                 retn
.text$mn:0000DE6F ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000DE6F
.text$mn:0000DE6F _text$mn        ends
.text$mn:0000DE6F
.text$mn:0000DE70 ; ===========================================================================
.text$mn:0000DE70
.text$mn:0000DE70 ; Segment type: Pure code
.text$mn:0000DE70 ; Segment permissions: Read/Execute
.text$mn:0000DE70 _text$mn        segment para public 'CODE' use32
.text$mn:0000DE70                 assume cs:_text$mn
.text$mn:0000DE70                 ;org 0DE70h
.text$mn:0000DE70 ; COMDAT (pick any)
.text$mn:0000DE70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DE70
.text$mn:0000DE70 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DE70
.text$mn:0000DE70 ; Attributes: bp-based frame
.text$mn:0000DE70
.text$mn:0000DE70 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:0000DE70                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000DE70 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000DE70                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:0000DE70                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p ...
.text$mn:0000DE70
.text$mn:0000DE70 var_4           = dword ptr -4
.text$mn:0000DE70 Dst             = dword ptr  8
.text$mn:0000DE70 Src             = dword ptr  0Ch
.text$mn:0000DE70 arg_8           = dword ptr  10h
.text$mn:0000DE70
.text$mn:0000DE70                 push    ebp
.text$mn:0000DE71                 mov     ebp, esp
.text$mn:0000DE73                 push    ecx
.text$mn:0000DE74                 cmp     [ebp+arg_8], 0
.text$mn:0000DE78                 jnz     short loc_DE82
.text$mn:0000DE7A                 mov     eax, [ebp+Dst]
.text$mn:0000DE7D                 mov     [ebp+var_4], eax
.text$mn:0000DE80                 jmp     short loc_DE99
.text$mn:0000DE82 ; ---------------------------------------------------------------------------
.text$mn:0000DE82
.text$mn:0000DE82 loc_DE82:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000DE82                 mov     ecx, [ebp+arg_8]
.text$mn:0000DE85                 push    ecx             ; int
.text$mn:0000DE86                 mov     edx, [ebp+Src]
.text$mn:0000DE89                 push    edx             ; Src
.text$mn:0000DE8A                 mov     eax, [ebp+Dst]
.text$mn:0000DE8D                 push    eax             ; Dst
.text$mn:0000DE8E                 call    _wmemmove
.text$mn:0000DE93                 add     esp, 0Ch
.text$mn:0000DE96                 mov     [ebp+var_4], eax
.text$mn:0000DE99
.text$mn:0000DE99 loc_DE99:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:0000DE99                 mov     eax, [ebp+var_4]
.text$mn:0000DE9C                 mov     esp, ebp
.text$mn:0000DE9E                 pop     ebp
.text$mn:0000DE9F                 retn
.text$mn:0000DE9F ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000DE9F
.text$mn:0000DE9F _text$mn        ends
.text$mn:0000DE9F
.text$mn:0000DEA0 ; ===========================================================================
.text$mn:0000DEA0
.text$mn:0000DEA0 ; Segment type: Pure code
.text$mn:0000DEA0 ; Segment permissions: Read/Execute
.text$mn:0000DEA0 _text$mn        segment para public 'CODE' use32
.text$mn:0000DEA0                 assume cs:_text$mn
.text$mn:0000DEA0                 ;org 0DEA0h
.text$mn:0000DEA0 ; COMDAT (pick any)
.text$mn:0000DEA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DEA0
.text$mn:0000DEA0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DEA0
.text$mn:0000DEA0 ; Attributes: bp-based frame
.text$mn:0000DEA0
.text$mn:0000DEA0 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:0000DEA0                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:0000DEA0 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:0000DEA0                                         ; DATA XREF: .rdata:00010E3Co
.text$mn:0000DEA0
.text$mn:0000DEA0 var_4           = dword ptr -4
.text$mn:0000DEA0
.text$mn:0000DEA0                 push    ebp
.text$mn:0000DEA1                 mov     ebp, esp
.text$mn:0000DEA3                 push    ecx
.text$mn:0000DEA4                 mov     [ebp+var_4], ecx
.text$mn:0000DEA7                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:0000DEAC                 mov     esp, ebp
.text$mn:0000DEAE                 pop     ebp
.text$mn:0000DEAF                 retn
.text$mn:0000DEAF ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:0000DEAF
.text$mn:0000DEAF _text$mn        ends
.text$mn:0000DEAF
.text$mn:0000DEB0 ; ===========================================================================
.text$mn:0000DEB0
.text$mn:0000DEB0 ; Segment type: Pure code
.text$mn:0000DEB0 ; Segment permissions: Read/Execute
.text$mn:0000DEB0 _text$mn        segment para public 'CODE' use32
.text$mn:0000DEB0                 assume cs:_text$mn
.text$mn:0000DEB0                 ;org 0DEB0h
.text$mn:0000DEB0 ; COMDAT (pick any)
.text$mn:0000DEB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DEB0
.text$mn:0000DEB0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DEB0
.text$mn:0000DEB0 ; Attributes: bp-based frame
.text$mn:0000DEB0
.text$mn:0000DEB0 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:0000DEB0                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:0000DEB0 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:0000DEB0                                         ; DATA XREF: .rdata:00010E70o
.text$mn:0000DEB0
.text$mn:0000DEB0 var_4           = dword ptr -4
.text$mn:0000DEB0
.text$mn:0000DEB0                 push    ebp
.text$mn:0000DEB1                 mov     ebp, esp
.text$mn:0000DEB3                 push    ecx
.text$mn:0000DEB4                 mov     [ebp+var_4], ecx
.text$mn:0000DEB7                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:0000DEBC                 mov     esp, ebp
.text$mn:0000DEBE                 pop     ebp
.text$mn:0000DEBF                 retn
.text$mn:0000DEBF ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:0000DEBF
.text$mn:0000DEBF _text$mn        ends
.text$mn:0000DEBF
.text$mn:0000DEC0 ; ===========================================================================
.text$mn:0000DEC0
.text$mn:0000DEC0 ; Segment type: Pure code
.text$mn:0000DEC0 ; Segment permissions: Read/Execute
.text$mn:0000DEC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000DEC0                 assume cs:_text$mn
.text$mn:0000DEC0                 ;org 0DEC0h
.text$mn:0000DEC0 ; COMDAT (pick any)
.text$mn:0000DEC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DEC0
.text$mn:0000DEC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DEC0
.text$mn:0000DEC0 ; Attributes: bp-based frame
.text$mn:0000DEC0
.text$mn:0000DEC0 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:0000DEC0                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:0000DEC0 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:0000DEC0                                         ; DATA XREF: .rdata:00010EB0o
.text$mn:0000DEC0
.text$mn:0000DEC0 var_4           = dword ptr -4
.text$mn:0000DEC0
.text$mn:0000DEC0                 push    ebp
.text$mn:0000DEC1                 mov     ebp, esp
.text$mn:0000DEC3                 push    ecx
.text$mn:0000DEC4                 mov     [ebp+var_4], ecx
.text$mn:0000DEC7                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:0000DECC                 mov     esp, ebp
.text$mn:0000DECE                 pop     ebp
.text$mn:0000DECF                 retn
.text$mn:0000DECF ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:0000DECF
.text$mn:0000DECF _text$mn        ends
.text$mn:0000DECF
.text$mn:0000DED0 ; ===========================================================================
.text$mn:0000DED0
.text$mn:0000DED0 ; Segment type: Pure code
.text$mn:0000DED0 ; Segment permissions: Read/Execute
.text$mn:0000DED0 _text$mn        segment para public 'CODE' use32
.text$mn:0000DED0                 assume cs:_text$mn
.text$mn:0000DED0                 ;org 0DED0h
.text$mn:0000DED0 ; COMDAT (pick any)
.text$mn:0000DED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DED0
.text$mn:0000DED0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000DED0
.text$mn:0000DED0 ; Attributes: bp-based frame
.text$mn:0000DED0
.text$mn:0000DED0 ; public: void __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::push_back(class FunctionParser * &&)
.text$mn:0000DED0                 public ?push_back@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEX$$QAPAVFunctionParser@@@Z
.text$mn:0000DED0 ?push_back@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEX$$QAPAVFunctionParser@@@Z proc near
.text$mn:0000DED0                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+5CDp
.text$mn:0000DED0                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+86Fp ...
.text$mn:0000DED0
.text$mn:0000DED0 var_C           = dword ptr -0Ch
.text$mn:0000DED0 var_8           = dword ptr -8
.text$mn:0000DED0 var_2           = byte ptr -2
.text$mn:0000DED0 var_1           = byte ptr -1
.text$mn:0000DED0 arg_0           = dword ptr  8
.text$mn:0000DED0
.text$mn:0000DED0                 push    ebp
.text$mn:0000DED1                 mov     ebp, esp
.text$mn:0000DED3                 sub     esp, 0Ch
.text$mn:0000DED6                 mov     [ebp+var_8], ecx
.text$mn:0000DED9                 mov     eax, [ebp+arg_0]
.text$mn:0000DEDC                 push    eax
.text$mn:0000DEDD                 call    ??$addressof@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@AAPAV1@@Z ; std::addressof<FunctionParser *>(FunctionParser * &)
.text$mn:0000DEE2                 add     esp, 4
.text$mn:0000DEE5                 push    eax
.text$mn:0000DEE6                 mov     ecx, [ebp+var_8]
.text$mn:0000DEE9                 call    ?_Inside@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBE_NPBQAVFunctionParser@@@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Inside(FunctionParser * const *)
.text$mn:0000DEEE                 movzx   ecx, al
.text$mn:0000DEF1                 test    ecx, ecx
.text$mn:0000DEF3                 jz      loc_DF80
.text$mn:0000DEF9                 mov     edx, [ebp+arg_0]
.text$mn:0000DEFC                 push    edx
.text$mn:0000DEFD                 call    ??$addressof@PAVFunctionParser@@@std@@YAPAPAVFunctionParser@@AAPAV1@@Z ; std::addressof<FunctionParser *>(FunctionParser * &)
.text$mn:0000DF02                 add     esp, 4
.text$mn:0000DF05                 mov     ecx, [ebp+var_8]
.text$mn:0000DF08                 sub     eax, [ecx+4]
.text$mn:0000DF0B                 sar     eax, 2
.text$mn:0000DF0E                 mov     [ebp+var_C], eax
.text$mn:0000DF11                 mov     edx, [ebp+var_8]
.text$mn:0000DF14                 mov     eax, [ebp+var_8]
.text$mn:0000DF17                 mov     ecx, [edx+8]
.text$mn:0000DF1A                 cmp     ecx, [eax+0Ch]
.text$mn:0000DF1D                 jnz     short loc_DF29
.text$mn:0000DF1F                 push    1
.text$mn:0000DF21                 mov     ecx, [ebp+var_8]
.text$mn:0000DF24                 call    ?_Reserve@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)
.text$mn:0000DF29
.text$mn:0000DF29 loc_DF29:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+4Dj
.text$mn:0000DF29                 mov     edx, [ebp+var_8]
.text$mn:0000DF2C                 mov     eax, [edx+8]
.text$mn:0000DF2F                 push    eax
.text$mn:0000DF30                 mov     ecx, [ebp+var_8]
.text$mn:0000DF33                 mov     edx, [ecx+8]
.text$mn:0000DF36                 push    edx
.text$mn:0000DF37                 mov     ecx, [ebp+var_8]
.text$mn:0000DF3A                 call    ?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)
.text$mn:0000DF3F                 mov     eax, [ebp+var_8]
.text$mn:0000DF42                 mov     ecx, [eax+4]
.text$mn:0000DF45                 mov     edx, [ebp+var_C]
.text$mn:0000DF48                 lea     eax, [ecx+edx*4]
.text$mn:0000DF4B                 push    eax
.text$mn:0000DF4C                 call    ??$forward@PAVFunctionParser@@@std@@YA$$QAPAVFunctionParser@@AAPAV1@@Z ; std::forward<FunctionParser *>(FunctionParser * &)
.text$mn:0000DF51                 add     esp, 4
.text$mn:0000DF54                 push    eax             ; int
.text$mn:0000DF55                 mov     ecx, [ebp+var_8]
.text$mn:0000DF58                 mov     edx, [ecx+8]
.text$mn:0000DF5B                 push    edx             ; void *
.text$mn:0000DF5C                 lea     eax, [ebp+var_1]
.text$mn:0000DF5F                 push    eax
.text$mn:0000DF60                 mov     ecx, [ebp+var_8]
.text$mn:0000DF63                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:0000DF68                 mov     ecx, eax
.text$mn:0000DF6A                 call    ??$construct@PAVFunctionParser@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z ; std::_Wrap_alloc<std::allocator<FunctionParser *>>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)
.text$mn:0000DF6F                 mov     ecx, [ebp+var_8]
.text$mn:0000DF72                 mov     edx, [ecx+8]
.text$mn:0000DF75                 add     edx, 4
.text$mn:0000DF78                 mov     eax, [ebp+var_8]
.text$mn:0000DF7B                 mov     [eax+8], edx
.text$mn:0000DF7E                 jmp     short loc_DFE4
.text$mn:0000DF80 ; ---------------------------------------------------------------------------
.text$mn:0000DF80
.text$mn:0000DF80 loc_DF80:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+23j
.text$mn:0000DF80                 mov     ecx, [ebp+var_8]
.text$mn:0000DF83                 mov     edx, [ebp+var_8]
.text$mn:0000DF86                 mov     eax, [ecx+8]
.text$mn:0000DF89                 cmp     eax, [edx+0Ch]
.text$mn:0000DF8C                 jnz     short loc_DF98
.text$mn:0000DF8E                 push    1
.text$mn:0000DF90                 mov     ecx, [ebp+var_8]
.text$mn:0000DF93                 call    ?_Reserve@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Reserve(uint)
.text$mn:0000DF98
.text$mn:0000DF98 loc_DF98:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+BCj
.text$mn:0000DF98                 mov     ecx, [ebp+var_8]
.text$mn:0000DF9B                 mov     edx, [ecx+8]
.text$mn:0000DF9E                 push    edx
.text$mn:0000DF9F                 mov     eax, [ebp+var_8]
.text$mn:0000DFA2                 mov     ecx, [eax+8]
.text$mn:0000DFA5                 push    ecx
.text$mn:0000DFA6                 mov     ecx, [ebp+var_8]
.text$mn:0000DFA9                 call    ?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Orphan_range(FunctionParser * *,FunctionParser * *)
.text$mn:0000DFAE                 mov     edx, [ebp+arg_0]
.text$mn:0000DFB1                 push    edx
.text$mn:0000DFB2                 call    ??$forward@PAVFunctionParser@@@std@@YA$$QAPAVFunctionParser@@AAPAV1@@Z ; std::forward<FunctionParser *>(FunctionParser * &)
.text$mn:0000DFB7                 add     esp, 4
.text$mn:0000DFBA                 push    eax             ; int
.text$mn:0000DFBB                 mov     eax, [ebp+var_8]
.text$mn:0000DFBE                 mov     ecx, [eax+8]
.text$mn:0000DFC1                 push    ecx             ; void *
.text$mn:0000DFC2                 lea     edx, [ebp+var_2]
.text$mn:0000DFC5                 push    edx
.text$mn:0000DFC6                 mov     ecx, [ebp+var_8]
.text$mn:0000DFC9                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<FunctionParser *,std::allocator<FunctionParser *>>>::_Getal(void)
.text$mn:0000DFCE                 mov     ecx, eax
.text$mn:0000DFD0                 call    ??$construct@PAVFunctionParser@@PAV1@@?$_Wrap_alloc@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z ; std::_Wrap_alloc<std::allocator<FunctionParser *>>::construct<FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * &&)
.text$mn:0000DFD5                 mov     eax, [ebp+var_8]
.text$mn:0000DFD8                 mov     ecx, [eax+8]
.text$mn:0000DFDB                 add     ecx, 4
.text$mn:0000DFDE                 mov     edx, [ebp+var_8]
.text$mn:0000DFE1                 mov     [edx+8], ecx
.text$mn:0000DFE4
.text$mn:0000DFE4 loc_DFE4:                               ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::push_back(FunctionParser * &&)+AEj
.text$mn:0000DFE4                 mov     esp, ebp
.text$mn:0000DFE6                 pop     ebp
.text$mn:0000DFE7                 retn    4
.text$mn:0000DFE7 ?push_back@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAEX$$QAPAVFunctionParser@@@Z endp
.text$mn:0000DFE7
.text$mn:0000DFE7 ; ---------------------------------------------------------------------------
.text$mn:0000DFEA                 align 4
.text$mn:0000DFEA _text$mn        ends
.text$mn:0000DFEA
.text$mn:0000DFEC ; ===========================================================================
.text$mn:0000DFEC
.text$mn:0000DFEC ; Segment type: Pure code
.text$mn:0000DFEC ; Segment permissions: Read/Execute
.text$mn:0000DFEC _text$mn        segment para public 'CODE' use32
.text$mn:0000DFEC                 assume cs:_text$mn
.text$mn:0000DFEC                 ;org 0DFECh
.text$mn:0000DFEC ; COMDAT (pick any)
.text$mn:0000DFEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000DFEC
.text$mn:0000DFEC ; =============== S U B R O U T I N E =======================================
.text$mn:0000DFEC
.text$mn:0000DFEC ; Attributes: bp-based frame
.text$mn:0000DFEC
.text$mn:0000DFEC ; public: void __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::push_back(struct std::pair<int, int> &&)
.text$mn:0000DFEC                 public ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z
.text$mn:0000DFEC ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z proc near
.text$mn:0000DFEC                                         ; CODE XREF: FunctionParser::getCommentZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint,ScintillaEditView * *)+DFp
.text$mn:0000DFEC                                         ; FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+29p ...
.text$mn:0000DFEC
.text$mn:0000DFEC var_C           = dword ptr -0Ch
.text$mn:0000DFEC var_8           = dword ptr -8
.text$mn:0000DFEC var_2           = byte ptr -2
.text$mn:0000DFEC var_1           = byte ptr -1
.text$mn:0000DFEC arg_0           = dword ptr  8
.text$mn:0000DFEC
.text$mn:0000DFEC                 push    ebp
.text$mn:0000DFED                 mov     ebp, esp
.text$mn:0000DFEF                 sub     esp, 0Ch
.text$mn:0000DFF2                 mov     [ebp+var_8], ecx
.text$mn:0000DFF5                 mov     eax, [ebp+arg_0]
.text$mn:0000DFF8                 push    eax
.text$mn:0000DFF9                 call    ??$addressof@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@AAU10@@Z ; std::addressof<std::pair<int,int>>(std::pair<int,int> &)
.text$mn:0000DFFE                 add     esp, 4
.text$mn:0000E001                 push    eax
.text$mn:0000E002                 mov     ecx, [ebp+var_8]
.text$mn:0000E005                 call    ?_Inside@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBE_NPBU?$pair@HH@2@@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Inside(std::pair<int,int> const *)
.text$mn:0000E00A                 movzx   ecx, al
.text$mn:0000E00D                 test    ecx, ecx
.text$mn:0000E00F                 jz      loc_E09C
.text$mn:0000E015                 mov     edx, [ebp+arg_0]
.text$mn:0000E018                 push    edx
.text$mn:0000E019                 call    ??$addressof@U?$pair@HH@std@@@std@@YAPAU?$pair@HH@0@AAU10@@Z ; std::addressof<std::pair<int,int>>(std::pair<int,int> &)
.text$mn:0000E01E                 add     esp, 4
.text$mn:0000E021                 mov     ecx, [ebp+var_8]
.text$mn:0000E024                 sub     eax, [ecx+4]
.text$mn:0000E027                 sar     eax, 3
.text$mn:0000E02A                 mov     [ebp+var_C], eax
.text$mn:0000E02D                 mov     edx, [ebp+var_8]
.text$mn:0000E030                 mov     eax, [ebp+var_8]
.text$mn:0000E033                 mov     ecx, [edx+8]
.text$mn:0000E036                 cmp     ecx, [eax+0Ch]
.text$mn:0000E039                 jnz     short loc_E045
.text$mn:0000E03B                 push    1
.text$mn:0000E03D                 mov     ecx, [ebp+var_8]
.text$mn:0000E040                 call    ?_Reserve@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)
.text$mn:0000E045
.text$mn:0000E045 loc_E045:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+4Dj
.text$mn:0000E045                 mov     edx, [ebp+var_8]
.text$mn:0000E048                 mov     eax, [edx+8]
.text$mn:0000E04B                 push    eax
.text$mn:0000E04C                 mov     ecx, [ebp+var_8]
.text$mn:0000E04F                 mov     edx, [ecx+8]
.text$mn:0000E052                 push    edx
.text$mn:0000E053                 mov     ecx, [ebp+var_8]
.text$mn:0000E056                 call    ?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)
.text$mn:0000E05B                 mov     eax, [ebp+var_8]
.text$mn:0000E05E                 mov     ecx, [eax+4]
.text$mn:0000E061                 mov     edx, [ebp+var_C]
.text$mn:0000E064                 lea     eax, [ecx+edx*8]
.text$mn:0000E067                 push    eax
.text$mn:0000E068                 call    ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z ; std::forward<std::pair<int,int>>(std::pair<int,int> &)
.text$mn:0000E06D                 add     esp, 4
.text$mn:0000E070                 push    eax             ; int
.text$mn:0000E071                 mov     ecx, [ebp+var_8]
.text$mn:0000E074                 mov     edx, [ecx+8]
.text$mn:0000E077                 push    edx             ; void *
.text$mn:0000E078                 lea     eax, [ebp+var_1]
.text$mn:0000E07B                 push    eax
.text$mn:0000E07C                 mov     ecx, [ebp+var_8]
.text$mn:0000E07F                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:0000E084                 mov     ecx, eax
.text$mn:0000E086                 call    ??$construct@U?$pair@HH@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)
.text$mn:0000E08B                 mov     ecx, [ebp+var_8]
.text$mn:0000E08E                 mov     edx, [ecx+8]
.text$mn:0000E091                 add     edx, 8
.text$mn:0000E094                 mov     eax, [ebp+var_8]
.text$mn:0000E097                 mov     [eax+8], edx
.text$mn:0000E09A                 jmp     short loc_E100
.text$mn:0000E09C ; ---------------------------------------------------------------------------
.text$mn:0000E09C
.text$mn:0000E09C loc_E09C:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+23j
.text$mn:0000E09C                 mov     ecx, [ebp+var_8]
.text$mn:0000E09F                 mov     edx, [ebp+var_8]
.text$mn:0000E0A2                 mov     eax, [ecx+8]
.text$mn:0000E0A5                 cmp     eax, [edx+0Ch]
.text$mn:0000E0A8                 jnz     short loc_E0B4
.text$mn:0000E0AA                 push    1
.text$mn:0000E0AC                 mov     ecx, [ebp+var_8]
.text$mn:0000E0AF                 call    ?_Reserve@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Reserve(uint)
.text$mn:0000E0B4
.text$mn:0000E0B4 loc_E0B4:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+BCj
.text$mn:0000E0B4                 mov     ecx, [ebp+var_8]
.text$mn:0000E0B7                 mov     edx, [ecx+8]
.text$mn:0000E0BA                 push    edx
.text$mn:0000E0BB                 mov     eax, [ebp+var_8]
.text$mn:0000E0BE                 mov     ecx, [eax+8]
.text$mn:0000E0C1                 push    ecx
.text$mn:0000E0C2                 mov     ecx, [ebp+var_8]
.text$mn:0000E0C5                 call    ?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Orphan_range(std::pair<int,int> *,std::pair<int,int> *)
.text$mn:0000E0CA                 mov     edx, [ebp+arg_0]
.text$mn:0000E0CD                 push    edx
.text$mn:0000E0CE                 call    ??$forward@U?$pair@HH@std@@@std@@YA$$QAU?$pair@HH@0@AAU10@@Z ; std::forward<std::pair<int,int>>(std::pair<int,int> &)
.text$mn:0000E0D3                 add     esp, 4
.text$mn:0000E0D6                 push    eax             ; int
.text$mn:0000E0D7                 mov     eax, [ebp+var_8]
.text$mn:0000E0DA                 mov     ecx, [eax+8]
.text$mn:0000E0DD                 push    ecx             ; void *
.text$mn:0000E0DE                 lea     edx, [ebp+var_2]
.text$mn:0000E0E1                 push    edx
.text$mn:0000E0E2                 mov     ecx, [ebp+var_8]
.text$mn:0000E0E5                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<int,int>,std::allocator<std::pair<int,int>>>>::_Getal(void)
.text$mn:0000E0EA                 mov     ecx, eax
.text$mn:0000E0EC                 call    ??$construct@U?$pair@HH@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::pair<int,int>>>::construct<std::pair<int,int>,std::pair<int,int>>(std::pair<int,int> *,std::pair<int,int> &&)
.text$mn:0000E0F1                 mov     eax, [ebp+var_8]
.text$mn:0000E0F4                 mov     ecx, [eax+8]
.text$mn:0000E0F7                 add     ecx, 8
.text$mn:0000E0FA                 mov     edx, [ebp+var_8]
.text$mn:0000E0FD                 mov     [edx+8], ecx
.text$mn:0000E100
.text$mn:0000E100 loc_E100:                               ; CODE XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::push_back(std::pair<int,int> &&)+AEj
.text$mn:0000E100                 mov     esp, ebp
.text$mn:0000E102                 pop     ebp
.text$mn:0000E103                 retn    4
.text$mn:0000E103 ?push_back@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAEX$$QAU?$pair@HH@2@@Z endp
.text$mn:0000E103
.text$mn:0000E103 ; ---------------------------------------------------------------------------
.text$mn:0000E106                 align 4
.text$mn:0000E106 _text$mn        ends
.text$mn:0000E106
.text$mn:0000E108 ; ===========================================================================
.text$mn:0000E108
.text$mn:0000E108 ; Segment type: Pure code
.text$mn:0000E108 ; Segment permissions: Read/Execute
.text$mn:0000E108 _text$mn        segment para public 'CODE' use32
.text$mn:0000E108                 assume cs:_text$mn
.text$mn:0000E108                 ;org 0E108h
.text$mn:0000E108 ; COMDAT (pick any)
.text$mn:0000E108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E108
.text$mn:0000E108 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E108
.text$mn:0000E108 ; Attributes: bp-based frame
.text$mn:0000E108
.text$mn:0000E108 ; public: void __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::push_back(struct AssociationInfo &&)
.text$mn:0000E108                 public ?push_back@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEX$$QAUAssociationInfo@@@Z
.text$mn:0000E108 ?push_back@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEX$$QAUAssociationInfo@@@Z proc near
.text$mn:0000E108                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+CDDp
.text$mn:0000E108
.text$mn:0000E108 var_C           = dword ptr -0Ch
.text$mn:0000E108 var_8           = dword ptr -8
.text$mn:0000E108 var_2           = byte ptr -2
.text$mn:0000E108 var_1           = byte ptr -1
.text$mn:0000E108 arg_0           = dword ptr  8
.text$mn:0000E108
.text$mn:0000E108                 push    ebp
.text$mn:0000E109                 mov     ebp, esp
.text$mn:0000E10B                 sub     esp, 0Ch
.text$mn:0000E10E                 mov     [ebp+var_8], ecx
.text$mn:0000E111                 mov     eax, [ebp+arg_0]
.text$mn:0000E114                 push    eax
.text$mn:0000E115                 call    ??$addressof@UAssociationInfo@@@std@@YAPAUAssociationInfo@@AAU1@@Z ; std::addressof<AssociationInfo>(AssociationInfo &)
.text$mn:0000E11A                 add     esp, 4
.text$mn:0000E11D                 push    eax
.text$mn:0000E11E                 mov     ecx, [ebp+var_8]
.text$mn:0000E121                 call    ?_Inside@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBE_NPBUAssociationInfo@@@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Inside(AssociationInfo const *)
.text$mn:0000E126                 movzx   ecx, al
.text$mn:0000E129                 test    ecx, ecx
.text$mn:0000E12B                 jz      loc_E1B8
.text$mn:0000E131                 mov     edx, [ebp+arg_0]
.text$mn:0000E134                 push    edx
.text$mn:0000E135                 call    ??$addressof@UAssociationInfo@@@std@@YAPAUAssociationInfo@@AAU1@@Z ; std::addressof<AssociationInfo>(AssociationInfo &)
.text$mn:0000E13A                 add     esp, 4
.text$mn:0000E13D                 mov     ecx, [ebp+var_8]
.text$mn:0000E140                 sub     eax, [ecx+4]
.text$mn:0000E143                 sar     eax, 6
.text$mn:0000E146                 mov     [ebp+var_C], eax
.text$mn:0000E149                 mov     edx, [ebp+var_8]
.text$mn:0000E14C                 mov     eax, [ebp+var_8]
.text$mn:0000E14F                 mov     ecx, [edx+8]
.text$mn:0000E152                 cmp     ecx, [eax+0Ch]
.text$mn:0000E155                 jnz     short loc_E161
.text$mn:0000E157                 push    1
.text$mn:0000E159                 mov     ecx, [ebp+var_8]
.text$mn:0000E15C                 call    ?_Reserve@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)
.text$mn:0000E161
.text$mn:0000E161 loc_E161:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+4Dj
.text$mn:0000E161                 mov     edx, [ebp+var_8]
.text$mn:0000E164                 mov     eax, [edx+8]
.text$mn:0000E167                 push    eax
.text$mn:0000E168                 mov     ecx, [ebp+var_8]
.text$mn:0000E16B                 mov     edx, [ecx+8]
.text$mn:0000E16E                 push    edx
.text$mn:0000E16F                 mov     ecx, [ebp+var_8]
.text$mn:0000E172                 call    ?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *)
.text$mn:0000E177                 mov     eax, [ebp+var_C]
.text$mn:0000E17A                 shl     eax, 6
.text$mn:0000E17D                 mov     ecx, [ebp+var_8]
.text$mn:0000E180                 add     eax, [ecx+4]
.text$mn:0000E183                 push    eax
.text$mn:0000E184                 call    ??$forward@UAssociationInfo@@@std@@YA$$QAUAssociationInfo@@AAU1@@Z ; std::forward<AssociationInfo>(AssociationInfo &)
.text$mn:0000E189                 add     esp, 4
.text$mn:0000E18C                 push    eax             ; int
.text$mn:0000E18D                 mov     edx, [ebp+var_8]
.text$mn:0000E190                 mov     eax, [edx+8]
.text$mn:0000E193                 push    eax             ; void *
.text$mn:0000E194                 lea     ecx, [ebp+var_1]
.text$mn:0000E197                 push    ecx
.text$mn:0000E198                 mov     ecx, [ebp+var_8]
.text$mn:0000E19B                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:0000E1A0                 mov     ecx, eax
.text$mn:0000E1A2                 call    ??$construct@UAssociationInfo@@U1@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)
.text$mn:0000E1A7                 mov     edx, [ebp+var_8]
.text$mn:0000E1AA                 mov     eax, [edx+8]
.text$mn:0000E1AD                 add     eax, 40h ; '@'
.text$mn:0000E1B0                 mov     ecx, [ebp+var_8]
.text$mn:0000E1B3                 mov     [ecx+8], eax
.text$mn:0000E1B6                 jmp     short loc_E21C
.text$mn:0000E1B8 ; ---------------------------------------------------------------------------
.text$mn:0000E1B8
.text$mn:0000E1B8 loc_E1B8:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+23j
.text$mn:0000E1B8                 mov     edx, [ebp+var_8]
.text$mn:0000E1BB                 mov     eax, [ebp+var_8]
.text$mn:0000E1BE                 mov     ecx, [edx+8]
.text$mn:0000E1C1                 cmp     ecx, [eax+0Ch]
.text$mn:0000E1C4                 jnz     short loc_E1D0
.text$mn:0000E1C6                 push    1
.text$mn:0000E1C8                 mov     ecx, [ebp+var_8]
.text$mn:0000E1CB                 call    ?_Reserve@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Reserve(uint)
.text$mn:0000E1D0
.text$mn:0000E1D0 loc_E1D0:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+BCj
.text$mn:0000E1D0                 mov     edx, [ebp+var_8]
.text$mn:0000E1D3                 mov     eax, [edx+8]
.text$mn:0000E1D6                 push    eax
.text$mn:0000E1D7                 mov     ecx, [ebp+var_8]
.text$mn:0000E1DA                 mov     edx, [ecx+8]
.text$mn:0000E1DD                 push    edx
.text$mn:0000E1DE                 mov     ecx, [ebp+var_8]
.text$mn:0000E1E1                 call    ?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::_Orphan_range(AssociationInfo *,AssociationInfo *)
.text$mn:0000E1E6                 mov     eax, [ebp+arg_0]
.text$mn:0000E1E9                 push    eax
.text$mn:0000E1EA                 call    ??$forward@UAssociationInfo@@@std@@YA$$QAUAssociationInfo@@AAU1@@Z ; std::forward<AssociationInfo>(AssociationInfo &)
.text$mn:0000E1EF                 add     esp, 4
.text$mn:0000E1F2                 push    eax             ; int
.text$mn:0000E1F3                 mov     ecx, [ebp+var_8]
.text$mn:0000E1F6                 mov     edx, [ecx+8]
.text$mn:0000E1F9                 push    edx             ; void *
.text$mn:0000E1FA                 lea     eax, [ebp+var_2]
.text$mn:0000E1FD                 push    eax
.text$mn:0000E1FE                 mov     ecx, [ebp+var_8]
.text$mn:0000E201                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<AssociationInfo,std::allocator<AssociationInfo>>>::_Getal(void)
.text$mn:0000E206                 mov     ecx, eax
.text$mn:0000E208                 call    ??$construct@UAssociationInfo@@U1@@?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<AssociationInfo>>::construct<AssociationInfo,AssociationInfo>(AssociationInfo *,AssociationInfo &&)
.text$mn:0000E20D                 mov     ecx, [ebp+var_8]
.text$mn:0000E210                 mov     edx, [ecx+8]
.text$mn:0000E213                 add     edx, 40h ; '@'
.text$mn:0000E216                 mov     eax, [ebp+var_8]
.text$mn:0000E219                 mov     [eax+8], edx
.text$mn:0000E21C
.text$mn:0000E21C loc_E21C:                               ; CODE XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::push_back(AssociationInfo &&)+AEj
.text$mn:0000E21C                 mov     esp, ebp
.text$mn:0000E21E                 pop     ebp
.text$mn:0000E21F                 retn    4
.text$mn:0000E21F ?push_back@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAEX$$QAUAssociationInfo@@@Z endp
.text$mn:0000E21F
.text$mn:0000E21F ; ---------------------------------------------------------------------------
.text$mn:0000E222                 align 4
.text$mn:0000E222 _text$mn        ends
.text$mn:0000E222
.text$mn:0000E224 ; ===========================================================================
.text$mn:0000E224
.text$mn:0000E224 ; Segment type: Pure code
.text$mn:0000E224 ; Segment permissions: Read/Execute
.text$mn:0000E224 _text$mn        segment para public 'CODE' use32
.text$mn:0000E224                 assume cs:_text$mn
.text$mn:0000E224                 ;org 0E224h
.text$mn:0000E224 ; COMDAT (pick any)
.text$mn:0000E224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E224
.text$mn:0000E224 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E224
.text$mn:0000E224 ; Attributes: bp-based frame
.text$mn:0000E224
.text$mn:0000E224 ; public: void __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::push_back(struct foundInfo const &)
.text$mn:0000E224                 public ?push_back@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEXABUfoundInfo@@@Z
.text$mn:0000E224 ?push_back@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEXABUfoundInfo@@@Z proc near
.text$mn:0000E224                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+3E6p
.text$mn:0000E224                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+3F7p
.text$mn:0000E224
.text$mn:0000E224 var_C           = dword ptr -0Ch
.text$mn:0000E224 var_8           = dword ptr -8
.text$mn:0000E224 var_2           = byte ptr -2
.text$mn:0000E224 var_1           = byte ptr -1
.text$mn:0000E224 arg_0           = dword ptr  8
.text$mn:0000E224
.text$mn:0000E224                 push    ebp
.text$mn:0000E225                 mov     ebp, esp
.text$mn:0000E227                 sub     esp, 0Ch
.text$mn:0000E22A                 mov     [ebp+var_8], ecx
.text$mn:0000E22D                 mov     eax, [ebp+arg_0]
.text$mn:0000E230                 push    eax
.text$mn:0000E231                 call    ??$addressof@$$CBUfoundInfo@@@std@@YAPBUfoundInfo@@ABU1@@Z ; std::addressof<foundInfo const>(foundInfo const &)
.text$mn:0000E236                 add     esp, 4
.text$mn:0000E239                 push    eax
.text$mn:0000E23A                 mov     ecx, [ebp+var_8]
.text$mn:0000E23D                 call    ?_Inside@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBE_NPBUfoundInfo@@@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Inside(foundInfo const *)
.text$mn:0000E242                 movzx   ecx, al
.text$mn:0000E245                 test    ecx, ecx
.text$mn:0000E247                 jz      short loc_E2C7
.text$mn:0000E249                 mov     edx, [ebp+arg_0]
.text$mn:0000E24C                 push    edx
.text$mn:0000E24D                 call    ??$addressof@$$CBUfoundInfo@@@std@@YAPBUfoundInfo@@ABU1@@Z ; std::addressof<foundInfo const>(foundInfo const &)
.text$mn:0000E252                 add     esp, 4
.text$mn:0000E255                 mov     ecx, [ebp+var_8]
.text$mn:0000E258                 sub     eax, [ecx+4]
.text$mn:0000E25B                 sar     eax, 6
.text$mn:0000E25E                 mov     [ebp+var_C], eax
.text$mn:0000E261                 mov     edx, [ebp+var_8]
.text$mn:0000E264                 mov     eax, [ebp+var_8]
.text$mn:0000E267                 mov     ecx, [edx+8]
.text$mn:0000E26A                 cmp     ecx, [eax+0Ch]
.text$mn:0000E26D                 jnz     short loc_E279
.text$mn:0000E26F                 push    1
.text$mn:0000E271                 mov     ecx, [ebp+var_8]
.text$mn:0000E274                 call    ?_Reserve@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)
.text$mn:0000E279
.text$mn:0000E279 loc_E279:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+49j
.text$mn:0000E279                 mov     edx, [ebp+var_8]
.text$mn:0000E27C                 mov     eax, [edx+8]
.text$mn:0000E27F                 push    eax
.text$mn:0000E280                 mov     ecx, [ebp+var_8]
.text$mn:0000E283                 mov     edx, [ecx+8]
.text$mn:0000E286                 push    edx
.text$mn:0000E287                 mov     ecx, [ebp+var_8]
.text$mn:0000E28A                 call    ?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *)
.text$mn:0000E28F                 mov     eax, [ebp+var_C]
.text$mn:0000E292                 shl     eax, 6
.text$mn:0000E295                 mov     ecx, [ebp+var_8]
.text$mn:0000E298                 add     eax, [ecx+4]
.text$mn:0000E29B                 push    eax             ; int
.text$mn:0000E29C                 mov     edx, [ebp+var_8]
.text$mn:0000E29F                 mov     eax, [edx+8]
.text$mn:0000E2A2                 push    eax             ; void *
.text$mn:0000E2A3                 lea     ecx, [ebp+var_1]
.text$mn:0000E2A6                 push    ecx
.text$mn:0000E2A7                 mov     ecx, [ebp+var_8]
.text$mn:0000E2AA                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:0000E2AF                 mov     ecx, eax
.text$mn:0000E2B1                 call    ??$construct@UfoundInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo &>(foundInfo *,foundInfo &)
.text$mn:0000E2B6                 mov     edx, [ebp+var_8]
.text$mn:0000E2B9                 mov     eax, [edx+8]
.text$mn:0000E2BC                 add     eax, 40h ; '@'
.text$mn:0000E2BF                 mov     ecx, [ebp+var_8]
.text$mn:0000E2C2                 mov     [ecx+8], eax
.text$mn:0000E2C5                 jmp     short loc_E322
.text$mn:0000E2C7 ; ---------------------------------------------------------------------------
.text$mn:0000E2C7
.text$mn:0000E2C7 loc_E2C7:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+23j
.text$mn:0000E2C7                 mov     edx, [ebp+var_8]
.text$mn:0000E2CA                 mov     eax, [ebp+var_8]
.text$mn:0000E2CD                 mov     ecx, [edx+8]
.text$mn:0000E2D0                 cmp     ecx, [eax+0Ch]
.text$mn:0000E2D3                 jnz     short loc_E2DF
.text$mn:0000E2D5                 push    1
.text$mn:0000E2D7                 mov     ecx, [ebp+var_8]
.text$mn:0000E2DA                 call    ?_Reserve@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)
.text$mn:0000E2DF
.text$mn:0000E2DF loc_E2DF:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+AFj
.text$mn:0000E2DF                 mov     edx, [ebp+var_8]
.text$mn:0000E2E2                 mov     eax, [edx+8]
.text$mn:0000E2E5                 push    eax
.text$mn:0000E2E6                 mov     ecx, [ebp+var_8]
.text$mn:0000E2E9                 mov     edx, [ecx+8]
.text$mn:0000E2EC                 push    edx
.text$mn:0000E2ED                 mov     ecx, [ebp+var_8]
.text$mn:0000E2F0                 call    ?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z ; std::vector<foundInfo,std::allocator<foundInfo>>::_Orphan_range(foundInfo *,foundInfo *)
.text$mn:0000E2F5                 mov     eax, [ebp+arg_0]
.text$mn:0000E2F8                 push    eax             ; int
.text$mn:0000E2F9                 mov     ecx, [ebp+var_8]
.text$mn:0000E2FC                 mov     edx, [ecx+8]
.text$mn:0000E2FF                 push    edx             ; void *
.text$mn:0000E300                 lea     eax, [ebp+var_2]
.text$mn:0000E303                 push    eax
.text$mn:0000E304                 mov     ecx, [ebp+var_8]
.text$mn:0000E307                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<foundInfo,std::allocator<foundInfo>>>::_Getal(void)
.text$mn:0000E30C                 mov     ecx, eax
.text$mn:0000E30E                 call    ??$construct@UfoundInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@std@@QAEXPAUfoundInfo@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<foundInfo>>::construct<foundInfo,foundInfo const &>(foundInfo *,foundInfo const &)
.text$mn:0000E313                 mov     ecx, [ebp+var_8]
.text$mn:0000E316                 mov     edx, [ecx+8]
.text$mn:0000E319                 add     edx, 40h ; '@'
.text$mn:0000E31C                 mov     eax, [ebp+var_8]
.text$mn:0000E31F                 mov     [eax+8], edx
.text$mn:0000E322
.text$mn:0000E322 loc_E322:                               ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::push_back(foundInfo const &)+A1j
.text$mn:0000E322                 mov     esp, ebp
.text$mn:0000E324                 pop     ebp
.text$mn:0000E325                 retn    4
.text$mn:0000E325 ?push_back@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QAEXABUfoundInfo@@@Z endp
.text$mn:0000E325
.text$mn:0000E325 _text$mn        ends
.text$mn:0000E325
.text$mn:0000E328 ; ===========================================================================
.text$mn:0000E328
.text$mn:0000E328 ; Segment type: Pure code
.text$mn:0000E328 ; Segment permissions: Read/Execute
.text$mn:0000E328 _text$mn        segment para public 'CODE' use32
.text$mn:0000E328                 assume cs:_text$mn
.text$mn:0000E328                 ;org 0E328h
.text$mn:0000E328 ; COMDAT (pick any)
.text$mn:0000E328                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E328
.text$mn:0000E328 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E328
.text$mn:0000E328 ; Attributes: bp-based frame
.text$mn:0000E328
.text$mn:0000E328 ; public: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::push_back(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:0000E328                 public ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000E328 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000E328                                         ; CODE XREF: FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+18Ep
.text$mn:0000E328                                         ; FunctionParsersManager::getZonePaserParameters(TiXmlNode *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+290p ...
.text$mn:0000E328
.text$mn:0000E328 var_C           = dword ptr -0Ch
.text$mn:0000E328 var_8           = dword ptr -8
.text$mn:0000E328 var_2           = byte ptr -2
.text$mn:0000E328 var_1           = byte ptr -1
.text$mn:0000E328 arg_0           = dword ptr  8
.text$mn:0000E328
.text$mn:0000E328                 push    ebp
.text$mn:0000E329                 mov     ebp, esp
.text$mn:0000E32B                 sub     esp, 0Ch
.text$mn:0000E32E                 mov     [ebp+var_8], ecx
.text$mn:0000E331                 mov     eax, [ebp+arg_0]
.text$mn:0000E334                 push    eax
.text$mn:0000E335                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E33A                 add     esp, 4
.text$mn:0000E33D                 push    eax
.text$mn:0000E33E                 mov     ecx, [ebp+var_8]
.text$mn:0000E341                 call    ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)
.text$mn:0000E346                 movzx   ecx, al
.text$mn:0000E349                 test    ecx, ecx
.text$mn:0000E34B                 jz      loc_E3DB
.text$mn:0000E351                 mov     edx, [ebp+arg_0]
.text$mn:0000E354                 push    edx
.text$mn:0000E355                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E35A                 add     esp, 4
.text$mn:0000E35D                 mov     ecx, [ebp+var_8]
.text$mn:0000E360                 sub     eax, [ecx+4]
.text$mn:0000E363                 cdq
.text$mn:0000E364                 mov     ecx, 1Ch
.text$mn:0000E369                 idiv    ecx
.text$mn:0000E36B                 mov     [ebp+var_C], eax
.text$mn:0000E36E                 mov     edx, [ebp+var_8]
.text$mn:0000E371                 mov     eax, [ebp+var_8]
.text$mn:0000E374                 mov     ecx, [edx+8]
.text$mn:0000E377                 cmp     ecx, [eax+0Ch]
.text$mn:0000E37A                 jnz     short loc_E386
.text$mn:0000E37C                 push    1
.text$mn:0000E37E                 mov     ecx, [ebp+var_8]
.text$mn:0000E381                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000E386
.text$mn:0000E386 loc_E386:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+52j
.text$mn:0000E386                 mov     edx, [ebp+var_8]
.text$mn:0000E389                 mov     eax, [edx+8]
.text$mn:0000E38C                 push    eax
.text$mn:0000E38D                 mov     ecx, [ebp+var_8]
.text$mn:0000E390                 mov     edx, [ecx+8]
.text$mn:0000E393                 push    edx
.text$mn:0000E394                 mov     ecx, [ebp+var_8]
.text$mn:0000E397                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000E39C                 imul    eax, [ebp+var_C], 1Ch
.text$mn:0000E3A0                 mov     ecx, [ebp+var_8]
.text$mn:0000E3A3                 add     eax, [ecx+4]
.text$mn:0000E3A6                 push    eax
.text$mn:0000E3A7                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E3AC                 add     esp, 4
.text$mn:0000E3AF                 push    eax             ; int
.text$mn:0000E3B0                 mov     edx, [ebp+var_8]
.text$mn:0000E3B3                 mov     eax, [edx+8]
.text$mn:0000E3B6                 push    eax             ; void *
.text$mn:0000E3B7                 lea     ecx, [ebp+var_1]
.text$mn:0000E3BA                 push    ecx
.text$mn:0000E3BB                 mov     ecx, [ebp+var_8]
.text$mn:0000E3BE                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000E3C3                 mov     ecx, eax
.text$mn:0000E3C5                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000E3CA                 mov     edx, [ebp+var_8]
.text$mn:0000E3CD                 mov     eax, [edx+8]
.text$mn:0000E3D0                 add     eax, 1Ch
.text$mn:0000E3D3                 mov     ecx, [ebp+var_8]
.text$mn:0000E3D6                 mov     [ecx+8], eax
.text$mn:0000E3D9                 jmp     short loc_E43F
.text$mn:0000E3DB ; ---------------------------------------------------------------------------
.text$mn:0000E3DB
.text$mn:0000E3DB loc_E3DB:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+23j
.text$mn:0000E3DB                 mov     edx, [ebp+var_8]
.text$mn:0000E3DE                 mov     eax, [ebp+var_8]
.text$mn:0000E3E1                 mov     ecx, [edx+8]
.text$mn:0000E3E4                 cmp     ecx, [eax+0Ch]
.text$mn:0000E3E7                 jnz     short loc_E3F3
.text$mn:0000E3E9                 push    1
.text$mn:0000E3EB                 mov     ecx, [ebp+var_8]
.text$mn:0000E3EE                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:0000E3F3
.text$mn:0000E3F3 loc_E3F3:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+BFj
.text$mn:0000E3F3                 mov     edx, [ebp+var_8]
.text$mn:0000E3F6                 mov     eax, [edx+8]
.text$mn:0000E3F9                 push    eax
.text$mn:0000E3FA                 mov     ecx, [ebp+var_8]
.text$mn:0000E3FD                 mov     edx, [ecx+8]
.text$mn:0000E400                 push    edx
.text$mn:0000E401                 mov     ecx, [ebp+var_8]
.text$mn:0000E404                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000E409                 mov     eax, [ebp+arg_0]
.text$mn:0000E40C                 push    eax
.text$mn:0000E40D                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000E412                 add     esp, 4
.text$mn:0000E415                 push    eax             ; int
.text$mn:0000E416                 mov     ecx, [ebp+var_8]
.text$mn:0000E419                 mov     edx, [ecx+8]
.text$mn:0000E41C                 push    edx             ; void *
.text$mn:0000E41D                 lea     eax, [ebp+var_2]
.text$mn:0000E420                 push    eax
.text$mn:0000E421                 mov     ecx, [ebp+var_8]
.text$mn:0000E424                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000E429                 mov     ecx, eax
.text$mn:0000E42B                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000E430                 mov     ecx, [ebp+var_8]
.text$mn:0000E433                 mov     edx, [ecx+8]
.text$mn:0000E436                 add     edx, 1Ch
.text$mn:0000E439                 mov     eax, [ebp+var_8]
.text$mn:0000E43C                 mov     [eax+8], edx
.text$mn:0000E43F
.text$mn:0000E43F loc_E43F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+B1j
.text$mn:0000E43F                 mov     esp, ebp
.text$mn:0000E441                 pop     ebp
.text$mn:0000E442                 retn    4
.text$mn:0000E442 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:0000E442
.text$mn:0000E442 ; ---------------------------------------------------------------------------
.text$mn:0000E445                 align 4
.text$mn:0000E445 _text$mn        ends
.text$mn:0000E445
.text$mn:0000E448 ; ===========================================================================
.text$mn:0000E448
.text$mn:0000E448 ; Segment type: Pure code
.text$mn:0000E448 ; Segment permissions: Read/Execute
.text$mn:0000E448 _text$mn        segment para public 'CODE' use32
.text$mn:0000E448                 assume cs:_text$mn
.text$mn:0000E448                 ;org 0E448h
.text$mn:0000E448 ; COMDAT (pick any)
.text$mn:0000E448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E448
.text$mn:0000E448 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E448
.text$mn:0000E448 ; Attributes: bp-based frame
.text$mn:0000E448
.text$mn:0000E448 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000E448                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:0000E448 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:0000E448                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+5Bp
.text$mn:0000E448
.text$mn:0000E448 var_10          = dword ptr -10h
.text$mn:0000E448 var_C           = dword ptr -0Ch
.text$mn:0000E448 var_8           = dword ptr -8
.text$mn:0000E448 var_4           = dword ptr -4
.text$mn:0000E448 arg_0           = dword ptr  8
.text$mn:0000E448 arg_4           = dword ptr  0Ch
.text$mn:0000E448 arg_8           = dword ptr  10h
.text$mn:0000E448 arg_C           = dword ptr  14h
.text$mn:0000E448 arg_10          = dword ptr  18h
.text$mn:0000E448
.text$mn:0000E448                 push    ebp
.text$mn:0000E449                 mov     ebp, esp
.text$mn:0000E44B                 sub     esp, 10h
.text$mn:0000E44E                 mov     [ebp+var_4], ecx
.text$mn:0000E451                 mov     eax, [ebp+var_4]
.text$mn:0000E454                 mov     ecx, [eax+14h]
.text$mn:0000E457                 cmp     ecx, [ebp+arg_0]
.text$mn:0000E45A                 jb      short loc_E469
.text$mn:0000E45C                 mov     ecx, [ebp+arg_8]
.text$mn:0000E45F                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000E464                 cmp     eax, [ebp+arg_C]
.text$mn:0000E467                 jnb     short loc_E471
.text$mn:0000E469
.text$mn:0000E469 loc_E469:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+12j
.text$mn:0000E469                 mov     ecx, [ebp+var_4]
.text$mn:0000E46C                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000E471
.text$mn:0000E471 loc_E471:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+1Fj
.text$mn:0000E471                 mov     edx, [ebp+var_4]
.text$mn:0000E474                 mov     eax, [edx+14h]
.text$mn:0000E477                 sub     eax, [ebp+arg_0]
.text$mn:0000E47A                 cmp     eax, [ebp+arg_4]
.text$mn:0000E47D                 jnb     short loc_E48B
.text$mn:0000E47F                 mov     ecx, [ebp+var_4]
.text$mn:0000E482                 mov     edx, [ecx+14h]
.text$mn:0000E485                 sub     edx, [ebp+arg_0]
.text$mn:0000E488                 mov     [ebp+arg_4], edx
.text$mn:0000E48B
.text$mn:0000E48B loc_E48B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+35j
.text$mn:0000E48B                 mov     ecx, [ebp+arg_8]
.text$mn:0000E48E                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000E493                 sub     eax, [ebp+arg_C]
.text$mn:0000E496                 mov     [ebp+var_10], eax
.text$mn:0000E499                 mov     eax, [ebp+var_10]
.text$mn:0000E49C                 cmp     eax, [ebp+arg_10]
.text$mn:0000E49F                 jnb     short loc_E4A7
.text$mn:0000E4A1                 mov     ecx, [ebp+var_10]
.text$mn:0000E4A4                 mov     [ebp+arg_10], ecx
.text$mn:0000E4A7
.text$mn:0000E4A7 loc_E4A7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+57j
.text$mn:0000E4A7                 or      edx, 0FFFFFFFFh
.text$mn:0000E4AA                 sub     edx, [ebp+arg_10]
.text$mn:0000E4AD                 mov     eax, [ebp+var_4]
.text$mn:0000E4B0                 mov     ecx, [eax+14h]
.text$mn:0000E4B3                 sub     ecx, [ebp+arg_4]
.text$mn:0000E4B6                 cmp     edx, ecx
.text$mn:0000E4B8                 ja      short loc_E4C2
.text$mn:0000E4BA                 mov     ecx, [ebp+var_4]
.text$mn:0000E4BD                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000E4C2
.text$mn:0000E4C2 loc_E4C2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+70j
.text$mn:0000E4C2                 mov     edx, [ebp+var_4]
.text$mn:0000E4C5                 mov     eax, [edx+14h]
.text$mn:0000E4C8                 sub     eax, [ebp+arg_4]
.text$mn:0000E4CB                 sub     eax, [ebp+arg_0]
.text$mn:0000E4CE                 mov     [ebp+var_8], eax
.text$mn:0000E4D1                 mov     ecx, [ebp+var_4]
.text$mn:0000E4D4                 mov     edx, [ecx+14h]
.text$mn:0000E4D7                 add     edx, [ebp+arg_10]
.text$mn:0000E4DA                 sub     edx, [ebp+arg_4]
.text$mn:0000E4DD                 mov     [ebp+var_C], edx
.text$mn:0000E4E0                 mov     eax, [ebp+var_4]
.text$mn:0000E4E3                 mov     ecx, [eax+14h]
.text$mn:0000E4E6                 cmp     ecx, [ebp+var_C]
.text$mn:0000E4E9                 jnb     short loc_E4F9
.text$mn:0000E4EB                 push    0
.text$mn:0000E4ED                 mov     edx, [ebp+var_C]
.text$mn:0000E4F0                 push    edx
.text$mn:0000E4F1                 mov     ecx, [ebp+var_4]
.text$mn:0000E4F4                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000E4F9
.text$mn:0000E4F9 loc_E4F9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+A1j
.text$mn:0000E4F9                 mov     eax, [ebp+var_4]
.text$mn:0000E4FC                 cmp     eax, [ebp+arg_8]
.text$mn:0000E4FF                 jz      short loc_E566
.text$mn:0000E501                 mov     ecx, [ebp+var_8]
.text$mn:0000E504                 push    ecx             ; int
.text$mn:0000E505                 mov     ecx, [ebp+var_4]
.text$mn:0000E508                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E50D                 mov     edx, [ebp+arg_0]
.text$mn:0000E510                 lea     eax, [eax+edx*2]
.text$mn:0000E513                 mov     ecx, [ebp+arg_4]
.text$mn:0000E516                 lea     edx, [eax+ecx*2]
.text$mn:0000E519                 push    edx             ; Src
.text$mn:0000E51A                 mov     ecx, [ebp+var_4]
.text$mn:0000E51D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E522                 mov     ecx, [ebp+arg_0]
.text$mn:0000E525                 lea     edx, [eax+ecx*2]
.text$mn:0000E528                 mov     eax, [ebp+arg_10]
.text$mn:0000E52B                 lea     ecx, [edx+eax*2]
.text$mn:0000E52E                 push    ecx             ; Dst
.text$mn:0000E52F                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E534                 add     esp, 0Ch
.text$mn:0000E537                 mov     edx, [ebp+arg_10]
.text$mn:0000E53A                 push    edx             ; int
.text$mn:0000E53B                 mov     ecx, [ebp+arg_8]
.text$mn:0000E53E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E543                 mov     ecx, [ebp+arg_C]
.text$mn:0000E546                 lea     edx, [eax+ecx*2]
.text$mn:0000E549                 push    edx             ; Src
.text$mn:0000E54A                 mov     ecx, [ebp+var_4]
.text$mn:0000E54D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E552                 mov     ecx, [ebp+arg_0]
.text$mn:0000E555                 lea     edx, [eax+ecx*2]
.text$mn:0000E558                 push    edx             ; Dst
.text$mn:0000E559                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000E55E                 add     esp, 0Ch
.text$mn:0000E561                 jmp     loc_E74F
.text$mn:0000E566 ; ---------------------------------------------------------------------------
.text$mn:0000E566
.text$mn:0000E566 loc_E566:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+B7j
.text$mn:0000E566                 mov     eax, [ebp+arg_10]
.text$mn:0000E569                 cmp     eax, [ebp+arg_4]
.text$mn:0000E56C                 ja      short loc_E5D3
.text$mn:0000E56E                 mov     ecx, [ebp+arg_10]
.text$mn:0000E571                 push    ecx             ; int
.text$mn:0000E572                 mov     ecx, [ebp+var_4]
.text$mn:0000E575                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E57A                 mov     edx, [ebp+arg_C]
.text$mn:0000E57D                 lea     eax, [eax+edx*2]
.text$mn:0000E580                 push    eax             ; Src
.text$mn:0000E581                 mov     ecx, [ebp+var_4]
.text$mn:0000E584                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E589                 mov     ecx, [ebp+arg_0]
.text$mn:0000E58C                 lea     edx, [eax+ecx*2]
.text$mn:0000E58F                 push    edx             ; Dst
.text$mn:0000E590                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E595                 add     esp, 0Ch
.text$mn:0000E598                 mov     eax, [ebp+var_8]
.text$mn:0000E59B                 push    eax             ; int
.text$mn:0000E59C                 mov     ecx, [ebp+var_4]
.text$mn:0000E59F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E5A4                 mov     ecx, [ebp+arg_0]
.text$mn:0000E5A7                 lea     edx, [eax+ecx*2]
.text$mn:0000E5AA                 mov     eax, [ebp+arg_4]
.text$mn:0000E5AD                 lea     ecx, [edx+eax*2]
.text$mn:0000E5B0                 push    ecx             ; Src
.text$mn:0000E5B1                 mov     ecx, [ebp+var_4]
.text$mn:0000E5B4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E5B9                 mov     edx, [ebp+arg_0]
.text$mn:0000E5BC                 lea     eax, [eax+edx*2]
.text$mn:0000E5BF                 mov     ecx, [ebp+arg_10]
.text$mn:0000E5C2                 lea     edx, [eax+ecx*2]
.text$mn:0000E5C5                 push    edx             ; Dst
.text$mn:0000E5C6                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E5CB                 add     esp, 0Ch
.text$mn:0000E5CE                 jmp     loc_E74F
.text$mn:0000E5D3 ; ---------------------------------------------------------------------------
.text$mn:0000E5D3
.text$mn:0000E5D3 loc_E5D3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+124j
.text$mn:0000E5D3                 mov     eax, [ebp+arg_C]
.text$mn:0000E5D6                 cmp     eax, [ebp+arg_0]
.text$mn:0000E5D9                 ja      short loc_E640
.text$mn:0000E5DB                 mov     ecx, [ebp+var_8]
.text$mn:0000E5DE                 push    ecx             ; int
.text$mn:0000E5DF                 mov     ecx, [ebp+var_4]
.text$mn:0000E5E2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E5E7                 mov     edx, [ebp+arg_0]
.text$mn:0000E5EA                 lea     eax, [eax+edx*2]
.text$mn:0000E5ED                 mov     ecx, [ebp+arg_4]
.text$mn:0000E5F0                 lea     edx, [eax+ecx*2]
.text$mn:0000E5F3                 push    edx             ; Src
.text$mn:0000E5F4                 mov     ecx, [ebp+var_4]
.text$mn:0000E5F7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E5FC                 mov     ecx, [ebp+arg_0]
.text$mn:0000E5FF                 lea     edx, [eax+ecx*2]
.text$mn:0000E602                 mov     eax, [ebp+arg_10]
.text$mn:0000E605                 lea     ecx, [edx+eax*2]
.text$mn:0000E608                 push    ecx             ; Dst
.text$mn:0000E609                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E60E                 add     esp, 0Ch
.text$mn:0000E611                 mov     edx, [ebp+arg_10]
.text$mn:0000E614                 push    edx             ; int
.text$mn:0000E615                 mov     ecx, [ebp+var_4]
.text$mn:0000E618                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E61D                 mov     ecx, [ebp+arg_C]
.text$mn:0000E620                 lea     edx, [eax+ecx*2]
.text$mn:0000E623                 push    edx             ; Src
.text$mn:0000E624                 mov     ecx, [ebp+var_4]
.text$mn:0000E627                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E62C                 mov     ecx, [ebp+arg_0]
.text$mn:0000E62F                 lea     edx, [eax+ecx*2]
.text$mn:0000E632                 push    edx             ; Dst
.text$mn:0000E633                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E638                 add     esp, 0Ch
.text$mn:0000E63B                 jmp     loc_E74F
.text$mn:0000E640 ; ---------------------------------------------------------------------------
.text$mn:0000E640
.text$mn:0000E640 loc_E640:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+191j
.text$mn:0000E640                 mov     eax, [ebp+arg_0]
.text$mn:0000E643                 add     eax, [ebp+arg_4]
.text$mn:0000E646                 cmp     eax, [ebp+arg_C]
.text$mn:0000E649                 ja      short loc_E6B6
.text$mn:0000E64B                 mov     ecx, [ebp+var_8]
.text$mn:0000E64E                 push    ecx             ; int
.text$mn:0000E64F                 mov     ecx, [ebp+var_4]
.text$mn:0000E652                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E657                 mov     edx, [ebp+arg_0]
.text$mn:0000E65A                 lea     eax, [eax+edx*2]
.text$mn:0000E65D                 mov     ecx, [ebp+arg_4]
.text$mn:0000E660                 lea     edx, [eax+ecx*2]
.text$mn:0000E663                 push    edx             ; Src
.text$mn:0000E664                 mov     ecx, [ebp+var_4]
.text$mn:0000E667                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E66C                 mov     ecx, [ebp+arg_0]
.text$mn:0000E66F                 lea     edx, [eax+ecx*2]
.text$mn:0000E672                 mov     eax, [ebp+arg_10]
.text$mn:0000E675                 lea     ecx, [edx+eax*2]
.text$mn:0000E678                 push    ecx             ; Dst
.text$mn:0000E679                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E67E                 add     esp, 0Ch
.text$mn:0000E681                 mov     edx, [ebp+arg_10]
.text$mn:0000E684                 push    edx             ; int
.text$mn:0000E685                 mov     ecx, [ebp+var_4]
.text$mn:0000E688                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E68D                 mov     ecx, [ebp+arg_C]
.text$mn:0000E690                 add     ecx, [ebp+arg_10]
.text$mn:0000E693                 sub     ecx, [ebp+arg_4]
.text$mn:0000E696                 lea     edx, [eax+ecx*2]
.text$mn:0000E699                 push    edx             ; Src
.text$mn:0000E69A                 mov     ecx, [ebp+var_4]
.text$mn:0000E69D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E6A2                 mov     ecx, [ebp+arg_0]
.text$mn:0000E6A5                 lea     edx, [eax+ecx*2]
.text$mn:0000E6A8                 push    edx             ; Dst
.text$mn:0000E6A9                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E6AE                 add     esp, 0Ch
.text$mn:0000E6B1                 jmp     loc_E74F
.text$mn:0000E6B6 ; ---------------------------------------------------------------------------
.text$mn:0000E6B6
.text$mn:0000E6B6 loc_E6B6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+201j
.text$mn:0000E6B6                 mov     eax, [ebp+arg_4]
.text$mn:0000E6B9                 push    eax             ; int
.text$mn:0000E6BA                 mov     ecx, [ebp+var_4]
.text$mn:0000E6BD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E6C2                 mov     ecx, [ebp+arg_C]
.text$mn:0000E6C5                 lea     edx, [eax+ecx*2]
.text$mn:0000E6C8                 push    edx             ; Src
.text$mn:0000E6C9                 mov     ecx, [ebp+var_4]
.text$mn:0000E6CC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E6D1                 mov     ecx, [ebp+arg_0]
.text$mn:0000E6D4                 lea     edx, [eax+ecx*2]
.text$mn:0000E6D7                 push    edx             ; Dst
.text$mn:0000E6D8                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E6DD                 add     esp, 0Ch
.text$mn:0000E6E0                 mov     eax, [ebp+var_8]
.text$mn:0000E6E3                 push    eax             ; int
.text$mn:0000E6E4                 mov     ecx, [ebp+var_4]
.text$mn:0000E6E7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E6EC                 mov     ecx, [ebp+arg_0]
.text$mn:0000E6EF                 lea     edx, [eax+ecx*2]
.text$mn:0000E6F2                 mov     eax, [ebp+arg_4]
.text$mn:0000E6F5                 lea     ecx, [edx+eax*2]
.text$mn:0000E6F8                 push    ecx             ; Src
.text$mn:0000E6F9                 mov     ecx, [ebp+var_4]
.text$mn:0000E6FC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E701                 mov     edx, [ebp+arg_0]
.text$mn:0000E704                 lea     eax, [eax+edx*2]
.text$mn:0000E707                 mov     ecx, [ebp+arg_10]
.text$mn:0000E70A                 lea     edx, [eax+ecx*2]
.text$mn:0000E70D                 push    edx             ; Dst
.text$mn:0000E70E                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E713                 add     esp, 0Ch
.text$mn:0000E716                 mov     eax, [ebp+arg_10]
.text$mn:0000E719                 sub     eax, [ebp+arg_4]
.text$mn:0000E71C                 push    eax             ; int
.text$mn:0000E71D                 mov     ecx, [ebp+var_4]
.text$mn:0000E720                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E725                 mov     ecx, [ebp+arg_C]
.text$mn:0000E728                 lea     edx, [eax+ecx*2]
.text$mn:0000E72B                 mov     eax, [ebp+arg_10]
.text$mn:0000E72E                 lea     ecx, [edx+eax*2]
.text$mn:0000E731                 push    ecx             ; Src
.text$mn:0000E732                 mov     ecx, [ebp+var_4]
.text$mn:0000E735                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E73A                 mov     edx, [ebp+arg_0]
.text$mn:0000E73D                 lea     eax, [eax+edx*2]
.text$mn:0000E740                 mov     ecx, [ebp+arg_4]
.text$mn:0000E743                 lea     edx, [eax+ecx*2]
.text$mn:0000E746                 push    edx             ; Dst
.text$mn:0000E747                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E74C                 add     esp, 0Ch
.text$mn:0000E74F
.text$mn:0000E74F loc_E74F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+119j
.text$mn:0000E74F                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+186j ...
.text$mn:0000E74F                 mov     eax, [ebp+var_C]
.text$mn:0000E752                 push    eax
.text$mn:0000E753                 mov     ecx, [ebp+var_4]
.text$mn:0000E756                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000E75B                 mov     eax, [ebp+var_4]
.text$mn:0000E75E                 mov     esp, ebp
.text$mn:0000E760                 pop     ebp
.text$mn:0000E761                 retn    14h
.text$mn:0000E761 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:0000E761
.text$mn:0000E761 _text$mn        ends
.text$mn:0000E761
.text$mn:0000E764 ; ===========================================================================
.text$mn:0000E764
.text$mn:0000E764 ; Segment type: Pure code
.text$mn:0000E764 ; Segment permissions: Read/Execute
.text$mn:0000E764 _text$mn        segment para public 'CODE' use32
.text$mn:0000E764                 assume cs:_text$mn
.text$mn:0000E764                 ;org 0E764h
.text$mn:0000E764 ; COMDAT (pick any)
.text$mn:0000E764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E764
.text$mn:0000E764 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E764
.text$mn:0000E764 ; Attributes: bp-based frame
.text$mn:0000E764
.text$mn:0000E764 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, void *Src, int)
.text$mn:0000E764                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z
.text$mn:0000E764 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z proc near
.text$mn:0000E764                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+201p
.text$mn:0000E764
.text$mn:0000E764 var_C           = dword ptr -0Ch
.text$mn:0000E764 var_8           = dword ptr -8
.text$mn:0000E764 var_4           = dword ptr -4
.text$mn:0000E764 arg_0           = dword ptr  8
.text$mn:0000E764 arg_4           = dword ptr  0Ch
.text$mn:0000E764 Src             = dword ptr  10h
.text$mn:0000E764 arg_C           = dword ptr  14h
.text$mn:0000E764
.text$mn:0000E764                 push    ebp
.text$mn:0000E765                 mov     ebp, esp
.text$mn:0000E767                 sub     esp, 0Ch
.text$mn:0000E76A                 mov     [ebp+var_4], ecx
.text$mn:0000E76D                 cmp     [ebp+arg_C], 0
.text$mn:0000E771                 jz      short loc_E789
.text$mn:0000E773                 push    5A9h            ; unsigned int
.text$mn:0000E778                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000E77D                 mov     eax, [ebp+Src]
.text$mn:0000E780                 push    eax             ; int
.text$mn:0000E781                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000E786                 add     esp, 0Ch
.text$mn:0000E789
.text$mn:0000E789 loc_E789:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+Dj
.text$mn:0000E789                 mov     ecx, [ebp+Src]
.text$mn:0000E78C                 push    ecx
.text$mn:0000E78D                 mov     ecx, [ebp+var_4]
.text$mn:0000E790                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000E795                 movzx   edx, al
.text$mn:0000E798                 test    edx, edx
.text$mn:0000E79A                 jz      short loc_E7C9
.text$mn:0000E79C                 mov     eax, [ebp+arg_C]
.text$mn:0000E79F                 push    eax
.text$mn:0000E7A0                 mov     ecx, [ebp+var_4]
.text$mn:0000E7A3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E7A8                 mov     ecx, [ebp+Src]
.text$mn:0000E7AB                 sub     ecx, eax
.text$mn:0000E7AD                 sar     ecx, 1
.text$mn:0000E7AF                 push    ecx
.text$mn:0000E7B0                 mov     edx, [ebp+var_4]
.text$mn:0000E7B3                 push    edx
.text$mn:0000E7B4                 mov     eax, [ebp+arg_4]
.text$mn:0000E7B7                 push    eax
.text$mn:0000E7B8                 mov     ecx, [ebp+arg_0]
.text$mn:0000E7BB                 push    ecx
.text$mn:0000E7BC                 mov     ecx, [ebp+var_4]
.text$mn:0000E7BF                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000E7C4                 jmp     loc_E8FE
.text$mn:0000E7C9 ; ---------------------------------------------------------------------------
.text$mn:0000E7C9
.text$mn:0000E7C9 loc_E7C9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+36j
.text$mn:0000E7C9                 mov     edx, [ebp+var_4]
.text$mn:0000E7CC                 mov     eax, [edx+14h]
.text$mn:0000E7CF                 cmp     eax, [ebp+arg_0]
.text$mn:0000E7D2                 jnb     short loc_E7DC
.text$mn:0000E7D4                 mov     ecx, [ebp+var_4]
.text$mn:0000E7D7                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000E7DC
.text$mn:0000E7DC loc_E7DC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+6Ej
.text$mn:0000E7DC                 mov     ecx, [ebp+var_4]
.text$mn:0000E7DF                 mov     edx, [ecx+14h]
.text$mn:0000E7E2                 sub     edx, [ebp+arg_0]
.text$mn:0000E7E5                 cmp     edx, [ebp+arg_4]
.text$mn:0000E7E8                 jnb     short loc_E7F6
.text$mn:0000E7EA                 mov     eax, [ebp+var_4]
.text$mn:0000E7ED                 mov     ecx, [eax+14h]
.text$mn:0000E7F0                 sub     ecx, [ebp+arg_0]
.text$mn:0000E7F3                 mov     [ebp+arg_4], ecx
.text$mn:0000E7F6
.text$mn:0000E7F6 loc_E7F6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+84j
.text$mn:0000E7F6                 or      edx, 0FFFFFFFFh
.text$mn:0000E7F9                 sub     edx, [ebp+arg_C]
.text$mn:0000E7FC                 mov     eax, [ebp+var_4]
.text$mn:0000E7FF                 mov     ecx, [eax+14h]
.text$mn:0000E802                 sub     ecx, [ebp+arg_4]
.text$mn:0000E805                 cmp     edx, ecx
.text$mn:0000E807                 ja      short loc_E811
.text$mn:0000E809                 mov     ecx, [ebp+var_4]
.text$mn:0000E80C                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000E811
.text$mn:0000E811 loc_E811:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+A3j
.text$mn:0000E811                 mov     edx, [ebp+var_4]
.text$mn:0000E814                 mov     eax, [edx+14h]
.text$mn:0000E817                 sub     eax, [ebp+arg_4]
.text$mn:0000E81A                 sub     eax, [ebp+arg_0]
.text$mn:0000E81D                 mov     [ebp+var_8], eax
.text$mn:0000E820                 mov     ecx, [ebp+arg_C]
.text$mn:0000E823                 cmp     ecx, [ebp+arg_4]
.text$mn:0000E826                 jnb     short loc_E85E
.text$mn:0000E828                 mov     edx, [ebp+var_8]
.text$mn:0000E82B                 push    edx             ; int
.text$mn:0000E82C                 mov     ecx, [ebp+var_4]
.text$mn:0000E82F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E834                 mov     ecx, [ebp+arg_0]
.text$mn:0000E837                 lea     edx, [eax+ecx*2]
.text$mn:0000E83A                 mov     eax, [ebp+arg_4]
.text$mn:0000E83D                 lea     ecx, [edx+eax*2]
.text$mn:0000E840                 push    ecx             ; Src
.text$mn:0000E841                 mov     ecx, [ebp+var_4]
.text$mn:0000E844                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E849                 mov     edx, [ebp+arg_0]
.text$mn:0000E84C                 lea     eax, [eax+edx*2]
.text$mn:0000E84F                 mov     ecx, [ebp+arg_C]
.text$mn:0000E852                 lea     edx, [eax+ecx*2]
.text$mn:0000E855                 push    edx             ; Dst
.text$mn:0000E856                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E85B                 add     esp, 0Ch
.text$mn:0000E85E
.text$mn:0000E85E loc_E85E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+C2j
.text$mn:0000E85E                 cmp     [ebp+arg_C], 0
.text$mn:0000E862                 ja      short loc_E86E
.text$mn:0000E864                 cmp     [ebp+arg_4], 0
.text$mn:0000E868                 jbe     loc_E8FB
.text$mn:0000E86E
.text$mn:0000E86E loc_E86E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+FEj
.text$mn:0000E86E                 mov     eax, [ebp+var_4]
.text$mn:0000E871                 mov     ecx, [eax+14h]
.text$mn:0000E874                 add     ecx, [ebp+arg_C]
.text$mn:0000E877                 sub     ecx, [ebp+arg_4]
.text$mn:0000E87A                 mov     [ebp+var_C], ecx
.text$mn:0000E87D                 push    0
.text$mn:0000E87F                 mov     edx, [ebp+var_C]
.text$mn:0000E882                 push    edx
.text$mn:0000E883                 mov     ecx, [ebp+var_4]
.text$mn:0000E886                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000E88B                 movzx   eax, al
.text$mn:0000E88E                 test    eax, eax
.text$mn:0000E890                 jz      short loc_E8FB
.text$mn:0000E892                 mov     ecx, [ebp+arg_4]
.text$mn:0000E895                 cmp     ecx, [ebp+arg_C]
.text$mn:0000E898                 jnb     short loc_E8D0
.text$mn:0000E89A                 mov     edx, [ebp+var_8]
.text$mn:0000E89D                 push    edx             ; int
.text$mn:0000E89E                 mov     ecx, [ebp+var_4]
.text$mn:0000E8A1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E8A6                 mov     ecx, [ebp+arg_0]
.text$mn:0000E8A9                 lea     edx, [eax+ecx*2]
.text$mn:0000E8AC                 mov     eax, [ebp+arg_4]
.text$mn:0000E8AF                 lea     ecx, [edx+eax*2]
.text$mn:0000E8B2                 push    ecx             ; Src
.text$mn:0000E8B3                 mov     ecx, [ebp+var_4]
.text$mn:0000E8B6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E8BB                 mov     edx, [ebp+arg_0]
.text$mn:0000E8BE                 lea     eax, [eax+edx*2]
.text$mn:0000E8C1                 mov     ecx, [ebp+arg_C]
.text$mn:0000E8C4                 lea     edx, [eax+ecx*2]
.text$mn:0000E8C7                 push    edx             ; Dst
.text$mn:0000E8C8                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000E8CD                 add     esp, 0Ch
.text$mn:0000E8D0
.text$mn:0000E8D0 loc_E8D0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+134j
.text$mn:0000E8D0                 mov     eax, [ebp+arg_C]
.text$mn:0000E8D3                 push    eax             ; int
.text$mn:0000E8D4                 mov     ecx, [ebp+Src]
.text$mn:0000E8D7                 push    ecx             ; Src
.text$mn:0000E8D8                 mov     ecx, [ebp+var_4]
.text$mn:0000E8DB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000E8E0                 mov     edx, [ebp+arg_0]
.text$mn:0000E8E3                 lea     eax, [eax+edx*2]
.text$mn:0000E8E6                 push    eax             ; Dst
.text$mn:0000E8E7                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:0000E8EC                 add     esp, 0Ch
.text$mn:0000E8EF                 mov     ecx, [ebp+var_C]
.text$mn:0000E8F2                 push    ecx
.text$mn:0000E8F3                 mov     ecx, [ebp+var_4]
.text$mn:0000E8F6                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000E8FB
.text$mn:0000E8FB loc_E8FB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+104j
.text$mn:0000E8FB                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+12Cj
.text$mn:0000E8FB                 mov     eax, [ebp+var_4]
.text$mn:0000E8FE
.text$mn:0000E8FE loc_E8FE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+60j
.text$mn:0000E8FE                 mov     esp, ebp
.text$mn:0000E900                 pop     ebp
.text$mn:0000E901                 retn    10h
.text$mn:0000E901 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z endp
.text$mn:0000E901
.text$mn:0000E901 _text$mn        ends
.text$mn:0000E901
.text$mn:0000E904 ; ===========================================================================
.text$mn:0000E904
.text$mn:0000E904 ; Segment type: Pure code
.text$mn:0000E904 ; Segment permissions: Read/Execute
.text$mn:0000E904 _text$mn        segment para public 'CODE' use32
.text$mn:0000E904                 assume cs:_text$mn
.text$mn:0000E904                 ;org 0E904h
.text$mn:0000E904 ; COMDAT (pick any)
.text$mn:0000E904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000E904
.text$mn:0000E904 ; =============== S U B R O U T I N E =======================================
.text$mn:0000E904
.text$mn:0000E904 ; Attributes: bp-based frame
.text$mn:0000E904
.text$mn:0000E904 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:0000E904                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000E904 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$mn:0000E904                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+E0p
.text$mn:0000E904
.text$mn:0000E904 var_AC          = byte ptr -0ACh
.text$mn:0000E904 var_A0          = byte ptr -0A0h
.text$mn:0000E904 var_94          = dword ptr -94h
.text$mn:0000E904 var_90          = dword ptr -90h
.text$mn:0000E904 var_8C          = dword ptr -8Ch
.text$mn:0000E904 var_88          = dword ptr -88h
.text$mn:0000E904 var_84          = dword ptr -84h
.text$mn:0000E904 var_80          = dword ptr -80h
.text$mn:0000E904 var_7C          = dword ptr -7Ch
.text$mn:0000E904 var_78          = dword ptr -78h
.text$mn:0000E904 var_74          = dword ptr -74h
.text$mn:0000E904 var_70          = dword ptr -70h
.text$mn:0000E904 var_6C          = dword ptr -6Ch
.text$mn:0000E904 var_68          = dword ptr -68h
.text$mn:0000E904 var_64          = dword ptr -64h
.text$mn:0000E904 var_60          = dword ptr -60h
.text$mn:0000E904 var_5C          = dword ptr -5Ch
.text$mn:0000E904 var_58          = dword ptr -58h
.text$mn:0000E904 var_54          = dword ptr -54h
.text$mn:0000E904 var_50          = dword ptr -50h
.text$mn:0000E904 var_4C          = dword ptr -4Ch
.text$mn:0000E904 var_48          = dword ptr -48h
.text$mn:0000E904 var_44          = dword ptr -44h
.text$mn:0000E904 var_40          = dword ptr -40h
.text$mn:0000E904 var_3C          = dword ptr -3Ch
.text$mn:0000E904 var_38          = dword ptr -38h
.text$mn:0000E904 var_34          = dword ptr -34h
.text$mn:0000E904 var_30          = dword ptr -30h
.text$mn:0000E904 var_2C          = dword ptr -2Ch
.text$mn:0000E904 var_28          = dword ptr -28h
.text$mn:0000E904 var_24          = dword ptr -24h
.text$mn:0000E904 var_20          = dword ptr -20h
.text$mn:0000E904 var_1C          = dword ptr -1Ch
.text$mn:0000E904 var_18          = dword ptr -18h
.text$mn:0000E904 var_14          = dword ptr -14h
.text$mn:0000E904 var_10          = dword ptr -10h
.text$mn:0000E904 var_C           = dword ptr -0Ch
.text$mn:0000E904 var_4           = dword ptr -4
.text$mn:0000E904 arg_0           = byte ptr  8
.text$mn:0000E904 arg_C           = byte ptr  14h
.text$mn:0000E904 arg_18          = byte ptr  20h
.text$mn:0000E904 arg_24          = byte ptr  2Ch
.text$mn:0000E904
.text$mn:0000E904                 push    ebp
.text$mn:0000E905                 mov     ebp, esp
.text$mn:0000E907                 push    0FFFFFFFFh
.text$mn:0000E909                 push    offset __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:0000E90E                 mov     eax, large fs:0
.text$mn:0000E914                 push    eax
.text$mn:0000E915                 sub     esp, 0A0h
.text$mn:0000E91B                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000E920                 xor     eax, ebp
.text$mn:0000E922                 push    eax
.text$mn:0000E923                 lea     eax, [ebp+var_C]
.text$mn:0000E926                 mov     large fs:0, eax
.text$mn:0000E92C                 mov     [ebp+var_10], ecx
.text$mn:0000E92F                 mov     [ebp+var_4], 3
.text$mn:0000E936                 lea     eax, [ebp+arg_24]
.text$mn:0000E939                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000E93A                 lea     ecx, [ebp+arg_18]
.text$mn:0000E93D                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000E942                 movzx   ecx, al
.text$mn:0000E945                 test    ecx, ecx
.text$mn:0000E947                 jz      loc_EA29
.text$mn:0000E94D                 sub     esp, 0Ch
.text$mn:0000E950                 mov     ecx, esp
.text$mn:0000E952                 mov     [ebp+var_58], esp
.text$mn:0000E955                 lea     edx, [ebp+arg_0]
.text$mn:0000E958                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000E959                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000E95E                 mov     [ebp+var_54], eax
.text$mn:0000E961                 mov     eax, [ebp+var_54]
.text$mn:0000E964                 mov     [ebp+var_60], eax
.text$mn:0000E967                 mov     byte ptr [ebp+var_4], 4
.text$mn:0000E96B                 sub     esp, 0Ch
.text$mn:0000E96E                 mov     ecx, esp
.text$mn:0000E970                 mov     [ebp+var_80], esp
.text$mn:0000E973                 lea     edx, [ebp+arg_C]
.text$mn:0000E976                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000E977                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000E97C                 mov     [ebp+var_38], eax
.text$mn:0000E97F                 mov     eax, [ebp+var_38]
.text$mn:0000E982                 mov     [ebp+var_68], eax
.text$mn:0000E985                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000E989                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000E98D                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000E992                 add     esp, 18h
.text$mn:0000E995                 mov     [ebp+var_20], eax
.text$mn:0000E998                 mov     ecx, [ebp+var_20]
.text$mn:0000E99B                 push    ecx
.text$mn:0000E99C                 lea     edx, [ebp+var_A0]
.text$mn:0000E9A2                 push    edx
.text$mn:0000E9A3                 mov     ecx, [ebp+var_10]
.text$mn:0000E9A6                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000E9AB                 mov     [ebp+var_48], eax
.text$mn:0000E9AE                 mov     eax, [ebp+var_48]
.text$mn:0000E9B1                 mov     [ebp+var_28], eax
.text$mn:0000E9B4                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000E9B8                 sub     esp, 0Ch
.text$mn:0000E9BB                 mov     ecx, esp
.text$mn:0000E9BD                 mov     [ebp+var_90], esp
.text$mn:0000E9C3                 mov     edx, [ebp+var_28]
.text$mn:0000E9C6                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000E9C7                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000E9CC                 mov     [ebp+var_40], eax
.text$mn:0000E9CF                 mov     eax, [ebp+var_40]
.text$mn:0000E9D2                 mov     [ebp+var_70], eax
.text$mn:0000E9D5                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000E9D9                 sub     esp, 0Ch
.text$mn:0000E9DC                 mov     ecx, esp
.text$mn:0000E9DE                 mov     [ebp+var_88], esp
.text$mn:0000E9E4                 lea     edx, [ebp+arg_0]
.text$mn:0000E9E7                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000E9E8                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000E9ED                 mov     [ebp+var_30], eax
.text$mn:0000E9F0                 mov     eax, [ebp+var_30]
.text$mn:0000E9F3                 mov     [ebp+var_78], eax
.text$mn:0000E9F6                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000E9FA                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000E9FE                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000EA03                 add     esp, 18h
.text$mn:0000EA06                 mov     [ebp+var_50], eax
.text$mn:0000EA09                 mov     ecx, [ebp+var_50]
.text$mn:0000EA0C                 push    ecx
.text$mn:0000EA0D                 mov     ecx, [ebp+var_10]
.text$mn:0000EA10                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:0000EA15                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000EA19                 lea     ecx, [ebp+var_A0]
.text$mn:0000EA1F                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EA24                 jmp     loc_EB19
.text$mn:0000EA29 ; ---------------------------------------------------------------------------
.text$mn:0000EA29
.text$mn:0000EA29 loc_EA29:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+43j
.text$mn:0000EA29                 lea     edx, [ebp+arg_18]
.text$mn:0000EA2C                 push    edx             ; std::_Iterator_base12 *
.text$mn:0000EA2D                 lea     ecx, [ebp+arg_24]
.text$mn:0000EA30                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EA35                 push    eax             ; int
.text$mn:0000EA36                 lea     ecx, [ebp+arg_18]
.text$mn:0000EA39                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:0000EA3E                 push    eax             ; Src
.text$mn:0000EA3F                 sub     esp, 0Ch
.text$mn:0000EA42                 mov     ecx, esp
.text$mn:0000EA44                 mov     [ebp+var_94], esp
.text$mn:0000EA4A                 lea     eax, [ebp+arg_0]
.text$mn:0000EA4D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000EA4E                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EA53                 mov     [ebp+var_18], eax
.text$mn:0000EA56                 mov     ecx, [ebp+var_18]
.text$mn:0000EA59                 mov     [ebp+var_5C], ecx
.text$mn:0000EA5C                 mov     byte ptr [ebp+var_4], 9
.text$mn:0000EA60                 sub     esp, 0Ch
.text$mn:0000EA63                 mov     ecx, esp
.text$mn:0000EA65                 mov     [ebp+var_64], esp
.text$mn:0000EA68                 lea     edx, [ebp+arg_C]
.text$mn:0000EA6B                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000EA6C                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EA71                 mov     [ebp+var_1C], eax
.text$mn:0000EA74                 mov     eax, [ebp+var_1C]
.text$mn:0000EA77                 mov     [ebp+var_6C], eax
.text$mn:0000EA7A                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:0000EA7E                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000EA82                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000EA87                 add     esp, 18h
.text$mn:0000EA8A                 mov     [ebp+var_24], eax
.text$mn:0000EA8D                 mov     ecx, [ebp+var_24]
.text$mn:0000EA90                 push    ecx             ; int
.text$mn:0000EA91                 lea     edx, [ebp+var_AC]
.text$mn:0000EA97                 push    edx
.text$mn:0000EA98                 mov     ecx, [ebp+var_10]
.text$mn:0000EA9B                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000EAA0                 mov     [ebp+var_2C], eax
.text$mn:0000EAA3                 mov     eax, [ebp+var_2C]
.text$mn:0000EAA6                 mov     [ebp+var_34], eax
.text$mn:0000EAA9                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000EAAD                 sub     esp, 0Ch
.text$mn:0000EAB0                 mov     ecx, esp
.text$mn:0000EAB2                 mov     [ebp+var_74], esp
.text$mn:0000EAB5                 mov     edx, [ebp+var_34]
.text$mn:0000EAB8                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000EAB9                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EABE                 mov     [ebp+var_3C], eax
.text$mn:0000EAC1                 mov     eax, [ebp+var_3C]
.text$mn:0000EAC4                 mov     [ebp+var_7C], eax
.text$mn:0000EAC7                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:0000EACB                 sub     esp, 0Ch
.text$mn:0000EACE                 mov     ecx, esp
.text$mn:0000EAD0                 mov     [ebp+var_84], esp
.text$mn:0000EAD6                 lea     edx, [ebp+arg_0]
.text$mn:0000EAD9                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000EADA                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000EADF                 mov     [ebp+var_44], eax
.text$mn:0000EAE2                 mov     eax, [ebp+var_44]
.text$mn:0000EAE5                 mov     [ebp+var_8C], eax
.text$mn:0000EAEB                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:0000EAEF                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:0000EAF3                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000EAF8                 add     esp, 18h
.text$mn:0000EAFB                 mov     [ebp+var_4C], eax
.text$mn:0000EAFE                 mov     ecx, [ebp+var_4C]
.text$mn:0000EB01                 push    ecx             ; int
.text$mn:0000EB02                 mov     ecx, [ebp+var_10]
.text$mn:0000EB05                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:0000EB0A                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000EB0E                 lea     ecx, [ebp+var_AC]
.text$mn:0000EB14                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EB19
.text$mn:0000EB19 loc_EB19:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+120j
.text$mn:0000EB19                 mov     edx, [ebp+var_10]
.text$mn:0000EB1C                 mov     [ebp+var_14], edx
.text$mn:0000EB1F                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000EB23                 lea     ecx, [ebp+arg_0]
.text$mn:0000EB26                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EB2B                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000EB2F                 lea     ecx, [ebp+arg_C]
.text$mn:0000EB32                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EB37                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000EB3B                 lea     ecx, [ebp+arg_18]
.text$mn:0000EB3E                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EB43                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000EB4A                 lea     ecx, [ebp+arg_24]
.text$mn:0000EB4D                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000EB52                 mov     eax, [ebp+var_14]
.text$mn:0000EB55                 mov     ecx, [ebp+var_C]
.text$mn:0000EB58                 mov     large fs:0, ecx
.text$mn:0000EB5F                 pop     ecx
.text$mn:0000EB60                 mov     esp, ebp
.text$mn:0000EB62                 pop     ebp
.text$mn:0000EB63                 retn    30h
.text$mn:0000EB63 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$mn:0000EB63
.text$mn:0000EB63 ; ---------------------------------------------------------------------------
.text$mn:0000EB66                 align 4
.text$mn:0000EB66 _text$mn        ends
.text$mn:0000EB66
.text$x:0000EB68 ; ===========================================================================
.text$x:0000EB68
.text$x:0000EB68 ; Segment type: Pure code
.text$x:0000EB68 ; Segment permissions: Read/Execute
.text$x:0000EB68 _text$x         segment para public 'CODE' use32
.text$x:0000EB68                 assume cs:_text$x
.text$x:0000EB68                 ;org 0EB68h
.text$x:0000EB68 ; COMDAT (pick associative to section at E904)
.text$x:0000EB68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000EB68
.text$x:0000EB68 ; =============== S U B R O U T I N E =======================================
.text$x:0000EB68
.text$x:0000EB68
.text$x:0000EB68 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 proc near
.text$x:0000EB68                                         ; DATA XREF: .xdata$x:0000F428o
.text$x:0000EB68                 lea     ecx, [ebp+2Ch]
.text$x:0000EB6B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EB6B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 endp
.text$x:0000EB6B
.text$x:0000EB70
.text$x:0000EB70 ; =============== S U B R O U T I N E =======================================
.text$x:0000EB70
.text$x:0000EB70
.text$x:0000EB70 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 proc near
.text$x:0000EB70                                         ; DATA XREF: .xdata$x:0000F430o
.text$x:0000EB70                 lea     ecx, [ebp+20h]
.text$x:0000EB73                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EB73 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 endp
.text$x:0000EB73
.text$x:0000EB78
.text$x:0000EB78 ; =============== S U B R O U T I N E =======================================
.text$x:0000EB78
.text$x:0000EB78
.text$x:0000EB78 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 proc near
.text$x:0000EB78                                         ; DATA XREF: .xdata$x:0000F438o
.text$x:0000EB78                 lea     ecx, [ebp+14h]
.text$x:0000EB7B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EB7B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 endp
.text$x:0000EB7B
.text$x:0000EB80
.text$x:0000EB80 ; =============== S U B R O U T I N E =======================================
.text$x:0000EB80
.text$x:0000EB80
.text$x:0000EB80 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 proc near
.text$x:0000EB80                                         ; DATA XREF: .xdata$x:0000F440o
.text$x:0000EB80                 lea     ecx, [ebp+8]
.text$x:0000EB83                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EB83 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 endp
.text$x:0000EB83
.text$x:0000EB88
.text$x:0000EB88 ; =============== S U B R O U T I N E =======================================
.text$x:0000EB88
.text$x:0000EB88
.text$x:0000EB88 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 proc near
.text$x:0000EB88                                         ; DATA XREF: .xdata$x:0000F448o
.text$x:0000EB88                 mov     ecx, [ebp-58h]
.text$x:0000EB8B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EB8B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 endp
.text$x:0000EB8B
.text$x:0000EB90
.text$x:0000EB90 ; =============== S U B R O U T I N E =======================================
.text$x:0000EB90
.text$x:0000EB90
.text$x:0000EB90 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 proc near
.text$x:0000EB90                                         ; DATA XREF: .xdata$x:0000F450o
.text$x:0000EB90                 mov     ecx, [ebp-80h]
.text$x:0000EB93                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EB93 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 endp
.text$x:0000EB93
.text$x:0000EB98
.text$x:0000EB98 ; =============== S U B R O U T I N E =======================================
.text$x:0000EB98
.text$x:0000EB98
.text$x:0000EB98 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 proc near
.text$x:0000EB98                                         ; DATA XREF: .xdata$x:0000F458o
.text$x:0000EB98                 lea     ecx, [ebp-0A0h]
.text$x:0000EB9E                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EB9E __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 endp
.text$x:0000EB9E
.text$x:0000EBA3
.text$x:0000EBA3 ; =============== S U B R O U T I N E =======================================
.text$x:0000EBA3
.text$x:0000EBA3
.text$x:0000EBA3 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 proc near
.text$x:0000EBA3                                         ; DATA XREF: .xdata$x:0000F460o
.text$x:0000EBA3                 mov     ecx, [ebp-90h]
.text$x:0000EBA9                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EBA9 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 endp
.text$x:0000EBA9
.text$x:0000EBAE
.text$x:0000EBAE ; =============== S U B R O U T I N E =======================================
.text$x:0000EBAE
.text$x:0000EBAE
.text$x:0000EBAE __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 proc near
.text$x:0000EBAE                                         ; DATA XREF: .xdata$x:0000F468o
.text$x:0000EBAE                 mov     ecx, [ebp-88h]
.text$x:0000EBB4                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EBB4 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 endp
.text$x:0000EBB4
.text$x:0000EBB9
.text$x:0000EBB9 ; =============== S U B R O U T I N E =======================================
.text$x:0000EBB9
.text$x:0000EBB9
.text$x:0000EBB9 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 proc near
.text$x:0000EBB9                                         ; DATA XREF: .xdata$x:0000F470o
.text$x:0000EBB9                 mov     ecx, [ebp-94h]
.text$x:0000EBBF                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EBBF __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 endp
.text$x:0000EBBF
.text$x:0000EBC4
.text$x:0000EBC4 ; =============== S U B R O U T I N E =======================================
.text$x:0000EBC4
.text$x:0000EBC4
.text$x:0000EBC4 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 proc near
.text$x:0000EBC4                                         ; DATA XREF: .xdata$x:0000F478o
.text$x:0000EBC4                 mov     ecx, [ebp-64h]
.text$x:0000EBC7                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EBC7 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 endp
.text$x:0000EBC7
.text$x:0000EBCC
.text$x:0000EBCC ; =============== S U B R O U T I N E =======================================
.text$x:0000EBCC
.text$x:0000EBCC
.text$x:0000EBCC __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 proc near
.text$x:0000EBCC                                         ; DATA XREF: .xdata$x:0000F480o
.text$x:0000EBCC                 lea     ecx, [ebp-0ACh]
.text$x:0000EBD2                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EBD2 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 endp
.text$x:0000EBD2
.text$x:0000EBD7
.text$x:0000EBD7 ; =============== S U B R O U T I N E =======================================
.text$x:0000EBD7
.text$x:0000EBD7
.text$x:0000EBD7 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 proc near
.text$x:0000EBD7                                         ; DATA XREF: .xdata$x:0000F488o
.text$x:0000EBD7                 mov     ecx, [ebp-74h]
.text$x:0000EBDA                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EBDA __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 endp
.text$x:0000EBDA
.text$x:0000EBDF
.text$x:0000EBDF ; =============== S U B R O U T I N E =======================================
.text$x:0000EBDF
.text$x:0000EBDF
.text$x:0000EBDF __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 proc near
.text$x:0000EBDF                                         ; DATA XREF: .xdata$x:0000F490o
.text$x:0000EBDF                 mov     ecx, [ebp-84h]
.text$x:0000EBE5                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000EBE5 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 endp
.text$x:0000EBE5
.text$x:0000EBEA
.text$x:0000EBEA ; =============== S U B R O U T I N E =======================================
.text$x:0000EBEA
.text$x:0000EBEA
.text$x:0000EBEA __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$x:0000EBEA                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000EBEA
.text$x:0000EBEA arg_4           = dword ptr  8
.text$x:0000EBEA
.text$x:0000EBEA                 mov     edx, [esp+arg_4]
.text$x:0000EBEE                 lea     eax, [edx+0Ch]
.text$x:0000EBF1                 mov     ecx, [edx-0A4h]
.text$x:0000EBF7                 xor     ecx, eax
.text$x:0000EBF9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000EBFE                 mov     eax, offset __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$x:0000EC03                 jmp     ___CxxFrameHandler3
.text$x:0000EC03 __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$x:0000EC03
.text$x:0000EC03 _text$x         ends
.text$x:0000EC03
.text$mn:0000EC08 ; ===========================================================================
.text$mn:0000EC08
.text$mn:0000EC08 ; Segment type: Pure code
.text$mn:0000EC08 ; Segment permissions: Read/Execute
.text$mn:0000EC08 _text$mn        segment para public 'CODE' use32
.text$mn:0000EC08                 assume cs:_text$mn
.text$mn:0000EC08                 ;org 0EC08h
.text$mn:0000EC08 ; COMDAT (pick any)
.text$mn:0000EC08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EC08
.text$mn:0000EC08 ; =============== S U B R O U T I N E =======================================
.text$mn:0000EC08
.text$mn:0000EC08 ; Attributes: bp-based frame
.text$mn:0000EC08
.text$mn:0000EC08 ; public: struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::select_on_container_copy_construction(void)const
.text$mn:0000EC08                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBE?AU12@XZ
.text$mn:0000EC08 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000EC08                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+41p
.text$mn:0000EC08
.text$mn:0000EC08 var_8           = dword ptr -8
.text$mn:0000EC08 var_1           = byte ptr -1
.text$mn:0000EC08 arg_0           = dword ptr  8
.text$mn:0000EC08
.text$mn:0000EC08                 push    ebp
.text$mn:0000EC09                 mov     ebp, esp
.text$mn:0000EC0B                 sub     esp, 8
.text$mn:0000EC0E                 mov     [ebp+var_8], ecx
.text$mn:0000EC11                 mov     eax, [ebp+var_8]
.text$mn:0000EC14                 push    eax
.text$mn:0000EC15                 lea     ecx, [ebp+var_1]
.text$mn:0000EC18                 push    ecx
.text$mn:0000EC19                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SA?AV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@ABV32@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000EC1E                 add     esp, 8
.text$mn:0000EC21                 push    eax
.text$mn:0000EC22                 mov     ecx, [ebp+arg_0]
.text$mn:0000EC25                 call    ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000EC2A                 mov     eax, [ebp+arg_0]
.text$mn:0000EC2D                 mov     esp, ebp
.text$mn:0000EC2F                 pop     ebp
.text$mn:0000EC30                 retn    4
.text$mn:0000EC30 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000EC30
.text$mn:0000EC30 ; ---------------------------------------------------------------------------
.text$mn:0000EC33                 align 4
.text$mn:0000EC33 _text$mn        ends
.text$mn:0000EC33
.text$mn:0000EC34 ; ===========================================================================
.text$mn:0000EC34
.text$mn:0000EC34 ; Segment type: Pure code
.text$mn:0000EC34 ; Segment permissions: Read/Execute
.text$mn:0000EC34 _text$mn        segment para public 'CODE' use32
.text$mn:0000EC34                 assume cs:_text$mn
.text$mn:0000EC34                 ;org 0EC34h
.text$mn:0000EC34 ; COMDAT (pick any)
.text$mn:0000EC34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EC34
.text$mn:0000EC34 ; =============== S U B R O U T I N E =======================================
.text$mn:0000EC34
.text$mn:0000EC34 ; Attributes: bp-based frame
.text$mn:0000EC34
.text$mn:0000EC34 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:0000EC34                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:0000EC34 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000EC34                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:0000EC34
.text$mn:0000EC34 var_8           = dword ptr -8
.text$mn:0000EC34 var_1           = byte ptr -1
.text$mn:0000EC34 arg_0           = dword ptr  8
.text$mn:0000EC34
.text$mn:0000EC34                 push    ebp
.text$mn:0000EC35                 mov     ebp, esp
.text$mn:0000EC37                 sub     esp, 8
.text$mn:0000EC3A                 mov     [ebp+var_8], ecx
.text$mn:0000EC3D                 mov     eax, [ebp+var_8]
.text$mn:0000EC40                 push    eax
.text$mn:0000EC41                 lea     ecx, [ebp+var_1]
.text$mn:0000EC44                 push    ecx
.text$mn:0000EC45                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:0000EC4A                 add     esp, 8
.text$mn:0000EC4D                 push    eax
.text$mn:0000EC4E                 mov     ecx, [ebp+arg_0]
.text$mn:0000EC51                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:0000EC56                 mov     eax, [ebp+arg_0]
.text$mn:0000EC59                 mov     esp, ebp
.text$mn:0000EC5B                 pop     ebp
.text$mn:0000EC5C                 retn    4
.text$mn:0000EC5C ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:0000EC5C
.text$mn:0000EC5C ; ---------------------------------------------------------------------------
.text$mn:0000EC5F                 align 10h
.text$mn:0000EC5F _text$mn        ends
.text$mn:0000EC5F
.text$mn:0000EC60 ; ===========================================================================
.text$mn:0000EC60
.text$mn:0000EC60 ; Segment type: Pure code
.text$mn:0000EC60 ; Segment permissions: Read/Execute
.text$mn:0000EC60 _text$mn        segment para public 'CODE' use32
.text$mn:0000EC60                 assume cs:_text$mn
.text$mn:0000EC60                 ;org 0EC60h
.text$mn:0000EC60 ; COMDAT (pick any)
.text$mn:0000EC60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EC60
.text$mn:0000EC60 ; =============== S U B R O U T I N E =======================================
.text$mn:0000EC60
.text$mn:0000EC60 ; Attributes: bp-based frame
.text$mn:0000EC60
.text$mn:0000EC60 ; public: class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::select_on_container_copy_construction(void)const
.text$mn:0000EC60                 public ?select_on_container_copy_construction@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBE?AV12@XZ
.text$mn:0000EC60 ?select_on_container_copy_construction@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBE?AV12@XZ proc near
.text$mn:0000EC60                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+Ap
.text$mn:0000EC60
.text$mn:0000EC60 var_4           = dword ptr -4
.text$mn:0000EC60 arg_0           = dword ptr  8
.text$mn:0000EC60
.text$mn:0000EC60                 push    ebp
.text$mn:0000EC61                 mov     ebp, esp
.text$mn:0000EC63                 push    ecx
.text$mn:0000EC64                 mov     [ebp+var_4], ecx
.text$mn:0000EC67                 mov     eax, [ebp+var_4]
.text$mn:0000EC6A                 push    eax
.text$mn:0000EC6B                 mov     ecx, [ebp+arg_0]
.text$mn:0000EC6E                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:0000EC73                 mov     eax, [ebp+arg_0]
.text$mn:0000EC76                 mov     esp, ebp
.text$mn:0000EC78                 pop     ebp
.text$mn:0000EC79                 retn    4
.text$mn:0000EC79 ?select_on_container_copy_construction@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBE?AV12@XZ endp
.text$mn:0000EC79
.text$mn:0000EC79 _text$mn        ends
.text$mn:0000EC79
.text$mn:0000EC7C ; ===========================================================================
.text$mn:0000EC7C
.text$mn:0000EC7C ; Segment type: Pure code
.text$mn:0000EC7C ; Segment permissions: Read/Execute
.text$mn:0000EC7C _text$mn        segment para public 'CODE' use32
.text$mn:0000EC7C                 assume cs:_text$mn
.text$mn:0000EC7C                 ;org 0EC7Ch
.text$mn:0000EC7C ; COMDAT (pick any)
.text$mn:0000EC7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EC7C
.text$mn:0000EC7C ; =============== S U B R O U T I N E =======================================
.text$mn:0000EC7C
.text$mn:0000EC7C ; Attributes: bp-based frame
.text$mn:0000EC7C
.text$mn:0000EC7C ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:0000EC7C                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:0000EC7C ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:0000EC7C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:0000EC7C
.text$mn:0000EC7C var_4           = dword ptr -4
.text$mn:0000EC7C arg_0           = dword ptr  8
.text$mn:0000EC7C
.text$mn:0000EC7C                 push    ebp
.text$mn:0000EC7D                 mov     ebp, esp
.text$mn:0000EC7F                 push    ecx
.text$mn:0000EC80                 mov     [ebp+var_4], ecx
.text$mn:0000EC83                 mov     eax, [ebp+var_4]
.text$mn:0000EC86                 push    eax
.text$mn:0000EC87                 mov     ecx, [ebp+arg_0]
.text$mn:0000EC8A                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000EC8F                 mov     eax, [ebp+arg_0]
.text$mn:0000EC92                 mov     esp, ebp
.text$mn:0000EC94                 pop     ebp
.text$mn:0000EC95                 retn    4
.text$mn:0000EC95 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:0000EC95
.text$mn:0000EC95 _text$mn        ends
.text$mn:0000EC95
.text$mn:0000EC98 ; ===========================================================================
.text$mn:0000EC98
.text$mn:0000EC98 ; Segment type: Pure code
.text$mn:0000EC98 ; Segment permissions: Read/Execute
.text$mn:0000EC98 _text$mn        segment para public 'CODE' use32
.text$mn:0000EC98                 assume cs:_text$mn
.text$mn:0000EC98                 ;org 0EC98h
.text$mn:0000EC98 ; COMDAT (pick any)
.text$mn:0000EC98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EC98
.text$mn:0000EC98 ; =============== S U B R O U T I N E =======================================
.text$mn:0000EC98
.text$mn:0000EC98 ; Attributes: bp-based frame
.text$mn:0000EC98
.text$mn:0000EC98 ; public: static class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::select_on_container_copy_construction(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:0000EC98                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SA?AV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@ABV32@@Z
.text$mn:0000EC98 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SA?AV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@ABV32@@Z proc near
.text$mn:0000EC98                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::select_on_container_copy_construction(void)+11p
.text$mn:0000EC98
.text$mn:0000EC98 arg_0           = dword ptr  8
.text$mn:0000EC98 arg_4           = dword ptr  0Ch
.text$mn:0000EC98
.text$mn:0000EC98                 push    ebp
.text$mn:0000EC99                 mov     ebp, esp
.text$mn:0000EC9B                 mov     eax, [ebp+arg_0]
.text$mn:0000EC9E                 push    eax
.text$mn:0000EC9F                 mov     ecx, [ebp+arg_4]
.text$mn:0000ECA2                 call    ?select_on_container_copy_construction@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBE?AV12@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::select_on_container_copy_construction(void)
.text$mn:0000ECA7                 mov     eax, [ebp+arg_0]
.text$mn:0000ECAA                 pop     ebp
.text$mn:0000ECAB                 retn
.text$mn:0000ECAB ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SA?AV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@ABV32@@Z endp
.text$mn:0000ECAB
.text$mn:0000ECAB _text$mn        ends
.text$mn:0000ECAB
.text$mn:0000ECAC ; ===========================================================================
.text$mn:0000ECAC
.text$mn:0000ECAC ; Segment type: Pure code
.text$mn:0000ECAC ; Segment permissions: Read/Execute
.text$mn:0000ECAC _text$mn        segment para public 'CODE' use32
.text$mn:0000ECAC                 assume cs:_text$mn
.text$mn:0000ECAC                 ;org 0ECACh
.text$mn:0000ECAC ; COMDAT (pick any)
.text$mn:0000ECAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ECAC
.text$mn:0000ECAC ; =============== S U B R O U T I N E =======================================
.text$mn:0000ECAC
.text$mn:0000ECAC ; Attributes: bp-based frame
.text$mn:0000ECAC
.text$mn:0000ECAC ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:0000ECAC                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:0000ECAC ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:0000ECAC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:0000ECAC
.text$mn:0000ECAC arg_0           = dword ptr  8
.text$mn:0000ECAC arg_4           = dword ptr  0Ch
.text$mn:0000ECAC
.text$mn:0000ECAC                 push    ebp
.text$mn:0000ECAD                 mov     ebp, esp
.text$mn:0000ECAF                 mov     eax, [ebp+arg_0]
.text$mn:0000ECB2                 push    eax
.text$mn:0000ECB3                 mov     ecx, [ebp+arg_4]
.text$mn:0000ECB6                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:0000ECBB                 mov     eax, [ebp+arg_0]
.text$mn:0000ECBE                 pop     ebp
.text$mn:0000ECBF                 retn
.text$mn:0000ECBF ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:0000ECBF
.text$mn:0000ECBF _text$mn        ends
.text$mn:0000ECBF
.text$mn:0000ECC0 ; ===========================================================================
.text$mn:0000ECC0
.text$mn:0000ECC0 ; Segment type: Pure code
.text$mn:0000ECC0 ; Segment permissions: Read/Execute
.text$mn:0000ECC0 _text$mn        segment para public 'CODE' use32
.text$mn:0000ECC0                 assume cs:_text$mn
.text$mn:0000ECC0                 ;org 0ECC0h
.text$mn:0000ECC0 ; COMDAT (pick any)
.text$mn:0000ECC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ECC0
.text$mn:0000ECC0 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ECC0
.text$mn:0000ECC0 ; Attributes: bp-based frame
.text$mn:0000ECC0
.text$mn:0000ECC0 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:0000ECC0                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000ECC0 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000ECC0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:0000ECC0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:0000ECC0
.text$mn:0000ECC0 var_4           = dword ptr -4
.text$mn:0000ECC0
.text$mn:0000ECC0                 push    ebp
.text$mn:0000ECC1                 mov     ebp, esp
.text$mn:0000ECC3                 push    ecx
.text$mn:0000ECC4                 mov     [ebp+var_4], ecx
.text$mn:0000ECC7                 mov     eax, [ebp+var_4]
.text$mn:0000ECCA                 mov     eax, [eax+14h]
.text$mn:0000ECCD                 mov     esp, ebp
.text$mn:0000ECCF                 pop     ebp
.text$mn:0000ECD0                 retn
.text$mn:0000ECD0 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:0000ECD0
.text$mn:0000ECD0 ; ---------------------------------------------------------------------------
.text$mn:0000ECD1                 align 4
.text$mn:0000ECD1 _text$mn        ends
.text$mn:0000ECD1
.text$mn:0000ECD4 ; ===========================================================================
.text$mn:0000ECD4
.text$mn:0000ECD4 ; Segment type: Pure code
.text$mn:0000ECD4 ; Segment permissions: Read/Execute
.text$mn:0000ECD4 _text$mn        segment para public 'CODE' use32
.text$mn:0000ECD4                 assume cs:_text$mn
.text$mn:0000ECD4                 ;org 0ECD4h
.text$mn:0000ECD4 ; COMDAT (pick any)
.text$mn:0000ECD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ECD4
.text$mn:0000ECD4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ECD4
.text$mn:0000ECD4 ; Attributes: bp-based frame
.text$mn:0000ECD4
.text$mn:0000ECD4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:0000ECD4                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:0000ECD4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:0000ECD4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:0000ECD4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:0000ECD4
.text$mn:0000ECD4 var_4           = dword ptr -4
.text$mn:0000ECD4
.text$mn:0000ECD4                 push    ebp
.text$mn:0000ECD5                 mov     ebp, esp
.text$mn:0000ECD7                 push    ecx
.text$mn:0000ECD8                 mov     [ebp+var_4], ecx
.text$mn:0000ECDB                 mov     eax, [ebp+var_4]
.text$mn:0000ECDE                 mov     eax, [eax+14h]
.text$mn:0000ECE1                 mov     esp, ebp
.text$mn:0000ECE3                 pop     ebp
.text$mn:0000ECE4                 retn
.text$mn:0000ECE4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:0000ECE4
.text$mn:0000ECE4 ; ---------------------------------------------------------------------------
.text$mn:0000ECE5                 align 4
.text$mn:0000ECE5 _text$mn        ends
.text$mn:0000ECE5
.text$mn:0000ECE8 ; ===========================================================================
.text$mn:0000ECE8
.text$mn:0000ECE8 ; Segment type: Pure code
.text$mn:0000ECE8 ; Segment permissions: Read/Execute
.text$mn:0000ECE8 _text$mn        segment para public 'CODE' use32
.text$mn:0000ECE8                 assume cs:_text$mn
.text$mn:0000ECE8                 ;org 0ECE8h
.text$mn:0000ECE8 ; COMDAT (pick any)
.text$mn:0000ECE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ECE8
.text$mn:0000ECE8 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ECE8
.text$mn:0000ECE8 ; Attributes: bp-based frame
.text$mn:0000ECE8
.text$mn:0000ECE8 ; public: unsigned int __thiscall std::vector<class FunctionParser *, class std::allocator<class FunctionParser *>>::size(void)const
.text$mn:0000ECE8                 public ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ
.text$mn:0000ECE8 ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ proc near
.text$mn:0000ECE8                                         ; CODE XREF: FunctionParsersManager::~FunctionParsersManager(void)+3Cp
.text$mn:0000ECE8                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+BC7p ...
.text$mn:0000ECE8
.text$mn:0000ECE8 var_4           = dword ptr -4
.text$mn:0000ECE8
.text$mn:0000ECE8                 push    ebp
.text$mn:0000ECE9                 mov     ebp, esp
.text$mn:0000ECEB                 push    ecx
.text$mn:0000ECEC                 mov     [ebp+var_4], ecx
.text$mn:0000ECEF                 mov     eax, [ebp+var_4]
.text$mn:0000ECF2                 mov     ecx, [ebp+var_4]
.text$mn:0000ECF5                 mov     eax, [eax+8]
.text$mn:0000ECF8                 sub     eax, [ecx+4]
.text$mn:0000ECFB                 sar     eax, 2
.text$mn:0000ECFE                 mov     esp, ebp
.text$mn:0000ED00                 pop     ebp
.text$mn:0000ED01                 retn
.text$mn:0000ED01 ?size@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QBEIXZ endp
.text$mn:0000ED01
.text$mn:0000ED01 ; ---------------------------------------------------------------------------
.text$mn:0000ED02                 align 4
.text$mn:0000ED02 _text$mn        ends
.text$mn:0000ED02
.text$mn:0000ED04 ; ===========================================================================
.text$mn:0000ED04
.text$mn:0000ED04 ; Segment type: Pure code
.text$mn:0000ED04 ; Segment permissions: Read/Execute
.text$mn:0000ED04 _text$mn        segment para public 'CODE' use32
.text$mn:0000ED04                 assume cs:_text$mn
.text$mn:0000ED04                 ;org 0ED04h
.text$mn:0000ED04 ; COMDAT (pick any)
.text$mn:0000ED04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ED04
.text$mn:0000ED04 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ED04
.text$mn:0000ED04 ; Attributes: bp-based frame
.text$mn:0000ED04
.text$mn:0000ED04 ; public: unsigned int __thiscall std::vector<struct std::pair<int, int>, class std::allocator<struct std::pair<int, int>>>::size(void)const
.text$mn:0000ED04                 public ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ
.text$mn:0000ED04 ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000ED04                                         ; CODE XREF: FunctionParser::isInZones(int,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &)+13p
.text$mn:0000ED04                                         ; FunctionParser::getInvertZones(std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> &,uint,uint)+Cp ...
.text$mn:0000ED04
.text$mn:0000ED04 var_4           = dword ptr -4
.text$mn:0000ED04
.text$mn:0000ED04                 push    ebp
.text$mn:0000ED05                 mov     ebp, esp
.text$mn:0000ED07                 push    ecx
.text$mn:0000ED08                 mov     [ebp+var_4], ecx
.text$mn:0000ED0B                 mov     eax, [ebp+var_4]
.text$mn:0000ED0E                 mov     ecx, [ebp+var_4]
.text$mn:0000ED11                 mov     eax, [eax+8]
.text$mn:0000ED14                 sub     eax, [ecx+4]
.text$mn:0000ED17                 sar     eax, 3
.text$mn:0000ED1A                 mov     esp, ebp
.text$mn:0000ED1C                 pop     ebp
.text$mn:0000ED1D                 retn
.text$mn:0000ED1D ?size@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QBEIXZ endp
.text$mn:0000ED1D
.text$mn:0000ED1D ; ---------------------------------------------------------------------------
.text$mn:0000ED1E                 align 10h
.text$mn:0000ED1E _text$mn        ends
.text$mn:0000ED1E
.text$mn:0000ED20 ; ===========================================================================
.text$mn:0000ED20
.text$mn:0000ED20 ; Segment type: Pure code
.text$mn:0000ED20 ; Segment permissions: Read/Execute
.text$mn:0000ED20 _text$mn        segment para public 'CODE' use32
.text$mn:0000ED20                 assume cs:_text$mn
.text$mn:0000ED20                 ;org 0ED20h
.text$mn:0000ED20 ; COMDAT (pick any)
.text$mn:0000ED20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ED20
.text$mn:0000ED20 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ED20
.text$mn:0000ED20 ; Attributes: bp-based frame
.text$mn:0000ED20
.text$mn:0000ED20 ; public: unsigned int __thiscall std::vector<struct AssociationInfo, class std::allocator<struct AssociationInfo>>::size(void)const
.text$mn:0000ED20                 public ?size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ
.text$mn:0000ED20 ?size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000ED20                                         ; CODE XREF: FunctionParsersManager::getParser(AssociationInfo const &)+9Dp
.text$mn:0000ED20                                         ; std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)+Ap ...
.text$mn:0000ED20
.text$mn:0000ED20 var_4           = dword ptr -4
.text$mn:0000ED20
.text$mn:0000ED20                 push    ebp
.text$mn:0000ED21                 mov     ebp, esp
.text$mn:0000ED23                 push    ecx
.text$mn:0000ED24                 mov     [ebp+var_4], ecx
.text$mn:0000ED27                 mov     eax, [ebp+var_4]
.text$mn:0000ED2A                 mov     ecx, [ebp+var_4]
.text$mn:0000ED2D                 mov     eax, [eax+8]
.text$mn:0000ED30                 sub     eax, [ecx+4]
.text$mn:0000ED33                 sar     eax, 6
.text$mn:0000ED36                 mov     esp, ebp
.text$mn:0000ED38                 pop     ebp
.text$mn:0000ED39                 retn
.text$mn:0000ED39 ?size@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000ED39
.text$mn:0000ED39 ; ---------------------------------------------------------------------------
.text$mn:0000ED3A                 align 4
.text$mn:0000ED3A _text$mn        ends
.text$mn:0000ED3A
.text$mn:0000ED3C ; ===========================================================================
.text$mn:0000ED3C
.text$mn:0000ED3C ; Segment type: Pure code
.text$mn:0000ED3C ; Segment permissions: Read/Execute
.text$mn:0000ED3C _text$mn        segment para public 'CODE' use32
.text$mn:0000ED3C                 assume cs:_text$mn
.text$mn:0000ED3C                 ;org 0ED3Ch
.text$mn:0000ED3C ; COMDAT (pick any)
.text$mn:0000ED3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ED3C
.text$mn:0000ED3C ; =============== S U B R O U T I N E =======================================
.text$mn:0000ED3C
.text$mn:0000ED3C ; Attributes: bp-based frame
.text$mn:0000ED3C
.text$mn:0000ED3C ; public: unsigned int __thiscall std::vector<struct foundInfo, class std::allocator<struct foundInfo>>::size(void)const
.text$mn:0000ED3C                 public ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ
.text$mn:0000ED3C ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ proc near
.text$mn:0000ED3C                                         ; CODE XREF: std::vector<foundInfo,std::allocator<foundInfo>>::_Reallocate(uint)+A9p
.text$mn:0000ED3C                                         ; std::vector<foundInfo,std::allocator<foundInfo>>::_Reserve(uint)+22p ...
.text$mn:0000ED3C
.text$mn:0000ED3C var_4           = dword ptr -4
.text$mn:0000ED3C
.text$mn:0000ED3C                 push    ebp
.text$mn:0000ED3D                 mov     ebp, esp
.text$mn:0000ED3F                 push    ecx
.text$mn:0000ED40                 mov     [ebp+var_4], ecx
.text$mn:0000ED43                 mov     eax, [ebp+var_4]
.text$mn:0000ED46                 mov     ecx, [ebp+var_4]
.text$mn:0000ED49                 mov     eax, [eax+8]
.text$mn:0000ED4C                 sub     eax, [ecx+4]
.text$mn:0000ED4F                 sar     eax, 6
.text$mn:0000ED52                 mov     esp, ebp
.text$mn:0000ED54                 pop     ebp
.text$mn:0000ED55                 retn
.text$mn:0000ED55 ?size@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@QBEIXZ endp
.text$mn:0000ED55
.text$mn:0000ED55 ; ---------------------------------------------------------------------------
.text$mn:0000ED56                 align 4
.text$mn:0000ED56 _text$mn        ends
.text$mn:0000ED56
.text$mn:0000ED58 ; ===========================================================================
.text$mn:0000ED58
.text$mn:0000ED58 ; Segment type: Pure code
.text$mn:0000ED58 ; Segment permissions: Read/Execute
.text$mn:0000ED58 _text$mn        segment para public 'CODE' use32
.text$mn:0000ED58                 assume cs:_text$mn
.text$mn:0000ED58                 ;org 0ED58h
.text$mn:0000ED58 ; COMDAT (pick any)
.text$mn:0000ED58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ED58
.text$mn:0000ED58 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ED58
.text$mn:0000ED58 ; Attributes: bp-based frame
.text$mn:0000ED58
.text$mn:0000ED58 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::size(void)const
.text$mn:0000ED58                 public ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:0000ED58 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:0000ED58                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+178p
.text$mn:0000ED58                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+18Dp ...
.text$mn:0000ED58
.text$mn:0000ED58 var_4           = dword ptr -4
.text$mn:0000ED58
.text$mn:0000ED58                 push    ebp
.text$mn:0000ED59                 mov     ebp, esp
.text$mn:0000ED5B                 push    ecx
.text$mn:0000ED5C                 mov     [ebp+var_4], ecx
.text$mn:0000ED5F                 mov     eax, [ebp+var_4]
.text$mn:0000ED62                 mov     ecx, [ebp+var_4]
.text$mn:0000ED65                 mov     eax, [eax+8]
.text$mn:0000ED68                 sub     eax, [ecx+4]
.text$mn:0000ED6B                 cdq
.text$mn:0000ED6C                 mov     ecx, 1Ch
.text$mn:0000ED71                 idiv    ecx
.text$mn:0000ED73                 mov     esp, ebp
.text$mn:0000ED75                 pop     ebp
.text$mn:0000ED76                 retn
.text$mn:0000ED76 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000ED76
.text$mn:0000ED76 ; ---------------------------------------------------------------------------
.text$mn:0000ED77                 align 4
.text$mn:0000ED77 _text$mn        ends
.text$mn:0000ED77
.text$mn:0000ED78 ; ===========================================================================
.text$mn:0000ED78
.text$mn:0000ED78 ; Segment type: Pure code
.text$mn:0000ED78 ; Segment permissions: Read/Execute
.text$mn:0000ED78 _text$mn        segment para public 'CODE' use32
.text$mn:0000ED78                 assume cs:_text$mn
.text$mn:0000ED78                 ;org 0ED78h
.text$mn:0000ED78 ; COMDAT (pick any)
.text$mn:0000ED78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ED78
.text$mn:0000ED78 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ED78
.text$mn:0000ED78 ; Attributes: bp-based frame
.text$mn:0000ED78
.text$mn:0000ED78 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:0000ED78                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:0000ED78 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:0000ED78                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_D3C8p
.text$mn:0000ED78                 push    ebp
.text$mn:0000ED79                 mov     ebp, esp
.text$mn:0000ED7B                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:0000ED80                 pop     ebp
.text$mn:0000ED81                 retn
.text$mn:0000ED81 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:0000ED81
.text$mn:0000ED81 ; ---------------------------------------------------------------------------
.text$mn:0000ED82                 align 4
.text$mn:0000ED82 _text$mn        ends
.text$mn:0000ED82
.text$mn:0000ED84 ; ===========================================================================
.text$mn:0000ED84
.text$mn:0000ED84 ; Segment type: Pure code
.text$mn:0000ED84 ; Segment permissions: Read/Execute
.text$mn:0000ED84 _text$mn        segment para public 'CODE' use32
.text$mn:0000ED84                 assume cs:_text$mn
.text$mn:0000ED84                 ;org 0ED84h
.text$mn:0000ED84 ; COMDAT (pick any)
.text$mn:0000ED84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ED84
.text$mn:0000ED84 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ED84
.text$mn:0000ED84 ; Attributes: bp-based frame
.text$mn:0000ED84
.text$mn:0000ED84 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:0000ED84                 public ?value@error_code@std@@QBEHXZ
.text$mn:0000ED84 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:0000ED84
.text$mn:0000ED84 var_4           = dword ptr -4
.text$mn:0000ED84
.text$mn:0000ED84                 push    ebp
.text$mn:0000ED85                 mov     ebp, esp
.text$mn:0000ED87                 push    ecx
.text$mn:0000ED88                 mov     [ebp+var_4], ecx
.text$mn:0000ED8B                 mov     eax, [ebp+var_4]
.text$mn:0000ED8E                 mov     eax, [eax]
.text$mn:0000ED90                 mov     esp, ebp
.text$mn:0000ED92                 pop     ebp
.text$mn:0000ED93                 retn
.text$mn:0000ED93 ?value@error_code@std@@QBEHXZ endp
.text$mn:0000ED93
.text$mn:0000ED93 _text$mn        ends
.text$mn:0000ED93
.text$mn:0000ED94 ; ===========================================================================
.text$mn:0000ED94
.text$mn:0000ED94 ; Segment type: Pure code
.text$mn:0000ED94 ; Segment permissions: Read/Execute
.text$mn:0000ED94 _text$mn        segment para public 'CODE' use32
.text$mn:0000ED94                 assume cs:_text$mn
.text$mn:0000ED94                 ;org 0ED94h
.text$mn:0000ED94 ; COMDAT (pick any)
.text$mn:0000ED94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000ED94
.text$mn:0000ED94 ; =============== S U B R O U T I N E =======================================
.text$mn:0000ED94
.text$mn:0000ED94 ; Attributes: bp-based frame
.text$mn:0000ED94
.text$mn:0000ED94 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:0000ED94                 public ?value@error_condition@std@@QBEHXZ
.text$mn:0000ED94 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:0000ED94                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:0000ED94                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:0000ED94
.text$mn:0000ED94 var_4           = dword ptr -4
.text$mn:0000ED94
.text$mn:0000ED94                 push    ebp
.text$mn:0000ED95                 mov     ebp, esp
.text$mn:0000ED97                 push    ecx
.text$mn:0000ED98                 mov     [ebp+var_4], ecx
.text$mn:0000ED9B                 mov     eax, [ebp+var_4]
.text$mn:0000ED9E                 mov     eax, [eax]
.text$mn:0000EDA0                 mov     esp, ebp
.text$mn:0000EDA2                 pop     ebp
.text$mn:0000EDA3                 retn
.text$mn:0000EDA3 ?value@error_condition@std@@QBEHXZ endp
.text$mn:0000EDA3
.text$mn:0000EDA3 _text$mn        ends
.text$mn:0000EDA3
.text$mn:0000EDA4 ; ===========================================================================
.text$mn:0000EDA4
.text$mn:0000EDA4 ; Segment type: Pure code
.text$mn:0000EDA4 ; Segment permissions: Read/Execute
.text$mn:0000EDA4 _text$mn        segment para public 'CODE' use32
.text$mn:0000EDA4                 assume cs:_text$mn
.text$mn:0000EDA4                 ;org 0EDA4h
.text$mn:0000EDA4 ; COMDAT (pick any)
.text$mn:0000EDA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EDA4
.text$mn:0000EDA4 ; =============== S U B R O U T I N E =======================================
.text$mn:0000EDA4
.text$mn:0000EDA4 ; Attributes: bp-based frame
.text$mn:0000EDA4
.text$mn:0000EDA4                 public _hypot
.text$mn:0000EDA4 _hypot          proc near
.text$mn:0000EDA4
.text$mn:0000EDA4 var_10          = qword ptr -10h
.text$mn:0000EDA4 var_8           = qword ptr -8
.text$mn:0000EDA4 arg_0           = qword ptr  8
.text$mn:0000EDA4 arg_8           = qword ptr  10h
.text$mn:0000EDA4
.text$mn:0000EDA4                 push    ebp
.text$mn:0000EDA5                 mov     ebp, esp
.text$mn:0000EDA7                 sub     esp, 8
.text$mn:0000EDAA                 movsd   xmm0, [ebp+arg_8]
.text$mn:0000EDAF                 movsd   [esp+8+var_8], xmm0
.text$mn:0000EDB4                 sub     esp, 8
.text$mn:0000EDB7                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000EDBC                 movsd   [esp+10h+var_10], xmm0
.text$mn:0000EDC1                 call    __hypot
.text$mn:0000EDC6                 add     esp, 10h
.text$mn:0000EDC9                 pop     ebp
.text$mn:0000EDCA                 retn
.text$mn:0000EDCA _hypot          endp
.text$mn:0000EDCA
.text$mn:0000EDCA ; ---------------------------------------------------------------------------
.text$mn:0000EDCB                 align 4
.text$mn:0000EDCB _text$mn        ends
.text$mn:0000EDCB
.text$mn:0000EDCC ; ===========================================================================
.text$mn:0000EDCC
.text$mn:0000EDCC ; Segment type: Pure code
.text$mn:0000EDCC ; Segment permissions: Read/Execute
.text$mn:0000EDCC _text$mn        segment para public 'CODE' use32
.text$mn:0000EDCC                 assume cs:_text$mn
.text$mn:0000EDCC                 ;org 0EDCCh
.text$mn:0000EDCC ; COMDAT (pick any)
.text$mn:0000EDCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EDCC
.text$mn:0000EDCC ; =============== S U B R O U T I N E =======================================
.text$mn:0000EDCC
.text$mn:0000EDCC ; Attributes: bp-based frame
.text$mn:0000EDCC
.text$mn:0000EDCC                 public _wmemcmp
.text$mn:0000EDCC _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:0000EDCC
.text$mn:0000EDCC var_4           = dword ptr -4
.text$mn:0000EDCC arg_0           = dword ptr  8
.text$mn:0000EDCC arg_4           = dword ptr  0Ch
.text$mn:0000EDCC arg_8           = dword ptr  10h
.text$mn:0000EDCC
.text$mn:0000EDCC                 push    ebp
.text$mn:0000EDCD                 mov     ebp, esp
.text$mn:0000EDCF                 push    ecx
.text$mn:0000EDD0                 jmp     short loc_EDED
.text$mn:0000EDD2 ; ---------------------------------------------------------------------------
.text$mn:0000EDD2
.text$mn:0000EDD2 loc_EDD2:                               ; CODE XREF: _wmemcmp:loc_EE28j
.text$mn:0000EDD2                 mov     eax, [ebp+arg_0]
.text$mn:0000EDD5                 add     eax, 2
.text$mn:0000EDD8                 mov     [ebp+arg_0], eax
.text$mn:0000EDDB                 mov     ecx, [ebp+arg_4]
.text$mn:0000EDDE                 add     ecx, 2
.text$mn:0000EDE1                 mov     [ebp+arg_4], ecx
.text$mn:0000EDE4                 mov     edx, [ebp+arg_8]
.text$mn:0000EDE7                 sub     edx, 1
.text$mn:0000EDEA                 mov     [ebp+arg_8], edx
.text$mn:0000EDED
.text$mn:0000EDED loc_EDED:                               ; CODE XREF: _wmemcmp+4j
.text$mn:0000EDED                 cmp     [ebp+arg_8], 0
.text$mn:0000EDF1                 jbe     short loc_EE2A
.text$mn:0000EDF3                 mov     eax, [ebp+arg_0]
.text$mn:0000EDF6                 movzx   ecx, word ptr [eax]
.text$mn:0000EDF9                 mov     edx, [ebp+arg_4]
.text$mn:0000EDFC                 movzx   eax, word ptr [edx]
.text$mn:0000EDFF                 cmp     ecx, eax
.text$mn:0000EE01                 jz      short loc_EE28
.text$mn:0000EE03                 mov     ecx, [ebp+arg_0]
.text$mn:0000EE06                 movzx   edx, word ptr [ecx]
.text$mn:0000EE09                 mov     eax, [ebp+arg_4]
.text$mn:0000EE0C                 movzx   ecx, word ptr [eax]
.text$mn:0000EE0F                 cmp     edx, ecx
.text$mn:0000EE11                 jge     short loc_EE1C
.text$mn:0000EE13                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000EE1A                 jmp     short loc_EE23
.text$mn:0000EE1C ; ---------------------------------------------------------------------------
.text$mn:0000EE1C
.text$mn:0000EE1C loc_EE1C:                               ; CODE XREF: _wmemcmp+45j
.text$mn:0000EE1C                 mov     [ebp+var_4], 1
.text$mn:0000EE23
.text$mn:0000EE23 loc_EE23:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000EE23                 mov     eax, [ebp+var_4]
.text$mn:0000EE26                 jmp     short loc_EE2C
.text$mn:0000EE28 ; ---------------------------------------------------------------------------
.text$mn:0000EE28
.text$mn:0000EE28 loc_EE28:                               ; CODE XREF: _wmemcmp+35j
.text$mn:0000EE28                 jmp     short loc_EDD2
.text$mn:0000EE2A ; ---------------------------------------------------------------------------
.text$mn:0000EE2A
.text$mn:0000EE2A loc_EE2A:                               ; CODE XREF: _wmemcmp+25j
.text$mn:0000EE2A                 xor     eax, eax
.text$mn:0000EE2C
.text$mn:0000EE2C loc_EE2C:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:0000EE2C                 mov     esp, ebp
.text$mn:0000EE2E                 pop     ebp
.text$mn:0000EE2F                 retn
.text$mn:0000EE2F _wmemcmp        endp
.text$mn:0000EE2F
.text$mn:0000EE2F _text$mn        ends
.text$mn:0000EE2F
.text$mn:0000EE30 ; ===========================================================================
.text$mn:0000EE30
.text$mn:0000EE30 ; Segment type: Pure code
.text$mn:0000EE30 ; Segment permissions: Read/Execute
.text$mn:0000EE30 _text$mn        segment para public 'CODE' use32
.text$mn:0000EE30                 assume cs:_text$mn
.text$mn:0000EE30                 ;org 0EE30h
.text$mn:0000EE30 ; COMDAT (pick any)
.text$mn:0000EE30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EE30
.text$mn:0000EE30 ; =============== S U B R O U T I N E =======================================
.text$mn:0000EE30
.text$mn:0000EE30 ; Attributes: bp-based frame
.text$mn:0000EE30
.text$mn:0000EE30 ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:0000EE30                 public _wmemcpy
.text$mn:0000EE30 _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000EE30
.text$mn:0000EE30 Dst             = dword ptr  8
.text$mn:0000EE30 Src             = dword ptr  0Ch
.text$mn:0000EE30 arg_8           = dword ptr  10h
.text$mn:0000EE30
.text$mn:0000EE30                 push    ebp
.text$mn:0000EE31                 mov     ebp, esp
.text$mn:0000EE33                 mov     eax, [ebp+arg_8]
.text$mn:0000EE36                 shl     eax, 1
.text$mn:0000EE38                 push    eax             ; Size
.text$mn:0000EE39                 mov     ecx, [ebp+Src]
.text$mn:0000EE3C                 push    ecx             ; Src
.text$mn:0000EE3D                 mov     edx, [ebp+Dst]
.text$mn:0000EE40                 push    edx             ; Dst
.text$mn:0000EE41                 call    _memcpy
.text$mn:0000EE46                 add     esp, 0Ch
.text$mn:0000EE49                 pop     ebp
.text$mn:0000EE4A                 retn
.text$mn:0000EE4A _wmemcpy        endp
.text$mn:0000EE4A
.text$mn:0000EE4A ; ---------------------------------------------------------------------------
.text$mn:0000EE4B                 align 4
.text$mn:0000EE4B _text$mn        ends
.text$mn:0000EE4B
.text$mn:0000EE4C ; ===========================================================================
.text$mn:0000EE4C
.text$mn:0000EE4C ; Segment type: Pure code
.text$mn:0000EE4C ; Segment permissions: Read/Execute
.text$mn:0000EE4C _text$mn        segment para public 'CODE' use32
.text$mn:0000EE4C                 assume cs:_text$mn
.text$mn:0000EE4C                 ;org 0EE4Ch
.text$mn:0000EE4C ; COMDAT (pick any)
.text$mn:0000EE4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000EE4C
.text$mn:0000EE4C ; =============== S U B R O U T I N E =======================================
.text$mn:0000EE4C
.text$mn:0000EE4C ; Attributes: bp-based frame
.text$mn:0000EE4C
.text$mn:0000EE4C ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:0000EE4C                 public _wmemmove
.text$mn:0000EE4C _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000EE4C
.text$mn:0000EE4C Dst             = dword ptr  8
.text$mn:0000EE4C Src             = dword ptr  0Ch
.text$mn:0000EE4C arg_8           = dword ptr  10h
.text$mn:0000EE4C
.text$mn:0000EE4C                 push    ebp
.text$mn:0000EE4D                 mov     ebp, esp
.text$mn:0000EE4F                 mov     eax, [ebp+arg_8]
.text$mn:0000EE52                 shl     eax, 1
.text$mn:0000EE54                 push    eax             ; Size
.text$mn:0000EE55                 mov     ecx, [ebp+Src]
.text$mn:0000EE58                 push    ecx             ; Src
.text$mn:0000EE59                 mov     edx, [ebp+Dst]
.text$mn:0000EE5C                 push    edx             ; Dst
.text$mn:0000EE5D                 call    _memmove
.text$mn:0000EE62                 add     esp, 0Ch
.text$mn:0000EE65                 pop     ebp
.text$mn:0000EE66                 retn
.text$mn:0000EE66 _wmemmove       endp
.text$mn:0000EE66
.text$mn:0000EE66 ; ---------------------------------------------------------------------------
.text$mn:0000EE67                 align 4
.text$mn:0000EE67 _text$mn        ends
.text$mn:0000EE67
.xdata$x:0000EE68 ; ===========================================================================
.xdata$x:0000EE68
.xdata$x:0000EE68 ; Segment type: Pure data
.xdata$x:0000EE68 ; Segment permissions: Read
.xdata$x:0000EE68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EE68                 assume cs:_xdata$x
.xdata$x:0000EE68                 ;org 0EE68h
.xdata$x:0000EE68 ; COMDAT (pick associative to section at B184)
.xdata$x:0000EE68 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:0000EE68                                         ; DATA XREF: .xdata$x:0000EE78o
.xdata$x:0000EE69                 db 0FFh
.xdata$x:0000EE6A                 db 0FFh
.xdata$x:0000EE6B                 db 0FFh
.xdata$x:0000EE6C                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000EE70 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000EE70                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000EE71                 db    5
.xdata$x:0000EE72                 db  93h ; ô
.xdata$x:0000EE73                 db  19h
.xdata$x:0000EE74                 db    1
.xdata$x:0000EE75                 db    0
.xdata$x:0000EE76                 db    0
.xdata$x:0000EE77                 db    0
.xdata$x:0000EE78                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:0000EE7C                 db    0
.xdata$x:0000EE7D                 db    0
.xdata$x:0000EE7E                 db    0
.xdata$x:0000EE7F                 db    0
.xdata$x:0000EE80                 db    0
.xdata$x:0000EE81                 db    0
.xdata$x:0000EE82                 db    0
.xdata$x:0000EE83                 db    0
.xdata$x:0000EE84                 db    0
.xdata$x:0000EE85                 db    0
.xdata$x:0000EE86                 db    0
.xdata$x:0000EE87                 db    0
.xdata$x:0000EE88                 db    0
.xdata$x:0000EE89                 db    0
.xdata$x:0000EE8A                 db    0
.xdata$x:0000EE8B                 db    0
.xdata$x:0000EE8C                 db    0
.xdata$x:0000EE8D                 db    0
.xdata$x:0000EE8E                 db    0
.xdata$x:0000EE8F                 db    0
.xdata$x:0000EE90                 db    0
.xdata$x:0000EE91                 db    0
.xdata$x:0000EE92                 db    0
.xdata$x:0000EE93                 db    0
.xdata$x:0000EE93 _xdata$x        ends
.xdata$x:0000EE93
.xdata$x:0000EE94 ; ===========================================================================
.xdata$x:0000EE94
.xdata$x:0000EE94 ; Segment type: Pure data
.xdata$x:0000EE94 ; Segment permissions: Read
.xdata$x:0000EE94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EE94                 assume cs:_xdata$x
.xdata$x:0000EE94                 ;org 0EE94h
.xdata$x:0000EE94 ; COMDAT (pick associative to section at 96D8)
.xdata$x:0000EE94 __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:0000EE94                                         ; DATA XREF: .xdata$x:0000EEA4o
.xdata$x:0000EE95                 db 0FFh
.xdata$x:0000EE96                 db 0FFh
.xdata$x:0000EE97                 db 0FFh
.xdata$x:0000EE98                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:0000EE9C __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:0000EE9C                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:0000EE9D                 db    5
.xdata$x:0000EE9E                 db  93h ; ô
.xdata$x:0000EE9F                 db  19h
.xdata$x:0000EEA0                 db    1
.xdata$x:0000EEA1                 db    0
.xdata$x:0000EEA2                 db    0
.xdata$x:0000EEA3                 db    0
.xdata$x:0000EEA4                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:0000EEA8                 align 20h
.xdata$x:0000EEA8 _xdata$x        ends
.xdata$x:0000EEA8
.xdata$x:0000EEC0 ; ===========================================================================
.xdata$x:0000EEC0
.xdata$x:0000EEC0 ; Segment type: Pure data
.xdata$x:0000EEC0 ; Segment permissions: Read
.xdata$x:0000EEC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EEC0                 assume cs:_xdata$x
.xdata$x:0000EEC0                 ;org 0EEC0h
.xdata$x:0000EEC0 ; COMDAT (pick associative to section at 937C)
.xdata$x:0000EEC0 __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:0000EEC0                                         ; DATA XREF: .xdata$x:0000EED0o
.xdata$x:0000EEC1                 db 0FFh
.xdata$x:0000EEC2                 db 0FFh
.xdata$x:0000EEC3                 db 0FFh
.xdata$x:0000EEC4                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:0000EEC8 __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:0000EEC8                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:0000EEC9                 db    5
.xdata$x:0000EECA                 db  93h ; ô
.xdata$x:0000EECB                 db  19h
.xdata$x:0000EECC                 db    1
.xdata$x:0000EECD                 db    0
.xdata$x:0000EECE                 db    0
.xdata$x:0000EECF                 db    0
.xdata$x:0000EED0                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:0000EED4                 db    0
.xdata$x:0000EED5                 db    0
.xdata$x:0000EED6                 db    0
.xdata$x:0000EED7                 db    0
.xdata$x:0000EED8                 db    0
.xdata$x:0000EED9                 db    0
.xdata$x:0000EEDA                 db    0
.xdata$x:0000EEDB                 db    0
.xdata$x:0000EEDC                 db    0
.xdata$x:0000EEDD                 db    0
.xdata$x:0000EEDE                 db    0
.xdata$x:0000EEDF                 db    0
.xdata$x:0000EEE0                 db    0
.xdata$x:0000EEE1                 db    0
.xdata$x:0000EEE2                 db    0
.xdata$x:0000EEE3                 db    0
.xdata$x:0000EEE4                 db    0
.xdata$x:0000EEE5                 db    0
.xdata$x:0000EEE6                 db    0
.xdata$x:0000EEE7                 db    0
.xdata$x:0000EEE8                 db    0
.xdata$x:0000EEE9                 db    0
.xdata$x:0000EEEA                 db    0
.xdata$x:0000EEEB                 db    0
.xdata$x:0000EEEB _xdata$x        ends
.xdata$x:0000EEEB
.xdata$x:0000EEEC ; ===========================================================================
.xdata$x:0000EEEC
.xdata$x:0000EEEC ; Segment type: Pure data
.xdata$x:0000EEEC ; Segment permissions: Read
.xdata$x:0000EEEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EEEC                 assume cs:_xdata$x
.xdata$x:0000EEEC                 ;org 0EEECh
.xdata$x:0000EEEC ; COMDAT (pick associative to section at 9FD8)
.xdata$x:0000EEEC __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:0000EEEC                                         ; DATA XREF: .xdata$x:0000EF04o
.xdata$x:0000EEED                 db 0FFh
.xdata$x:0000EEEE                 db 0FFh
.xdata$x:0000EEEF                 db 0FFh
.xdata$x:0000EEF0                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:0000EEF4                 db 0FFh
.xdata$x:0000EEF5                 db 0FFh
.xdata$x:0000EEF6                 db 0FFh
.xdata$x:0000EEF7                 db 0FFh
.xdata$x:0000EEF8                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:0000EEFC __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:0000EEFC                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:0000EEFD                 db    5
.xdata$x:0000EEFE                 db  93h ; ô
.xdata$x:0000EEFF                 db  19h
.xdata$x:0000EF00                 db    2
.xdata$x:0000EF01                 db    0
.xdata$x:0000EF02                 db    0
.xdata$x:0000EF03                 db    0
.xdata$x:0000EF04                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:0000EF08                 align 20h
.xdata$x:0000EF08 _xdata$x        ends
.xdata$x:0000EF08
.xdata$x:0000EF20 ; ===========================================================================
.xdata$x:0000EF20
.xdata$x:0000EF20 ; Segment type: Pure data
.xdata$x:0000EF20 ; Segment permissions: Read
.xdata$x:0000EF20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EF20                 assume cs:_xdata$x
.xdata$x:0000EF20                 ;org 0EF20h
.xdata$x:0000EF20 ; COMDAT (pick associative to section at 6BC0)
.xdata$x:0000EF20 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000EF20                                         ; DATA XREF: .xdata$x:0000EF30o
.xdata$x:0000EF21                 db 0FFh
.xdata$x:0000EF22                 db 0FFh
.xdata$x:0000EF23                 db 0FFh
.xdata$x:0000EF24                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000EF28 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000EF28                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000EF29                 db    5
.xdata$x:0000EF2A                 db  93h ; ô
.xdata$x:0000EF2B                 db  19h
.xdata$x:0000EF2C                 db    1
.xdata$x:0000EF2D                 db    0
.xdata$x:0000EF2E                 db    0
.xdata$x:0000EF2F                 db    0
.xdata$x:0000EF30                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000EF34                 db    0
.xdata$x:0000EF35                 db    0
.xdata$x:0000EF36                 db    0
.xdata$x:0000EF37                 db    0
.xdata$x:0000EF38                 db    0
.xdata$x:0000EF39                 db    0
.xdata$x:0000EF3A                 db    0
.xdata$x:0000EF3B                 db    0
.xdata$x:0000EF3C                 db    0
.xdata$x:0000EF3D                 db    0
.xdata$x:0000EF3E                 db    0
.xdata$x:0000EF3F                 db    0
.xdata$x:0000EF40                 db    0
.xdata$x:0000EF41                 db    0
.xdata$x:0000EF42                 db    0
.xdata$x:0000EF43                 db    0
.xdata$x:0000EF44                 db    0
.xdata$x:0000EF45                 db    0
.xdata$x:0000EF46                 db    0
.xdata$x:0000EF47                 db    0
.xdata$x:0000EF48                 db    0
.xdata$x:0000EF49                 db    0
.xdata$x:0000EF4A                 db    0
.xdata$x:0000EF4B                 db    0
.xdata$x:0000EF4B _xdata$x        ends
.xdata$x:0000EF4B
.xdata$x:0000EF4C ; ===========================================================================
.xdata$x:0000EF4C
.xdata$x:0000EF4C ; Segment type: Pure data
.xdata$x:0000EF4C ; Segment permissions: Read
.xdata$x:0000EF4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EF4C                 assume cs:_xdata$x
.xdata$x:0000EF4C                 ;org 0EF4Ch
.xdata$x:0000EF4C ; COMDAT (pick associative to section at 873C)
.xdata$x:0000EF4C __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000EF4C                                         ; DATA XREF: .xdata$x:0000EF5Co
.xdata$x:0000EF4D                 db 0FFh
.xdata$x:0000EF4E                 db 0FFh
.xdata$x:0000EF4F                 db 0FFh
.xdata$x:0000EF50                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000EF54 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000EF54                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000EF55                 db    5
.xdata$x:0000EF56                 db  93h ; ô
.xdata$x:0000EF57                 db  19h
.xdata$x:0000EF58                 db    1
.xdata$x:0000EF59                 db    0
.xdata$x:0000EF5A                 db    0
.xdata$x:0000EF5B                 db    0
.xdata$x:0000EF5C                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:0000EF60                 db    0
.xdata$x:0000EF61                 db    0
.xdata$x:0000EF62                 db    0
.xdata$x:0000EF63                 db    0
.xdata$x:0000EF64                 db    0
.xdata$x:0000EF65                 db    0
.xdata$x:0000EF66                 db    0
.xdata$x:0000EF67                 db    0
.xdata$x:0000EF68                 db    0
.xdata$x:0000EF69                 db    0
.xdata$x:0000EF6A                 db    0
.xdata$x:0000EF6B                 db    0
.xdata$x:0000EF6C                 db    0
.xdata$x:0000EF6D                 db    0
.xdata$x:0000EF6E                 db    0
.xdata$x:0000EF6F                 db    0
.xdata$x:0000EF70                 db    0
.xdata$x:0000EF71                 db    0
.xdata$x:0000EF72                 db    0
.xdata$x:0000EF73                 db    0
.xdata$x:0000EF74                 db    0
.xdata$x:0000EF75                 db    0
.xdata$x:0000EF76                 db    0
.xdata$x:0000EF77                 db    0
.xdata$x:0000EF77 _xdata$x        ends
.xdata$x:0000EF77
.xdata$x:0000EF78 ; ===========================================================================
.xdata$x:0000EF78
.xdata$x:0000EF78 ; Segment type: Pure data
.xdata$x:0000EF78 ; Segment permissions: Read
.xdata$x:0000EF78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EF78                 assume cs:_xdata$x
.xdata$x:0000EF78                 ;org 0EF78h
.xdata$x:0000EF78 ; COMDAT (pick associative to section at 68C4)
.xdata$x:0000EF78 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:0000EF78                                         ; DATA XREF: .xdata$x:0000EF88o
.xdata$x:0000EF79                 db 0FFh
.xdata$x:0000EF7A                 db 0FFh
.xdata$x:0000EF7B                 db 0FFh
.xdata$x:0000EF7C                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:0000EF80 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:0000EF80                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:0000EF81                 db    5
.xdata$x:0000EF82                 db  93h ; ô
.xdata$x:0000EF83                 db  19h
.xdata$x:0000EF84                 db    1
.xdata$x:0000EF85                 db    0
.xdata$x:0000EF86                 db    0
.xdata$x:0000EF87                 db    0
.xdata$x:0000EF88                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000EF8C                 db    0
.xdata$x:0000EF8D                 db    0
.xdata$x:0000EF8E                 db    0
.xdata$x:0000EF8F                 db    0
.xdata$x:0000EF90                 db    0
.xdata$x:0000EF91                 db    0
.xdata$x:0000EF92                 db    0
.xdata$x:0000EF93                 db    0
.xdata$x:0000EF94                 db    0
.xdata$x:0000EF95                 db    0
.xdata$x:0000EF96                 db    0
.xdata$x:0000EF97                 db    0
.xdata$x:0000EF98                 db    0
.xdata$x:0000EF99                 db    0
.xdata$x:0000EF9A                 db    0
.xdata$x:0000EF9B                 db    0
.xdata$x:0000EF9C                 db    0
.xdata$x:0000EF9D                 db    0
.xdata$x:0000EF9E                 db    0
.xdata$x:0000EF9F                 db    0
.xdata$x:0000EFA0                 db    0
.xdata$x:0000EFA1                 db    0
.xdata$x:0000EFA2                 db    0
.xdata$x:0000EFA3                 db    0
.xdata$x:0000EFA3 _xdata$x        ends
.xdata$x:0000EFA3
.xdata$x:0000EFA4 ; ===========================================================================
.xdata$x:0000EFA4
.xdata$x:0000EFA4 ; Segment type: Pure data
.xdata$x:0000EFA4 ; Segment permissions: Read
.xdata$x:0000EFA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EFA4                 assume cs:_xdata$x
.xdata$x:0000EFA4                 ;org 0EFA4h
.xdata$x:0000EFA4 ; COMDAT (pick associative to section at 856C)
.xdata$x:0000EFA4 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000EFA4                                         ; DATA XREF: .xdata$x:0000EFB4o
.xdata$x:0000EFA5                 db 0FFh
.xdata$x:0000EFA6                 db 0FFh
.xdata$x:0000EFA7                 db 0FFh
.xdata$x:0000EFA8                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000EFAC __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000EFAC                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000EFAD                 db    5
.xdata$x:0000EFAE                 db  93h ; ô
.xdata$x:0000EFAF                 db  19h
.xdata$x:0000EFB0                 db    1
.xdata$x:0000EFB1                 db    0
.xdata$x:0000EFB2                 db    0
.xdata$x:0000EFB3                 db    0
.xdata$x:0000EFB4                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:0000EFB8                 db    0
.xdata$x:0000EFB9                 db    0
.xdata$x:0000EFBA                 db    0
.xdata$x:0000EFBB                 db    0
.xdata$x:0000EFBC                 db    0
.xdata$x:0000EFBD                 db    0
.xdata$x:0000EFBE                 db    0
.xdata$x:0000EFBF                 db    0
.xdata$x:0000EFC0                 db    0
.xdata$x:0000EFC1                 db    0
.xdata$x:0000EFC2                 db    0
.xdata$x:0000EFC3                 db    0
.xdata$x:0000EFC4                 db    0
.xdata$x:0000EFC5                 db    0
.xdata$x:0000EFC6                 db    0
.xdata$x:0000EFC7                 db    0
.xdata$x:0000EFC8                 db    0
.xdata$x:0000EFC9                 db    0
.xdata$x:0000EFCA                 db    0
.xdata$x:0000EFCB                 db    0
.xdata$x:0000EFCC                 db    0
.xdata$x:0000EFCD                 db    0
.xdata$x:0000EFCE                 db    0
.xdata$x:0000EFCF                 db    0
.xdata$x:0000EFCF _xdata$x        ends
.xdata$x:0000EFCF
.xdata$x:0000EFD0 ; ===========================================================================
.xdata$x:0000EFD0
.xdata$x:0000EFD0 ; Segment type: Pure data
.xdata$x:0000EFD0 ; Segment permissions: Read
.xdata$x:0000EFD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EFD0                 assume cs:_xdata$x
.xdata$x:0000EFD0                 ;org 0EFD0h
.xdata$x:0000EFD0 ; COMDAT (pick associative to section at 720C)
.xdata$x:0000EFD0 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000EFD0                                         ; DATA XREF: .xdata$x:0000EFE0o
.xdata$x:0000EFD1                 db 0FFh
.xdata$x:0000EFD2                 db 0FFh
.xdata$x:0000EFD3                 db 0FFh
.xdata$x:0000EFD4                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:0000EFD8 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000EFD8                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:0000EFD9                 db    5
.xdata$x:0000EFDA                 db  93h ; ô
.xdata$x:0000EFDB                 db  19h
.xdata$x:0000EFDC                 db    1
.xdata$x:0000EFDD                 db    0
.xdata$x:0000EFDE                 db    0
.xdata$x:0000EFDF                 db    0
.xdata$x:0000EFE0                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:0000EFE4                 db    0
.xdata$x:0000EFE5                 db    0
.xdata$x:0000EFE6                 db    0
.xdata$x:0000EFE7                 db    0
.xdata$x:0000EFE8                 db    0
.xdata$x:0000EFE9                 db    0
.xdata$x:0000EFEA                 db    0
.xdata$x:0000EFEB                 db    0
.xdata$x:0000EFEC                 db    0
.xdata$x:0000EFED                 db    0
.xdata$x:0000EFEE                 db    0
.xdata$x:0000EFEF                 db    0
.xdata$x:0000EFF0                 db    0
.xdata$x:0000EFF1                 db    0
.xdata$x:0000EFF2                 db    0
.xdata$x:0000EFF3                 db    0
.xdata$x:0000EFF4                 db    0
.xdata$x:0000EFF5                 db    0
.xdata$x:0000EFF6                 db    0
.xdata$x:0000EFF7                 db    0
.xdata$x:0000EFF8                 db    0
.xdata$x:0000EFF9                 db    0
.xdata$x:0000EFFA                 db    0
.xdata$x:0000EFFB                 db    0
.xdata$x:0000EFFB _xdata$x        ends
.xdata$x:0000EFFB
.xdata$x:0000EFFC ; ===========================================================================
.xdata$x:0000EFFC
.xdata$x:0000EFFC ; Segment type: Pure data
.xdata$x:0000EFFC ; Segment permissions: Read
.xdata$x:0000EFFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000EFFC                 assume cs:_xdata$x
.xdata$x:0000EFFC                 ;org 0EFFCh
.xdata$x:0000EFFC ; COMDAT (pick associative to section at 8C9C)
.xdata$x:0000EFFC __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000EFFC                                         ; DATA XREF: .xdata$x:0000F00Co
.xdata$x:0000EFFD                 db 0FFh
.xdata$x:0000EFFE                 db 0FFh
.xdata$x:0000EFFF                 db 0FFh
.xdata$x:0000F000                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000F004 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F004                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000F005                 db    5
.xdata$x:0000F006                 db  93h ; ô
.xdata$x:0000F007                 db  19h
.xdata$x:0000F008                 db    1
.xdata$x:0000F009                 db    0
.xdata$x:0000F00A                 db    0
.xdata$x:0000F00B                 db    0
.xdata$x:0000F00C                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:0000F010                 db    0
.xdata$x:0000F011                 db    0
.xdata$x:0000F012                 db    0
.xdata$x:0000F013                 db    0
.xdata$x:0000F014                 db    0
.xdata$x:0000F015                 db    0
.xdata$x:0000F016                 db    0
.xdata$x:0000F017                 db    0
.xdata$x:0000F018                 db    0
.xdata$x:0000F019                 db    0
.xdata$x:0000F01A                 db    0
.xdata$x:0000F01B                 db    0
.xdata$x:0000F01C                 db    0
.xdata$x:0000F01D                 db    0
.xdata$x:0000F01E                 db    0
.xdata$x:0000F01F                 db    0
.xdata$x:0000F020                 db    0
.xdata$x:0000F021                 db    0
.xdata$x:0000F022                 db    0
.xdata$x:0000F023                 db    0
.xdata$x:0000F024                 db    0
.xdata$x:0000F025                 db    0
.xdata$x:0000F026                 db    0
.xdata$x:0000F027                 db    0
.xdata$x:0000F027 _xdata$x        ends
.xdata$x:0000F027
.xdata$x:0000F028 ; ===========================================================================
.xdata$x:0000F028
.xdata$x:0000F028 ; Segment type: Pure data
.xdata$x:0000F028 ; Segment permissions: Read
.xdata$x:0000F028 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F028                 assume cs:_xdata$x
.xdata$x:0000F028                 ;org 0F028h
.xdata$x:0000F028 ; COMDAT (pick associative to section at A3BC)
.xdata$x:0000F028 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000F028                                         ; DATA XREF: .xdata$x:0000F0B0o
.xdata$x:0000F029                 db    0
.xdata$x:0000F02A                 db    0
.xdata$x:0000F02B                 db    0
.xdata$x:0000F02C                 db    0
.xdata$x:0000F02D                 db    0
.xdata$x:0000F02E                 db    0
.xdata$x:0000F02F                 db    0
.xdata$x:0000F030                 db    0
.xdata$x:0000F031                 db    0
.xdata$x:0000F032                 db    0
.xdata$x:0000F033                 db    0
.xdata$x:0000F034                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:0000F038 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000F038                                         ; DATA XREF: .xdata$x:0000F09Co
.xdata$x:0000F039                 db    0
.xdata$x:0000F03A                 db    0
.xdata$x:0000F03B                 db    0
.xdata$x:0000F03C                 db    0
.xdata$x:0000F03D                 db    0
.xdata$x:0000F03E                 db    0
.xdata$x:0000F03F                 db    0
.xdata$x:0000F040                 db    0
.xdata$x:0000F041                 db    0
.xdata$x:0000F042                 db    0
.xdata$x:0000F043                 db    0
.xdata$x:0000F044                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:0000F048 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000F048                                         ; DATA XREF: .xdata$x:0000F070o
.xdata$x:0000F049                 db 0FFh
.xdata$x:0000F04A                 db 0FFh
.xdata$x:0000F04B                 db 0FFh
.xdata$x:0000F04C                 db    0
.xdata$x:0000F04D                 db    0
.xdata$x:0000F04E                 db    0
.xdata$x:0000F04F                 db    0
.xdata$x:0000F050                 db 0FFh
.xdata$x:0000F051                 db 0FFh
.xdata$x:0000F052                 db 0FFh
.xdata$x:0000F053                 db 0FFh
.xdata$x:0000F054                 db    0
.xdata$x:0000F055                 db    0
.xdata$x:0000F056                 db    0
.xdata$x:0000F057                 db    0
.xdata$x:0000F058                 db    1
.xdata$x:0000F059                 db    0
.xdata$x:0000F05A                 db    0
.xdata$x:0000F05B                 db    0
.xdata$x:0000F05C                 db    0
.xdata$x:0000F05D                 db    0
.xdata$x:0000F05E                 db    0
.xdata$x:0000F05F                 db    0
.xdata$x:0000F060                 db    1
.xdata$x:0000F061                 db    0
.xdata$x:0000F062                 db    0
.xdata$x:0000F063                 db    0
.xdata$x:0000F064                 db    0
.xdata$x:0000F065                 db    0
.xdata$x:0000F066                 db    0
.xdata$x:0000F067                 db    0
.xdata$x:0000F068 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000F068                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:0000F069                 db    5
.xdata$x:0000F06A                 db  93h ; ô
.xdata$x:0000F06B                 db  19h
.xdata$x:0000F06C                 db    4
.xdata$x:0000F06D                 db    0
.xdata$x:0000F06E                 db    0
.xdata$x:0000F06F                 db    0
.xdata$x:0000F070                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000F074                 db    2
.xdata$x:0000F075                 db    0
.xdata$x:0000F076                 db    0
.xdata$x:0000F077                 db    0
.xdata$x:0000F078                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000F07C                 db    0
.xdata$x:0000F07D                 db    0
.xdata$x:0000F07E                 db    0
.xdata$x:0000F07F                 db    0
.xdata$x:0000F080                 db    0
.xdata$x:0000F081                 db    0
.xdata$x:0000F082                 db    0
.xdata$x:0000F083                 db    0
.xdata$x:0000F084                 db    0
.xdata$x:0000F085                 db    0
.xdata$x:0000F086                 db    0
.xdata$x:0000F087                 db    0
.xdata$x:0000F088                 db    0
.xdata$x:0000F089                 db    0
.xdata$x:0000F08A                 db    0
.xdata$x:0000F08B                 db    0
.xdata$x:0000F08C __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000F08C                                         ; DATA XREF: .xdata$x:0000F078o
.xdata$x:0000F08D                 db    0
.xdata$x:0000F08E                 db    0
.xdata$x:0000F08F                 db    0
.xdata$x:0000F090                 db    2
.xdata$x:0000F091                 db    0
.xdata$x:0000F092                 db    0
.xdata$x:0000F093                 db    0
.xdata$x:0000F094                 db    3
.xdata$x:0000F095                 db    0
.xdata$x:0000F096                 db    0
.xdata$x:0000F097                 db    0
.xdata$x:0000F098                 db    1
.xdata$x:0000F099                 db    0
.xdata$x:0000F09A                 db    0
.xdata$x:0000F09B                 db    0
.xdata$x:0000F09C                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:0000F0A0                 db    0
.xdata$x:0000F0A1                 db    0
.xdata$x:0000F0A2                 db    0
.xdata$x:0000F0A3                 db    0
.xdata$x:0000F0A4                 db    0
.xdata$x:0000F0A5                 db    0
.xdata$x:0000F0A6                 db    0
.xdata$x:0000F0A7                 db    0
.xdata$x:0000F0A8                 db    3
.xdata$x:0000F0A9                 db    0
.xdata$x:0000F0AA                 db    0
.xdata$x:0000F0AB                 db    0
.xdata$x:0000F0AC                 db    1
.xdata$x:0000F0AD                 db    0
.xdata$x:0000F0AE                 db    0
.xdata$x:0000F0AF                 db    0
.xdata$x:0000F0B0                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:0000F0B0 _xdata$x        ends
.xdata$x:0000F0B0
.xdata$x:0000F0B4 ; ===========================================================================
.xdata$x:0000F0B4
.xdata$x:0000F0B4 ; Segment type: Pure data
.xdata$x:0000F0B4 ; Segment permissions: Read
.xdata$x:0000F0B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F0B4                 assume cs:_xdata$x
.xdata$x:0000F0B4                 ;org 0F0B4h
.xdata$x:0000F0B4 ; COMDAT (pick associative to section at 8100)
.xdata$x:0000F0B4 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000F0B4                                         ; DATA XREF: .xdata$x:0000F0C4o
.xdata$x:0000F0B5                 db 0FFh
.xdata$x:0000F0B6                 db 0FFh
.xdata$x:0000F0B7                 db 0FFh
.xdata$x:0000F0B8                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000F0BC __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000F0BC                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000F0BD                 db    5
.xdata$x:0000F0BE                 db  93h ; ô
.xdata$x:0000F0BF                 db  19h
.xdata$x:0000F0C0                 db    1
.xdata$x:0000F0C1                 db    0
.xdata$x:0000F0C2                 db    0
.xdata$x:0000F0C3                 db    0
.xdata$x:0000F0C4                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:0000F0C8                 align 20h
.xdata$x:0000F0C8 _xdata$x        ends
.xdata$x:0000F0C8
.xdata$x:0000F0E0 ; ===========================================================================
.xdata$x:0000F0E0
.xdata$x:0000F0E0 ; Segment type: Pure data
.xdata$x:0000F0E0 ; Segment permissions: Read
.xdata$x:0000F0E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F0E0                 assume cs:_xdata$x
.xdata$x:0000F0E0                 ;org 0F0E0h
.xdata$x:0000F0E0 ; COMDAT (pick associative to section at DC0C)
.xdata$x:0000F0E0 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000F0E0                                         ; DATA XREF: .xdata$x:0000F0F0o
.xdata$x:0000F0E1                 db 0FFh
.xdata$x:0000F0E2                 db 0FFh
.xdata$x:0000F0E3                 db 0FFh
.xdata$x:0000F0E4                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000F0E8 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000F0E8                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000F0E9                 db    5
.xdata$x:0000F0EA                 db  93h ; ô
.xdata$x:0000F0EB                 db  19h
.xdata$x:0000F0EC                 db    1
.xdata$x:0000F0ED                 db    0
.xdata$x:0000F0EE                 db    0
.xdata$x:0000F0EF                 db    0
.xdata$x:0000F0F0                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000F0F4                 db    0
.xdata$x:0000F0F5                 db    0
.xdata$x:0000F0F6                 db    0
.xdata$x:0000F0F7                 db    0
.xdata$x:0000F0F8                 db    0
.xdata$x:0000F0F9                 db    0
.xdata$x:0000F0FA                 db    0
.xdata$x:0000F0FB                 db    0
.xdata$x:0000F0FC                 db    0
.xdata$x:0000F0FD                 db    0
.xdata$x:0000F0FE                 db    0
.xdata$x:0000F0FF                 db    0
.xdata$x:0000F100                 db    0
.xdata$x:0000F101                 db    0
.xdata$x:0000F102                 db    0
.xdata$x:0000F103                 db    0
.xdata$x:0000F104                 db    0
.xdata$x:0000F105                 db    0
.xdata$x:0000F106                 db    0
.xdata$x:0000F107                 db    0
.xdata$x:0000F108                 db    0
.xdata$x:0000F109                 db    0
.xdata$x:0000F10A                 db    0
.xdata$x:0000F10B                 db    0
.xdata$x:0000F10B _xdata$x        ends
.xdata$x:0000F10B
.xdata$x:0000F10C ; ===========================================================================
.xdata$x:0000F10C
.xdata$x:0000F10C ; Segment type: Pure data
.xdata$x:0000F10C ; Segment permissions: Read
.xdata$x:0000F10C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F10C                 assume cs:_xdata$x
.xdata$x:0000F10C                 ;org 0F10Ch
.xdata$x:0000F10C ; COMDAT (pick associative to section at 929C)
.xdata$x:0000F10C __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000F10C                                         ; DATA XREF: .xdata$x:0000F11Co
.xdata$x:0000F10D                 db 0FFh
.xdata$x:0000F10E                 db 0FFh
.xdata$x:0000F10F                 db 0FFh
.xdata$x:0000F110                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:0000F114 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000F114                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:0000F115                 db    5
.xdata$x:0000F116                 db  93h ; ô
.xdata$x:0000F117                 db  19h
.xdata$x:0000F118                 db    1
.xdata$x:0000F119                 db    0
.xdata$x:0000F11A                 db    0
.xdata$x:0000F11B                 db    0
.xdata$x:0000F11C                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:0000F120                 db    0
.xdata$x:0000F121                 db    0
.xdata$x:0000F122                 db    0
.xdata$x:0000F123                 db    0
.xdata$x:0000F124                 db    0
.xdata$x:0000F125                 db    0
.xdata$x:0000F126                 db    0
.xdata$x:0000F127                 db    0
.xdata$x:0000F128                 db    0
.xdata$x:0000F129                 db    0
.xdata$x:0000F12A                 db    0
.xdata$x:0000F12B                 db    0
.xdata$x:0000F12C                 db    0
.xdata$x:0000F12D                 db    0
.xdata$x:0000F12E                 db    0
.xdata$x:0000F12F                 db    0
.xdata$x:0000F130                 db    0
.xdata$x:0000F131                 db    0
.xdata$x:0000F132                 db    0
.xdata$x:0000F133                 db    0
.xdata$x:0000F134                 db    0
.xdata$x:0000F135                 db    0
.xdata$x:0000F136                 db    0
.xdata$x:0000F137                 db    0
.xdata$x:0000F137 _xdata$x        ends
.xdata$x:0000F137
.xdata$x:0000F138 ; ===========================================================================
.xdata$x:0000F138
.xdata$x:0000F138 ; Segment type: Pure data
.xdata$x:0000F138 ; Segment permissions: Read
.xdata$x:0000F138 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F138                 assume cs:_xdata$x
.xdata$x:0000F138                 ;org 0F138h
.xdata$x:0000F138 ; COMDAT (pick associative to section at 818C)
.xdata$x:0000F138 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000F138                                         ; DATA XREF: .xdata$x:0000F148o
.xdata$x:0000F139                 db 0FFh
.xdata$x:0000F13A                 db 0FFh
.xdata$x:0000F13B                 db 0FFh
.xdata$x:0000F13C                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:0000F140 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000F140                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:0000F141                 db    5
.xdata$x:0000F142                 db  93h ; ô
.xdata$x:0000F143                 db  19h
.xdata$x:0000F144                 db    1
.xdata$x:0000F145                 db    0
.xdata$x:0000F146                 db    0
.xdata$x:0000F147                 db    0
.xdata$x:0000F148                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:0000F14C                 db    0
.xdata$x:0000F14D                 db    0
.xdata$x:0000F14E                 db    0
.xdata$x:0000F14F                 db    0
.xdata$x:0000F150                 db    0
.xdata$x:0000F151                 db    0
.xdata$x:0000F152                 db    0
.xdata$x:0000F153                 db    0
.xdata$x:0000F154                 db    0
.xdata$x:0000F155                 db    0
.xdata$x:0000F156                 db    0
.xdata$x:0000F157                 db    0
.xdata$x:0000F158                 db    0
.xdata$x:0000F159                 db    0
.xdata$x:0000F15A                 db    0
.xdata$x:0000F15B                 db    0
.xdata$x:0000F15C                 db    0
.xdata$x:0000F15D                 db    0
.xdata$x:0000F15E                 db    0
.xdata$x:0000F15F                 db    0
.xdata$x:0000F160                 db    0
.xdata$x:0000F161                 db    0
.xdata$x:0000F162                 db    0
.xdata$x:0000F163                 db    0
.xdata$x:0000F163 _xdata$x        ends
.xdata$x:0000F163
.xdata$x:0000F164 ; ===========================================================================
.xdata$x:0000F164
.xdata$x:0000F164 ; Segment type: Pure data
.xdata$x:0000F164 ; Segment permissions: Read
.xdata$x:0000F164 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F164                 assume cs:_xdata$x
.xdata$x:0000F164                 ;org 0F164h
.xdata$x:0000F164 ; COMDAT (pick associative to section at DCC4)
.xdata$x:0000F164 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000F164                                         ; DATA XREF: .xdata$x:0000F174o
.xdata$x:0000F165                 db 0FFh
.xdata$x:0000F166                 db 0FFh
.xdata$x:0000F167                 db 0FFh
.xdata$x:0000F168                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000F16C __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000F16C                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000F16D                 db    5
.xdata$x:0000F16E                 db  93h ; ô
.xdata$x:0000F16F                 db  19h
.xdata$x:0000F170                 db    1
.xdata$x:0000F171                 db    0
.xdata$x:0000F172                 db    0
.xdata$x:0000F173                 db    0
.xdata$x:0000F174                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000F178                 db    0
.xdata$x:0000F179                 db    0
.xdata$x:0000F17A                 db    0
.xdata$x:0000F17B                 db    0
.xdata$x:0000F17C                 db    0
.xdata$x:0000F17D                 db    0
.xdata$x:0000F17E                 db    0
.xdata$x:0000F17F                 db    0
.xdata$x:0000F180                 db    0
.xdata$x:0000F181                 db    0
.xdata$x:0000F182                 db    0
.xdata$x:0000F183                 db    0
.xdata$x:0000F184                 db    0
.xdata$x:0000F185                 db    0
.xdata$x:0000F186                 db    0
.xdata$x:0000F187                 db    0
.xdata$x:0000F188                 db    0
.xdata$x:0000F189                 db    0
.xdata$x:0000F18A                 db    0
.xdata$x:0000F18B                 db    0
.xdata$x:0000F18C                 db    0
.xdata$x:0000F18D                 db    0
.xdata$x:0000F18E                 db    0
.xdata$x:0000F18F                 db    0
.xdata$x:0000F18F _xdata$x        ends
.xdata$x:0000F18F
.xdata$x:0000F190 ; ===========================================================================
.xdata$x:0000F190
.xdata$x:0000F190 ; Segment type: Pure data
.xdata$x:0000F190 ; Segment permissions: Read
.xdata$x:0000F190 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F190                 assume cs:_xdata$x
.xdata$x:0000F190                 ;org 0F190h
.xdata$x:0000F190 ; COMDAT (pick associative to section at 930C)
.xdata$x:0000F190 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000F190                                         ; DATA XREF: .xdata$x:0000F1A0o
.xdata$x:0000F191                 db 0FFh
.xdata$x:0000F192                 db 0FFh
.xdata$x:0000F193                 db 0FFh
.xdata$x:0000F194                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:0000F198 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000F198                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:0000F199                 db    5
.xdata$x:0000F19A                 db  93h ; ô
.xdata$x:0000F19B                 db  19h
.xdata$x:0000F19C                 db    1
.xdata$x:0000F19D                 db    0
.xdata$x:0000F19E                 db    0
.xdata$x:0000F19F                 db    0
.xdata$x:0000F1A0                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:0000F1A4                 db    0
.xdata$x:0000F1A5                 db    0
.xdata$x:0000F1A6                 db    0
.xdata$x:0000F1A7                 db    0
.xdata$x:0000F1A8                 db    0
.xdata$x:0000F1A9                 db    0
.xdata$x:0000F1AA                 db    0
.xdata$x:0000F1AB                 db    0
.xdata$x:0000F1AC                 db    0
.xdata$x:0000F1AD                 db    0
.xdata$x:0000F1AE                 db    0
.xdata$x:0000F1AF                 db    0
.xdata$x:0000F1B0                 db    0
.xdata$x:0000F1B1                 db    0
.xdata$x:0000F1B2                 db    0
.xdata$x:0000F1B3                 db    0
.xdata$x:0000F1B4                 db    0
.xdata$x:0000F1B5                 db    0
.xdata$x:0000F1B6                 db    0
.xdata$x:0000F1B7                 db    0
.xdata$x:0000F1B8                 db    0
.xdata$x:0000F1B9                 db    0
.xdata$x:0000F1BA                 db    0
.xdata$x:0000F1BB                 db    0
.xdata$x:0000F1BB _xdata$x        ends
.xdata$x:0000F1BB
.xdata$x:0000F1BC ; ===========================================================================
.xdata$x:0000F1BC
.xdata$x:0000F1BC ; Segment type: Pure data
.xdata$x:0000F1BC ; Segment permissions: Read
.xdata$x:0000F1BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F1BC                 assume cs:_xdata$x
.xdata$x:0000F1BC                 ;org 0F1BCh
.xdata$x:0000F1BC ; COMDAT (pick associative to section at 825C)
.xdata$x:0000F1BC __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:0000F1BC                                         ; DATA XREF: .xdata$x:0000F1CCo
.xdata$x:0000F1BD                 db 0FFh
.xdata$x:0000F1BE                 db 0FFh
.xdata$x:0000F1BF                 db 0FFh
.xdata$x:0000F1C0                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:0000F1C4 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000F1C4                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:0000F1C5                 db    5
.xdata$x:0000F1C6                 db  93h ; ô
.xdata$x:0000F1C7                 db  19h
.xdata$x:0000F1C8                 db    1
.xdata$x:0000F1C9                 db    0
.xdata$x:0000F1CA                 db    0
.xdata$x:0000F1CB                 db    0
.xdata$x:0000F1CC                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:0000F1D0                 db    0
.xdata$x:0000F1D1                 db    0
.xdata$x:0000F1D2                 db    0
.xdata$x:0000F1D3                 db    0
.xdata$x:0000F1D4                 db    0
.xdata$x:0000F1D5                 db    0
.xdata$x:0000F1D6                 db    0
.xdata$x:0000F1D7                 db    0
.xdata$x:0000F1D8                 db    0
.xdata$x:0000F1D9                 db    0
.xdata$x:0000F1DA                 db    0
.xdata$x:0000F1DB                 db    0
.xdata$x:0000F1DC                 db    0
.xdata$x:0000F1DD                 db    0
.xdata$x:0000F1DE                 db    0
.xdata$x:0000F1DF                 db    0
.xdata$x:0000F1E0                 db    0
.xdata$x:0000F1E1                 db    0
.xdata$x:0000F1E2                 db    0
.xdata$x:0000F1E3                 db    0
.xdata$x:0000F1E4                 db    0
.xdata$x:0000F1E5                 db    0
.xdata$x:0000F1E6                 db    0
.xdata$x:0000F1E7                 db    0
.xdata$x:0000F1E7 _xdata$x        ends
.xdata$x:0000F1E7
.xdata$x:0000F1E8 ; ===========================================================================
.xdata$x:0000F1E8
.xdata$x:0000F1E8 ; Segment type: Pure data
.xdata$x:0000F1E8 ; Segment permissions: Read
.xdata$x:0000F1E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F1E8                 assume cs:_xdata$x
.xdata$x:0000F1E8                 ;org 0F1E8h
.xdata$x:0000F1E8 ; COMDAT (pick associative to section at DD88)
.xdata$x:0000F1E8 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:0000F1E8                                         ; DATA XREF: .xdata$x:0000F1F8o
.xdata$x:0000F1E9                 db 0FFh
.xdata$x:0000F1EA                 db 0FFh
.xdata$x:0000F1EB                 db 0FFh
.xdata$x:0000F1EC                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:0000F1F0 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:0000F1F0                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:0000F1F1                 db    5
.xdata$x:0000F1F2                 db  93h ; ô
.xdata$x:0000F1F3                 db  19h
.xdata$x:0000F1F4                 db    1
.xdata$x:0000F1F5                 db    0
.xdata$x:0000F1F6                 db    0
.xdata$x:0000F1F7                 db    0
.xdata$x:0000F1F8                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:0000F1FC                 db    0
.xdata$x:0000F1FD                 db    0
.xdata$x:0000F1FE                 db    0
.xdata$x:0000F1FF                 db    0
.xdata$x:0000F200                 db    0
.xdata$x:0000F201                 db    0
.xdata$x:0000F202                 db    0
.xdata$x:0000F203                 db    0
.xdata$x:0000F204                 db    0
.xdata$x:0000F205                 db    0
.xdata$x:0000F206                 db    0
.xdata$x:0000F207                 db    0
.xdata$x:0000F208                 db    0
.xdata$x:0000F209                 db    0
.xdata$x:0000F20A                 db    0
.xdata$x:0000F20B                 db    0
.xdata$x:0000F20C                 db    0
.xdata$x:0000F20D                 db    0
.xdata$x:0000F20E                 db    0
.xdata$x:0000F20F                 db    0
.xdata$x:0000F210                 db    0
.xdata$x:0000F211                 db    0
.xdata$x:0000F212                 db    0
.xdata$x:0000F213                 db    0
.xdata$x:0000F213 _xdata$x        ends
.xdata$x:0000F213
.xdata$x:0000F214 ; ===========================================================================
.xdata$x:0000F214
.xdata$x:0000F214 ; Segment type: Pure data
.xdata$x:0000F214 ; Segment permissions: Read
.xdata$x:0000F214 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F214                 assume cs:_xdata$x
.xdata$x:0000F214                 ;org 0F214h
.xdata$x:0000F214 ; COMDAT (pick associative to section at 9400)
.xdata$x:0000F214 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000F214                                         ; DATA XREF: .xdata$x:0000F224o
.xdata$x:0000F215                 db 0FFh
.xdata$x:0000F216                 db 0FFh
.xdata$x:0000F217                 db 0FFh
.xdata$x:0000F218                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:0000F21C __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:0000F21C                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:0000F21D                 db    5
.xdata$x:0000F21E                 db  93h ; ô
.xdata$x:0000F21F                 db  19h
.xdata$x:0000F220                 db    1
.xdata$x:0000F221                 db    0
.xdata$x:0000F222                 db    0
.xdata$x:0000F223                 db    0
.xdata$x:0000F224                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:0000F228                 align 20h
.xdata$x:0000F228 _xdata$x        ends
.xdata$x:0000F228
.xdata$x:0000F240 ; ===========================================================================
.xdata$x:0000F240
.xdata$x:0000F240 ; Segment type: Pure data
.xdata$x:0000F240 ; Segment permissions: Read
.xdata$x:0000F240 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F240                 assume cs:_xdata$x
.xdata$x:0000F240                 ;org 0F240h
.xdata$x:0000F240 ; COMDAT (pick associative to section at 6C48)
.xdata$x:0000F240 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F240                                         ; DATA XREF: .xdata$x:0000F250o
.xdata$x:0000F241                 db 0FFh
.xdata$x:0000F242                 db 0FFh
.xdata$x:0000F243                 db 0FFh
.xdata$x:0000F244                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000F248 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F248                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000F249                 db    5
.xdata$x:0000F24A                 db  93h ; ô
.xdata$x:0000F24B                 db  19h
.xdata$x:0000F24C                 db    1
.xdata$x:0000F24D                 db    0
.xdata$x:0000F24E                 db    0
.xdata$x:0000F24F                 db    0
.xdata$x:0000F250                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000F254                 db    0
.xdata$x:0000F255                 db    0
.xdata$x:0000F256                 db    0
.xdata$x:0000F257                 db    0
.xdata$x:0000F258                 db    0
.xdata$x:0000F259                 db    0
.xdata$x:0000F25A                 db    0
.xdata$x:0000F25B                 db    0
.xdata$x:0000F25C                 db    0
.xdata$x:0000F25D                 db    0
.xdata$x:0000F25E                 db    0
.xdata$x:0000F25F                 db    0
.xdata$x:0000F260                 db    0
.xdata$x:0000F261                 db    0
.xdata$x:0000F262                 db    0
.xdata$x:0000F263                 db    0
.xdata$x:0000F264                 db    0
.xdata$x:0000F265                 db    0
.xdata$x:0000F266                 db    0
.xdata$x:0000F267                 db    0
.xdata$x:0000F268                 db    0
.xdata$x:0000F269                 db    0
.xdata$x:0000F26A                 db    0
.xdata$x:0000F26B                 db    0
.xdata$x:0000F26B _xdata$x        ends
.xdata$x:0000F26B
.xdata$x:0000F26C ; ===========================================================================
.xdata$x:0000F26C
.xdata$x:0000F26C ; Segment type: Pure data
.xdata$x:0000F26C ; Segment permissions: Read
.xdata$x:0000F26C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F26C                 assume cs:_xdata$x
.xdata$x:0000F26C                 ;org 0F26Ch
.xdata$x:0000F26C ; COMDAT (pick associative to section at 87AC)
.xdata$x:0000F26C __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F26C                                         ; DATA XREF: .xdata$x:0000F27Co
.xdata$x:0000F26D                 db 0FFh
.xdata$x:0000F26E                 db 0FFh
.xdata$x:0000F26F                 db 0FFh
.xdata$x:0000F270                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:0000F274 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F274                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:0000F275                 db    5
.xdata$x:0000F276                 db  93h ; ô
.xdata$x:0000F277                 db  19h
.xdata$x:0000F278                 db    1
.xdata$x:0000F279                 db    0
.xdata$x:0000F27A                 db    0
.xdata$x:0000F27B                 db    0
.xdata$x:0000F27C                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000F280                 db    0
.xdata$x:0000F281                 db    0
.xdata$x:0000F282                 db    0
.xdata$x:0000F283                 db    0
.xdata$x:0000F284                 db    0
.xdata$x:0000F285                 db    0
.xdata$x:0000F286                 db    0
.xdata$x:0000F287                 db    0
.xdata$x:0000F288                 db    0
.xdata$x:0000F289                 db    0
.xdata$x:0000F28A                 db    0
.xdata$x:0000F28B                 db    0
.xdata$x:0000F28C                 db    0
.xdata$x:0000F28D                 db    0
.xdata$x:0000F28E                 db    0
.xdata$x:0000F28F                 db    0
.xdata$x:0000F290                 db    0
.xdata$x:0000F291                 db    0
.xdata$x:0000F292                 db    0
.xdata$x:0000F293                 db    0
.xdata$x:0000F294                 db    0
.xdata$x:0000F295                 db    0
.xdata$x:0000F296                 db    0
.xdata$x:0000F297                 db    0
.xdata$x:0000F297 _xdata$x        ends
.xdata$x:0000F297
.xdata$x:0000F298 ; ===========================================================================
.xdata$x:0000F298
.xdata$x:0000F298 ; Segment type: Pure data
.xdata$x:0000F298 ; Segment permissions: Read
.xdata$x:0000F298 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F298                 assume cs:_xdata$x
.xdata$x:0000F298                 ;org 0F298h
.xdata$x:0000F298 ; COMDAT (pick associative to section at 6940)
.xdata$x:0000F298 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:0000F298                                         ; DATA XREF: .xdata$x:0000F2A8o
.xdata$x:0000F299                 db 0FFh
.xdata$x:0000F29A                 db 0FFh
.xdata$x:0000F29B                 db 0FFh
.xdata$x:0000F29C                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:0000F2A0 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:0000F2A0                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:0000F2A1                 db    5
.xdata$x:0000F2A2                 db  93h ; ô
.xdata$x:0000F2A3                 db  19h
.xdata$x:0000F2A4                 db    1
.xdata$x:0000F2A5                 db    0
.xdata$x:0000F2A6                 db    0
.xdata$x:0000F2A7                 db    0
.xdata$x:0000F2A8                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:0000F2AC                 db    0
.xdata$x:0000F2AD                 db    0
.xdata$x:0000F2AE                 db    0
.xdata$x:0000F2AF                 db    0
.xdata$x:0000F2B0                 db    0
.xdata$x:0000F2B1                 db    0
.xdata$x:0000F2B2                 db    0
.xdata$x:0000F2B3                 db    0
.xdata$x:0000F2B4                 db    0
.xdata$x:0000F2B5                 db    0
.xdata$x:0000F2B6                 db    0
.xdata$x:0000F2B7                 db    0
.xdata$x:0000F2B8                 db    0
.xdata$x:0000F2B9                 db    0
.xdata$x:0000F2BA                 db    0
.xdata$x:0000F2BB                 db    0
.xdata$x:0000F2BC                 db    0
.xdata$x:0000F2BD                 db    0
.xdata$x:0000F2BE                 db    0
.xdata$x:0000F2BF                 db    0
.xdata$x:0000F2C0                 db    0
.xdata$x:0000F2C1                 db    0
.xdata$x:0000F2C2                 db    0
.xdata$x:0000F2C3                 db    0
.xdata$x:0000F2C3 _xdata$x        ends
.xdata$x:0000F2C3
.xdata$x:0000F2C4 ; ===========================================================================
.xdata$x:0000F2C4
.xdata$x:0000F2C4 ; Segment type: Pure data
.xdata$x:0000F2C4 ; Segment permissions: Read
.xdata$x:0000F2C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F2C4                 assume cs:_xdata$x
.xdata$x:0000F2C4                 ;org 0F2C4h
.xdata$x:0000F2C4 ; COMDAT (pick associative to section at 85E4)
.xdata$x:0000F2C4 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F2C4                                         ; DATA XREF: .xdata$x:0000F2D4o
.xdata$x:0000F2C5                 db 0FFh
.xdata$x:0000F2C6                 db 0FFh
.xdata$x:0000F2C7                 db 0FFh
.xdata$x:0000F2C8                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000F2CC __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F2CC                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000F2CD                 db    5
.xdata$x:0000F2CE                 db  93h ; ô
.xdata$x:0000F2CF                 db  19h
.xdata$x:0000F2D0                 db    1
.xdata$x:0000F2D1                 db    0
.xdata$x:0000F2D2                 db    0
.xdata$x:0000F2D3                 db    0
.xdata$x:0000F2D4                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000F2D8                 db    0
.xdata$x:0000F2D9                 db    0
.xdata$x:0000F2DA                 db    0
.xdata$x:0000F2DB                 db    0
.xdata$x:0000F2DC                 db    0
.xdata$x:0000F2DD                 db    0
.xdata$x:0000F2DE                 db    0
.xdata$x:0000F2DF                 db    0
.xdata$x:0000F2E0                 db    0
.xdata$x:0000F2E1                 db    0
.xdata$x:0000F2E2                 db    0
.xdata$x:0000F2E3                 db    0
.xdata$x:0000F2E4                 db    0
.xdata$x:0000F2E5                 db    0
.xdata$x:0000F2E6                 db    0
.xdata$x:0000F2E7                 db    0
.xdata$x:0000F2E8                 db    0
.xdata$x:0000F2E9                 db    0
.xdata$x:0000F2EA                 db    0
.xdata$x:0000F2EB                 db    0
.xdata$x:0000F2EC                 db    0
.xdata$x:0000F2ED                 db    0
.xdata$x:0000F2EE                 db    0
.xdata$x:0000F2EF                 db    0
.xdata$x:0000F2EF _xdata$x        ends
.xdata$x:0000F2EF
.xdata$x:0000F2F0 ; ===========================================================================
.xdata$x:0000F2F0
.xdata$x:0000F2F0 ; Segment type: Pure data
.xdata$x:0000F2F0 ; Segment permissions: Read
.xdata$x:0000F2F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F2F0                 assume cs:_xdata$x
.xdata$x:0000F2F0                 ;org 0F2F0h
.xdata$x:0000F2F0 ; COMDAT (pick associative to section at 7348)
.xdata$x:0000F2F0 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000F2F0                                         ; DATA XREF: .xdata$x:0000F300o
.xdata$x:0000F2F1                 db 0FFh
.xdata$x:0000F2F2                 db 0FFh
.xdata$x:0000F2F3                 db 0FFh
.xdata$x:0000F2F4                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000F2F8 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000F2F8                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000F2F9                 db    5
.xdata$x:0000F2FA                 db  93h ; ô
.xdata$x:0000F2FB                 db  19h
.xdata$x:0000F2FC                 db    1
.xdata$x:0000F2FD                 db    0
.xdata$x:0000F2FE                 db    0
.xdata$x:0000F2FF                 db    0
.xdata$x:0000F300                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:0000F304                 db    0
.xdata$x:0000F305                 db    0
.xdata$x:0000F306                 db    0
.xdata$x:0000F307                 db    0
.xdata$x:0000F308                 db    0
.xdata$x:0000F309                 db    0
.xdata$x:0000F30A                 db    0
.xdata$x:0000F30B                 db    0
.xdata$x:0000F30C                 db    0
.xdata$x:0000F30D                 db    0
.xdata$x:0000F30E                 db    0
.xdata$x:0000F30F                 db    0
.xdata$x:0000F310                 db    0
.xdata$x:0000F311                 db    0
.xdata$x:0000F312                 db    0
.xdata$x:0000F313                 db    0
.xdata$x:0000F314                 db    0
.xdata$x:0000F315                 db    0
.xdata$x:0000F316                 db    0
.xdata$x:0000F317                 db    0
.xdata$x:0000F318                 db    0
.xdata$x:0000F319                 db    0
.xdata$x:0000F31A                 db    0
.xdata$x:0000F31B                 db    0
.xdata$x:0000F31B _xdata$x        ends
.xdata$x:0000F31B
.xdata$x:0000F31C ; ===========================================================================
.xdata$x:0000F31C
.xdata$x:0000F31C ; Segment type: Pure data
.xdata$x:0000F31C ; Segment permissions: Read
.xdata$x:0000F31C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F31C                 assume cs:_xdata$x
.xdata$x:0000F31C                 ;org 0F31Ch
.xdata$x:0000F31C ; COMDAT (pick associative to section at 7490)
.xdata$x:0000F31C __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000F31C                                         ; DATA XREF: .xdata$x:0000F32Co
.xdata$x:0000F31D                 db 0FFh
.xdata$x:0000F31E                 db 0FFh
.xdata$x:0000F31F                 db 0FFh
.xdata$x:0000F320                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000F324 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F324                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000F325                 db    5
.xdata$x:0000F326                 db  93h ; ô
.xdata$x:0000F327                 db  19h
.xdata$x:0000F328                 db    1
.xdata$x:0000F329                 db    0
.xdata$x:0000F32A                 db    0
.xdata$x:0000F32B                 db    0
.xdata$x:0000F32C                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000F330                 db    0
.xdata$x:0000F331                 db    0
.xdata$x:0000F332                 db    0
.xdata$x:0000F333                 db    0
.xdata$x:0000F334                 db    0
.xdata$x:0000F335                 db    0
.xdata$x:0000F336                 db    0
.xdata$x:0000F337                 db    0
.xdata$x:0000F338                 db    0
.xdata$x:0000F339                 db    0
.xdata$x:0000F33A                 db    0
.xdata$x:0000F33B                 db    0
.xdata$x:0000F33C                 db    0
.xdata$x:0000F33D                 db    0
.xdata$x:0000F33E                 db    0
.xdata$x:0000F33F                 db    0
.xdata$x:0000F340                 db    0
.xdata$x:0000F341                 db    0
.xdata$x:0000F342                 db    0
.xdata$x:0000F343                 db    0
.xdata$x:0000F344                 db    0
.xdata$x:0000F345                 db    0
.xdata$x:0000F346                 db    0
.xdata$x:0000F347                 db    0
.xdata$x:0000F347 _xdata$x        ends
.xdata$x:0000F347
.xdata$x:0000F348 ; ===========================================================================
.xdata$x:0000F348
.xdata$x:0000F348 ; Segment type: Pure data
.xdata$x:0000F348 ; Segment permissions: Read
.xdata$x:0000F348 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F348                 assume cs:_xdata$x
.xdata$x:0000F348                 ;org 0F348h
.xdata$x:0000F348 ; COMDAT (pick associative to section at 73F8)
.xdata$x:0000F348 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:0000F348                                         ; DATA XREF: .xdata$x:0000F358o
.xdata$x:0000F349                 db 0FFh
.xdata$x:0000F34A                 db 0FFh
.xdata$x:0000F34B                 db 0FFh
.xdata$x:0000F34C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:0000F350 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000F350                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:0000F351                 db    5
.xdata$x:0000F352                 db  93h ; ô
.xdata$x:0000F353                 db  19h
.xdata$x:0000F354                 db    1
.xdata$x:0000F355                 db    0
.xdata$x:0000F356                 db    0
.xdata$x:0000F357                 db    0
.xdata$x:0000F358                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:0000F35C                 db    0
.xdata$x:0000F35D                 db    0
.xdata$x:0000F35E                 db    0
.xdata$x:0000F35F                 db    0
.xdata$x:0000F360                 db    0
.xdata$x:0000F361                 db    0
.xdata$x:0000F362                 db    0
.xdata$x:0000F363                 db    0
.xdata$x:0000F364                 db    0
.xdata$x:0000F365                 db    0
.xdata$x:0000F366                 db    0
.xdata$x:0000F367                 db    0
.xdata$x:0000F368                 db    0
.xdata$x:0000F369                 db    0
.xdata$x:0000F36A                 db    0
.xdata$x:0000F36B                 db    0
.xdata$x:0000F36C                 db    0
.xdata$x:0000F36D                 db    0
.xdata$x:0000F36E                 db    0
.xdata$x:0000F36F                 db    0
.xdata$x:0000F370                 db    0
.xdata$x:0000F371                 db    0
.xdata$x:0000F372                 db    0
.xdata$x:0000F373                 db    0
.xdata$x:0000F373 _xdata$x        ends
.xdata$x:0000F373
.xdata$x:0000F374 ; ===========================================================================
.xdata$x:0000F374
.xdata$x:0000F374 ; Segment type: Pure data
.xdata$x:0000F374 ; Segment permissions: Read
.xdata$x:0000F374 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F374                 assume cs:_xdata$x
.xdata$x:0000F374                 ;org 0F374h
.xdata$x:0000F374 ; COMDAT (pick associative to section at 72A4)
.xdata$x:0000F374 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:0000F374                                         ; DATA XREF: .xdata$x:0000F384o
.xdata$x:0000F375                 db 0FFh
.xdata$x:0000F376                 db 0FFh
.xdata$x:0000F377                 db 0FFh
.xdata$x:0000F378                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:0000F37C __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:0000F37C                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:0000F37D                 db    5
.xdata$x:0000F37E                 db  93h ; ô
.xdata$x:0000F37F                 db  19h
.xdata$x:0000F380                 db    1
.xdata$x:0000F381                 db    0
.xdata$x:0000F382                 db    0
.xdata$x:0000F383                 db    0
.xdata$x:0000F384                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.xdata$x:0000F388                 align 20h
.xdata$x:0000F388 _xdata$x        ends
.xdata$x:0000F388
.xdata$x:0000F3A0 ; ===========================================================================
.xdata$x:0000F3A0
.xdata$x:0000F3A0 ; Segment type: Pure data
.xdata$x:0000F3A0 ; Segment permissions: Read
.xdata$x:0000F3A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F3A0                 assume cs:_xdata$x
.xdata$x:0000F3A0                 ;org 0F3A0h
.xdata$x:0000F3A0 ; COMDAT (pick associative to section at 9520)
.xdata$x:0000F3A0 __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db 0FFh
.xdata$x:0000F3A0                                         ; DATA XREF: .xdata$x:0000F3B8o
.xdata$x:0000F3A1                 db 0FFh
.xdata$x:0000F3A2                 db 0FFh
.xdata$x:0000F3A3                 db 0FFh
.xdata$x:0000F3A4                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0
.xdata$x:0000F3A8                 db    0
.xdata$x:0000F3A9                 db    0
.xdata$x:0000F3AA                 db    0
.xdata$x:0000F3AB                 db    0
.xdata$x:0000F3AC                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1
.xdata$x:0000F3B0 __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db  22h ; "
.xdata$x:0000F3B0                                         ; DATA XREF: __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z+11o
.xdata$x:0000F3B1                 db    5
.xdata$x:0000F3B2                 db  93h ; ô
.xdata$x:0000F3B3                 db  19h
.xdata$x:0000F3B4                 db    2
.xdata$x:0000F3B5                 db    0
.xdata$x:0000F3B6                 db    0
.xdata$x:0000F3B7                 db    0
.xdata$x:0000F3B8                 dd offset __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.xdata$x:0000F3BC                 db    0
.xdata$x:0000F3BD                 db    0
.xdata$x:0000F3BE                 db    0
.xdata$x:0000F3BF                 db    0
.xdata$x:0000F3C0                 db    0
.xdata$x:0000F3C1                 db    0
.xdata$x:0000F3C2                 db    0
.xdata$x:0000F3C3                 db    0
.xdata$x:0000F3C4                 db    0
.xdata$x:0000F3C5                 db    0
.xdata$x:0000F3C6                 db    0
.xdata$x:0000F3C7                 db    0
.xdata$x:0000F3C8                 db    0
.xdata$x:0000F3C9                 db    0
.xdata$x:0000F3CA                 db    0
.xdata$x:0000F3CB                 db    0
.xdata$x:0000F3CC                 db    0
.xdata$x:0000F3CD                 db    0
.xdata$x:0000F3CE                 db    0
.xdata$x:0000F3CF                 db    0
.xdata$x:0000F3D0                 db    0
.xdata$x:0000F3D1                 db    0
.xdata$x:0000F3D2                 db    0
.xdata$x:0000F3D3                 db    0
.xdata$x:0000F3D3 _xdata$x        ends
.xdata$x:0000F3D3
.xdata$x:0000F3D4 ; ===========================================================================
.xdata$x:0000F3D4
.xdata$x:0000F3D4 ; Segment type: Pure data
.xdata$x:0000F3D4 ; Segment permissions: Read
.xdata$x:0000F3D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F3D4                 assume cs:_xdata$x
.xdata$x:0000F3D4                 ;org 0F3D4h
.xdata$x:0000F3D4 ; COMDAT (pick associative to section at 8D18)
.xdata$x:0000F3D4 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000F3D4                                         ; DATA XREF: .xdata$x:0000F3E4o
.xdata$x:0000F3D5                 db 0FFh
.xdata$x:0000F3D6                 db 0FFh
.xdata$x:0000F3D7                 db 0FFh
.xdata$x:0000F3D8                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000F3DC __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F3DC                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000F3DD                 db    5
.xdata$x:0000F3DE                 db  93h ; ô
.xdata$x:0000F3DF                 db  19h
.xdata$x:0000F3E0                 db    1
.xdata$x:0000F3E1                 db    0
.xdata$x:0000F3E2                 db    0
.xdata$x:0000F3E3                 db    0
.xdata$x:0000F3E4                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000F3E8                 align 20h
.xdata$x:0000F3E8 _xdata$x        ends
.xdata$x:0000F3E8
.xdata$x:0000F400 ; ===========================================================================
.xdata$x:0000F400
.xdata$x:0000F400 ; Segment type: Pure data
.xdata$x:0000F400 ; Segment permissions: Read
.xdata$x:0000F400 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F400                 assume cs:_xdata$x
.xdata$x:0000F400                 ;org 0F400h
.xdata$x:0000F400 ; COMDAT (pick associative to section at E904)
.xdata$x:0000F400 __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db  22h ; "
.xdata$x:0000F400                                         ; DATA XREF: __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z+14o
.xdata$x:0000F401                 db    5
.xdata$x:0000F402                 db  93h ; ô
.xdata$x:0000F403                 db  19h
.xdata$x:0000F404                 db  0Eh
.xdata$x:0000F405                 db    0
.xdata$x:0000F406                 db    0
.xdata$x:0000F407                 db    0
.xdata$x:0000F408                 dd offset __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.xdata$x:0000F40C                 db    0
.xdata$x:0000F40D                 db    0
.xdata$x:0000F40E                 db    0
.xdata$x:0000F40F                 db    0
.xdata$x:0000F410                 db    0
.xdata$x:0000F411                 db    0
.xdata$x:0000F412                 db    0
.xdata$x:0000F413                 db    0
.xdata$x:0000F414                 db    0
.xdata$x:0000F415                 db    0
.xdata$x:0000F416                 db    0
.xdata$x:0000F417                 db    0
.xdata$x:0000F418                 db    0
.xdata$x:0000F419                 db    0
.xdata$x:0000F41A                 db    0
.xdata$x:0000F41B                 db    0
.xdata$x:0000F41C                 db    0
.xdata$x:0000F41D                 db    0
.xdata$x:0000F41E                 db    0
.xdata$x:0000F41F                 db    0
.xdata$x:0000F420                 db    0
.xdata$x:0000F421                 db    0
.xdata$x:0000F422                 db    0
.xdata$x:0000F423                 db    0
.xdata$x:0000F424 __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db 0FFh
.xdata$x:0000F424                                         ; DATA XREF: .xdata$x:0000F408o
.xdata$x:0000F425                 db 0FFh
.xdata$x:0000F426                 db 0FFh
.xdata$x:0000F427                 db 0FFh
.xdata$x:0000F428                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0
.xdata$x:0000F42C                 align 10h
.xdata$x:0000F430                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1
.xdata$x:0000F434                 db    1
.xdata$x:0000F435                 db    0
.xdata$x:0000F436                 db    0
.xdata$x:0000F437                 db    0
.xdata$x:0000F438                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2
.xdata$x:0000F43C                 db    2
.xdata$x:0000F43D                 db    0
.xdata$x:0000F43E                 db    0
.xdata$x:0000F43F                 db    0
.xdata$x:0000F440                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3
.xdata$x:0000F444                 db    3
.xdata$x:0000F445                 db    0
.xdata$x:0000F446                 db    0
.xdata$x:0000F447                 db    0
.xdata$x:0000F448                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4
.xdata$x:0000F44C                 db    4
.xdata$x:0000F44D                 db    0
.xdata$x:0000F44E                 db    0
.xdata$x:0000F44F                 db    0
.xdata$x:0000F450                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5
.xdata$x:0000F454                 db    3
.xdata$x:0000F455                 db    0
.xdata$x:0000F456                 db    0
.xdata$x:0000F457                 db    0
.xdata$x:0000F458                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6
.xdata$x:0000F45C                 db    6
.xdata$x:0000F45D                 db    0
.xdata$x:0000F45E                 db    0
.xdata$x:0000F45F                 db    0
.xdata$x:0000F460                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7
.xdata$x:0000F464                 db    7
.xdata$x:0000F465                 db    0
.xdata$x:0000F466                 db    0
.xdata$x:0000F467                 db    0
.xdata$x:0000F468                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8
.xdata$x:0000F46C                 db    3
.xdata$x:0000F46D                 db    0
.xdata$x:0000F46E                 db    0
.xdata$x:0000F46F                 db    0
.xdata$x:0000F470                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9
.xdata$x:0000F474                 db    9
.xdata$x:0000F475                 db    0
.xdata$x:0000F476                 db    0
.xdata$x:0000F477                 db    0
.xdata$x:0000F478                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10
.xdata$x:0000F47C                 db    3
.xdata$x:0000F47D                 db    0
.xdata$x:0000F47E                 db    0
.xdata$x:0000F47F                 db    0
.xdata$x:0000F480                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11
.xdata$x:0000F484                 db  0Bh
.xdata$x:0000F485                 db    0
.xdata$x:0000F486                 db    0
.xdata$x:0000F487                 db    0
.xdata$x:0000F488                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12
.xdata$x:0000F48C                 db  0Ch
.xdata$x:0000F48D                 db    0
.xdata$x:0000F48E                 db    0
.xdata$x:0000F48F                 db    0
.xdata$x:0000F490                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13
.xdata$x:0000F490 _xdata$x        ends
.xdata$x:0000F490
.xdata$x:0000F494 ; ===========================================================================
.xdata$x:0000F494
.xdata$x:0000F494 ; Segment type: Pure data
.xdata$x:0000F494 ; Segment permissions: Read
.xdata$x:0000F494 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F494                 assume cs:_xdata$x
.xdata$x:0000F494                 ;org 0F494h
.xdata$x:0000F494 ; COMDAT (pick associative to section at CBE4)
.xdata$x:0000F494 __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000F494                                         ; DATA XREF: .xdata$x:0000F4A4o
.xdata$x:0000F495                 db 0FFh
.xdata$x:0000F496                 db 0FFh
.xdata$x:0000F497                 db 0FFh
.xdata$x:0000F498                 dd offset __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000F49C __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000F49C                                         ; DATA XREF: __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000F49D                 db    5
.xdata$x:0000F49E                 db  93h ; ô
.xdata$x:0000F49F                 db  19h
.xdata$x:0000F4A0                 db    1
.xdata$x:0000F4A1                 db    0
.xdata$x:0000F4A2                 db    0
.xdata$x:0000F4A3                 db    0
.xdata$x:0000F4A4                 dd offset __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000F4A8                 align 20h
.xdata$x:0000F4A8 _xdata$x        ends
.xdata$x:0000F4A8
.xdata$x:0000F4C0 ; ===========================================================================
.xdata$x:0000F4C0
.xdata$x:0000F4C0 ; Segment type: Pure data
.xdata$x:0000F4C0 ; Segment permissions: Read
.xdata$x:0000F4C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F4C0                 assume cs:_xdata$x
.xdata$x:0000F4C0                 ;org 0F4C0h
.xdata$x:0000F4C0 ; COMDAT (pick associative to section at D404)
.xdata$x:0000F4C0 __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000F4C0                                         ; DATA XREF: .xdata$x:0000F4D0o
.xdata$x:0000F4C1                 db 0FFh
.xdata$x:0000F4C2                 db 0FFh
.xdata$x:0000F4C3                 db 0FFh
.xdata$x:0000F4C4                 dd offset __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000F4C8 __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000F4C8                                         ; DATA XREF: __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000F4C9                 db    5
.xdata$x:0000F4CA                 db  93h ; ô
.xdata$x:0000F4CB                 db  19h
.xdata$x:0000F4CC                 db    1
.xdata$x:0000F4CD                 db    0
.xdata$x:0000F4CE                 db    0
.xdata$x:0000F4CF                 db    0
.xdata$x:0000F4D0                 dd offset __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000F4D4                 db    0
.xdata$x:0000F4D5                 db    0
.xdata$x:0000F4D6                 db    0
.xdata$x:0000F4D7                 db    0
.xdata$x:0000F4D8                 db    0
.xdata$x:0000F4D9                 db    0
.xdata$x:0000F4DA                 db    0
.xdata$x:0000F4DB                 db    0
.xdata$x:0000F4DC                 db    0
.xdata$x:0000F4DD                 db    0
.xdata$x:0000F4DE                 db    0
.xdata$x:0000F4DF                 db    0
.xdata$x:0000F4E0                 db    0
.xdata$x:0000F4E1                 db    0
.xdata$x:0000F4E2                 db    0
.xdata$x:0000F4E3                 db    0
.xdata$x:0000F4E4                 db    0
.xdata$x:0000F4E5                 db    0
.xdata$x:0000F4E6                 db    0
.xdata$x:0000F4E7                 db    0
.xdata$x:0000F4E8                 db    0
.xdata$x:0000F4E9                 db    0
.xdata$x:0000F4EA                 db    0
.xdata$x:0000F4EB                 db    0
.xdata$x:0000F4EB _xdata$x        ends
.xdata$x:0000F4EB
.xdata$x:0000F4EC ; ===========================================================================
.xdata$x:0000F4EC
.xdata$x:0000F4EC ; Segment type: Pure data
.xdata$x:0000F4EC ; Segment permissions: Read
.xdata$x:0000F4EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F4EC                 assume cs:_xdata$x
.xdata$x:0000F4EC                 ;org 0F4ECh
.xdata$x:0000F4EC ; COMDAT (pick associative to section at A57C)
.xdata$x:0000F4EC __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000F4EC                                         ; DATA XREF: .xdata$x:0000F574o
.xdata$x:0000F4ED                 db    0
.xdata$x:0000F4EE                 db    0
.xdata$x:0000F4EF                 db    0
.xdata$x:0000F4F0                 db    0
.xdata$x:0000F4F1                 db    0
.xdata$x:0000F4F2                 db    0
.xdata$x:0000F4F3                 db    0
.xdata$x:0000F4F4                 db    0
.xdata$x:0000F4F5                 db    0
.xdata$x:0000F4F6                 db    0
.xdata$x:0000F4F7                 db    0
.xdata$x:0000F4F8                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:0000F4FC __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000F4FC                                         ; DATA XREF: .xdata$x:0000F560o
.xdata$x:0000F4FD                 db    0
.xdata$x:0000F4FE                 db    0
.xdata$x:0000F4FF                 db    0
.xdata$x:0000F500                 db    0
.xdata$x:0000F501                 db    0
.xdata$x:0000F502                 db    0
.xdata$x:0000F503                 db    0
.xdata$x:0000F504                 db    0
.xdata$x:0000F505                 db    0
.xdata$x:0000F506                 db    0
.xdata$x:0000F507                 db    0
.xdata$x:0000F508                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:0000F50C __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000F50C                                         ; DATA XREF: .xdata$x:0000F534o
.xdata$x:0000F50D                 db 0FFh
.xdata$x:0000F50E                 db 0FFh
.xdata$x:0000F50F                 db 0FFh
.xdata$x:0000F510                 db    0
.xdata$x:0000F511                 db    0
.xdata$x:0000F512                 db    0
.xdata$x:0000F513                 db    0
.xdata$x:0000F514                 db 0FFh
.xdata$x:0000F515                 db 0FFh
.xdata$x:0000F516                 db 0FFh
.xdata$x:0000F517                 db 0FFh
.xdata$x:0000F518                 db    0
.xdata$x:0000F519                 db    0
.xdata$x:0000F51A                 db    0
.xdata$x:0000F51B                 db    0
.xdata$x:0000F51C                 db    1
.xdata$x:0000F51D                 db    0
.xdata$x:0000F51E                 db    0
.xdata$x:0000F51F                 db    0
.xdata$x:0000F520                 db    0
.xdata$x:0000F521                 db    0
.xdata$x:0000F522                 db    0
.xdata$x:0000F523                 db    0
.xdata$x:0000F524                 db    1
.xdata$x:0000F525                 db    0
.xdata$x:0000F526                 db    0
.xdata$x:0000F527                 db    0
.xdata$x:0000F528                 db    0
.xdata$x:0000F529                 db    0
.xdata$x:0000F52A                 db    0
.xdata$x:0000F52B                 db    0
.xdata$x:0000F52C __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000F52C                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:0000F52D                 db    5
.xdata$x:0000F52E                 db  93h ; ô
.xdata$x:0000F52F                 db  19h
.xdata$x:0000F530                 db    4
.xdata$x:0000F531                 db    0
.xdata$x:0000F532                 db    0
.xdata$x:0000F533                 db    0
.xdata$x:0000F534                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000F538                 db    2
.xdata$x:0000F539                 db    0
.xdata$x:0000F53A                 db    0
.xdata$x:0000F53B                 db    0
.xdata$x:0000F53C                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000F540                 db    0
.xdata$x:0000F541                 db    0
.xdata$x:0000F542                 db    0
.xdata$x:0000F543                 db    0
.xdata$x:0000F544                 db    0
.xdata$x:0000F545                 db    0
.xdata$x:0000F546                 db    0
.xdata$x:0000F547                 db    0
.xdata$x:0000F548                 db    0
.xdata$x:0000F549                 db    0
.xdata$x:0000F54A                 db    0
.xdata$x:0000F54B                 db    0
.xdata$x:0000F54C                 db    0
.xdata$x:0000F54D                 db    0
.xdata$x:0000F54E                 db    0
.xdata$x:0000F54F                 db    0
.xdata$x:0000F550 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:0000F550                                         ; DATA XREF: .xdata$x:0000F53Co
.xdata$x:0000F551                 db    0
.xdata$x:0000F552                 db    0
.xdata$x:0000F553                 db    0
.xdata$x:0000F554                 db    2
.xdata$x:0000F555                 db    0
.xdata$x:0000F556                 db    0
.xdata$x:0000F557                 db    0
.xdata$x:0000F558                 db    3
.xdata$x:0000F559                 db    0
.xdata$x:0000F55A                 db    0
.xdata$x:0000F55B                 db    0
.xdata$x:0000F55C                 db    1
.xdata$x:0000F55D                 db    0
.xdata$x:0000F55E                 db    0
.xdata$x:0000F55F                 db    0
.xdata$x:0000F560                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:0000F564                 db    0
.xdata$x:0000F565                 db    0
.xdata$x:0000F566                 db    0
.xdata$x:0000F567                 db    0
.xdata$x:0000F568                 db    0
.xdata$x:0000F569                 db    0
.xdata$x:0000F56A                 db    0
.xdata$x:0000F56B                 db    0
.xdata$x:0000F56C                 db    3
.xdata$x:0000F56D                 db    0
.xdata$x:0000F56E                 db    0
.xdata$x:0000F56F                 db    0
.xdata$x:0000F570                 db    1
.xdata$x:0000F571                 db    0
.xdata$x:0000F572                 db    0
.xdata$x:0000F573                 db    0
.xdata$x:0000F574                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:0000F574 _xdata$x        ends
.xdata$x:0000F574
.xdata$x:0000F578 ; ===========================================================================
.xdata$x:0000F578
.xdata$x:0000F578 ; Segment type: Pure data
.xdata$x:0000F578 ; Segment permissions: Read
.xdata$x:0000F578 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F578                 assume cs:_xdata$x
.xdata$x:0000F578                 ;org 0F578h
.xdata$x:0000F578 ; COMDAT (pick associative to section at B704)
.xdata$x:0000F578 __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db 0FFh
.xdata$x:0000F578                                         ; DATA XREF: .xdata$x:0000F590o
.xdata$x:0000F579                 db 0FFh
.xdata$x:0000F57A                 db 0FFh
.xdata$x:0000F57B                 db 0FFh
.xdata$x:0000F57C                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0
.xdata$x:0000F580                 db    0
.xdata$x:0000F581                 db    0
.xdata$x:0000F582                 db    0
.xdata$x:0000F583                 db    0
.xdata$x:0000F584                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1
.xdata$x:0000F588 __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db  22h ; "
.xdata$x:0000F588                                         ; DATA XREF: __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z+11o
.xdata$x:0000F589                 db    5
.xdata$x:0000F58A                 db  93h ; ô
.xdata$x:0000F58B                 db  19h
.xdata$x:0000F58C                 db    2
.xdata$x:0000F58D                 db    0
.xdata$x:0000F58E                 db    0
.xdata$x:0000F58F                 db    0
.xdata$x:0000F590                 dd offset __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.xdata$x:0000F594                 db    0
.xdata$x:0000F595                 db    0
.xdata$x:0000F596                 db    0
.xdata$x:0000F597                 db    0
.xdata$x:0000F598                 db    0
.xdata$x:0000F599                 db    0
.xdata$x:0000F59A                 db    0
.xdata$x:0000F59B                 db    0
.xdata$x:0000F59C                 db    0
.xdata$x:0000F59D                 db    0
.xdata$x:0000F59E                 db    0
.xdata$x:0000F59F                 db    0
.xdata$x:0000F5A0                 db    0
.xdata$x:0000F5A1                 db    0
.xdata$x:0000F5A2                 db    0
.xdata$x:0000F5A3                 db    0
.xdata$x:0000F5A4                 db    0
.xdata$x:0000F5A5                 db    0
.xdata$x:0000F5A6                 db    0
.xdata$x:0000F5A7                 db    0
.xdata$x:0000F5A8                 db    0
.xdata$x:0000F5A9                 db    0
.xdata$x:0000F5AA                 db    0
.xdata$x:0000F5AB                 db    0
.xdata$x:0000F5AB _xdata$x        ends
.xdata$x:0000F5AB
.xdata$x:0000F5AC ; ===========================================================================
.xdata$x:0000F5AC
.xdata$x:0000F5AC ; Segment type: Pure data
.xdata$x:0000F5AC ; Segment permissions: Read
.xdata$x:0000F5AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F5AC                 assume cs:_xdata$x
.xdata$x:0000F5AC                 ;org 0F5ACh
.xdata$x:0000F5AC ; COMDAT (pick associative to section at 8008)
.xdata$x:0000F5AC __unwindtable$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db 0FFh
.xdata$x:0000F5AC                                         ; DATA XREF: .xdata$x:0000F5C4o
.xdata$x:0000F5AD                 db 0FFh
.xdata$x:0000F5AE                 db 0FFh
.xdata$x:0000F5AF                 db 0FFh
.xdata$x:0000F5B0                 dd offset __unwindfunclet$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
.xdata$x:0000F5B4                 align 8
.xdata$x:0000F5B8                 dd offset __unwindfunclet$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1
.xdata$x:0000F5BC __ehfuncinfo$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db  22h ; "
.xdata$x:0000F5BC                                         ; DATA XREF: __ehhandler$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+11o
.xdata$x:0000F5BD                 db    5
.xdata$x:0000F5BE                 db  93h ; ô
.xdata$x:0000F5BF                 db  19h
.xdata$x:0000F5C0                 db    2
.xdata$x:0000F5C1                 db    0
.xdata$x:0000F5C2                 db    0
.xdata$x:0000F5C3                 db    0
.xdata$x:0000F5C4                 dd offset __unwindtable$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.xdata$x:0000F5C8                 align 20h
.xdata$x:0000F5C8 _xdata$x        ends
.xdata$x:0000F5C8
.xdata$x:0000F5E0 ; ===========================================================================
.xdata$x:0000F5E0
.xdata$x:0000F5E0 ; Segment type: Pure data
.xdata$x:0000F5E0 ; Segment permissions: Read
.xdata$x:0000F5E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F5E0                 assume cs:_xdata$x
.xdata$x:0000F5E0                 ;org 0F5E0h
.xdata$x:0000F5E0 ; COMDAT (pick associative to section at 91F4)
.xdata$x:0000F5E0 __unwindtable$??1TiXmlDocument@@UAE@XZ db 0FFh
.xdata$x:0000F5E0                                         ; DATA XREF: .xdata$x:0000F5F8o
.xdata$x:0000F5E1                 db 0FFh
.xdata$x:0000F5E2                 db 0FFh
.xdata$x:0000F5E3                 db 0FFh
.xdata$x:0000F5E4                 dd offset __unwindfunclet$??1TiXmlDocument@@UAE@XZ$0
.xdata$x:0000F5E8                 db    0
.xdata$x:0000F5E9                 db    0
.xdata$x:0000F5EA                 db    0
.xdata$x:0000F5EB                 db    0
.xdata$x:0000F5EC                 dd offset __unwindfunclet$??1TiXmlDocument@@UAE@XZ$1
.xdata$x:0000F5F0 __ehfuncinfo$??1TiXmlDocument@@UAE@XZ db  22h ; "
.xdata$x:0000F5F0                                         ; DATA XREF: __ehhandler$??1TiXmlDocument@@UAE@XZ+11o
.xdata$x:0000F5F1                 db    5
.xdata$x:0000F5F2                 db  93h ; ô
.xdata$x:0000F5F3                 db  19h
.xdata$x:0000F5F4                 db    2
.xdata$x:0000F5F5                 db    0
.xdata$x:0000F5F6                 db    0
.xdata$x:0000F5F7                 db    0
.xdata$x:0000F5F8                 dd offset __unwindtable$??1TiXmlDocument@@UAE@XZ
.xdata$x:0000F5FC                 db    0
.xdata$x:0000F5FD                 db    0
.xdata$x:0000F5FE                 db    0
.xdata$x:0000F5FF                 db    0
.xdata$x:0000F600                 db    0
.xdata$x:0000F601                 db    0
.xdata$x:0000F602                 db    0
.xdata$x:0000F603                 db    0
.xdata$x:0000F604                 db    0
.xdata$x:0000F605                 db    0
.xdata$x:0000F606                 db    0
.xdata$x:0000F607                 db    0
.xdata$x:0000F608                 db    0
.xdata$x:0000F609                 db    0
.xdata$x:0000F60A                 db    0
.xdata$x:0000F60B                 db    0
.xdata$x:0000F60C                 db    0
.xdata$x:0000F60D                 db    0
.xdata$x:0000F60E                 db    0
.xdata$x:0000F60F                 db    0
.xdata$x:0000F610                 db    0
.xdata$x:0000F611                 db    0
.xdata$x:0000F612                 db    0
.xdata$x:0000F613                 db    0
.xdata$x:0000F613 _xdata$x        ends
.xdata$x:0000F613
.xdata$x:0000F614 ; ===========================================================================
.xdata$x:0000F614
.xdata$x:0000F614 ; Segment type: Pure data
.xdata$x:0000F614 ; Segment permissions: Read
.xdata$x:0000F614 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F614                 assume cs:_xdata$x
.xdata$x:0000F614                 ;org 0F614h
.xdata$x:0000F614 ; COMDAT (pick associative to section at D0B0)
.xdata$x:0000F614 __unwindtable$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z db 0FFh
.xdata$x:0000F614                                         ; DATA XREF: .xdata$x:0000F624o
.xdata$x:0000F615                 db 0FFh
.xdata$x:0000F616                 db 0FFh
.xdata$x:0000F617                 db 0FFh
.xdata$x:0000F618                 dd offset __unwindfunclet$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z$0
.xdata$x:0000F61C __ehfuncinfo$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z db  22h ; "
.xdata$x:0000F61C                                         ; DATA XREF: __ehhandler$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z+11o
.xdata$x:0000F61D                 db    5
.xdata$x:0000F61E                 db  93h ; ô
.xdata$x:0000F61F                 db  19h
.xdata$x:0000F620                 db    1
.xdata$x:0000F621                 db    0
.xdata$x:0000F622                 db    0
.xdata$x:0000F623                 db    0
.xdata$x:0000F624                 dd offset __unwindtable$?construct@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z
.xdata$x:0000F628                 align 20h
.xdata$x:0000F628 _xdata$x        ends
.xdata$x:0000F628
.xdata$x:0000F640 ; ===========================================================================
.xdata$x:0000F640
.xdata$x:0000F640 ; Segment type: Pure data
.xdata$x:0000F640 ; Segment permissions: Read
.xdata$x:0000F640 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F640                 assume cs:_xdata$x
.xdata$x:0000F640                 ;org 0F640h
.xdata$x:0000F640 ; COMDAT (pick associative to section at 6FE4)
.xdata$x:0000F640 __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F640                                         ; DATA XREF: .xdata$x:0000F650o
.xdata$x:0000F641                 db 0FFh
.xdata$x:0000F642                 db 0FFh
.xdata$x:0000F643                 db 0FFh
.xdata$x:0000F644                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000F648 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F648                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000F649                 db    5
.xdata$x:0000F64A                 db  93h ; ô
.xdata$x:0000F64B                 db  19h
.xdata$x:0000F64C                 db    1
.xdata$x:0000F64D                 db    0
.xdata$x:0000F64E                 db    0
.xdata$x:0000F64F                 db    0
.xdata$x:0000F650                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000F654                 db    0
.xdata$x:0000F655                 db    0
.xdata$x:0000F656                 db    0
.xdata$x:0000F657                 db    0
.xdata$x:0000F658                 db    0
.xdata$x:0000F659                 db    0
.xdata$x:0000F65A                 db    0
.xdata$x:0000F65B                 db    0
.xdata$x:0000F65C                 db    0
.xdata$x:0000F65D                 db    0
.xdata$x:0000F65E                 db    0
.xdata$x:0000F65F                 db    0
.xdata$x:0000F660                 db    0
.xdata$x:0000F661                 db    0
.xdata$x:0000F662                 db    0
.xdata$x:0000F663                 db    0
.xdata$x:0000F664                 db    0
.xdata$x:0000F665                 db    0
.xdata$x:0000F666                 db    0
.xdata$x:0000F667                 db    0
.xdata$x:0000F668                 db    0
.xdata$x:0000F669                 db    0
.xdata$x:0000F66A                 db    0
.xdata$x:0000F66B                 db    0
.xdata$x:0000F66B _xdata$x        ends
.xdata$x:0000F66B
.xdata$x:0000F66C ; ===========================================================================
.xdata$x:0000F66C
.xdata$x:0000F66C ; Segment type: Pure data
.xdata$x:0000F66C ; Segment permissions: Read
.xdata$x:0000F66C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F66C                 assume cs:_xdata$x
.xdata$x:0000F66C                 ;org 0F66Ch
.xdata$x:0000F66C ; COMDAT (pick associative to section at 8C2C)
.xdata$x:0000F66C __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F66C                                         ; DATA XREF: .xdata$x:0000F67Co
.xdata$x:0000F66D                 db 0FFh
.xdata$x:0000F66E                 db 0FFh
.xdata$x:0000F66F                 db 0FFh
.xdata$x:0000F670                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000F674 __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F674                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000F675                 db    5
.xdata$x:0000F676                 db  93h ; ô
.xdata$x:0000F677                 db  19h
.xdata$x:0000F678                 db    1
.xdata$x:0000F679                 db    0
.xdata$x:0000F67A                 db    0
.xdata$x:0000F67B                 db    0
.xdata$x:0000F67C                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:0000F680                 db    0
.xdata$x:0000F681                 db    0
.xdata$x:0000F682                 db    0
.xdata$x:0000F683                 db    0
.xdata$x:0000F684                 db    0
.xdata$x:0000F685                 db    0
.xdata$x:0000F686                 db    0
.xdata$x:0000F687                 db    0
.xdata$x:0000F688                 db    0
.xdata$x:0000F689                 db    0
.xdata$x:0000F68A                 db    0
.xdata$x:0000F68B                 db    0
.xdata$x:0000F68C                 db    0
.xdata$x:0000F68D                 db    0
.xdata$x:0000F68E                 db    0
.xdata$x:0000F68F                 db    0
.xdata$x:0000F690                 db    0
.xdata$x:0000F691                 db    0
.xdata$x:0000F692                 db    0
.xdata$x:0000F693                 db    0
.xdata$x:0000F694                 db    0
.xdata$x:0000F695                 db    0
.xdata$x:0000F696                 db    0
.xdata$x:0000F697                 db    0
.xdata$x:0000F697 _xdata$x        ends
.xdata$x:0000F697
.xdata$x:0000F698 ; ===========================================================================
.xdata$x:0000F698
.xdata$x:0000F698 ; Segment type: Pure data
.xdata$x:0000F698 ; Segment permissions: Read
.xdata$x:0000F698 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F698                 assume cs:_xdata$x
.xdata$x:0000F698                 ;org 0F698h
.xdata$x:0000F698 ; COMDAT (pick associative to section at 6D4C)
.xdata$x:0000F698 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db 0FFh
.xdata$x:0000F698                                         ; DATA XREF: .xdata$x:0000F6A8o
.xdata$x:0000F699                 db 0FFh
.xdata$x:0000F69A                 db 0FFh
.xdata$x:0000F69B                 db 0FFh
.xdata$x:0000F69C                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0
.xdata$x:0000F6A0 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db  22h ; "
.xdata$x:0000F6A0                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z+11o
.xdata$x:0000F6A1                 db    5
.xdata$x:0000F6A2                 db  93h ; ô
.xdata$x:0000F6A3                 db  19h
.xdata$x:0000F6A4                 db    1
.xdata$x:0000F6A5                 db    0
.xdata$x:0000F6A6                 db    0
.xdata$x:0000F6A7                 db    0
.xdata$x:0000F6A8                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.xdata$x:0000F6AC                 db    0
.xdata$x:0000F6AD                 db    0
.xdata$x:0000F6AE                 db    0
.xdata$x:0000F6AF                 db    0
.xdata$x:0000F6B0                 db    0
.xdata$x:0000F6B1                 db    0
.xdata$x:0000F6B2                 db    0
.xdata$x:0000F6B3                 db    0
.xdata$x:0000F6B4                 db    0
.xdata$x:0000F6B5                 db    0
.xdata$x:0000F6B6                 db    0
.xdata$x:0000F6B7                 db    0
.xdata$x:0000F6B8                 db    0
.xdata$x:0000F6B9                 db    0
.xdata$x:0000F6BA                 db    0
.xdata$x:0000F6BB                 db    0
.xdata$x:0000F6BC                 db    0
.xdata$x:0000F6BD                 db    0
.xdata$x:0000F6BE                 db    0
.xdata$x:0000F6BF                 db    0
.xdata$x:0000F6C0                 db    0
.xdata$x:0000F6C1                 db    0
.xdata$x:0000F6C2                 db    0
.xdata$x:0000F6C3                 db    0
.xdata$x:0000F6C3 _xdata$x        ends
.xdata$x:0000F6C3
.xdata$x:0000F6C4 ; ===========================================================================
.xdata$x:0000F6C4
.xdata$x:0000F6C4 ; Segment type: Pure data
.xdata$x:0000F6C4 ; Segment permissions: Read
.xdata$x:0000F6C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F6C4                 assume cs:_xdata$x
.xdata$x:0000F6C4                 ;org 0F6C4h
.xdata$x:0000F6C4 ; COMDAT (pick associative to section at 8984)
.xdata$x:0000F6C4 __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000F6C4                                         ; DATA XREF: .xdata$x:0000F6D4o
.xdata$x:0000F6C5                 db 0FFh
.xdata$x:0000F6C6                 db 0FFh
.xdata$x:0000F6C7                 db 0FFh
.xdata$x:0000F6C8                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0
.xdata$x:0000F6CC __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F6CC                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ+11o
.xdata$x:0000F6CD                 db    5
.xdata$x:0000F6CE                 db  93h ; ô
.xdata$x:0000F6CF                 db  19h
.xdata$x:0000F6D0                 db    1
.xdata$x:0000F6D1                 db    0
.xdata$x:0000F6D2                 db    0
.xdata$x:0000F6D3                 db    0
.xdata$x:0000F6D4                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.xdata$x:0000F6D8                 db    0
.xdata$x:0000F6D9                 db    0
.xdata$x:0000F6DA                 db    0
.xdata$x:0000F6DB                 db    0
.xdata$x:0000F6DC                 db    0
.xdata$x:0000F6DD                 db    0
.xdata$x:0000F6DE                 db    0
.xdata$x:0000F6DF                 db    0
.xdata$x:0000F6E0                 db    0
.xdata$x:0000F6E1                 db    0
.xdata$x:0000F6E2                 db    0
.xdata$x:0000F6E3                 db    0
.xdata$x:0000F6E4                 db    0
.xdata$x:0000F6E5                 db    0
.xdata$x:0000F6E6                 db    0
.xdata$x:0000F6E7                 db    0
.xdata$x:0000F6E8                 db    0
.xdata$x:0000F6E9                 db    0
.xdata$x:0000F6EA                 db    0
.xdata$x:0000F6EB                 db    0
.xdata$x:0000F6EC                 db    0
.xdata$x:0000F6ED                 db    0
.xdata$x:0000F6EE                 db    0
.xdata$x:0000F6EF                 db    0
.xdata$x:0000F6EF _xdata$x        ends
.xdata$x:0000F6EF
.xdata$x:0000F6F0 ; ===========================================================================
.xdata$x:0000F6F0
.xdata$x:0000F6F0 ; Segment type: Pure data
.xdata$x:0000F6F0 ; Segment permissions: Read
.xdata$x:0000F6F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F6F0                 assume cs:_xdata$x
.xdata$x:0000F6F0                 ;org 0F6F0h
.xdata$x:0000F6F0 ; COMDAT (pick associative to section at 76E8)
.xdata$x:0000F6F0 __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000F6F0                                         ; DATA XREF: .xdata$x:0000F700o
.xdata$x:0000F6F1                 db 0FFh
.xdata$x:0000F6F2                 db 0FFh
.xdata$x:0000F6F3                 db 0FFh
.xdata$x:0000F6F4                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:0000F6F8 __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F6F8                                         ; DATA XREF: __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:0000F6F9                 db    5
.xdata$x:0000F6FA                 db  93h ; ô
.xdata$x:0000F6FB                 db  19h
.xdata$x:0000F6FC                 db    1
.xdata$x:0000F6FD                 db    0
.xdata$x:0000F6FE                 db    0
.xdata$x:0000F6FF                 db    0
.xdata$x:0000F700                 dd offset __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:0000F704                 db    0
.xdata$x:0000F705                 db    0
.xdata$x:0000F706                 db    0
.xdata$x:0000F707                 db    0
.xdata$x:0000F708                 db    0
.xdata$x:0000F709                 db    0
.xdata$x:0000F70A                 db    0
.xdata$x:0000F70B                 db    0
.xdata$x:0000F70C                 db    0
.xdata$x:0000F70D                 db    0
.xdata$x:0000F70E                 db    0
.xdata$x:0000F70F                 db    0
.xdata$x:0000F710                 db    0
.xdata$x:0000F711                 db    0
.xdata$x:0000F712                 db    0
.xdata$x:0000F713                 db    0
.xdata$x:0000F714                 db    0
.xdata$x:0000F715                 db    0
.xdata$x:0000F716                 db    0
.xdata$x:0000F717                 db    0
.xdata$x:0000F718                 db    0
.xdata$x:0000F719                 db    0
.xdata$x:0000F71A                 db    0
.xdata$x:0000F71B                 db    0
.xdata$x:0000F71B _xdata$x        ends
.xdata$x:0000F71B
.xdata$x:0000F71C ; ===========================================================================
.xdata$x:0000F71C
.xdata$x:0000F71C ; Segment type: Pure data
.xdata$x:0000F71C ; Segment permissions: Read
.xdata$x:0000F71C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F71C                 assume cs:_xdata$x
.xdata$x:0000F71C                 ;org 0F71Ch
.xdata$x:0000F71C ; COMDAT (pick associative to section at 759C)
.xdata$x:0000F71C __catchsym$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$5 db    0
.xdata$x:0000F71C                                         ; DATA XREF: .xdata$x:0000F73Co
.xdata$x:0000F71D                 db    0
.xdata$x:0000F71E                 db    0
.xdata$x:0000F71F                 db    0
.xdata$x:0000F720                 db    0
.xdata$x:0000F721                 db    0
.xdata$x:0000F722                 db    0
.xdata$x:0000F723                 db    0
.xdata$x:0000F724                 db    0
.xdata$x:0000F725                 db    0
.xdata$x:0000F726                 db    0
.xdata$x:0000F727                 db    0
.xdata$x:0000F728                 dd offset __catch$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000F72C __tryblocktable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z db    1
.xdata$x:0000F72C                                         ; DATA XREF: .xdata$x:0000F750o
.xdata$x:0000F72D                 db    0
.xdata$x:0000F72E                 db    0
.xdata$x:0000F72F                 db    0
.xdata$x:0000F730                 db    3
.xdata$x:0000F731                 db    0
.xdata$x:0000F732                 db    0
.xdata$x:0000F733                 db    0
.xdata$x:0000F734                 db    4
.xdata$x:0000F735                 db    0
.xdata$x:0000F736                 db    0
.xdata$x:0000F737                 db    0
.xdata$x:0000F738                 db    1
.xdata$x:0000F739                 db    0
.xdata$x:0000F73A                 db    0
.xdata$x:0000F73B                 db    0
.xdata$x:0000F73C                 dd offset __catchsym$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$5
.xdata$x:0000F740 __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000F740                                         ; DATA XREF: __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000F741                 db    5
.xdata$x:0000F742                 db  93h ; ô
.xdata$x:0000F743                 db  19h
.xdata$x:0000F744                 db    5
.xdata$x:0000F745                 db    0
.xdata$x:0000F746                 db    0
.xdata$x:0000F747                 db    0
.xdata$x:0000F748                 dd offset __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.xdata$x:0000F74C                 db    1
.xdata$x:0000F74D                 db    0
.xdata$x:0000F74E                 db    0
.xdata$x:0000F74F                 db    0
.xdata$x:0000F750                 dd offset __tryblocktable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z
.xdata$x:0000F754                 db    0
.xdata$x:0000F755                 db    0
.xdata$x:0000F756                 db    0
.xdata$x:0000F757                 db    0
.xdata$x:0000F758                 db    0
.xdata$x:0000F759                 db    0
.xdata$x:0000F75A                 db    0
.xdata$x:0000F75B                 db    0
.xdata$x:0000F75C                 db    0
.xdata$x:0000F75D                 db    0
.xdata$x:0000F75E                 db    0
.xdata$x:0000F75F                 db    0
.xdata$x:0000F760                 db    0
.xdata$x:0000F761                 db    0
.xdata$x:0000F762                 db    0
.xdata$x:0000F763                 db    0
.xdata$x:0000F764 __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000F764                                         ; DATA XREF: .xdata$x:0000F748o
.xdata$x:0000F765                 db 0FFh
.xdata$x:0000F766                 db 0FFh
.xdata$x:0000F767                 db 0FFh
.xdata$x:0000F768                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$2
.xdata$x:0000F76C                 db    0
.xdata$x:0000F76D                 db    0
.xdata$x:0000F76E                 db    0
.xdata$x:0000F76F                 db    0
.xdata$x:0000F770                 db    0
.xdata$x:0000F771                 db    0
.xdata$x:0000F772                 db    0
.xdata$x:0000F773                 db    0
.xdata$x:0000F774                 db    1
.xdata$x:0000F775                 db    0
.xdata$x:0000F776                 db    0
.xdata$x:0000F777                 db    0
.xdata$x:0000F778                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$3
.xdata$x:0000F77C                 db    2
.xdata$x:0000F77D                 db    0
.xdata$x:0000F77E                 db    0
.xdata$x:0000F77F                 db    0
.xdata$x:0000F780                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@ABV01@@Z$4
.xdata$x:0000F784                 db    0
.xdata$x:0000F785                 db    0
.xdata$x:0000F786                 db    0
.xdata$x:0000F787                 db    0
.xdata$x:0000F788                 db    0
.xdata$x:0000F789                 db    0
.xdata$x:0000F78A                 db    0
.xdata$x:0000F78B                 db    0
.xdata$x:0000F78B _xdata$x        ends
.xdata$x:0000F78B
.xdata$x:0000F78C ; ===========================================================================
.xdata$x:0000F78C
.xdata$x:0000F78C ; Segment type: Pure data
.xdata$x:0000F78C ; Segment permissions: Read
.xdata$x:0000F78C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F78C                 assume cs:_xdata$x
.xdata$x:0000F78C                 ;org 0F78Ch
.xdata$x:0000F78C ; COMDAT (pick associative to section at 8EFC)
.xdata$x:0000F78C __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000F78C                                         ; DATA XREF: .xdata$x:0000F79Co
.xdata$x:0000F78D                 db 0FFh
.xdata$x:0000F78E                 db 0FFh
.xdata$x:0000F78F                 db 0FFh
.xdata$x:0000F790                 dd offset __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:0000F794 __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000F794                                         ; DATA XREF: __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:0000F795                 db    5
.xdata$x:0000F796                 db  93h ; ô
.xdata$x:0000F797                 db  19h
.xdata$x:0000F798                 db    1
.xdata$x:0000F799                 db    0
.xdata$x:0000F79A                 db    0
.xdata$x:0000F79B                 db    0
.xdata$x:0000F79C                 dd offset __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:0000F7A0                 db    0
.xdata$x:0000F7A1                 db    0
.xdata$x:0000F7A2                 db    0
.xdata$x:0000F7A3                 db    0
.xdata$x:0000F7A4                 db    0
.xdata$x:0000F7A5                 db    0
.xdata$x:0000F7A6                 db    0
.xdata$x:0000F7A7                 db    0
.xdata$x:0000F7A8                 db    0
.xdata$x:0000F7A9                 db    0
.xdata$x:0000F7AA                 db    0
.xdata$x:0000F7AB                 db    0
.xdata$x:0000F7AC                 db    0
.xdata$x:0000F7AD                 db    0
.xdata$x:0000F7AE                 db    0
.xdata$x:0000F7AF                 db    0
.xdata$x:0000F7B0                 db    0
.xdata$x:0000F7B1                 db    0
.xdata$x:0000F7B2                 db    0
.xdata$x:0000F7B3                 db    0
.xdata$x:0000F7B4                 db    0
.xdata$x:0000F7B5                 db    0
.xdata$x:0000F7B6                 db    0
.xdata$x:0000F7B7                 db    0
.xdata$x:0000F7B7 _xdata$x        ends
.xdata$x:0000F7B7
.xdata$x:0000F7B8 ; ===========================================================================
.xdata$x:0000F7B8
.xdata$x:0000F7B8 ; Segment type: Pure data
.xdata$x:0000F7B8 ; Segment permissions: Read
.xdata$x:0000F7B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F7B8                 assume cs:_xdata$x
.xdata$x:0000F7B8                 ;org 0F7B8h
.xdata$x:0000F7B8 ; COMDAT (pick associative to section at CC80)
.xdata$x:0000F7B8 __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000F7B8                                         ; DATA XREF: .xdata$x:0000F7C8o
.xdata$x:0000F7B9                 db 0FFh
.xdata$x:0000F7BA                 db 0FFh
.xdata$x:0000F7BB                 db 0FFh
.xdata$x:0000F7BC                 dd offset __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0
.xdata$x:0000F7C0 __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000F7C0                                         ; DATA XREF: __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ+11o
.xdata$x:0000F7C1                 db    5
.xdata$x:0000F7C2                 db  93h ; ô
.xdata$x:0000F7C3                 db  19h
.xdata$x:0000F7C4                 db    1
.xdata$x:0000F7C5                 db    0
.xdata$x:0000F7C6                 db    0
.xdata$x:0000F7C7                 db    0
.xdata$x:0000F7C8                 dd offset __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.xdata$x:0000F7CC                 db    0
.xdata$x:0000F7CD                 db    0
.xdata$x:0000F7CE                 db    0
.xdata$x:0000F7CF                 db    0
.xdata$x:0000F7D0                 db    0
.xdata$x:0000F7D1                 db    0
.xdata$x:0000F7D2                 db    0
.xdata$x:0000F7D3                 db    0
.xdata$x:0000F7D4                 db    0
.xdata$x:0000F7D5                 db    0
.xdata$x:0000F7D6                 db    0
.xdata$x:0000F7D7                 db    0
.xdata$x:0000F7D8                 db    0
.xdata$x:0000F7D9                 db    0
.xdata$x:0000F7DA                 db    0
.xdata$x:0000F7DB                 db    0
.xdata$x:0000F7DC                 db    0
.xdata$x:0000F7DD                 db    0
.xdata$x:0000F7DE                 db    0
.xdata$x:0000F7DF                 db    0
.xdata$x:0000F7E0                 db    0
.xdata$x:0000F7E1                 db    0
.xdata$x:0000F7E2                 db    0
.xdata$x:0000F7E3                 db    0
.xdata$x:0000F7E3 _xdata$x        ends
.xdata$x:0000F7E3
.xdata$x:0000F7E4 ; ===========================================================================
.xdata$x:0000F7E4
.xdata$x:0000F7E4 ; Segment type: Pure data
.xdata$x:0000F7E4 ; Segment permissions: Read
.xdata$x:0000F7E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F7E4                 assume cs:_xdata$x
.xdata$x:0000F7E4                 ;org 0F7E4h
.xdata$x:0000F7E4 ; COMDAT (pick associative to section at CD1C)
.xdata$x:0000F7E4 __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000F7E4                                         ; DATA XREF: .xdata$x:0000F7F4o
.xdata$x:0000F7E5                 db 0FFh
.xdata$x:0000F7E6                 db 0FFh
.xdata$x:0000F7E7                 db 0FFh
.xdata$x:0000F7E8                 dd offset __unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0
.xdata$x:0000F7EC __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000F7EC                                         ; DATA XREF: __ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ+11o
.xdata$x:0000F7ED                 db    5
.xdata$x:0000F7EE                 db  93h ; ô
.xdata$x:0000F7EF                 db  19h
.xdata$x:0000F7F0                 db    1
.xdata$x:0000F7F1                 db    0
.xdata$x:0000F7F2                 db    0
.xdata$x:0000F7F3                 db    0
.xdata$x:0000F7F4                 dd offset __unwindtable$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.xdata$x:0000F7F8                 db    0
.xdata$x:0000F7F9                 db    0
.xdata$x:0000F7FA                 db    0
.xdata$x:0000F7FB                 db    0
.xdata$x:0000F7FC                 db    0
.xdata$x:0000F7FD                 db    0
.xdata$x:0000F7FE                 db    0
.xdata$x:0000F7FF                 db    0
.xdata$x:0000F800                 db    0
.xdata$x:0000F801                 db    0
.xdata$x:0000F802                 db    0
.xdata$x:0000F803                 db    0
.xdata$x:0000F804                 db    0
.xdata$x:0000F805                 db    0
.xdata$x:0000F806                 db    0
.xdata$x:0000F807                 db    0
.xdata$x:0000F808                 db    0
.xdata$x:0000F809                 db    0
.xdata$x:0000F80A                 db    0
.xdata$x:0000F80B                 db    0
.xdata$x:0000F80C                 db    0
.xdata$x:0000F80D                 db    0
.xdata$x:0000F80E                 db    0
.xdata$x:0000F80F                 db    0
.xdata$x:0000F80F _xdata$x        ends
.xdata$x:0000F80F
.xdata$x:0000F810 ; ===========================================================================
.xdata$x:0000F810
.xdata$x:0000F810 ; Segment type: Pure data
.xdata$x:0000F810 ; Segment permissions: Read
.xdata$x:0000F810 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F810                 assume cs:_xdata$x
.xdata$x:0000F810                 ;org 0F810h
.xdata$x:0000F810 ; COMDAT (pick associative to section at D4AC)
.xdata$x:0000F810 __unwindtable$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000F810                                         ; DATA XREF: .xdata$x:0000F820o
.xdata$x:0000F811                 db 0FFh
.xdata$x:0000F812                 db 0FFh
.xdata$x:0000F813                 db 0FFh
.xdata$x:0000F814                 dd offset __unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0
.xdata$x:0000F818 __ehfuncinfo$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000F818                                         ; DATA XREF: __ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ+11o
.xdata$x:0000F819                 db    5
.xdata$x:0000F81A                 db  93h ; ô
.xdata$x:0000F81B                 db  19h
.xdata$x:0000F81C                 db    1
.xdata$x:0000F81D                 db    0
.xdata$x:0000F81E                 db    0
.xdata$x:0000F81F                 db    0
.xdata$x:0000F820                 dd offset __unwindtable$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
.xdata$x:0000F824                 db    0
.xdata$x:0000F825                 db    0
.xdata$x:0000F826                 db    0
.xdata$x:0000F827                 db    0
.xdata$x:0000F828                 db    0
.xdata$x:0000F829                 db    0
.xdata$x:0000F82A                 db    0
.xdata$x:0000F82B                 db    0
.xdata$x:0000F82C                 db    0
.xdata$x:0000F82D                 db    0
.xdata$x:0000F82E                 db    0
.xdata$x:0000F82F                 db    0
.xdata$x:0000F830                 db    0
.xdata$x:0000F831                 db    0
.xdata$x:0000F832                 db    0
.xdata$x:0000F833                 db    0
.xdata$x:0000F834                 db    0
.xdata$x:0000F835                 db    0
.xdata$x:0000F836                 db    0
.xdata$x:0000F837                 db    0
.xdata$x:0000F838                 db    0
.xdata$x:0000F839                 db    0
.xdata$x:0000F83A                 db    0
.xdata$x:0000F83B                 db    0
.xdata$x:0000F83B _xdata$x        ends
.xdata$x:0000F83B
.xdata$x:0000F83C ; ===========================================================================
.xdata$x:0000F83C
.xdata$x:0000F83C ; Segment type: Pure data
.xdata$x:0000F83C ; Segment permissions: Read
.xdata$x:0000F83C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F83C                 assume cs:_xdata$x
.xdata$x:0000F83C                 ;org 0F83Ch
.xdata$x:0000F83C ; COMDAT (pick associative to section at AFF8)
.xdata$x:0000F83C __unwindtable$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z db 0FFh
.xdata$x:0000F83C                                         ; DATA XREF: .xdata$x:0000F854o
.xdata$x:0000F83D                 db 0FFh
.xdata$x:0000F83E                 db 0FFh
.xdata$x:0000F83F                 db 0FFh
.xdata$x:0000F840                 dd offset __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1
.xdata$x:0000F844                 align 8
.xdata$x:0000F848                 dd offset __unwindfunclet$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0
.xdata$x:0000F84C __ehfuncinfo$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z db  22h ; "
.xdata$x:0000F84C                                         ; DATA XREF: __ehhandler$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z+11o
.xdata$x:0000F84D                 db    5
.xdata$x:0000F84E                 db  93h ; ô
.xdata$x:0000F84F                 db  19h
.xdata$x:0000F850                 db    2
.xdata$x:0000F851                 db    0
.xdata$x:0000F852                 db    0
.xdata$x:0000F853                 db    0
.xdata$x:0000F854                 dd offset __unwindtable$?_Make_iter@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.xdata$x:0000F858                 db    0
.xdata$x:0000F859                 db    0
.xdata$x:0000F85A                 db    0
.xdata$x:0000F85B                 db    0
.xdata$x:0000F85C                 db    0
.xdata$x:0000F85D                 db    0
.xdata$x:0000F85E                 db    0
.xdata$x:0000F85F                 db    0
.xdata$x:0000F860                 db    0
.xdata$x:0000F861                 db    0
.xdata$x:0000F862                 db    0
.xdata$x:0000F863                 db    0
.xdata$x:0000F864                 db    0
.xdata$x:0000F865                 db    0
.xdata$x:0000F866                 db    0
.xdata$x:0000F867                 db    0
.xdata$x:0000F868                 db    0
.xdata$x:0000F869                 db    0
.xdata$x:0000F86A                 db    0
.xdata$x:0000F86B                 db    0
.xdata$x:0000F86C                 db    0
.xdata$x:0000F86D                 db    0
.xdata$x:0000F86E                 db    0
.xdata$x:0000F86F                 db    0
.xdata$x:0000F86F _xdata$x        ends
.xdata$x:0000F86F
.xdata$x:0000F870 ; ===========================================================================
.xdata$x:0000F870
.xdata$x:0000F870 ; Segment type: Pure data
.xdata$x:0000F870 ; Segment permissions: Read
.xdata$x:0000F870 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F870                 assume cs:_xdata$x
.xdata$x:0000F870                 ;org 0F870h
.xdata$x:0000F870 ; COMDAT (pick associative to section at D738)
.xdata$x:0000F870 __unwindtable$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z db 0FFh
.xdata$x:0000F870                                         ; DATA XREF: .xdata$x:0000F890o
.xdata$x:0000F871                 db 0FFh
.xdata$x:0000F872                 db 0FFh
.xdata$x:0000F873                 db 0FFh
.xdata$x:0000F874                 dd offset __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$2
.xdata$x:0000F878                 db    0
.xdata$x:0000F879                 db    0
.xdata$x:0000F87A                 db    0
.xdata$x:0000F87B                 db    0
.xdata$x:0000F87C                 dd offset __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$0
.xdata$x:0000F880                 db    1
.xdata$x:0000F881                 db    0
.xdata$x:0000F882                 db    0
.xdata$x:0000F883                 db    0
.xdata$x:0000F884                 dd offset __unwindfunclet$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z$1
.xdata$x:0000F888 __ehfuncinfo$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z db  22h ; "
.xdata$x:0000F888                                         ; DATA XREF: __ehhandler$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z+11o
.xdata$x:0000F889                 db    5
.xdata$x:0000F88A                 db  93h ; ô
.xdata$x:0000F88B                 db  19h
.xdata$x:0000F88C                 db    3
.xdata$x:0000F88D                 db    0
.xdata$x:0000F88E                 db    0
.xdata$x:0000F88F                 db    0
.xdata$x:0000F890                 dd offset __unwindtable$?erase@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@@Z
.xdata$x:0000F894                 db    0
.xdata$x:0000F895                 db    0
.xdata$x:0000F896                 db    0
.xdata$x:0000F897                 db    0
.xdata$x:0000F898                 db    0
.xdata$x:0000F899                 db    0
.xdata$x:0000F89A                 db    0
.xdata$x:0000F89B                 db    0
.xdata$x:0000F89C                 db    0
.xdata$x:0000F89D                 db    0
.xdata$x:0000F89E                 db    0
.xdata$x:0000F89F                 db    0
.xdata$x:0000F8A0                 db    0
.xdata$x:0000F8A1                 db    0
.xdata$x:0000F8A2                 db    0
.xdata$x:0000F8A3                 db    0
.xdata$x:0000F8A4                 db    0
.xdata$x:0000F8A5                 db    0
.xdata$x:0000F8A6                 db    0
.xdata$x:0000F8A7                 db    0
.xdata$x:0000F8A8                 db    0
.xdata$x:0000F8A9                 db    0
.xdata$x:0000F8AA                 db    0
.xdata$x:0000F8AB                 db    0
.xdata$x:0000F8AB _xdata$x        ends
.xdata$x:0000F8AB
.xdata$x:0000F8AC ; ===========================================================================
.xdata$x:0000F8AC
.xdata$x:0000F8AC ; Segment type: Pure data
.xdata$x:0000F8AC ; Segment permissions: Read
.xdata$x:0000F8AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F8AC                 assume cs:_xdata$x
.xdata$x:0000F8AC                 ;org 0F8ACh
.xdata$x:0000F8AC ; COMDAT (pick associative to section at BD20)
.xdata$x:0000F8AC __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2 db    0
.xdata$x:0000F8AC                                         ; DATA XREF: .xdata$x:0000F8DCo
.xdata$x:0000F8AD                 db    0
.xdata$x:0000F8AE                 db    0
.xdata$x:0000F8AF                 db    0
.xdata$x:0000F8B0                 db    0
.xdata$x:0000F8B1                 db    0
.xdata$x:0000F8B2                 db    0
.xdata$x:0000F8B3                 db    0
.xdata$x:0000F8B4                 db    0
.xdata$x:0000F8B5                 db    0
.xdata$x:0000F8B6                 db    0
.xdata$x:0000F8B7                 db    0
.xdata$x:0000F8B8                 dd offset __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0
.xdata$x:0000F8BC __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db 0FFh
.xdata$x:0000F8BC                                         ; DATA XREF: .xdata$x:0000F8E8o
.xdata$x:0000F8BD                 db 0FFh
.xdata$x:0000F8BE                 db 0FFh
.xdata$x:0000F8BF                 db 0FFh
.xdata$x:0000F8C0                 db    0
.xdata$x:0000F8C1                 db    0
.xdata$x:0000F8C2                 db    0
.xdata$x:0000F8C3                 db    0
.xdata$x:0000F8C4                 db 0FFh
.xdata$x:0000F8C5                 db 0FFh
.xdata$x:0000F8C6                 db 0FFh
.xdata$x:0000F8C7                 db 0FFh
.xdata$x:0000F8C8                 db    0
.xdata$x:0000F8C9                 db    0
.xdata$x:0000F8CA                 db    0
.xdata$x:0000F8CB                 db    0
.xdata$x:0000F8CC __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db    0
.xdata$x:0000F8CC                                         ; DATA XREF: .xdata$x:0000F8F0o
.xdata$x:0000F8CD                 db    0
.xdata$x:0000F8CE                 db    0
.xdata$x:0000F8CF                 db    0
.xdata$x:0000F8D0                 db    0
.xdata$x:0000F8D1                 db    0
.xdata$x:0000F8D2                 db    0
.xdata$x:0000F8D3                 db    0
.xdata$x:0000F8D4                 db    1
.xdata$x:0000F8D5                 db    0
.xdata$x:0000F8D6                 db    0
.xdata$x:0000F8D7                 db    0
.xdata$x:0000F8D8                 db    1
.xdata$x:0000F8D9                 db    0
.xdata$x:0000F8DA                 db    0
.xdata$x:0000F8DB                 db    0
.xdata$x:0000F8DC                 dd offset __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2
.xdata$x:0000F8E0 __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db  22h ; "
.xdata$x:0000F8E0                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z+11o
.xdata$x:0000F8E1                 db    5
.xdata$x:0000F8E2                 db  93h ; ô
.xdata$x:0000F8E3                 db  19h
.xdata$x:0000F8E4                 db    2
.xdata$x:0000F8E5                 db    0
.xdata$x:0000F8E6                 db    0
.xdata$x:0000F8E7                 db    0
.xdata$x:0000F8E8                 dd offset __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:0000F8EC                 db    1
.xdata$x:0000F8ED                 db    0
.xdata$x:0000F8EE                 db    0
.xdata$x:0000F8EF                 db    0
.xdata$x:0000F8F0                 dd offset __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:0000F8F4                 db    0
.xdata$x:0000F8F5                 db    0
.xdata$x:0000F8F6                 db    0
.xdata$x:0000F8F7                 db    0
.xdata$x:0000F8F8                 db    0
.xdata$x:0000F8F9                 db    0
.xdata$x:0000F8FA                 db    0
.xdata$x:0000F8FB                 db    0
.xdata$x:0000F8FC                 db    0
.xdata$x:0000F8FD                 db    0
.xdata$x:0000F8FE                 db    0
.xdata$x:0000F8FF                 db    0
.xdata$x:0000F900                 db    0
.xdata$x:0000F901                 db    0
.xdata$x:0000F902                 db    0
.xdata$x:0000F903                 db    0
.xdata$x:0000F903 _xdata$x        ends
.xdata$x:0000F903
.xdata$x:0000F904 ; ===========================================================================
.xdata$x:0000F904
.xdata$x:0000F904 ; Segment type: Pure data
.xdata$x:0000F904 ; Segment permissions: Read
.xdata$x:0000F904 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F904                 assume cs:_xdata$x
.xdata$x:0000F904                 ;org 0F904h
.xdata$x:0000F904 ; COMDAT (pick associative to section at B628)
.xdata$x:0000F904 __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db 0FFh
.xdata$x:0000F904                                         ; DATA XREF: .xdata$x:0000F914o
.xdata$x:0000F905                 db 0FFh
.xdata$x:0000F906                 db 0FFh
.xdata$x:0000F907                 db 0FFh
.xdata$x:0000F908                 dd offset __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0
.xdata$x:0000F90C __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db  22h ; "
.xdata$x:0000F90C                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z+11o
.xdata$x:0000F90D                 db    5
.xdata$x:0000F90E                 db  93h ; ô
.xdata$x:0000F90F                 db  19h
.xdata$x:0000F910                 db    1
.xdata$x:0000F911                 db    0
.xdata$x:0000F912                 db    0
.xdata$x:0000F913                 db    0
.xdata$x:0000F914                 dd offset __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.xdata$x:0000F918                 db    0
.xdata$x:0000F919                 db    0
.xdata$x:0000F91A                 db    0
.xdata$x:0000F91B                 db    0
.xdata$x:0000F91C                 db    0
.xdata$x:0000F91D                 db    0
.xdata$x:0000F91E                 db    0
.xdata$x:0000F91F                 db    0
.xdata$x:0000F920                 db    0
.xdata$x:0000F921                 db    0
.xdata$x:0000F922                 db    0
.xdata$x:0000F923                 db    0
.xdata$x:0000F924                 db    0
.xdata$x:0000F925                 db    0
.xdata$x:0000F926                 db    0
.xdata$x:0000F927                 db    0
.xdata$x:0000F928                 db    0
.xdata$x:0000F929                 db    0
.xdata$x:0000F92A                 db    0
.xdata$x:0000F92B                 db    0
.xdata$x:0000F92C                 db    0
.xdata$x:0000F92D                 db    0
.xdata$x:0000F92E                 db    0
.xdata$x:0000F92F                 db    0
.xdata$x:0000F92F _xdata$x        ends
.xdata$x:0000F92F
.xdata$x:0000F930 ; ===========================================================================
.xdata$x:0000F930
.xdata$x:0000F930 ; Segment type: Pure data
.xdata$x:0000F930 ; Segment permissions: Read
.xdata$x:0000F930 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F930                 assume cs:_xdata$x
.xdata$x:0000F930                 ;org 0F930h
.xdata$x:0000F930 ; COMDAT (pick associative to section at 83C8)
.xdata$x:0000F930 __unwindtable$??0foundInfo@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:0000F948o
.xdata$x:0000F931                 db 0FFh
.xdata$x:0000F932                 db 0FFh
.xdata$x:0000F933                 db 0FFh
.xdata$x:0000F934                 dd offset __unwindfunclet$??0foundInfo@@QAE@XZ$0
.xdata$x:0000F938                 db    0
.xdata$x:0000F939                 db    0
.xdata$x:0000F93A                 db    0
.xdata$x:0000F93B                 db    0
.xdata$x:0000F93C                 dd offset __unwindfunclet$??0foundInfo@@QAE@XZ$1
.xdata$x:0000F940 __ehfuncinfo$??0foundInfo@@QAE@XZ db  22h ; "
.xdata$x:0000F940                                         ; DATA XREF: __ehhandler$??0foundInfo@@QAE@XZ+11o
.xdata$x:0000F941                 db    5
.xdata$x:0000F942                 db  93h ; ô
.xdata$x:0000F943                 db  19h
.xdata$x:0000F944                 db    2
.xdata$x:0000F945                 db    0
.xdata$x:0000F946                 db    0
.xdata$x:0000F947                 db    0
.xdata$x:0000F948                 dd offset __unwindtable$??0foundInfo@@QAE@XZ
.xdata$x:0000F94C                 db    0
.xdata$x:0000F94D                 db    0
.xdata$x:0000F94E                 db    0
.xdata$x:0000F94F                 db    0
.xdata$x:0000F950                 db    0
.xdata$x:0000F951                 db    0
.xdata$x:0000F952                 db    0
.xdata$x:0000F953                 db    0
.xdata$x:0000F954                 db    0
.xdata$x:0000F955                 db    0
.xdata$x:0000F956                 db    0
.xdata$x:0000F957                 db    0
.xdata$x:0000F958                 db    0
.xdata$x:0000F959                 db    0
.xdata$x:0000F95A                 db    0
.xdata$x:0000F95B                 db    0
.xdata$x:0000F95C                 db    0
.xdata$x:0000F95D                 db    0
.xdata$x:0000F95E                 db    0
.xdata$x:0000F95F                 db    0
.xdata$x:0000F960                 db    0
.xdata$x:0000F961                 db    0
.xdata$x:0000F962                 db    0
.xdata$x:0000F963                 db    0
.xdata$x:0000F963 _xdata$x        ends
.xdata$x:0000F963
.xdata$x:0000F964 ; ===========================================================================
.xdata$x:0000F964
.xdata$x:0000F964 ; Segment type: Pure data
.xdata$x:0000F964 ; Segment permissions: Read
.xdata$x:0000F964 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F964                 assume cs:_xdata$x
.xdata$x:0000F964                 ;org 0F964h
.xdata$x:0000F964 ; COMDAT (pick associative to section at 9484)
.xdata$x:0000F964 __unwindtable$??1foundInfo@@QAE@XZ db 0FFh ; DATA XREF: .xdata$x:0000F97Co
.xdata$x:0000F965                 db 0FFh
.xdata$x:0000F966                 db 0FFh
.xdata$x:0000F967                 db 0FFh
.xdata$x:0000F968                 dd offset __unwindfunclet$??1foundInfo@@QAE@XZ$0
.xdata$x:0000F96C                 align 10h
.xdata$x:0000F970                 dd offset __unwindfunclet$??1foundInfo@@QAE@XZ$1
.xdata$x:0000F974 __ehfuncinfo$??1foundInfo@@QAE@XZ db  22h ; "
.xdata$x:0000F974                                         ; DATA XREF: __ehhandler$??1foundInfo@@QAE@XZ+11o
.xdata$x:0000F975                 db    5
.xdata$x:0000F976                 db  93h ; ô
.xdata$x:0000F977                 db  19h
.xdata$x:0000F978                 db    2
.xdata$x:0000F979                 db    0
.xdata$x:0000F97A                 db    0
.xdata$x:0000F97B                 db    0
.xdata$x:0000F97C                 dd offset __unwindtable$??1foundInfo@@QAE@XZ
.xdata$x:0000F980                 db    0
.xdata$x:0000F981                 db    0
.xdata$x:0000F982                 db    0
.xdata$x:0000F983                 db    0
.xdata$x:0000F984                 db    0
.xdata$x:0000F985                 db    0
.xdata$x:0000F986                 db    0
.xdata$x:0000F987                 db    0
.xdata$x:0000F988                 db    0
.xdata$x:0000F989                 db    0
.xdata$x:0000F98A                 db    0
.xdata$x:0000F98B                 db    0
.xdata$x:0000F98C                 db    0
.xdata$x:0000F98D                 db    0
.xdata$x:0000F98E                 db    0
.xdata$x:0000F98F                 db    0
.xdata$x:0000F990                 db    0
.xdata$x:0000F991                 db    0
.xdata$x:0000F992                 db    0
.xdata$x:0000F993                 db    0
.xdata$x:0000F994                 db    0
.xdata$x:0000F995                 db    0
.xdata$x:0000F996                 db    0
.xdata$x:0000F997                 db    0
.xdata$x:0000F997 _xdata$x        ends
.xdata$x:0000F997
.xdata$x:0000F998 ; ===========================================================================
.xdata$x:0000F998
.xdata$x:0000F998 ; Segment type: Pure data
.xdata$x:0000F998 ; Segment permissions: Read
.xdata$x:0000F998 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F998                 assume cs:_xdata$x
.xdata$x:0000F998                 ;org 0F998h
.xdata$x:0000F998 ; COMDAT (pick associative to section at 8314)
.xdata$x:0000F998 __unwindtable$??0foundInfo@@QAE@ABU0@@Z db 0FFh
.xdata$x:0000F998                                         ; DATA XREF: .xdata$x:0000F9B0o
.xdata$x:0000F999                 db 0FFh
.xdata$x:0000F99A                 db 0FFh
.xdata$x:0000F99B                 db 0FFh
.xdata$x:0000F99C                 dd offset __unwindfunclet$??0foundInfo@@QAE@ABU0@@Z$0
.xdata$x:0000F9A0                 db    0
.xdata$x:0000F9A1                 db    0
.xdata$x:0000F9A2                 db    0
.xdata$x:0000F9A3                 db    0
.xdata$x:0000F9A4                 dd offset __unwindfunclet$??0foundInfo@@QAE@ABU0@@Z$1
.xdata$x:0000F9A8 __ehfuncinfo$??0foundInfo@@QAE@ABU0@@Z db  22h ; "
.xdata$x:0000F9A8                                         ; DATA XREF: __ehhandler$??0foundInfo@@QAE@ABU0@@Z+11o
.xdata$x:0000F9A9                 db    5
.xdata$x:0000F9AA                 db  93h ; ô
.xdata$x:0000F9AB                 db  19h
.xdata$x:0000F9AC                 db    2
.xdata$x:0000F9AD                 db    0
.xdata$x:0000F9AE                 db    0
.xdata$x:0000F9AF                 db    0
.xdata$x:0000F9B0                 dd offset __unwindtable$??0foundInfo@@QAE@ABU0@@Z
.xdata$x:0000F9B4                 db    0
.xdata$x:0000F9B5                 db    0
.xdata$x:0000F9B6                 db    0
.xdata$x:0000F9B7                 db    0
.xdata$x:0000F9B8                 db    0
.xdata$x:0000F9B9                 db    0
.xdata$x:0000F9BA                 db    0
.xdata$x:0000F9BB                 db    0
.xdata$x:0000F9BC                 db    0
.xdata$x:0000F9BD                 db    0
.xdata$x:0000F9BE                 db    0
.xdata$x:0000F9BF                 db    0
.xdata$x:0000F9C0                 db    0
.xdata$x:0000F9C1                 db    0
.xdata$x:0000F9C2                 db    0
.xdata$x:0000F9C3                 db    0
.xdata$x:0000F9C4                 db    0
.xdata$x:0000F9C5                 db    0
.xdata$x:0000F9C6                 db    0
.xdata$x:0000F9C7                 db    0
.xdata$x:0000F9C8                 db    0
.xdata$x:0000F9C9                 db    0
.xdata$x:0000F9CA                 db    0
.xdata$x:0000F9CB                 db    0
.xdata$x:0000F9CB _xdata$x        ends
.xdata$x:0000F9CB
.xdata$x:0000F9CC ; ===========================================================================
.xdata$x:0000F9CC
.xdata$x:0000F9CC ; Segment type: Pure data
.xdata$x:0000F9CC ; Segment permissions: Read
.xdata$x:0000F9CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000F9CC                 assume cs:_xdata$x
.xdata$x:0000F9CC                 ;org 0F9CCh
.xdata$x:0000F9CC ; COMDAT (pick associative to section at 7B24)
.xdata$x:0000F9CC __ehfuncinfo$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z db  22h ; "
.xdata$x:0000F9CC                                         ; DATA XREF: __ehhandler$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z+11o
.xdata$x:0000F9CD                 db    5
.xdata$x:0000F9CE                 db  93h ; ô
.xdata$x:0000F9CF                 db  19h
.xdata$x:0000F9D0                 db    9
.xdata$x:0000F9D1                 db    0
.xdata$x:0000F9D2                 db    0
.xdata$x:0000F9D3                 db    0
.xdata$x:0000F9D4                 dd offset __unwindtable$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z
.xdata$x:0000F9D8                 db    0
.xdata$x:0000F9D9                 db    0
.xdata$x:0000F9DA                 db    0
.xdata$x:0000F9DB                 db    0
.xdata$x:0000F9DC                 db    0
.xdata$x:0000F9DD                 db    0
.xdata$x:0000F9DE                 db    0
.xdata$x:0000F9DF                 db    0
.xdata$x:0000F9E0                 db    0
.xdata$x:0000F9E1                 db    0
.xdata$x:0000F9E2                 db    0
.xdata$x:0000F9E3                 db    0
.xdata$x:0000F9E4                 db    0
.xdata$x:0000F9E5                 db    0
.xdata$x:0000F9E6                 db    0
.xdata$x:0000F9E7                 db    0
.xdata$x:0000F9E8                 db    0
.xdata$x:0000F9E9                 db    0
.xdata$x:0000F9EA                 db    0
.xdata$x:0000F9EB                 db    0
.xdata$x:0000F9EC                 db    0
.xdata$x:0000F9ED                 db    0
.xdata$x:0000F9EE                 db    0
.xdata$x:0000F9EF                 db    0
.xdata$x:0000F9F0 __unwindtable$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z db 0FFh
.xdata$x:0000F9F0                                         ; DATA XREF: .xdata$x:0000F9D4o
.xdata$x:0000F9F1                 db 0FFh
.xdata$x:0000F9F2                 db 0FFh
.xdata$x:0000F9F3                 db 0FFh
.xdata$x:0000F9F4                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$0
.xdata$x:0000F9F8                 db    0
.xdata$x:0000F9F9                 db    0
.xdata$x:0000F9FA                 db    0
.xdata$x:0000F9FB                 db    0
.xdata$x:0000F9FC                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$1
.xdata$x:0000FA00                 db    1
.xdata$x:0000FA01                 db    0
.xdata$x:0000FA02                 db    0
.xdata$x:0000FA03                 db    0
.xdata$x:0000FA04                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$2
.xdata$x:0000FA08                 db    2
.xdata$x:0000FA09                 db    0
.xdata$x:0000FA0A                 db    0
.xdata$x:0000FA0B                 db    0
.xdata$x:0000FA0C                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$3
.xdata$x:0000FA10                 db    3
.xdata$x:0000FA11                 db    0
.xdata$x:0000FA12                 db    0
.xdata$x:0000FA13                 db    0
.xdata$x:0000FA14                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$4
.xdata$x:0000FA18                 db    4
.xdata$x:0000FA19                 db    0
.xdata$x:0000FA1A                 db    0
.xdata$x:0000FA1B                 db    0
.xdata$x:0000FA1C                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$5
.xdata$x:0000FA20                 db    5
.xdata$x:0000FA21                 db    0
.xdata$x:0000FA22                 db    0
.xdata$x:0000FA23                 db    0
.xdata$x:0000FA24                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$6
.xdata$x:0000FA28                 db    6
.xdata$x:0000FA29                 db    0
.xdata$x:0000FA2A                 db    0
.xdata$x:0000FA2B                 db    0
.xdata$x:0000FA2C                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$7
.xdata$x:0000FA30                 db    7
.xdata$x:0000FA31                 db    0
.xdata$x:0000FA32                 db    0
.xdata$x:0000FA33                 db    0
.xdata$x:0000FA34                 dd offset __unwindfunclet$??0FunctionParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$8
.xdata$x:0000FA34 _xdata$x        ends
.xdata$x:0000FA34
.xdata$x:0000FA38 ; ===========================================================================
.xdata$x:0000FA38
.xdata$x:0000FA38 ; Segment type: Pure data
.xdata$x:0000FA38 ; Segment permissions: Read
.xdata$x:0000FA38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FA38                 assume cs:_xdata$x
.xdata$x:0000FA38                 ;org 0FA38h
.xdata$x:0000FA38 __unwindtable$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z db 0FFh
.xdata$x:0000FA38                                         ; DATA XREF: .xdata$x:0000FB70o
.xdata$x:0000FA39                 db 0FFh
.xdata$x:0000FA3A                 db 0FFh
.xdata$x:0000FA3B                 db 0FFh
.xdata$x:0000FA3C                 dd offset __unwindfunclet$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z$0
.xdata$x:0000FA40 __unwindtable$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z db 0FFh
.xdata$x:0000FA40                                         ; DATA XREF: .xdata$x:0000FC24o
.xdata$x:0000FA41                 db 0FFh
.xdata$x:0000FA42                 db 0FFh
.xdata$x:0000FA43                 db 0FFh
.xdata$x:0000FA44                 dd offset __unwindfunclet$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z$0
.xdata$x:0000FA48 __unwindtable$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z db 0FFh
.xdata$x:0000FA48                                         ; DATA XREF: .xdata$x:0000FAE0o
.xdata$x:0000FA49                 db 0FFh
.xdata$x:0000FA4A                 db 0FFh
.xdata$x:0000FA4B                 db 0FFh
.xdata$x:0000FA4C                 dd offset __unwindfunclet$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z$0
.xdata$x:0000FA50                 db 0FFh
.xdata$x:0000FA51                 db 0FFh
.xdata$x:0000FA52                 db 0FFh
.xdata$x:0000FA53                 db 0FFh
.xdata$x:0000FA54                 dd offset __unwindfunclet$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z$1
.xdata$x:0000FA58 __unwindtable$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z db 0FFh
.xdata$x:0000FA58                                         ; DATA XREF: .xdata$x:0000FB04o
.xdata$x:0000FA59                 db 0FFh
.xdata$x:0000FA5A                 db 0FFh
.xdata$x:0000FA5B                 db 0FFh
.xdata$x:0000FA5C                 dd offset __unwindfunclet$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z$0
.xdata$x:0000FA60                 db 0FFh
.xdata$x:0000FA61                 db 0FFh
.xdata$x:0000FA62                 db 0FFh
.xdata$x:0000FA63                 db 0FFh
.xdata$x:0000FA64                 dd offset __unwindfunclet$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z$1
.xdata$x:0000FA68 __unwindtable$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z db 0FFh
.xdata$x:0000FA68                                         ; DATA XREF: .xdata$x:0000FB4Co
.xdata$x:0000FA69                 db 0FFh
.xdata$x:0000FA6A                 db 0FFh
.xdata$x:0000FA6B                 db 0FFh
.xdata$x:0000FA6C                 dd offset __unwindfunclet$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z$0
.xdata$x:0000FA70                 db    0
.xdata$x:0000FA71                 db    0
.xdata$x:0000FA72                 db    0
.xdata$x:0000FA73                 db    0
.xdata$x:0000FA74                 dd offset __unwindfunclet$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z$1
.xdata$x:0000FA78 __unwindtable$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z db 0FFh
.xdata$x:0000FA78                                         ; DATA XREF: .xdata$x:0000FB94o
.xdata$x:0000FA79                 db 0FFh
.xdata$x:0000FA7A                 db 0FFh
.xdata$x:0000FA7B                 db 0FFh
.xdata$x:0000FA7C                 dd offset __unwindfunclet$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z$0
.xdata$x:0000FA80                 db    0
.xdata$x:0000FA81                 db    0
.xdata$x:0000FA82                 db    0
.xdata$x:0000FA83                 db    0
.xdata$x:0000FA84                 dd offset __unwindfunclet$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z$1
.xdata$x:0000FA88 __unwindtable$??1FunctionParsersManager@@QAE@XZ db 0FFh
.xdata$x:0000FA88                                         ; DATA XREF: .xdata$x:0000FBB8o
.xdata$x:0000FA89                 db 0FFh
.xdata$x:0000FA8A                 db 0FFh
.xdata$x:0000FA8B                 db 0FFh
.xdata$x:0000FA8C                 dd offset __unwindfunclet$??1FunctionParsersManager@@QAE@XZ$0
.xdata$x:0000FA90                 db    0
.xdata$x:0000FA91                 db    0
.xdata$x:0000FA92                 db    0
.xdata$x:0000FA93                 db    0
.xdata$x:0000FA94                 dd offset __unwindfunclet$??1FunctionParsersManager@@QAE@XZ$1
.xdata$x:0000FA98 __unwindtable$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db 0FFh
.xdata$x:0000FA98                                         ; DATA XREF: .xdata$x:0000FC00o
.xdata$x:0000FA99                 db 0FFh
.xdata$x:0000FA9A                 db 0FFh
.xdata$x:0000FA9B                 db 0FFh
.xdata$x:0000FA9C                 dd offset __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0
.xdata$x:0000FAA0                 db    0
.xdata$x:0000FAA1                 db    0
.xdata$x:0000FAA2                 db    0
.xdata$x:0000FAA3                 db    0
.xdata$x:0000FAA4                 dd offset __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1
.xdata$x:0000FAA8                 db    1
.xdata$x:0000FAA9                 db    0
.xdata$x:0000FAAA                 db    0
.xdata$x:0000FAAB                 db    0
.xdata$x:0000FAAC                 dd offset __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2
.xdata$x:0000FAB0                 db    2
.xdata$x:0000FAB1                 db    0
.xdata$x:0000FAB2                 db    0
.xdata$x:0000FAB3                 db    0
.xdata$x:0000FAB4                 dd offset __unwindfunclet$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3
.xdata$x:0000FAB8 __unwindtable$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db 0FFh
.xdata$x:0000FAB8                                         ; DATA XREF: .xdata$x:0000FC48o
.xdata$x:0000FAB9                 db 0FFh
.xdata$x:0000FABA                 db 0FFh
.xdata$x:0000FABB                 db 0FFh
.xdata$x:0000FABC                 dd offset __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0
.xdata$x:0000FAC0                 db    0
.xdata$x:0000FAC1                 db    0
.xdata$x:0000FAC2                 db    0
.xdata$x:0000FAC3                 db    0
.xdata$x:0000FAC4                 dd offset __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1
.xdata$x:0000FAC8                 db    0
.xdata$x:0000FAC9                 db    0
.xdata$x:0000FACA                 db    0
.xdata$x:0000FACB                 db    0
.xdata$x:0000FACC                 dd offset __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2
.xdata$x:0000FAD0                 db    2
.xdata$x:0000FAD1                 db    0
.xdata$x:0000FAD2                 db    0
.xdata$x:0000FAD3                 db    0
.xdata$x:0000FAD4                 dd offset __unwindfunclet$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3
.xdata$x:0000FAD8 __ehfuncinfo$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z db  22h ; "
.xdata$x:0000FAD8                                         ; DATA XREF: __ehhandler$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z+1Bo
.xdata$x:0000FAD9                 db    5
.xdata$x:0000FADA                 db  93h ; ô
.xdata$x:0000FADB                 db  19h
.xdata$x:0000FADC                 db    2
.xdata$x:0000FADD                 db    0
.xdata$x:0000FADE                 db    0
.xdata$x:0000FADF                 db    0
.xdata$x:0000FAE0                 dd offset __unwindtable$?getUnitPaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@2@Z
.xdata$x:0000FAE4                 db    0
.xdata$x:0000FAE5                 db    0
.xdata$x:0000FAE6                 db    0
.xdata$x:0000FAE7                 db    0
.xdata$x:0000FAE8                 db    0
.xdata$x:0000FAE9                 db    0
.xdata$x:0000FAEA                 db    0
.xdata$x:0000FAEB                 db    0
.xdata$x:0000FAEC                 db    0
.xdata$x:0000FAED                 db    0
.xdata$x:0000FAEE                 db    0
.xdata$x:0000FAEF                 db    0
.xdata$x:0000FAF0                 db    0
.xdata$x:0000FAF1                 db    0
.xdata$x:0000FAF2                 db    0
.xdata$x:0000FAF3                 db    0
.xdata$x:0000FAF4                 db    0
.xdata$x:0000FAF5                 db    0
.xdata$x:0000FAF6                 db    0
.xdata$x:0000FAF7                 db    0
.xdata$x:0000FAF8                 db    0
.xdata$x:0000FAF9                 db    0
.xdata$x:0000FAFA                 db    0
.xdata$x:0000FAFB                 db    0
.xdata$x:0000FAFC __ehfuncinfo$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z db  22h ; "
.xdata$x:0000FAFC                                         ; DATA XREF: __ehhandler$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z+1Bo
.xdata$x:0000FAFD                 db    5
.xdata$x:0000FAFE                 db  93h ; ô
.xdata$x:0000FAFF                 db  19h
.xdata$x:0000FB00                 db    2
.xdata$x:0000FB01                 db    0
.xdata$x:0000FB02                 db    0
.xdata$x:0000FB03                 db    0
.xdata$x:0000FB04                 dd offset __unwindtable$?getZonePaserParameters@FunctionParsersManager@@AAE_NPAVTiXmlNode@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11AAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@4@12@Z
.xdata$x:0000FB08                 align 20h
.xdata$x:0000FB20 __ehfuncinfo$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ db  22h ; "
.xdata$x:0000FB20                                         ; DATA XREF: __ehhandler$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ+1Eo
.xdata$x:0000FB21                 db    5
.xdata$x:0000FB22                 db  93h ; ô
.xdata$x:0000FB23                 db  19h
.xdata$x:0000FB24                 db  26h ; &
.xdata$x:0000FB25                 db    0
.xdata$x:0000FB26                 db    0
.xdata$x:0000FB27                 db    0
.xdata$x:0000FB28                 dd offset __unwindtable$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ
.xdata$x:0000FB2C                 db    0
.xdata$x:0000FB2D                 db    0
.xdata$x:0000FB2E                 db    0
.xdata$x:0000FB2F                 db    0
.xdata$x:0000FB30                 db    0
.xdata$x:0000FB31                 db    0
.xdata$x:0000FB32                 db    0
.xdata$x:0000FB33                 db    0
.xdata$x:0000FB34                 db    0
.xdata$x:0000FB35                 db    0
.xdata$x:0000FB36                 db    0
.xdata$x:0000FB37                 db    0
.xdata$x:0000FB38                 db    0
.xdata$x:0000FB39                 db    0
.xdata$x:0000FB3A                 db    0
.xdata$x:0000FB3B                 db    0
.xdata$x:0000FB3C                 db    0
.xdata$x:0000FB3D                 db    0
.xdata$x:0000FB3E                 db    0
.xdata$x:0000FB3F                 db    0
.xdata$x:0000FB40                 db    0
.xdata$x:0000FB41                 db    0
.xdata$x:0000FB42                 db    0
.xdata$x:0000FB43                 db    0
.xdata$x:0000FB44 __ehfuncinfo$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z db  22h ; "
.xdata$x:0000FB44                                         ; DATA XREF: __ehhandler$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z+1Bo
.xdata$x:0000FB45                 db    5
.xdata$x:0000FB46                 db  93h ; ô
.xdata$x:0000FB47                 db  19h
.xdata$x:0000FB48                 db    2
.xdata$x:0000FB49                 db    0
.xdata$x:0000FB4A                 db    0
.xdata$x:0000FB4B                 db    0
.xdata$x:0000FB4C                 dd offset __unwindtable$?writeFunctionListXml@FunctionParsersManager@@QBEXPB_W@Z
.xdata$x:0000FB50                 db    0
.xdata$x:0000FB51                 db    0
.xdata$x:0000FB52                 db    0
.xdata$x:0000FB53                 db    0
.xdata$x:0000FB54                 db    0
.xdata$x:0000FB55                 db    0
.xdata$x:0000FB56                 db    0
.xdata$x:0000FB57                 db    0
.xdata$x:0000FB58                 db    0
.xdata$x:0000FB59                 db    0
.xdata$x:0000FB5A                 db    0
.xdata$x:0000FB5B                 db    0
.xdata$x:0000FB5C                 db    0
.xdata$x:0000FB5D                 db    0
.xdata$x:0000FB5E                 db    0
.xdata$x:0000FB5F                 db    0
.xdata$x:0000FB60                 db    0
.xdata$x:0000FB61                 db    0
.xdata$x:0000FB62                 db    0
.xdata$x:0000FB63                 db    0
.xdata$x:0000FB64                 db    0
.xdata$x:0000FB65                 db    0
.xdata$x:0000FB66                 db    0
.xdata$x:0000FB67                 db    0
.xdata$x:0000FB68 __ehfuncinfo$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z db  22h ; "
.xdata$x:0000FB68                                         ; DATA XREF: __ehhandler$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z+11o
.xdata$x:0000FB69                 db    5
.xdata$x:0000FB6A                 db  93h ; ô
.xdata$x:0000FB6B                 db  19h
.xdata$x:0000FB6C                 db    1
.xdata$x:0000FB6D                 db    0
.xdata$x:0000FB6E                 db    0
.xdata$x:0000FB6F                 db    0
.xdata$x:0000FB70                 dd offset __unwindtable$?parse@FunctionParsersManager@@QAE_NAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@ABUAssociationInfo@@@Z
.xdata$x:0000FB74                 db    0
.xdata$x:0000FB75                 db    0
.xdata$x:0000FB76                 db    0
.xdata$x:0000FB77                 db    0
.xdata$x:0000FB78                 db    0
.xdata$x:0000FB79                 db    0
.xdata$x:0000FB7A                 db    0
.xdata$x:0000FB7B                 db    0
.xdata$x:0000FB7C                 db    0
.xdata$x:0000FB7D                 db    0
.xdata$x:0000FB7E                 db    0
.xdata$x:0000FB7F                 db    0
.xdata$x:0000FB80                 db    0
.xdata$x:0000FB81                 db    0
.xdata$x:0000FB82                 db    0
.xdata$x:0000FB83                 db    0
.xdata$x:0000FB84                 db    0
.xdata$x:0000FB85                 db    0
.xdata$x:0000FB86                 db    0
.xdata$x:0000FB87                 db    0
.xdata$x:0000FB88                 db    0
.xdata$x:0000FB89                 db    0
.xdata$x:0000FB8A                 db    0
.xdata$x:0000FB8B                 db    0
.xdata$x:0000FB8C __ehfuncinfo$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z db  22h ; "
.xdata$x:0000FB8C                                         ; DATA XREF: __ehhandler$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z+11o
.xdata$x:0000FB8D                 db    5
.xdata$x:0000FB8E                 db  93h ; ô
.xdata$x:0000FB8F                 db  19h
.xdata$x:0000FB90                 db    2
.xdata$x:0000FB91                 db    0
.xdata$x:0000FB92                 db    0
.xdata$x:0000FB93                 db    0
.xdata$x:0000FB94                 dd offset __unwindtable$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z
.xdata$x:0000FB98                 db    0
.xdata$x:0000FB99                 db    0
.xdata$x:0000FB9A                 db    0
.xdata$x:0000FB9B                 db    0
.xdata$x:0000FB9C                 db    0
.xdata$x:0000FB9D                 db    0
.xdata$x:0000FB9E                 db    0
.xdata$x:0000FB9F                 db    0
.xdata$x:0000FBA0                 db    0
.xdata$x:0000FBA1                 db    0
.xdata$x:0000FBA2                 db    0
.xdata$x:0000FBA3                 db    0
.xdata$x:0000FBA4                 db    0
.xdata$x:0000FBA5                 db    0
.xdata$x:0000FBA6                 db    0
.xdata$x:0000FBA7                 db    0
.xdata$x:0000FBA8                 db    0
.xdata$x:0000FBA9                 db    0
.xdata$x:0000FBAA                 db    0
.xdata$x:0000FBAB                 db    0
.xdata$x:0000FBAC                 db    0
.xdata$x:0000FBAD                 db    0
.xdata$x:0000FBAE                 db    0
.xdata$x:0000FBAF                 db    0
.xdata$x:0000FBB0 __ehfuncinfo$??1FunctionParsersManager@@QAE@XZ db  22h ; "
.xdata$x:0000FBB0                                         ; DATA XREF: __ehhandler$??1FunctionParsersManager@@QAE@XZ+11o
.xdata$x:0000FBB1                 db    5
.xdata$x:0000FBB2                 db  93h ; ô
.xdata$x:0000FBB3                 db  19h
.xdata$x:0000FBB4                 db    2
.xdata$x:0000FBB5                 db    0
.xdata$x:0000FBB6                 db    0
.xdata$x:0000FBB7                 db    0
.xdata$x:0000FBB8                 dd offset __unwindtable$??1FunctionParsersManager@@QAE@XZ
.xdata$x:0000FBBC                 db    0
.xdata$x:0000FBBD                 db    0
.xdata$x:0000FBBE                 db    0
.xdata$x:0000FBBF                 db    0
.xdata$x:0000FBC0                 db    0
.xdata$x:0000FBC1                 db    0
.xdata$x:0000FBC2                 db    0
.xdata$x:0000FBC3                 db    0
.xdata$x:0000FBC4                 db    0
.xdata$x:0000FBC5                 db    0
.xdata$x:0000FBC6                 db    0
.xdata$x:0000FBC7                 db    0
.xdata$x:0000FBC8                 db    0
.xdata$x:0000FBC9                 db    0
.xdata$x:0000FBCA                 db    0
.xdata$x:0000FBCB                 db    0
.xdata$x:0000FBCC                 db    0
.xdata$x:0000FBCD                 db    0
.xdata$x:0000FBCE                 db    0
.xdata$x:0000FBCF                 db    0
.xdata$x:0000FBD0                 db    0
.xdata$x:0000FBD1                 db    0
.xdata$x:0000FBD2                 db    0
.xdata$x:0000FBD3                 db    0
.xdata$x:0000FBD4 __ehfuncinfo$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db  22h ; "
.xdata$x:0000FBD4                                         ; DATA XREF: __ehhandler$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z+14o
.xdata$x:0000FBD5                 db    5
.xdata$x:0000FBD6                 db  93h ; ô
.xdata$x:0000FBD7                 db  19h
.xdata$x:0000FBD8                 db    9
.xdata$x:0000FBD9                 db    0
.xdata$x:0000FBDA                 db    0
.xdata$x:0000FBDB                 db    0
.xdata$x:0000FBDC                 dd offset __unwindtable$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.xdata$x:0000FBE0                 db    0
.xdata$x:0000FBE1                 db    0
.xdata$x:0000FBE2                 db    0
.xdata$x:0000FBE3                 db    0
.xdata$x:0000FBE4                 db    0
.xdata$x:0000FBE5                 db    0
.xdata$x:0000FBE6                 db    0
.xdata$x:0000FBE7                 db    0
.xdata$x:0000FBE8                 db    0
.xdata$x:0000FBE9                 db    0
.xdata$x:0000FBEA                 db    0
.xdata$x:0000FBEB                 db    0
.xdata$x:0000FBEC                 db    0
.xdata$x:0000FBED                 db    0
.xdata$x:0000FBEE                 db    0
.xdata$x:0000FBEF                 db    0
.xdata$x:0000FBF0                 db    0
.xdata$x:0000FBF1                 db    0
.xdata$x:0000FBF2                 db    0
.xdata$x:0000FBF3                 db    0
.xdata$x:0000FBF4                 db    0
.xdata$x:0000FBF5                 db    0
.xdata$x:0000FBF6                 db    0
.xdata$x:0000FBF7                 db    0
.xdata$x:0000FBF8 __ehfuncinfo$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db  22h ; "
.xdata$x:0000FBF8                                         ; DATA XREF: __ehhandler$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z+11o
.xdata$x:0000FBF9                 db    5
.xdata$x:0000FBFA                 db  93h ; ô
.xdata$x:0000FBFB                 db  19h
.xdata$x:0000FBFC                 db    4
.xdata$x:0000FBFD                 db    0
.xdata$x:0000FBFE                 db    0
.xdata$x:0000FBFF                 db    0
.xdata$x:0000FC00                 dd offset __unwindtable$?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.xdata$x:0000FC04                 db    0
.xdata$x:0000FC05                 db    0
.xdata$x:0000FC06                 db    0
.xdata$x:0000FC07                 db    0
.xdata$x:0000FC08                 db    0
.xdata$x:0000FC09                 db    0
.xdata$x:0000FC0A                 db    0
.xdata$x:0000FC0B                 db    0
.xdata$x:0000FC0C                 db    0
.xdata$x:0000FC0D                 db    0
.xdata$x:0000FC0E                 db    0
.xdata$x:0000FC0F                 db    0
.xdata$x:0000FC10                 db    0
.xdata$x:0000FC11                 db    0
.xdata$x:0000FC12                 db    0
.xdata$x:0000FC13                 db    0
.xdata$x:0000FC14                 db    0
.xdata$x:0000FC15                 db    0
.xdata$x:0000FC16                 db    0
.xdata$x:0000FC17                 db    0
.xdata$x:0000FC18                 db    0
.xdata$x:0000FC19                 db    0
.xdata$x:0000FC1A                 db    0
.xdata$x:0000FC1B                 db    0
.xdata$x:0000FC1C __ehfuncinfo$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z db  22h ; "
.xdata$x:0000FC1C                                         ; DATA XREF: __ehhandler$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z+1Bo
.xdata$x:0000FC1D                 db    5
.xdata$x:0000FC1E                 db  93h ; ô
.xdata$x:0000FC1F                 db  19h
.xdata$x:0000FC20                 db    1
.xdata$x:0000FC21                 db    0
.xdata$x:0000FC22                 db    0
.xdata$x:0000FC23                 db    0
.xdata$x:0000FC24                 dd offset __unwindtable$?getBodyClosePos@FunctionZoneParser@@AAEIIPB_W0ABV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@PAPAVScintillaEditView@@@Z
.xdata$x:0000FC28                 align 20h
.xdata$x:0000FC40 __ehfuncinfo$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db  22h ; "
.xdata$x:0000FC40                                         ; DATA XREF: __ehhandler$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z+1Bo
.xdata$x:0000FC41                 db    5
.xdata$x:0000FC42                 db  93h ; ô
.xdata$x:0000FC43                 db  19h
.xdata$x:0000FC44                 db    4
.xdata$x:0000FC45                 db    0
.xdata$x:0000FC46                 db    0
.xdata$x:0000FC47                 db    0
.xdata$x:0000FC48                 dd offset __unwindtable$?classParse@FunctionZoneParser@@IAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@AAV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@ABV43@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.xdata$x:0000FC4C                 db    0
.xdata$x:0000FC4D                 db    0
.xdata$x:0000FC4E                 db    0
.xdata$x:0000FC4F                 db    0
.xdata$x:0000FC50                 db    0
.xdata$x:0000FC51                 db    0
.xdata$x:0000FC52                 db    0
.xdata$x:0000FC53                 db    0
.xdata$x:0000FC54                 db    0
.xdata$x:0000FC55                 db    0
.xdata$x:0000FC56                 db    0
.xdata$x:0000FC57                 db    0
.xdata$x:0000FC58                 db    0
.xdata$x:0000FC59                 db    0
.xdata$x:0000FC5A                 db    0
.xdata$x:0000FC5B                 db    0
.xdata$x:0000FC5C                 db    0
.xdata$x:0000FC5D                 db    0
.xdata$x:0000FC5E                 db    0
.xdata$x:0000FC5F                 db    0
.xdata$x:0000FC60                 db    0
.xdata$x:0000FC61                 db    0
.xdata$x:0000FC62                 db    0
.xdata$x:0000FC63                 db    0
.xdata$x:0000FC64 __ehfuncinfo$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db  22h ; "
.xdata$x:0000FC64                                         ; DATA XREF: __ehhandler$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z+11o
.xdata$x:0000FC65                 db    5
.xdata$x:0000FC66                 db  93h ; ô
.xdata$x:0000FC67                 db  19h
.xdata$x:0000FC68                 db    5
.xdata$x:0000FC69                 db    0
.xdata$x:0000FC6A                 db    0
.xdata$x:0000FC6B                 db    0
.xdata$x:0000FC6C                 dd offset __unwindtable$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.xdata$x:0000FC70                 db    0
.xdata$x:0000FC71                 db    0
.xdata$x:0000FC72                 db    0
.xdata$x:0000FC73                 db    0
.xdata$x:0000FC74                 db    0
.xdata$x:0000FC75                 db    0
.xdata$x:0000FC76                 db    0
.xdata$x:0000FC77                 db    0
.xdata$x:0000FC78                 db    0
.xdata$x:0000FC79                 db    0
.xdata$x:0000FC7A                 db    0
.xdata$x:0000FC7B                 db    0
.xdata$x:0000FC7C                 db    0
.xdata$x:0000FC7D                 db    0
.xdata$x:0000FC7E                 db    0
.xdata$x:0000FC7F                 db    0
.xdata$x:0000FC80                 db    0
.xdata$x:0000FC81                 db    0
.xdata$x:0000FC82                 db    0
.xdata$x:0000FC83                 db    0
.xdata$x:0000FC84                 db    0
.xdata$x:0000FC85                 db    0
.xdata$x:0000FC86                 db    0
.xdata$x:0000FC87                 db    0
.xdata$x:0000FC88 __ehfuncinfo$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z db  22h ; "
.xdata$x:0000FC88                                         ; DATA XREF: __ehhandler$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z+1Eo
.xdata$x:0000FC89                 db    5
.xdata$x:0000FC8A                 db  93h ; ô
.xdata$x:0000FC8B                 db  19h
.xdata$x:0000FC8C                 db    5
.xdata$x:0000FC8D                 db    0
.xdata$x:0000FC8E                 db    0
.xdata$x:0000FC8F                 db    0
.xdata$x:0000FC90                 dd offset __unwindtable$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z
.xdata$x:0000FC94                 db    0
.xdata$x:0000FC95                 db    0
.xdata$x:0000FC96                 db    0
.xdata$x:0000FC97                 db    0
.xdata$x:0000FC98                 db    0
.xdata$x:0000FC99                 db    0
.xdata$x:0000FC9A                 db    0
.xdata$x:0000FC9B                 db    0
.xdata$x:0000FC9C                 db    0
.xdata$x:0000FC9D                 db    0
.xdata$x:0000FC9E                 db    0
.xdata$x:0000FC9F                 db    0
.xdata$x:0000FCA0                 db    0
.xdata$x:0000FCA1                 db    0
.xdata$x:0000FCA2                 db    0
.xdata$x:0000FCA3                 db    0
.xdata$x:0000FCA4                 db    0
.xdata$x:0000FCA5                 db    0
.xdata$x:0000FCA6                 db    0
.xdata$x:0000FCA7                 db    0
.xdata$x:0000FCA8                 db    0
.xdata$x:0000FCA9                 db    0
.xdata$x:0000FCAA                 db    0
.xdata$x:0000FCAB                 db    0
.xdata$x:0000FCAC __ehfuncinfo$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z db  22h ; "
.xdata$x:0000FCAC                                         ; DATA XREF: __ehhandler$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z+1Eo
.xdata$x:0000FCAD                 db    5
.xdata$x:0000FCAE                 db  93h ; ô
.xdata$x:0000FCAF                 db  19h
.xdata$x:0000FCB0                 db    6
.xdata$x:0000FCB1                 db    0
.xdata$x:0000FCB2                 db    0
.xdata$x:0000FCB3                 db    0
.xdata$x:0000FCB4                 dd offset __unwindtable$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z
.xdata$x:0000FCB8                 db    0
.xdata$x:0000FCB9                 db    0
.xdata$x:0000FCBA                 db    0
.xdata$x:0000FCBB                 db    0
.xdata$x:0000FCBC                 db    0
.xdata$x:0000FCBD                 db    0
.xdata$x:0000FCBE                 db    0
.xdata$x:0000FCBF                 db    0
.xdata$x:0000FCC0                 db    0
.xdata$x:0000FCC1                 db    0
.xdata$x:0000FCC2                 db    0
.xdata$x:0000FCC3                 db    0
.xdata$x:0000FCC4                 db    0
.xdata$x:0000FCC5                 db    0
.xdata$x:0000FCC6                 db    0
.xdata$x:0000FCC7                 db    0
.xdata$x:0000FCC8                 db    0
.xdata$x:0000FCC9                 db    0
.xdata$x:0000FCCA                 db    0
.xdata$x:0000FCCB                 db    0
.xdata$x:0000FCCC                 db    0
.xdata$x:0000FCCD                 db    0
.xdata$x:0000FCCE                 db    0
.xdata$x:0000FCCF                 db    0
.xdata$x:0000FCD0 __unwindtable$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db 0FFh
.xdata$x:0000FCD0                                         ; DATA XREF: .xdata$x:0000FC6Co
.xdata$x:0000FCD1                 db 0FFh
.xdata$x:0000FCD2                 db 0FFh
.xdata$x:0000FCD3                 db 0FFh
.xdata$x:0000FCD4                 dd offset __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0
.xdata$x:0000FCD8                 db    0
.xdata$x:0000FCD9                 db    0
.xdata$x:0000FCDA                 db    0
.xdata$x:0000FCDB                 db    0
.xdata$x:0000FCDC                 dd offset __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1
.xdata$x:0000FCE0                 db    1
.xdata$x:0000FCE1                 db    0
.xdata$x:0000FCE2                 db    0
.xdata$x:0000FCE3                 db    0
.xdata$x:0000FCE4                 dd offset __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2
.xdata$x:0000FCE8                 db    2
.xdata$x:0000FCE9                 db    0
.xdata$x:0000FCEA                 db    0
.xdata$x:0000FCEB                 db    0
.xdata$x:0000FCEC                 dd offset __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3
.xdata$x:0000FCF0                 db    3
.xdata$x:0000FCF1                 db    0
.xdata$x:0000FCF2                 db    0
.xdata$x:0000FCF3                 db    0
.xdata$x:0000FCF4                 dd offset __unwindfunclet$?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$4
.xdata$x:0000FCF8 __unwindtable$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z db 0FFh
.xdata$x:0000FCF8                                         ; DATA XREF: .xdata$x:0000FC90o
.xdata$x:0000FCF9                 db 0FFh
.xdata$x:0000FCFA                 db 0FFh
.xdata$x:0000FCFB                 db 0FFh
.xdata$x:0000FCFC                 dd offset __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$1
.xdata$x:0000FD00                 db    0
.xdata$x:0000FD01                 db    0
.xdata$x:0000FD02                 db    0
.xdata$x:0000FD03                 db    0
.xdata$x:0000FD04                 dd offset __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$0
.xdata$x:0000FD08                 db    1
.xdata$x:0000FD09                 db    0
.xdata$x:0000FD0A                 db    0
.xdata$x:0000FD0B                 db    0
.xdata$x:0000FD0C                 dd offset __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$2
.xdata$x:0000FD10                 db    2
.xdata$x:0000FD11                 db    0
.xdata$x:0000FD12                 db    0
.xdata$x:0000FD13                 db    0
.xdata$x:0000FD14                 dd offset __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$3
.xdata$x:0000FD18                 db    1
.xdata$x:0000FD19                 db    0
.xdata$x:0000FD1A                 db    0
.xdata$x:0000FD1B                 db    0
.xdata$x:0000FD1C                 dd offset __unwindfunclet$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z$5
.xdata$x:0000FD20 __unwindtable$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z db 0FFh
.xdata$x:0000FD20                                         ; DATA XREF: .xdata$x:0000FCB4o
.xdata$x:0000FD21                 db 0FFh
.xdata$x:0000FD22                 db 0FFh
.xdata$x:0000FD23                 db 0FFh
.xdata$x:0000FD24                 dd offset __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$0
.xdata$x:0000FD28                 db    0
.xdata$x:0000FD29                 db    0
.xdata$x:0000FD2A                 db    0
.xdata$x:0000FD2B                 db    0
.xdata$x:0000FD2C                 dd offset __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$1
.xdata$x:0000FD30                 db    1
.xdata$x:0000FD31                 db    0
.xdata$x:0000FD32                 db    0
.xdata$x:0000FD33                 db    0
.xdata$x:0000FD34                 dd offset __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$2
.xdata$x:0000FD38                 db    1
.xdata$x:0000FD39                 db    0
.xdata$x:0000FD3A                 db    0
.xdata$x:0000FD3B                 db    0
.xdata$x:0000FD3C                 dd offset __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$3
.xdata$x:0000FD40                 db    1
.xdata$x:0000FD41                 db    0
.xdata$x:0000FD42                 db    0
.xdata$x:0000FD43                 db    0
.xdata$x:0000FD44                 dd offset __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$4
.xdata$x:0000FD48                 db    1
.xdata$x:0000FD49                 db    0
.xdata$x:0000FD4A                 db    0
.xdata$x:0000FD4B                 db    0
.xdata$x:0000FD4C                 dd offset __unwindfunclet$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z$5
.xdata$x:0000FD50 __unwindtable$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z db 0FFh
.xdata$x:0000FD50                                         ; DATA XREF: .xdata$x:0000FBDCo
.xdata$x:0000FD51                 db 0FFh
.xdata$x:0000FD52                 db 0FFh
.xdata$x:0000FD53                 db 0FFh
.xdata$x:0000FD54                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$0
.xdata$x:0000FD58                 db    0
.xdata$x:0000FD59                 db    0
.xdata$x:0000FD5A                 db    0
.xdata$x:0000FD5B                 db    0
.xdata$x:0000FD5C                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$1
.xdata$x:0000FD60                 db    1
.xdata$x:0000FD61                 db    0
.xdata$x:0000FD62                 db    0
.xdata$x:0000FD63                 db    0
.xdata$x:0000FD64                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$2
.xdata$x:0000FD68                 db    2
.xdata$x:0000FD69                 db    0
.xdata$x:0000FD6A                 db    0
.xdata$x:0000FD6B                 db    0
.xdata$x:0000FD6C                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$3
.xdata$x:0000FD70                 db    3
.xdata$x:0000FD71                 db    0
.xdata$x:0000FD72                 db    0
.xdata$x:0000FD73                 db    0
.xdata$x:0000FD74                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$4
.xdata$x:0000FD78                 db    4
.xdata$x:0000FD79                 db    0
.xdata$x:0000FD7A                 db    0
.xdata$x:0000FD7B                 db    0
.xdata$x:0000FD7C                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$5
.xdata$x:0000FD80                 db    4
.xdata$x:0000FD81                 db    0
.xdata$x:0000FD82                 db    0
.xdata$x:0000FD83                 db    0
.xdata$x:0000FD84                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$6
.xdata$x:0000FD88                 db    6
.xdata$x:0000FD89                 db    0
.xdata$x:0000FD8A                 db    0
.xdata$x:0000FD8B                 db    0
.xdata$x:0000FD8C                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$7
.xdata$x:0000FD90                 db    4
.xdata$x:0000FD91                 db    0
.xdata$x:0000FD92                 db    0
.xdata$x:0000FD93                 db    0
.xdata$x:0000FD94                 dd offset __unwindfunclet$?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z$8
.xdata$x:0000FD98 __unwindtable$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ db 0FFh
.xdata$x:0000FD98                                         ; DATA XREF: .xdata$x:0000FB28o
.xdata$x:0000FD99                 db 0FFh
.xdata$x:0000FD9A                 db 0FFh
.xdata$x:0000FD9B                 db 0FFh
.xdata$x:0000FD9C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$0
.xdata$x:0000FDA0                 db    0
.xdata$x:0000FDA1                 db    0
.xdata$x:0000FDA2                 db    0
.xdata$x:0000FDA3                 db    0
.xdata$x:0000FDA4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$1
.xdata$x:0000FDA8                 db    1
.xdata$x:0000FDA9                 db    0
.xdata$x:0000FDAA                 db    0
.xdata$x:0000FDAB                 db    0
.xdata$x:0000FDAC                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$2
.xdata$x:0000FDB0                 db    2
.xdata$x:0000FDB1                 db    0
.xdata$x:0000FDB2                 db    0
.xdata$x:0000FDB3                 db    0
.xdata$x:0000FDB4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$3
.xdata$x:0000FDB8                 db    3
.xdata$x:0000FDB9                 db    0
.xdata$x:0000FDBA                 db    0
.xdata$x:0000FDBB                 db    0
.xdata$x:0000FDBC                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$4
.xdata$x:0000FDC0                 db    4
.xdata$x:0000FDC1                 db    0
.xdata$x:0000FDC2                 db    0
.xdata$x:0000FDC3                 db    0
.xdata$x:0000FDC4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$5
.xdata$x:0000FDC8                 db    5
.xdata$x:0000FDC9                 db    0
.xdata$x:0000FDCA                 db    0
.xdata$x:0000FDCB                 db    0
.xdata$x:0000FDCC                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$6
.xdata$x:0000FDD0                 db    6
.xdata$x:0000FDD1                 db    0
.xdata$x:0000FDD2                 db    0
.xdata$x:0000FDD3                 db    0
.xdata$x:0000FDD4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$7
.xdata$x:0000FDD8                 db    7
.xdata$x:0000FDD9                 db    0
.xdata$x:0000FDDA                 db    0
.xdata$x:0000FDDB                 db    0
.xdata$x:0000FDDC                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$8
.xdata$x:0000FDE0                 db    8
.xdata$x:0000FDE1                 db    0
.xdata$x:0000FDE2                 db    0
.xdata$x:0000FDE3                 db    0
.xdata$x:0000FDE4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$9
.xdata$x:0000FDE8                 db    9
.xdata$x:0000FDE9                 db    0
.xdata$x:0000FDEA                 db    0
.xdata$x:0000FDEB                 db    0
.xdata$x:0000FDEC                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$10
.xdata$x:0000FDF0                 db  0Ah
.xdata$x:0000FDF1                 db    0
.xdata$x:0000FDF2                 db    0
.xdata$x:0000FDF3                 db    0
.xdata$x:0000FDF4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$11
.xdata$x:0000FDF8                 db  0Bh
.xdata$x:0000FDF9                 db    0
.xdata$x:0000FDFA                 db    0
.xdata$x:0000FDFB                 db    0
.xdata$x:0000FDFC                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$12
.xdata$x:0000FE00                 db  0Ch
.xdata$x:0000FE01                 db    0
.xdata$x:0000FE02                 db    0
.xdata$x:0000FE03                 db    0
.xdata$x:0000FE04                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$13
.xdata$x:0000FE08                 db    9
.xdata$x:0000FE09                 db    0
.xdata$x:0000FE0A                 db    0
.xdata$x:0000FE0B                 db    0
.xdata$x:0000FE0C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$14
.xdata$x:0000FE10                 db  0Eh
.xdata$x:0000FE11                 db    0
.xdata$x:0000FE12                 db    0
.xdata$x:0000FE13                 db    0
.xdata$x:0000FE14                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$15
.xdata$x:0000FE18                 db  0Fh
.xdata$x:0000FE19                 db    0
.xdata$x:0000FE1A                 db    0
.xdata$x:0000FE1B                 db    0
.xdata$x:0000FE1C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$16
.xdata$x:0000FE20                 db  10h
.xdata$x:0000FE21                 db    0
.xdata$x:0000FE22                 db    0
.xdata$x:0000FE23                 db    0
.xdata$x:0000FE24                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$17
.xdata$x:0000FE28                 db  11h
.xdata$x:0000FE29                 db    0
.xdata$x:0000FE2A                 db    0
.xdata$x:0000FE2B                 db    0
.xdata$x:0000FE2C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$18
.xdata$x:0000FE30                 db  12h
.xdata$x:0000FE31                 db    0
.xdata$x:0000FE32                 db    0
.xdata$x:0000FE33                 db    0
.xdata$x:0000FE34                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$19
.xdata$x:0000FE38                 db  13h
.xdata$x:0000FE39                 db    0
.xdata$x:0000FE3A                 db    0
.xdata$x:0000FE3B                 db    0
.xdata$x:0000FE3C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$20
.xdata$x:0000FE40                 db    2
.xdata$x:0000FE41                 db    0
.xdata$x:0000FE42                 db    0
.xdata$x:0000FE43                 db    0
.xdata$x:0000FE44                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$21
.xdata$x:0000FE48                 db  15h
.xdata$x:0000FE49                 db    0
.xdata$x:0000FE4A                 db    0
.xdata$x:0000FE4B                 db    0
.xdata$x:0000FE4C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$22
.xdata$x:0000FE50                 db  16h
.xdata$x:0000FE51                 db    0
.xdata$x:0000FE52                 db    0
.xdata$x:0000FE53                 db    0
.xdata$x:0000FE54                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$23
.xdata$x:0000FE58                 db  17h
.xdata$x:0000FE59                 db    0
.xdata$x:0000FE5A                 db    0
.xdata$x:0000FE5B                 db    0
.xdata$x:0000FE5C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$24
.xdata$x:0000FE60                 db  18h
.xdata$x:0000FE61                 db    0
.xdata$x:0000FE62                 db    0
.xdata$x:0000FE63                 db    0
.xdata$x:0000FE64                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$25
.xdata$x:0000FE68                 db  19h
.xdata$x:0000FE69                 db    0
.xdata$x:0000FE6A                 db    0
.xdata$x:0000FE6B                 db    0
.xdata$x:0000FE6C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$26
.xdata$x:0000FE70                 db  1Ah
.xdata$x:0000FE71                 db    0
.xdata$x:0000FE72                 db    0
.xdata$x:0000FE73                 db    0
.xdata$x:0000FE74                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$27
.xdata$x:0000FE78                 db  1Bh
.xdata$x:0000FE79                 db    0
.xdata$x:0000FE7A                 db    0
.xdata$x:0000FE7B                 db    0
.xdata$x:0000FE7C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$28
.xdata$x:0000FE80                 db  1Ch
.xdata$x:0000FE81                 db    0
.xdata$x:0000FE82                 db    0
.xdata$x:0000FE83                 db    0
.xdata$x:0000FE84                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$29
.xdata$x:0000FE88                 db  1Dh
.xdata$x:0000FE89                 db    0
.xdata$x:0000FE8A                 db    0
.xdata$x:0000FE8B                 db    0
.xdata$x:0000FE8C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$30
.xdata$x:0000FE90                 db  1Eh
.xdata$x:0000FE91                 db    0
.xdata$x:0000FE92                 db    0
.xdata$x:0000FE93                 db    0
.xdata$x:0000FE94                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$31
.xdata$x:0000FE98                 db    2
.xdata$x:0000FE99                 db    0
.xdata$x:0000FE9A                 db    0
.xdata$x:0000FE9B                 db    0
.xdata$x:0000FE9C                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$32
.xdata$x:0000FEA0                 dd offset $SG154891+0Ch ; "mbole"
.xdata$x:0000FEA4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$33
.xdata$x:0000FEA8                 dd offset $SG154891+0Dh ; "戀漀氀攀"
.xdata$x:0000FEAC                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$34
.xdata$x:0000FEB0                 dd offset $SG154891+0Eh ; "bole"
.xdata$x:0000FEB4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$35
.xdata$x:0000FEB8                 dd offset $SG154891+0Fh ; "漀氀攀"
.xdata$x:0000FEBC                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$36
.xdata$x:0000FEC0                 db 0FFh
.xdata$x:0000FEC1                 db 0FFh
.xdata$x:0000FEC2                 db 0FFh
.xdata$x:0000FEC3                 db 0FFh
.xdata$x:0000FEC4                 dd offset __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$37
.xdata$x:0000FEC4 _xdata$x        ends
.xdata$x:0000FEC4
.xdata$x:0000FEC8 ; ===========================================================================
.xdata$x:0000FEC8
.xdata$x:0000FEC8 ; Segment type: Pure data
.xdata$x:0000FEC8 ; Segment permissions: Read
.xdata$x:0000FEC8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FEC8                 assume cs:_xdata$x
.xdata$x:0000FEC8                 ;org 0FEC8h
.xdata$x:0000FEC8 ; COMDAT (pick associative to section at 9008)
.xdata$x:0000FEC8 __ehfuncinfo$??1FunctionParser@@QAE@XZ db  22h ; "
.xdata$x:0000FEC8                                         ; DATA XREF: __ehhandler$??1FunctionParser@@QAE@XZ+11o
.xdata$x:0000FEC9                 db    5
.xdata$x:0000FECA                 db  93h ; ô
.xdata$x:0000FECB                 db  19h
.xdata$x:0000FECC                 db    6
.xdata$x:0000FECD                 db    0
.xdata$x:0000FECE                 db    0
.xdata$x:0000FECF                 db    0
.xdata$x:0000FED0                 dd offset __unwindtable$??1FunctionParser@@QAE@XZ
.xdata$x:0000FED4                 db    0
.xdata$x:0000FED5                 db    0
.xdata$x:0000FED6                 db    0
.xdata$x:0000FED7                 db    0
.xdata$x:0000FED8                 db    0
.xdata$x:0000FED9                 db    0
.xdata$x:0000FEDA                 db    0
.xdata$x:0000FEDB                 db    0
.xdata$x:0000FEDC                 db    0
.xdata$x:0000FEDD                 db    0
.xdata$x:0000FEDE                 db    0
.xdata$x:0000FEDF                 db    0
.xdata$x:0000FEE0                 db    0
.xdata$x:0000FEE1                 db    0
.xdata$x:0000FEE2                 db    0
.xdata$x:0000FEE3                 db    0
.xdata$x:0000FEE4                 db    0
.xdata$x:0000FEE5                 db    0
.xdata$x:0000FEE6                 db    0
.xdata$x:0000FEE7                 db    0
.xdata$x:0000FEE8                 db    0
.xdata$x:0000FEE9                 db    0
.xdata$x:0000FEEA                 db    0
.xdata$x:0000FEEB                 db    0
.xdata$x:0000FEEC __unwindtable$??1FunctionParser@@QAE@XZ db 0FFh
.xdata$x:0000FEEC                                         ; DATA XREF: .xdata$x:0000FED0o
.xdata$x:0000FEED                 db 0FFh
.xdata$x:0000FEEE                 db 0FFh
.xdata$x:0000FEEF                 db 0FFh
.xdata$x:0000FEF0                 dd offset __unwindfunclet$??1FunctionParser@@QAE@XZ$0
.xdata$x:0000FEF4                 align 8
.xdata$x:0000FEF8                 dd offset __unwindfunclet$??1FunctionParser@@QAE@XZ$1
.xdata$x:0000FEFC                 db    1
.xdata$x:0000FEFD                 db    0
.xdata$x:0000FEFE                 db    0
.xdata$x:0000FEFF                 db    0
.xdata$x:0000FF00                 dd offset __unwindfunclet$??1FunctionParser@@QAE@XZ$2
.xdata$x:0000FF04                 db    2
.xdata$x:0000FF05                 db    0
.xdata$x:0000FF06                 db    0
.xdata$x:0000FF07                 db    0
.xdata$x:0000FF08                 dd offset __unwindfunclet$??1FunctionParser@@QAE@XZ$3
.xdata$x:0000FF0C                 db    3
.xdata$x:0000FF0D                 db    0
.xdata$x:0000FF0E                 db    0
.xdata$x:0000FF0F                 db    0
.xdata$x:0000FF10                 dd offset __unwindfunclet$??1FunctionParser@@QAE@XZ$4
.xdata$x:0000FF14                 db    4
.xdata$x:0000FF15                 db    0
.xdata$x:0000FF16                 db    0
.xdata$x:0000FF17                 db    0
.xdata$x:0000FF18                 dd offset __unwindfunclet$??1FunctionParser@@QAE@XZ$5
.xdata$x:0000FF18 _xdata$x        ends
.xdata$x:0000FF18
.xdata$x:0000FF1C ; ===========================================================================
.xdata$x:0000FF1C
.xdata$x:0000FF1C ; Segment type: Pure data
.xdata$x:0000FF1C ; Segment permissions: Read
.xdata$x:0000FF1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FF1C                 assume cs:_xdata$x
.xdata$x:0000FF1C                 ;org 0FF1Ch
.xdata$x:0000FF1C ; COMDAT (pick associative to section at 7DDC)
.xdata$x:0000FF1C __ehfuncinfo$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z db  22h ; "
.xdata$x:0000FF1C                                         ; DATA XREF: __ehhandler$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z+11o
.xdata$x:0000FF1D                 db    5
.xdata$x:0000FF1E                 db  93h ; ô
.xdata$x:0000FF1F                 db  19h
.xdata$x:0000FF20                 db  0Eh
.xdata$x:0000FF21                 db    0
.xdata$x:0000FF22                 db    0
.xdata$x:0000FF23                 db    0
.xdata$x:0000FF24                 dd offset __unwindtable$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z
.xdata$x:0000FF28                 align 20h
.xdata$x:0000FF40 __unwindtable$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z db 0FFh
.xdata$x:0000FF40                                         ; DATA XREF: .xdata$x:0000FF24o
.xdata$x:0000FF41                 db 0FFh
.xdata$x:0000FF42                 db 0FFh
.xdata$x:0000FF43                 db 0FFh
.xdata$x:0000FF44                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$0
.xdata$x:0000FF48                 db    0
.xdata$x:0000FF49                 db    0
.xdata$x:0000FF4A                 db    0
.xdata$x:0000FF4B                 db    0
.xdata$x:0000FF4C                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$1
.xdata$x:0000FF50                 db    1
.xdata$x:0000FF51                 db    0
.xdata$x:0000FF52                 db    0
.xdata$x:0000FF53                 db    0
.xdata$x:0000FF54                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$2
.xdata$x:0000FF58                 db    2
.xdata$x:0000FF59                 db    0
.xdata$x:0000FF5A                 db    0
.xdata$x:0000FF5B                 db    0
.xdata$x:0000FF5C                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$3
.xdata$x:0000FF60                 db    3
.xdata$x:0000FF61                 db    0
.xdata$x:0000FF62                 db    0
.xdata$x:0000FF63                 db    0
.xdata$x:0000FF64                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$4
.xdata$x:0000FF68                 db    4
.xdata$x:0000FF69                 db    0
.xdata$x:0000FF6A                 db    0
.xdata$x:0000FF6B                 db    0
.xdata$x:0000FF6C                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$5
.xdata$x:0000FF70                 db    5
.xdata$x:0000FF71                 db    0
.xdata$x:0000FF72                 db    0
.xdata$x:0000FF73                 db    0
.xdata$x:0000FF74                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$6
.xdata$x:0000FF78                 db    6
.xdata$x:0000FF79                 db    0
.xdata$x:0000FF7A                 db    0
.xdata$x:0000FF7B                 db    0
.xdata$x:0000FF7C                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$7
.xdata$x:0000FF80                 db    7
.xdata$x:0000FF81                 db    0
.xdata$x:0000FF82                 db    0
.xdata$x:0000FF83                 db    0
.xdata$x:0000FF84                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$8
.xdata$x:0000FF88                 db    5
.xdata$x:0000FF89                 db    0
.xdata$x:0000FF8A                 db    0
.xdata$x:0000FF8B                 db    0
.xdata$x:0000FF8C                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$9
.xdata$x:0000FF90                 db    9
.xdata$x:0000FF91                 db    0
.xdata$x:0000FF92                 db    0
.xdata$x:0000FF93                 db    0
.xdata$x:0000FF94                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$10
.xdata$x:0000FF98                 db  0Ah
.xdata$x:0000FF99                 db    0
.xdata$x:0000FF9A                 db    0
.xdata$x:0000FF9B                 db    0
.xdata$x:0000FF9C                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$11
.xdata$x:0000FFA0                 db  0Bh
.xdata$x:0000FFA1                 db    0
.xdata$x:0000FFA2                 db    0
.xdata$x:0000FFA3                 db    0
.xdata$x:0000FFA4                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$12
.xdata$x:0000FFA8                 db  0Ch
.xdata$x:0000FFA9                 db    0
.xdata$x:0000FFAA                 db    0
.xdata$x:0000FFAB                 db    0
.xdata$x:0000FFAC                 dd offset __unwindfunclet$??0FunctionZoneParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12@Z$13
.xdata$x:0000FFAC _xdata$x        ends
.xdata$x:0000FFAC
.xdata$x:0000FFB0 ; ===========================================================================
.xdata$x:0000FFB0
.xdata$x:0000FFB0 ; Segment type: Pure data
.xdata$x:0000FFB0 ; Segment permissions: Read
.xdata$x:0000FFB0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FFB0                 assume cs:_xdata$x
.xdata$x:0000FFB0                 ;org 0FFB0h
.xdata$x:0000FFB0 ; COMDAT (pick associative to section at 9104)
.xdata$x:0000FFB0 __ehfuncinfo$??1FunctionZoneParser@@QAE@XZ db  22h ; "
.xdata$x:0000FFB0                                         ; DATA XREF: __ehhandler$??1FunctionZoneParser@@QAE@XZ+11o
.xdata$x:0000FFB1                 db    5
.xdata$x:0000FFB2                 db  93h ; ô
.xdata$x:0000FFB3                 db  19h
.xdata$x:0000FFB4                 db    5
.xdata$x:0000FFB5                 db    0
.xdata$x:0000FFB6                 db    0
.xdata$x:0000FFB7                 db    0
.xdata$x:0000FFB8                 dd offset __unwindtable$??1FunctionZoneParser@@QAE@XZ
.xdata$x:0000FFBC                 db    0
.xdata$x:0000FFBD                 db    0
.xdata$x:0000FFBE                 db    0
.xdata$x:0000FFBF                 db    0
.xdata$x:0000FFC0                 db    0
.xdata$x:0000FFC1                 db    0
.xdata$x:0000FFC2                 db    0
.xdata$x:0000FFC3                 db    0
.xdata$x:0000FFC4                 db    0
.xdata$x:0000FFC5                 db    0
.xdata$x:0000FFC6                 db    0
.xdata$x:0000FFC7                 db    0
.xdata$x:0000FFC8                 db    0
.xdata$x:0000FFC9                 db    0
.xdata$x:0000FFCA                 db    0
.xdata$x:0000FFCB                 db    0
.xdata$x:0000FFCC                 db    0
.xdata$x:0000FFCD                 db    0
.xdata$x:0000FFCE                 db    0
.xdata$x:0000FFCF                 db    0
.xdata$x:0000FFD0                 db    0
.xdata$x:0000FFD1                 db    0
.xdata$x:0000FFD2                 db    0
.xdata$x:0000FFD3                 db    0
.xdata$x:0000FFD4 __unwindtable$??1FunctionZoneParser@@QAE@XZ db 0FFh
.xdata$x:0000FFD4                                         ; DATA XREF: .xdata$x:0000FFB8o
.xdata$x:0000FFD5                 db 0FFh
.xdata$x:0000FFD6                 db 0FFh
.xdata$x:0000FFD7                 db 0FFh
.xdata$x:0000FFD8                 dd offset __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$0
.xdata$x:0000FFDC                 align 10h
.xdata$x:0000FFE0                 dd offset __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$1
.xdata$x:0000FFE4                 db    1
.xdata$x:0000FFE5                 db    0
.xdata$x:0000FFE6                 db    0
.xdata$x:0000FFE7                 db    0
.xdata$x:0000FFE8                 dd offset __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$2
.xdata$x:0000FFEC                 db    2
.xdata$x:0000FFED                 db    0
.xdata$x:0000FFEE                 db    0
.xdata$x:0000FFEF                 db    0
.xdata$x:0000FFF0                 dd offset __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$3
.xdata$x:0000FFF4                 db    3
.xdata$x:0000FFF5                 db    0
.xdata$x:0000FFF6                 db    0
.xdata$x:0000FFF7                 db    0
.xdata$x:0000FFF8                 dd offset __unwindfunclet$??1FunctionZoneParser@@QAE@XZ$4
.xdata$x:0000FFF8 _xdata$x        ends
.xdata$x:0000FFF8
.xdata$x:0000FFFC ; ===========================================================================
.xdata$x:0000FFFC
.xdata$x:0000FFFC ; Segment type: Pure data
.xdata$x:0000FFFC ; Segment permissions: Read
.xdata$x:0000FFFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000FFFC                 assume cs:_xdata$x
.xdata$x:0000FFFC                 ;org 0FFFCh
.xdata$x:0000FFFC ; COMDAT (pick associative to section at 7C9C)
.xdata$x:0000FFFC __ehfuncinfo$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z db  22h ; "
.xdata$x:0000FFFC                                         ; DATA XREF: __ehhandler$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z+11o
.xdata$x:0000FFFD                 db    5
.xdata$x:0000FFFE                 db  93h ; ô
.xdata$x:0000FFFF                 db  19h
.xdata$x:00010000                 db    7
.xdata$x:00010001                 db    0
.xdata$x:00010002                 db    0
.xdata$x:00010003                 db    0
.xdata$x:00010004                 dd offset __unwindtable$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z
.xdata$x:00010008                 align 20h
.xdata$x:00010020 __unwindtable$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z db 0FFh
.xdata$x:00010020                                         ; DATA XREF: .xdata$x:00010004o
.xdata$x:00010021                 db 0FFh
.xdata$x:00010022                 db 0FFh
.xdata$x:00010023                 db 0FFh
.xdata$x:00010024                 dd offset __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$0
.xdata$x:00010028                 db    0
.xdata$x:00010029                 db    0
.xdata$x:0001002A                 db    0
.xdata$x:0001002B                 db    0
.xdata$x:0001002C                 dd offset __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$1
.xdata$x:00010030                 db    1
.xdata$x:00010031                 db    0
.xdata$x:00010032                 db    0
.xdata$x:00010033                 db    0
.xdata$x:00010034                 dd offset __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$2
.xdata$x:00010038                 db    2
.xdata$x:00010039                 db    0
.xdata$x:0001003A                 db    0
.xdata$x:0001003B                 db    0
.xdata$x:0001003C                 dd offset __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$3
.xdata$x:00010040                 db    3
.xdata$x:00010041                 db    0
.xdata$x:00010042                 db    0
.xdata$x:00010043                 db    0
.xdata$x:00010044                 dd offset __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$4
.xdata$x:00010048                 db    4
.xdata$x:00010049                 db    0
.xdata$x:0001004A                 db    0
.xdata$x:0001004B                 db    0
.xdata$x:0001004C                 dd offset __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$5
.xdata$x:00010050                 db    2
.xdata$x:00010051                 db    0
.xdata$x:00010052                 db    0
.xdata$x:00010053                 db    0
.xdata$x:00010054                 dd offset __unwindfunclet$??0FunctionUnitParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@2@Z$6
.xdata$x:00010054 _xdata$x        ends
.xdata$x:00010054
.xdata$x:00010058 ; ===========================================================================
.xdata$x:00010058
.xdata$x:00010058 ; Segment type: Pure data
.xdata$x:00010058 ; Segment permissions: Read
.xdata$x:00010058 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010058                 assume cs:_xdata$x
.xdata$x:00010058                 ;org 10058h
.xdata$x:00010058 ; COMDAT (pick associative to section at 791C)
.xdata$x:00010058 __ehfuncinfo$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z db  22h ; "
.xdata$x:00010058                                         ; DATA XREF: __ehhandler$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z+11o
.xdata$x:00010059                 db    5
.xdata$x:0001005A                 db  93h ; ô
.xdata$x:0001005B                 db  19h
.xdata$x:0001005C                 db  0Dh
.xdata$x:0001005D                 db    0
.xdata$x:0001005E                 db    0
.xdata$x:0001005F                 db    0
.xdata$x:00010060                 dd offset __unwindtable$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z
.xdata$x:00010064                 db    0
.xdata$x:00010065                 db    0
.xdata$x:00010066                 db    0
.xdata$x:00010067                 db    0
.xdata$x:00010068                 db    0
.xdata$x:00010069                 db    0
.xdata$x:0001006A                 db    0
.xdata$x:0001006B                 db    0
.xdata$x:0001006C                 db    0
.xdata$x:0001006D                 db    0
.xdata$x:0001006E                 db    0
.xdata$x:0001006F                 db    0
.xdata$x:00010070                 db    0
.xdata$x:00010071                 db    0
.xdata$x:00010072                 db    0
.xdata$x:00010073                 db    0
.xdata$x:00010074                 db    0
.xdata$x:00010075                 db    0
.xdata$x:00010076                 db    0
.xdata$x:00010077                 db    0
.xdata$x:00010078                 db    0
.xdata$x:00010079                 db    0
.xdata$x:0001007A                 db    0
.xdata$x:0001007B                 db    0
.xdata$x:0001007C __unwindtable$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z db 0FFh
.xdata$x:0001007C                                         ; DATA XREF: .xdata$x:00010060o
.xdata$x:0001007D                 db 0FFh
.xdata$x:0001007E                 db 0FFh
.xdata$x:0001007F                 db 0FFh
.xdata$x:00010080                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$0
.xdata$x:00010084                 align 8
.xdata$x:00010088                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$1
.xdata$x:0001008C                 db    1
.xdata$x:0001008D                 db    0
.xdata$x:0001008E                 db    0
.xdata$x:0001008F                 db    0
.xdata$x:00010090                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$2
.xdata$x:00010094                 db    2
.xdata$x:00010095                 db    0
.xdata$x:00010096                 db    0
.xdata$x:00010097                 db    0
.xdata$x:00010098                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$3
.xdata$x:0001009C                 db    3
.xdata$x:0001009D                 db    0
.xdata$x:0001009E                 db    0
.xdata$x:0001009F                 db    0
.xdata$x:000100A0                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$4
.xdata$x:000100A4                 db    4
.xdata$x:000100A5                 db    0
.xdata$x:000100A6                 db    0
.xdata$x:000100A7                 db    0
.xdata$x:000100A8                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$5
.xdata$x:000100AC                 db    5
.xdata$x:000100AD                 db    0
.xdata$x:000100AE                 db    0
.xdata$x:000100AF                 db    0
.xdata$x:000100B0                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$6
.xdata$x:000100B4                 db    6
.xdata$x:000100B5                 db    0
.xdata$x:000100B6                 db    0
.xdata$x:000100B7                 db    0
.xdata$x:000100B8                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$7
.xdata$x:000100BC                 db    7
.xdata$x:000100BD                 db    0
.xdata$x:000100BE                 db    0
.xdata$x:000100BF                 db    0
.xdata$x:000100C0                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$8
.xdata$x:000100C4                 db    8
.xdata$x:000100C5                 db    0
.xdata$x:000100C6                 db    0
.xdata$x:000100C7                 db    0
.xdata$x:000100C8                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$9
.xdata$x:000100CC                 db    9
.xdata$x:000100CD                 db    0
.xdata$x:000100CE                 db    0
.xdata$x:000100CF                 db    0
.xdata$x:000100D0                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$10
.xdata$x:000100D4                 db  0Ah
.xdata$x:000100D5                 db    0
.xdata$x:000100D6                 db    0
.xdata$x:000100D7                 db    0
.xdata$x:000100D8                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$11
.xdata$x:000100DC                 db    5
.xdata$x:000100DD                 db    0
.xdata$x:000100DE                 db    0
.xdata$x:000100DF                 db    0
.xdata$x:000100E0                 dd offset __unwindfunclet$??0FunctionMixParser@@QAE@PB_W00V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@11V?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@12PAVFunctionUnitParser@@@Z$12
.xdata$x:000100E0 _xdata$x        ends
.xdata$x:000100E0
.xdata$x:000100E4 ; ===========================================================================
.xdata$x:000100E4
.xdata$x:000100E4 ; Segment type: Pure data
.xdata$x:000100E4 ; Segment permissions: Read
.xdata$x:000100E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000100E4                 assume cs:_xdata$x
.xdata$x:000100E4                 ;org 100E4h
.xdata$x:000100E4 ; COMDAT (pick associative to section at 7824)
.xdata$x:000100E4 __unwindtable$??0AssociationInfo@@QAE@HHPB_W0@Z db 0FFh
.xdata$x:000100E4                                         ; DATA XREF: .xdata$x:000100FCo
.xdata$x:000100E5                 db 0FFh
.xdata$x:000100E6                 db 0FFh
.xdata$x:000100E7                 db 0FFh
.xdata$x:000100E8                 dd offset __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$0
.xdata$x:000100EC                 align 10h
.xdata$x:000100F0                 dd offset __unwindfunclet$??0AssociationInfo@@QAE@HHPB_W0@Z$1
.xdata$x:000100F4 __ehfuncinfo$??0AssociationInfo@@QAE@HHPB_W0@Z db  22h ; "
.xdata$x:000100F4                                         ; DATA XREF: __ehhandler$??0AssociationInfo@@QAE@HHPB_W0@Z+11o
.xdata$x:000100F5                 db    5
.xdata$x:000100F6                 db  93h ; ô
.xdata$x:000100F7                 db  19h
.xdata$x:000100F8                 db    2
.xdata$x:000100F9                 db    0
.xdata$x:000100FA                 db    0
.xdata$x:000100FB                 db    0
.xdata$x:000100FC                 dd offset __unwindtable$??0AssociationInfo@@QAE@HHPB_W0@Z
.xdata$x:00010100                 db    0
.xdata$x:00010101                 db    0
.xdata$x:00010102                 db    0
.xdata$x:00010103                 db    0
.xdata$x:00010104                 db    0
.xdata$x:00010105                 db    0
.xdata$x:00010106                 db    0
.xdata$x:00010107                 db    0
.xdata$x:00010108                 db    0
.xdata$x:00010109                 db    0
.xdata$x:0001010A                 db    0
.xdata$x:0001010B                 db    0
.xdata$x:0001010C                 db    0
.xdata$x:0001010D                 db    0
.xdata$x:0001010E                 db    0
.xdata$x:0001010F                 db    0
.xdata$x:00010110                 db    0
.xdata$x:00010111                 db    0
.xdata$x:00010112                 db    0
.xdata$x:00010113                 db    0
.xdata$x:00010114                 db    0
.xdata$x:00010115                 db    0
.xdata$x:00010116                 db    0
.xdata$x:00010117                 db    0
.xdata$x:00010117 _xdata$x        ends
.xdata$x:00010117
.xdata$x:00010118 ; ===========================================================================
.xdata$x:00010118
.xdata$x:00010118 ; Segment type: Pure data
.xdata$x:00010118 ; Segment permissions: Read
.xdata$x:00010118 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010118                 assume cs:_xdata$x
.xdata$x:00010118                 ;org 10118h
.xdata$x:00010118 ; COMDAT (pick associative to section at 8F74)
.xdata$x:00010118 __unwindtable$??1AssociationInfo@@QAE@XZ db 0FFh
.xdata$x:00010118                                         ; DATA XREF: .xdata$x:00010130o
.xdata$x:00010119                 db 0FFh
.xdata$x:0001011A                 db 0FFh
.xdata$x:0001011B                 db 0FFh
.xdata$x:0001011C                 dd offset __unwindfunclet$??1AssociationInfo@@QAE@XZ$0
.xdata$x:00010120                 db    0
.xdata$x:00010121                 db    0
.xdata$x:00010122                 db    0
.xdata$x:00010123                 db    0
.xdata$x:00010124                 dd offset __unwindfunclet$??1AssociationInfo@@QAE@XZ$1
.xdata$x:00010128 __ehfuncinfo$??1AssociationInfo@@QAE@XZ db  22h ; "
.xdata$x:00010128                                         ; DATA XREF: __ehhandler$??1AssociationInfo@@QAE@XZ+11o
.xdata$x:00010129                 db    5
.xdata$x:0001012A                 db  93h ; ô
.xdata$x:0001012B                 db  19h
.xdata$x:0001012C                 db    2
.xdata$x:0001012D                 db    0
.xdata$x:0001012E                 db    0
.xdata$x:0001012F                 db    0
.xdata$x:00010130                 dd offset __unwindtable$??1AssociationInfo@@QAE@XZ
.xdata$x:00010134                 db    0
.xdata$x:00010135                 db    0
.xdata$x:00010136                 db    0
.xdata$x:00010137                 db    0
.xdata$x:00010138                 db    0
.xdata$x:00010139                 db    0
.xdata$x:0001013A                 db    0
.xdata$x:0001013B                 db    0
.xdata$x:0001013C                 db    0
.xdata$x:0001013D                 db    0
.xdata$x:0001013E                 db    0
.xdata$x:0001013F                 db    0
.xdata$x:00010140                 db    0
.xdata$x:00010141                 db    0
.xdata$x:00010142                 db    0
.xdata$x:00010143                 db    0
.xdata$x:00010144                 db    0
.xdata$x:00010145                 db    0
.xdata$x:00010146                 db    0
.xdata$x:00010147                 db    0
.xdata$x:00010148                 db    0
.xdata$x:00010149                 db    0
.xdata$x:0001014A                 db    0
.xdata$x:0001014B                 db    0
.xdata$x:0001014B _xdata$x        ends
.xdata$x:0001014B
.xdata$x:0001014C ; ===========================================================================
.xdata$x:0001014C
.xdata$x:0001014C ; Segment type: Pure data
.xdata$x:0001014C ; Segment permissions: Read
.xdata$x:0001014C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001014C                 assume cs:_xdata$x
.xdata$x:0001014C                 ;org 1014Ch
.xdata$x:0001014C ; COMDAT (pick associative to section at 7768)
.xdata$x:0001014C __unwindtable$??0AssociationInfo@@QAE@ABU0@@Z db 0FFh
.xdata$x:0001014C                                         ; DATA XREF: .xdata$x:00010164o
.xdata$x:0001014D                 db 0FFh
.xdata$x:0001014E                 db 0FFh
.xdata$x:0001014F                 db 0FFh
.xdata$x:00010150                 dd offset __unwindfunclet$??0AssociationInfo@@QAE@ABU0@@Z$0
.xdata$x:00010154                 align 8
.xdata$x:00010158                 dd offset __unwindfunclet$??0AssociationInfo@@QAE@ABU0@@Z$1
.xdata$x:0001015C __ehfuncinfo$??0AssociationInfo@@QAE@ABU0@@Z db  22h ; "
.xdata$x:0001015C                                         ; DATA XREF: __ehhandler$??0AssociationInfo@@QAE@ABU0@@Z+11o
.xdata$x:0001015D                 db    5
.xdata$x:0001015E                 db  93h ; ô
.xdata$x:0001015F                 db  19h
.xdata$x:00010160                 db    2
.xdata$x:00010161                 db    0
.xdata$x:00010162                 db    0
.xdata$x:00010163                 db    0
.xdata$x:00010164                 dd offset __unwindtable$??0AssociationInfo@@QAE@ABU0@@Z
.xdata$x:00010168                 align 20h
.xdata$x:00010168 _xdata$x        ends
.xdata$x:00010168
.xdata$x:00010180 ; ===========================================================================
.xdata$x:00010180
.xdata$x:00010180 ; Segment type: Pure data
.xdata$x:00010180 ; Segment permissions: Read
.xdata$x:00010180 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010180                 assume cs:_xdata$x
.xdata$x:00010180                 ;org 10180h
.xdata$x:00010180 ; COMDAT (pick associative to section at 8ADC)
.xdata$x:00010180 __unwindtable$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010180                                         ; DATA XREF: .xdata$x:00010190o
.xdata$x:00010181                 db 0FFh
.xdata$x:00010182                 db 0FFh
.xdata$x:00010183                 db 0FFh
.xdata$x:00010184                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ$0
.xdata$x:00010188 __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010188                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ+11o
.xdata$x:00010189                 db    5
.xdata$x:0001018A                 db  93h ; ô
.xdata$x:0001018B                 db  19h
.xdata$x:0001018C                 db    1
.xdata$x:0001018D                 db    0
.xdata$x:0001018E                 db    0
.xdata$x:0001018F                 db    0
.xdata$x:00010190                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@PAVFunctionParser@@@std@@@std@@QAE@XZ
.xdata$x:00010194                 db    0
.xdata$x:00010195                 db    0
.xdata$x:00010196                 db    0
.xdata$x:00010197                 db    0
.xdata$x:00010198                 db    0
.xdata$x:00010199                 db    0
.xdata$x:0001019A                 db    0
.xdata$x:0001019B                 db    0
.xdata$x:0001019C                 db    0
.xdata$x:0001019D                 db    0
.xdata$x:0001019E                 db    0
.xdata$x:0001019F                 db    0
.xdata$x:000101A0                 db    0
.xdata$x:000101A1                 db    0
.xdata$x:000101A2                 db    0
.xdata$x:000101A3                 db    0
.xdata$x:000101A4                 db    0
.xdata$x:000101A5                 db    0
.xdata$x:000101A6                 db    0
.xdata$x:000101A7                 db    0
.xdata$x:000101A8                 db    0
.xdata$x:000101A9                 db    0
.xdata$x:000101AA                 db    0
.xdata$x:000101AB                 db    0
.xdata$x:000101AB _xdata$x        ends
.xdata$x:000101AB
.xdata$x:000101AC ; ===========================================================================
.xdata$x:000101AC
.xdata$x:000101AC ; Segment type: Pure data
.xdata$x:000101AC ; Segment permissions: Read
.xdata$x:000101AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000101AC                 assume cs:_xdata$x
.xdata$x:000101AC                 ;org 101ACh
.xdata$x:000101AC ; COMDAT (pick associative to section at 881C)
.xdata$x:000101AC __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000101AC                                         ; DATA XREF: .xdata$x:000101BCo
.xdata$x:000101AD                 db 0FFh
.xdata$x:000101AE                 db 0FFh
.xdata$x:000101AF                 db 0FFh
.xdata$x:000101B0                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000101B4 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000101B4                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000101B5                 db    5
.xdata$x:000101B6                 db  93h ; ô
.xdata$x:000101B7                 db  19h
.xdata$x:000101B8                 db    1
.xdata$x:000101B9                 db    0
.xdata$x:000101BA                 db    0
.xdata$x:000101BB                 db    0
.xdata$x:000101BC                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@@std@@QAE@XZ
.xdata$x:000101C0                 db    0
.xdata$x:000101C1                 db    0
.xdata$x:000101C2                 db    0
.xdata$x:000101C3                 db    0
.xdata$x:000101C4                 db    0
.xdata$x:000101C5                 db    0
.xdata$x:000101C6                 db    0
.xdata$x:000101C7                 db    0
.xdata$x:000101C8                 db    0
.xdata$x:000101C9                 db    0
.xdata$x:000101CA                 db    0
.xdata$x:000101CB                 db    0
.xdata$x:000101CC                 db    0
.xdata$x:000101CD                 db    0
.xdata$x:000101CE                 db    0
.xdata$x:000101CF                 db    0
.xdata$x:000101D0                 db    0
.xdata$x:000101D1                 db    0
.xdata$x:000101D2                 db    0
.xdata$x:000101D3                 db    0
.xdata$x:000101D4                 db    0
.xdata$x:000101D5                 db    0
.xdata$x:000101D6                 db    0
.xdata$x:000101D7                 db    0
.xdata$x:000101D7 _xdata$x        ends
.xdata$x:000101D7
.xdata$x:000101D8 ; ===========================================================================
.xdata$x:000101D8
.xdata$x:000101D8 ; Segment type: Pure data
.xdata$x:000101D8 ; Segment permissions: Read
.xdata$x:000101D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000101D8                 assume cs:_xdata$x
.xdata$x:000101D8                 ;org 101D8h
.xdata$x:000101D8 ; COMDAT (pick associative to section at 8D94)
.xdata$x:000101D8 __unwindtable$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000101D8                                         ; DATA XREF: .xdata$x:000101E8o
.xdata$x:000101D9                 db 0FFh
.xdata$x:000101DA                 db 0FFh
.xdata$x:000101DB                 db 0FFh
.xdata$x:000101DC                 dd offset __unwindfunclet$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ$0
.xdata$x:000101E0 __ehfuncinfo$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000101E0                                         ; DATA XREF: __ehhandler$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ+11o
.xdata$x:000101E1                 db    5
.xdata$x:000101E2                 db  93h ; ô
.xdata$x:000101E3                 db  19h
.xdata$x:000101E4                 db    1
.xdata$x:000101E5                 db    0
.xdata$x:000101E6                 db    0
.xdata$x:000101E7                 db    0
.xdata$x:000101E8                 dd offset __unwindtable$??1?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@QAE@XZ
.xdata$x:000101EC                 db    0
.xdata$x:000101ED                 db    0
.xdata$x:000101EE                 db    0
.xdata$x:000101EF                 db    0
.xdata$x:000101F0                 db    0
.xdata$x:000101F1                 db    0
.xdata$x:000101F2                 db    0
.xdata$x:000101F3                 db    0
.xdata$x:000101F4                 db    0
.xdata$x:000101F5                 db    0
.xdata$x:000101F6                 db    0
.xdata$x:000101F7                 db    0
.xdata$x:000101F8                 db    0
.xdata$x:000101F9                 db    0
.xdata$x:000101FA                 db    0
.xdata$x:000101FB                 db    0
.xdata$x:000101FC                 db    0
.xdata$x:000101FD                 db    0
.xdata$x:000101FE                 db    0
.xdata$x:000101FF                 db    0
.xdata$x:00010200                 db    0
.xdata$x:00010201                 db    0
.xdata$x:00010202                 db    0
.xdata$x:00010203                 db    0
.xdata$x:00010203 _xdata$x        ends
.xdata$x:00010203
.xdata$x:00010204 ; ===========================================================================
.xdata$x:00010204
.xdata$x:00010204 ; Segment type: Pure data
.xdata$x:00010204 ; Segment permissions: Read
.xdata$x:00010204 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010204                 assume cs:_xdata$x
.xdata$x:00010204                 ;org 10204h
.xdata$x:00010204 ; COMDAT (pick associative to section at B7B0)
.xdata$x:00010204 __catchsym$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:00010204                                         ; DATA XREF: .xdata$x:00010234o
.xdata$x:00010205                 db    0
.xdata$x:00010206                 db    0
.xdata$x:00010207                 db    0
.xdata$x:00010208                 db    0
.xdata$x:00010209                 db    0
.xdata$x:0001020A                 db    0
.xdata$x:0001020B                 db    0
.xdata$x:0001020C                 db    0
.xdata$x:0001020D                 db    0
.xdata$x:0001020E                 db    0
.xdata$x:0001020F                 db    0
.xdata$x:00010210                 dd offset __catch$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z$0
.xdata$x:00010214 __unwindtable$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:00010214                                         ; DATA XREF: .xdata$x:00010240o
.xdata$x:00010215                 db 0FFh
.xdata$x:00010216                 db 0FFh
.xdata$x:00010217                 db 0FFh
.xdata$x:00010218                 db    0
.xdata$x:00010219                 db    0
.xdata$x:0001021A                 db    0
.xdata$x:0001021B                 db    0
.xdata$x:0001021C                 db 0FFh
.xdata$x:0001021D                 db 0FFh
.xdata$x:0001021E                 db 0FFh
.xdata$x:0001021F                 db 0FFh
.xdata$x:00010220                 db    0
.xdata$x:00010221                 db    0
.xdata$x:00010222                 db    0
.xdata$x:00010223                 db    0
.xdata$x:00010224 __tryblocktable$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z db    0
.xdata$x:00010224                                         ; DATA XREF: .xdata$x:00010248o
.xdata$x:00010225                 db    0
.xdata$x:00010226                 db    0
.xdata$x:00010227                 db    0
.xdata$x:00010228                 db    0
.xdata$x:00010229                 db    0
.xdata$x:0001022A                 db    0
.xdata$x:0001022B                 db    0
.xdata$x:0001022C                 db    1
.xdata$x:0001022D                 db    0
.xdata$x:0001022E                 db    0
.xdata$x:0001022F                 db    0
.xdata$x:00010230                 db    1
.xdata$x:00010231                 db    0
.xdata$x:00010232                 db    0
.xdata$x:00010233                 db    0
.xdata$x:00010234                 dd offset __catchsym$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z$2
.xdata$x:00010238 __ehfuncinfo$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:00010238                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z+11o
.xdata$x:00010239                 db    5
.xdata$x:0001023A                 db  93h ; ô
.xdata$x:0001023B                 db  19h
.xdata$x:0001023C                 db    2
.xdata$x:0001023D                 db    0
.xdata$x:0001023E                 db    0
.xdata$x:0001023F                 db    0
.xdata$x:00010240                 dd offset __unwindtable$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.xdata$x:00010244                 db    1
.xdata$x:00010245                 db    0
.xdata$x:00010246                 db    0
.xdata$x:00010247                 db    0
.xdata$x:00010248                 dd offset __tryblocktable$?_Reallocate@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IAEXI@Z
.xdata$x:0001024C                 db    0
.xdata$x:0001024D                 db    0
.xdata$x:0001024E                 db    0
.xdata$x:0001024F                 db    0
.xdata$x:00010250                 db    0
.xdata$x:00010251                 db    0
.xdata$x:00010252                 db    0
.xdata$x:00010253                 db    0
.xdata$x:00010254                 db    0
.xdata$x:00010255                 db    0
.xdata$x:00010256                 db    0
.xdata$x:00010257                 db    0
.xdata$x:00010258                 db    0
.xdata$x:00010259                 db    0
.xdata$x:0001025A                 db    0
.xdata$x:0001025B                 db    0
.xdata$x:0001025B _xdata$x        ends
.xdata$x:0001025B
.xdata$x:0001025C ; ===========================================================================
.xdata$x:0001025C
.xdata$x:0001025C ; Segment type: Pure data
.xdata$x:0001025C ; Segment permissions: Read
.xdata$x:0001025C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001025C                 assume cs:_xdata$x
.xdata$x:0001025C                 ;org 1025Ch
.xdata$x:0001025C ; COMDAT (pick associative to section at B2B8)
.xdata$x:0001025C __unwindtable$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z db 0FFh
.xdata$x:0001025C                                         ; DATA XREF: .xdata$x:0001026Co
.xdata$x:0001025D                 db 0FFh
.xdata$x:0001025E                 db 0FFh
.xdata$x:0001025F                 db 0FFh
.xdata$x:00010260                 dd offset __unwindfunclet$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z$0
.xdata$x:00010264 __ehfuncinfo$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z db  22h ; "
.xdata$x:00010264                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z+11o
.xdata$x:00010265                 db    5
.xdata$x:00010266                 db  93h ; ô
.xdata$x:00010267                 db  19h
.xdata$x:00010268                 db    1
.xdata$x:00010269                 db    0
.xdata$x:0001026A                 db    0
.xdata$x:0001026B                 db    0
.xdata$x:0001026C                 dd offset __unwindtable$?_Orphan_range@?$vector@PAVFunctionParser@@V?$allocator@PAVFunctionParser@@@std@@@std@@IBEXPAPAVFunctionParser@@0@Z
.xdata$x:00010270                 db    0
.xdata$x:00010271                 db    0
.xdata$x:00010272                 db    0
.xdata$x:00010273                 db    0
.xdata$x:00010274                 db    0
.xdata$x:00010275                 db    0
.xdata$x:00010276                 db    0
.xdata$x:00010277                 db    0
.xdata$x:00010278                 db    0
.xdata$x:00010279                 db    0
.xdata$x:0001027A                 db    0
.xdata$x:0001027B                 db    0
.xdata$x:0001027C                 db    0
.xdata$x:0001027D                 db    0
.xdata$x:0001027E                 db    0
.xdata$x:0001027F                 db    0
.xdata$x:00010280                 db    0
.xdata$x:00010281                 db    0
.xdata$x:00010282                 db    0
.xdata$x:00010283                 db    0
.xdata$x:00010284                 db    0
.xdata$x:00010285                 db    0
.xdata$x:00010286                 db    0
.xdata$x:00010287                 db    0
.xdata$x:00010287 _xdata$x        ends
.xdata$x:00010287
.xdata$x:00010288 ; ===========================================================================
.xdata$x:00010288
.xdata$x:00010288 ; Segment type: Pure data
.xdata$x:00010288 ; Segment permissions: Read
.xdata$x:00010288 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010288                 assume cs:_xdata$x
.xdata$x:00010288                 ;org 10288h
.xdata$x:00010288 ; COMDAT (pick associative to section at 8BBC)
.xdata$x:00010288 __unwindtable$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010288                                         ; DATA XREF: .xdata$x:00010298o
.xdata$x:00010289                 db 0FFh
.xdata$x:0001028A                 db 0FFh
.xdata$x:0001028B                 db 0FFh
.xdata$x:0001028C                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ$0
.xdata$x:00010290 __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010290                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ+11o
.xdata$x:00010291                 db    5
.xdata$x:00010292                 db  93h ; ô
.xdata$x:00010293                 db  19h
.xdata$x:00010294                 db    1
.xdata$x:00010295                 db    0
.xdata$x:00010296                 db    0
.xdata$x:00010297                 db    0
.xdata$x:00010298                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@UAssociationInfo@@@std@@@std@@QAE@XZ
.xdata$x:0001029C                 db    0
.xdata$x:0001029D                 db    0
.xdata$x:0001029E                 db    0
.xdata$x:0001029F                 db    0
.xdata$x:000102A0                 db    0
.xdata$x:000102A1                 db    0
.xdata$x:000102A2                 db    0
.xdata$x:000102A3                 db    0
.xdata$x:000102A4                 db    0
.xdata$x:000102A5                 db    0
.xdata$x:000102A6                 db    0
.xdata$x:000102A7                 db    0
.xdata$x:000102A8                 db    0
.xdata$x:000102A9                 db    0
.xdata$x:000102AA                 db    0
.xdata$x:000102AB                 db    0
.xdata$x:000102AC                 db    0
.xdata$x:000102AD                 db    0
.xdata$x:000102AE                 db    0
.xdata$x:000102AF                 db    0
.xdata$x:000102B0                 db    0
.xdata$x:000102B1                 db    0
.xdata$x:000102B2                 db    0
.xdata$x:000102B3                 db    0
.xdata$x:000102B3 _xdata$x        ends
.xdata$x:000102B3
.xdata$x:000102B4 ; ===========================================================================
.xdata$x:000102B4
.xdata$x:000102B4 ; Segment type: Pure data
.xdata$x:000102B4 ; Segment permissions: Read
.xdata$x:000102B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000102B4                 assume cs:_xdata$x
.xdata$x:000102B4                 ;org 102B4h
.xdata$x:000102B4 ; COMDAT (pick associative to section at 890C)
.xdata$x:000102B4 __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000102B4                                         ; DATA XREF: .xdata$x:000102C4o
.xdata$x:000102B5                 db 0FFh
.xdata$x:000102B6                 db 0FFh
.xdata$x:000102B7                 db 0FFh
.xdata$x:000102B8                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000102BC __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000102BC                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000102BD                 db    5
.xdata$x:000102BE                 db  93h ; ô
.xdata$x:000102BF                 db  19h
.xdata$x:000102C0                 db    1
.xdata$x:000102C1                 db    0
.xdata$x:000102C2                 db    0
.xdata$x:000102C3                 db    0
.xdata$x:000102C4                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@@std@@QAE@XZ
.xdata$x:000102C8                 align 20h
.xdata$x:000102C8 _xdata$x        ends
.xdata$x:000102C8
.xdata$x:000102E0 ; ===========================================================================
.xdata$x:000102E0
.xdata$x:000102E0 ; Segment type: Pure data
.xdata$x:000102E0 ; Segment permissions: Read
.xdata$x:000102E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000102E0                 assume cs:_xdata$x
.xdata$x:000102E0                 ;org 102E0h
.xdata$x:000102E0 ; COMDAT (pick associative to section at 8E84)
.xdata$x:000102E0 __unwindtable$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000102E0                                         ; DATA XREF: .xdata$x:000102F0o
.xdata$x:000102E1                 db 0FFh
.xdata$x:000102E2                 db 0FFh
.xdata$x:000102E3                 db 0FFh
.xdata$x:000102E4                 dd offset __unwindfunclet$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ$0
.xdata$x:000102E8 __ehfuncinfo$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000102E8                                         ; DATA XREF: __ehhandler$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ+11o
.xdata$x:000102E9                 db    5
.xdata$x:000102EA                 db  93h ; ô
.xdata$x:000102EB                 db  19h
.xdata$x:000102EC                 db    1
.xdata$x:000102ED                 db    0
.xdata$x:000102EE                 db    0
.xdata$x:000102EF                 db    0
.xdata$x:000102F0                 dd offset __unwindtable$??1?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@QAE@XZ
.xdata$x:000102F4                 db    0
.xdata$x:000102F5                 db    0
.xdata$x:000102F6                 db    0
.xdata$x:000102F7                 db    0
.xdata$x:000102F8                 db    0
.xdata$x:000102F9                 db    0
.xdata$x:000102FA                 db    0
.xdata$x:000102FB                 db    0
.xdata$x:000102FC                 db    0
.xdata$x:000102FD                 db    0
.xdata$x:000102FE                 db    0
.xdata$x:000102FF                 db    0
.xdata$x:00010300                 db    0
.xdata$x:00010301                 db    0
.xdata$x:00010302                 db    0
.xdata$x:00010303                 db    0
.xdata$x:00010304                 db    0
.xdata$x:00010305                 db    0
.xdata$x:00010306                 db    0
.xdata$x:00010307                 db    0
.xdata$x:00010308                 db    0
.xdata$x:00010309                 db    0
.xdata$x:0001030A                 db    0
.xdata$x:0001030B                 db    0
.xdata$x:0001030B _xdata$x        ends
.xdata$x:0001030B
.xdata$x:0001030C ; ===========================================================================
.xdata$x:0001030C
.xdata$x:0001030C ; Segment type: Pure data
.xdata$x:0001030C ; Segment permissions: Read
.xdata$x:0001030C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001030C                 assume cs:_xdata$x
.xdata$x:0001030C                 ;org 1030Ch
.xdata$x:0001030C ; COMDAT (pick associative to section at BA68)
.xdata$x:0001030C __catchsym$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:0001030C                                         ; DATA XREF: .xdata$x:0001033Co
.xdata$x:0001030D                 db    0
.xdata$x:0001030E                 db    0
.xdata$x:0001030F                 db    0
.xdata$x:00010310                 db    0
.xdata$x:00010311                 db    0
.xdata$x:00010312                 db    0
.xdata$x:00010313                 db    0
.xdata$x:00010314                 db    0
.xdata$x:00010315                 db    0
.xdata$x:00010316                 db    0
.xdata$x:00010317                 db    0
.xdata$x:00010318                 dd offset __catch$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z$0
.xdata$x:0001031C __unwindtable$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:0001031C                                         ; DATA XREF: .xdata$x:00010348o
.xdata$x:0001031D                 db 0FFh
.xdata$x:0001031E                 db 0FFh
.xdata$x:0001031F                 db 0FFh
.xdata$x:00010320                 db    0
.xdata$x:00010321                 db    0
.xdata$x:00010322                 db    0
.xdata$x:00010323                 db    0
.xdata$x:00010324                 db 0FFh
.xdata$x:00010325                 db 0FFh
.xdata$x:00010326                 db 0FFh
.xdata$x:00010327                 db 0FFh
.xdata$x:00010328                 db    0
.xdata$x:00010329                 db    0
.xdata$x:0001032A                 db    0
.xdata$x:0001032B                 db    0
.xdata$x:0001032C __tryblocktable$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z db    0
.xdata$x:0001032C                                         ; DATA XREF: .xdata$x:00010350o
.xdata$x:0001032D                 db    0
.xdata$x:0001032E                 db    0
.xdata$x:0001032F                 db    0
.xdata$x:00010330                 db    0
.xdata$x:00010331                 db    0
.xdata$x:00010332                 db    0
.xdata$x:00010333                 db    0
.xdata$x:00010334                 db    1
.xdata$x:00010335                 db    0
.xdata$x:00010336                 db    0
.xdata$x:00010337                 db    0
.xdata$x:00010338                 db    1
.xdata$x:00010339                 db    0
.xdata$x:0001033A                 db    0
.xdata$x:0001033B                 db    0
.xdata$x:0001033C                 dd offset __catchsym$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z$2
.xdata$x:00010340 __ehfuncinfo$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:00010340                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z+11o
.xdata$x:00010341                 db    5
.xdata$x:00010342                 db  93h ; ô
.xdata$x:00010343                 db  19h
.xdata$x:00010344                 db    2
.xdata$x:00010345                 db    0
.xdata$x:00010346                 db    0
.xdata$x:00010347                 db    0
.xdata$x:00010348                 dd offset __unwindtable$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.xdata$x:0001034C                 db    1
.xdata$x:0001034D                 db    0
.xdata$x:0001034E                 db    0
.xdata$x:0001034F                 db    0
.xdata$x:00010350                 dd offset __tryblocktable$?_Reallocate@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IAEXI@Z
.xdata$x:00010354                 db    0
.xdata$x:00010355                 db    0
.xdata$x:00010356                 db    0
.xdata$x:00010357                 db    0
.xdata$x:00010358                 db    0
.xdata$x:00010359                 db    0
.xdata$x:0001035A                 db    0
.xdata$x:0001035B                 db    0
.xdata$x:0001035C                 db    0
.xdata$x:0001035D                 db    0
.xdata$x:0001035E                 db    0
.xdata$x:0001035F                 db    0
.xdata$x:00010360                 db    0
.xdata$x:00010361                 db    0
.xdata$x:00010362                 db    0
.xdata$x:00010363                 db    0
.xdata$x:00010363 _xdata$x        ends
.xdata$x:00010363
.xdata$x:00010364 ; ===========================================================================
.xdata$x:00010364
.xdata$x:00010364 ; Segment type: Pure data
.xdata$x:00010364 ; Segment permissions: Read
.xdata$x:00010364 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010364                 assume cs:_xdata$x
.xdata$x:00010364                 ;org 10364h
.xdata$x:00010364 ; COMDAT (pick associative to section at B470)
.xdata$x:00010364 __unwindtable$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z db 0FFh
.xdata$x:00010364                                         ; DATA XREF: .xdata$x:00010374o
.xdata$x:00010365                 db 0FFh
.xdata$x:00010366                 db 0FFh
.xdata$x:00010367                 db 0FFh
.xdata$x:00010368                 dd offset __unwindfunclet$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z$0
.xdata$x:0001036C __ehfuncinfo$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z db  22h ; "
.xdata$x:0001036C                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z+11o
.xdata$x:0001036D                 db    5
.xdata$x:0001036E                 db  93h ; ô
.xdata$x:0001036F                 db  19h
.xdata$x:00010370                 db    1
.xdata$x:00010371                 db    0
.xdata$x:00010372                 db    0
.xdata$x:00010373                 db    0
.xdata$x:00010374                 dd offset __unwindtable$?_Orphan_range@?$vector@UAssociationInfo@@V?$allocator@UAssociationInfo@@@std@@@std@@IBEXPAUAssociationInfo@@0@Z
.xdata$x:00010378                 db    0
.xdata$x:00010379                 db    0
.xdata$x:0001037A                 db    0
.xdata$x:0001037B                 db    0
.xdata$x:0001037C                 db    0
.xdata$x:0001037D                 db    0
.xdata$x:0001037E                 db    0
.xdata$x:0001037F                 db    0
.xdata$x:00010380                 db    0
.xdata$x:00010381                 db    0
.xdata$x:00010382                 db    0
.xdata$x:00010383                 db    0
.xdata$x:00010384                 db    0
.xdata$x:00010385                 db    0
.xdata$x:00010386                 db    0
.xdata$x:00010387                 db    0
.xdata$x:00010388                 db    0
.xdata$x:00010389                 db    0
.xdata$x:0001038A                 db    0
.xdata$x:0001038B                 db    0
.xdata$x:0001038C                 db    0
.xdata$x:0001038D                 db    0
.xdata$x:0001038E                 db    0
.xdata$x:0001038F                 db    0
.xdata$x:0001038F _xdata$x        ends
.xdata$x:0001038F
.xdata$x:00010390 ; ===========================================================================
.xdata$x:00010390
.xdata$x:00010390 ; Segment type: Pure data
.xdata$x:00010390 ; Segment permissions: Read
.xdata$x:00010390 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010390                 assume cs:_xdata$x
.xdata$x:00010390                 ;org 10390h
.xdata$x:00010390 ; COMDAT (pick associative to section at D008)
.xdata$x:00010390 __unwindtable$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z db 0FFh
.xdata$x:00010390                                         ; DATA XREF: .xdata$x:000103A0o
.xdata$x:00010391                 db 0FFh
.xdata$x:00010392                 db 0FFh
.xdata$x:00010393                 db 0FFh
.xdata$x:00010394                 dd offset __unwindfunclet$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z$0
.xdata$x:00010398 __ehfuncinfo$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z db  22h ; "
.xdata$x:00010398                                         ; DATA XREF: __ehhandler$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z+11o
.xdata$x:00010399                 db    5
.xdata$x:0001039A                 db  93h ; ô
.xdata$x:0001039B                 db  19h
.xdata$x:0001039C                 db    1
.xdata$x:0001039D                 db    0
.xdata$x:0001039E                 db    0
.xdata$x:0001039F                 db    0
.xdata$x:000103A0                 dd offset __unwindtable$?construct@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@ABU3@@Z
.xdata$x:000103A4                 db    0
.xdata$x:000103A5                 db    0
.xdata$x:000103A6                 db    0
.xdata$x:000103A7                 db    0
.xdata$x:000103A8                 db    0
.xdata$x:000103A9                 db    0
.xdata$x:000103AA                 db    0
.xdata$x:000103AB                 db    0
.xdata$x:000103AC                 db    0
.xdata$x:000103AD                 db    0
.xdata$x:000103AE                 db    0
.xdata$x:000103AF                 db    0
.xdata$x:000103B0                 db    0
.xdata$x:000103B1                 db    0
.xdata$x:000103B2                 db    0
.xdata$x:000103B3                 db    0
.xdata$x:000103B4                 db    0
.xdata$x:000103B5                 db    0
.xdata$x:000103B6                 db    0
.xdata$x:000103B7                 db    0
.xdata$x:000103B8                 db    0
.xdata$x:000103B9                 db    0
.xdata$x:000103BA                 db    0
.xdata$x:000103BB                 db    0
.xdata$x:000103BB _xdata$x        ends
.xdata$x:000103BB
.xdata$x:000103BC ; ===========================================================================
.xdata$x:000103BC
.xdata$x:000103BC ; Segment type: Pure data
.xdata$x:000103BC ; Segment permissions: Read
.xdata$x:000103BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000103BC                 assume cs:_xdata$x
.xdata$x:000103BC                 ;org 103BCh
.xdata$x:000103BC ; COMDAT (pick associative to section at BBC4)
.xdata$x:000103BC __catchsym$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:000103BC                                         ; DATA XREF: .xdata$x:000103ECo
.xdata$x:000103BD                 db    0
.xdata$x:000103BE                 db    0
.xdata$x:000103BF                 db    0
.xdata$x:000103C0                 db    0
.xdata$x:000103C1                 db    0
.xdata$x:000103C2                 db    0
.xdata$x:000103C3                 db    0
.xdata$x:000103C4                 db    0
.xdata$x:000103C5                 db    0
.xdata$x:000103C6                 db    0
.xdata$x:000103C7                 db    0
.xdata$x:000103C8                 dd offset __catch$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z$0
.xdata$x:000103CC __unwindtable$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:000103CC                                         ; DATA XREF: .xdata$x:000103F8o
.xdata$x:000103CD                 db 0FFh
.xdata$x:000103CE                 db 0FFh
.xdata$x:000103CF                 db 0FFh
.xdata$x:000103D0                 db    0
.xdata$x:000103D1                 db    0
.xdata$x:000103D2                 db    0
.xdata$x:000103D3                 db    0
.xdata$x:000103D4                 db 0FFh
.xdata$x:000103D5                 db 0FFh
.xdata$x:000103D6                 db 0FFh
.xdata$x:000103D7                 db 0FFh
.xdata$x:000103D8                 db    0
.xdata$x:000103D9                 db    0
.xdata$x:000103DA                 db    0
.xdata$x:000103DB                 db    0
.xdata$x:000103DC __tryblocktable$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z db    0
.xdata$x:000103DC                                         ; DATA XREF: .xdata$x:00010400o
.xdata$x:000103DD                 db    0
.xdata$x:000103DE                 db    0
.xdata$x:000103DF                 db    0
.xdata$x:000103E0                 db    0
.xdata$x:000103E1                 db    0
.xdata$x:000103E2                 db    0
.xdata$x:000103E3                 db    0
.xdata$x:000103E4                 db    1
.xdata$x:000103E5                 db    0
.xdata$x:000103E6                 db    0
.xdata$x:000103E7                 db    0
.xdata$x:000103E8                 db    1
.xdata$x:000103E9                 db    0
.xdata$x:000103EA                 db    0
.xdata$x:000103EB                 db    0
.xdata$x:000103EC                 dd offset __catchsym$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z$2
.xdata$x:000103F0 __ehfuncinfo$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:000103F0                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z+11o
.xdata$x:000103F1                 db    5
.xdata$x:000103F2                 db  93h ; ô
.xdata$x:000103F3                 db  19h
.xdata$x:000103F4                 db    2
.xdata$x:000103F5                 db    0
.xdata$x:000103F6                 db    0
.xdata$x:000103F7                 db    0
.xdata$x:000103F8                 dd offset __unwindtable$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.xdata$x:000103FC                 db    1
.xdata$x:000103FD                 db    0
.xdata$x:000103FE                 db    0
.xdata$x:000103FF                 db    0
.xdata$x:00010400                 dd offset __tryblocktable$?_Reallocate@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IAEXI@Z
.xdata$x:00010404                 db    0
.xdata$x:00010405                 db    0
.xdata$x:00010406                 db    0
.xdata$x:00010407                 db    0
.xdata$x:00010408                 db    0
.xdata$x:00010409                 db    0
.xdata$x:0001040A                 db    0
.xdata$x:0001040B                 db    0
.xdata$x:0001040C                 db    0
.xdata$x:0001040D                 db    0
.xdata$x:0001040E                 db    0
.xdata$x:0001040F                 db    0
.xdata$x:00010410                 db    0
.xdata$x:00010411                 db    0
.xdata$x:00010412                 db    0
.xdata$x:00010413                 db    0
.xdata$x:00010413 _xdata$x        ends
.xdata$x:00010413
.xdata$x:00010414 ; ===========================================================================
.xdata$x:00010414
.xdata$x:00010414 ; Segment type: Pure data
.xdata$x:00010414 ; Segment permissions: Read
.xdata$x:00010414 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010414                 assume cs:_xdata$x
.xdata$x:00010414                 ;org 10414h
.xdata$x:00010414 ; COMDAT (pick associative to section at B54C)
.xdata$x:00010414 __unwindtable$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z db 0FFh
.xdata$x:00010414                                         ; DATA XREF: .xdata$x:00010424o
.xdata$x:00010415                 db 0FFh
.xdata$x:00010416                 db 0FFh
.xdata$x:00010417                 db 0FFh
.xdata$x:00010418                 dd offset __unwindfunclet$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z$0
.xdata$x:0001041C __ehfuncinfo$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z db  22h ; "
.xdata$x:0001041C                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z+11o
.xdata$x:0001041D                 db    5
.xdata$x:0001041E                 db  93h ; ô
.xdata$x:0001041F                 db  19h
.xdata$x:00010420                 db    1
.xdata$x:00010421                 db    0
.xdata$x:00010422                 db    0
.xdata$x:00010423                 db    0
.xdata$x:00010424                 dd offset __unwindtable$?_Orphan_range@?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IBEXPAUfoundInfo@@0@Z
.xdata$x:00010428                 align 20h
.xdata$x:00010428 _xdata$x        ends
.xdata$x:00010428
.xdata$x:00010440 ; ===========================================================================
.xdata$x:00010440
.xdata$x:00010440 ; Segment type: Pure data
.xdata$x:00010440 ; Segment permissions: Read
.xdata$x:00010440 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010440                 assume cs:_xdata$x
.xdata$x:00010440                 ;org 10440h
.xdata$x:00010440 ; COMDAT (pick associative to section at 6764)
.xdata$x:00010440 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00010440                                         ; DATA XREF: .xdata$x:00010450o
.xdata$x:00010441                 db 0FFh
.xdata$x:00010442                 db 0FFh
.xdata$x:00010443                 db 0FFh
.xdata$x:00010444                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00010448 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010448                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00010449                 db    5
.xdata$x:0001044A                 db  93h ; ô
.xdata$x:0001044B                 db  19h
.xdata$x:0001044C                 db    1
.xdata$x:0001044D                 db    0
.xdata$x:0001044E                 db    0
.xdata$x:0001044F                 db    0
.xdata$x:00010450                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00010454                 db    0
.xdata$x:00010455                 db    0
.xdata$x:00010456                 db    0
.xdata$x:00010457                 db    0
.xdata$x:00010458                 db    0
.xdata$x:00010459                 db    0
.xdata$x:0001045A                 db    0
.xdata$x:0001045B                 db    0
.xdata$x:0001045C                 db    0
.xdata$x:0001045D                 db    0
.xdata$x:0001045E                 db    0
.xdata$x:0001045F                 db    0
.xdata$x:00010460                 db    0
.xdata$x:00010461                 db    0
.xdata$x:00010462                 db    0
.xdata$x:00010463                 db    0
.xdata$x:00010464                 db    0
.xdata$x:00010465                 db    0
.xdata$x:00010466                 db    0
.xdata$x:00010467                 db    0
.xdata$x:00010468                 db    0
.xdata$x:00010469                 db    0
.xdata$x:0001046A                 db    0
.xdata$x:0001046B                 db    0
.xdata$x:0001046B _xdata$x        ends
.xdata$x:0001046B
.xdata$x:0001046C ; ===========================================================================
.xdata$x:0001046C
.xdata$x:0001046C ; Segment type: Pure data
.xdata$x:0001046C ; Segment permissions: Read
.xdata$x:0001046C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001046C                 assume cs:_xdata$x
.xdata$x:0001046C                 ;org 1046Ch
.xdata$x:0001046C ; COMDAT (pick associative to section at 848C)
.xdata$x:0001046C __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0001046C                                         ; DATA XREF: .xdata$x:0001047Co
.xdata$x:0001046D                 db 0FFh
.xdata$x:0001046E                 db 0FFh
.xdata$x:0001046F                 db 0FFh
.xdata$x:00010470                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00010474 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010474                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00010475                 db    5
.xdata$x:00010476                 db  93h ; ô
.xdata$x:00010477                 db  19h
.xdata$x:00010478                 db    1
.xdata$x:00010479                 db    0
.xdata$x:0001047A                 db    0
.xdata$x:0001047B                 db    0
.xdata$x:0001047C                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00010480                 db    0
.xdata$x:00010481                 db    0
.xdata$x:00010482                 db    0
.xdata$x:00010483                 db    0
.xdata$x:00010484                 db    0
.xdata$x:00010485                 db    0
.xdata$x:00010486                 db    0
.xdata$x:00010487                 db    0
.xdata$x:00010488                 db    0
.xdata$x:00010489                 db    0
.xdata$x:0001048A                 db    0
.xdata$x:0001048B                 db    0
.xdata$x:0001048C                 db    0
.xdata$x:0001048D                 db    0
.xdata$x:0001048E                 db    0
.xdata$x:0001048F                 db    0
.xdata$x:00010490                 db    0
.xdata$x:00010491                 db    0
.xdata$x:00010492                 db    0
.xdata$x:00010493                 db    0
.xdata$x:00010494                 db    0
.xdata$x:00010495                 db    0
.xdata$x:00010496                 db    0
.xdata$x:00010497                 db    0
.xdata$x:00010497 _xdata$x        ends
.xdata$x:00010497
.xdata$x:00010498 ; ===========================================================================
.xdata$x:00010498
.xdata$x:00010498 ; Segment type: Pure data
.xdata$x:00010498 ; Segment permissions: Read
.xdata$x:00010498 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010498                 assume cs:_xdata$x
.xdata$x:00010498                 ;org 10498h
.xdata$x:00010498 ; COMDAT (pick associative to section at 66EC)
.xdata$x:00010498 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:00010498                                         ; DATA XREF: .xdata$x:000104A8o
.xdata$x:00010499                 db 0FFh
.xdata$x:0001049A                 db 0FFh
.xdata$x:0001049B                 db 0FFh
.xdata$x:0001049C                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:000104A0 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:000104A0                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:000104A1                 db    5
.xdata$x:000104A2                 db  93h ; ô
.xdata$x:000104A3                 db  19h
.xdata$x:000104A4                 db    1
.xdata$x:000104A5                 db    0
.xdata$x:000104A6                 db    0
.xdata$x:000104A7                 db    0
.xdata$x:000104A8                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:000104AC                 db    0
.xdata$x:000104AD                 db    0
.xdata$x:000104AE                 db    0
.xdata$x:000104AF                 db    0
.xdata$x:000104B0                 db    0
.xdata$x:000104B1                 db    0
.xdata$x:000104B2                 db    0
.xdata$x:000104B3                 db    0
.xdata$x:000104B4                 db    0
.xdata$x:000104B5                 db    0
.xdata$x:000104B6                 db    0
.xdata$x:000104B7                 db    0
.xdata$x:000104B8                 db    0
.xdata$x:000104B9                 db    0
.xdata$x:000104BA                 db    0
.xdata$x:000104BB                 db    0
.xdata$x:000104BC                 db    0
.xdata$x:000104BD                 db    0
.xdata$x:000104BE                 db    0
.xdata$x:000104BF                 db    0
.xdata$x:000104C0                 db    0
.xdata$x:000104C1                 db    0
.xdata$x:000104C2                 db    0
.xdata$x:000104C3                 db    0
.xdata$x:000104C3 _xdata$x        ends
.xdata$x:000104C3
.xdata$x:000104C4 ; ===========================================================================
.xdata$x:000104C4
.xdata$x:000104C4 ; Segment type: Pure data
.xdata$x:000104C4 ; Segment permissions: Read
.xdata$x:000104C4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000104C4                 assume cs:_xdata$x
.xdata$x:000104C4                 ;org 104C4h
.xdata$x:000104C4 ; COMDAT (pick associative to section at 6E4C)
.xdata$x:000104C4 __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:000104C4                                         ; DATA XREF: .xdata$x:000104D4o
.xdata$x:000104C5                 db 0FFh
.xdata$x:000104C6                 db 0FFh
.xdata$x:000104C7                 db 0FFh
.xdata$x:000104C8                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0
.xdata$x:000104CC __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:000104CC                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z+11o
.xdata$x:000104CD                 db    5
.xdata$x:000104CE                 db  93h ; ô
.xdata$x:000104CF                 db  19h
.xdata$x:000104D0                 db    1
.xdata$x:000104D1                 db    0
.xdata$x:000104D2                 db    0
.xdata$x:000104D3                 db    0
.xdata$x:000104D4                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.xdata$x:000104D8                 db    0
.xdata$x:000104D9                 db    0
.xdata$x:000104DA                 db    0
.xdata$x:000104DB                 db    0
.xdata$x:000104DC                 db    0
.xdata$x:000104DD                 db    0
.xdata$x:000104DE                 db    0
.xdata$x:000104DF                 db    0
.xdata$x:000104E0                 db    0
.xdata$x:000104E1                 db    0
.xdata$x:000104E2                 db    0
.xdata$x:000104E3                 db    0
.xdata$x:000104E4                 db    0
.xdata$x:000104E5                 db    0
.xdata$x:000104E6                 db    0
.xdata$x:000104E7                 db    0
.xdata$x:000104E8                 db    0
.xdata$x:000104E9                 db    0
.xdata$x:000104EA                 db    0
.xdata$x:000104EB                 db    0
.xdata$x:000104EC                 db    0
.xdata$x:000104ED                 db    0
.xdata$x:000104EE                 db    0
.xdata$x:000104EF                 db    0
.xdata$x:000104EF _xdata$x        ends
.xdata$x:000104EF
.xdata$x:000104F0 ; ===========================================================================
.xdata$x:000104F0
.xdata$x:000104F0 ; Segment type: Pure data
.xdata$x:000104F0 ; Segment permissions: Read
.xdata$x:000104F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000104F0                 assume cs:_xdata$x
.xdata$x:000104F0                 ;org 104F0h
.xdata$x:000104F0 ; COMDAT (pick associative to section at 89FC)
.xdata$x:000104F0 __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000104F0                                         ; DATA XREF: .xdata$x:00010500o
.xdata$x:000104F1                 db 0FFh
.xdata$x:000104F2                 db 0FFh
.xdata$x:000104F3                 db 0FFh
.xdata$x:000104F4                 dd offset __unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000104F8 __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000104F8                                         ; DATA XREF: __ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000104F9                 db    5
.xdata$x:000104FA                 db  93h ; ô
.xdata$x:000104FB                 db  19h
.xdata$x:000104FC                 db    1
.xdata$x:000104FD                 db    0
.xdata$x:000104FE                 db    0
.xdata$x:000104FF                 db    0
.xdata$x:00010500                 dd offset __unwindtable$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.xdata$x:00010504                 db    0
.xdata$x:00010505                 db    0
.xdata$x:00010506                 db    0
.xdata$x:00010507                 db    0
.xdata$x:00010508                 db    0
.xdata$x:00010509                 db    0
.xdata$x:0001050A                 db    0
.xdata$x:0001050B                 db    0
.xdata$x:0001050C                 db    0
.xdata$x:0001050D                 db    0
.xdata$x:0001050E                 db    0
.xdata$x:0001050F                 db    0
.xdata$x:00010510                 db    0
.xdata$x:00010511                 db    0
.xdata$x:00010512                 db    0
.xdata$x:00010513                 db    0
.xdata$x:00010514                 db    0
.xdata$x:00010515                 db    0
.xdata$x:00010516                 db    0
.xdata$x:00010517                 db    0
.xdata$x:00010518                 db    0
.xdata$x:00010519                 db    0
.xdata$x:0001051A                 db    0
.xdata$x:0001051B                 db    0
.xdata$x:0001051B _xdata$x        ends
.xdata$x:0001051B
.xdata$x:0001051C ; ===========================================================================
.xdata$x:0001051C
.xdata$x:0001051C ; Segment type: Pure data
.xdata$x:0001051C ; Segment permissions: Read
.xdata$x:0001051C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001051C                 assume cs:_xdata$x
.xdata$x:0001051C                 ;org 1051Ch
.xdata$x:0001051C ; COMDAT (pick associative to section at 6DC8)
.xdata$x:0001051C __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0001051C                                         ; DATA XREF: .xdata$x:0001052Co
.xdata$x:0001051D                 db 0FFh
.xdata$x:0001051E                 db 0FFh
.xdata$x:0001051F                 db 0FFh
.xdata$x:00010520                 dd offset __unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00010524 __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00010524                                         ; DATA XREF: __ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00010525                 db    5
.xdata$x:00010526                 db  93h ; ô
.xdata$x:00010527                 db  19h
.xdata$x:00010528                 db    1
.xdata$x:00010529                 db    0
.xdata$x:0001052A                 db    0
.xdata$x:0001052B                 db    0
.xdata$x:0001052C                 dd offset __unwindtable$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00010530                 db    0
.xdata$x:00010531                 db    0
.xdata$x:00010532                 db    0
.xdata$x:00010533                 db    0
.xdata$x:00010534                 db    0
.xdata$x:00010535                 db    0
.xdata$x:00010536                 db    0
.xdata$x:00010537                 db    0
.xdata$x:00010538                 db    0
.xdata$x:00010539                 db    0
.xdata$x:0001053A                 db    0
.xdata$x:0001053B                 db    0
.xdata$x:0001053C                 db    0
.xdata$x:0001053D                 db    0
.xdata$x:0001053E                 db    0
.xdata$x:0001053F                 db    0
.xdata$x:00010540                 db    0
.xdata$x:00010541                 db    0
.xdata$x:00010542                 db    0
.xdata$x:00010543                 db    0
.xdata$x:00010544                 db    0
.xdata$x:00010545                 db    0
.xdata$x:00010546                 db    0
.xdata$x:00010547                 db    0
.xdata$x:00010547 _xdata$x        ends
.xdata$x:00010547
.xdata$x:00010548 ; ===========================================================================
.xdata$x:00010548
.xdata$x:00010548 ; Segment type: Pure data
.xdata$x:00010548 ; Segment permissions: Read
.xdata$x:00010548 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010548                 assume cs:_xdata$x
.xdata$x:00010548                 ;org 10548h
.xdata$x:00010548 ; COMDAT (pick associative to section at 6ED8)
.xdata$x:00010548 __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db 0FFh
.xdata$x:00010548                                         ; DATA XREF: .xdata$x:00010558o
.xdata$x:00010549                 db 0FFh
.xdata$x:0001054A                 db 0FFh
.xdata$x:0001054B                 db 0FFh
.xdata$x:0001054C                 dd offset __unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0
.xdata$x:00010550 __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00010550                                         ; DATA XREF: __ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z+11o
.xdata$x:00010551                 db    5
.xdata$x:00010552                 db  93h ; ô
.xdata$x:00010553                 db  19h
.xdata$x:00010554                 db    1
.xdata$x:00010555                 db    0
.xdata$x:00010556                 db    0
.xdata$x:00010557                 db    0
.xdata$x:00010558                 dd offset __unwindtable$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
.xdata$x:0001055C                 db    0
.xdata$x:0001055D                 db    0
.xdata$x:0001055E                 db    0
.xdata$x:0001055F                 db    0
.xdata$x:00010560                 db    0
.xdata$x:00010561                 db    0
.xdata$x:00010562                 db    0
.xdata$x:00010563                 db    0
.xdata$x:00010564                 db    0
.xdata$x:00010565                 db    0
.xdata$x:00010566                 db    0
.xdata$x:00010567                 db    0
.xdata$x:00010568                 db    0
.xdata$x:00010569                 db    0
.xdata$x:0001056A                 db    0
.xdata$x:0001056B                 db    0
.xdata$x:0001056C                 db    0
.xdata$x:0001056D                 db    0
.xdata$x:0001056E                 db    0
.xdata$x:0001056F                 db    0
.xdata$x:00010570                 db    0
.xdata$x:00010571                 db    0
.xdata$x:00010572                 db    0
.xdata$x:00010573                 db    0
.xdata$x:00010573 _xdata$x        ends
.xdata$x:00010573
.xdata$x:00010574 ; ===========================================================================
.xdata$x:00010574
.xdata$x:00010574 ; Segment type: Pure data
.xdata$x:00010574 ; Segment permissions: Read
.xdata$x:00010574 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010574                 assume cs:_xdata$x
.xdata$x:00010574                 ;org 10574h
.xdata$x:00010574 ; COMDAT (pick associative to section at 8A6C)
.xdata$x:00010574 __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010574                                         ; DATA XREF: .xdata$x:00010584o
.xdata$x:00010575                 db 0FFh
.xdata$x:00010576                 db 0FFh
.xdata$x:00010577                 db 0FFh
.xdata$x:00010578                 dd offset __unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0001057C __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0001057C                                         ; DATA XREF: __ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0001057D                 db    5
.xdata$x:0001057E                 db  93h ; ô
.xdata$x:0001057F                 db  19h
.xdata$x:00010580                 db    1
.xdata$x:00010581                 db    0
.xdata$x:00010582                 db    0
.xdata$x:00010583                 db    0
.xdata$x:00010584                 dd offset __unwindtable$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
.xdata$x:00010588                 align 20h
.xdata$x:00010588 _xdata$x        ends
.xdata$x:00010588
.xdata$x:000105A0 ; ===========================================================================
.xdata$x:000105A0
.xdata$x:000105A0 ; Segment type: Pure data
.xdata$x:000105A0 ; Segment permissions: Read
.xdata$x:000105A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000105A0                 assume cs:_xdata$x
.xdata$x:000105A0                 ;org 105A0h
.xdata$x:000105A0 ; COMDAT (pick associative to section at 6F54)
.xdata$x:000105A0 __unwindtable$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000105A0                                         ; DATA XREF: .xdata$x:000105B0o
.xdata$x:000105A1                 db 0FFh
.xdata$x:000105A2                 db 0FFh
.xdata$x:000105A3                 db 0FFh
.xdata$x:000105A4                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000105A8 __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000105A8                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000105A9                 db    5
.xdata$x:000105AA                 db  93h ; ô
.xdata$x:000105AB                 db  19h
.xdata$x:000105AC                 db    1
.xdata$x:000105AD                 db    0
.xdata$x:000105AE                 db    0
.xdata$x:000105AF                 db    0
.xdata$x:000105B0                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.xdata$x:000105B4                 db    0
.xdata$x:000105B5                 db    0
.xdata$x:000105B6                 db    0
.xdata$x:000105B7                 db    0
.xdata$x:000105B8                 db    0
.xdata$x:000105B9                 db    0
.xdata$x:000105BA                 db    0
.xdata$x:000105BB                 db    0
.xdata$x:000105BC                 db    0
.xdata$x:000105BD                 db    0
.xdata$x:000105BE                 db    0
.xdata$x:000105BF                 db    0
.xdata$x:000105C0                 db    0
.xdata$x:000105C1                 db    0
.xdata$x:000105C2                 db    0
.xdata$x:000105C3                 db    0
.xdata$x:000105C4                 db    0
.xdata$x:000105C5                 db    0
.xdata$x:000105C6                 db    0
.xdata$x:000105C7                 db    0
.xdata$x:000105C8                 db    0
.xdata$x:000105C9                 db    0
.xdata$x:000105CA                 db    0
.xdata$x:000105CB                 db    0
.xdata$x:000105CB _xdata$x        ends
.xdata$x:000105CB
.xdata$x:000105CC ; ===========================================================================
.xdata$x:000105CC
.xdata$x:000105CC ; Segment type: Pure data
.xdata$x:000105CC ; Segment permissions: Read
.xdata$x:000105CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000105CC                 assume cs:_xdata$x
.xdata$x:000105CC                 ;org 105CCh
.xdata$x:000105CC ; COMDAT (pick associative to section at 8B4C)
.xdata$x:000105CC __unwindtable$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000105CC                                         ; DATA XREF: .xdata$x:000105DCo
.xdata$x:000105CD                 db 0FFh
.xdata$x:000105CE                 db 0FFh
.xdata$x:000105CF                 db 0FFh
.xdata$x:000105D0                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000105D4 __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000105D4                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000105D5                 db    5
.xdata$x:000105D6                 db  93h ; ô
.xdata$x:000105D7                 db  19h
.xdata$x:000105D8                 db    1
.xdata$x:000105D9                 db    0
.xdata$x:000105DA                 db    0
.xdata$x:000105DB                 db    0
.xdata$x:000105DC                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@U?$pair@HH@std@@@std@@@std@@QAE@XZ
.xdata$x:000105E0                 db    0
.xdata$x:000105E1                 db    0
.xdata$x:000105E2                 db    0
.xdata$x:000105E3                 db    0
.xdata$x:000105E4                 db    0
.xdata$x:000105E5                 db    0
.xdata$x:000105E6                 db    0
.xdata$x:000105E7                 db    0
.xdata$x:000105E8                 db    0
.xdata$x:000105E9                 db    0
.xdata$x:000105EA                 db    0
.xdata$x:000105EB                 db    0
.xdata$x:000105EC                 db    0
.xdata$x:000105ED                 db    0
.xdata$x:000105EE                 db    0
.xdata$x:000105EF                 db    0
.xdata$x:000105F0                 db    0
.xdata$x:000105F1                 db    0
.xdata$x:000105F2                 db    0
.xdata$x:000105F3                 db    0
.xdata$x:000105F4                 db    0
.xdata$x:000105F5                 db    0
.xdata$x:000105F6                 db    0
.xdata$x:000105F7                 db    0
.xdata$x:000105F7 _xdata$x        ends
.xdata$x:000105F7
.xdata$x:000105F8 ; ===========================================================================
.xdata$x:000105F8
.xdata$x:000105F8 ; Segment type: Pure data
.xdata$x:000105F8 ; Segment permissions: Read
.xdata$x:000105F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000105F8                 assume cs:_xdata$x
.xdata$x:000105F8                 ;org 105F8h
.xdata$x:000105F8 ; COMDAT (pick associative to section at 6CD0)
.xdata$x:000105F8 __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z db 0FFh
.xdata$x:000105F8                                         ; DATA XREF: .xdata$x:00010608o
.xdata$x:000105F9                 db 0FFh
.xdata$x:000105FA                 db 0FFh
.xdata$x:000105FB                 db 0FFh
.xdata$x:000105FC                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z$0
.xdata$x:00010600 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z db  22h ; "
.xdata$x:00010600                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z+11o
.xdata$x:00010601                 db    5
.xdata$x:00010602                 db  93h ; ô
.xdata$x:00010603                 db  19h
.xdata$x:00010604                 db    1
.xdata$x:00010605                 db    0
.xdata$x:00010606                 db    0
.xdata$x:00010607                 db    0
.xdata$x:00010608                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@HH@std@@@1@@Z
.xdata$x:0001060C                 db    0
.xdata$x:0001060D                 db    0
.xdata$x:0001060E                 db    0
.xdata$x:0001060F                 db    0
.xdata$x:00010610                 db    0
.xdata$x:00010611                 db    0
.xdata$x:00010612                 db    0
.xdata$x:00010613                 db    0
.xdata$x:00010614                 db    0
.xdata$x:00010615                 db    0
.xdata$x:00010616                 db    0
.xdata$x:00010617                 db    0
.xdata$x:00010618                 db    0
.xdata$x:00010619                 db    0
.xdata$x:0001061A                 db    0
.xdata$x:0001061B                 db    0
.xdata$x:0001061C                 db    0
.xdata$x:0001061D                 db    0
.xdata$x:0001061E                 db    0
.xdata$x:0001061F                 db    0
.xdata$x:00010620                 db    0
.xdata$x:00010621                 db    0
.xdata$x:00010622                 db    0
.xdata$x:00010623                 db    0
.xdata$x:00010623 _xdata$x        ends
.xdata$x:00010623
.xdata$x:00010624 ; ===========================================================================
.xdata$x:00010624
.xdata$x:00010624 ; Segment type: Pure data
.xdata$x:00010624 ; Segment permissions: Read
.xdata$x:00010624 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010624                 assume cs:_xdata$x
.xdata$x:00010624                 ;org 10624h
.xdata$x:00010624 ; COMDAT (pick associative to section at 8894)
.xdata$x:00010624 __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00010624                                         ; DATA XREF: .xdata$x:00010634o
.xdata$x:00010625                 db 0FFh
.xdata$x:00010626                 db 0FFh
.xdata$x:00010627                 db 0FFh
.xdata$x:00010628                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ$0
.xdata$x:0001062C __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0001062C                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ+11o
.xdata$x:0001062D                 db    5
.xdata$x:0001062E                 db  93h ; ô
.xdata$x:0001062F                 db  19h
.xdata$x:00010630                 db    1
.xdata$x:00010631                 db    0
.xdata$x:00010632                 db    0
.xdata$x:00010633                 db    0
.xdata$x:00010634                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@@std@@QAE@XZ
.xdata$x:00010638                 db    0
.xdata$x:00010639                 db    0
.xdata$x:0001063A                 db    0
.xdata$x:0001063B                 db    0
.xdata$x:0001063C                 db    0
.xdata$x:0001063D                 db    0
.xdata$x:0001063E                 db    0
.xdata$x:0001063F                 db    0
.xdata$x:00010640                 db    0
.xdata$x:00010641                 db    0
.xdata$x:00010642                 db    0
.xdata$x:00010643                 db    0
.xdata$x:00010644                 db    0
.xdata$x:00010645                 db    0
.xdata$x:00010646                 db    0
.xdata$x:00010647                 db    0
.xdata$x:00010648                 db    0
.xdata$x:00010649                 db    0
.xdata$x:0001064A                 db    0
.xdata$x:0001064B                 db    0
.xdata$x:0001064C                 db    0
.xdata$x:0001064D                 db    0
.xdata$x:0001064E                 db    0
.xdata$x:0001064F                 db    0
.xdata$x:0001064F _xdata$x        ends
.xdata$x:0001064F
.xdata$x:00010650 ; ===========================================================================
.xdata$x:00010650
.xdata$x:00010650 ; Segment type: Pure data
.xdata$x:00010650 ; Segment permissions: Read
.xdata$x:00010650 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010650                 assume cs:_xdata$x
.xdata$x:00010650                 ;org 10650h
.xdata$x:00010650 ; COMDAT (pick associative to section at 751C)
.xdata$x:00010650 __unwindtable$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:00010650                                         ; DATA XREF: .xdata$x:00010660o
.xdata$x:00010651                 db 0FFh
.xdata$x:00010652                 db 0FFh
.xdata$x:00010653                 db 0FFh
.xdata$x:00010654                 dd offset __unwindfunclet$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ$0
.xdata$x:00010658 __ehfuncinfo$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010658                                         ; DATA XREF: __ehhandler$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ+11o
.xdata$x:00010659                 db    5
.xdata$x:0001065A                 db  93h ; ô
.xdata$x:0001065B                 db  19h
.xdata$x:0001065C                 db    1
.xdata$x:0001065D                 db    0
.xdata$x:0001065E                 db    0
.xdata$x:0001065F                 db    0
.xdata$x:00010660                 dd offset __unwindtable$??0?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ
.xdata$x:00010664                 db    0
.xdata$x:00010665                 db    0
.xdata$x:00010666                 db    0
.xdata$x:00010667                 db    0
.xdata$x:00010668                 db    0
.xdata$x:00010669                 db    0
.xdata$x:0001066A                 db    0
.xdata$x:0001066B                 db    0
.xdata$x:0001066C                 db    0
.xdata$x:0001066D                 db    0
.xdata$x:0001066E                 db    0
.xdata$x:0001066F                 db    0
.xdata$x:00010670                 db    0
.xdata$x:00010671                 db    0
.xdata$x:00010672                 db    0
.xdata$x:00010673                 db    0
.xdata$x:00010674                 db    0
.xdata$x:00010675                 db    0
.xdata$x:00010676                 db    0
.xdata$x:00010677                 db    0
.xdata$x:00010678                 db    0
.xdata$x:00010679                 db    0
.xdata$x:0001067A                 db    0
.xdata$x:0001067B                 db    0
.xdata$x:0001067B _xdata$x        ends
.xdata$x:0001067B
.xdata$x:0001067C ; ===========================================================================
.xdata$x:0001067C
.xdata$x:0001067C ; Segment type: Pure data
.xdata$x:0001067C ; Segment permissions: Read
.xdata$x:0001067C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001067C                 assume cs:_xdata$x
.xdata$x:0001067C                 ;org 1067Ch
.xdata$x:0001067C ; COMDAT (pick associative to section at 8E0C)
.xdata$x:0001067C __unwindtable$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:0001067C                                         ; DATA XREF: .xdata$x:0001068Co
.xdata$x:0001067D                 db 0FFh
.xdata$x:0001067E                 db 0FFh
.xdata$x:0001067F                 db 0FFh
.xdata$x:00010680                 dd offset __unwindfunclet$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ$0
.xdata$x:00010684 __ehfuncinfo$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010684                                         ; DATA XREF: __ehhandler$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ+11o
.xdata$x:00010685                 db    5
.xdata$x:00010686                 db  93h ; ô
.xdata$x:00010687                 db  19h
.xdata$x:00010688                 db    1
.xdata$x:00010689                 db    0
.xdata$x:0001068A                 db    0
.xdata$x:0001068B                 db    0
.xdata$x:0001068C                 dd offset __unwindtable$??1?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@QAE@XZ
.xdata$x:00010690                 db    0
.xdata$x:00010691                 db    0
.xdata$x:00010692                 db    0
.xdata$x:00010693                 db    0
.xdata$x:00010694                 db    0
.xdata$x:00010695                 db    0
.xdata$x:00010696                 db    0
.xdata$x:00010697                 db    0
.xdata$x:00010698                 db    0
.xdata$x:00010699                 db    0
.xdata$x:0001069A                 db    0
.xdata$x:0001069B                 db    0
.xdata$x:0001069C                 db    0
.xdata$x:0001069D                 db    0
.xdata$x:0001069E                 db    0
.xdata$x:0001069F                 db    0
.xdata$x:000106A0                 db    0
.xdata$x:000106A1                 db    0
.xdata$x:000106A2                 db    0
.xdata$x:000106A3                 db    0
.xdata$x:000106A4                 db    0
.xdata$x:000106A5                 db    0
.xdata$x:000106A6                 db    0
.xdata$x:000106A7                 db    0
.xdata$x:000106A7 _xdata$x        ends
.xdata$x:000106A7
.xdata$x:000106A8 ; ===========================================================================
.xdata$x:000106A8
.xdata$x:000106A8 ; Segment type: Pure data
.xdata$x:000106A8 ; Segment permissions: Read
.xdata$x:000106A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000106A8                 assume cs:_xdata$x
.xdata$x:000106A8                 ;org 106A8h
.xdata$x:000106A8 ; COMDAT (pick associative to section at B90C)
.xdata$x:000106A8 __catchsym$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z$2 db    0
.xdata$x:000106A8                                         ; DATA XREF: .xdata$x:000106D8o
.xdata$x:000106A9                 db    0
.xdata$x:000106AA                 db    0
.xdata$x:000106AB                 db    0
.xdata$x:000106AC                 db    0
.xdata$x:000106AD                 db    0
.xdata$x:000106AE                 db    0
.xdata$x:000106AF                 db    0
.xdata$x:000106B0                 db    0
.xdata$x:000106B1                 db    0
.xdata$x:000106B2                 db    0
.xdata$x:000106B3                 db    0
.xdata$x:000106B4                 dd offset __catch$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z$0
.xdata$x:000106B8 __unwindtable$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z db 0FFh
.xdata$x:000106B8                                         ; DATA XREF: .xdata$x:000106E4o
.xdata$x:000106B9                 db 0FFh
.xdata$x:000106BA                 db 0FFh
.xdata$x:000106BB                 db 0FFh
.xdata$x:000106BC                 db    0
.xdata$x:000106BD                 db    0
.xdata$x:000106BE                 db    0
.xdata$x:000106BF                 db    0
.xdata$x:000106C0                 db 0FFh
.xdata$x:000106C1                 db 0FFh
.xdata$x:000106C2                 db 0FFh
.xdata$x:000106C3                 db 0FFh
.xdata$x:000106C4                 db    0
.xdata$x:000106C5                 db    0
.xdata$x:000106C6                 db    0
.xdata$x:000106C7                 db    0
.xdata$x:000106C8 __tryblocktable$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z db    0
.xdata$x:000106C8                                         ; DATA XREF: .xdata$x:000106ECo
.xdata$x:000106C9                 db    0
.xdata$x:000106CA                 db    0
.xdata$x:000106CB                 db    0
.xdata$x:000106CC                 db    0
.xdata$x:000106CD                 db    0
.xdata$x:000106CE                 db    0
.xdata$x:000106CF                 db    0
.xdata$x:000106D0                 db    1
.xdata$x:000106D1                 db    0
.xdata$x:000106D2                 db    0
.xdata$x:000106D3                 db    0
.xdata$x:000106D4                 db    1
.xdata$x:000106D5                 db    0
.xdata$x:000106D6                 db    0
.xdata$x:000106D7                 db    0
.xdata$x:000106D8                 dd offset __catchsym$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z$2
.xdata$x:000106DC __ehfuncinfo$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z db  22h ; "
.xdata$x:000106DC                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z+11o
.xdata$x:000106DD                 db    5
.xdata$x:000106DE                 db  93h ; ô
.xdata$x:000106DF                 db  19h
.xdata$x:000106E0                 db    2
.xdata$x:000106E1                 db    0
.xdata$x:000106E2                 db    0
.xdata$x:000106E3                 db    0
.xdata$x:000106E4                 dd offset __unwindtable$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.xdata$x:000106E8                 db    1
.xdata$x:000106E9                 db    0
.xdata$x:000106EA                 db    0
.xdata$x:000106EB                 db    0
.xdata$x:000106EC                 dd offset __tryblocktable$?_Reallocate@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IAEXI@Z
.xdata$x:000106F0                 align 20h
.xdata$x:000106F0 _xdata$x        ends
.xdata$x:000106F0
.xdata$x:00010700 ; ===========================================================================
.xdata$x:00010700
.xdata$x:00010700 ; Segment type: Pure data
.xdata$x:00010700 ; Segment permissions: Read
.xdata$x:00010700 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010700                 assume cs:_xdata$x
.xdata$x:00010700                 ;org 10700h
.xdata$x:00010700 ; COMDAT (pick associative to section at B394)
.xdata$x:00010700 __unwindtable$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z db 0FFh
.xdata$x:00010700                                         ; DATA XREF: .xdata$x:00010710o
.xdata$x:00010701                 db 0FFh
.xdata$x:00010702                 db 0FFh
.xdata$x:00010703                 db 0FFh
.xdata$x:00010704                 dd offset __unwindfunclet$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z$0
.xdata$x:00010708 __ehfuncinfo$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z db  22h ; "
.xdata$x:00010708                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z+11o
.xdata$x:00010709                 db    5
.xdata$x:0001070A                 db  93h ; ô
.xdata$x:0001070B                 db  19h
.xdata$x:0001070C                 db    1
.xdata$x:0001070D                 db    0
.xdata$x:0001070E                 db    0
.xdata$x:0001070F                 db    0
.xdata$x:00010710                 dd offset __unwindtable$?_Orphan_range@?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@std@@IBEXPAU?$pair@HH@2@0@Z
.xdata$x:00010714                 db    0
.xdata$x:00010715                 db    0
.xdata$x:00010716                 db    0
.xdata$x:00010717                 db    0
.xdata$x:00010718                 db    0
.xdata$x:00010719                 db    0
.xdata$x:0001071A                 db    0
.xdata$x:0001071B                 db    0
.xdata$x:0001071C                 db    0
.xdata$x:0001071D                 db    0
.xdata$x:0001071E                 db    0
.xdata$x:0001071F                 db    0
.xdata$x:00010720                 db    0
.xdata$x:00010721                 db    0
.xdata$x:00010722                 db    0
.xdata$x:00010723                 db    0
.xdata$x:00010724                 db    0
.xdata$x:00010725                 db    0
.xdata$x:00010726                 db    0
.xdata$x:00010727                 db    0
.xdata$x:00010728                 db    0
.xdata$x:00010729                 db    0
.xdata$x:0001072A                 db    0
.xdata$x:0001072B                 db    0
.xdata$x:0001072B _xdata$x        ends
.xdata$x:0001072B
.xdata$x:0001072C ; ===========================================================================
.xdata$x:0001072C
.xdata$x:0001072C ; Segment type: Pure data
.xdata$x:0001072C ; Segment permissions: Read
.xdata$x:0001072C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001072C                 assume cs:_xdata$x
.xdata$x:0001072C                 ;org 1072Ch
.xdata$x:0001072C ; COMDAT (pick associative to section at 6850)
.xdata$x:0001072C __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0001072C                                         ; DATA XREF: .xdata$x:0001073Co
.xdata$x:0001072D                 db 0FFh
.xdata$x:0001072E                 db 0FFh
.xdata$x:0001072F                 db 0FFh
.xdata$x:00010730                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00010734 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010734                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00010735                 db    5
.xdata$x:00010736                 db  93h ; ô
.xdata$x:00010737                 db  19h
.xdata$x:00010738                 db    1
.xdata$x:00010739                 db    0
.xdata$x:0001073A                 db    0
.xdata$x:0001073B                 db    0
.xdata$x:0001073C                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00010740                 db    0
.xdata$x:00010741                 db    0
.xdata$x:00010742                 db    0
.xdata$x:00010743                 db    0
.xdata$x:00010744                 db    0
.xdata$x:00010745                 db    0
.xdata$x:00010746                 db    0
.xdata$x:00010747                 db    0
.xdata$x:00010748                 db    0
.xdata$x:00010749                 db    0
.xdata$x:0001074A                 db    0
.xdata$x:0001074B                 db    0
.xdata$x:0001074C                 db    0
.xdata$x:0001074D                 db    0
.xdata$x:0001074E                 db    0
.xdata$x:0001074F                 db    0
.xdata$x:00010750                 db    0
.xdata$x:00010751                 db    0
.xdata$x:00010752                 db    0
.xdata$x:00010753                 db    0
.xdata$x:00010754                 db    0
.xdata$x:00010755                 db    0
.xdata$x:00010756                 db    0
.xdata$x:00010757                 db    0
.xdata$x:00010757 _xdata$x        ends
.xdata$x:00010757
.xdata$x:00010758 ; ===========================================================================
.xdata$x:00010758
.xdata$x:00010758 ; Segment type: Pure data
.xdata$x:00010758 ; Segment permissions: Read
.xdata$x:00010758 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010758                 assume cs:_xdata$x
.xdata$x:00010758                 ;org 10758h
.xdata$x:00010758 ; COMDAT (pick associative to section at 84FC)
.xdata$x:00010758 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00010758                                         ; DATA XREF: .xdata$x:00010768o
.xdata$x:00010759                 db 0FFh
.xdata$x:0001075A                 db 0FFh
.xdata$x:0001075B                 db 0FFh
.xdata$x:0001075C                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00010760 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00010760                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00010761                 db    5
.xdata$x:00010762                 db  93h ; ô
.xdata$x:00010763                 db  19h
.xdata$x:00010764                 db    1
.xdata$x:00010765                 db    0
.xdata$x:00010766                 db    0
.xdata$x:00010767                 db    0
.xdata$x:00010768                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0001076C                 db    0
.xdata$x:0001076D                 db    0
.xdata$x:0001076E                 db    0
.xdata$x:0001076F                 db    0
.xdata$x:00010770                 db    0
.xdata$x:00010771                 db    0
.xdata$x:00010772                 db    0
.xdata$x:00010773                 db    0
.xdata$x:00010774                 db    0
.xdata$x:00010775                 db    0
.xdata$x:00010776                 db    0
.xdata$x:00010777                 db    0
.xdata$x:00010778                 db    0
.xdata$x:00010779                 db    0
.xdata$x:0001077A                 db    0
.xdata$x:0001077B                 db    0
.xdata$x:0001077C                 db    0
.xdata$x:0001077D                 db    0
.xdata$x:0001077E                 db    0
.xdata$x:0001077F                 db    0
.xdata$x:00010780                 db    0
.xdata$x:00010781                 db    0
.xdata$x:00010782                 db    0
.xdata$x:00010783                 db    0
.xdata$x:00010783 _xdata$x        ends
.xdata$x:00010783
.xdata$x:00010784 ; ===========================================================================
.xdata$x:00010784
.xdata$x:00010784 ; Segment type: Pure data
.xdata$x:00010784 ; Segment permissions: Read
.xdata$x:00010784 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010784                 assume cs:_xdata$x
.xdata$x:00010784                 ;org 10784h
.xdata$x:00010784 ; COMDAT (pick associative to section at 67D8)
.xdata$x:00010784 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:00010784                                         ; DATA XREF: .xdata$x:00010794o
.xdata$x:00010785                 db 0FFh
.xdata$x:00010786                 db 0FFh
.xdata$x:00010787                 db 0FFh
.xdata$x:00010788                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:0001078C __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:0001078C                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:0001078D                 db    5
.xdata$x:0001078E                 db  93h ; ô
.xdata$x:0001078F                 db  19h
.xdata$x:00010790                 db    1
.xdata$x:00010791                 db    0
.xdata$x:00010792                 db    0
.xdata$x:00010793                 db    0
.xdata$x:00010794                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:00010798                 db    0
.xdata$x:00010799                 db    0
.xdata$x:0001079A                 db    0
.xdata$x:0001079B                 db    0
.xdata$x:0001079C                 db    0
.xdata$x:0001079D                 db    0
.xdata$x:0001079E                 db    0
.xdata$x:0001079F                 db    0
.xdata$x:000107A0                 db    0
.xdata$x:000107A1                 db    0
.xdata$x:000107A2                 db    0
.xdata$x:000107A3                 db    0
.xdata$x:000107A4                 db    0
.xdata$x:000107A5                 db    0
.xdata$x:000107A6                 db    0
.xdata$x:000107A7                 db    0
.xdata$x:000107A8                 db    0
.xdata$x:000107A9                 db    0
.xdata$x:000107AA                 db    0
.xdata$x:000107AB                 db    0
.xdata$x:000107AC                 db    0
.xdata$x:000107AD                 db    0
.xdata$x:000107AE                 db    0
.xdata$x:000107AF                 db    0
.xdata$x:000107AF _xdata$x        ends
.xdata$x:000107AF
.xdata$x:000107B0 ; ===========================================================================
.xdata$x:000107B0
.xdata$x:000107B0 ; Segment type: Pure data
.xdata$x:000107B0 ; Segment permissions: Read
.xdata$x:000107B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000107B0                 assume cs:_xdata$x
.xdata$x:000107B0                 ;org 107B0h
.xdata$x:000107B0 ; COMDAT (pick associative to section at 6A40)
.xdata$x:000107B0 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:000107B0                                         ; DATA XREF: .xdata$x:000107C0o
.xdata$x:000107B1                 db 0FFh
.xdata$x:000107B2                 db 0FFh
.xdata$x:000107B3                 db 0FFh
.xdata$x:000107B4                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0
.xdata$x:000107B8 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:000107B8                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z+11o
.xdata$x:000107B9                 db    5
.xdata$x:000107BA                 db  93h ; ô
.xdata$x:000107BB                 db  19h
.xdata$x:000107BC                 db    1
.xdata$x:000107BD                 db    0
.xdata$x:000107BE                 db    0
.xdata$x:000107BF                 db    0
.xdata$x:000107C0                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.xdata$x:000107C4                 db    0
.xdata$x:000107C5                 db    0
.xdata$x:000107C6                 db    0
.xdata$x:000107C7                 db    0
.xdata$x:000107C8                 db    0
.xdata$x:000107C9                 db    0
.xdata$x:000107CA                 db    0
.xdata$x:000107CB                 db    0
.xdata$x:000107CC                 db    0
.xdata$x:000107CD                 db    0
.xdata$x:000107CE                 db    0
.xdata$x:000107CF                 db    0
.xdata$x:000107D0                 db    0
.xdata$x:000107D1                 db    0
.xdata$x:000107D2                 db    0
.xdata$x:000107D3                 db    0
.xdata$x:000107D4                 db    0
.xdata$x:000107D5                 db    0
.xdata$x:000107D6                 db    0
.xdata$x:000107D7                 db    0
.xdata$x:000107D8                 db    0
.xdata$x:000107D9                 db    0
.xdata$x:000107DA                 db    0
.xdata$x:000107DB                 db    0
.xdata$x:000107DB _xdata$x        ends
.xdata$x:000107DB
.xdata$x:000107DC ; ===========================================================================
.xdata$x:000107DC
.xdata$x:000107DC ; Segment type: Pure data
.xdata$x:000107DC ; Segment permissions: Read
.xdata$x:000107DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000107DC                 assume cs:_xdata$x
.xdata$x:000107DC                 ;org 107DCh
.xdata$x:000107DC ; COMDAT (pick associative to section at 865C)
.xdata$x:000107DC __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000107DC                                         ; DATA XREF: .xdata$x:000107ECo
.xdata$x:000107DD                 db 0FFh
.xdata$x:000107DE                 db 0FFh
.xdata$x:000107DF                 db 0FFh
.xdata$x:000107E0                 dd offset __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000107E4 __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000107E4                                         ; DATA XREF: __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000107E5                 db    5
.xdata$x:000107E6                 db  93h ; ô
.xdata$x:000107E7                 db  19h
.xdata$x:000107E8                 db    1
.xdata$x:000107E9                 db    0
.xdata$x:000107EA                 db    0
.xdata$x:000107EB                 db    0
.xdata$x:000107EC                 dd offset __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:000107F0                 db    0
.xdata$x:000107F1                 db    0
.xdata$x:000107F2                 db    0
.xdata$x:000107F3                 db    0
.xdata$x:000107F4                 db    0
.xdata$x:000107F5                 db    0
.xdata$x:000107F6                 db    0
.xdata$x:000107F7                 db    0
.xdata$x:000107F8                 db    0
.xdata$x:000107F9                 db    0
.xdata$x:000107FA                 db    0
.xdata$x:000107FB                 db    0
.xdata$x:000107FC                 db    0
.xdata$x:000107FD                 db    0
.xdata$x:000107FE                 db    0
.xdata$x:000107FF                 db    0
.xdata$x:00010800                 db    0
.xdata$x:00010801                 db    0
.xdata$x:00010802                 db    0
.xdata$x:00010803                 db    0
.xdata$x:00010804                 db    0
.xdata$x:00010805                 db    0
.xdata$x:00010806                 db    0
.xdata$x:00010807                 db    0
.xdata$x:00010807 _xdata$x        ends
.xdata$x:00010807
.xdata$x:00010808 ; ===========================================================================
.xdata$x:00010808
.xdata$x:00010808 ; Segment type: Pure data
.xdata$x:00010808 ; Segment permissions: Read
.xdata$x:00010808 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010808                 assume cs:_xdata$x
.xdata$x:00010808                 ;org 10808h
.xdata$x:00010808 ; COMDAT (pick associative to section at 69BC)
.xdata$x:00010808 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00010808                                         ; DATA XREF: .xdata$x:00010818o
.xdata$x:00010809                 db 0FFh
.xdata$x:0001080A                 db 0FFh
.xdata$x:0001080B                 db 0FFh
.xdata$x:0001080C                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00010810 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00010810                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00010811                 db    5
.xdata$x:00010812                 db  93h ; ô
.xdata$x:00010813                 db  19h
.xdata$x:00010814                 db    1
.xdata$x:00010815                 db    0
.xdata$x:00010816                 db    0
.xdata$x:00010817                 db    0
.xdata$x:00010818                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0001081C                 db    0
.xdata$x:0001081D                 db    0
.xdata$x:0001081E                 db    0
.xdata$x:0001081F                 db    0
.xdata$x:00010820                 db    0
.xdata$x:00010821                 db    0
.xdata$x:00010822                 db    0
.xdata$x:00010823                 db    0
.xdata$x:00010824                 db    0
.xdata$x:00010825                 db    0
.xdata$x:00010826                 db    0
.xdata$x:00010827                 db    0
.xdata$x:00010828                 db    0
.xdata$x:00010829                 db    0
.xdata$x:0001082A                 db    0
.xdata$x:0001082B                 db    0
.xdata$x:0001082C                 db    0
.xdata$x:0001082D                 db    0
.xdata$x:0001082E                 db    0
.xdata$x:0001082F                 db    0
.xdata$x:00010830                 db    0
.xdata$x:00010831                 db    0
.xdata$x:00010832                 db    0
.xdata$x:00010833                 db    0
.xdata$x:00010833 _xdata$x        ends
.xdata$x:00010833
.xdata$x:00010834 ; ===========================================================================
.xdata$x:00010834
.xdata$x:00010834 ; Segment type: Pure data
.xdata$x:00010834 ; Segment permissions: Read
.xdata$x:00010834 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010834                 assume cs:_xdata$x
.xdata$x:00010834                 ;org 10834h
.xdata$x:00010834 ; COMDAT (pick associative to section at 6B44)
.xdata$x:00010834 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:00010834                                         ; DATA XREF: .xdata$x:00010844o
.xdata$x:00010835                 db 0FFh
.xdata$x:00010836                 db 0FFh
.xdata$x:00010837                 db 0FFh
.xdata$x:00010838                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0
.xdata$x:0001083C __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0001083C                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z+11o
.xdata$x:0001083D                 db    5
.xdata$x:0001083E                 db  93h ; ô
.xdata$x:0001083F                 db  19h
.xdata$x:00010840                 db    1
.xdata$x:00010841                 db    0
.xdata$x:00010842                 db    0
.xdata$x:00010843                 db    0
.xdata$x:00010844                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.xdata$x:00010848                 align 20h
.xdata$x:00010848 _xdata$x        ends
.xdata$x:00010848
.xdata$x:00010860 ; ===========================================================================
.xdata$x:00010860
.xdata$x:00010860 ; Segment type: Pure data
.xdata$x:00010860 ; Segment permissions: Read
.xdata$x:00010860 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010860                 assume cs:_xdata$x
.xdata$x:00010860                 ;org 10860h
.xdata$x:00010860 ; COMDAT (pick associative to section at 9C1C)
.xdata$x:00010860 __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db 0FFh
.xdata$x:00010860                                         ; DATA XREF: .xdata$x:00010870o
.xdata$x:00010861                 db 0FFh
.xdata$x:00010862                 db 0FFh
.xdata$x:00010863                 db 0FFh
.xdata$x:00010864                 dd offset __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0
.xdata$x:00010868 __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db  22h ; "
.xdata$x:00010868                                         ; DATA XREF: __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z+11o
.xdata$x:00010869                 db    5
.xdata$x:0001086A                 db  93h ; ô
.xdata$x:0001086B                 db  19h
.xdata$x:0001086C                 db    1
.xdata$x:0001086D                 db    0
.xdata$x:0001086E                 db    0
.xdata$x:0001086F                 db    0
.xdata$x:00010870                 dd offset __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.xdata$x:00010874                 db    0
.xdata$x:00010875                 db    0
.xdata$x:00010876                 db    0
.xdata$x:00010877                 db    0
.xdata$x:00010878                 db    0
.xdata$x:00010879                 db    0
.xdata$x:0001087A                 db    0
.xdata$x:0001087B                 db    0
.xdata$x:0001087C                 db    0
.xdata$x:0001087D                 db    0
.xdata$x:0001087E                 db    0
.xdata$x:0001087F                 db    0
.xdata$x:00010880                 db    0
.xdata$x:00010881                 db    0
.xdata$x:00010882                 db    0
.xdata$x:00010883                 db    0
.xdata$x:00010884                 db    0
.xdata$x:00010885                 db    0
.xdata$x:00010886                 db    0
.xdata$x:00010887                 db    0
.xdata$x:00010888                 db    0
.xdata$x:00010889                 db    0
.xdata$x:0001088A                 db    0
.xdata$x:0001088B                 db    0
.xdata$x:0001088B _xdata$x        ends
.xdata$x:0001088B
.xdata$x:0001088C ; ===========================================================================
.xdata$x:0001088C
.xdata$x:0001088C ; Segment type: Pure data
.xdata$x:0001088C ; Segment permissions: Read
.xdata$x:0001088C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001088C                 assume cs:_xdata$x
.xdata$x:0001088C                 ;org 1088Ch
.xdata$x:0001088C ; COMDAT (pick associative to section at 86CC)
.xdata$x:0001088C __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0001088C                                         ; DATA XREF: .xdata$x:0001089Co
.xdata$x:0001088D                 db 0FFh
.xdata$x:0001088E                 db 0FFh
.xdata$x:0001088F                 db 0FFh
.xdata$x:00010890                 dd offset __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00010894 __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00010894                                         ; DATA XREF: __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00010895                 db    5
.xdata$x:00010896                 db  93h ; ô
.xdata$x:00010897                 db  19h
.xdata$x:00010898                 db    1
.xdata$x:00010899                 db    0
.xdata$x:0001089A                 db    0
.xdata$x:0001089B                 db    0
.xdata$x:0001089C                 dd offset __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:000108A0                 db    0
.xdata$x:000108A1                 db    0
.xdata$x:000108A2                 db    0
.xdata$x:000108A3                 db    0
.xdata$x:000108A4                 db    0
.xdata$x:000108A5                 db    0
.xdata$x:000108A6                 db    0
.xdata$x:000108A7                 db    0
.xdata$x:000108A8                 db    0
.xdata$x:000108A9                 db    0
.xdata$x:000108AA                 db    0
.xdata$x:000108AB                 db    0
.xdata$x:000108AC                 db    0
.xdata$x:000108AD                 db    0
.xdata$x:000108AE                 db    0
.xdata$x:000108AF                 db    0
.xdata$x:000108B0                 db    0
.xdata$x:000108B1                 db    0
.xdata$x:000108B2                 db    0
.xdata$x:000108B3                 db    0
.xdata$x:000108B4                 db    0
.xdata$x:000108B5                 db    0
.xdata$x:000108B6                 db    0
.xdata$x:000108B7                 db    0
.xdata$x:000108B7 _xdata$x        ends
.xdata$x:000108B7
.xdata$x:000108B8 ; ===========================================================================
.xdata$x:000108B8
.xdata$x:000108B8 ; Segment type: Pure data
.xdata$x:000108B8 ; Segment permissions: Read
.xdata$x:000108B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000108B8                 assume cs:_xdata$x
.xdata$x:000108B8                 ;org 108B8h
.xdata$x:000108B8 ; COMDAT (pick associative to section at 6ACC)
.xdata$x:000108B8 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:000108B8                                         ; DATA XREF: .xdata$x:000108C8o
.xdata$x:000108B9                 db 0FFh
.xdata$x:000108BA                 db 0FFh
.xdata$x:000108BB                 db 0FFh
.xdata$x:000108BC                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:000108C0 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:000108C0                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:000108C1                 db    5
.xdata$x:000108C2                 db  93h ; ô
.xdata$x:000108C3                 db  19h
.xdata$x:000108C4                 db    1
.xdata$x:000108C5                 db    0
.xdata$x:000108C6                 db    0
.xdata$x:000108C7                 db    0
.xdata$x:000108C8                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:000108CC                 db    0
.xdata$x:000108CD                 db    0
.xdata$x:000108CE                 db    0
.xdata$x:000108CF                 db    0
.xdata$x:000108D0                 db    0
.xdata$x:000108D1                 db    0
.xdata$x:000108D2                 db    0
.xdata$x:000108D3                 db    0
.xdata$x:000108D4                 db    0
.xdata$x:000108D5                 db    0
.xdata$x:000108D6                 db    0
.xdata$x:000108D7                 db    0
.xdata$x:000108D8                 db    0
.xdata$x:000108D9                 db    0
.xdata$x:000108DA                 db    0
.xdata$x:000108DB                 db    0
.xdata$x:000108DC                 db    0
.xdata$x:000108DD                 db    0
.xdata$x:000108DE                 db    0
.xdata$x:000108DF                 db    0
.xdata$x:000108E0                 db    0
.xdata$x:000108E1                 db    0
.xdata$x:000108E2                 db    0
.xdata$x:000108E3                 db    0
.xdata$x:000108E3 _xdata$x        ends
.xdata$x:000108E3
.xdata$x:000108E4 ; ===========================================================================
.xdata$x:000108E4
.xdata$x:000108E4 ; Segment type: Pure data
.xdata$x:000108E4 ; Segment permissions: Read
.xdata$x:000108E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000108E4                 assume cs:_xdata$x
.xdata$x:000108E4                 ;org 108E4h
.xdata$x:000108E4 ; COMDAT (pick associative to section at 5950)
.xdata$x:000108E4 __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:000108E4                                         ; DATA XREF: __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z+11o
.xdata$x:000108E5                 db    5
.xdata$x:000108E6                 db  93h ; ô
.xdata$x:000108E7                 db  19h
.xdata$x:000108E8                 db  0Ah
.xdata$x:000108E9                 db    0
.xdata$x:000108EA                 db    0
.xdata$x:000108EB                 db    0
.xdata$x:000108EC                 dd offset __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.xdata$x:000108F0                 db    0
.xdata$x:000108F1                 db    0
.xdata$x:000108F2                 db    0
.xdata$x:000108F3                 db    0
.xdata$x:000108F4                 db    0
.xdata$x:000108F5                 db    0
.xdata$x:000108F6                 db    0
.xdata$x:000108F7                 db    0
.xdata$x:000108F8                 db    0
.xdata$x:000108F9                 db    0
.xdata$x:000108FA                 db    0
.xdata$x:000108FB                 db    0
.xdata$x:000108FC                 db    0
.xdata$x:000108FD                 db    0
.xdata$x:000108FE                 db    0
.xdata$x:000108FF                 db    0
.xdata$x:00010900                 db    0
.xdata$x:00010901                 db    0
.xdata$x:00010902                 db    0
.xdata$x:00010903                 db    0
.xdata$x:00010904                 db    0
.xdata$x:00010905                 db    0
.xdata$x:00010906                 db    0
.xdata$x:00010907                 db    0
.xdata$x:00010908 __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db 0FFh
.xdata$x:00010908                                         ; DATA XREF: .xdata$x:000108ECo
.xdata$x:00010909                 db 0FFh
.xdata$x:0001090A                 db 0FFh
.xdata$x:0001090B                 db 0FFh
.xdata$x:0001090C                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
.xdata$x:00010910                 db    0
.xdata$x:00010911                 db    0
.xdata$x:00010912                 db    0
.xdata$x:00010913                 db    0
.xdata$x:00010914                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
.xdata$x:00010918                 db    1
.xdata$x:00010919                 db    0
.xdata$x:0001091A                 db    0
.xdata$x:0001091B                 db    0
.xdata$x:0001091C                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
.xdata$x:00010920                 db    2
.xdata$x:00010921                 db    0
.xdata$x:00010922                 db    0
.xdata$x:00010923                 db    0
.xdata$x:00010924                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
.xdata$x:00010928                 db    3
.xdata$x:00010929                 db    0
.xdata$x:0001092A                 db    0
.xdata$x:0001092B                 db    0
.xdata$x:0001092C                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:00010930                 db    4
.xdata$x:00010931                 db    0
.xdata$x:00010932                 db    0
.xdata$x:00010933                 db    0
.xdata$x:00010934                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5
.xdata$x:00010938                 db    5
.xdata$x:00010939                 db    0
.xdata$x:0001093A                 db    0
.xdata$x:0001093B                 db    0
.xdata$x:0001093C                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:00010940                 db    6
.xdata$x:00010941                 db    0
.xdata$x:00010942                 db    0
.xdata$x:00010943                 db    0
.xdata$x:00010944                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7
.xdata$x:00010948                 db    1
.xdata$x:00010949                 db    0
.xdata$x:0001094A                 db    0
.xdata$x:0001094B                 db    0
.xdata$x:0001094C                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:00010950                 db    8
.xdata$x:00010951                 db    0
.xdata$x:00010952                 db    0
.xdata$x:00010953                 db    0
.xdata$x:00010954                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:00010954 _xdata$x        ends
.xdata$x:00010954
.xdata$x:00010958 ; ===========================================================================
.xdata$x:00010958
.xdata$x:00010958 ; Segment type: Pure data
.xdata$x:00010958 ; Segment permissions: Read
.xdata$x:00010958 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010958                 assume cs:_xdata$x
.xdata$x:00010958                 ;org 10958h
.xdata$x:00010958 ; COMDAT (pick associative to section at 4C8C)
.xdata$x:00010958 __unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@ db 0FFh
.xdata$x:00010958                                         ; DATA XREF: .xdata$x:00010980o
.xdata$x:00010959                 db 0FFh
.xdata$x:0001095A                 db 0FFh
.xdata$x:0001095B                 db 0FFh
.xdata$x:0001095C                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$0
.xdata$x:00010960                 db    0
.xdata$x:00010961                 db    0
.xdata$x:00010962                 db    0
.xdata$x:00010963                 db    0
.xdata$x:00010964                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$1
.xdata$x:00010968                 db    1
.xdata$x:00010969                 db    0
.xdata$x:0001096A                 db    0
.xdata$x:0001096B                 db    0
.xdata$x:0001096C                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$2
.xdata$x:00010970                 db    2
.xdata$x:00010971                 db    0
.xdata$x:00010972                 db    0
.xdata$x:00010973                 db    0
.xdata$x:00010974                 dd offset __unwindfunclet$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z$3
.xdata$x:00010978 __ehfuncinfo$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@ db  22h ; "
.xdata$x:00010978                                         ; DATA XREF: __ehhandler$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z+11o
.xdata$x:00010979                 db    5
.xdata$x:0001097A                 db  93h ; ô
.xdata$x:0001097B                 db  19h
.xdata$x:0001097C                 db    4
.xdata$x:0001097D                 db    0
.xdata$x:0001097E                 db    0
.xdata$x:0001097F                 db    0
.xdata$x:00010980                 dd offset __unwindtable$??$_Ucopy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@0PAV21@@Z
.xdata$x:00010984                 db    0
.xdata$x:00010985                 db    0
.xdata$x:00010986                 db    0
.xdata$x:00010987                 db    0
.xdata$x:00010988                 db    0
.xdata$x:00010989                 db    0
.xdata$x:0001098A                 db    0
.xdata$x:0001098B                 db    0
.xdata$x:0001098C                 db    0
.xdata$x:0001098D                 db    0
.xdata$x:0001098E                 db    0
.xdata$x:0001098F                 db    0
.xdata$x:00010990                 db    0
.xdata$x:00010991                 db    0
.xdata$x:00010992                 db    0
.xdata$x:00010993                 db    0
.xdata$x:00010994                 db    0
.xdata$x:00010995                 db    0
.xdata$x:00010996                 db    0
.xdata$x:00010997                 db    0
.xdata$x:00010998                 db    0
.xdata$x:00010999                 db    0
.xdata$x:0001099A                 db    0
.xdata$x:0001099B                 db    0
.xdata$x:0001099B _xdata$x        ends
.xdata$x:0001099B
.xdata$x:0001099C ; ===========================================================================
.xdata$x:0001099C
.xdata$x:0001099C ; Segment type: Pure data
.xdata$x:0001099C ; Segment permissions: Read
.xdata$x:0001099C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0001099C                 assume cs:_xdata$x
.xdata$x:0001099C                 ;org 1099Ch
.xdata$x:0001099C ; COMDAT (pick associative to section at 6010)
.xdata$x:0001099C __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:0001099C                                         ; DATA XREF: .xdata$x:000109ACo
.xdata$x:0001099D                 db 0FFh
.xdata$x:0001099E                 db 0FFh
.xdata$x:0001099F                 db 0FFh
.xdata$x:000109A0                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:000109A4 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:000109A4                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:000109A5                 db    5
.xdata$x:000109A6                 db  93h ; ô
.xdata$x:000109A7                 db  19h
.xdata$x:000109A8                 db    1
.xdata$x:000109A9                 db    0
.xdata$x:000109AA                 db    0
.xdata$x:000109AB                 db    0
.xdata$x:000109AC                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:000109B0                 db    0
.xdata$x:000109B1                 db    0
.xdata$x:000109B2                 db    0
.xdata$x:000109B3                 db    0
.xdata$x:000109B4                 db    0
.xdata$x:000109B5                 db    0
.xdata$x:000109B6                 db    0
.xdata$x:000109B7                 db    0
.xdata$x:000109B8                 db    0
.xdata$x:000109B9                 db    0
.xdata$x:000109BA                 db    0
.xdata$x:000109BB                 db    0
.xdata$x:000109BC                 db    0
.xdata$x:000109BD                 db    0
.xdata$x:000109BE                 db    0
.xdata$x:000109BF                 db    0
.xdata$x:000109C0                 db    0
.xdata$x:000109C1                 db    0
.xdata$x:000109C2                 db    0
.xdata$x:000109C3                 db    0
.xdata$x:000109C4                 db    0
.xdata$x:000109C5                 db    0
.xdata$x:000109C6                 db    0
.xdata$x:000109C7                 db    0
.xdata$x:000109C7 _xdata$x        ends
.xdata$x:000109C7
.xdata$x:000109C8 ; ===========================================================================
.xdata$x:000109C8
.xdata$x:000109C8 ; Segment type: Pure data
.xdata$x:000109C8 ; Segment permissions: Read
.xdata$x:000109C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000109C8                 assume cs:_xdata$x
.xdata$x:000109C8                 ;org 109C8h
.xdata$x:000109C8 ; COMDAT (pick associative to section at 5660)
.xdata$x:000109C8 __unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@s db 0FFh
.xdata$x:000109C8                                         ; DATA XREF: .xdata$x:000109F0o
.xdata$x:000109C9                 db 0FFh
.xdata$x:000109CA                 db 0FFh
.xdata$x:000109CB                 db 0FFh
.xdata$x:000109CC                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$0
.xdata$x:000109D0                 db    0
.xdata$x:000109D1                 db    0
.xdata$x:000109D2                 db    0
.xdata$x:000109D3                 db    0
.xdata$x:000109D4                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$1
.xdata$x:000109D8                 db    1
.xdata$x:000109D9                 db    0
.xdata$x:000109DA                 db    0
.xdata$x:000109DB                 db    0
.xdata$x:000109DC                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$2
.xdata$x:000109E0                 db    1
.xdata$x:000109E1                 db    0
.xdata$x:000109E2                 db    0
.xdata$x:000109E3                 db    0
.xdata$x:000109E4                 dd offset __unwindfunclet$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z$3
.xdata$x:000109E8 __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@st db  22h ; "
.xdata$x:000109E8                                         ; DATA XREF: __ehhandler$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z+11o
.xdata$x:000109E9                 db    5
.xdata$x:000109EA                 db  93h ; ô
.xdata$x:000109EB                 db  19h
.xdata$x:000109EC                 db    4
.xdata$x:000109ED                 db    0
.xdata$x:000109EE                 db    0
.xdata$x:000109EF                 db    0
.xdata$x:000109F0                 dd offset __unwindtable$??$_Uninitialized_copy@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.xdata$x:000109F4                 db    0
.xdata$x:000109F5                 db    0
.xdata$x:000109F6                 db    0
.xdata$x:000109F7                 db    0
.xdata$x:000109F8                 db    0
.xdata$x:000109F9                 db    0
.xdata$x:000109FA                 db    0
.xdata$x:000109FB                 db    0
.xdata$x:000109FC                 db    0
.xdata$x:000109FD                 db    0
.xdata$x:000109FE                 db    0
.xdata$x:000109FF                 db    0
.xdata$x:00010A00                 db    0
.xdata$x:00010A01                 db    0
.xdata$x:00010A02                 db    0
.xdata$x:00010A03                 db    0
.xdata$x:00010A04                 db    0
.xdata$x:00010A05                 db    0
.xdata$x:00010A06                 db    0
.xdata$x:00010A07                 db    0
.xdata$x:00010A08                 db    0
.xdata$x:00010A09                 db    0
.xdata$x:00010A0A                 db    0
.xdata$x:00010A0B                 db    0
.xdata$x:00010A0B _xdata$x        ends
.xdata$x:00010A0B
.xdata$x:00010A0C ; ===========================================================================
.xdata$x:00010A0C
.xdata$x:00010A0C ; Segment type: Pure data
.xdata$x:00010A0C ; Segment permissions: Read
.xdata$x:00010A0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A0C                 assume cs:_xdata$x
.xdata$x:00010A0C                 ;org 10A0Ch
.xdata$x:00010A0C ; COMDAT (pick associative to section at 4EB8)
.xdata$x:00010A0C __unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z db 0FFh
.xdata$x:00010A0C                                         ; DATA XREF: .xdata$x:00010A1Co
.xdata$x:00010A0D                 db 0FFh
.xdata$x:00010A0E                 db 0FFh
.xdata$x:00010A0F                 db 0FFh
.xdata$x:00010A10                 dd offset __unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z$0
.xdata$x:00010A14 __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z db  22h ; "
.xdata$x:00010A14                                         ; DATA XREF: __ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z+11o
.xdata$x:00010A15                 db    5
.xdata$x:00010A16                 db  93h ; ô
.xdata$x:00010A17                 db  19h
.xdata$x:00010A18                 db    1
.xdata$x:00010A19                 db    0
.xdata$x:00010A1A                 db    0
.xdata$x:00010A1B                 db    0
.xdata$x:00010A1C                 dd offset __unwindtable$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@@Z
.xdata$x:00010A20                 db    0
.xdata$x:00010A21                 db    0
.xdata$x:00010A22                 db    0
.xdata$x:00010A23                 db    0
.xdata$x:00010A24                 db    0
.xdata$x:00010A25                 db    0
.xdata$x:00010A26                 db    0
.xdata$x:00010A27                 db    0
.xdata$x:00010A28                 db    0
.xdata$x:00010A29                 db    0
.xdata$x:00010A2A                 db    0
.xdata$x:00010A2B                 db    0
.xdata$x:00010A2C                 db    0
.xdata$x:00010A2D                 db    0
.xdata$x:00010A2E                 db    0
.xdata$x:00010A2F                 db    0
.xdata$x:00010A30                 db    0
.xdata$x:00010A31                 db    0
.xdata$x:00010A32                 db    0
.xdata$x:00010A33                 db    0
.xdata$x:00010A34                 db    0
.xdata$x:00010A35                 db    0
.xdata$x:00010A36                 db    0
.xdata$x:00010A37                 db    0
.xdata$x:00010A37 _xdata$x        ends
.xdata$x:00010A37
.xdata$x:00010A38 ; ===========================================================================
.xdata$x:00010A38
.xdata$x:00010A38 ; Segment type: Pure data
.xdata$x:00010A38 ; Segment permissions: Read
.xdata$x:00010A38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A38                 assume cs:_xdata$x
.xdata$x:00010A38                 ;org 10A38h
.xdata$x:00010A38 ; COMDAT (pick associative to section at 63AC)
.xdata$x:00010A38 __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db 0FFh
.xdata$x:00010A38                                         ; DATA XREF: .xdata$x:00010A48o
.xdata$x:00010A39                 db 0FFh
.xdata$x:00010A3A                 db 0FFh
.xdata$x:00010A3B                 db 0FFh
.xdata$x:00010A3C                 dd offset __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0
.xdata$x:00010A40 __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db  22h ; "
.xdata$x:00010A40                                         ; DATA XREF: __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z+11o
.xdata$x:00010A41                 db    5
.xdata$x:00010A42                 db  93h ; ô
.xdata$x:00010A43                 db  19h
.xdata$x:00010A44                 db    1
.xdata$x:00010A45                 db    0
.xdata$x:00010A46                 db    0
.xdata$x:00010A47                 db    0
.xdata$x:00010A48                 dd offset __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.xdata$x:00010A4C                 db    0
.xdata$x:00010A4D                 db    0
.xdata$x:00010A4E                 db    0
.xdata$x:00010A4F                 db    0
.xdata$x:00010A50                 db    0
.xdata$x:00010A51                 db    0
.xdata$x:00010A52                 db    0
.xdata$x:00010A53                 db    0
.xdata$x:00010A54                 db    0
.xdata$x:00010A55                 db    0
.xdata$x:00010A56                 db    0
.xdata$x:00010A57                 db    0
.xdata$x:00010A58                 db    0
.xdata$x:00010A59                 db    0
.xdata$x:00010A5A                 db    0
.xdata$x:00010A5B                 db    0
.xdata$x:00010A5C                 db    0
.xdata$x:00010A5D                 db    0
.xdata$x:00010A5E                 db    0
.xdata$x:00010A5F                 db    0
.xdata$x:00010A60                 db    0
.xdata$x:00010A61                 db    0
.xdata$x:00010A62                 db    0
.xdata$x:00010A63                 db    0
.xdata$x:00010A63 _xdata$x        ends
.xdata$x:00010A63
.xdata$x:00010A64 ; ===========================================================================
.xdata$x:00010A64
.xdata$x:00010A64 ; Segment type: Pure data
.xdata$x:00010A64 ; Segment permissions: Read
.xdata$x:00010A64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A64                 assume cs:_xdata$x
.xdata$x:00010A64                 ;org 10A64h
.xdata$x:00010A64 ; COMDAT (pick associative to section at 5C10)
.xdata$x:00010A64 __unwindtable$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z db 0FFh
.xdata$x:00010A64                                         ; DATA XREF: .xdata$x:00010A74o
.xdata$x:00010A65                 db 0FFh
.xdata$x:00010A66                 db 0FFh
.xdata$x:00010A67                 db 0FFh
.xdata$x:00010A68                 dd offset __unwindfunclet$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z$0
.xdata$x:00010A6C __ehfuncinfo$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z db  22h ; "
.xdata$x:00010A6C                                         ; DATA XREF: __ehhandler$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z+11o
.xdata$x:00010A6D                 db    5
.xdata$x:00010A6E                 db  93h ; ô
.xdata$x:00010A6F                 db  19h
.xdata$x:00010A70                 db    1
.xdata$x:00010A71                 db    0
.xdata$x:00010A72                 db    0
.xdata$x:00010A73                 db    0
.xdata$x:00010A74                 dd offset __unwindtable$??$construct@PAVFunctionParser@@PAV1@@?$allocator@PAVFunctionParser@@@std@@QAEXPAPAVFunctionParser@@$$QAPAV2@@Z
.xdata$x:00010A78                 db    0
.xdata$x:00010A79                 db    0
.xdata$x:00010A7A                 db    0
.xdata$x:00010A7B                 db    0
.xdata$x:00010A7C                 db    0
.xdata$x:00010A7D                 db    0
.xdata$x:00010A7E                 db    0
.xdata$x:00010A7F                 db    0
.xdata$x:00010A80                 db    0
.xdata$x:00010A81                 db    0
.xdata$x:00010A82                 db    0
.xdata$x:00010A83                 db    0
.xdata$x:00010A84                 db    0
.xdata$x:00010A85                 db    0
.xdata$x:00010A86                 db    0
.xdata$x:00010A87                 db    0
.xdata$x:00010A88                 db    0
.xdata$x:00010A89                 db    0
.xdata$x:00010A8A                 db    0
.xdata$x:00010A8B                 db    0
.xdata$x:00010A8C                 db    0
.xdata$x:00010A8D                 db    0
.xdata$x:00010A8E                 db    0
.xdata$x:00010A8F                 db    0
.xdata$x:00010A8F _xdata$x        ends
.xdata$x:00010A8F
.xdata$x:00010A90 ; ===========================================================================
.xdata$x:00010A90
.xdata$x:00010A90 ; Segment type: Pure data
.xdata$x:00010A90 ; Segment permissions: Read
.xdata$x:00010A90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010A90                 assume cs:_xdata$x
.xdata$x:00010A90                 ;org 10A90h
.xdata$x:00010A90 ; COMDAT (pick associative to section at 5F10)
.xdata$x:00010A90 __unwindtable$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z db 0FFh
.xdata$x:00010A90                                         ; DATA XREF: .xdata$x:00010AA0o
.xdata$x:00010A91                 db 0FFh
.xdata$x:00010A92                 db 0FFh
.xdata$x:00010A93                 db 0FFh
.xdata$x:00010A94                 dd offset __unwindfunclet$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z$0
.xdata$x:00010A98 __ehfuncinfo$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z db  22h ; "
.xdata$x:00010A98                                         ; DATA XREF: __ehhandler$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z+11o
.xdata$x:00010A99                 db    5
.xdata$x:00010A9A                 db  93h ; ô
.xdata$x:00010A9B                 db  19h
.xdata$x:00010A9C                 db    1
.xdata$x:00010A9D                 db    0
.xdata$x:00010A9E                 db    0
.xdata$x:00010A9F                 db    0
.xdata$x:00010AA0                 dd offset __unwindtable$??$construct@UAssociationInfo@@U1@@?$allocator@UAssociationInfo@@@std@@QAEXPAUAssociationInfo@@$$QAU2@@Z
.xdata$x:00010AA4                 db    0
.xdata$x:00010AA5                 db    0
.xdata$x:00010AA6                 db    0
.xdata$x:00010AA7                 db    0
.xdata$x:00010AA8                 db    0
.xdata$x:00010AA9                 db    0
.xdata$x:00010AAA                 db    0
.xdata$x:00010AAB                 db    0
.xdata$x:00010AAC                 db    0
.xdata$x:00010AAD                 db    0
.xdata$x:00010AAE                 db    0
.xdata$x:00010AAF                 db    0
.xdata$x:00010AB0                 db    0
.xdata$x:00010AB1                 db    0
.xdata$x:00010AB2                 db    0
.xdata$x:00010AB3                 db    0
.xdata$x:00010AB4                 db    0
.xdata$x:00010AB5                 db    0
.xdata$x:00010AB6                 db    0
.xdata$x:00010AB7                 db    0
.xdata$x:00010AB8                 db    0
.xdata$x:00010AB9                 db    0
.xdata$x:00010ABA                 db    0
.xdata$x:00010ABB                 db    0
.xdata$x:00010ABB _xdata$x        ends
.xdata$x:00010ABB
.xdata$x:00010ABC ; ===========================================================================
.xdata$x:00010ABC
.xdata$x:00010ABC ; Segment type: Pure data
.xdata$x:00010ABC ; Segment permissions: Read
.xdata$x:00010ABC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010ABC                 assume cs:_xdata$x
.xdata$x:00010ABC                 ;org 10ABCh
.xdata$x:00010ABC ; COMDAT (pick associative to section at 6114)
.xdata$x:00010ABC __unwindtable$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z db 0FFh
.xdata$x:00010ABC                                         ; DATA XREF: .xdata$x:00010ACCo
.xdata$x:00010ABD                 db 0FFh
.xdata$x:00010ABE                 db 0FFh
.xdata$x:00010ABF                 db 0FFh
.xdata$x:00010AC0                 dd offset __unwindfunclet$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z$0
.xdata$x:00010AC4 __ehfuncinfo$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z db  22h ; "
.xdata$x:00010AC4                                         ; DATA XREF: __ehhandler$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z+11o
.xdata$x:00010AC5                 db    5
.xdata$x:00010AC6                 db  93h ; ô
.xdata$x:00010AC7                 db  19h
.xdata$x:00010AC8                 db    1
.xdata$x:00010AC9                 db    0
.xdata$x:00010ACA                 db    0
.xdata$x:00010ACB                 db    0
.xdata$x:00010ACC                 dd offset __unwindtable$??$construct@UfoundInfo@@AAU1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@AAU2@@Z
.xdata$x:00010AD0                 db    0
.xdata$x:00010AD1                 db    0
.xdata$x:00010AD2                 db    0
.xdata$x:00010AD3                 db    0
.xdata$x:00010AD4                 db    0
.xdata$x:00010AD5                 db    0
.xdata$x:00010AD6                 db    0
.xdata$x:00010AD7                 db    0
.xdata$x:00010AD8                 db    0
.xdata$x:00010AD9                 db    0
.xdata$x:00010ADA                 db    0
.xdata$x:00010ADB                 db    0
.xdata$x:00010ADC                 db    0
.xdata$x:00010ADD                 db    0
.xdata$x:00010ADE                 db    0
.xdata$x:00010ADF                 db    0
.xdata$x:00010AE0                 db    0
.xdata$x:00010AE1                 db    0
.xdata$x:00010AE2                 db    0
.xdata$x:00010AE3                 db    0
.xdata$x:00010AE4                 db    0
.xdata$x:00010AE5                 db    0
.xdata$x:00010AE6                 db    0
.xdata$x:00010AE7                 db    0
.xdata$x:00010AE7 _xdata$x        ends
.xdata$x:00010AE7
.xdata$x:00010AE8 ; ===========================================================================
.xdata$x:00010AE8
.xdata$x:00010AE8 ; Segment type: Pure data
.xdata$x:00010AE8 ; Segment permissions: Read
.xdata$x:00010AE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010AE8                 assume cs:_xdata$x
.xdata$x:00010AE8                 ;org 10AE8h
.xdata$x:00010AE8 ; COMDAT (pick associative to section at 5E10)
.xdata$x:00010AE8 __unwindtable$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z db 0FFh
.xdata$x:00010AE8                                         ; DATA XREF: .xdata$x:00010AF8o
.xdata$x:00010AE9                 db 0FFh
.xdata$x:00010AEA                 db 0FFh
.xdata$x:00010AEB                 db 0FFh
.xdata$x:00010AEC                 dd offset __unwindfunclet$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z$0
.xdata$x:00010AF0 __ehfuncinfo$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z db  22h ; "
.xdata$x:00010AF0                                         ; DATA XREF: __ehhandler$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z+11o
.xdata$x:00010AF1                 db    5
.xdata$x:00010AF2                 db  93h ; ô
.xdata$x:00010AF3                 db  19h
.xdata$x:00010AF4                 db    1
.xdata$x:00010AF5                 db    0
.xdata$x:00010AF6                 db    0
.xdata$x:00010AF7                 db    0
.xdata$x:00010AF8                 dd offset __unwindtable$??$construct@U?$pair@HH@std@@U12@@?$allocator@U?$pair@HH@std@@@std@@QAEXPAU?$pair@HH@1@$$QAU21@@Z
.xdata$x:00010AFC                 db    0
.xdata$x:00010AFD                 db    0
.xdata$x:00010AFE                 db    0
.xdata$x:00010AFF                 db    0
.xdata$x:00010B00                 db    0
.xdata$x:00010B01                 db    0
.xdata$x:00010B02                 db    0
.xdata$x:00010B03                 db    0
.xdata$x:00010B04                 db    0
.xdata$x:00010B05                 db    0
.xdata$x:00010B06                 db    0
.xdata$x:00010B07                 db    0
.xdata$x:00010B08                 db    0
.xdata$x:00010B09                 db    0
.xdata$x:00010B0A                 db    0
.xdata$x:00010B0B                 db    0
.xdata$x:00010B0C                 db    0
.xdata$x:00010B0D                 db    0
.xdata$x:00010B0E                 db    0
.xdata$x:00010B0F                 db    0
.xdata$x:00010B10                 db    0
.xdata$x:00010B11                 db    0
.xdata$x:00010B12                 db    0
.xdata$x:00010B13                 db    0
.xdata$x:00010B13 _xdata$x        ends
.xdata$x:00010B13
.xdata$x:00010B14 ; ===========================================================================
.xdata$x:00010B14
.xdata$x:00010B14 ; Segment type: Pure data
.xdata$x:00010B14 ; Segment permissions: Read
.xdata$x:00010B14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010B14                 assume cs:_xdata$x
.xdata$x:00010B14                 ;org 10B14h
.xdata$x:00010B14 ; COMDAT (pick associative to section at 5B10)
.xdata$x:00010B14 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:00010B14                                         ; DATA XREF: .xdata$x:00010B24o
.xdata$x:00010B15                 db 0FFh
.xdata$x:00010B16                 db 0FFh
.xdata$x:00010B17                 db 0FFh
.xdata$x:00010B18                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:00010B1C __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:00010B1C                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:00010B1D                 db    5
.xdata$x:00010B1E                 db  93h ; ô
.xdata$x:00010B1F                 db  19h
.xdata$x:00010B20                 db    1
.xdata$x:00010B21                 db    0
.xdata$x:00010B22                 db    0
.xdata$x:00010B23                 db    0
.xdata$x:00010B24                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:00010B28                 align 20h
.xdata$x:00010B28 _xdata$x        ends
.xdata$x:00010B28
.xdata$x:00010B40 ; ===========================================================================
.xdata$x:00010B40
.xdata$x:00010B40 ; Segment type: Pure data
.xdata$x:00010B40 ; Segment permissions: Read
.xdata$x:00010B40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010B40                 assume cs:_xdata$x
.xdata$x:00010B40                 ;org 10B40h
.xdata$x:00010B40 ; COMDAT (pick associative to section at 5D10)
.xdata$x:00010B40 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:00010B40                                         ; DATA XREF: .xdata$x:00010B50o
.xdata$x:00010B41                 db 0FFh
.xdata$x:00010B42                 db 0FFh
.xdata$x:00010B43                 db 0FFh
.xdata$x:00010B44                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:00010B48 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:00010B48                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:00010B49                 db    5
.xdata$x:00010B4A                 db  93h ; ô
.xdata$x:00010B4B                 db  19h
.xdata$x:00010B4C                 db    1
.xdata$x:00010B4D                 db    0
.xdata$x:00010B4E                 db    0
.xdata$x:00010B4F                 db    0
.xdata$x:00010B50                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:00010B54                 db    0
.xdata$x:00010B55                 db    0
.xdata$x:00010B56                 db    0
.xdata$x:00010B57                 db    0
.xdata$x:00010B58                 db    0
.xdata$x:00010B59                 db    0
.xdata$x:00010B5A                 db    0
.xdata$x:00010B5B                 db    0
.xdata$x:00010B5C                 db    0
.xdata$x:00010B5D                 db    0
.xdata$x:00010B5E                 db    0
.xdata$x:00010B5F                 db    0
.xdata$x:00010B60                 db    0
.xdata$x:00010B61                 db    0
.xdata$x:00010B62                 db    0
.xdata$x:00010B63                 db    0
.xdata$x:00010B64                 db    0
.xdata$x:00010B65                 db    0
.xdata$x:00010B66                 db    0
.xdata$x:00010B67                 db    0
.xdata$x:00010B68                 db    0
.xdata$x:00010B69                 db    0
.xdata$x:00010B6A                 db    0
.xdata$x:00010B6B                 db    0
.xdata$x:00010B6B _xdata$x        ends
.xdata$x:00010B6B
.xdata$x:00010B6C ; ===========================================================================
.xdata$x:00010B6C
.xdata$x:00010B6C ; Segment type: Pure data
.xdata$x:00010B6C ; Segment permissions: Read
.xdata$x:00010B6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010B6C                 assume cs:_xdata$x
.xdata$x:00010B6C                 ;org 10B6Ch
.xdata$x:00010B6C ; COMDAT (pick associative to section at 4F6C)
.xdata$x:00010B6C __catchsym$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:00010B6C                                         ; DATA XREF: .xdata$x:00010B9Co
.xdata$x:00010B6D                 db    0
.xdata$x:00010B6E                 db    0
.xdata$x:00010B6F                 db    0
.xdata$x:00010B70                 db    0
.xdata$x:00010B71                 db    0
.xdata$x:00010B72                 db    0
.xdata$x:00010B73                 db    0
.xdata$x:00010B74                 db    0
.xdata$x:00010B75                 db    0
.xdata$x:00010B76                 db    0
.xdata$x:00010B77                 db    0
.xdata$x:00010B78                 dd offset __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:00010B7C __unwindtable$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:00010B7C                                         ; DATA XREF: .xdata$x:00010BA8o
.xdata$x:00010B7D                 db 0FFh
.xdata$x:00010B7E                 db 0FFh
.xdata$x:00010B7F                 db 0FFh
.xdata$x:00010B80                 db    0
.xdata$x:00010B81                 db    0
.xdata$x:00010B82                 db    0
.xdata$x:00010B83                 db    0
.xdata$x:00010B84                 db 0FFh
.xdata$x:00010B85                 db 0FFh
.xdata$x:00010B86                 db 0FFh
.xdata$x:00010B87                 db 0FFh
.xdata$x:00010B88                 db    0
.xdata$x:00010B89                 db    0
.xdata$x:00010B8A                 db    0
.xdata$x:00010B8B                 db    0
.xdata$x:00010B8C __tryblocktable$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:00010B8C                                         ; DATA XREF: .xdata$x:00010BB0o
.xdata$x:00010B8D                 db    0
.xdata$x:00010B8E                 db    0
.xdata$x:00010B8F                 db    0
.xdata$x:00010B90                 db    0
.xdata$x:00010B91                 db    0
.xdata$x:00010B92                 db    0
.xdata$x:00010B93                 db    0
.xdata$x:00010B94                 db    1
.xdata$x:00010B95                 db    0
.xdata$x:00010B96                 db    0
.xdata$x:00010B97                 db    0
.xdata$x:00010B98                 db    1
.xdata$x:00010B99                 db    0
.xdata$x:00010B9A                 db    0
.xdata$x:00010B9B                 db    0
.xdata$x:00010B9C                 dd offset __catchsym$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:00010BA0 __ehfuncinfo$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:00010BA0                                         ; DATA XREF: __ehhandler$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:00010BA1                 db    5
.xdata$x:00010BA2                 db  93h ; ô
.xdata$x:00010BA3                 db  19h
.xdata$x:00010BA4                 db    2
.xdata$x:00010BA5                 db    0
.xdata$x:00010BA6                 db    0
.xdata$x:00010BA7                 db    0
.xdata$x:00010BA8                 dd offset __unwindtable$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010BAC                 db    1
.xdata$x:00010BAD                 db    0
.xdata$x:00010BAE                 db    0
.xdata$x:00010BAF                 db    0
.xdata$x:00010BB0                 dd offset __tryblocktable$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010BB4                 db    0
.xdata$x:00010BB5                 db    0
.xdata$x:00010BB6                 db    0
.xdata$x:00010BB7                 db    0
.xdata$x:00010BB8                 db    0
.xdata$x:00010BB9                 db    0
.xdata$x:00010BBA                 db    0
.xdata$x:00010BBB                 db    0
.xdata$x:00010BBC                 db    0
.xdata$x:00010BBD                 db    0
.xdata$x:00010BBE                 db    0
.xdata$x:00010BBF                 db    0
.xdata$x:00010BC0                 db    0
.xdata$x:00010BC1                 db    0
.xdata$x:00010BC2                 db    0
.xdata$x:00010BC3                 db    0
.xdata$x:00010BC3 _xdata$x        ends
.xdata$x:00010BC3
.xdata$x:00010BC4 ; ===========================================================================
.xdata$x:00010BC4
.xdata$x:00010BC4 ; Segment type: Pure data
.xdata$x:00010BC4 ; Segment permissions: Read
.xdata$x:00010BC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010BC4                 assume cs:_xdata$x
.xdata$x:00010BC4                 ;org 10BC4h
.xdata$x:00010BC4 ; COMDAT (pick associative to section at 54F4)
.xdata$x:00010BC4 __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:00010BC4                                         ; DATA XREF: .xdata$x:00010BF4o
.xdata$x:00010BC5                 db    0
.xdata$x:00010BC6                 db    0
.xdata$x:00010BC7                 db    0
.xdata$x:00010BC8                 db    0
.xdata$x:00010BC9                 db    0
.xdata$x:00010BCA                 db    0
.xdata$x:00010BCB                 db    0
.xdata$x:00010BCC                 db    0
.xdata$x:00010BCD                 db    0
.xdata$x:00010BCE                 db    0
.xdata$x:00010BCF                 db    0
.xdata$x:00010BD0                 dd offset __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:00010BD4 __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:00010BD4                                         ; DATA XREF: .xdata$x:00010C00o
.xdata$x:00010BD5                 db 0FFh
.xdata$x:00010BD6                 db 0FFh
.xdata$x:00010BD7                 db 0FFh
.xdata$x:00010BD8                 db    0
.xdata$x:00010BD9                 db    0
.xdata$x:00010BDA                 db    0
.xdata$x:00010BDB                 db    0
.xdata$x:00010BDC                 db 0FFh
.xdata$x:00010BDD                 db 0FFh
.xdata$x:00010BDE                 db 0FFh
.xdata$x:00010BDF                 db 0FFh
.xdata$x:00010BE0                 db    0
.xdata$x:00010BE1                 db    0
.xdata$x:00010BE2                 db    0
.xdata$x:00010BE3                 db    0
.xdata$x:00010BE4 __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:00010BE4                                         ; DATA XREF: .xdata$x:00010C08o
.xdata$x:00010BE5                 db    0
.xdata$x:00010BE6                 db    0
.xdata$x:00010BE7                 db    0
.xdata$x:00010BE8                 db    0
.xdata$x:00010BE9                 db    0
.xdata$x:00010BEA                 db    0
.xdata$x:00010BEB                 db    0
.xdata$x:00010BEC                 db    1
.xdata$x:00010BED                 db    0
.xdata$x:00010BEE                 db    0
.xdata$x:00010BEF                 db    0
.xdata$x:00010BF0                 db    1
.xdata$x:00010BF1                 db    0
.xdata$x:00010BF2                 db    0
.xdata$x:00010BF3                 db    0
.xdata$x:00010BF4                 dd offset __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:00010BF8 __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:00010BF8                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:00010BF9                 db    5
.xdata$x:00010BFA                 db  93h ; ô
.xdata$x:00010BFB                 db  19h
.xdata$x:00010BFC                 db    2
.xdata$x:00010BFD                 db    0
.xdata$x:00010BFE                 db    0
.xdata$x:00010BFF                 db    0
.xdata$x:00010C00                 dd offset __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010C04                 db    1
.xdata$x:00010C05                 db    0
.xdata$x:00010C06                 db    0
.xdata$x:00010C07                 db    0
.xdata$x:00010C08                 dd offset __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010C0C                 db    0
.xdata$x:00010C0D                 db    0
.xdata$x:00010C0E                 db    0
.xdata$x:00010C0F                 db    0
.xdata$x:00010C10                 db    0
.xdata$x:00010C11                 db    0
.xdata$x:00010C12                 db    0
.xdata$x:00010C13                 db    0
.xdata$x:00010C14                 db    0
.xdata$x:00010C15                 db    0
.xdata$x:00010C16                 db    0
.xdata$x:00010C17                 db    0
.xdata$x:00010C18                 db    0
.xdata$x:00010C19                 db    0
.xdata$x:00010C1A                 db    0
.xdata$x:00010C1B                 db    0
.xdata$x:00010C1B _xdata$x        ends
.xdata$x:00010C1B
.xdata$x:00010C1C ; ===========================================================================
.xdata$x:00010C1C
.xdata$x:00010C1C ; Segment type: Pure data
.xdata$x:00010C1C ; Segment permissions: Read
.xdata$x:00010C1C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010C1C                 assume cs:_xdata$x
.xdata$x:00010C1C                 ;org 10C1Ch
.xdata$x:00010C1C ; COMDAT (pick associative to section at 5254)
.xdata$x:00010C1C __catchsym$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:00010C1C                                         ; DATA XREF: .xdata$x:00010C4Co
.xdata$x:00010C1D                 db    0
.xdata$x:00010C1E                 db    0
.xdata$x:00010C1F                 db    0
.xdata$x:00010C20                 db    0
.xdata$x:00010C21                 db    0
.xdata$x:00010C22                 db    0
.xdata$x:00010C23                 db    0
.xdata$x:00010C24                 db    0
.xdata$x:00010C25                 db    0
.xdata$x:00010C26                 db    0
.xdata$x:00010C27                 db    0
.xdata$x:00010C28                 dd offset __catch$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:00010C2C __unwindtable$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:00010C2C                                         ; DATA XREF: .xdata$x:00010C58o
.xdata$x:00010C2D                 db 0FFh
.xdata$x:00010C2E                 db 0FFh
.xdata$x:00010C2F                 db 0FFh
.xdata$x:00010C30                 db    0
.xdata$x:00010C31                 db    0
.xdata$x:00010C32                 db    0
.xdata$x:00010C33                 db    0
.xdata$x:00010C34                 db 0FFh
.xdata$x:00010C35                 db 0FFh
.xdata$x:00010C36                 db 0FFh
.xdata$x:00010C37                 db 0FFh
.xdata$x:00010C38                 db    0
.xdata$x:00010C39                 db    0
.xdata$x:00010C3A                 db    0
.xdata$x:00010C3B                 db    0
.xdata$x:00010C3C __tryblocktable$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:00010C3C                                         ; DATA XREF: .xdata$x:00010C60o
.xdata$x:00010C3D                 db    0
.xdata$x:00010C3E                 db    0
.xdata$x:00010C3F                 db    0
.xdata$x:00010C40                 db    0
.xdata$x:00010C41                 db    0
.xdata$x:00010C42                 db    0
.xdata$x:00010C43                 db    0
.xdata$x:00010C44                 db    1
.xdata$x:00010C45                 db    0
.xdata$x:00010C46                 db    0
.xdata$x:00010C47                 db    0
.xdata$x:00010C48                 db    1
.xdata$x:00010C49                 db    0
.xdata$x:00010C4A                 db    0
.xdata$x:00010C4B                 db    0
.xdata$x:00010C4C                 dd offset __catchsym$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:00010C50 __ehfuncinfo$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:00010C50                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:00010C51                 db    5
.xdata$x:00010C52                 db  93h ; ô
.xdata$x:00010C53                 db  19h
.xdata$x:00010C54                 db    2
.xdata$x:00010C55                 db    0
.xdata$x:00010C56                 db    0
.xdata$x:00010C57                 db    0
.xdata$x:00010C58                 dd offset __unwindtable$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010C5C                 db    1
.xdata$x:00010C5D                 db    0
.xdata$x:00010C5E                 db    0
.xdata$x:00010C5F                 db    0
.xdata$x:00010C60                 dd offset __tryblocktable$??$_Uninit_move@PAUAssociationInfo@@PAU1@V?$allocator@UAssociationInfo@@@std@@U1@@std@@YAPAUAssociationInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UAssociationInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010C64                 db    0
.xdata$x:00010C65                 db    0
.xdata$x:00010C66                 db    0
.xdata$x:00010C67                 db    0
.xdata$x:00010C68                 db    0
.xdata$x:00010C69                 db    0
.xdata$x:00010C6A                 db    0
.xdata$x:00010C6B                 db    0
.xdata$x:00010C6C                 db    0
.xdata$x:00010C6D                 db    0
.xdata$x:00010C6E                 db    0
.xdata$x:00010C6F                 db    0
.xdata$x:00010C70                 db    0
.xdata$x:00010C71                 db    0
.xdata$x:00010C72                 db    0
.xdata$x:00010C73                 db    0
.xdata$x:00010C73 _xdata$x        ends
.xdata$x:00010C73
.xdata$x:00010C74 ; ===========================================================================
.xdata$x:00010C74
.xdata$x:00010C74 ; Segment type: Pure data
.xdata$x:00010C74 ; Segment permissions: Read
.xdata$x:00010C74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010C74                 assume cs:_xdata$x
.xdata$x:00010C74                 ;org 10C74h
.xdata$x:00010C74 ; COMDAT (pick associative to section at 53A4)
.xdata$x:00010C74 __catchsym$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:00010C74                                         ; DATA XREF: .xdata$x:00010CA4o
.xdata$x:00010C75                 db    0
.xdata$x:00010C76                 db    0
.xdata$x:00010C77                 db    0
.xdata$x:00010C78                 db    0
.xdata$x:00010C79                 db    0
.xdata$x:00010C7A                 db    0
.xdata$x:00010C7B                 db    0
.xdata$x:00010C7C                 db    0
.xdata$x:00010C7D                 db    0
.xdata$x:00010C7E                 db    0
.xdata$x:00010C7F                 db    0
.xdata$x:00010C80                 dd offset __catch$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:00010C84 __unwindtable$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:00010C84                                         ; DATA XREF: .xdata$x:00010CB0o
.xdata$x:00010C85                 db 0FFh
.xdata$x:00010C86                 db 0FFh
.xdata$x:00010C87                 db 0FFh
.xdata$x:00010C88                 db    0
.xdata$x:00010C89                 db    0
.xdata$x:00010C8A                 db    0
.xdata$x:00010C8B                 db    0
.xdata$x:00010C8C                 db 0FFh
.xdata$x:00010C8D                 db 0FFh
.xdata$x:00010C8E                 db 0FFh
.xdata$x:00010C8F                 db 0FFh
.xdata$x:00010C90                 db    0
.xdata$x:00010C91                 db    0
.xdata$x:00010C92                 db    0
.xdata$x:00010C93                 db    0
.xdata$x:00010C94 __tryblocktable$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:00010C94                                         ; DATA XREF: .xdata$x:00010CB8o
.xdata$x:00010C95                 db    0
.xdata$x:00010C96                 db    0
.xdata$x:00010C97                 db    0
.xdata$x:00010C98                 db    0
.xdata$x:00010C99                 db    0
.xdata$x:00010C9A                 db    0
.xdata$x:00010C9B                 db    0
.xdata$x:00010C9C                 db    1
.xdata$x:00010C9D                 db    0
.xdata$x:00010C9E                 db    0
.xdata$x:00010C9F                 db    0
.xdata$x:00010CA0                 db    1
.xdata$x:00010CA1                 db    0
.xdata$x:00010CA2                 db    0
.xdata$x:00010CA3                 db    0
.xdata$x:00010CA4                 dd offset __catchsym$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:00010CA8 __ehfuncinfo$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:00010CA8                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:00010CA9                 db    5
.xdata$x:00010CAA                 db  93h ; ô
.xdata$x:00010CAB                 db  19h
.xdata$x:00010CAC                 db    2
.xdata$x:00010CAD                 db    0
.xdata$x:00010CAE                 db    0
.xdata$x:00010CAF                 db    0
.xdata$x:00010CB0                 dd offset __unwindtable$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010CB4                 db    1
.xdata$x:00010CB5                 db    0
.xdata$x:00010CB6                 db    0
.xdata$x:00010CB7                 db    0
.xdata$x:00010CB8                 dd offset __tryblocktable$??$_Uninit_move@PAUfoundInfo@@PAU1@V?$allocator@UfoundInfo@@@std@@U1@@std@@YAPAUfoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UfoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010CBC                 db    0
.xdata$x:00010CBD                 db    0
.xdata$x:00010CBE                 db    0
.xdata$x:00010CBF                 db    0
.xdata$x:00010CC0                 db    0
.xdata$x:00010CC1                 db    0
.xdata$x:00010CC2                 db    0
.xdata$x:00010CC3                 db    0
.xdata$x:00010CC4                 db    0
.xdata$x:00010CC5                 db    0
.xdata$x:00010CC6                 db    0
.xdata$x:00010CC7                 db    0
.xdata$x:00010CC8                 db    0
.xdata$x:00010CC9                 db    0
.xdata$x:00010CCA                 db    0
.xdata$x:00010CCB                 db    0
.xdata$x:00010CCB _xdata$x        ends
.xdata$x:00010CCB
.xdata$x:00010CCC ; ===========================================================================
.xdata$x:00010CCC
.xdata$x:00010CCC ; Segment type: Pure data
.xdata$x:00010CCC ; Segment permissions: Read
.xdata$x:00010CCC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010CCC                 assume cs:_xdata$x
.xdata$x:00010CCC                 ;org 10CCCh
.xdata$x:00010CCC ; COMDAT (pick associative to section at 5104)
.xdata$x:00010CCC __catchsym$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:00010CCC                                         ; DATA XREF: .xdata$x:00010CFCo
.xdata$x:00010CCD                 db    0
.xdata$x:00010CCE                 db    0
.xdata$x:00010CCF                 db    0
.xdata$x:00010CD0                 db    0
.xdata$x:00010CD1                 db    0
.xdata$x:00010CD2                 db    0
.xdata$x:00010CD3                 db    0
.xdata$x:00010CD4                 db    0
.xdata$x:00010CD5                 db    0
.xdata$x:00010CD6                 db    0
.xdata$x:00010CD7                 db    0
.xdata$x:00010CD8                 dd offset __catch$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:00010CDC __unwindtable$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:00010CDC                                         ; DATA XREF: .xdata$x:00010D08o
.xdata$x:00010CDD                 db 0FFh
.xdata$x:00010CDE                 db 0FFh
.xdata$x:00010CDF                 db 0FFh
.xdata$x:00010CE0                 db    0
.xdata$x:00010CE1                 db    0
.xdata$x:00010CE2                 db    0
.xdata$x:00010CE3                 db    0
.xdata$x:00010CE4                 db 0FFh
.xdata$x:00010CE5                 db 0FFh
.xdata$x:00010CE6                 db 0FFh
.xdata$x:00010CE7                 db 0FFh
.xdata$x:00010CE8                 db    0
.xdata$x:00010CE9                 db    0
.xdata$x:00010CEA                 db    0
.xdata$x:00010CEB                 db    0
.xdata$x:00010CEC __tryblocktable$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:00010CEC                                         ; DATA XREF: .xdata$x:00010D10o
.xdata$x:00010CED                 db    0
.xdata$x:00010CEE                 db    0
.xdata$x:00010CEF                 db    0
.xdata$x:00010CF0                 db    0
.xdata$x:00010CF1                 db    0
.xdata$x:00010CF2                 db    0
.xdata$x:00010CF3                 db    0
.xdata$x:00010CF4                 db    1
.xdata$x:00010CF5                 db    0
.xdata$x:00010CF6                 db    0
.xdata$x:00010CF7                 db    0
.xdata$x:00010CF8                 db    1
.xdata$x:00010CF9                 db    0
.xdata$x:00010CFA                 db    0
.xdata$x:00010CFB                 db    0
.xdata$x:00010CFC                 dd offset __catchsym$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:00010D00 __ehfuncinfo$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:00010D00                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:00010D01                 db    5
.xdata$x:00010D02                 db  93h ; ô
.xdata$x:00010D03                 db  19h
.xdata$x:00010D04                 db    2
.xdata$x:00010D05                 db    0
.xdata$x:00010D06                 db    0
.xdata$x:00010D07                 db    0
.xdata$x:00010D08                 dd offset __unwindtable$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010D0C                 db    1
.xdata$x:00010D0D                 db    0
.xdata$x:00010D0E                 db    0
.xdata$x:00010D0F                 db    0
.xdata$x:00010D10                 dd offset __tryblocktable$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00010D14                 db    0
.xdata$x:00010D15                 db    0
.xdata$x:00010D16                 db    0
.xdata$x:00010D17                 db    0
.xdata$x:00010D18                 db    0
.xdata$x:00010D19                 db    0
.xdata$x:00010D1A                 db    0
.xdata$x:00010D1B                 db    0
.xdata$x:00010D1C                 db    0
.xdata$x:00010D1D                 db    0
.xdata$x:00010D1E                 db    0
.xdata$x:00010D1F                 db    0
.xdata$x:00010D20                 db    0
.xdata$x:00010D21                 db    0
.xdata$x:00010D22                 db    0
.xdata$x:00010D23                 db    0
.xdata$x:00010D23 _xdata$x        ends
.xdata$x:00010D23
.xdata$x:00010D24 ; ===========================================================================
.xdata$x:00010D24
.xdata$x:00010D24 ; Segment type: Pure data
.xdata$x:00010D24 ; Segment permissions: Read
.xdata$x:00010D24 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00010D24                 assume cs:_xdata$x
.xdata$x:00010D24                 ;org 10D24h
.xdata$x:00010D24 ; COMDAT (pick associative to section at 6260)
.xdata$x:00010D24 __unwindtable$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z db 0FFh
.xdata$x:00010D24                                         ; DATA XREF: .xdata$x:00010D34o
.xdata$x:00010D25                 db 0FFh
.xdata$x:00010D26                 db 0FFh
.xdata$x:00010D27                 db 0FFh
.xdata$x:00010D28                 dd offset __unwindfunclet$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z$0
.xdata$x:00010D2C __ehfuncinfo$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z db  22h ; "
.xdata$x:00010D2C                                         ; DATA XREF: __ehhandler$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z+11o
.xdata$x:00010D2D                 db    5
.xdata$x:00010D2E                 db  93h ; ô
.xdata$x:00010D2F                 db  19h
.xdata$x:00010D30                 db    1
.xdata$x:00010D31                 db    0
.xdata$x:00010D32                 db    0
.xdata$x:00010D33                 db    0
.xdata$x:00010D34                 dd offset __unwindtable$??$construct@UfoundInfo@@U1@@?$allocator@UfoundInfo@@@std@@QAEXPAUfoundInfo@@$$QAU2@@Z
.xdata$x:00010D38                 db    0
.xdata$x:00010D39                 db    0
.xdata$x:00010D3A                 db    0
.xdata$x:00010D3B                 db    0
.xdata$x:00010D3C                 db    0
.xdata$x:00010D3D                 db    0
.xdata$x:00010D3E                 db    0
.xdata$x:00010D3F                 db    0
.xdata$x:00010D40                 db    0
.xdata$x:00010D41                 db    0
.xdata$x:00010D42                 db    0
.xdata$x:00010D43                 db    0
.xdata$x:00010D44                 db    0
.xdata$x:00010D45                 db    0
.xdata$x:00010D46                 db    0
.xdata$x:00010D47                 db    0
.xdata$x:00010D48                 db    0
.xdata$x:00010D49                 db    0
.xdata$x:00010D4A                 db    0
.xdata$x:00010D4B                 db    0
.xdata$x:00010D4C                 db    0
.xdata$x:00010D4D                 db    0
.xdata$x:00010D4E                 db    0
.xdata$x:00010D4F                 db    0
.xdata$x:00010D4F _xdata$x        ends
.xdata$x:00010D4F
.bss:00010D50 ; ===========================================================================
.bss:00010D50
.bss:00010D50 ; Segment type: Uninitialized
.bss:00010D50 ; Segment permissions: Read/Write
.bss:00010D50 _bss            segment byte public 'BSS' use32
.bss:00010D50                 assume cs:_bss
.bss:00010D50                 ;org 10D50h
.bss:00010D50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00010D50 __Tuple_alloc   db    ? ;
.bss:00010D51 ; std::_Ignore ignore
.bss:00010D51 _ignore         db    ? ;               ; DATA XREF: std::`dynamic initializer for 'ignore''(void)+3o
.bss:00010D52 _allocator_arg  db    ? ;
.bss:00010D53 _piecewise_construct db    ? ;
.bss:00010D53 _bss            ends
.bss:00010D53
.rdata:00010D54 ; ===========================================================================
.rdata:00010D54
.rdata:00010D54 ; Segment type: Pure data
.rdata:00010D54 ; Segment permissions: Read
.rdata:00010D54 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00010D54 _rdata          segment para public 'DATA' use32
.rdata:00010D54                 assume cs:_rdata
.rdata:00010D54                 ;org 10D54h
.rdata:00010D54 ; COMDAT (pick any)
.rdata:00010D54                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00010D54 ; wchar_t `string'
.rdata:00010D54 ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00010D54                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+48o
.rdata:00010D54                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00010D54                 unicode 0, <clude\xutility>,0
.rdata:00010D54 _rdata          ends
.rdata:00010D54
.rdata:00010DE4 ; ===========================================================================
.rdata:00010DE4
.rdata:00010DE4 ; Segment type: Pure data
.rdata:00010DE4 ; Segment permissions: Read
.rdata:00010DE4 _rdata          segment dword public 'DATA' use32
.rdata:00010DE4                 assume cs:_rdata
.rdata:00010DE4                 ;org 10DE4h
.rdata:00010DE4 ; COMDAT (pick any)
.rdata:00010DE4                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:00010DE4 ; wchar_t `string'
.rdata:00010DE4 ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:00010DE4                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:00010DE4                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:00010E16                 align 4
.rdata:00010E16 _rdata          ends
.rdata:00010E16
.rdata:00010E18 ; ===========================================================================
.rdata:00010E18
.rdata:00010E18 ; Segment type: Pure data
.rdata:00010E18 ; Segment permissions: Read
.rdata:00010E18 _rdata          segment dword public 'DATA' use32
.rdata:00010E18                 assume cs:_rdata
.rdata:00010E18                 ;org 10E18h
.rdata:00010E18 ; COMDAT (pick largest)
.rdata:00010E18                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:00010E1C                 public ??_7error_category@std@@6B@
.rdata:00010E1C ; const std::error_category::`vftable'
.rdata:00010E1C ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:00010E1C                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:00010E1C                                         ; std::error_category::~error_category(void)+Ao
.rdata:00010E1C                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:00010E20                 dd offset __purecall
.rdata:00010E24                 dd offset __purecall
.rdata:00010E28                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00010E2C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00010E30                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00010E30 _rdata          ends
.rdata:00010E30
.rdata:00010E34 ; ===========================================================================
.rdata:00010E34
.rdata:00010E34 ; Segment type: Pure data
.rdata:00010E34 ; Segment permissions: Read
.rdata:00010E34 _rdata          segment dword public 'DATA' use32
.rdata:00010E34                 assume cs:_rdata
.rdata:00010E34                 ;org 10E34h
.rdata:00010E34 ; COMDAT (pick largest)
.rdata:00010E34                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:00010E38                 public ??_7_Generic_error_category@std@@6B@
.rdata:00010E38 ; const std::_Generic_error_category::`vftable'
.rdata:00010E38 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:00010E38                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:00010E38                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:00010E3C                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:00010E40                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:00010E44                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00010E48                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00010E4C                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00010E4C _rdata          ends
.rdata:00010E4C
.rdata:00010E50 ; ===========================================================================
.rdata:00010E50
.rdata:00010E50 ; Segment type: Pure data
.rdata:00010E50 ; Segment permissions: Read
.rdata:00010E50 _rdata          segment dword public 'DATA' use32
.rdata:00010E50                 assume cs:_rdata
.rdata:00010E50                 ;org 10E50h
.rdata:00010E50 ; COMDAT (pick any)
.rdata:00010E50                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:00010E50 ; `string'
.rdata:00010E50 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:00010E50                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:00010E50 _rdata          ends
.rdata:00010E50
.rdata:00010E58 ; ===========================================================================
.rdata:00010E58
.rdata:00010E58 ; Segment type: Pure data
.rdata:00010E58 ; Segment permissions: Read
.rdata:00010E58 _rdata          segment dword public 'DATA' use32
.rdata:00010E58                 assume cs:_rdata
.rdata:00010E58                 ;org 10E58h
.rdata:00010E58 ; COMDAT (pick any)
.rdata:00010E58                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:00010E58 ; `string'
.rdata:00010E58 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:00010E58                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_DC58o
.rdata:00010E58                                         ; std::_System_error_category::message(int):loc_DDD4o
.rdata:00010E66                 align 4
.rdata:00010E66 _rdata          ends
.rdata:00010E66
.rdata:00010E68 ; ===========================================================================
.rdata:00010E68
.rdata:00010E68 ; Segment type: Pure data
.rdata:00010E68 ; Segment permissions: Read
.rdata:00010E68 _rdata          segment dword public 'DATA' use32
.rdata:00010E68                 assume cs:_rdata
.rdata:00010E68                 ;org 10E68h
.rdata:00010E68 ; COMDAT (pick largest)
.rdata:00010E68                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:00010E6C                 public ??_7_Iostream_error_category@std@@6B@
.rdata:00010E6C ; const std::_Iostream_error_category::`vftable'
.rdata:00010E6C ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:00010E6C                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:00010E6C                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:00010E70                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:00010E74                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:00010E78                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00010E7C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00010E80                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00010E80 _rdata          ends
.rdata:00010E80
.rdata:00010E84 ; ===========================================================================
.rdata:00010E84
.rdata:00010E84 ; Segment type: Pure data
.rdata:00010E84 ; Segment permissions: Read
.rdata:00010E84 _rdata          segment dword public 'DATA' use32
.rdata:00010E84                 assume cs:_rdata
.rdata:00010E84                 ;org 10E84h
.rdata:00010E84 ; COMDAT (pick any)
.rdata:00010E84                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:00010E84 ; `string'
.rdata:00010E84 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:00010E84                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:00010E8D                 align 10h
.rdata:00010E8D _rdata          ends
.rdata:00010E8D
.rdata:00010E90 ; ===========================================================================
.rdata:00010E90
.rdata:00010E90 ; Segment type: Pure data
.rdata:00010E90 ; Segment permissions: Read
.rdata:00010E90 _rdata          segment dword public 'DATA' use32
.rdata:00010E90                 assume cs:_rdata
.rdata:00010E90                 ;org 10E90h
.rdata:00010E90 ; COMDAT (pick any)
.rdata:00010E90                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:00010E90 ; char `string'[]
.rdata:00010E90 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:00010E90                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:00010EA6                 align 4
.rdata:00010EA6 _rdata          ends
.rdata:00010EA6
.rdata:00010EA8 ; ===========================================================================
.rdata:00010EA8
.rdata:00010EA8 ; Segment type: Pure data
.rdata:00010EA8 ; Segment permissions: Read
.rdata:00010EA8 _rdata          segment dword public 'DATA' use32
.rdata:00010EA8                 assume cs:_rdata
.rdata:00010EA8                 ;org 10EA8h
.rdata:00010EA8 ; COMDAT (pick largest)
.rdata:00010EA8                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:00010EAC                 public ??_7_System_error_category@std@@6B@
.rdata:00010EAC ; const std::_System_error_category::`vftable'
.rdata:00010EAC ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:00010EAC                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:00010EAC                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:00010EB0                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:00010EB4                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:00010EB8                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:00010EBC                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00010EC0                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00010EC0 _rdata          ends
.rdata:00010EC0
.rdata:00010EC4 ; ===========================================================================
.rdata:00010EC4
.rdata:00010EC4 ; Segment type: Pure data
.rdata:00010EC4 ; Segment permissions: Read
.rdata:00010EC4 _rdata          segment dword public 'DATA' use32
.rdata:00010EC4                 assume cs:_rdata
.rdata:00010EC4                 ;org 10EC4h
.rdata:00010EC4 ; COMDAT (pick any)
.rdata:00010EC4                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:00010EC4 ; `string'
.rdata:00010EC4 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:00010EC4                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:00010ECB                 align 4
.rdata:00010ECB _rdata          ends
.rdata:00010ECB
.bss:00010ECC ; ===========================================================================
.bss:00010ECC
.bss:00010ECC ; Segment type: Uninitialized
.bss:00010ECC ; Segment permissions: Read/Write
.bss:00010ECC _bss            segment dword public 'BSS' use32
.bss:00010ECC                 assume cs:_bss
.bss:00010ECC                 ;org 10ECCh
.bss:00010ECC ; COMDAT (pick any)
.bss:00010ECC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00010ECC                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:00010ECC ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:00010ECC ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:00010ECC                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:00010ECC                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:00010ECD                 db    ? ;
.bss:00010ECE                 db    ? ;
.bss:00010ECF                 db    ? ;
.bss:00010ECF _bss            ends
.bss:00010ECF
.bss:00010ED0 ; ===========================================================================
.bss:00010ED0
.bss:00010ED0 ; Segment type: Uninitialized
.bss:00010ED0 ; Segment permissions: Read/Write
.bss:00010ED0 _bss            segment dword public 'BSS' use32
.bss:00010ED0                 assume cs:_bss
.bss:00010ED0                 ;org 10ED0h
.bss:00010ED0 ; COMDAT (pick any)
.bss:00010ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00010ED0                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:00010ED0 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:00010ED0 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:00010ED0                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:00010ED0                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:00010ED1                 db    ? ;
.bss:00010ED2                 db    ? ;
.bss:00010ED3                 db    ? ;
.bss:00010ED3 _bss            ends
.bss:00010ED3
.bss:00010ED4 ; ===========================================================================
.bss:00010ED4
.bss:00010ED4 ; Segment type: Uninitialized
.bss:00010ED4 ; Segment permissions: Read/Write
.bss:00010ED4 _bss            segment dword public 'BSS' use32
.bss:00010ED4                 assume cs:_bss
.bss:00010ED4                 ;org 10ED4h
.bss:00010ED4 ; COMDAT (pick any)
.bss:00010ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00010ED4                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:00010ED4 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:00010ED4 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:00010ED4                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:00010ED4                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:00010ED5                 db    ? ;
.bss:00010ED6                 db    ? ;
.bss:00010ED7                 db    ? ;
.bss:00010ED7 _bss            ends
.bss:00010ED7
.rdata:00010ED8 ; ===========================================================================
.rdata:00010ED8
.rdata:00010ED8 ; Segment type: Pure data
.rdata:00010ED8 ; Segment permissions: Read
.rdata:00010ED8 _rdata          segment dword public 'DATA' use32
.rdata:00010ED8                 assume cs:_rdata
.rdata:00010ED8                 ;org 10ED8h
.rdata:00010ED8 ; COMDAT (pick any)
.rdata:00010ED8                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:00010ED8 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:00010ED8 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:00010ED8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Br
.rdata:00010ED8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+3Dr ...
.rdata:00010ED8 _rdata          ends
.rdata:00010ED8
.bss:00010EDC ; ===========================================================================
.bss:00010EDC
.bss:00010EDC ; Segment type: Uninitialized
.bss:00010EDC ; Segment permissions: Read/Write
.bss:00010EDC _bss            segment dword public 'BSS' use32
.bss:00010EDC                 assume cs:_bss
.bss:00010EDC                 ;org 10EDCh
.bss:00010EDC ; COMDAT (pick any)
.bss:00010EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00010EDC                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:00010EDC ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:00010EDC ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:00010EDC                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:00010EDD                 db    ? ;
.bss:00010EDE                 db    ? ;
.bss:00010EDF                 db    ? ;
.bss:00010EDF _bss            ends
.bss:00010EDF
.bss:00010EE0 ; ===========================================================================
.bss:00010EE0
.bss:00010EE0 ; Segment type: Uninitialized
.bss:00010EE0 ; Segment permissions: Read/Write
.bss:00010EE0 _bss            segment dword public 'BSS' use32
.bss:00010EE0                 assume cs:_bss
.bss:00010EE0                 ;org 10EE0h
.bss:00010EE0 ; COMDAT (pick any)
.bss:00010EE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00010EE0                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:00010EE0 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:00010EE0 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:00010EE0                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:00010EE1                 db    ? ;
.bss:00010EE2                 db    ? ;
.bss:00010EE3                 db    ? ;
.bss:00010EE3 _bss            ends
.bss:00010EE3
.rdata:00010EE4 ; ===========================================================================
.rdata:00010EE4
.rdata:00010EE4 ; Segment type: Pure data
.rdata:00010EE4 ; Segment permissions: Read
.rdata:00010EE4 _rdata          segment dword public 'DATA' use32
.rdata:00010EE4                 assume cs:_rdata
.rdata:00010EE4                 ;org 10EE4h
.rdata:00010EE4 ; COMDAT (pick any)
.rdata:00010EE4                 public ??_C@_11LOCGONAA@?$AA?$AA@
.rdata:00010EE4 ; wchar_t `string'
.rdata:00010EE4 ??_C@_11LOCGONAA@?$AA?$AA@ dw 0         ; DATA XREF: AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *):loc_7893o
.rdata:00010EE4                                         ; AssociationInfo::AssociationInfo(int,int,wchar_t const *,wchar_t const *):loc_78BAo ...
.rdata:00010EE6                 align 4
.rdata:00010EE6 _rdata          ends
.rdata:00010EE6
.rdata:00010EE8 ; ===========================================================================
.rdata:00010EE8
.rdata:00010EE8 ; Segment type: Pure data
.rdata:00010EE8 ; Segment permissions: Read
.rdata:00010EE8 _rdata          segment dword public 'DATA' use32
.rdata:00010EE8                 assume cs:_rdata
.rdata:00010EE8                 ;org 10EE8h
.rdata:00010EE8 ; COMDAT (pick largest)
.rdata:00010EE8                 dd offset ??_R4TiXmlDocument@@6B@ ; const TiXmlDocument::`RTTI Complete Object Locator'
.rdata:00010EEC                 public ??_7TiXmlDocument@@6B@
.rdata:00010EEC ; const TiXmlDocument::`vftable'
.rdata:00010EEC ??_7TiXmlDocument@@6B@ dd offset ??_ETiXmlDocument@@UAEPAXI@Z
.rdata:00010EEC                                         ; DATA XREF: TiXmlDocument::TiXmlDocument(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ao
.rdata:00010EEC                                         ; TiXmlDocument::~TiXmlDocument(void)+29o
.rdata:00010EEC                                         ; TiXmlDocument::`vector deleting destructor'(uint)
.rdata:00010EF0                 dd offset ?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z ; TiXmlDocument::Print(_iobuf *,int)
.rdata:00010EF4                 dd offset ?StreamOut@TiXmlDocument@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z ; TiXmlDocument::StreamOut(std::basic_ostream<wchar_t,std::char_traits<wchar_t>> *)
.rdata:00010EF8                 dd offset ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z ; TiXmlDocument::Parse(wchar_t const *,TiXmlParsingData *)
.rdata:00010EFC                 dd offset ?Type@TiXmlNode@@UBEHXZ ; TiXmlNode::Type(void)
.rdata:00010F00                 dd offset ?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ ; TiXmlDocument::Clone(void)
.rdata:00010F04                 dd offset ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z ; TiXmlDocument::StreamIn(std::basic_istream<wchar_t,std::char_traits<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.rdata:00010F04 _rdata          ends
.rdata:00010F04
.rdata:00010F08 ; ===========================================================================
.rdata:00010F08
.rdata:00010F08 ; Segment type: Pure data
.rdata:00010F08 ; Segment permissions: Read
.rdata:00010F08 _rdata          segment dword public 'DATA' use32
.rdata:00010F08                 assume cs:_rdata
.rdata:00010F08                 ;org 10F08h
.rdata:00010F08 ; COMDAT (pick largest)
.rdata:00010F08                 dd offset ??_R4FunctionParser@@6B@ ; const FunctionParser::`RTTI Complete Object Locator'
.rdata:00010F0C                 public ??_7FunctionParser@@6B@
.rdata:00010F0C ; const FunctionParser::`vftable'
.rdata:00010F0C ??_7FunctionParser@@6B@ dd offset __purecall
.rdata:00010F0C                                         ; DATA XREF: FunctionParser::FunctionParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+32o
.rdata:00010F0C _rdata          ends
.rdata:00010F0C
.rdata:00010F10 ; ===========================================================================
.rdata:00010F10
.rdata:00010F10 ; Segment type: Pure data
.rdata:00010F10 ; Segment permissions: Read
.rdata:00010F10 _rdata          segment dword public 'DATA' use32
.rdata:00010F10                 assume cs:_rdata
.rdata:00010F10                 ;org 10F10h
.rdata:00010F10 ; COMDAT (pick largest)
.rdata:00010F10                 dd offset ??_R4FunctionZoneParser@@6B@ ; const FunctionZoneParser::`RTTI Complete Object Locator'
.rdata:00010F14                 public ??_7FunctionZoneParser@@6B@
.rdata:00010F14 ; const FunctionZoneParser::`vftable'
.rdata:00010F14 ??_7FunctionZoneParser@@6B@ dd offset ?parse@FunctionZoneParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.rdata:00010F14                                         ; DATA XREF: FunctionZoneParser::FunctionZoneParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+AEo
.rdata:00010F14 _rdata          ends                    ; FunctionZoneParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.rdata:00010F14
.rdata:00010F18 ; ===========================================================================
.rdata:00010F18
.rdata:00010F18 ; Segment type: Pure data
.rdata:00010F18 ; Segment permissions: Read
.rdata:00010F18 _rdata          segment dword public 'DATA' use32
.rdata:00010F18                 assume cs:_rdata
.rdata:00010F18                 ;org 10F18h
.rdata:00010F18 ; COMDAT (pick largest)
.rdata:00010F18                 dd offset ??_R4FunctionUnitParser@@6B@ ; const FunctionUnitParser::`RTTI Complete Object Locator'
.rdata:00010F1C                 public ??_7FunctionUnitParser@@6B@
.rdata:00010F1C ; const FunctionUnitParser::`vftable'
.rdata:00010F1C ??_7FunctionUnitParser@@6B@ dd offset ?parse@FunctionUnitParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.rdata:00010F1C                                         ; DATA XREF: FunctionUnitParser::FunctionUnitParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>)+ABo
.rdata:00010F1C _rdata          ends                    ; FunctionUnitParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.rdata:00010F1C
.rdata:00010F20 ; ===========================================================================
.rdata:00010F20
.rdata:00010F20 ; Segment type: Pure data
.rdata:00010F20 ; Segment permissions: Read
.rdata:00010F20 _rdata          segment dword public 'DATA' use32
.rdata:00010F20                 assume cs:_rdata
.rdata:00010F20                 ;org 10F20h
.rdata:00010F20 ; COMDAT (pick largest)
.rdata:00010F20                 dd offset ??_R4FunctionMixParser@@6B@ ; const FunctionMixParser::`RTTI Complete Object Locator'
.rdata:00010F24                 public ??_7FunctionMixParser@@6B@
.rdata:00010F24 ; const FunctionMixParser::`vftable'
.rdata:00010F24 ??_7FunctionMixParser@@6B@ dd offset ?parse@FunctionMixParser@@UAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z
.rdata:00010F24                                         ; DATA XREF: FunctionMixParser::FunctionMixParser(wchar_t const *,wchar_t const *,wchar_t const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,FunctionUnitParser *)+108o
.rdata:00010F24 _rdata          ends                    ; FunctionMixParser::parse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.rdata:00010F24
.rdata:00010F28 ; ===========================================================================
.rdata:00010F28
.rdata:00010F28 ; Segment type: Pure data
.rdata:00010F28 ; Segment permissions: Read
.rdata:00010F28 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00010F28 _rdata          segment para public 'DATA' use32
.rdata:00010F28                 assume cs:_rdata
.rdata:00010F28                 ;org 10F28h
.rdata:00010F28 ; COMDAT (pick any)
.rdata:00010F28                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00010F28 ; wchar_t `string'
.rdata:00010F28 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00010F28                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+5Do
.rdata:00010F28                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+8Ao ...
.rdata:00010F28                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00010F28                 unicode 0, <clude\xstring>,0
.rdata:00010FB6                 align 4
.rdata:00010FB6 _rdata          ends
.rdata:00010FB6
.bss:00010FB8 ; ===========================================================================
.bss:00010FB8
.bss:00010FB8 ; Segment type: Uninitialized
.bss:00010FB8 ; Segment permissions: Read/Write
.bss:00010FB8 _bss            segment dword public 'BSS' use32
.bss:00010FB8                 assume cs:_bss
.bss:00010FB8                 ;org 10FB8h
.bss:00010FB8 ; COMDAT (pick any)
.bss:00010FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00010FB8                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:00010FB8 ; std::locale::id std::numpunct<char>::id
.bss:00010FB8 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:00010FB8                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:00010FB9                 db    ? ;
.bss:00010FBA                 db    ? ;
.bss:00010FBB                 db    ? ;
.bss:00010FBB _bss            ends
.bss:00010FBB
.bss:00010FBC ; ===========================================================================
.bss:00010FBC
.bss:00010FBC ; Segment type: Uninitialized
.bss:00010FBC ; Segment permissions: Read/Write
.bss:00010FBC _bss            segment dword public 'BSS' use32
.bss:00010FBC                 assume cs:_bss
.bss:00010FBC                 ;org 10FBCh
.bss:00010FBC ; COMDAT (pick any)
.bss:00010FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00010FBC                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:00010FBC ; std::locale::id std::numpunct<wchar_t>::id
.bss:00010FBC ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:00010FBC                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:00010FBD                 db    ? ;
.bss:00010FBE                 db    ? ;
.bss:00010FBF                 db    ? ;
.bss:00010FBF _bss            ends
.bss:00010FBF
.rdata:00010FC0 ; ===========================================================================
.rdata:00010FC0
.rdata:00010FC0 ; Segment type: Pure data
.rdata:00010FC0 ; Segment permissions: Read
.rdata:00010FC0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00010FC0 _rdata          segment para public 'DATA' use32
.rdata:00010FC0                 assume cs:_rdata
.rdata:00010FC0                 ;org 10FC0h
.rdata:00010FC0 ; COMDAT (pick any)
.rdata:00010FC0                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00010FC0 ; wchar_t `string'
.rdata:00010FC0 ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00010FC0                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+19o
.rdata:00010FC0                                         ; std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+49o ...
.rdata:00010FC0                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00010FC0                 unicode 0, <clude\vector>,0
.rdata:00010FC0 _rdata          ends
.rdata:00010FC0
.rdata:0001104C ; ===========================================================================
.rdata:0001104C
.rdata:0001104C ; Segment type: Pure data
.rdata:0001104C ; Segment permissions: Read
.rdata:0001104C _rdata          segment dword public 'DATA' use32
.rdata:0001104C                 assume cs:_rdata
.rdata:0001104C                 ;org 1104Ch
.rdata:0001104C ; COMDAT (pick any)
.rdata:0001104C                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0001104C ; wchar_t `string'
.rdata:0001104C ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0001104C                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+1Eo
.rdata:0001104C                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+1Eo ...
.rdata:0001104C                 unicode 0, <vector subscript out of range>,0
.rdata:0001104C _rdata          ends
.rdata:0001104C
.rdata:00011088 ; ===========================================================================
.rdata:00011088
.rdata:00011088 ; Segment type: Pure data
.rdata:00011088 ; Segment permissions: Read
.rdata:00011088 _rdata          segment dword public 'DATA' use32
.rdata:00011088                 assume cs:_rdata
.rdata:00011088                 ;org 11088h
.rdata:00011088 ; COMDAT (pick any)
.rdata:00011088                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:00011088 ; `string'
.rdata:00011088 ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:00011088                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+2Bo
.rdata:00011088                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+2Bo ...
.rdata:00011088 _rdata          ends
.rdata:00011088
.rdata:000110AC ; ===========================================================================
.rdata:000110AC
.rdata:000110AC ; Segment type: Pure data
.rdata:000110AC ; Segment permissions: Read
.rdata:000110AC ; Segment alignment 'qword' can not be represented in assembly
.rdata:000110AC _rdata          segment para public 'DATA' use32
.rdata:000110AC                 assume cs:_rdata
.rdata:000110AC                 ;org 110ACh
.rdata:000110AC ; COMDAT (pick any)
.rdata:000110AC                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:000110AC ; `string'
.rdata:000110AC ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:000110AC                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint):loc_9884o
.rdata:000110AC                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint):loc_9914o ...
.rdata:000110AC                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:00011102                 align 4
.rdata:00011102 _rdata          ends
.rdata:00011102
.rdata:00011104 ; ===========================================================================
.rdata:00011104
.rdata:00011104 ; Segment type: Pure data
.rdata:00011104 ; Segment permissions: Read
.rdata:00011104 _rdata          segment dword public 'DATA' use32
.rdata:00011104                 assume cs:_rdata
.rdata:00011104                 ;org 11104h
.rdata:00011104 ; COMDAT (pick any)
.rdata:00011104                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:00011104 ; `string'
.rdata:00011104 ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:00011104                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+3Do
.rdata:00011104                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+3Do ...
.rdata:00011104                 unicode 0, <%s>,0
.rdata:0001110A                 align 4
.rdata:0001110A _rdata          ends
.rdata:0001110A
.rdata:0001110C ; ===========================================================================
.rdata:0001110C
.rdata:0001110C ; Segment type: Pure data
.rdata:0001110C ; Segment permissions: Read
.rdata:0001110C _rdata          segment dword public 'DATA' use32
.rdata:0001110C                 assume cs:_rdata
.rdata:0001110C                 ;org 1110Ch
.rdata:0001110C ; COMDAT (pick any)
.rdata:0001110C                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:0001110C ; `string'
.rdata:0001110C ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:0001110C                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+6Fo
.rdata:0001110C                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+6Fo ...
.rdata:0001110C                 unicode 0, <"out of range">,0
.rdata:0001112A                 align 4
.rdata:0001112A _rdata          ends
.rdata:0001112A
.rdata:0001112C ; ===========================================================================
.rdata:0001112C
.rdata:0001112C ; Segment type: Pure data
.rdata:0001112C ; Segment permissions: Read
.rdata:0001112C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0001112C _rdata          segment para public 'DATA' use32
.rdata:0001112C                 assume cs:_rdata
.rdata:0001112C                 ;org 1112Ch
.rdata:0001112C ; COMDAT (pick any)
.rdata:0001112C                 public ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
.rdata:0001112C ; wchar_t `string'
.rdata:0001112C ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@:
.rdata:0001112C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>)+63o
.rdata:0001112C                 unicode 0, <vector erase iterator outside range>,0
.rdata:0001112C _rdata          ends
.rdata:0001112C
.rdata:00011174 ; ===========================================================================
.rdata:00011174
.rdata:00011174 ; Segment type: Pure data
.rdata:00011174 ; Segment permissions: Read
.rdata:00011174 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011174 _rdata          segment para public 'DATA' use32
.rdata:00011174                 assume cs:_rdata
.rdata:00011174                 ;org 11174h
.rdata:00011174 ; COMDAT (pick any)
.rdata:00011174                 public ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
.rdata:00011174 ; `string'
.rdata:00011174 ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@:
.rdata:00011174                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Ao
.rdata:00011174                 unicode 0, <std::vector>
.rdata:00011174                 dw 3Ch
.rdata:00011174                 unicode 0, <class std::basic_string>
.rdata:00011174                 dw 3Ch
.rdata:00011174                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:00011174                 dw 3Ch
.rdata:00011174                 unicode 0, <wchar_t>
.rdata:00011174                 dw 3Eh
.rdata:00011174                 unicode 0, <,class std::allocator>
.rdata:00011174                 dw 3Ch
.rdata:00011174                 unicode 0, <wchar_t>
.rdata:00011174                 dw 3Eh
.rdata:00011174                 unicode 0, < >
.rdata:00011174                 dw 3Eh
.rdata:00011174                 unicode 0, <,class std::allocator>
.rdata:00011174                 dw 3Ch
.rdata:00011174                 unicode 0, <class std::basic_string>
.rdata:00011174                 dw 3Ch
.rdata:00011174                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:00011174                 dw 3Ch
.rdata:00011174                 unicode 0, <wchar_t>
.rdata:00011174                 dw 3Eh
.rdata:00011174                 unicode 0, <,class std::allocator>
.rdata:00011174                 dw 3Ch
.rdata:00011174                 unicode 0, <wchar_t>
.rdata:00011174                 dw 3Eh
.rdata:00011174                 unicode 0, < >
.rdata:00011174                 dw 3Eh
.rdata:00011174                 unicode 0, < >
.rdata:00011174                 dw 3Eh
.rdata:00011174                 unicode 0, < >
.rdata:00011174                 dw 3Eh
.rdata:00011174                 unicode 0, <::operator []>,0
.rdata:00011174 _rdata          ends
.rdata:00011174
.rdata:0001135C ; ===========================================================================
.rdata:0001135C
.rdata:0001135C ; Segment type: Pure data
.rdata:0001135C ; Segment permissions: Read
.rdata:0001135C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0001135C _rdata          segment para public 'DATA' use32
.rdata:0001135C                 assume cs:_rdata
.rdata:0001135C                 ;org 1135Ch
.rdata:0001135C ; COMDAT (pick any)
.rdata:0001135C                 public ??_C@_1LO@NOICGNAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAP?$AAa?$AAr?$AAs?$AAe?$AAr@
.rdata:0001135C ; `string'
.rdata:0001135C ??_C@_1LO@NOICGNAK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAP?$AAa?$AAr?$AAs?$AAe?$AAr@:
.rdata:0001135C                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+6Ao
.rdata:0001135C                 unicode 0, <std::vector>
.rdata:0001135C                 dw 3Ch
.rdata:0001135C                 unicode 0, <class FunctionParser *,class std::allocator>
.rdata:0001135C                 dw 3Ch
.rdata:0001135C                 unicode 0, <class FunctionParser *>
.rdata:0001135C                 dw 3Eh
.rdata:0001135C                 unicode 0, < >
.rdata:0001135C                 dw 3Eh
.rdata:0001135C                 unicode 0, <::operator []>,0
.rdata:0001141A                 align 4
.rdata:0001141A _rdata          ends
.rdata:0001141A
.rdata:0001141C ; ===========================================================================
.rdata:0001141C
.rdata:0001141C ; Segment type: Pure data
.rdata:0001141C ; Segment permissions: Read
.rdata:0001141C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0001141C _rdata          segment para public 'DATA' use32
.rdata:0001141C                 assume cs:_rdata
.rdata:0001141C                 ;org 1141Ch
.rdata:0001141C ; COMDAT (pick any)
.rdata:0001141C                 public ??_C@_1LO@IDGCAAML@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAA?$AAs?$AAs?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AAI?$AAn@
.rdata:0001141C ; `string'
.rdata:0001141C ??_C@_1LO@IDGCAAML@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAA?$AAs?$AAs?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AAI?$AAn@:
.rdata:0001141C                                         ; DATA XREF: std::vector<AssociationInfo,std::allocator<AssociationInfo>>::operator[](uint)+6Ao
.rdata:0001141C                 unicode 0, <std::vector>
.rdata:0001141C                 dw 3Ch
.rdata:0001141C                 unicode 0, <struct AssociationInfo,class std::allocator>
.rdata:0001141C                 dw 3Ch
.rdata:0001141C                 unicode 0, <struct AssociationInfo>
.rdata:0001141C                 dw 3Eh
.rdata:0001141C                 unicode 0, < >
.rdata:0001141C                 dw 3Eh
.rdata:0001141C                 unicode 0, <::operator []>,0
.rdata:000114DA                 align 4
.rdata:000114DA _rdata          ends
.rdata:000114DA
.rdata:000114DC ; ===========================================================================
.rdata:000114DC
.rdata:000114DC ; Segment type: Pure data
.rdata:000114DC ; Segment permissions: Read
.rdata:000114DC ; Segment alignment 'qword' can not be represented in assembly
.rdata:000114DC _rdata          segment para public 'DATA' use32
.rdata:000114DC                 assume cs:_rdata
.rdata:000114DC                 ;org 114DCh
.rdata:000114DC ; COMDAT (pick any)
.rdata:000114DC                 public ??_C@_1MM@CFLCIPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAi?$AAn?$AAt@
.rdata:000114DC ; `string'
.rdata:000114DC ??_C@_1MM@CFLCIPDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAi?$AAn?$AAt@:
.rdata:000114DC                                         ; DATA XREF: std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+6Ao
.rdata:000114DC                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+6Ao
.rdata:000114DC                 unicode 0, <std::vector>
.rdata:000114DC                 dw 3Ch
.rdata:000114DC                 unicode 0, <struct std::pair>
.rdata:000114DC                 dw 3Ch
.rdata:000114DC                 unicode 0, <int,int>
.rdata:000114DC                 dw 3Eh
.rdata:000114DC                 unicode 0, <,class std::allocator>
.rdata:000114DC                 dw 3Ch
.rdata:000114DC                 unicode 0, <struct std::pair>
.rdata:000114DC                 dw 3Ch
.rdata:000114DC                 unicode 0, <int,int>
.rdata:000114DC                 dw 3Eh
.rdata:000114DC                 unicode 0, < >
.rdata:000114DC                 dw 3Eh
.rdata:000114DC                 unicode 0, < >
.rdata:000114DC                 dw 3Eh
.rdata:000114DC                 unicode 0, <::operator []>,0
.rdata:000114DC _rdata          ends
.rdata:000114DC
.rdata:000115A8 ; ===========================================================================
.rdata:000115A8
.rdata:000115A8 ; Segment type: Pure data
.rdata:000115A8 ; Segment permissions: Read
.rdata:000115A8 _rdata          segment dword public 'DATA' use32
.rdata:000115A8                 assume cs:_rdata
.rdata:000115A8                 ;org 115A8h
.rdata:000115A8 ; COMDAT (pick any)
.rdata:000115A8                 public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
.rdata:000115A8 ; `string'
.rdata:000115A8 ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
.rdata:000115A8                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+41o
.rdata:000115A8 _rdata          ends
.rdata:000115A8
.rdata:000115D0 ; ===========================================================================
.rdata:000115D0
.rdata:000115D0 ; Segment type: Pure data
.rdata:000115D0 ; Segment permissions: Read
.rdata:000115D0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000115D0 _rdata          segment para public 'DATA' use32
.rdata:000115D0                 assume cs:_rdata
.rdata:000115D0                 ;org 115D0h
.rdata:000115D0 ; COMDAT (pick any)
.rdata:000115D0                 public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
.rdata:000115D0 ; `string'
.rdata:000115D0 ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
.rdata:000115D0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &):loc_A36Eo
.rdata:000115D0                 unicode 0, <"Standard C++ Libraries Invalid Argument" && 0>,0
.rdata:0001162E                 align 10h
.rdata:0001162E _rdata          ends
.rdata:0001162E
.rdata:00011630 ; ===========================================================================
.rdata:00011630
.rdata:00011630 ; Segment type: Pure data
.rdata:00011630 ; Segment permissions: Read
.rdata:00011630 _rdata          segment dword public 'DATA' use32
.rdata:00011630                 assume cs:_rdata
.rdata:00011630                 ;org 11630h
.rdata:00011630 ; COMDAT (pick any)
.rdata:00011630                 public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
.rdata:00011630 ; `string'
.rdata:00011630 ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
.rdata:00011630                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+85o
.rdata:00011630                 unicode 0, <"invalid argument">,0
.rdata:00011656                 align 4
.rdata:00011656 _rdata          ends
.rdata:00011656
.rdata:00011658 ; ===========================================================================
.rdata:00011658
.rdata:00011658 ; Segment type: Pure data
.rdata:00011658 ; Segment permissions: Read
.rdata:00011658 _rdata          segment dword public 'DATA' use32
.rdata:00011658                 assume cs:_rdata
.rdata:00011658                 ;org 11658h
.rdata:00011658 ; COMDAT (pick any)
.rdata:00011658                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:00011658 ; char `string'[]
.rdata:00011658 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:00011658                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:00011658                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:00011658 _rdata          ends
.rdata:00011658
.rdata:00011668 ; ===========================================================================
.rdata:00011668
.rdata:00011668 ; Segment type: Pure data
.rdata:00011668 ; Segment permissions: Read
.rdata:00011668 _rdata          segment dword public 'DATA' use32
.rdata:00011668                 assume cs:_rdata
.rdata:00011668                 ;org 11668h
.rdata:00011668 ; COMDAT (pick any)
.rdata:00011668                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:00011668 ; char `string'[]
.rdata:00011668 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:00011668                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:00011668                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:00011668 _rdata          ends
.rdata:00011668
.rdata:00011680 ; ===========================================================================
.rdata:00011680
.rdata:00011680 ; Segment type: Pure data
.rdata:00011680 ; Segment permissions: Read
.rdata:00011680 _rdata          segment dword public 'DATA' use32
.rdata:00011680                 assume cs:_rdata
.rdata:00011680                 ;org 11680h
.rdata:00011680 ; COMDAT (pick any)
.rdata:00011680                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:00011680 ; char `string'[]
.rdata:00011680 ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:00011680                                         ; DATA XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::_Xlen(void)+7o
.rdata:00011680                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::_Xlen(void)+7o ...
.rdata:00011693                 align 4
.rdata:00011693 _rdata          ends
.rdata:00011693
.rdata:00011694 ; ===========================================================================
.rdata:00011694
.rdata:00011694 ; Segment type: Pure data
.rdata:00011694 ; Segment permissions: Read
.rdata:00011694 _rdata          segment dword public 'DATA' use32
.rdata:00011694                 assume cs:_rdata
.rdata:00011694                 ;org 11694h
.rdata:00011694 ; COMDAT (pick any)
.rdata:00011694                 public ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:00011694 ; wchar_t `string'
.rdata:00011694 ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:00011694                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+34o
.rdata:00011694                 unicode 0, <string iterators incompatible>,0
.rdata:00011694 _rdata          ends
.rdata:00011694
.rdata:000116D0 ; ===========================================================================
.rdata:000116D0
.rdata:000116D0 ; Segment type: Pure data
.rdata:000116D0 ; Segment permissions: Read
.rdata:000116D0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000116D0 _rdata          segment para public 'DATA' use32
.rdata:000116D0                 assume cs:_rdata
.rdata:000116D0                 ;org 116D0h
.rdata:000116D0 ; COMDAT (pick any)
.rdata:000116D0                 public ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:000116D0 ; `string'
.rdata:000116D0 ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:000116D0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+80o
.rdata:000116D0                 unicode 0, <std::_String_const_iterator>
.rdata:000116D0                 dw 3Ch
.rdata:000116D0                 unicode 0, <class std::_String_val>
.rdata:000116D0                 dw 3Ch
.rdata:000116D0                 unicode 0, <struct std::_Simple_types>
.rdata:000116D0                 dw 3Ch
.rdata:000116D0                 unicode 0, <wchar_t>
.rdata:000116D0                 dw 3Eh
.rdata:000116D0                 unicode 0, < >
.rdata:000116D0                 dw 3Eh
.rdata:000116D0                 unicode 0, < >
.rdata:000116D0                 dw 3Eh
.rdata:000116D0                 unicode 0, <::_Compat>,0
.rdata:00011796                 align 4
.rdata:00011796 _rdata          ends
.rdata:00011796
.rdata:00011798 ; ===========================================================================
.rdata:00011798
.rdata:00011798 ; Segment type: Pure data
.rdata:00011798 ; Segment permissions: Read
.rdata:00011798 _rdata          segment dword public 'DATA' use32
.rdata:00011798                 assume cs:_rdata
.rdata:00011798                 ;org 11798h
.rdata:00011798 ; COMDAT (pick any)
.rdata:00011798                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:00011798 ; wchar_t `string'
.rdata:00011798 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:00011798                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:00011798                                         ; std::_Debug_pointer<FunctionParser *>(FunctionParser * *,wchar_t const *,uint)+11o ...
.rdata:00011798                 unicode 0, <invalid null pointer>,0
.rdata:000117C2                 align 4
.rdata:000117C2 _rdata          ends
.rdata:000117C2
.rdata:000117C4 ; ===========================================================================
.rdata:000117C4
.rdata:000117C4 ; Segment type: Pure data
.rdata:000117C4 ; Segment permissions: Read
.rdata:000117C4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000117C4 _rdata          segment para public 'DATA' use32
.rdata:000117C4                 assume cs:_rdata
.rdata:000117C4                 ;org 117C4h
.rdata:000117C4 ; COMDAT (pick any)
.rdata:000117C4                 public ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
.rdata:000117C4 ; wchar_t `string'
.rdata:000117C4 ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@:
.rdata:000117C4                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+62o
.rdata:000117C4                 unicode 0, <string iterator not dereferencable>,0
.rdata:0001180A                 align 4
.rdata:0001180A _rdata          ends
.rdata:0001180A
.rdata:0001180C ; ===========================================================================
.rdata:0001180C
.rdata:0001180C ; Segment type: Pure data
.rdata:0001180C ; Segment permissions: Read
.rdata:0001180C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0001180C _rdata          segment para public 'DATA' use32
.rdata:0001180C                 assume cs:_rdata
.rdata:0001180C                 ;org 1180Ch
.rdata:0001180C ; COMDAT (pick any)
.rdata:0001180C                 public ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0001180C ; `string'
.rdata:0001180C ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0001180C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+A8o
.rdata:0001180C                 unicode 0, <std::_String_const_iterator>
.rdata:0001180C                 dw 3Ch
.rdata:0001180C                 unicode 0, <class std::_String_val>
.rdata:0001180C                 dw 3Ch
.rdata:0001180C                 unicode 0, <struct std::_Simple_types>
.rdata:0001180C                 dw 3Ch
.rdata:0001180C                 unicode 0, <wchar_t>
.rdata:0001180C                 dw 3Eh
.rdata:0001180C                 unicode 0, < >
.rdata:0001180C                 dw 3Eh
.rdata:0001180C                 unicode 0, < >
.rdata:0001180C                 dw 3Eh
.rdata:0001180C                 unicode 0, <::operator *>,0
.rdata:0001180C _rdata          ends
.rdata:0001180C
.rdata:000118D8 ; ===========================================================================
.rdata:000118D8
.rdata:000118D8 ; Segment type: Pure data
.rdata:000118D8 ; Segment permissions: Read
.rdata:000118D8 _rdata          segment dword public 'DATA' use32
.rdata:000118D8                 assume cs:_rdata
.rdata:000118D8                 ;org 118D8h
.rdata:000118D8 ; COMDAT (pick any)
.rdata:000118D8                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:000118D8 ; wchar_t `string'
.rdata:000118D8 ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:000118D8                                         ; DATA XREF: std::_Debug_range2<FunctionParser * *>(FunctionParser * *,FunctionParser * *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:000118D8                                         ; std::_Debug_range2<std::pair<int,int> *>(std::pair<int,int> *,std::pair<int,int> *,wchar_t const *,uint,std::random_access_iterator_tag)+43o ...
.rdata:000118D8                 unicode 0, <invalid iterator range>,0
.rdata:00011906                 align 4
.rdata:00011906 _rdata          ends
.rdata:00011906
.rdata:00011908 ; ===========================================================================
.rdata:00011908
.rdata:00011908 ; Segment type: Pure data
.rdata:00011908 ; Segment permissions: Read
.rdata:00011908 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00011908 _rdata          segment para public 'DATA' use32
.rdata:00011908                 assume cs:_rdata
.rdata:00011908                 ;org 11908h
.rdata:00011908 ; COMDAT (pick any)
.rdata:00011908                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00011908 ; wchar_t `string'
.rdata:00011908 ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00011908                                         ; DATA XREF: std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+2Fo
.rdata:00011908                                         ; std::_Uninit_copy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+49o ...
.rdata:00011908                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00011908                 unicode 0, <clude\xmemory>,0
.rdata:00011996                 align 4
.rdata:00011996 _rdata          ends
.rdata:00011996
.rdata$r:00011998 ; ===========================================================================
.rdata$r:00011998
.rdata$r:00011998 ; Segment type: Pure data
.rdata$r:00011998 ; Segment permissions: Read
.rdata$r:00011998 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011998                 assume cs:_rdata$r
.rdata$r:00011998                 ;org 11998h
.rdata$r:00011998 ; COMDAT (pick any)
.rdata$r:00011998                 public ??_R4error_category@std@@6B@
.rdata$r:00011998 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:00011998 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:00010E18o
.rdata$r:00011999                 db    0
.rdata$r:0001199A                 db    0
.rdata$r:0001199B                 db    0
.rdata$r:0001199C                 db    0
.rdata$r:0001199D                 db    0
.rdata$r:0001199E                 db    0
.rdata$r:0001199F                 db    0
.rdata$r:000119A0                 db    0
.rdata$r:000119A1                 db    0
.rdata$r:000119A2                 db    0
.rdata$r:000119A3                 db    0
.rdata$r:000119A4                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:000119A8                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000119A8 _rdata$r        ends
.rdata$r:000119A8
.data$r:000119AC ; ===========================================================================
.data$r:000119AC
.data$r:000119AC ; Segment type: Pure data
.data$r:000119AC ; Segment permissions: Read/Write
.data$r:000119AC _data$r         segment dword public 'DATA' use32
.data$r:000119AC                 assume cs:_data$r
.data$r:000119AC                 ;org 119ACh
.data$r:000119AC ; COMDAT (pick any)
.data$r:000119AC                 public ??_R0?AVerror_category@std@@@8
.data$r:000119AC ; class std::error_category `RTTI Type Descriptor'
.data$r:000119AC ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000119AC                                         ; DATA XREF: .rdata$r:000119A4o
.data$r:000119AC                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000119AC                                         ; const type_info::`vftable'
.data$r:000119B0                 db    0
.data$r:000119B1                 db    0
.data$r:000119B2                 db    0
.data$r:000119B3                 db    0
.data$r:000119B4                 db  2Eh ; .
.data$r:000119B5                 db  3Fh ; ?
.data$r:000119B6                 db  41h ; A
.data$r:000119B7                 db  56h ; V
.data$r:000119B8                 db  65h ; e
.data$r:000119B9                 db  72h ; r
.data$r:000119BA                 db  72h ; r
.data$r:000119BB                 db  6Fh ; o
.data$r:000119BC                 db  72h ; r
.data$r:000119BD                 db  5Fh ; _
.data$r:000119BE                 db  63h ; c
.data$r:000119BF                 db  61h ; a
.data$r:000119C0                 db  74h ; t
.data$r:000119C1                 db  65h ; e
.data$r:000119C2                 db  67h ; g
.data$r:000119C3                 db  6Fh ; o
.data$r:000119C4                 db  72h ; r
.data$r:000119C5                 db  79h ; y
.data$r:000119C6                 db  40h ; @
.data$r:000119C7                 db  73h ; s
.data$r:000119C8                 db  74h ; t
.data$r:000119C9                 db  64h ; d
.data$r:000119CA                 db  40h ; @
.data$r:000119CB                 db  40h ; @
.data$r:000119CC                 db    0
.data$r:000119CD                 align 10h
.data$r:000119CD _data$r         ends
.data$r:000119CD
.rdata$r:000119D0 ; ===========================================================================
.rdata$r:000119D0
.rdata$r:000119D0 ; Segment type: Pure data
.rdata$r:000119D0 ; Segment permissions: Read
.rdata$r:000119D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000119D0                 assume cs:_rdata$r
.rdata$r:000119D0                 ;org 119D0h
.rdata$r:000119D0 ; COMDAT (pick any)
.rdata$r:000119D0                 public ??_R3error_category@std@@8
.rdata$r:000119D0 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000119D0 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:000119A8o
.rdata$r:000119D0                                         ; .rdata$r:00011A00o
.rdata$r:000119D1                 db    0
.rdata$r:000119D2                 db    0
.rdata$r:000119D3                 db    0
.rdata$r:000119D4                 db    0
.rdata$r:000119D5                 db    0
.rdata$r:000119D6                 db    0
.rdata$r:000119D7                 db    0
.rdata$r:000119D8                 db    1
.rdata$r:000119D9                 db    0
.rdata$r:000119DA                 db    0
.rdata$r:000119DB                 db    0
.rdata$r:000119DC                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:000119DC _rdata$r        ends
.rdata$r:000119DC
.rdata$r:000119E0 ; ===========================================================================
.rdata$r:000119E0
.rdata$r:000119E0 ; Segment type: Pure data
.rdata$r:000119E0 ; Segment permissions: Read
.rdata$r:000119E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000119E0                 assume cs:_rdata$r
.rdata$r:000119E0                 ;org 119E0h
.rdata$r:000119E0 ; COMDAT (pick any)
.rdata$r:000119E0                 public ??_R2error_category@std@@8
.rdata$r:000119E0 ; std::error_category::`RTTI Base Class Array'
.rdata$r:000119E0 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:000119E0                                         ; DATA XREF: .rdata$r:000119DCo
.rdata$r:000119E0                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:000119E4                 db    0
.rdata$r:000119E5                 align 4
.rdata$r:000119E5 _rdata$r        ends
.rdata$r:000119E5
.rdata$r:000119E8 ; ===========================================================================
.rdata$r:000119E8
.rdata$r:000119E8 ; Segment type: Pure data
.rdata$r:000119E8 ; Segment permissions: Read
.rdata$r:000119E8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000119E8                 assume cs:_rdata$r
.rdata$r:000119E8                 ;org 119E8h
.rdata$r:000119E8 ; COMDAT (pick any)
.rdata$r:000119E8                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:000119E8 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000119E8 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:000119E8                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:000119E8                                         ; .rdata$r:00011A58o ...
.rdata$r:000119E8                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:000119EC                 db    0
.rdata$r:000119ED                 db    0
.rdata$r:000119EE                 db    0
.rdata$r:000119EF                 db    0
.rdata$r:000119F0                 db    0
.rdata$r:000119F1                 db    0
.rdata$r:000119F2                 db    0
.rdata$r:000119F3                 db    0
.rdata$r:000119F4                 db 0FFh
.rdata$r:000119F5                 db 0FFh
.rdata$r:000119F6                 db 0FFh
.rdata$r:000119F7                 db 0FFh
.rdata$r:000119F8                 db    0
.rdata$r:000119F9                 db    0
.rdata$r:000119FA                 db    0
.rdata$r:000119FB                 db    0
.rdata$r:000119FC                 db  40h ; @
.rdata$r:000119FD                 db    0
.rdata$r:000119FE                 db    0
.rdata$r:000119FF                 db    0
.rdata$r:00011A00                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011A00 _rdata$r        ends
.rdata$r:00011A00
.rdata$r:00011A04 ; ===========================================================================
.rdata$r:00011A04
.rdata$r:00011A04 ; Segment type: Pure data
.rdata$r:00011A04 ; Segment permissions: Read
.rdata$r:00011A04 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011A04                 assume cs:_rdata$r
.rdata$r:00011A04                 ;org 11A04h
.rdata$r:00011A04 ; COMDAT (pick any)
.rdata$r:00011A04                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:00011A04 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:00011A04 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:00011A04                                         ; DATA XREF: .rdata:00010E34o
.rdata$r:00011A05                 db    0
.rdata$r:00011A06                 db    0
.rdata$r:00011A07                 db    0
.rdata$r:00011A08                 db    0
.rdata$r:00011A09                 db    0
.rdata$r:00011A0A                 db    0
.rdata$r:00011A0B                 db    0
.rdata$r:00011A0C                 db    0
.rdata$r:00011A0D                 db    0
.rdata$r:00011A0E                 db    0
.rdata$r:00011A0F                 db    0
.rdata$r:00011A10                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00011A14                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011A14 _rdata$r        ends
.rdata$r:00011A14
.data$r:00011A18 ; ===========================================================================
.data$r:00011A18
.data$r:00011A18 ; Segment type: Pure data
.data$r:00011A18 ; Segment permissions: Read/Write
.data$r:00011A18 _data$r         segment dword public 'DATA' use32
.data$r:00011A18                 assume cs:_data$r
.data$r:00011A18                 ;org 11A18h
.data$r:00011A18 ; COMDAT (pick any)
.data$r:00011A18                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:00011A18 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:00011A18 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00011A18                                         ; DATA XREF: .rdata$r:00011A10o
.data$r:00011A18                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011A18                                         ; const type_info::`vftable'
.data$r:00011A1C                 align 10h
.data$r:00011A20 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:00011A42                 align 4
.data$r:00011A42 _data$r         ends
.data$r:00011A42
.rdata$r:00011A44 ; ===========================================================================
.rdata$r:00011A44
.rdata$r:00011A44 ; Segment type: Pure data
.rdata$r:00011A44 ; Segment permissions: Read
.rdata$r:00011A44 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011A44                 assume cs:_rdata$r
.rdata$r:00011A44                 ;org 11A44h
.rdata$r:00011A44 ; COMDAT (pick any)
.rdata$r:00011A44                 public ??_R3_Generic_error_category@std@@8
.rdata$r:00011A44 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011A44 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:00011A44                                         ; DATA XREF: .rdata$r:00011A14o
.rdata$r:00011A44                                         ; .rdata$r:00011A78o
.rdata$r:00011A45                 db    0
.rdata$r:00011A46                 db    0
.rdata$r:00011A47                 db    0
.rdata$r:00011A48                 db    0
.rdata$r:00011A49                 db    0
.rdata$r:00011A4A                 db    0
.rdata$r:00011A4B                 db    0
.rdata$r:00011A4C                 db    2
.rdata$r:00011A4D                 db    0
.rdata$r:00011A4E                 db    0
.rdata$r:00011A4F                 db    0
.rdata$r:00011A50                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:00011A50 _rdata$r        ends
.rdata$r:00011A50
.rdata$r:00011A54 ; ===========================================================================
.rdata$r:00011A54
.rdata$r:00011A54 ; Segment type: Pure data
.rdata$r:00011A54 ; Segment permissions: Read
.rdata$r:00011A54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011A54                 assume cs:_rdata$r
.rdata$r:00011A54                 ;org 11A54h
.rdata$r:00011A54 ; COMDAT (pick any)
.rdata$r:00011A54                 public ??_R2_Generic_error_category@std@@8
.rdata$r:00011A54 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:00011A54 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:00011A54                                         ; DATA XREF: .rdata$r:00011A50o
.rdata$r:00011A54                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011A58                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011A5C                 db    0
.rdata$r:00011A5D                 align 10h
.rdata$r:00011A5D _rdata$r        ends
.rdata$r:00011A5D
.rdata$r:00011A60 ; ===========================================================================
.rdata$r:00011A60
.rdata$r:00011A60 ; Segment type: Pure data
.rdata$r:00011A60 ; Segment permissions: Read
.rdata$r:00011A60 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011A60                 assume cs:_rdata$r
.rdata$r:00011A60                 ;org 11A60h
.rdata$r:00011A60 ; COMDAT (pick any)
.rdata$r:00011A60                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:00011A60 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011A60 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:00011A60                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:00011A60                                         ; .rdata$r:00011AD0o ...
.rdata$r:00011A60                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00011A64                 db    1
.rdata$r:00011A65                 db    0
.rdata$r:00011A66                 db    0
.rdata$r:00011A67                 db    0
.rdata$r:00011A68                 db    0
.rdata$r:00011A69                 db    0
.rdata$r:00011A6A                 db    0
.rdata$r:00011A6B                 db    0
.rdata$r:00011A6C                 db 0FFh
.rdata$r:00011A6D                 db 0FFh
.rdata$r:00011A6E                 db 0FFh
.rdata$r:00011A6F                 db 0FFh
.rdata$r:00011A70                 db    0
.rdata$r:00011A71                 db    0
.rdata$r:00011A72                 db    0
.rdata$r:00011A73                 db    0
.rdata$r:00011A74                 db  40h ; @
.rdata$r:00011A75                 db    0
.rdata$r:00011A76                 db    0
.rdata$r:00011A77                 db    0
.rdata$r:00011A78                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011A78 _rdata$r        ends
.rdata$r:00011A78
.rdata$r:00011A7C ; ===========================================================================
.rdata$r:00011A7C
.rdata$r:00011A7C ; Segment type: Pure data
.rdata$r:00011A7C ; Segment permissions: Read
.rdata$r:00011A7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011A7C                 assume cs:_rdata$r
.rdata$r:00011A7C                 ;org 11A7Ch
.rdata$r:00011A7C ; COMDAT (pick any)
.rdata$r:00011A7C                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:00011A7C ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:00011A7C ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:00011A7C                                         ; DATA XREF: .rdata:00010E68o
.rdata$r:00011A7D                 db    0
.rdata$r:00011A7E                 db    0
.rdata$r:00011A7F                 db    0
.rdata$r:00011A80                 db    0
.rdata$r:00011A81                 db    0
.rdata$r:00011A82                 db    0
.rdata$r:00011A83                 db    0
.rdata$r:00011A84                 db    0
.rdata$r:00011A85                 db    0
.rdata$r:00011A86                 db    0
.rdata$r:00011A87                 db    0
.rdata$r:00011A88                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00011A8C                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011A8C _rdata$r        ends
.rdata$r:00011A8C
.data$r:00011A90 ; ===========================================================================
.data$r:00011A90
.data$r:00011A90 ; Segment type: Pure data
.data$r:00011A90 ; Segment permissions: Read/Write
.data$r:00011A90 _data$r         segment dword public 'DATA' use32
.data$r:00011A90                 assume cs:_data$r
.data$r:00011A90                 ;org 11A90h
.data$r:00011A90 ; COMDAT (pick any)
.data$r:00011A90                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:00011A90 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:00011A90 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00011A90                                         ; DATA XREF: .rdata$r:00011A88o
.data$r:00011A90                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011A90                                         ; const type_info::`vftable'
.data$r:00011A94                 align 8
.data$r:00011A98 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:00011ABB                 align 4
.data$r:00011ABB _data$r         ends
.data$r:00011ABB
.rdata$r:00011ABC ; ===========================================================================
.rdata$r:00011ABC
.rdata$r:00011ABC ; Segment type: Pure data
.rdata$r:00011ABC ; Segment permissions: Read
.rdata$r:00011ABC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011ABC                 assume cs:_rdata$r
.rdata$r:00011ABC                 ;org 11ABCh
.rdata$r:00011ABC ; COMDAT (pick any)
.rdata$r:00011ABC                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:00011ABC ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011ABC ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:00011ABC                                         ; DATA XREF: .rdata$r:00011A8Co
.rdata$r:00011ABC                                         ; .rdata$r:00011AF4o
.rdata$r:00011ABD                 db    0
.rdata$r:00011ABE                 db    0
.rdata$r:00011ABF                 db    0
.rdata$r:00011AC0                 db    0
.rdata$r:00011AC1                 db    0
.rdata$r:00011AC2                 db    0
.rdata$r:00011AC3                 db    0
.rdata$r:00011AC4                 db    3
.rdata$r:00011AC5                 db    0
.rdata$r:00011AC6                 db    0
.rdata$r:00011AC7                 db    0
.rdata$r:00011AC8                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00011AC8 _rdata$r        ends
.rdata$r:00011AC8
.rdata$r:00011ACC ; ===========================================================================
.rdata$r:00011ACC
.rdata$r:00011ACC ; Segment type: Pure data
.rdata$r:00011ACC ; Segment permissions: Read
.rdata$r:00011ACC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011ACC                 assume cs:_rdata$r
.rdata$r:00011ACC                 ;org 11ACCh
.rdata$r:00011ACC ; COMDAT (pick any)
.rdata$r:00011ACC                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:00011ACC ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00011ACC ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00011ACC                                         ; DATA XREF: .rdata$r:00011AC8o
.rdata$r:00011ACC                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011AD0                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011AD4                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011AD8                 db    0
.rdata$r:00011AD9                 align 4
.rdata$r:00011AD9 _rdata$r        ends
.rdata$r:00011AD9
.rdata$r:00011ADC ; ===========================================================================
.rdata$r:00011ADC
.rdata$r:00011ADC ; Segment type: Pure data
.rdata$r:00011ADC ; Segment permissions: Read
.rdata$r:00011ADC _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011ADC                 assume cs:_rdata$r
.rdata$r:00011ADC                 ;org 11ADCh
.rdata$r:00011ADC ; COMDAT (pick any)
.rdata$r:00011ADC                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00011ADC ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011ADC ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:00011ADC                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:00011ADC                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00011AE0                 db    2
.rdata$r:00011AE1                 db    0
.rdata$r:00011AE2                 db    0
.rdata$r:00011AE3                 db    0
.rdata$r:00011AE4                 db    0
.rdata$r:00011AE5                 db    0
.rdata$r:00011AE6                 db    0
.rdata$r:00011AE7                 db    0
.rdata$r:00011AE8                 db 0FFh
.rdata$r:00011AE9                 db 0FFh
.rdata$r:00011AEA                 db 0FFh
.rdata$r:00011AEB                 db 0FFh
.rdata$r:00011AEC                 db    0
.rdata$r:00011AED                 db    0
.rdata$r:00011AEE                 db    0
.rdata$r:00011AEF                 db    0
.rdata$r:00011AF0                 db  40h ; @
.rdata$r:00011AF1                 db    0
.rdata$r:00011AF2                 db    0
.rdata$r:00011AF3                 db    0
.rdata$r:00011AF4                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011AF4 _rdata$r        ends
.rdata$r:00011AF4
.rdata$r:00011AF8 ; ===========================================================================
.rdata$r:00011AF8
.rdata$r:00011AF8 ; Segment type: Pure data
.rdata$r:00011AF8 ; Segment permissions: Read
.rdata$r:00011AF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011AF8                 assume cs:_rdata$r
.rdata$r:00011AF8                 ;org 11AF8h
.rdata$r:00011AF8 ; COMDAT (pick any)
.rdata$r:00011AF8                 public ??_R4_System_error_category@std@@6B@
.rdata$r:00011AF8 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:00011AF8 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:00010EA8o
.rdata$r:00011AF9                 db    0
.rdata$r:00011AFA                 db    0
.rdata$r:00011AFB                 db    0
.rdata$r:00011AFC                 db    0
.rdata$r:00011AFD                 db    0
.rdata$r:00011AFE                 db    0
.rdata$r:00011AFF                 db    0
.rdata$r:00011B00                 db    0
.rdata$r:00011B01                 db    0
.rdata$r:00011B02                 db    0
.rdata$r:00011B03                 db    0
.rdata$r:00011B04                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00011B08                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011B08 _rdata$r        ends
.rdata$r:00011B08
.data$r:00011B0C ; ===========================================================================
.data$r:00011B0C
.data$r:00011B0C ; Segment type: Pure data
.data$r:00011B0C ; Segment permissions: Read/Write
.data$r:00011B0C _data$r         segment dword public 'DATA' use32
.data$r:00011B0C                 assume cs:_data$r
.data$r:00011B0C                 ;org 11B0Ch
.data$r:00011B0C ; COMDAT (pick any)
.data$r:00011B0C                 public ??_R0?AV_System_error_category@std@@@8
.data$r:00011B0C ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:00011B0C ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00011B0C                                         ; DATA XREF: .rdata$r:00011B04o
.data$r:00011B0C                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011B0C                                         ; const type_info::`vftable'
.data$r:00011B10                 db    0
.data$r:00011B11                 db    0
.data$r:00011B12                 db    0
.data$r:00011B13                 db    0
.data$r:00011B14                 db  2Eh ; .
.data$r:00011B15                 db  3Fh ; ?
.data$r:00011B16                 db  41h ; A
.data$r:00011B17                 db  56h ; V
.data$r:00011B18                 db  5Fh ; _
.data$r:00011B19                 db  53h ; S
.data$r:00011B1A                 db  79h ; y
.data$r:00011B1B                 db  73h ; s
.data$r:00011B1C                 db  74h ; t
.data$r:00011B1D                 db  65h ; e
.data$r:00011B1E                 db  6Dh ; m
.data$r:00011B1F                 db  5Fh ; _
.data$r:00011B20                 db  65h ; e
.data$r:00011B21                 db  72h ; r
.data$r:00011B22                 db  72h ; r
.data$r:00011B23                 db  6Fh ; o
.data$r:00011B24                 db  72h ; r
.data$r:00011B25                 db  5Fh ; _
.data$r:00011B26                 db  63h ; c
.data$r:00011B27                 db  61h ; a
.data$r:00011B28                 db  74h ; t
.data$r:00011B29                 db  65h ; e
.data$r:00011B2A                 db  67h ; g
.data$r:00011B2B                 db  6Fh ; o
.data$r:00011B2C                 db  72h ; r
.data$r:00011B2D                 db  79h ; y
.data$r:00011B2E                 db  40h ; @
.data$r:00011B2F                 db  73h ; s
.data$r:00011B30                 db  74h ; t
.data$r:00011B31                 db  64h ; d
.data$r:00011B32                 db  40h ; @
.data$r:00011B33                 db  40h ; @
.data$r:00011B34                 db    0
.data$r:00011B35                 align 4
.data$r:00011B35 _data$r         ends
.data$r:00011B35
.rdata$r:00011B38 ; ===========================================================================
.rdata$r:00011B38
.rdata$r:00011B38 ; Segment type: Pure data
.rdata$r:00011B38 ; Segment permissions: Read
.rdata$r:00011B38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011B38                 assume cs:_rdata$r
.rdata$r:00011B38                 ;org 11B38h
.rdata$r:00011B38 ; COMDAT (pick any)
.rdata$r:00011B38                 public ??_R3_System_error_category@std@@8
.rdata$r:00011B38 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011B38 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:00011B08o
.rdata$r:00011B38                                         ; .rdata$r:00011B70o
.rdata$r:00011B39                 db    0
.rdata$r:00011B3A                 db    0
.rdata$r:00011B3B                 db    0
.rdata$r:00011B3C                 db    0
.rdata$r:00011B3D                 db    0
.rdata$r:00011B3E                 db    0
.rdata$r:00011B3F                 db    0
.rdata$r:00011B40                 db    3
.rdata$r:00011B41                 db    0
.rdata$r:00011B42                 db    0
.rdata$r:00011B43                 db    0
.rdata$r:00011B44                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00011B44 _rdata$r        ends
.rdata$r:00011B44
.rdata$r:00011B48 ; ===========================================================================
.rdata$r:00011B48
.rdata$r:00011B48 ; Segment type: Pure data
.rdata$r:00011B48 ; Segment permissions: Read
.rdata$r:00011B48 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011B48                 assume cs:_rdata$r
.rdata$r:00011B48                 ;org 11B48h
.rdata$r:00011B48 ; COMDAT (pick any)
.rdata$r:00011B48                 public ??_R2_System_error_category@std@@8
.rdata$r:00011B48 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00011B48 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00011B48                                         ; DATA XREF: .rdata$r:00011B44o
.rdata$r:00011B48                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011B4C                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011B50                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011B54                 db    0
.rdata$r:00011B55                 align 4
.rdata$r:00011B55 _rdata$r        ends
.rdata$r:00011B55
.rdata$r:00011B58 ; ===========================================================================
.rdata$r:00011B58
.rdata$r:00011B58 ; Segment type: Pure data
.rdata$r:00011B58 ; Segment permissions: Read
.rdata$r:00011B58 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011B58                 assume cs:_rdata$r
.rdata$r:00011B58                 ;org 11B58h
.rdata$r:00011B58 ; COMDAT (pick any)
.rdata$r:00011B58                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00011B58 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011B58 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:00011B58                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:00011B58                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00011B5C                 db    2
.rdata$r:00011B5D                 db    0
.rdata$r:00011B5E                 db    0
.rdata$r:00011B5F                 db    0
.rdata$r:00011B60                 db    0
.rdata$r:00011B61                 db    0
.rdata$r:00011B62                 db    0
.rdata$r:00011B63                 db    0
.rdata$r:00011B64                 db 0FFh
.rdata$r:00011B65                 db 0FFh
.rdata$r:00011B66                 db 0FFh
.rdata$r:00011B67                 db 0FFh
.rdata$r:00011B68                 db    0
.rdata$r:00011B69                 db    0
.rdata$r:00011B6A                 db    0
.rdata$r:00011B6B                 db    0
.rdata$r:00011B6C                 db  40h ; @
.rdata$r:00011B6D                 db    0
.rdata$r:00011B6E                 db    0
.rdata$r:00011B6F                 db    0
.rdata$r:00011B70                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011B70 _rdata$r        ends
.rdata$r:00011B70
.rdata$r:00011B74 ; ===========================================================================
.rdata$r:00011B74
.rdata$r:00011B74 ; Segment type: Pure data
.rdata$r:00011B74 ; Segment permissions: Read
.rdata$r:00011B74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011B74                 assume cs:_rdata$r
.rdata$r:00011B74                 ;org 11B74h
.rdata$r:00011B74 ; COMDAT (pick any)
.rdata$r:00011B74                 public ??_R4TiXmlDocument@@6B@
.rdata$r:00011B74 ; const TiXmlDocument::`RTTI Complete Object Locator'
.rdata$r:00011B74 ??_R4TiXmlDocument@@6B@ db    0         ; DATA XREF: .rdata:00010EE8o
.rdata$r:00011B75                 db    0
.rdata$r:00011B76                 db    0
.rdata$r:00011B77                 db    0
.rdata$r:00011B78                 db    0
.rdata$r:00011B79                 db    0
.rdata$r:00011B7A                 db    0
.rdata$r:00011B7B                 db    0
.rdata$r:00011B7C                 db    0
.rdata$r:00011B7D                 db    0
.rdata$r:00011B7E                 db    0
.rdata$r:00011B7F                 db    0
.rdata$r:00011B80                 dd offset ??_R0?AVTiXmlDocument@@@8 ; TiXmlDocument `RTTI Type Descriptor'
.rdata$r:00011B84                 dd offset ??_R3TiXmlDocument@@8 ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011B84 _rdata$r        ends
.rdata$r:00011B84
.data$r:00011B88 ; ===========================================================================
.data$r:00011B88
.data$r:00011B88 ; Segment type: Pure data
.data$r:00011B88 ; Segment permissions: Read/Write
.data$r:00011B88 _data$r         segment dword public 'DATA' use32
.data$r:00011B88                 assume cs:_data$r
.data$r:00011B88                 ;org 11B88h
.data$r:00011B88 ; COMDAT (pick any)
.data$r:00011B88                 public ??_R0?AVTiXmlDocument@@@8
.data$r:00011B88 ; class TiXmlDocument `RTTI Type Descriptor'
.data$r:00011B88 ??_R0?AVTiXmlDocument@@@8 dd offset ??_7type_info@@6B@
.data$r:00011B88                                         ; DATA XREF: .rdata$r:00011B80o
.data$r:00011B88                                         ; .rdata$r:TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011B88                                         ; const type_info::`vftable'
.data$r:00011B8C                 align 10h
.data$r:00011B90 a_?avtixmldocum db '.?AVTiXmlDocument@@',0
.data$r:00011B90 _data$r         ends
.data$r:00011B90
.rdata$r:00011BA4 ; ===========================================================================
.rdata$r:00011BA4
.rdata$r:00011BA4 ; Segment type: Pure data
.rdata$r:00011BA4 ; Segment permissions: Read
.rdata$r:00011BA4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011BA4                 assume cs:_rdata$r
.rdata$r:00011BA4                 ;org 11BA4h
.rdata$r:00011BA4 ; COMDAT (pick any)
.rdata$r:00011BA4                 public ??_R3TiXmlDocument@@8
.rdata$r:00011BA4 ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011BA4 ??_R3TiXmlDocument@@8 db    0           ; DATA XREF: .rdata$r:00011B84o
.rdata$r:00011BA4                                         ; .rdata$r:00011BDCo
.rdata$r:00011BA5                 db    0
.rdata$r:00011BA6                 db    0
.rdata$r:00011BA7                 db    0
.rdata$r:00011BA8                 db    0
.rdata$r:00011BA9                 db    0
.rdata$r:00011BAA                 db    0
.rdata$r:00011BAB                 db    0
.rdata$r:00011BAC                 db    3
.rdata$r:00011BAD                 db    0
.rdata$r:00011BAE                 db    0
.rdata$r:00011BAF                 db    0
.rdata$r:00011BB0                 dd offset ??_R2TiXmlDocument@@8 ; TiXmlDocument::`RTTI Base Class Array'
.rdata$r:00011BB0 _rdata$r        ends
.rdata$r:00011BB0
.rdata$r:00011BB4 ; ===========================================================================
.rdata$r:00011BB4
.rdata$r:00011BB4 ; Segment type: Pure data
.rdata$r:00011BB4 ; Segment permissions: Read
.rdata$r:00011BB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011BB4                 assume cs:_rdata$r
.rdata$r:00011BB4                 ;org 11BB4h
.rdata$r:00011BB4 ; COMDAT (pick any)
.rdata$r:00011BB4                 public ??_R2TiXmlDocument@@8
.rdata$r:00011BB4 ; TiXmlDocument::`RTTI Base Class Array'
.rdata$r:00011BB4 ??_R2TiXmlDocument@@8 dd offset ??_R1A@?0A@EA@TiXmlDocument@@8
.rdata$r:00011BB4                                         ; DATA XREF: .rdata$r:00011BB0o
.rdata$r:00011BB4                                         ; TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011BB8                 dd offset ??_R1A@?0A@EA@TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011BBC                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011BC0                 db    0
.rdata$r:00011BC1                 align 4
.rdata$r:00011BC1 _rdata$r        ends
.rdata$r:00011BC1
.rdata$r:00011BC4 ; ===========================================================================
.rdata$r:00011BC4
.rdata$r:00011BC4 ; Segment type: Pure data
.rdata$r:00011BC4 ; Segment permissions: Read
.rdata$r:00011BC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011BC4                 assume cs:_rdata$r
.rdata$r:00011BC4                 ;org 11BC4h
.rdata$r:00011BC4 ; COMDAT (pick any)
.rdata$r:00011BC4                 public ??_R1A@?0A@EA@TiXmlDocument@@8
.rdata$r:00011BC4 ; TiXmlDocument::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011BC4 ??_R1A@?0A@EA@TiXmlDocument@@8 dd offset ??_R0?AVTiXmlDocument@@@8
.rdata$r:00011BC4                                         ; DATA XREF: .rdata$r:TiXmlDocument::`RTTI Base Class Array'o
.rdata$r:00011BC4                                         ; TiXmlDocument `RTTI Type Descriptor'
.rdata$r:00011BC8                 db    2
.rdata$r:00011BC9                 db    0
.rdata$r:00011BCA                 db    0
.rdata$r:00011BCB                 db    0
.rdata$r:00011BCC                 db    0
.rdata$r:00011BCD                 db    0
.rdata$r:00011BCE                 db    0
.rdata$r:00011BCF                 db    0
.rdata$r:00011BD0                 db 0FFh
.rdata$r:00011BD1                 db 0FFh
.rdata$r:00011BD2                 db 0FFh
.rdata$r:00011BD3                 db 0FFh
.rdata$r:00011BD4                 db    0
.rdata$r:00011BD5                 db    0
.rdata$r:00011BD6                 db    0
.rdata$r:00011BD7                 db    0
.rdata$r:00011BD8                 db  40h ; @
.rdata$r:00011BD9                 db    0
.rdata$r:00011BDA                 db    0
.rdata$r:00011BDB                 db    0
.rdata$r:00011BDC                 dd offset ??_R3TiXmlDocument@@8 ; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011BDC _rdata$r        ends
.rdata$r:00011BDC
.rdata$r:00011BE0 ; ===========================================================================
.rdata$r:00011BE0
.rdata$r:00011BE0 ; Segment type: Pure data
.rdata$r:00011BE0 ; Segment permissions: Read
.rdata$r:00011BE0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011BE0                 assume cs:_rdata$r
.rdata$r:00011BE0                 ;org 11BE0h
.rdata$r:00011BE0 ; COMDAT (pick any)
.rdata$r:00011BE0                 public ??_R1A@?0A@EA@TiXmlNode@@8
.rdata$r:00011BE0 ; TiXmlNode::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011BE0 ??_R1A@?0A@EA@TiXmlNode@@8 dd offset ??_R0?AVTiXmlNode@@@8
.rdata$r:00011BE0                                         ; DATA XREF: .rdata$r:00011BB8o
.rdata$r:00011BE0                                         ; .rdata$r:TiXmlNode::`RTTI Base Class Array'o
.rdata$r:00011BE0                                         ; TiXmlNode `RTTI Type Descriptor'
.rdata$r:00011BE4                 db    1
.rdata$r:00011BE5                 db    0
.rdata$r:00011BE6                 db    0
.rdata$r:00011BE7                 db    0
.rdata$r:00011BE8                 db    0
.rdata$r:00011BE9                 db    0
.rdata$r:00011BEA                 db    0
.rdata$r:00011BEB                 db    0
.rdata$r:00011BEC                 db 0FFh
.rdata$r:00011BED                 db 0FFh
.rdata$r:00011BEE                 db 0FFh
.rdata$r:00011BEF                 db 0FFh
.rdata$r:00011BF0                 db    0
.rdata$r:00011BF1                 db    0
.rdata$r:00011BF2                 db    0
.rdata$r:00011BF3                 db    0
.rdata$r:00011BF4                 db  40h ; @
.rdata$r:00011BF5                 db    0
.rdata$r:00011BF6                 db    0
.rdata$r:00011BF7                 db    0
.rdata$r:00011BF8                 dd offset ??_R3TiXmlNode@@8 ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011BF8 _rdata$r        ends
.rdata$r:00011BF8
.data$r:00011BFC ; ===========================================================================
.data$r:00011BFC
.data$r:00011BFC ; Segment type: Pure data
.data$r:00011BFC ; Segment permissions: Read/Write
.data$r:00011BFC _data$r         segment dword public 'DATA' use32
.data$r:00011BFC                 assume cs:_data$r
.data$r:00011BFC                 ;org 11BFCh
.data$r:00011BFC ; COMDAT (pick any)
.data$r:00011BFC                 public ??_R0?AVTiXmlNode@@@8
.data$r:00011BFC ; class TiXmlNode `RTTI Type Descriptor'
.data$r:00011BFC ??_R0?AVTiXmlNode@@@8 dd offset ??_7type_info@@6B@
.data$r:00011BFC                                         ; DATA XREF: .rdata$r:TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011BFC                                         ; const type_info::`vftable'
.data$r:00011C00                 db    0
.data$r:00011C01                 db    0
.data$r:00011C02                 db    0
.data$r:00011C03                 db    0
.data$r:00011C04                 db  2Eh ; .
.data$r:00011C05                 db  3Fh ; ?
.data$r:00011C06                 db  41h ; A
.data$r:00011C07                 db  56h ; V
.data$r:00011C08                 db  54h ; T
.data$r:00011C09                 db  69h ; i
.data$r:00011C0A                 db  58h ; X
.data$r:00011C0B                 db  6Dh ; m
.data$r:00011C0C                 db  6Ch ; l
.data$r:00011C0D                 db  4Eh ; N
.data$r:00011C0E                 db  6Fh ; o
.data$r:00011C0F                 db  64h ; d
.data$r:00011C10                 db  65h ; e
.data$r:00011C11                 db  40h ; @
.data$r:00011C12                 db  40h ; @
.data$r:00011C13                 db    0
.data$r:00011C13 _data$r         ends
.data$r:00011C13
.rdata$r:00011C14 ; ===========================================================================
.rdata$r:00011C14
.rdata$r:00011C14 ; Segment type: Pure data
.rdata$r:00011C14 ; Segment permissions: Read
.rdata$r:00011C14 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011C14                 assume cs:_rdata$r
.rdata$r:00011C14                 ;org 11C14h
.rdata$r:00011C14 ; COMDAT (pick any)
.rdata$r:00011C14                 public ??_R3TiXmlNode@@8
.rdata$r:00011C14 ; TiXmlNode::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011C14 ??_R3TiXmlNode@@8 db    0               ; DATA XREF: .rdata$r:00011BF8o
.rdata$r:00011C15                 db    0
.rdata$r:00011C16                 db    0
.rdata$r:00011C17                 db    0
.rdata$r:00011C18                 db    0
.rdata$r:00011C19                 db    0
.rdata$r:00011C1A                 db    0
.rdata$r:00011C1B                 db    0
.rdata$r:00011C1C                 db    2
.rdata$r:00011C1D                 db    0
.rdata$r:00011C1E                 db    0
.rdata$r:00011C1F                 db    0
.rdata$r:00011C20                 dd offset ??_R2TiXmlNode@@8 ; TiXmlNode::`RTTI Base Class Array'
.rdata$r:00011C20 _rdata$r        ends
.rdata$r:00011C20
.rdata$r:00011C24 ; ===========================================================================
.rdata$r:00011C24
.rdata$r:00011C24 ; Segment type: Pure data
.rdata$r:00011C24 ; Segment permissions: Read
.rdata$r:00011C24 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011C24                 assume cs:_rdata$r
.rdata$r:00011C24                 ;org 11C24h
.rdata$r:00011C24 ; COMDAT (pick any)
.rdata$r:00011C24                 public ??_R2TiXmlNode@@8
.rdata$r:00011C24 ; TiXmlNode::`RTTI Base Class Array'
.rdata$r:00011C24 ??_R2TiXmlNode@@8 dd offset ??_R1A@?0A@EA@TiXmlNode@@8
.rdata$r:00011C24                                         ; DATA XREF: .rdata$r:00011C20o
.rdata$r:00011C24                                         ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011C28                 dd offset ??_R1A@?0A@EA@TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011C2C                 db    0
.rdata$r:00011C2D                 align 10h
.rdata$r:00011C2D _rdata$r        ends
.rdata$r:00011C2D
.rdata$r:00011C30 ; ===========================================================================
.rdata$r:00011C30
.rdata$r:00011C30 ; Segment type: Pure data
.rdata$r:00011C30 ; Segment permissions: Read
.rdata$r:00011C30 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011C30                 assume cs:_rdata$r
.rdata$r:00011C30                 ;org 11C30h
.rdata$r:00011C30 ; COMDAT (pick any)
.rdata$r:00011C30                 public ??_R1A@?0A@EA@TiXmlBase@@8
.rdata$r:00011C30 ; TiXmlBase::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011C30 ??_R1A@?0A@EA@TiXmlBase@@8 dd offset ??_R0?AVTiXmlBase@@@8
.rdata$r:00011C30                                         ; DATA XREF: .rdata$r:00011BBCo
.rdata$r:00011C30                                         ; .rdata$r:00011C28o ...
.rdata$r:00011C30                                         ; TiXmlBase `RTTI Type Descriptor'
.rdata$r:00011C34                 db    0
.rdata$r:00011C35                 db    0
.rdata$r:00011C36                 db    0
.rdata$r:00011C37                 db    0
.rdata$r:00011C38                 db    0
.rdata$r:00011C39                 db    0
.rdata$r:00011C3A                 db    0
.rdata$r:00011C3B                 db    0
.rdata$r:00011C3C                 db 0FFh
.rdata$r:00011C3D                 db 0FFh
.rdata$r:00011C3E                 db 0FFh
.rdata$r:00011C3F                 db 0FFh
.rdata$r:00011C40                 db    0
.rdata$r:00011C41                 db    0
.rdata$r:00011C42                 db    0
.rdata$r:00011C43                 db    0
.rdata$r:00011C44                 db  40h ; @
.rdata$r:00011C45                 db    0
.rdata$r:00011C46                 db    0
.rdata$r:00011C47                 db    0
.rdata$r:00011C48                 dd offset ??_R3TiXmlBase@@8 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011C48 _rdata$r        ends
.rdata$r:00011C48
.data$r:00011C4C ; ===========================================================================
.data$r:00011C4C
.data$r:00011C4C ; Segment type: Pure data
.data$r:00011C4C ; Segment permissions: Read/Write
.data$r:00011C4C _data$r         segment dword public 'DATA' use32
.data$r:00011C4C                 assume cs:_data$r
.data$r:00011C4C                 ;org 11C4Ch
.data$r:00011C4C ; COMDAT (pick any)
.data$r:00011C4C                 public ??_R0?AVTiXmlBase@@@8
.data$r:00011C4C ; class TiXmlBase `RTTI Type Descriptor'
.data$r:00011C4C ??_R0?AVTiXmlBase@@@8 dd offset ??_7type_info@@6B@
.data$r:00011C4C                                         ; DATA XREF: .rdata$r:TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011C4C                                         ; const type_info::`vftable'
.data$r:00011C50                 db    0
.data$r:00011C51                 db    0
.data$r:00011C52                 db    0
.data$r:00011C53                 db    0
.data$r:00011C54                 db  2Eh ; .
.data$r:00011C55                 db  3Fh ; ?
.data$r:00011C56                 db  41h ; A
.data$r:00011C57                 db  56h ; V
.data$r:00011C58                 db  54h ; T
.data$r:00011C59                 db  69h ; i
.data$r:00011C5A                 db  58h ; X
.data$r:00011C5B                 db  6Dh ; m
.data$r:00011C5C                 db  6Ch ; l
.data$r:00011C5D                 db  42h ; B
.data$r:00011C5E                 db  61h ; a
.data$r:00011C5F                 db  73h ; s
.data$r:00011C60                 db  65h ; e
.data$r:00011C61                 db  40h ; @
.data$r:00011C62                 db  40h ; @
.data$r:00011C63                 db    0
.data$r:00011C63 _data$r         ends
.data$r:00011C63
.rdata$r:00011C64 ; ===========================================================================
.rdata$r:00011C64
.rdata$r:00011C64 ; Segment type: Pure data
.rdata$r:00011C64 ; Segment permissions: Read
.rdata$r:00011C64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011C64                 assume cs:_rdata$r
.rdata$r:00011C64                 ;org 11C64h
.rdata$r:00011C64 ; COMDAT (pick any)
.rdata$r:00011C64                 public ??_R3TiXmlBase@@8
.rdata$r:00011C64 ; TiXmlBase::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011C64 ??_R3TiXmlBase@@8 db    0               ; DATA XREF: .rdata$r:00011C48o
.rdata$r:00011C65                 db    0
.rdata$r:00011C66                 db    0
.rdata$r:00011C67                 db    0
.rdata$r:00011C68                 db    0
.rdata$r:00011C69                 db    0
.rdata$r:00011C6A                 db    0
.rdata$r:00011C6B                 db    0
.rdata$r:00011C6C                 db    1
.rdata$r:00011C6D                 db    0
.rdata$r:00011C6E                 db    0
.rdata$r:00011C6F                 db    0
.rdata$r:00011C70                 dd offset ??_R2TiXmlBase@@8 ; TiXmlBase::`RTTI Base Class Array'
.rdata$r:00011C70 _rdata$r        ends
.rdata$r:00011C70
.rdata$r:00011C74 ; ===========================================================================
.rdata$r:00011C74
.rdata$r:00011C74 ; Segment type: Pure data
.rdata$r:00011C74 ; Segment permissions: Read
.rdata$r:00011C74 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011C74                 assume cs:_rdata$r
.rdata$r:00011C74                 ;org 11C74h
.rdata$r:00011C74 ; COMDAT (pick any)
.rdata$r:00011C74                 public ??_R2TiXmlBase@@8
.rdata$r:00011C74 ; TiXmlBase::`RTTI Base Class Array'
.rdata$r:00011C74 ??_R2TiXmlBase@@8 dd offset ??_R1A@?0A@EA@TiXmlBase@@8
.rdata$r:00011C74                                         ; DATA XREF: .rdata$r:00011C70o
.rdata$r:00011C74                                         ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011C78                 db    0
.rdata$r:00011C79                 align 4
.rdata$r:00011C79 _rdata$r        ends
.rdata$r:00011C79
.rdata$r:00011C7C ; ===========================================================================
.rdata$r:00011C7C
.rdata$r:00011C7C ; Segment type: Pure data
.rdata$r:00011C7C ; Segment permissions: Read
.rdata$r:00011C7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011C7C                 assume cs:_rdata$r
.rdata$r:00011C7C                 ;org 11C7Ch
.rdata$r:00011C7C ; COMDAT (pick any)
.rdata$r:00011C7C                 public ??_R4FunctionParser@@6B@
.rdata$r:00011C7C ; const FunctionParser::`RTTI Complete Object Locator'
.rdata$r:00011C7C ??_R4FunctionParser@@6B@ db    0        ; DATA XREF: .rdata:00010F08o
.rdata$r:00011C7D                 db    0
.rdata$r:00011C7E                 db    0
.rdata$r:00011C7F                 db    0
.rdata$r:00011C80                 db    0
.rdata$r:00011C81                 db    0
.rdata$r:00011C82                 db    0
.rdata$r:00011C83                 db    0
.rdata$r:00011C84                 db    0
.rdata$r:00011C85                 db    0
.rdata$r:00011C86                 db    0
.rdata$r:00011C87                 db    0
.rdata$r:00011C88                 dd offset ??_R0?AVFunctionParser@@@8 ; FunctionParser `RTTI Type Descriptor'
.rdata$r:00011C8C                 dd offset ??_R3FunctionParser@@8 ; FunctionParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011C8C _rdata$r        ends
.rdata$r:00011C8C
.data$r:00011C90 ; ===========================================================================
.data$r:00011C90
.data$r:00011C90 ; Segment type: Pure data
.data$r:00011C90 ; Segment permissions: Read/Write
.data$r:00011C90 _data$r         segment dword public 'DATA' use32
.data$r:00011C90                 assume cs:_data$r
.data$r:00011C90                 ;org 11C90h
.data$r:00011C90 ; COMDAT (pick any)
.data$r:00011C90                 public ??_R0?AVFunctionParser@@@8
.data$r:00011C90 ; class FunctionParser `RTTI Type Descriptor'
.data$r:00011C90 ??_R0?AVFunctionParser@@@8 dd offset ??_7type_info@@6B@
.data$r:00011C90                                         ; DATA XREF: .rdata$r:00011C88o
.data$r:00011C90                                         ; .rdata$r:FunctionParser::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011C90                                         ; const type_info::`vftable'
.data$r:00011C94                 align 8
.data$r:00011C98 a_?avfunctionpa db '.?AVFunctionParser@@',0
.data$r:00011CAD                 align 10h
.data$r:00011CAD _data$r         ends
.data$r:00011CAD
.rdata$r:00011CB0 ; ===========================================================================
.rdata$r:00011CB0
.rdata$r:00011CB0 ; Segment type: Pure data
.rdata$r:00011CB0 ; Segment permissions: Read
.rdata$r:00011CB0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011CB0                 assume cs:_rdata$r
.rdata$r:00011CB0                 ;org 11CB0h
.rdata$r:00011CB0 ; COMDAT (pick any)
.rdata$r:00011CB0                 public ??_R3FunctionParser@@8
.rdata$r:00011CB0 ; FunctionParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011CB0 ??_R3FunctionParser@@8 db    0          ; DATA XREF: .rdata$r:00011C8Co
.rdata$r:00011CB0                                         ; .rdata$r:00011CE0o
.rdata$r:00011CB1                 db    0
.rdata$r:00011CB2                 db    0
.rdata$r:00011CB3                 db    0
.rdata$r:00011CB4                 db    0
.rdata$r:00011CB5                 db    0
.rdata$r:00011CB6                 db    0
.rdata$r:00011CB7                 db    0
.rdata$r:00011CB8                 db    1
.rdata$r:00011CB9                 db    0
.rdata$r:00011CBA                 db    0
.rdata$r:00011CBB                 db    0
.rdata$r:00011CBC                 dd offset ??_R2FunctionParser@@8 ; FunctionParser::`RTTI Base Class Array'
.rdata$r:00011CBC _rdata$r        ends
.rdata$r:00011CBC
.rdata$r:00011CC0 ; ===========================================================================
.rdata$r:00011CC0
.rdata$r:00011CC0 ; Segment type: Pure data
.rdata$r:00011CC0 ; Segment permissions: Read
.rdata$r:00011CC0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011CC0                 assume cs:_rdata$r
.rdata$r:00011CC0                 ;org 11CC0h
.rdata$r:00011CC0 ; COMDAT (pick any)
.rdata$r:00011CC0                 public ??_R2FunctionParser@@8
.rdata$r:00011CC0 ; FunctionParser::`RTTI Base Class Array'
.rdata$r:00011CC0 ??_R2FunctionParser@@8 dd offset ??_R1A@?0A@EA@FunctionParser@@8
.rdata$r:00011CC0                                         ; DATA XREF: .rdata$r:00011CBCo
.rdata$r:00011CC0                                         ; FunctionParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011CC4                 db    0
.rdata$r:00011CC5                 align 4
.rdata$r:00011CC5 _rdata$r        ends
.rdata$r:00011CC5
.rdata$r:00011CC8 ; ===========================================================================
.rdata$r:00011CC8
.rdata$r:00011CC8 ; Segment type: Pure data
.rdata$r:00011CC8 ; Segment permissions: Read
.rdata$r:00011CC8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011CC8                 assume cs:_rdata$r
.rdata$r:00011CC8                 ;org 11CC8h
.rdata$r:00011CC8 ; COMDAT (pick any)
.rdata$r:00011CC8                 public ??_R1A@?0A@EA@FunctionParser@@8
.rdata$r:00011CC8 ; FunctionParser::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011CC8 ??_R1A@?0A@EA@FunctionParser@@8 dd offset ??_R0?AVFunctionParser@@@8
.rdata$r:00011CC8                                         ; DATA XREF: .rdata$r:FunctionParser::`RTTI Base Class Array'o
.rdata$r:00011CC8                                         ; .rdata$r:00011D30o ...
.rdata$r:00011CC8                                         ; FunctionParser `RTTI Type Descriptor'
.rdata$r:00011CCC                 db    0
.rdata$r:00011CCD                 db    0
.rdata$r:00011CCE                 db    0
.rdata$r:00011CCF                 db    0
.rdata$r:00011CD0                 db    0
.rdata$r:00011CD1                 db    0
.rdata$r:00011CD2                 db    0
.rdata$r:00011CD3                 db    0
.rdata$r:00011CD4                 db 0FFh
.rdata$r:00011CD5                 db 0FFh
.rdata$r:00011CD6                 db 0FFh
.rdata$r:00011CD7                 db 0FFh
.rdata$r:00011CD8                 db    0
.rdata$r:00011CD9                 db    0
.rdata$r:00011CDA                 db    0
.rdata$r:00011CDB                 db    0
.rdata$r:00011CDC                 db  40h ; @
.rdata$r:00011CDD                 db    0
.rdata$r:00011CDE                 db    0
.rdata$r:00011CDF                 db    0
.rdata$r:00011CE0                 dd offset ??_R3FunctionParser@@8 ; FunctionParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011CE0 _rdata$r        ends
.rdata$r:00011CE0
.rdata$r:00011CE4 ; ===========================================================================
.rdata$r:00011CE4
.rdata$r:00011CE4 ; Segment type: Pure data
.rdata$r:00011CE4 ; Segment permissions: Read
.rdata$r:00011CE4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011CE4                 assume cs:_rdata$r
.rdata$r:00011CE4                 ;org 11CE4h
.rdata$r:00011CE4 ; COMDAT (pick any)
.rdata$r:00011CE4                 public ??_R4FunctionZoneParser@@6B@
.rdata$r:00011CE4 ; const FunctionZoneParser::`RTTI Complete Object Locator'
.rdata$r:00011CE4 ??_R4FunctionZoneParser@@6B@ db    0    ; DATA XREF: .rdata:00010F10o
.rdata$r:00011CE5                 db    0
.rdata$r:00011CE6                 db    0
.rdata$r:00011CE7                 db    0
.rdata$r:00011CE8                 db    0
.rdata$r:00011CE9                 db    0
.rdata$r:00011CEA                 db    0
.rdata$r:00011CEB                 db    0
.rdata$r:00011CEC                 db    0
.rdata$r:00011CED                 db    0
.rdata$r:00011CEE                 db    0
.rdata$r:00011CEF                 db    0
.rdata$r:00011CF0                 dd offset ??_R0?AVFunctionZoneParser@@@8 ; FunctionZoneParser `RTTI Type Descriptor'
.rdata$r:00011CF4                 dd offset ??_R3FunctionZoneParser@@8 ; FunctionZoneParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011CF4 _rdata$r        ends
.rdata$r:00011CF4
.data$r:00011CF8 ; ===========================================================================
.data$r:00011CF8
.data$r:00011CF8 ; Segment type: Pure data
.data$r:00011CF8 ; Segment permissions: Read/Write
.data$r:00011CF8 _data$r         segment dword public 'DATA' use32
.data$r:00011CF8                 assume cs:_data$r
.data$r:00011CF8                 ;org 11CF8h
.data$r:00011CF8 ; COMDAT (pick any)
.data$r:00011CF8                 public ??_R0?AVFunctionZoneParser@@@8
.data$r:00011CF8 ; class FunctionZoneParser `RTTI Type Descriptor'
.data$r:00011CF8 ??_R0?AVFunctionZoneParser@@@8 dd offset ??_7type_info@@6B@
.data$r:00011CF8                                         ; DATA XREF: .rdata$r:00011CF0o
.data$r:00011CF8                                         ; .rdata$r:FunctionZoneParser::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011CF8                                         ; const type_info::`vftable'
.data$r:00011CFC                 align 10h
.data$r:00011D00 a_?avfunctionzo db '.?AVFunctionZoneParser@@',0
.data$r:00011D19                 align 4
.data$r:00011D19 _data$r         ends
.data$r:00011D19
.rdata$r:00011D1C ; ===========================================================================
.rdata$r:00011D1C
.rdata$r:00011D1C ; Segment type: Pure data
.rdata$r:00011D1C ; Segment permissions: Read
.rdata$r:00011D1C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011D1C                 assume cs:_rdata$r
.rdata$r:00011D1C                 ;org 11D1Ch
.rdata$r:00011D1C ; COMDAT (pick any)
.rdata$r:00011D1C                 public ??_R3FunctionZoneParser@@8
.rdata$r:00011D1C ; FunctionZoneParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011D1C ??_R3FunctionZoneParser@@8 db    0      ; DATA XREF: .rdata$r:00011CF4o
.rdata$r:00011D1C                                         ; .rdata$r:00011D50o
.rdata$r:00011D1D                 db    0
.rdata$r:00011D1E                 db    0
.rdata$r:00011D1F                 db    0
.rdata$r:00011D20                 db    0
.rdata$r:00011D21                 db    0
.rdata$r:00011D22                 db    0
.rdata$r:00011D23                 db    0
.rdata$r:00011D24                 db    2
.rdata$r:00011D25                 db    0
.rdata$r:00011D26                 db    0
.rdata$r:00011D27                 db    0
.rdata$r:00011D28                 dd offset ??_R2FunctionZoneParser@@8 ; FunctionZoneParser::`RTTI Base Class Array'
.rdata$r:00011D28 _rdata$r        ends
.rdata$r:00011D28
.rdata$r:00011D2C ; ===========================================================================
.rdata$r:00011D2C
.rdata$r:00011D2C ; Segment type: Pure data
.rdata$r:00011D2C ; Segment permissions: Read
.rdata$r:00011D2C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011D2C                 assume cs:_rdata$r
.rdata$r:00011D2C                 ;org 11D2Ch
.rdata$r:00011D2C ; COMDAT (pick any)
.rdata$r:00011D2C                 public ??_R2FunctionZoneParser@@8
.rdata$r:00011D2C ; FunctionZoneParser::`RTTI Base Class Array'
.rdata$r:00011D2C ??_R2FunctionZoneParser@@8 dd offset ??_R1A@?0A@EA@FunctionZoneParser@@8
.rdata$r:00011D2C                                         ; DATA XREF: .rdata$r:00011D28o
.rdata$r:00011D2C                                         ; FunctionZoneParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011D30                 dd offset ??_R1A@?0A@EA@FunctionParser@@8 ; FunctionParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011D34                 db    0
.rdata$r:00011D35                 align 4
.rdata$r:00011D35 _rdata$r        ends
.rdata$r:00011D35
.rdata$r:00011D38 ; ===========================================================================
.rdata$r:00011D38
.rdata$r:00011D38 ; Segment type: Pure data
.rdata$r:00011D38 ; Segment permissions: Read
.rdata$r:00011D38 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011D38                 assume cs:_rdata$r
.rdata$r:00011D38                 ;org 11D38h
.rdata$r:00011D38 ; COMDAT (pick any)
.rdata$r:00011D38                 public ??_R1A@?0A@EA@FunctionZoneParser@@8
.rdata$r:00011D38 ; FunctionZoneParser::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011D38 ??_R1A@?0A@EA@FunctionZoneParser@@8 dd offset ??_R0?AVFunctionZoneParser@@@8
.rdata$r:00011D38                                         ; DATA XREF: .rdata$r:FunctionZoneParser::`RTTI Base Class Array'o
.rdata$r:00011D38                                         ; .rdata$r:00011E0Co
.rdata$r:00011D38                                         ; FunctionZoneParser `RTTI Type Descriptor'
.rdata$r:00011D3C                 db    1
.rdata$r:00011D3D                 db    0
.rdata$r:00011D3E                 db    0
.rdata$r:00011D3F                 db    0
.rdata$r:00011D40                 db    0
.rdata$r:00011D41                 db    0
.rdata$r:00011D42                 db    0
.rdata$r:00011D43                 db    0
.rdata$r:00011D44                 db 0FFh
.rdata$r:00011D45                 db 0FFh
.rdata$r:00011D46                 db 0FFh
.rdata$r:00011D47                 db 0FFh
.rdata$r:00011D48                 db    0
.rdata$r:00011D49                 db    0
.rdata$r:00011D4A                 db    0
.rdata$r:00011D4B                 db    0
.rdata$r:00011D4C                 db  40h ; @
.rdata$r:00011D4D                 db    0
.rdata$r:00011D4E                 db    0
.rdata$r:00011D4F                 db    0
.rdata$r:00011D50                 dd offset ??_R3FunctionZoneParser@@8 ; FunctionZoneParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011D50 _rdata$r        ends
.rdata$r:00011D50
.rdata$r:00011D54 ; ===========================================================================
.rdata$r:00011D54
.rdata$r:00011D54 ; Segment type: Pure data
.rdata$r:00011D54 ; Segment permissions: Read
.rdata$r:00011D54 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011D54                 assume cs:_rdata$r
.rdata$r:00011D54                 ;org 11D54h
.rdata$r:00011D54 ; COMDAT (pick any)
.rdata$r:00011D54                 public ??_R4FunctionUnitParser@@6B@
.rdata$r:00011D54 ; const FunctionUnitParser::`RTTI Complete Object Locator'
.rdata$r:00011D54 ??_R4FunctionUnitParser@@6B@ db    0    ; DATA XREF: .rdata:00010F18o
.rdata$r:00011D55                 db    0
.rdata$r:00011D56                 db    0
.rdata$r:00011D57                 db    0
.rdata$r:00011D58                 db    0
.rdata$r:00011D59                 db    0
.rdata$r:00011D5A                 db    0
.rdata$r:00011D5B                 db    0
.rdata$r:00011D5C                 db    0
.rdata$r:00011D5D                 db    0
.rdata$r:00011D5E                 db    0
.rdata$r:00011D5F                 db    0
.rdata$r:00011D60                 dd offset ??_R0?AVFunctionUnitParser@@@8 ; FunctionUnitParser `RTTI Type Descriptor'
.rdata$r:00011D64                 dd offset ??_R3FunctionUnitParser@@8 ; FunctionUnitParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011D64 _rdata$r        ends
.rdata$r:00011D64
.data$r:00011D68 ; ===========================================================================
.data$r:00011D68
.data$r:00011D68 ; Segment type: Pure data
.data$r:00011D68 ; Segment permissions: Read/Write
.data$r:00011D68 _data$r         segment dword public 'DATA' use32
.data$r:00011D68                 assume cs:_data$r
.data$r:00011D68                 ;org 11D68h
.data$r:00011D68 ; COMDAT (pick any)
.data$r:00011D68                 public ??_R0?AVFunctionUnitParser@@@8
.data$r:00011D68 ; class FunctionUnitParser `RTTI Type Descriptor'
.data$r:00011D68 ??_R0?AVFunctionUnitParser@@@8 dd offset ??_7type_info@@6B@
.data$r:00011D68                                         ; DATA XREF: .rdata$r:00011D60o
.data$r:00011D68                                         ; .rdata$r:FunctionUnitParser::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011D68                                         ; const type_info::`vftable'
.data$r:00011D6C                 align 10h
.data$r:00011D70 a_?avfunctionun db '.?AVFunctionUnitParser@@',0
.data$r:00011D89                 align 4
.data$r:00011D89 _data$r         ends
.data$r:00011D89
.rdata$r:00011D8C ; ===========================================================================
.rdata$r:00011D8C
.rdata$r:00011D8C ; Segment type: Pure data
.rdata$r:00011D8C ; Segment permissions: Read
.rdata$r:00011D8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011D8C                 assume cs:_rdata$r
.rdata$r:00011D8C                 ;org 11D8Ch
.rdata$r:00011D8C ; COMDAT (pick any)
.rdata$r:00011D8C                 public ??_R3FunctionUnitParser@@8
.rdata$r:00011D8C ; FunctionUnitParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011D8C ??_R3FunctionUnitParser@@8 db    0      ; DATA XREF: .rdata$r:00011D64o
.rdata$r:00011D8C                                         ; .rdata$r:00011DC0o
.rdata$r:00011D8D                 db    0
.rdata$r:00011D8E                 db    0
.rdata$r:00011D8F                 db    0
.rdata$r:00011D90                 db    0
.rdata$r:00011D91                 db    0
.rdata$r:00011D92                 db    0
.rdata$r:00011D93                 db    0
.rdata$r:00011D94                 db    2
.rdata$r:00011D95                 db    0
.rdata$r:00011D96                 db    0
.rdata$r:00011D97                 db    0
.rdata$r:00011D98                 dd offset ??_R2FunctionUnitParser@@8 ; FunctionUnitParser::`RTTI Base Class Array'
.rdata$r:00011D98 _rdata$r        ends
.rdata$r:00011D98
.rdata$r:00011D9C ; ===========================================================================
.rdata$r:00011D9C
.rdata$r:00011D9C ; Segment type: Pure data
.rdata$r:00011D9C ; Segment permissions: Read
.rdata$r:00011D9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011D9C                 assume cs:_rdata$r
.rdata$r:00011D9C                 ;org 11D9Ch
.rdata$r:00011D9C ; COMDAT (pick any)
.rdata$r:00011D9C                 public ??_R2FunctionUnitParser@@8
.rdata$r:00011D9C ; FunctionUnitParser::`RTTI Base Class Array'
.rdata$r:00011D9C ??_R2FunctionUnitParser@@8 dd offset ??_R1A@?0A@EA@FunctionUnitParser@@8
.rdata$r:00011D9C                                         ; DATA XREF: .rdata$r:00011D98o
.rdata$r:00011D9C                                         ; FunctionUnitParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011DA0                 dd offset ??_R1A@?0A@EA@FunctionParser@@8 ; FunctionParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011DA4                 db    0
.rdata$r:00011DA5                 align 4
.rdata$r:00011DA5 _rdata$r        ends
.rdata$r:00011DA5
.rdata$r:00011DA8 ; ===========================================================================
.rdata$r:00011DA8
.rdata$r:00011DA8 ; Segment type: Pure data
.rdata$r:00011DA8 ; Segment permissions: Read
.rdata$r:00011DA8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011DA8                 assume cs:_rdata$r
.rdata$r:00011DA8                 ;org 11DA8h
.rdata$r:00011DA8 ; COMDAT (pick any)
.rdata$r:00011DA8                 public ??_R1A@?0A@EA@FunctionUnitParser@@8
.rdata$r:00011DA8 ; FunctionUnitParser::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011DA8 ??_R1A@?0A@EA@FunctionUnitParser@@8 dd offset ??_R0?AVFunctionUnitParser@@@8
.rdata$r:00011DA8                                         ; DATA XREF: .rdata$r:FunctionUnitParser::`RTTI Base Class Array'o
.rdata$r:00011DA8                                         ; FunctionUnitParser `RTTI Type Descriptor'
.rdata$r:00011DAC                 db    1
.rdata$r:00011DAD                 db    0
.rdata$r:00011DAE                 db    0
.rdata$r:00011DAF                 db    0
.rdata$r:00011DB0                 db    0
.rdata$r:00011DB1                 db    0
.rdata$r:00011DB2                 db    0
.rdata$r:00011DB3                 db    0
.rdata$r:00011DB4                 db 0FFh
.rdata$r:00011DB5                 db 0FFh
.rdata$r:00011DB6                 db 0FFh
.rdata$r:00011DB7                 db 0FFh
.rdata$r:00011DB8                 db    0
.rdata$r:00011DB9                 db    0
.rdata$r:00011DBA                 db    0
.rdata$r:00011DBB                 db    0
.rdata$r:00011DBC                 db  40h ; @
.rdata$r:00011DBD                 db    0
.rdata$r:00011DBE                 db    0
.rdata$r:00011DBF                 db    0
.rdata$r:00011DC0                 dd offset ??_R3FunctionUnitParser@@8 ; FunctionUnitParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011DC0 _rdata$r        ends
.rdata$r:00011DC0
.rdata$r:00011DC4 ; ===========================================================================
.rdata$r:00011DC4
.rdata$r:00011DC4 ; Segment type: Pure data
.rdata$r:00011DC4 ; Segment permissions: Read
.rdata$r:00011DC4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011DC4                 assume cs:_rdata$r
.rdata$r:00011DC4                 ;org 11DC4h
.rdata$r:00011DC4 ; COMDAT (pick any)
.rdata$r:00011DC4                 public ??_R4FunctionMixParser@@6B@
.rdata$r:00011DC4 ; const FunctionMixParser::`RTTI Complete Object Locator'
.rdata$r:00011DC4 ??_R4FunctionMixParser@@6B@ db    0     ; DATA XREF: .rdata:00010F20o
.rdata$r:00011DC5                 db    0
.rdata$r:00011DC6                 db    0
.rdata$r:00011DC7                 db    0
.rdata$r:00011DC8                 db    0
.rdata$r:00011DC9                 db    0
.rdata$r:00011DCA                 db    0
.rdata$r:00011DCB                 db    0
.rdata$r:00011DCC                 db    0
.rdata$r:00011DCD                 db    0
.rdata$r:00011DCE                 db    0
.rdata$r:00011DCF                 db    0
.rdata$r:00011DD0                 dd offset ??_R0?AVFunctionMixParser@@@8 ; FunctionMixParser `RTTI Type Descriptor'
.rdata$r:00011DD4                 dd offset ??_R3FunctionMixParser@@8 ; FunctionMixParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011DD4 _rdata$r        ends
.rdata$r:00011DD4
.data$r:00011DD8 ; ===========================================================================
.data$r:00011DD8
.data$r:00011DD8 ; Segment type: Pure data
.data$r:00011DD8 ; Segment permissions: Read/Write
.data$r:00011DD8 _data$r         segment dword public 'DATA' use32
.data$r:00011DD8                 assume cs:_data$r
.data$r:00011DD8                 ;org 11DD8h
.data$r:00011DD8 ; COMDAT (pick any)
.data$r:00011DD8                 public ??_R0?AVFunctionMixParser@@@8
.data$r:00011DD8 ; class FunctionMixParser `RTTI Type Descriptor'
.data$r:00011DD8 ??_R0?AVFunctionMixParser@@@8 dd offset ??_7type_info@@6B@
.data$r:00011DD8                                         ; DATA XREF: .rdata$r:00011DD0o
.data$r:00011DD8                                         ; .rdata$r:FunctionMixParser::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00011DD8                                         ; const type_info::`vftable'
.data$r:00011DDC                 align 10h
.data$r:00011DE0 a_?avfunctionmi db '.?AVFunctionMixParser@@',0
.data$r:00011DE0 _data$r         ends
.data$r:00011DE0
.rdata$r:00011DF8 ; ===========================================================================
.rdata$r:00011DF8
.rdata$r:00011DF8 ; Segment type: Pure data
.rdata$r:00011DF8 ; Segment permissions: Read
.rdata$r:00011DF8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011DF8                 assume cs:_rdata$r
.rdata$r:00011DF8                 ;org 11DF8h
.rdata$r:00011DF8 ; COMDAT (pick any)
.rdata$r:00011DF8                 public ??_R3FunctionMixParser@@8
.rdata$r:00011DF8 ; FunctionMixParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011DF8 ??_R3FunctionMixParser@@8 db    0       ; DATA XREF: .rdata$r:00011DD4o
.rdata$r:00011DF8                                         ; .rdata$r:00011E30o
.rdata$r:00011DF9                 db    0
.rdata$r:00011DFA                 db    0
.rdata$r:00011DFB                 db    0
.rdata$r:00011DFC                 db    0
.rdata$r:00011DFD                 db    0
.rdata$r:00011DFE                 db    0
.rdata$r:00011DFF                 db    0
.rdata$r:00011E00                 db    3
.rdata$r:00011E01                 db    0
.rdata$r:00011E02                 db    0
.rdata$r:00011E03                 db    0
.rdata$r:00011E04                 dd offset ??_R2FunctionMixParser@@8 ; FunctionMixParser::`RTTI Base Class Array'
.rdata$r:00011E04 _rdata$r        ends
.rdata$r:00011E04
.rdata$r:00011E08 ; ===========================================================================
.rdata$r:00011E08
.rdata$r:00011E08 ; Segment type: Pure data
.rdata$r:00011E08 ; Segment permissions: Read
.rdata$r:00011E08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011E08                 assume cs:_rdata$r
.rdata$r:00011E08                 ;org 11E08h
.rdata$r:00011E08 ; COMDAT (pick any)
.rdata$r:00011E08                 public ??_R2FunctionMixParser@@8
.rdata$r:00011E08 ; FunctionMixParser::`RTTI Base Class Array'
.rdata$r:00011E08 ??_R2FunctionMixParser@@8 dd offset ??_R1A@?0A@EA@FunctionMixParser@@8
.rdata$r:00011E08                                         ; DATA XREF: .rdata$r:00011E04o
.rdata$r:00011E08                                         ; FunctionMixParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011E0C                 dd offset ??_R1A@?0A@EA@FunctionZoneParser@@8 ; FunctionZoneParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011E10                 dd offset ??_R1A@?0A@EA@FunctionParser@@8 ; FunctionParser::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00011E14                 db    0
.rdata$r:00011E15                 align 4
.rdata$r:00011E15 _rdata$r        ends
.rdata$r:00011E15
.rdata$r:00011E18 ; ===========================================================================
.rdata$r:00011E18
.rdata$r:00011E18 ; Segment type: Pure data
.rdata$r:00011E18 ; Segment permissions: Read
.rdata$r:00011E18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00011E18                 assume cs:_rdata$r
.rdata$r:00011E18                 ;org 11E18h
.rdata$r:00011E18 ; COMDAT (pick any)
.rdata$r:00011E18                 public ??_R1A@?0A@EA@FunctionMixParser@@8
.rdata$r:00011E18 ; FunctionMixParser::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00011E18 ??_R1A@?0A@EA@FunctionMixParser@@8 dd offset ??_R0?AVFunctionMixParser@@@8
.rdata$r:00011E18                                         ; DATA XREF: .rdata$r:FunctionMixParser::`RTTI Base Class Array'o
.rdata$r:00011E18                                         ; FunctionMixParser `RTTI Type Descriptor'
.rdata$r:00011E1C                 db    2
.rdata$r:00011E1D                 db    0
.rdata$r:00011E1E                 db    0
.rdata$r:00011E1F                 db    0
.rdata$r:00011E20                 db    0
.rdata$r:00011E21                 db    0
.rdata$r:00011E22                 db    0
.rdata$r:00011E23                 db    0
.rdata$r:00011E24                 db 0FFh
.rdata$r:00011E25                 db 0FFh
.rdata$r:00011E26                 db 0FFh
.rdata$r:00011E27                 db 0FFh
.rdata$r:00011E28                 db    0
.rdata$r:00011E29                 db    0
.rdata$r:00011E2A                 db    0
.rdata$r:00011E2B                 db    0
.rdata$r:00011E2C                 db  40h ; @
.rdata$r:00011E2D                 db    0
.rdata$r:00011E2E                 db    0
.rdata$r:00011E2F                 db    0
.rdata$r:00011E30                 dd offset ??_R3FunctionMixParser@@8 ; FunctionMixParser::`RTTI Class Hierarchy Descriptor'
.rdata$r:00011E30 _rdata$r        ends
.rdata$r:00011E30
.CRT$XCU:00011E34 ; ===========================================================================
.CRT$XCU:00011E34
.CRT$XCU:00011E34 ; Segment type: Pure data
.CRT$XCU:00011E34 ; Segment permissions: Read
.CRT$XCU:00011E34 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00011E34                 assume cs:_CRT$XCU
.CRT$XCU:00011E34                 ;org 11E34h
.CRT$XCU:00011E34 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:00011E38 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:00011E3C _ignore$initializer$ dd offset ??__Eignore@std@@YAXXZ ; std::`dynamic initializer for 'ignore''(void)
.CRT$XCU:00011E40 __Tuple_alloc$initializer$ dd offset ??__E_Tuple_alloc@std@@YAXXZ ; std::`dynamic initializer for '_Tuple_alloc''(void)
.CRT$XCU:00011E40 _CRT$XCU        ends
.CRT$XCU:00011E40
.CRT$XCU:00011E44 ; ===========================================================================
.CRT$XCU:00011E44
.CRT$XCU:00011E44 ; Segment type: Pure data
.CRT$XCU:00011E44 ; Segment permissions: Read
.CRT$XCU:00011E44 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00011E44                 assume cs:_CRT$XCU
.CRT$XCU:00011E44                 ;org 11E44h
.CRT$XCU:00011E44 ; COMDAT (pick associative to section at 10ECC)
.CRT$XCU:00011E44 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:00011E44 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:00011E44 _CRT$XCU        ends
.CRT$XCU:00011E44
.CRT$XCU:00011E48 ; ===========================================================================
.CRT$XCU:00011E48
.CRT$XCU:00011E48 ; Segment type: Pure data
.CRT$XCU:00011E48 ; Segment permissions: Read
.CRT$XCU:00011E48 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00011E48                 assume cs:_CRT$XCU
.CRT$XCU:00011E48                 ;org 11E48h
.CRT$XCU:00011E48 ; COMDAT (pick associative to section at 10ED0)
.CRT$XCU:00011E48 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:00011E48 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:00011E48 _CRT$XCU        ends
.CRT$XCU:00011E48
.CRT$XCU:00011E4C ; ===========================================================================
.CRT$XCU:00011E4C
.CRT$XCU:00011E4C ; Segment type: Pure data
.CRT$XCU:00011E4C ; Segment permissions: Read
.CRT$XCU:00011E4C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00011E4C                 assume cs:_CRT$XCU
.CRT$XCU:00011E4C                 ;org 11E4Ch
.CRT$XCU:00011E4C ; COMDAT (pick associative to section at 10ED4)
.CRT$XCU:00011E4C ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:00011E4C ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:00011E4C _CRT$XCU        ends
.CRT$XCU:00011E4C
.CRT$XCU:00011E50 ; ===========================================================================
.CRT$XCU:00011E50
.CRT$XCU:00011E50 ; Segment type: Pure data
.CRT$XCU:00011E50 ; Segment permissions: Read
.CRT$XCU:00011E50 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00011E50                 assume cs:_CRT$XCU
.CRT$XCU:00011E50                 ;org 11E50h
.CRT$XCU:00011E50 ; COMDAT (pick associative to section at 10EDC)
.CRT$XCU:00011E50 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:00011E50 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:00011E50 _CRT$XCU        ends
.CRT$XCU:00011E50
.CRT$XCU:00011E54 ; ===========================================================================
.CRT$XCU:00011E54
.CRT$XCU:00011E54 ; Segment type: Pure data
.CRT$XCU:00011E54 ; Segment permissions: Read
.CRT$XCU:00011E54 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00011E54                 assume cs:_CRT$XCU
.CRT$XCU:00011E54                 ;org 11E54h
.CRT$XCU:00011E54 ; COMDAT (pick associative to section at 10EE0)
.CRT$XCU:00011E54 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:00011E54 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:00011E54 _CRT$XCU        ends
.CRT$XCU:00011E54
.CRT$XCU:00011E58 ; ===========================================================================
.CRT$XCU:00011E58
.CRT$XCU:00011E58 ; Segment type: Pure data
.CRT$XCU:00011E58 ; Segment permissions: Read
.CRT$XCU:00011E58 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00011E58                 assume cs:_CRT$XCU
.CRT$XCU:00011E58                 ;org 11E58h
.CRT$XCU:00011E58 ; COMDAT (pick associative to section at 10FB8)
.CRT$XCU:00011E58 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:00011E58 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:00011E58 _CRT$XCU        ends
.CRT$XCU:00011E58
.CRT$XCU:00011E5C ; ===========================================================================
.CRT$XCU:00011E5C
.CRT$XCU:00011E5C ; Segment type: Pure data
.CRT$XCU:00011E5C ; Segment permissions: Read
.CRT$XCU:00011E5C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00011E5C                 assume cs:_CRT$XCU
.CRT$XCU:00011E5C                 ;org 11E5Ch
.CRT$XCU:00011E5C ; COMDAT (pick associative to section at 10FBC)
.CRT$XCU:00011E5C ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:00011E5C ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:00011E5C _CRT$XCU        ends
.CRT$XCU:00011E5C
UNDEF:00011E60 ; ===========================================================================
UNDEF:00011E60
UNDEF:00011E60 ; Segment type: Externs
UNDEF:00011E60 ; UNDEF
UNDEF:00011E60                 extrn __purecall:near   ; DATA XREF: .rdata:00010E20o
UNDEF:00011E60                                         ; .rdata:00010E24o ...
UNDEF:00011E64 ; void *__cdecl operator new(unsigned int)
UNDEF:00011E64                 extrn ??2@YAPAXI@Z:near ; CODE XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+50p
UNDEF:00011E64                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+308p ...
UNDEF:00011E68 ; void __cdecl operator delete(void *)
UNDEF:00011E68                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?init@FunctionParsersManager@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAPAVScintillaEditView@@@Z$1+4p
UNDEF:00011E68                                         ; __unwindfunclet$?getFuncListFromXmlTree@FunctionParsersManager@@AAE_NXZ$10+7p ...
UNDEF:00011E6C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:00011E6C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:00011E6C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:00011E70                 extrn __invalid_parameter:near
UNDEF:00011E70                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+74p
UNDEF:00011E70                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+74p ...
UNDEF:00011E74 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:00011E74                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:00011E74                                         ; _wmemcpy+11p
UNDEF:00011E78 ; size_t __cdecl strlen(const char *Str)
UNDEF:00011E78                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:00011E7C ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:00011E7C                 extrn _memmove:near     ; CODE XREF: std::_Uninit_move<FunctionParser *,FunctionParser *,FunctionParser *>(FunctionParser * *,FunctionParser * *,FunctionParser * *,std::_Wrap_alloc<std::allocator<FunctionParser *>> &,FunctionParser * *,std::_Scalar_ptr_iterator_tag)+4Fp
UNDEF:00011E7C                                         ; std::char_traits<char>::move(char *,char const *,uint)+1Ep ...
UNDEF:00011E80 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:00011E80                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:00011E84 ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:00011E84                 extrn __imp__lstrlenW@4:near
UNDEF:00011E84                                         ; CODE XREF: FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+107p
UNDEF:00011E84                                         ; FunctionZoneParser::getBodyClosePos(uint,wchar_t const *,wchar_t const *,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const &,ScintillaEditView * *)+124p
UNDEF:00011E84                                         ; DATA XREF: ...
UNDEF:00011E88 ; BOOL __stdcall PathFileExistsW(LPCWSTR pszPath)
UNDEF:00011E88                 extrn __imp__PathFileExistsW@4:near
UNDEF:00011E88                                         ; CODE XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+44p
UNDEF:00011E88                                         ; DATA XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+44r
UNDEF:00011E8C ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:00011E8C                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:00011E8C                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+2Dp
UNDEF:00011E8C                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+55p ...
UNDEF:00011E90 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:00011E90                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:00011E90                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+4Bp
UNDEF:00011E90                                         ; __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0+3j ...
UNDEF:00011E94                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:00011E98                 extrn __CrtDbgReportW:near
UNDEF:00011E98                                         ; CODE XREF: std::vector<FunctionParser *,std::allocator<FunctionParser *>>::operator[](uint)+50p
UNDEF:00011E98                                         ; std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>>::operator[](uint)+50p ...
UNDEF:00011E9C ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:00011E9C                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:00011E9C                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:00011E9C                                         ; std::_Debug_pointer<FunctionParser *>(FunctionParser * *,wchar_t const *,uint)+16p ...
UNDEF:00011EA0 ; void __cdecl std::_Xbad_alloc()
UNDEF:00011EA0                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:00011EA0                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_434Ap
UNDEF:00011EA0                                         ; std::_Allocate<FunctionParser *>(uint,FunctionParser * *):loc_438Cp ...
UNDEF:00011EA4 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:00011EA4                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:00011EA4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:00011EA4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp ...
UNDEF:00011EA8 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:00011EA8                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:00011EA8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:00011EA8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:00011EAC ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:00011EAC                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00011EAC                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:00011EB0 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:00011EB0                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:00011EB0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:00011EB0                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:00011EB4 ; const char *__cdecl std::_Winerror_map(int)
UNDEF:00011EB4                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:00011EB4                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:00011EB8 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00011EB8                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00011EB8                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:00011EBC ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00011EBC                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00011EBC                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:00011EC0 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00011EC0                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00011EC0                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:00011EC4 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl PathAppendW(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
UNDEF:00011EC4                 extrn ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z:near
UNDEF:00011EC4                                         ; CODE XREF: FunctionParsersManager::writeFunctionListXml(wchar_t const *)+5Bp
UNDEF:00011EC8 ; _DWORD __thiscall TiXmlNode::~TiXmlNode(TiXmlNode *__hidden this)
UNDEF:00011EC8                 extrn ??1TiXmlNode@@UAE@XZ:near
UNDEF:00011EC8                                         ; CODE XREF: __unwindfunclet$??0TiXmlDocument@@QAE@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0+3j
UNDEF:00011EC8                                         ; TiXmlDocument::~TiXmlDocument(void)+4Fp ...
UNDEF:00011ECC ; struct TiXmlNode *__thiscall TiXmlNode::FirstChild(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:00011ECC                 extrn ?FirstChild@TiXmlNode@@QBEPAV1@PB_W@Z:near
UNDEF:00011ECC                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+52p
UNDEF:00011ECC                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+78p ...
UNDEF:00011ED0 ; struct TiXmlNode *__thiscall TiXmlNode::NextSibling(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:00011ED0                 extrn ?NextSibling@TiXmlNode@@QBEPAV1@PB_W@Z:near
UNDEF:00011ED0                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+DCp
UNDEF:00011ED0                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+A95p ...
UNDEF:00011ED4 ; struct TiXmlElement *__thiscall TiXmlNode::FirstChildElement(TiXmlNode *__hidden this, const wchar_t *)
UNDEF:00011ED4                 extrn ?FirstChildElement@TiXmlNode@@QBEPAVTiXmlElement@@PB_W@Z:near
UNDEF:00011ED4                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+C4p
UNDEF:00011ED4                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+A7Dp ...
UNDEF:00011ED8 ; protected: __thiscall TiXmlNode::TiXmlNode(enum  TiXmlNode::NodeType)
UNDEF:00011ED8                 extrn ??0TiXmlNode@@IAE@W4NodeType@0@@Z:near
UNDEF:00011ED8                                         ; CODE XREF: TiXmlDocument::TiXmlDocument(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
UNDEF:00011EDC ; const wchar_t *__thiscall TiXmlElement::Attribute(TiXmlElement *__hidden this, const wchar_t *)
UNDEF:00011EDC                 extrn ?Attribute@TiXmlElement@@QBEPB_WPB_W@Z:near
UNDEF:00011EDC                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+106p
UNDEF:00011EDC                                         ; FunctionParsersManager::getFuncListFromXmlTree(void)+158p ...
UNDEF:00011EE0 ; const wchar_t *__thiscall TiXmlElement::Attribute(TiXmlElement *__hidden this, const wchar_t *, int *)
UNDEF:00011EE0                 extrn ?Attribute@TiXmlElement@@QBEPB_WPB_WPAH@Z:near
UNDEF:00011EE0                                         ; CODE XREF: FunctionParsersManager::getFuncListFromXmlTree(void)+AC6p
UNDEF:00011EE4 ; bool __thiscall TiXmlDocument::LoadFile(TiXmlDocument *__hidden this)
UNDEF:00011EE4                 extrn ?LoadFile@TiXmlDocument@@QAE_NXZ:near
UNDEF:00011EE4                                         ; CODE XREF: FunctionParsersManager::init(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,ScintillaEditView * *)+96p
UNDEF:00011EE8 ; bool __thiscall TiXmlDocument::SaveFile(TiXmlDocument *__hidden this, const wchar_t *)
UNDEF:00011EE8                 extrn ?SaveFile@TiXmlDocument@@QBE_NPB_W@Z:near
UNDEF:00011EE8                                         ; CODE XREF: FunctionParsersManager::writeFunctionListXml(wchar_t const *)+8Fp
UNDEF:00011EEC ; public: virtual wchar_t const * __thiscall TiXmlDocument::Parse(wchar_t const *, class TiXmlParsingData *)
UNDEF:00011EEC                 extrn ?Parse@TiXmlDocument@@UAEPB_WPB_WPAVTiXmlParsingData@@@Z:near
UNDEF:00011EEC                                         ; DATA XREF: .rdata:00010EF8o
UNDEF:00011EF0 ; public: virtual void __thiscall TiXmlDocument::Print(struct _iobuf *, int)const
UNDEF:00011EF0                 extrn ?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z:near
UNDEF:00011EF0                                         ; DATA XREF: .rdata:00010EF0o
UNDEF:00011EF4 ; protected: virtual void __thiscall TiXmlDocument::StreamOut(class std::basic_ostream<wchar_t, struct std::char_traits<wchar_t>> *)const
UNDEF:00011EF4                 extrn ?StreamOut@TiXmlDocument@@MBEXPAV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@Z:near
UNDEF:00011EF4                                         ; DATA XREF: .rdata:00010EF4o
UNDEF:00011EF8 ; protected: virtual class TiXmlNode * __thiscall TiXmlDocument::Clone(void)const
UNDEF:00011EF8                 extrn ?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ:near
UNDEF:00011EF8                                         ; DATA XREF: .rdata:00010F00o
UNDEF:00011EFC ; protected: virtual void __thiscall TiXmlDocument::StreamIn(class std::basic_istream<wchar_t, struct std::char_traits<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
UNDEF:00011EFC                 extrn ?StreamIn@TiXmlDocument@@MAEXPAV?$basic_istream@_WU?$char_traits@_W@std@@@std@@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@@Z:near
UNDEF:00011EFC                                         ; DATA XREF: .rdata:00010F04o
UNDEF:00011F00 ; public: virtual void * __thiscall TiXmlDocument::`vector deleting destructor'(unsigned int)
UNDEF:00011F00                 extrn ??_ETiXmlDocument@@UAEPAXI@Z:near ; weak
UNDEF:00011F00                                         ; DATA XREF: .rdata:const TiXmlDocument::`vftable'o
UNDEF:00011F04 ; void __thiscall ScintillaEditView::getGenericText(ScintillaEditView *__hidden this, wchar_t *, unsigned int, int, int)
UNDEF:00011F04                 extrn ?getGenericText@ScintillaEditView@@QBEXPA_WIHH@Z:near
UNDEF:00011F04                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+1B5p
UNDEF:00011F04                                         ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+2B9p
UNDEF:00011F08 ; int __thiscall ScintillaEditView::searchInTarget(ScintillaEditView *__hidden this, const wchar_t *, int, int, int)
UNDEF:00011F08                 extrn ?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z:near
UNDEF:00011F08                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+C7p
UNDEF:00011F08                                         ; FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+436p ...
UNDEF:00011F0C ; __fastcall __security_check_cookie(x)
UNDEF:00011F0C                 extrn @__security_check_cookie@4:near
UNDEF:00011F0C                                         ; CODE XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+474p
UNDEF:00011F0C                                         ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+314p ...
UNDEF:00011F10 ; __stdcall _CxxThrowException(x, x)
UNDEF:00011F10                 extrn __CxxThrowException@8:near
UNDEF:00011F10                                         ; CODE XREF: __catch$??$_Uninit_copy@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PBV10@0PAV10@AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$0+25p
UNDEF:00011F10                                         ; __catch$??$_Uninit_move@PAU?$pair@HH@std@@PAU12@V?$allocator@U?$pair@HH@std@@@2@U12@@std@@YAPAU?$pair@HH@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@HH@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+25p ...
UNDEF:00011F14                 extrn ___CxxFrameHandler3:near
UNDEF:00011F14                                         ; CODE XREF: __ehhandler$?funcParse@FunctionParser@@QAEXAAV?$vector@UfoundInfo@@V?$allocator@UfoundInfo@@@std@@@std@@IIPAPAVScintillaEditView@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@3@PBV?$vector@U?$pair@HH@std@@V?$allocator@U?$pair@HH@std@@@2@@3@@Z+23j
UNDEF:00011F14                                         ; __ehhandler$?parseSubLevel@FunctionParser@@IAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@IIV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@3@AAHPAPAVScintillaEditView@@@Z+23j ...
UNDEF:00011F18 ; const type_info::`vftable'
UNDEF:00011F18                 extrn ??_7type_info@@6B@:near
UNDEF:00011F18                                         ; DATA XREF: .data$r:std::error_category `RTTI Type Descriptor'o
UNDEF:00011F18                                         ; .data$r:std::_Generic_error_category `RTTI Type Descriptor'o ...
UNDEF:00011F1C                 extrn ___security_cookie:near
UNDEF:00011F1C                                         ; DATA XREF: FunctionParser::funcParse(std::vector<foundInfo,std::allocator<foundInfo>> &,uint,uint,ScintillaEditView * *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::vector<std::pair<int,int>,std::allocator<std::pair<int,int>>> const *)+17r
UNDEF:00011F1C                                         ; FunctionParser::parseSubLevel(uint,uint,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,int &,ScintillaEditView * *)+17r ...
UNDEF:00011F20                 extrn __fltused:near
UNDEF:00011F20
UNDEF:00011F20
UNDEF:00011F20                 end