.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : B7FAA8C2B2847C2A13809176014A802F
.rdata:00000000 ; Input CRC32 : 7C92A6A4
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\regExtDlg.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG95237        dd offset $SG94989+16h  ; DATA XREF: RegExtDlg::writeNppPath(void)+211r
.rdata:00000000                                         ; "ile"
.rdata:00000004 ; const WCHAR _SG95238
.rdata:00000004 $SG95238:                               ; DATA XREF: RegExtDlg::writeNppPath(void)+233o
.rdata:00000004                 unicode 0, <",0>,0
.rdata:0000000C $SG94989:                               ; DATA XREF: .data:wchar_t const * const nppNameo
.rdata:0000000C                 unicode 0, <Notepad++_file>,0
.rdata:0000002A                 align 4
.rdata:0000002C $SG94991:                               ; DATA XREF: .data:wchar_t const * const nppBackupo
.rdata:0000002C                 unicode 0, <Notepad++_backup>,0
.rdata:0000004E                 align 10h
.rdata:00000050 $SG94993:                               ; DATA XREF: .data:wchar_t const * const nppDoco
.rdata:00000050                 unicode 0, <Notepa>
.rdata:0000005C aDDocument:                             ; DATA XREF: .rdata:$SG95190o
.rdata:0000005C                 unicode 0, <d++ Document>,0
.rdata:00000076                 align 4
.rdata:00000078 $SG95036        dw 0                    ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+13Ar
.rdata:0000007A                 align 4
.rdata:0000007C $SG95046        db    0                 ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+23Bo
.rdata:0000007D                 db    0
.rdata:0000007E                 db    0
.rdata:0000007F                 db    0
.rdata:00000080 $SG95050        dw 0                    ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long):loc_10D0r
.rdata:00000082                 align 4
.rdata:00000084 $SG95067        dw 0                    ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+42Er
.rdata:00000086                 align 4
.rdata:00000088 ; const WCHAR _SG95098
.rdata:00000088 $SG95098        dw 0                    ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+767o
.rdata:0000008A                 align 4
.rdata:0000008C ; const WCHAR _SG95144
.rdata:0000008C $SG95144        dw 0                    ; DATA XREF: RegExtDlg::getRegisteredExts(void)+FCo
.rdata:0000008E                 align 10h
.rdata:00000090 ; const WCHAR _SG95173
.rdata:00000090 $SG95173        dw 0                    ; DATA XREF: RegExtDlg::addExt(wchar_t *)+7Bo
.rdata:00000092                 align 4
.rdata:00000094 $SG95190        dd offset aDDocument    ; DATA XREF: RegExtDlg::deleteExts(wchar_t const *)+78r
.rdata:00000094                                         ; "d++ Document"
.rdata:00000098 ; wchar_t _SG95214
.rdata:00000098 $SG95214:                               ; DATA XREF: RegExtDlg::writeNppPath(void)+49o
.rdata:00000098                 unicode 0, <\shell\open\command>,0
.rdata:000000C0 $SG95226        dd offset $SG94989+16h  ; DATA XREF: RegExtDlg::writeNppPath(void)+113r
.rdata:000000C0                                         ; "ile"
.rdata:000000C4 ; const WCHAR _SG95227
.rdata:000000C4 $SG95227:                               ; DATA XREF: RegExtDlg::writeNppPath(void)+135o
.rdata:000000C4                 unicode 0, <" "%1">,0
.rdata:000000D2                 align 4
.rdata:000000D4 ; wchar_t _SG95230
.rdata:000000D4 $SG95230:                               ; DATA XREF: RegExtDlg::writeNppPath(void)+1A0o
.rdata:000000D4                 unicode 0, <\DefaultIcon>,0
.rdata:000000EE                 align 10h
.rdata:000000EE _rdata          ends
.rdata:000000EE
.data:000000F0 ; ===========================================================================
.data:000000F0
.data:000000F0 ; Segment type: Pure data
.data:000000F0 ; Segment permissions: Read/Write
.data:000000F0 ; Segment alignment 'qword' can not be represented in assembly
.data:000000F0 _data           segment para public 'DATA' use32
.data:000000F0                 assume cs:_data
.data:000000F0                 ;org 0F0h
.data:000000F0                 public ?nppName@@3PB_WB
.data:000000F0 ; LPCWSTR nppName
.data:000000F0 ?nppName@@3PB_WB dd offset $SG94989     ; DATA XREF: RegExtDlg::getRegisteredExts(void)+117r
.data:000000F0                                         ; RegExtDlg::addExt(wchar_t *):loc_195Ar ...
.data:000000F0                                         ; "Notepad++_file"
.data:000000F4                 public ?nppBackup@@3PB_WB
.data:000000F4 ; LPCWSTR nppBackup
.data:000000F4 ?nppBackup@@3PB_WB dd offset $SG94991   ; DATA XREF: RegExtDlg::addExt(wchar_t *)+AEr
.data:000000F4                                         ; RegExtDlg::deleteExts(wchar_t const *)+D4r ...
.data:000000F4                                         ; "Notepad++_backup"
.data:000000F8                 public ?nppDoc@@3PB_WB
.data:000000F8 ; LPCWSTR nppDoc
.data:000000F8 ?nppDoc@@3PB_WB dd offset $SG94993      ; DATA XREF: RegExtDlg::writeNppPath(void)+BEr
.data:000000F8                                         ; RegExtDlg::writeNppPath(void)+D0r
.data:000000F8                                         ; "Notepa"
.data:000000FC                 align 10h
.data:00000100                 public ?defExtArray@@3PAY19BC@_WA
.data:00000100 ; wchar_t (* defExtArray)[10][18]
.data:00000100 ?defExtArray@@3PAY19BC@_WA:             ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+3B0o
.data:00000100                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+61Co ...
.data:00000100                 unicode 0, <Notepad>,0
.data:00000110                 db    0
.data:00000111                 db    0
.data:00000112                 db    0
.data:00000113                 db    0
.data:00000114                 db    0
.data:00000115                 db    0
.data:00000116                 db    0
.data:00000117                 db    0
.data:00000118                 db    0
.data:00000119                 db    0
.data:0000011A                 db    0
.data:0000011B                 db    0
.data:0000011C                 db    0
.data:0000011D                 db    0
.data:0000011E                 db    0
.data:0000011F                 db    0
.data:00000120                 db    0
.data:00000121                 db    0
.data:00000122                 db    0
.data:00000123                 db    0
.data:00000124                 db  2Eh ; .
.data:00000125                 db    0
.data:00000126                 db  74h ; t
.data:00000127                 db    0
.data:00000128                 db  78h ; x
.data:00000129                 db    0
.data:0000012A                 db  74h ; t
.data:0000012B                 db    0
.data:0000012C                 db    0
.data:0000012D                 db    0
.data:0000012E                 db    0
.data:0000012F                 db    0
.data:00000130                 db    0
.data:00000131                 db    0
.data:00000132                 db    0
.data:00000133                 db    0
.data:00000134                 db    0
.data:00000135                 db    0
.data:00000136                 db    0
.data:00000137                 db    0
.data:00000138                 db    0
.data:00000139                 db    0
.data:0000013A                 db    0
.data:0000013B                 db    0
.data:0000013C                 db    0
.data:0000013D                 db    0
.data:0000013E                 db    0
.data:0000013F                 db    0
.data:00000140                 db    0
.data:00000141                 db    0
.data:00000142                 db    0
.data:00000143                 db    0
.data:00000144                 db    0
.data:00000145                 db    0
.data:00000146                 db    0
.data:00000147                 db    0
.data:00000148                 db  2Eh ; .
.data:00000149                 db    0
.data:0000014A                 db  6Ch ; l
.data:0000014B                 db    0
.data:0000014C                 db  6Fh ; o
.data:0000014D                 db    0
.data:0000014E                 db  67h ; g
.data:0000014F                 db    0
.data:00000150                 db    0
.data:00000151                 db    0
.data:00000152                 db    0
.data:00000153                 db    0
.data:00000154                 db    0
.data:00000155                 db    0
.data:00000156                 db    0
.data:00000157                 db    0
.data:00000158                 db    0
.data:00000159                 db    0
.data:0000015A                 db    0
.data:0000015B                 db    0
.data:0000015C                 db    0
.data:0000015D                 db    0
.data:0000015E                 db    0
.data:0000015F                 db    0
.data:00000160                 db    0
.data:00000161                 db    0
.data:00000162                 db    0
.data:00000163                 db    0
.data:00000164                 db    0
.data:00000165                 db    0
.data:00000166                 db    0
.data:00000167                 db    0
.data:00000168                 db    0
.data:00000169                 db    0
.data:0000016A                 db    0
.data:0000016B                 db    0
.data:0000016C                 db  2Eh ; .
.data:0000016D                 db    0
.data:0000016E                 db  69h ; i
.data:0000016F                 db    0
.data:00000170                 db  6Eh ; n
.data:00000171                 db    0
.data:00000172                 db  69h ; i
.data:00000173                 db    0
.data:00000174                 db    0
.data:00000175                 db    0
.data:00000176                 db    0
.data:00000177                 db    0
.data:00000178                 db    0
.data:00000179                 db    0
.data:0000017A                 db    0
.data:0000017B                 db    0
.data:0000017C                 db    0
.data:0000017D                 db    0
.data:0000017E                 db    0
.data:0000017F                 db    0
.data:00000180                 db    0
.data:00000181                 db    0
.data:00000182                 db    0
.data:00000183                 db    0
.data:00000184                 db    0
.data:00000185                 db    0
.data:00000186                 db    0
.data:00000187                 db    0
.data:00000188                 db    0
.data:00000189                 db    0
.data:0000018A                 db    0
.data:0000018B                 db    0
.data:0000018C                 db    0
.data:0000018D                 db    0
.data:0000018E                 db    0
.data:0000018F                 db    0
.data:00000190                 db    0
.data:00000191                 db    0
.data:00000192                 db    0
.data:00000193                 db    0
.data:00000194                 db    0
.data:00000195                 db    0
.data:00000196                 db    0
.data:00000197                 db    0
.data:00000198                 db    0
.data:00000199                 db    0
.data:0000019A                 db    0
.data:0000019B                 db    0
.data:0000019C ; const WCHAR IconName
.data:0000019C IconName        dw 0                    ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long):loc_EEDo
.data:0000019E                 db    0
.data:0000019F                 db    0
.data:000001A0                 db    0
.data:000001A1                 db    0
.data:000001A2                 db    0
.data:000001A3                 db    0
.data:000001A4                 db    0
.data:000001A5                 db    0
.data:000001A6                 db    0
.data:000001A7                 db    0
.data:000001A8                 db    0
.data:000001A9                 db    0
.data:000001AA                 db    0
.data:000001AB                 db    0
.data:000001AC                 db    0
.data:000001AD                 db    0
.data:000001AE                 db    0
.data:000001AF                 db    0
.data:000001B0                 db    0
.data:000001B1                 db    0
.data:000001B2                 db    0
.data:000001B3                 db    0
.data:000001B4                 db    0
.data:000001B5                 db    0
.data:000001B6                 db    0
.data:000001B7                 db    0
.data:000001B8                 db    0
.data:000001B9                 db    0
.data:000001BA                 db    0
.data:000001BB                 db    0
.data:000001BC                 db    0
.data:000001BD                 db    0
.data:000001BE                 db    0
.data:000001BF                 db    0
.data:000001C0                 db    0
.data:000001C1                 db    0
.data:000001C2                 db    0
.data:000001C3                 db    0
.data:000001C4                 db    0
.data:000001C5                 db    0
.data:000001C6                 db    0
.data:000001C7                 db    0
.data:000001C8                 db    0
.data:000001C9                 db    0
.data:000001CA                 db    0
.data:000001CB                 db    0
.data:000001CC                 db    0
.data:000001CD                 db    0
.data:000001CE                 db    0
.data:000001CF                 db    0
.data:000001D0                 db    0
.data:000001D1                 db    0
.data:000001D2                 db    0
.data:000001D3                 db    0
.data:000001D4                 db    0
.data:000001D5                 db    0
.data:000001D6                 db    0
.data:000001D7                 db    0
.data:000001D8                 db    0
.data:000001D9                 db    0
.data:000001DA                 db    0
.data:000001DB                 db    0
.data:000001DC                 db    0
.data:000001DD                 db    0
.data:000001DE                 db    0
.data:000001DF                 db    0
.data:000001E0                 db    0
.data:000001E1                 db    0
.data:000001E2                 db    0
.data:000001E3                 db    0
.data:000001E4                 db    0
.data:000001E5                 db    0
.data:000001E6                 db    0
.data:000001E7                 db    0
.data:000001E8                 db    0
.data:000001E9                 db    0
.data:000001EA                 db    0
.data:000001EB                 db    0
.data:000001EC                 db    0
.data:000001ED                 db    0
.data:000001EE                 db    0
.data:000001EF                 db    0
.data:000001F0                 db    0
.data:000001F1                 db    0
.data:000001F2                 db    0
.data:000001F3                 db    0
.data:000001F4                 db    0
.data:000001F5                 db    0
.data:000001F6                 db    0
.data:000001F7                 db    0
.data:000001F8                 db    0
.data:000001F9                 db    0
.data:000001FA                 db    0
.data:000001FB                 db    0
.data:000001FC                 db    0
.data:000001FD                 db    0
.data:000001FE                 db    0
.data:000001FF                 db    0
.data:00000200                 db    0
.data:00000201                 db    0
.data:00000202                 db    0
.data:00000203                 db    0
.data:00000204                 db    0
.data:00000205                 db    0
.data:00000206                 db    0
.data:00000207                 db    0
.data:00000208                 db    0
.data:00000209                 db    0
.data:0000020A                 db    0
.data:0000020B                 db    0
.data:0000020C                 db    0
.data:0000020D                 db    0
.data:0000020E                 db    0
.data:0000020F                 db    0
.data:00000210                 db    0
.data:00000211                 db    0
.data:00000212                 db    0
.data:00000213                 db    0
.data:00000214                 db    0
.data:00000215                 db    0
.data:00000216                 db    0
.data:00000217                 db    0
.data:00000218                 db    0
.data:00000219                 db    0
.data:0000021A                 db    0
.data:0000021B                 db    0
.data:0000021C                 db    0
.data:0000021D                 db    0
.data:0000021E                 db    0
.data:0000021F                 db    0
.data:00000220                 db    0
.data:00000221                 db    0
.data:00000222                 db    0
.data:00000223                 db    0
.data:00000224                 db    0
.data:00000225                 db    0
.data:00000226                 db    0
.data:00000227                 db    0
.data:00000228                 db    0
.data:00000229                 db    0
.data:0000022A                 db    0
.data:0000022B                 db    0
.data:0000022C                 db    0
.data:0000022D                 db    0
.data:0000022E                 db    0
.data:0000022F                 db    0
.data:00000230                 db    0
.data:00000231                 db    0
.data:00000232                 db    0
.data:00000233                 db    0
.data:00000234                 db    0
.data:00000235                 db    0
.data:00000236                 db    0
.data:00000237                 db    0
.data:00000238                 db    0
.data:00000239                 db    0
.data:0000023A                 db    0
.data:0000023B                 db    0
.data:0000023C                 db    0
.data:0000023D                 db    0
.data:0000023E                 db    0
.data:0000023F                 db    0
.data:00000240                 db    0
.data:00000241                 db    0
.data:00000242                 db    0
.data:00000243                 db    0
.data:00000244                 db    0
.data:00000245                 db    0
.data:00000246                 db    0
.data:00000247                 db    0
.data:00000248                 db    0
.data:00000249                 db    0
.data:0000024A                 db    0
.data:0000024B                 db    0
.data:0000024C                 db    0
.data:0000024D                 db    0
.data:0000024E                 db    0
.data:0000024F                 db    0
.data:00000250                 db    0
.data:00000251                 db    0
.data:00000252                 db    0
.data:00000253                 db    0
.data:00000254                 db    0
.data:00000255                 db    0
.data:00000256                 db    0
.data:00000257                 db    0
.data:00000258                 db    0
.data:00000259                 db    0
.data:0000025A                 db    0
.data:0000025B                 db    0
.data:0000025C                 db    0
.data:0000025D                 db    0
.data:0000025E                 db    0
.data:0000025F                 db    0
.data:00000260                 db    0
.data:00000261                 db    0
.data:00000262                 db    0
.data:00000263                 db    0
.data:00000264                 db    0
.data:00000265                 db    0
.data:00000266                 db    0
.data:00000267                 db    0
.data:00000268                 db  63h ; c
.data:00000269                 db    0
.data:0000026A                 db  2Ch ; ,
.data:0000026B                 db    0
.data:0000026C                 db  20h
.data:0000026D                 db    0
.data:0000026E                 db  63h ; c
.data:0000026F                 db    0
.data:00000270                 db  2Bh ; +
.data:00000271                 db    0
.data:00000272                 db  2Bh ; +
.data:00000273                 db    0
.data:00000274                 db  2Ch ; ,
.data:00000275                 db    0
.data:00000276                 db  20h
.data:00000277                 db    0
.data:00000278                 db  6Fh ; o
.data:00000279                 db    0
.data:0000027A                 db  62h ; b
.data:0000027B                 db    0
.data:0000027C                 db  6Ah ; j
.data:0000027D                 db    0
.data:0000027E                 db  63h ; c
.data:0000027F                 db    0
.data:00000280                 db    0
.data:00000281                 db    0
.data:00000282                 db    0
.data:00000283                 db    0
.data:00000284                 db    0
.data:00000285                 db    0
.data:00000286                 db    0
.data:00000287                 db    0
.data:00000288                 db    0
.data:00000289                 db    0
.data:0000028A                 db    0
.data:0000028B                 db    0
.data:0000028C                 db  2Eh ; .
.data:0000028D                 db    0
.data:0000028E                 db  68h ; h
.data:0000028F                 db    0
.data:00000290                 db    0
.data:00000291                 db    0
.data:00000292                 db    0
.data:00000293                 db    0
.data:00000294                 db    0
.data:00000295                 db    0
.data:00000296                 db    0
.data:00000297                 db    0
.data:00000298                 db    0
.data:00000299                 db    0
.data:0000029A                 db    0
.data:0000029B                 db    0
.data:0000029C                 db    0
.data:0000029D                 db    0
.data:0000029E                 db    0
.data:0000029F                 db    0
.data:000002A0                 db    0
.data:000002A1                 db    0
.data:000002A2                 db    0
.data:000002A3                 db    0
.data:000002A4                 db    0
.data:000002A5                 db    0
.data:000002A6                 db    0
.data:000002A7                 db    0
.data:000002A8                 db    0
.data:000002A9                 db    0
.data:000002AA                 db    0
.data:000002AB                 db    0
.data:000002AC                 db    0
.data:000002AD                 db    0
.data:000002AE                 db    0
.data:000002AF                 db    0
.data:000002B0                 db  2Eh ; .
.data:000002B1                 db    0
.data:000002B2                 db  68h ; h
.data:000002B3                 db    0
.data:000002B4                 db  70h ; p
.data:000002B5                 db    0
.data:000002B6                 db  70h ; p
.data:000002B7                 db    0
.data:000002B8                 db    0
.data:000002B9                 db    0
.data:000002BA                 db    0
.data:000002BB                 db    0
.data:000002BC                 db    0
.data:000002BD                 db    0
.data:000002BE                 db    0
.data:000002BF                 db    0
.data:000002C0                 db    0
.data:000002C1                 db    0
.data:000002C2                 db    0
.data:000002C3                 db    0
.data:000002C4                 db    0
.data:000002C5                 db    0
.data:000002C6                 db    0
.data:000002C7                 db    0
.data:000002C8                 db    0
.data:000002C9                 db    0
.data:000002CA                 db    0
.data:000002CB                 db    0
.data:000002CC                 db    0
.data:000002CD                 db    0
.data:000002CE                 db    0
.data:000002CF                 db    0
.data:000002D0                 db    0
.data:000002D1                 db    0
.data:000002D2                 db    0
.data:000002D3                 db    0
.data:000002D4                 db  2Eh ; .
.data:000002D5                 db    0
.data:000002D6                 db  68h ; h
.data:000002D7                 db    0
.data:000002D8                 db  78h ; x
.data:000002D9                 db    0
.data:000002DA                 db  78h ; x
.data:000002DB                 db    0
.data:000002DC                 db    0
.data:000002DD                 db    0
.data:000002DE                 db    0
.data:000002DF                 db    0
.data:000002E0                 db    0
.data:000002E1                 db    0
.data:000002E2                 db    0
.data:000002E3                 db    0
.data:000002E4                 db    0
.data:000002E5                 db    0
.data:000002E6                 db    0
.data:000002E7                 db    0
.data:000002E8                 db    0
.data:000002E9                 db    0
.data:000002EA                 db    0
.data:000002EB                 db    0
.data:000002EC                 db    0
.data:000002ED                 db    0
.data:000002EE                 db    0
.data:000002EF                 db    0
.data:000002F0                 db    0
.data:000002F1                 db    0
.data:000002F2                 db    0
.data:000002F3                 db    0
.data:000002F4                 db    0
.data:000002F5                 db    0
.data:000002F6                 db    0
.data:000002F7                 db    0
.data:000002F8                 db  2Eh ; .
.data:000002F9                 db    0
.data:000002FA                 db  63h ; c
.data:000002FB                 db    0
.data:000002FC                 db    0
.data:000002FD                 db    0
.data:000002FE                 db    0
.data:000002FF                 db    0
.data:00000300                 db    0
.data:00000301                 db    0
.data:00000302                 db    0
.data:00000303                 db    0
.data:00000304                 db    0
.data:00000305                 db    0
.data:00000306                 db    0
.data:00000307                 db    0
.data:00000308                 db    0
.data:00000309                 db    0
.data:0000030A                 db    0
.data:0000030B                 db    0
.data:0000030C                 db    0
.data:0000030D                 db    0
.data:0000030E                 db    0
.data:0000030F                 db    0
.data:00000310                 db    0
.data:00000311                 db    0
.data:00000312                 db    0
.data:00000313                 db    0
.data:00000314                 db    0
.data:00000315                 db    0
.data:00000316                 db    0
.data:00000317                 db    0
.data:00000318                 db    0
.data:00000319                 db    0
.data:0000031A                 db    0
.data:0000031B                 db    0
.data:0000031C                 db  2Eh ; .
.data:0000031D                 db    0
.data:0000031E                 db  63h ; c
.data:0000031F                 db    0
.data:00000320                 db  70h ; p
.data:00000321                 db    0
.data:00000322                 db  70h ; p
.data:00000323                 db    0
.data:00000324                 db    0
.data:00000325                 db    0
.data:00000326                 db    0
.data:00000327                 db    0
.data:00000328                 db    0
.data:00000329                 db    0
.data:0000032A                 db    0
.data:0000032B                 db    0
.data:0000032C                 db    0
.data:0000032D                 db    0
.data:0000032E                 db    0
.data:0000032F                 db    0
.data:00000330                 db    0
.data:00000331                 db    0
.data:00000332                 db    0
.data:00000333                 db    0
.data:00000334                 db    0
.data:00000335                 db    0
.data:00000336                 db    0
.data:00000337                 db    0
.data:00000338                 db    0
.data:00000339                 db    0
.data:0000033A                 db    0
.data:0000033B                 db    0
.data:0000033C                 db    0
.data:0000033D                 db    0
.data:0000033E                 db    0
.data:0000033F                 db    0
.data:00000340                 db  2Eh ; .
.data:00000341                 db    0
.data:00000342                 db  63h ; c
.data:00000343                 db    0
.data:00000344                 db  78h ; x
.data:00000345                 db    0
.data:00000346                 db  78h ; x
.data:00000347                 db    0
.data:00000348                 db    0
.data:00000349                 db    0
.data:0000034A                 db    0
.data:0000034B                 db    0
.data:0000034C                 db    0
.data:0000034D                 db    0
.data:0000034E                 db    0
.data:0000034F                 db    0
.data:00000350                 db    0
.data:00000351                 db    0
.data:00000352                 db    0
.data:00000353                 db    0
.data:00000354                 db    0
.data:00000355                 db    0
.data:00000356                 db    0
.data:00000357                 db    0
.data:00000358                 db    0
.data:00000359                 db    0
.data:0000035A                 db    0
.data:0000035B                 db    0
.data:0000035C                 db    0
.data:0000035D                 db    0
.data:0000035E                 db    0
.data:0000035F                 db    0
.data:00000360                 db    0
.data:00000361                 db    0
.data:00000362                 db    0
.data:00000363                 db    0
.data:00000364                 db  2Eh ; .
.data:00000365                 db    0
.data:00000366                 db  63h ; c
.data:00000367                 db    0
.data:00000368                 db  63h ; c
.data:00000369                 db    0
.data:0000036A                 db    0
.data:0000036B                 db    0
.data:0000036C                 db    0
.data:0000036D                 db    0
.data:0000036E                 db    0
.data:0000036F                 db    0
.data:00000370                 db    0
.data:00000371                 db    0
.data:00000372                 db    0
.data:00000373                 db    0
.data:00000374                 db    0
.data:00000375                 db    0
.data:00000376                 db    0
.data:00000377                 db    0
.data:00000378                 db    0
.data:00000379                 db    0
.data:0000037A                 db    0
.data:0000037B                 db    0
.data:0000037C                 db    0
.data:0000037D                 db    0
.data:0000037E                 db    0
.data:0000037F                 db    0
.data:00000380                 db    0
.data:00000381                 db    0
.data:00000382                 db    0
.data:00000383                 db    0
.data:00000384                 db    0
.data:00000385                 db    0
.data:00000386                 db    0
.data:00000387                 db    0
.data:00000388                 db  2Eh ; .
.data:00000389                 db    0
.data:0000038A                 db  6Dh ; m
.data:0000038B                 db    0
.data:0000038C                 db    0
.data:0000038D                 db    0
.data:0000038E                 db    0
.data:0000038F                 db    0
.data:00000390                 db    0
.data:00000391                 db    0
.data:00000392                 db    0
.data:00000393                 db    0
.data:00000394                 db    0
.data:00000395                 db    0
.data:00000396                 db    0
.data:00000397                 db    0
.data:00000398                 db    0
.data:00000399                 db    0
.data:0000039A                 db    0
.data:0000039B                 db    0
.data:0000039C                 db    0
.data:0000039D                 db    0
.data:0000039E                 db    0
.data:0000039F                 db    0
.data:000003A0                 db    0
.data:000003A1                 db    0
.data:000003A2                 db    0
.data:000003A3                 db    0
.data:000003A4                 db    0
.data:000003A5                 db    0
.data:000003A6                 db    0
.data:000003A7                 db    0
.data:000003A8                 db    0
.data:000003A9                 db    0
.data:000003AA                 db    0
.data:000003AB                 db    0
.data:000003AC                 db    0
.data:000003AD                 db    0
.data:000003AE                 db    0
.data:000003AF                 db    0
.data:000003B0                 db    0
.data:000003B1                 db    0
.data:000003B2                 db    0
.data:000003B3                 db    0
.data:000003B4                 db    0
.data:000003B5                 db    0
.data:000003B6                 db    0
.data:000003B7                 db    0
.data:000003B8                 db    0
.data:000003B9                 db    0
.data:000003BA                 db    0
.data:000003BB                 db    0
.data:000003BC                 db    0
.data:000003BD                 db    0
.data:000003BE                 db    0
.data:000003BF                 db    0
.data:000003C0                 db    0
.data:000003C1                 db    0
.data:000003C2                 db    0
.data:000003C3                 db    0
.data:000003C4                 db    0
.data:000003C5                 db    0
.data:000003C6                 db    0
.data:000003C7                 db    0
.data:000003C8                 db    0
.data:000003C9                 db    0
.data:000003CA                 db    0
.data:000003CB                 db    0
.data:000003CC                 db    0
.data:000003CD                 db    0
.data:000003CE                 db    0
.data:000003CF                 db    0
.data:000003D0                 db  6Ah ; j
.data:000003D1                 db    0
.data:000003D2                 db  61h ; a
.data:000003D3                 db    0
.data:000003D4                 db  76h ; v
.data:000003D5                 db    0
.data:000003D6                 db  61h ; a
.data:000003D7                 db    0
.data:000003D8                 db  2Ch ; ,
.data:000003D9                 db    0
.data:000003DA                 db  20h
.data:000003DB                 db    0
.data:000003DC                 db  63h ; c
.data:000003DD                 db    0
.data:000003DE                 db  23h ; #
.data:000003DF                 db    0
.data:000003E0                 db  2Ch ; ,
.data:000003E1                 db    0
.data:000003E2                 db  20h
.data:000003E3                 db    0
.data:000003E4                 db  70h ; p
.data:000003E5                 db    0
.data:000003E6                 db  61h ; a
.data:000003E7                 db    0
.data:000003E8                 db  73h ; s
.data:000003E9                 db    0
.data:000003EA                 db  63h ; c
.data:000003EB                 db    0
.data:000003EC                 db  61h ; a
.data:000003ED                 db    0
.data:000003EE                 db  6Ch ; l
.data:000003EF                 db    0
.data:000003F0                 db    0
.data:000003F1                 db    0
.data:000003F2                 db    0
.data:000003F3                 db    0
.data:000003F4                 db  2Eh ; .
.data:000003F5                 db    0
.data:000003F6                 db  6Ah ; j
.data:000003F7                 db    0
.data:000003F8                 db  61h ; a
.data:000003F9                 db    0
.data:000003FA                 db  76h ; v
.data:000003FB                 db    0
.data:000003FC                 db  61h ; a
.data:000003FD                 db    0
.data:000003FE                 db    0
.data:000003FF                 db    0
.data:00000400                 db    0
.data:00000401                 db    0
.data:00000402                 db    0
.data:00000403                 db    0
.data:00000404                 db    0
.data:00000405                 db    0
.data:00000406                 db    0
.data:00000407                 db    0
.data:00000408                 db    0
.data:00000409                 db    0
.data:0000040A                 db    0
.data:0000040B                 db    0
.data:0000040C                 db    0
.data:0000040D                 db    0
.data:0000040E                 db    0
.data:0000040F                 db    0
.data:00000410                 db    0
.data:00000411                 db    0
.data:00000412                 db    0
.data:00000413                 db    0
.data:00000414                 db    0
.data:00000415                 db    0
.data:00000416                 db    0
.data:00000417                 db    0
.data:00000418                 db  2Eh ; .
.data:00000419                 db    0
.data:0000041A                 db  63h ; c
.data:0000041B                 db    0
.data:0000041C                 db  73h ; s
.data:0000041D                 db    0
.data:0000041E                 db    0
.data:0000041F                 db    0
.data:00000420                 db    0
.data:00000421                 db    0
.data:00000422                 db    0
.data:00000423                 db    0
.data:00000424                 db    0
.data:00000425                 db    0
.data:00000426                 db    0
.data:00000427                 db    0
.data:00000428                 db    0
.data:00000429                 db    0
.data:0000042A                 db    0
.data:0000042B                 db    0
.data:0000042C                 db    0
.data:0000042D                 db    0
.data:0000042E                 db    0
.data:0000042F                 db    0
.data:00000430                 db    0
.data:00000431                 db    0
.data:00000432                 db    0
.data:00000433                 db    0
.data:00000434                 db    0
.data:00000435                 db    0
.data:00000436                 db    0
.data:00000437                 db    0
.data:00000438                 db    0
.data:00000439                 db    0
.data:0000043A                 db    0
.data:0000043B                 db    0
.data:0000043C                 db  2Eh ; .
.data:0000043D                 db    0
.data:0000043E                 db  70h ; p
.data:0000043F                 db    0
.data:00000440                 db  61h ; a
.data:00000441                 db    0
.data:00000442                 db  73h ; s
.data:00000443                 db    0
.data:00000444                 db    0
.data:00000445                 db    0
.data:00000446                 db    0
.data:00000447                 db    0
.data:00000448                 db    0
.data:00000449                 db    0
.data:0000044A                 db    0
.data:0000044B                 db    0
.data:0000044C                 db    0
.data:0000044D                 db    0
.data:0000044E                 db    0
.data:0000044F                 db    0
.data:00000450                 db    0
.data:00000451                 db    0
.data:00000452                 db    0
.data:00000453                 db    0
.data:00000454                 db    0
.data:00000455                 db    0
.data:00000456                 db    0
.data:00000457                 db    0
.data:00000458                 db    0
.data:00000459                 db    0
.data:0000045A                 db    0
.data:0000045B                 db    0
.data:0000045C                 db    0
.data:0000045D                 db    0
.data:0000045E                 db    0
.data:0000045F                 db    0
.data:00000460                 db  2Eh ; .
.data:00000461                 db    0
.data:00000462                 db  69h ; i
.data:00000463                 db    0
.data:00000464                 db  6Eh ; n
.data:00000465                 db    0
.data:00000466                 db  63h ; c
.data:00000467                 db    0
.data:00000468                 db    0
.data:00000469                 db    0
.data:0000046A                 db    0
.data:0000046B                 db    0
.data:0000046C                 db    0
.data:0000046D                 db    0
.data:0000046E                 db    0
.data:0000046F                 db    0
.data:00000470                 db    0
.data:00000471                 db    0
.data:00000472                 db    0
.data:00000473                 db    0
.data:00000474                 db    0
.data:00000475                 db    0
.data:00000476                 db    0
.data:00000477                 db    0
.data:00000478                 db    0
.data:00000479                 db    0
.data:0000047A                 db    0
.data:0000047B                 db    0
.data:0000047C                 db    0
.data:0000047D                 db    0
.data:0000047E                 db    0
.data:0000047F                 db    0
.data:00000480                 db    0
.data:00000481                 db    0
.data:00000482                 db    0
.data:00000483                 db    0
.data:00000484                 db    0
.data:00000485                 db    0
.data:00000486                 db    0
.data:00000487                 db    0
.data:00000488                 db    0
.data:00000489                 db    0
.data:0000048A                 db    0
.data:0000048B                 db    0
.data:0000048C                 db    0
.data:0000048D                 db    0
.data:0000048E                 db    0
.data:0000048F                 db    0
.data:00000490                 db    0
.data:00000491                 db    0
.data:00000492                 db    0
.data:00000493                 db    0
.data:00000494                 db    0
.data:00000495                 db    0
.data:00000496                 db    0
.data:00000497                 db    0
.data:00000498                 db    0
.data:00000499                 db    0
.data:0000049A                 db    0
.data:0000049B                 db    0
.data:0000049C                 db    0
.data:0000049D                 db    0
.data:0000049E                 db    0
.data:0000049F                 db    0
.data:000004A0                 db    0
.data:000004A1                 db    0
.data:000004A2                 db    0
.data:000004A3                 db    0
.data:000004A4                 db    0
.data:000004A5                 db    0
.data:000004A6                 db    0
.data:000004A7                 db    0
.data:000004A8                 db    0
.data:000004A9                 db    0
.data:000004AA                 db    0
.data:000004AB                 db    0
.data:000004AC                 db    0
.data:000004AD                 db    0
.data:000004AE                 db    0
.data:000004AF                 db    0
.data:000004B0                 db    0
.data:000004B1                 db    0
.data:000004B2                 db    0
.data:000004B3                 db    0
.data:000004B4                 db    0
.data:000004B5                 db    0
.data:000004B6                 db    0
.data:000004B7                 db    0
.data:000004B8                 db    0
.data:000004B9                 db    0
.data:000004BA                 db    0
.data:000004BB                 db    0
.data:000004BC                 db    0
.data:000004BD                 db    0
.data:000004BE                 db    0
.data:000004BF                 db    0
.data:000004C0                 db    0
.data:000004C1                 db    0
.data:000004C2                 db    0
.data:000004C3                 db    0
.data:000004C4                 db    0
.data:000004C5                 db    0
.data:000004C6                 db    0
.data:000004C7                 db    0
.data:000004C8                 db    0
.data:000004C9                 db    0
.data:000004CA                 db    0
.data:000004CB                 db    0
.data:000004CC                 db    0
.data:000004CD                 db    0
.data:000004CE                 db    0
.data:000004CF                 db    0
.data:000004D0                 db    0
.data:000004D1                 db    0
.data:000004D2                 db    0
.data:000004D3                 db    0
.data:000004D4                 db    0
.data:000004D5                 db    0
.data:000004D6                 db    0
.data:000004D7                 db    0
.data:000004D8                 db    0
.data:000004D9                 db    0
.data:000004DA                 db    0
.data:000004DB                 db    0
.data:000004DC                 db    0
.data:000004DD                 db    0
.data:000004DE                 db    0
.data:000004DF                 db    0
.data:000004E0                 db    0
.data:000004E1                 db    0
.data:000004E2                 db    0
.data:000004E3                 db    0
.data:000004E4                 db    0
.data:000004E5                 db    0
.data:000004E6                 db    0
.data:000004E7                 db    0
.data:000004E8                 db    0
.data:000004E9                 db    0
.data:000004EA                 db    0
.data:000004EB                 db    0
.data:000004EC                 db    0
.data:000004ED                 db    0
.data:000004EE                 db    0
.data:000004EF                 db    0
.data:000004F0                 db    0
.data:000004F1                 db    0
.data:000004F2                 db    0
.data:000004F3                 db    0
.data:000004F4                 db    0
.data:000004F5                 db    0
.data:000004F6                 db    0
.data:000004F7                 db    0
.data:000004F8                 db    0
.data:000004F9                 db    0
.data:000004FA                 db    0
.data:000004FB                 db    0
.data:000004FC                 db    0
.data:000004FD                 db    0
.data:000004FE                 db    0
.data:000004FF                 db    0
.data:00000500                 db    0
.data:00000501                 db    0
.data:00000502                 db    0
.data:00000503                 db    0
.data:00000504                 db    0
.data:00000505                 db    0
.data:00000506                 db    0
.data:00000507                 db    0
.data:00000508                 db    0
.data:00000509                 db    0
.data:0000050A                 db    0
.data:0000050B                 db    0
.data:0000050C                 db    0
.data:0000050D                 db    0
.data:0000050E                 db    0
.data:0000050F                 db    0
.data:00000510                 db    0
.data:00000511                 db    0
.data:00000512                 db    0
.data:00000513                 db    0
.data:00000514                 db    0
.data:00000515                 db    0
.data:00000516                 db    0
.data:00000517                 db    0
.data:00000518                 db    0
.data:00000519                 db    0
.data:0000051A                 db    0
.data:0000051B                 db    0
.data:0000051C                 db    0
.data:0000051D                 db    0
.data:0000051E                 db    0
.data:0000051F                 db    0
.data:00000520                 db    0
.data:00000521                 db    0
.data:00000522                 db    0
.data:00000523                 db    0
.data:00000524                 db    0
.data:00000525                 db    0
.data:00000526                 db    0
.data:00000527                 db    0
.data:00000528                 db    0
.data:00000529                 db    0
.data:0000052A                 db    0
.data:0000052B                 db    0
.data:0000052C                 db    0
.data:0000052D                 db    0
.data:0000052E                 db    0
.data:0000052F                 db    0
.data:00000530                 db    0
.data:00000531                 db    0
.data:00000532                 db    0
.data:00000533                 db    0
.data:00000534                 db    0
.data:00000535                 db    0
.data:00000536                 db    0
.data:00000537                 db    0
.data:00000538                 db  77h ; w
.data:00000539                 db    0
.data:0000053A                 db  65h ; e
.data:0000053B                 db    0
.data:0000053C                 db  62h ; b
.data:0000053D                 db    0
.data:0000053E                 db  28h ; (
.data:0000053F                 db    0
.data:00000540                 db  68h ; h
.data:00000541                 db    0
.data:00000542                 db  74h ; t
.data:00000543                 db    0
.data:00000544                 db  6Dh ; m
.data:00000545                 db    0
.data:00000546                 db  6Ch ; l
.data:00000547                 db    0
.data:00000548                 db  29h ; )
.data:00000549                 db    0
.data:0000054A                 db  20h
.data:0000054B                 db    0
.data:0000054C                 db  73h ; s
.data:0000054D                 db    0
.data:0000054E                 db  63h ; c
.data:0000054F                 db    0
.data:00000550                 db  72h ; r
.data:00000551                 db    0
.data:00000552                 db  69h ; i
.data:00000553                 db    0
.data:00000554                 db  70h ; p
.data:00000555                 db    0
.data:00000556                 db  74h ; t
.data:00000557                 db    0
.data:00000558                 db    0
.data:00000559                 db    0
.data:0000055A                 db    0
.data:0000055B                 db    0
.data:0000055C                 db  2Eh ; .
.data:0000055D                 db    0
.data:0000055E                 db  68h ; h
.data:0000055F                 db    0
.data:00000560                 db  74h ; t
.data:00000561                 db    0
.data:00000562                 db  6Dh ; m
.data:00000563                 db    0
.data:00000564                 db  6Ch ; l
.data:00000565                 db    0
.data:00000566                 db    0
.data:00000567                 db    0
.data:00000568                 db    0
.data:00000569                 db    0
.data:0000056A                 db    0
.data:0000056B                 db    0
.data:0000056C                 db    0
.data:0000056D                 db    0
.data:0000056E                 db    0
.data:0000056F                 db    0
.data:00000570                 db    0
.data:00000571                 db    0
.data:00000572                 db    0
.data:00000573                 db    0
.data:00000574                 db    0
.data:00000575                 db    0
.data:00000576                 db    0
.data:00000577                 db    0
.data:00000578                 db    0
.data:00000579                 db    0
.data:0000057A                 db    0
.data:0000057B                 db    0
.data:0000057C                 db    0
.data:0000057D                 db    0
.data:0000057E                 db    0
.data:0000057F                 db    0
.data:00000580                 db  2Eh ; .
.data:00000581                 db    0
.data:00000582                 db  68h ; h
.data:00000583                 db    0
.data:00000584                 db  74h ; t
.data:00000585                 db    0
.data:00000586                 db  6Dh ; m
.data:00000587                 db    0
.data:00000588                 db    0
.data:00000589                 db    0
.data:0000058A                 db    0
.data:0000058B                 db    0
.data:0000058C                 db    0
.data:0000058D                 db    0
.data:0000058E                 db    0
.data:0000058F                 db    0
.data:00000590                 db    0
.data:00000591                 db    0
.data:00000592                 db    0
.data:00000593                 db    0
.data:00000594                 db    0
.data:00000595                 db    0
.data:00000596                 db    0
.data:00000597                 db    0
.data:00000598                 db    0
.data:00000599                 db    0
.data:0000059A                 db    0
.data:0000059B                 db    0
.data:0000059C                 db    0
.data:0000059D                 db    0
.data:0000059E                 db    0
.data:0000059F                 db    0
.data:000005A0                 db    0
.data:000005A1                 db    0
.data:000005A2                 db    0
.data:000005A3                 db    0
.data:000005A4                 db  2Eh ; .
.data:000005A5                 db    0
.data:000005A6                 db  70h ; p
.data:000005A7                 db    0
.data:000005A8                 db  68h ; h
.data:000005A9                 db    0
.data:000005AA                 db  70h ; p
.data:000005AB                 db    0
.data:000005AC                 db    0
.data:000005AD                 db    0
.data:000005AE                 db    0
.data:000005AF                 db    0
.data:000005B0                 db    0
.data:000005B1                 db    0
.data:000005B2                 db    0
.data:000005B3                 db    0
.data:000005B4                 db    0
.data:000005B5                 db    0
.data:000005B6                 db    0
.data:000005B7                 db    0
.data:000005B8                 db    0
.data:000005B9                 db    0
.data:000005BA                 db    0
.data:000005BB                 db    0
.data:000005BC                 db    0
.data:000005BD                 db    0
.data:000005BE                 db    0
.data:000005BF                 db    0
.data:000005C0                 db    0
.data:000005C1                 db    0
.data:000005C2                 db    0
.data:000005C3                 db    0
.data:000005C4                 db    0
.data:000005C5                 db    0
.data:000005C6                 db    0
.data:000005C7                 db    0
.data:000005C8                 db  2Eh ; .
.data:000005C9                 db    0
.data:000005CA                 db  70h ; p
.data:000005CB                 db    0
.data:000005CC                 db  68h ; h
.data:000005CD                 db    0
.data:000005CE                 db  74h ; t
.data:000005CF                 db    0
.data:000005D0                 db  6Dh ; m
.data:000005D1                 db    0
.data:000005D2                 db  6Ch ; l
.data:000005D3                 db    0
.data:000005D4                 db    0
.data:000005D5                 db    0
.data:000005D6                 db    0
.data:000005D7                 db    0
.data:000005D8                 db    0
.data:000005D9                 db    0
.data:000005DA                 db    0
.data:000005DB                 db    0
.data:000005DC                 db    0
.data:000005DD                 db    0
.data:000005DE                 db    0
.data:000005DF                 db    0
.data:000005E0                 db    0
.data:000005E1                 db    0
.data:000005E2                 db    0
.data:000005E3                 db    0
.data:000005E4                 db    0
.data:000005E5                 db    0
.data:000005E6                 db    0
.data:000005E7                 db    0
.data:000005E8                 db    0
.data:000005E9                 db    0
.data:000005EA                 db    0
.data:000005EB                 db    0
.data:000005EC                 db  2Eh ; .
.data:000005ED                 db    0
.data:000005EE                 db  6Ah ; j
.data:000005EF                 db    0
.data:000005F0                 db  73h ; s
.data:000005F1                 db    0
.data:000005F2                 db    0
.data:000005F3                 db    0
.data:000005F4                 db    0
.data:000005F5                 db    0
.data:000005F6                 db    0
.data:000005F7                 db    0
.data:000005F8                 db    0
.data:000005F9                 db    0
.data:000005FA                 db    0
.data:000005FB                 db    0
.data:000005FC                 db    0
.data:000005FD                 db    0
.data:000005FE                 db    0
.data:000005FF                 db    0
.data:00000600                 db    0
.data:00000601                 db    0
.data:00000602                 db    0
.data:00000603                 db    0
.data:00000604                 db    0
.data:00000605                 db    0
.data:00000606                 db    0
.data:00000607                 db    0
.data:00000608                 db    0
.data:00000609                 db    0
.data:0000060A                 db    0
.data:0000060B                 db    0
.data:0000060C                 db    0
.data:0000060D                 db    0
.data:0000060E                 db    0
.data:0000060F                 db    0
.data:00000610                 db  2Eh ; .
.data:00000611                 db    0
.data:00000612                 db  6Ah ; j
.data:00000613                 db    0
.data:00000614                 db  73h ; s
.data:00000615                 db    0
.data:00000616                 db  70h ; p
.data:00000617                 db    0
.data:00000618                 db    0
.data:00000619                 db    0
.data:0000061A                 db    0
.data:0000061B                 db    0
.data:0000061C                 db    0
.data:0000061D                 db    0
.data:0000061E                 db    0
.data:0000061F                 db    0
.data:00000620                 db    0
.data:00000621                 db    0
.data:00000622                 db    0
.data:00000623                 db    0
.data:00000624                 db    0
.data:00000625                 db    0
.data:00000626                 db    0
.data:00000627                 db    0
.data:00000628                 db    0
.data:00000629                 db    0
.data:0000062A                 db    0
.data:0000062B                 db    0
.data:0000062C                 db    0
.data:0000062D                 db    0
.data:0000062E                 db    0
.data:0000062F                 db    0
.data:00000630                 db    0
.data:00000631                 db    0
.data:00000632                 db    0
.data:00000633                 db    0
.data:00000634                 db  2Eh ; .
.data:00000635                 db    0
.data:00000636                 db  61h ; a
.data:00000637                 db    0
.data:00000638                 db  73h ; s
.data:00000639                 db    0
.data:0000063A                 db  70h ; p
.data:0000063B                 db    0
.data:0000063C                 db    0
.data:0000063D                 db    0
.data:0000063E                 db    0
.data:0000063F                 db    0
.data:00000640                 db    0
.data:00000641                 db    0
.data:00000642                 db    0
.data:00000643                 db    0
.data:00000644                 db    0
.data:00000645                 db    0
.data:00000646                 db    0
.data:00000647                 db    0
.data:00000648                 db    0
.data:00000649                 db    0
.data:0000064A                 db    0
.data:0000064B                 db    0
.data:0000064C                 db    0
.data:0000064D                 db    0
.data:0000064E                 db    0
.data:0000064F                 db    0
.data:00000650                 db    0
.data:00000651                 db    0
.data:00000652                 db    0
.data:00000653                 db    0
.data:00000654                 db    0
.data:00000655                 db    0
.data:00000656                 db    0
.data:00000657                 db    0
.data:00000658                 db  2Eh ; .
.data:00000659                 db    0
.data:0000065A                 db  63h ; c
.data:0000065B                 db    0
.data:0000065C                 db  73h ; s
.data:0000065D                 db    0
.data:0000065E                 db  73h ; s
.data:0000065F                 db    0
.data:00000660                 db    0
.data:00000661                 db    0
.data:00000662                 db    0
.data:00000663                 db    0
.data:00000664                 db    0
.data:00000665                 db    0
.data:00000666                 db    0
.data:00000667                 db    0
.data:00000668                 db    0
.data:00000669                 db    0
.data:0000066A                 db    0
.data:0000066B                 db    0
.data:0000066C                 db    0
.data:0000066D                 db    0
.data:0000066E                 db    0
.data:0000066F                 db    0
.data:00000670                 db    0
.data:00000671                 db    0
.data:00000672                 db    0
.data:00000673                 db    0
.data:00000674                 db    0
.data:00000675                 db    0
.data:00000676                 db    0
.data:00000677                 db    0
.data:00000678                 db    0
.data:00000679                 db    0
.data:0000067A                 db    0
.data:0000067B                 db    0
.data:0000067C                 db  2Eh ; .
.data:0000067D                 db    0
.data:0000067E                 db  78h ; x
.data:0000067F                 db    0
.data:00000680                 db  6Dh ; m
.data:00000681                 db    0
.data:00000682                 db  6Ch ; l
.data:00000683                 db    0
.data:00000684                 db    0
.data:00000685                 db    0
.data:00000686                 db    0
.data:00000687                 db    0
.data:00000688                 db    0
.data:00000689                 db    0
.data:0000068A                 db    0
.data:0000068B                 db    0
.data:0000068C                 db    0
.data:0000068D                 db    0
.data:0000068E                 db    0
.data:0000068F                 db    0
.data:00000690                 db    0
.data:00000691                 db    0
.data:00000692                 db    0
.data:00000693                 db    0
.data:00000694                 db    0
.data:00000695                 db    0
.data:00000696                 db    0
.data:00000697                 db    0
.data:00000698                 db    0
.data:00000699                 db    0
.data:0000069A                 db    0
.data:0000069B                 db    0
.data:0000069C                 db    0
.data:0000069D                 db    0
.data:0000069E                 db    0
.data:0000069F                 db    0
.data:000006A0                 db  70h ; p
.data:000006A1                 db    0
.data:000006A2                 db  75h ; u
.data:000006A3                 db    0
.data:000006A4                 db  62h ; b
.data:000006A5                 db    0
.data:000006A6                 db  6Ch ; l
.data:000006A7                 db    0
.data:000006A8                 db  69h ; i
.data:000006A9                 db    0
.data:000006AA                 db  63h ; c
.data:000006AB                 db    0
.data:000006AC                 db  20h
.data:000006AD                 db    0
.data:000006AE                 db  73h ; s
.data:000006AF                 db    0
.data:000006B0                 db  63h ; c
.data:000006B1                 db    0
.data:000006B2                 db  72h ; r
.data:000006B3                 db    0
.data:000006B4                 db  69h ; i
.data:000006B5                 db    0
.data:000006B6                 db  70h ; p
.data:000006B7                 db    0
.data:000006B8                 db  74h ; t
.data:000006B9                 db    0
.data:000006BA                 db    0
.data:000006BB                 db    0
.data:000006BC                 db    0
.data:000006BD                 db    0
.data:000006BE                 db    0
.data:000006BF                 db    0
.data:000006C0                 db    0
.data:000006C1                 db    0
.data:000006C2                 db    0
.data:000006C3                 db    0
.data:000006C4                 db  2Eh ; .
.data:000006C5                 db    0
.data:000006C6                 db  73h ; s
.data:000006C7                 db    0
.data:000006C8                 db  68h ; h
.data:000006C9                 db    0
.data:000006CA                 db    0
.data:000006CB                 db    0
.data:000006CC                 db    0
.data:000006CD                 db    0
.data:000006CE                 db    0
.data:000006CF                 db    0
.data:000006D0                 db    0
.data:000006D1                 db    0
.data:000006D2                 db    0
.data:000006D3                 db    0
.data:000006D4                 db    0
.data:000006D5                 db    0
.data:000006D6                 db    0
.data:000006D7                 db    0
.data:000006D8                 db    0
.data:000006D9                 db    0
.data:000006DA                 db    0
.data:000006DB                 db    0
.data:000006DC                 db    0
.data:000006DD                 db    0
.data:000006DE                 db    0
.data:000006DF                 db    0
.data:000006E0                 db    0
.data:000006E1                 db    0
.data:000006E2                 db    0
.data:000006E3                 db    0
.data:000006E4                 db    0
.data:000006E5                 db    0
.data:000006E6                 db    0
.data:000006E7                 db    0
.data:000006E8                 db  2Eh ; .
.data:000006E9                 db    0
.data:000006EA                 db  62h ; b
.data:000006EB                 db    0
.data:000006EC                 db  73h ; s
.data:000006ED                 db    0
.data:000006EE                 db  68h ; h
.data:000006EF                 db    0
.data:000006F0                 db    0
.data:000006F1                 db    0
.data:000006F2                 db    0
.data:000006F3                 db    0
.data:000006F4                 db    0
.data:000006F5                 db    0
.data:000006F6                 db    0
.data:000006F7                 db    0
.data:000006F8                 db    0
.data:000006F9                 db    0
.data:000006FA                 db    0
.data:000006FB                 db    0
.data:000006FC                 db    0
.data:000006FD                 db    0
.data:000006FE                 db    0
.data:000006FF                 db    0
.data:00000700                 db    0
.data:00000701                 db    0
.data:00000702                 db    0
.data:00000703                 db    0
.data:00000704                 db    0
.data:00000705                 db    0
.data:00000706                 db    0
.data:00000707                 db    0
.data:00000708                 db    0
.data:00000709                 db    0
.data:0000070A                 db    0
.data:0000070B                 db    0
.data:0000070C                 db  2Eh ; .
.data:0000070D                 db    0
.data:0000070E                 db  6Eh ; n
.data:0000070F                 db    0
.data:00000710                 db  73h ; s
.data:00000711                 db    0
.data:00000712                 db  69h ; i
.data:00000713                 db    0
.data:00000714                 db    0
.data:00000715                 db    0
.data:00000716                 db    0
.data:00000717                 db    0
.data:00000718                 db    0
.data:00000719                 db    0
.data:0000071A                 db    0
.data:0000071B                 db    0
.data:0000071C                 db    0
.data:0000071D                 db    0
.data:0000071E                 db    0
.data:0000071F                 db    0
.data:00000720                 db    0
.data:00000721                 db    0
.data:00000722                 db    0
.data:00000723                 db    0
.data:00000724                 db    0
.data:00000725                 db    0
.data:00000726                 db    0
.data:00000727                 db    0
.data:00000728                 db    0
.data:00000729                 db    0
.data:0000072A                 db    0
.data:0000072B                 db    0
.data:0000072C                 db    0
.data:0000072D                 db    0
.data:0000072E                 db    0
.data:0000072F                 db    0
.data:00000730                 db  2Eh ; .
.data:00000731                 db    0
.data:00000732                 db  6Eh ; n
.data:00000733                 db    0
.data:00000734                 db  73h ; s
.data:00000735                 db    0
.data:00000736                 db  68h ; h
.data:00000737                 db    0
.data:00000738                 db    0
.data:00000739                 db    0
.data:0000073A                 db    0
.data:0000073B                 db    0
.data:0000073C                 db    0
.data:0000073D                 db    0
.data:0000073E                 db    0
.data:0000073F                 db    0
.data:00000740                 db    0
.data:00000741                 db    0
.data:00000742                 db    0
.data:00000743                 db    0
.data:00000744                 db    0
.data:00000745                 db    0
.data:00000746                 db    0
.data:00000747                 db    0
.data:00000748                 db    0
.data:00000749                 db    0
.data:0000074A                 db    0
.data:0000074B                 db    0
.data:0000074C                 db    0
.data:0000074D                 db    0
.data:0000074E                 db    0
.data:0000074F                 db    0
.data:00000750                 db    0
.data:00000751                 db    0
.data:00000752                 db    0
.data:00000753                 db    0
.data:00000754                 db  2Eh ; .
.data:00000755                 db    0
.data:00000756                 db  6Ch ; l
.data:00000757                 db    0
.data:00000758                 db  75h ; u
.data:00000759                 db    0
.data:0000075A                 db  61h ; a
.data:0000075B                 db    0
.data:0000075C                 db    0
.data:0000075D                 db    0
.data:0000075E                 db    0
.data:0000075F                 db    0
.data:00000760                 db    0
.data:00000761                 db    0
.data:00000762                 db    0
.data:00000763                 db    0
.data:00000764                 db    0
.data:00000765                 db    0
.data:00000766                 db    0
.data:00000767                 db    0
.data:00000768                 db    0
.data:00000769                 db    0
.data:0000076A                 db    0
.data:0000076B                 db    0
.data:0000076C                 db    0
.data:0000076D                 db    0
.data:0000076E                 db    0
.data:0000076F                 db    0
.data:00000770                 db    0
.data:00000771                 db    0
.data:00000772                 db    0
.data:00000773                 db    0
.data:00000774                 db    0
.data:00000775                 db    0
.data:00000776                 db    0
.data:00000777                 db    0
.data:00000778                 db  2Eh ; .
.data:00000779                 db    0
.data:0000077A                 db  70h ; p
.data:0000077B                 db    0
.data:0000077C                 db  6Ch ; l
.data:0000077D                 db    0
.data:0000077E                 db    0
.data:0000077F                 db    0
.data:00000780                 db    0
.data:00000781                 db    0
.data:00000782                 db    0
.data:00000783                 db    0
.data:00000784                 db    0
.data:00000785                 db    0
.data:00000786                 db    0
.data:00000787                 db    0
.data:00000788                 db    0
.data:00000789                 db    0
.data:0000078A                 db    0
.data:0000078B                 db    0
.data:0000078C                 db    0
.data:0000078D                 db    0
.data:0000078E                 db    0
.data:0000078F                 db    0
.data:00000790                 db    0
.data:00000791                 db    0
.data:00000792                 db    0
.data:00000793                 db    0
.data:00000794                 db    0
.data:00000795                 db    0
.data:00000796                 db    0
.data:00000797                 db    0
.data:00000798                 db    0
.data:00000799                 db    0
.data:0000079A                 db    0
.data:0000079B                 db    0
.data:0000079C                 db  2Eh ; .
.data:0000079D                 db    0
.data:0000079E                 db  70h ; p
.data:0000079F                 db    0
.data:000007A0                 db  6Dh ; m
.data:000007A1                 db    0
.data:000007A2                 db    0
.data:000007A3                 db    0
.data:000007A4                 db    0
.data:000007A5                 db    0
.data:000007A6                 db    0
.data:000007A7                 db    0
.data:000007A8                 db    0
.data:000007A9                 db    0
.data:000007AA                 db    0
.data:000007AB                 db    0
.data:000007AC                 db    0
.data:000007AD                 db    0
.data:000007AE                 db    0
.data:000007AF                 db    0
.data:000007B0                 db    0
.data:000007B1                 db    0
.data:000007B2                 db    0
.data:000007B3                 db    0
.data:000007B4                 db    0
.data:000007B5                 db    0
.data:000007B6                 db    0
.data:000007B7                 db    0
.data:000007B8                 db    0
.data:000007B9                 db    0
.data:000007BA                 db    0
.data:000007BB                 db    0
.data:000007BC                 db    0
.data:000007BD                 db    0
.data:000007BE                 db    0
.data:000007BF                 db    0
.data:000007C0                 db  2Eh ; .
.data:000007C1                 db    0
.data:000007C2                 db  70h ; p
.data:000007C3                 db    0
.data:000007C4                 db  79h ; y
.data:000007C5                 db    0
.data:000007C6                 db    0
.data:000007C7                 db    0
.data:000007C8                 db    0
.data:000007C9                 db    0
.data:000007CA                 db    0
.data:000007CB                 db    0
.data:000007CC                 db    0
.data:000007CD                 db    0
.data:000007CE                 db    0
.data:000007CF                 db    0
.data:000007D0                 db    0
.data:000007D1                 db    0
.data:000007D2                 db    0
.data:000007D3                 db    0
.data:000007D4                 db    0
.data:000007D5                 db    0
.data:000007D6                 db    0
.data:000007D7                 db    0
.data:000007D8                 db    0
.data:000007D9                 db    0
.data:000007DA                 db    0
.data:000007DB                 db    0
.data:000007DC                 db    0
.data:000007DD                 db    0
.data:000007DE                 db    0
.data:000007DF                 db    0
.data:000007E0                 db    0
.data:000007E1                 db    0
.data:000007E2                 db    0
.data:000007E3                 db    0
.data:000007E4                 db    0
.data:000007E5                 db    0
.data:000007E6                 db    0
.data:000007E7                 db    0
.data:000007E8                 db    0
.data:000007E9                 db    0
.data:000007EA                 db    0
.data:000007EB                 db    0
.data:000007EC                 db    0
.data:000007ED                 db    0
.data:000007EE                 db    0
.data:000007EF                 db    0
.data:000007F0                 db    0
.data:000007F1                 db    0
.data:000007F2                 db    0
.data:000007F3                 db    0
.data:000007F4                 db    0
.data:000007F5                 db    0
.data:000007F6                 db    0
.data:000007F7                 db    0
.data:000007F8                 db    0
.data:000007F9                 db    0
.data:000007FA                 db    0
.data:000007FB                 db    0
.data:000007FC                 db    0
.data:000007FD                 db    0
.data:000007FE                 db    0
.data:000007FF                 db    0
.data:00000800                 db    0
.data:00000801                 db    0
.data:00000802                 db    0
.data:00000803                 db    0
.data:00000804                 db    0
.data:00000805                 db    0
.data:00000806                 db    0
.data:00000807                 db    0
.data:00000808                 db  70h ; p
.data:00000809                 db    0
.data:0000080A                 db  72h ; r
.data:0000080B                 db    0
.data:0000080C                 db  6Fh ; o
.data:0000080D                 db    0
.data:0000080E                 db  70h ; p
.data:0000080F                 db    0
.data:00000810                 db  65h ; e
.data:00000811                 db    0
.data:00000812                 db  72h ; r
.data:00000813                 db    0
.data:00000814                 db  74h ; t
.data:00000815                 db    0
.data:00000816                 db  79h ; y
.data:00000817                 db    0
.data:00000818                 db  20h
.data:00000819                 db    0
.data:0000081A                 db  73h ; s
.data:0000081B                 db    0
.data:0000081C                 db  63h ; c
.data:0000081D                 db    0
.data:0000081E                 db  72h ; r
.data:0000081F                 db    0
.data:00000820                 db  69h ; i
.data:00000821                 db    0
.data:00000822                 db  70h ; p
.data:00000823                 db    0
.data:00000824                 db  74h ; t
.data:00000825                 db    0
.data:00000826                 db    0
.data:00000827                 db    0
.data:00000828                 db    0
.data:00000829                 db    0
.data:0000082A                 db    0
.data:0000082B                 db    0
.data:0000082C                 db  2Eh ; .
.data:0000082D                 db    0
.data:0000082E                 db  72h ; r
.data:0000082F                 db    0
.data:00000830                 db  63h ; c
.data:00000831                 db    0
.data:00000832                 db    0
.data:00000833                 db    0
.data:00000834                 db    0
.data:00000835                 db    0
.data:00000836                 db    0
.data:00000837                 db    0
.data:00000838                 db    0
.data:00000839                 db    0
.data:0000083A                 db    0
.data:0000083B                 db    0
.data:0000083C                 db    0
.data:0000083D                 db    0
.data:0000083E                 db    0
.data:0000083F                 db    0
.data:00000840                 db    0
.data:00000841                 db    0
.data:00000842                 db    0
.data:00000843                 db    0
.data:00000844                 db    0
.data:00000845                 db    0
.data:00000846                 db    0
.data:00000847                 db    0
.data:00000848                 db    0
.data:00000849                 db    0
.data:0000084A                 db    0
.data:0000084B                 db    0
.data:0000084C                 db    0
.data:0000084D                 db    0
.data:0000084E                 db    0
.data:0000084F                 db    0
.data:00000850                 db  2Eh ; .
.data:00000851                 db    0
.data:00000852                 db  61h ; a
.data:00000853                 db    0
.data:00000854                 db  73h ; s
.data:00000855                 db    0
.data:00000856                 db    0
.data:00000857                 db    0
.data:00000858                 db    0
.data:00000859                 db    0
.data:0000085A                 db    0
.data:0000085B                 db    0
.data:0000085C                 db    0
.data:0000085D                 db    0
.data:0000085E                 db    0
.data:0000085F                 db    0
.data:00000860                 db    0
.data:00000861                 db    0
.data:00000862                 db    0
.data:00000863                 db    0
.data:00000864                 db    0
.data:00000865                 db    0
.data:00000866                 db    0
.data:00000867                 db    0
.data:00000868                 db    0
.data:00000869                 db    0
.data:0000086A                 db    0
.data:0000086B                 db    0
.data:0000086C                 db    0
.data:0000086D                 db    0
.data:0000086E                 db    0
.data:0000086F                 db    0
.data:00000870                 db    0
.data:00000871                 db    0
.data:00000872                 db    0
.data:00000873                 db    0
.data:00000874                 db  2Eh ; .
.data:00000875                 db    0
.data:00000876                 db  6Dh ; m
.data:00000877                 db    0
.data:00000878                 db  78h ; x
.data:00000879                 db    0
.data:0000087A                 db    0
.data:0000087B                 db    0
.data:0000087C                 db    0
.data:0000087D                 db    0
.data:0000087E                 db    0
.data:0000087F                 db    0
.data:00000880                 db    0
.data:00000881                 db    0
.data:00000882                 db    0
.data:00000883                 db    0
.data:00000884                 db    0
.data:00000885                 db    0
.data:00000886                 db    0
.data:00000887                 db    0
.data:00000888                 db    0
.data:00000889                 db    0
.data:0000088A                 db    0
.data:0000088B                 db    0
.data:0000088C                 db    0
.data:0000088D                 db    0
.data:0000088E                 db    0
.data:0000088F                 db    0
.data:00000890                 db    0
.data:00000891                 db    0
.data:00000892                 db    0
.data:00000893                 db    0
.data:00000894                 db    0
.data:00000895                 db    0
.data:00000896                 db    0
.data:00000897                 db    0
.data:00000898                 db  2Eh ; .
.data:00000899                 db    0
.data:0000089A                 db  76h ; v
.data:0000089B                 db    0
.data:0000089C                 db  62h ; b
.data:0000089D                 db    0
.data:0000089E                 db    0
.data:0000089F                 db    0
.data:000008A0                 db    0
.data:000008A1                 db    0
.data:000008A2                 db    0
.data:000008A3                 db    0
.data:000008A4                 db    0
.data:000008A5                 db    0
.data:000008A6                 db    0
.data:000008A7                 db    0
.data:000008A8                 db    0
.data:000008A9                 db    0
.data:000008AA                 db    0
.data:000008AB                 db    0
.data:000008AC                 db    0
.data:000008AD                 db    0
.data:000008AE                 db    0
.data:000008AF                 db    0
.data:000008B0                 db    0
.data:000008B1                 db    0
.data:000008B2                 db    0
.data:000008B3                 db    0
.data:000008B4                 db    0
.data:000008B5                 db    0
.data:000008B6                 db    0
.data:000008B7                 db    0
.data:000008B8                 db    0
.data:000008B9                 db    0
.data:000008BA                 db    0
.data:000008BB                 db    0
.data:000008BC                 db  2Eh ; .
.data:000008BD                 db    0
.data:000008BE                 db  76h ; v
.data:000008BF                 db    0
.data:000008C0                 db  62h ; b
.data:000008C1                 db    0
.data:000008C2                 db  73h ; s
.data:000008C3                 db    0
.data:000008C4                 db    0
.data:000008C5                 db    0
.data:000008C6                 db    0
.data:000008C7                 db    0
.data:000008C8                 db    0
.data:000008C9                 db    0
.data:000008CA                 db    0
.data:000008CB                 db    0
.data:000008CC                 db    0
.data:000008CD                 db    0
.data:000008CE                 db    0
.data:000008CF                 db    0
.data:000008D0                 db    0
.data:000008D1                 db    0
.data:000008D2                 db    0
.data:000008D3                 db    0
.data:000008D4                 db    0
.data:000008D5                 db    0
.data:000008D6                 db    0
.data:000008D7                 db    0
.data:000008D8                 db    0
.data:000008D9                 db    0
.data:000008DA                 db    0
.data:000008DB                 db    0
.data:000008DC                 db    0
.data:000008DD                 db    0
.data:000008DE                 db    0
.data:000008DF                 db    0
.data:000008E0                 db    0
.data:000008E1                 db    0
.data:000008E2                 db    0
.data:000008E3                 db    0
.data:000008E4                 db    0
.data:000008E5                 db    0
.data:000008E6                 db    0
.data:000008E7                 db    0
.data:000008E8                 db    0
.data:000008E9                 db    0
.data:000008EA                 db    0
.data:000008EB                 db    0
.data:000008EC                 db    0
.data:000008ED                 db    0
.data:000008EE                 db    0
.data:000008EF                 db    0
.data:000008F0                 db    0
.data:000008F1                 db    0
.data:000008F2                 db    0
.data:000008F3                 db    0
.data:000008F4                 db    0
.data:000008F5                 db    0
.data:000008F6                 db    0
.data:000008F7                 db    0
.data:000008F8                 db    0
.data:000008F9                 db    0
.data:000008FA                 db    0
.data:000008FB                 db    0
.data:000008FC                 db    0
.data:000008FD                 db    0
.data:000008FE                 db    0
.data:000008FF                 db    0
.data:00000900                 db    0
.data:00000901                 db    0
.data:00000902                 db    0
.data:00000903                 db    0
.data:00000904                 db    0
.data:00000905                 db    0
.data:00000906                 db    0
.data:00000907                 db    0
.data:00000908                 db    0
.data:00000909                 db    0
.data:0000090A                 db    0
.data:0000090B                 db    0
.data:0000090C                 db    0
.data:0000090D                 db    0
.data:0000090E                 db    0
.data:0000090F                 db    0
.data:00000910                 db    0
.data:00000911                 db    0
.data:00000912                 db    0
.data:00000913                 db    0
.data:00000914                 db    0
.data:00000915                 db    0
.data:00000916                 db    0
.data:00000917                 db    0
.data:00000918                 db    0
.data:00000919                 db    0
.data:0000091A                 db    0
.data:0000091B                 db    0
.data:0000091C                 db    0
.data:0000091D                 db    0
.data:0000091E                 db    0
.data:0000091F                 db    0
.data:00000920                 db    0
.data:00000921                 db    0
.data:00000922                 db    0
.data:00000923                 db    0
.data:00000924                 db    0
.data:00000925                 db    0
.data:00000926                 db    0
.data:00000927                 db    0
.data:00000928                 db    0
.data:00000929                 db    0
.data:0000092A                 db    0
.data:0000092B                 db    0
.data:0000092C                 db    0
.data:0000092D                 db    0
.data:0000092E                 db    0
.data:0000092F                 db    0
.data:00000930                 db    0
.data:00000931                 db    0
.data:00000932                 db    0
.data:00000933                 db    0
.data:00000934                 db    0
.data:00000935                 db    0
.data:00000936                 db    0
.data:00000937                 db    0
.data:00000938                 db    0
.data:00000939                 db    0
.data:0000093A                 db    0
.data:0000093B                 db    0
.data:0000093C                 db    0
.data:0000093D                 db    0
.data:0000093E                 db    0
.data:0000093F                 db    0
.data:00000940                 db    0
.data:00000941                 db    0
.data:00000942                 db    0
.data:00000943                 db    0
.data:00000944                 db    0
.data:00000945                 db    0
.data:00000946                 db    0
.data:00000947                 db    0
.data:00000948                 db    0
.data:00000949                 db    0
.data:0000094A                 db    0
.data:0000094B                 db    0
.data:0000094C                 db    0
.data:0000094D                 db    0
.data:0000094E                 db    0
.data:0000094F                 db    0
.data:00000950                 db    0
.data:00000951                 db    0
.data:00000952                 db    0
.data:00000953                 db    0
.data:00000954                 db    0
.data:00000955                 db    0
.data:00000956                 db    0
.data:00000957                 db    0
.data:00000958                 db    0
.data:00000959                 db    0
.data:0000095A                 db    0
.data:0000095B                 db    0
.data:0000095C                 db    0
.data:0000095D                 db    0
.data:0000095E                 db    0
.data:0000095F                 db    0
.data:00000960                 db    0
.data:00000961                 db    0
.data:00000962                 db    0
.data:00000963                 db    0
.data:00000964                 db    0
.data:00000965                 db    0
.data:00000966                 db    0
.data:00000967                 db    0
.data:00000968                 db    0
.data:00000969                 db    0
.data:0000096A                 db    0
.data:0000096B                 db    0
.data:0000096C                 db    0
.data:0000096D                 db    0
.data:0000096E                 db    0
.data:0000096F                 db    0
.data:00000970                 db  66h ; f
.data:00000971                 db    0
.data:00000972                 db  6Fh ; o
.data:00000973                 db    0
.data:00000974                 db  72h ; r
.data:00000975                 db    0
.data:00000976                 db  74h ; t
.data:00000977                 db    0
.data:00000978                 db  72h ; r
.data:00000979                 db    0
.data:0000097A                 db  61h ; a
.data:0000097B                 db    0
.data:0000097C                 db  6Eh ; n
.data:0000097D                 db    0
.data:0000097E                 db  2Ch ; ,
.data:0000097F                 db    0
.data:00000980                 db  20h
.data:00000981                 db    0
.data:00000982                 db  54h ; T
.data:00000983                 db    0
.data:00000984                 db  65h ; e
.data:00000985                 db    0
.data:00000986                 db  58h ; X
.data:00000987                 db    0
.data:00000988                 db  2Ch ; ,
.data:00000989                 db    0
.data:0000098A                 db  20h
.data:0000098B                 db    0
.data:0000098C                 db  53h ; S
.data:0000098D                 db    0
.data:0000098E                 db  51h ; Q
.data:0000098F                 db    0
.data:00000990                 db  4Ch ; L
.data:00000991                 db    0
.data:00000992                 db    0
.data:00000993                 db    0
.data:00000994                 db  2Eh ; .
.data:00000995                 db    0
.data:00000996                 db  66h ; f
.data:00000997                 db    0
.data:00000998                 db    0
.data:00000999                 db    0
.data:0000099A                 db    0
.data:0000099B                 db    0
.data:0000099C                 db    0
.data:0000099D                 db    0
.data:0000099E                 db    0
.data:0000099F                 db    0
.data:000009A0                 db    0
.data:000009A1                 db    0
.data:000009A2                 db    0
.data:000009A3                 db    0
.data:000009A4                 db    0
.data:000009A5                 db    0
.data:000009A6                 db    0
.data:000009A7                 db    0
.data:000009A8                 db    0
.data:000009A9                 db    0
.data:000009AA                 db    0
.data:000009AB                 db    0
.data:000009AC                 db    0
.data:000009AD                 db    0
.data:000009AE                 db    0
.data:000009AF                 db    0
.data:000009B0                 db    0
.data:000009B1                 db    0
.data:000009B2                 db    0
.data:000009B3                 db    0
.data:000009B4                 db    0
.data:000009B5                 db    0
.data:000009B6                 db    0
.data:000009B7                 db    0
.data:000009B8                 db  2Eh ; .
.data:000009B9                 db    0
.data:000009BA                 db  66h ; f
.data:000009BB                 db    0
.data:000009BC                 db  6Fh ; o
.data:000009BD                 db    0
.data:000009BE                 db  72h ; r
.data:000009BF                 db    0
.data:000009C0                 db    0
.data:000009C1                 db    0
.data:000009C2                 db    0
.data:000009C3                 db    0
.data:000009C4                 db    0
.data:000009C5                 db    0
.data:000009C6                 db    0
.data:000009C7                 db    0
.data:000009C8                 db    0
.data:000009C9                 db    0
.data:000009CA                 db    0
.data:000009CB                 db    0
.data:000009CC                 db    0
.data:000009CD                 db    0
.data:000009CE                 db    0
.data:000009CF                 db    0
.data:000009D0                 db    0
.data:000009D1                 db    0
.data:000009D2                 db    0
.data:000009D3                 db    0
.data:000009D4                 db    0
.data:000009D5                 db    0
.data:000009D6                 db    0
.data:000009D7                 db    0
.data:000009D8                 db    0
.data:000009D9                 db    0
.data:000009DA                 db    0
.data:000009DB                 db    0
.data:000009DC                 db  2Eh ; .
.data:000009DD                 db    0
.data:000009DE                 db  66h ; f
.data:000009DF                 db    0
.data:000009E0                 db  39h ; 9
.data:000009E1                 db    0
.data:000009E2                 db  30h ; 0
.data:000009E3                 db    0
.data:000009E4                 db    0
.data:000009E5                 db    0
.data:000009E6                 db    0
.data:000009E7                 db    0
.data:000009E8                 db    0
.data:000009E9                 db    0
.data:000009EA                 db    0
.data:000009EB                 db    0
.data:000009EC                 db    0
.data:000009ED                 db    0
.data:000009EE                 db    0
.data:000009EF                 db    0
.data:000009F0                 db    0
.data:000009F1                 db    0
.data:000009F2                 db    0
.data:000009F3                 db    0
.data:000009F4                 db    0
.data:000009F5                 db    0
.data:000009F6                 db    0
.data:000009F7                 db    0
.data:000009F8                 db    0
.data:000009F9                 db    0
.data:000009FA                 db    0
.data:000009FB                 db    0
.data:000009FC                 db    0
.data:000009FD                 db    0
.data:000009FE                 db    0
.data:000009FF                 db    0
.data:00000A00                 db  2Eh ; .
.data:00000A01                 db    0
.data:00000A02                 db  66h ; f
.data:00000A03                 db    0
.data:00000A04                 db  39h ; 9
.data:00000A05                 db    0
.data:00000A06                 db  35h ; 5
.data:00000A07                 db    0
.data:00000A08                 db    0
.data:00000A09                 db    0
.data:00000A0A                 db    0
.data:00000A0B                 db    0
.data:00000A0C                 db    0
.data:00000A0D                 db    0
.data:00000A0E                 db    0
.data:00000A0F                 db    0
.data:00000A10                 db    0
.data:00000A11                 db    0
.data:00000A12                 db    0
.data:00000A13                 db    0
.data:00000A14                 db    0
.data:00000A15                 db    0
.data:00000A16                 db    0
.data:00000A17                 db    0
.data:00000A18                 db    0
.data:00000A19                 db    0
.data:00000A1A                 db    0
.data:00000A1B                 db    0
.data:00000A1C                 db    0
.data:00000A1D                 db    0
.data:00000A1E                 db    0
.data:00000A1F                 db    0
.data:00000A20                 db    0
.data:00000A21                 db    0
.data:00000A22                 db    0
.data:00000A23                 db    0
.data:00000A24                 db  2Eh ; .
.data:00000A25                 db    0
.data:00000A26                 db  66h ; f
.data:00000A27                 db    0
.data:00000A28                 db  32h ; 2
.data:00000A29                 db    0
.data:00000A2A                 db  6Bh ; k
.data:00000A2B                 db    0
.data:00000A2C                 db    0
.data:00000A2D                 db    0
.data:00000A2E                 db    0
.data:00000A2F                 db    0
.data:00000A30                 db    0
.data:00000A31                 db    0
.data:00000A32                 db    0
.data:00000A33                 db    0
.data:00000A34                 db    0
.data:00000A35                 db    0
.data:00000A36                 db    0
.data:00000A37                 db    0
.data:00000A38                 db    0
.data:00000A39                 db    0
.data:00000A3A                 db    0
.data:00000A3B                 db    0
.data:00000A3C                 db    0
.data:00000A3D                 db    0
.data:00000A3E                 db    0
.data:00000A3F                 db    0
.data:00000A40                 db    0
.data:00000A41                 db    0
.data:00000A42                 db    0
.data:00000A43                 db    0
.data:00000A44                 db    0
.data:00000A45                 db    0
.data:00000A46                 db    0
.data:00000A47                 db    0
.data:00000A48                 db  2Eh ; .
.data:00000A49                 db    0
.data:00000A4A                 db  74h ; t
.data:00000A4B                 db    0
.data:00000A4C                 db  65h ; e
.data:00000A4D                 db    0
.data:00000A4E                 db  78h ; x
.data:00000A4F                 db    0
.data:00000A50                 db    0
.data:00000A51                 db    0
.data:00000A52                 db    0
.data:00000A53                 db    0
.data:00000A54                 db    0
.data:00000A55                 db    0
.data:00000A56                 db    0
.data:00000A57                 db    0
.data:00000A58                 db    0
.data:00000A59                 db    0
.data:00000A5A                 db    0
.data:00000A5B                 db    0
.data:00000A5C                 db    0
.data:00000A5D                 db    0
.data:00000A5E                 db    0
.data:00000A5F                 db    0
.data:00000A60                 db    0
.data:00000A61                 db    0
.data:00000A62                 db    0
.data:00000A63                 db    0
.data:00000A64                 db    0
.data:00000A65                 db    0
.data:00000A66                 db    0
.data:00000A67                 db    0
.data:00000A68                 db    0
.data:00000A69                 db    0
.data:00000A6A                 db    0
.data:00000A6B                 db    0
.data:00000A6C                 db  2Eh ; .
.data:00000A6D                 db    0
.data:00000A6E                 db  73h ; s
.data:00000A6F                 db    0
.data:00000A70                 db  71h ; q
.data:00000A71                 db    0
.data:00000A72                 db  6Ch ; l
.data:00000A73                 db    0
.data:00000A74                 db    0
.data:00000A75                 db    0
.data:00000A76                 db    0
.data:00000A77                 db    0
.data:00000A78                 db    0
.data:00000A79                 db    0
.data:00000A7A                 db    0
.data:00000A7B                 db    0
.data:00000A7C                 db    0
.data:00000A7D                 db    0
.data:00000A7E                 db    0
.data:00000A7F                 db    0
.data:00000A80                 db    0
.data:00000A81                 db    0
.data:00000A82                 db    0
.data:00000A83                 db    0
.data:00000A84                 db    0
.data:00000A85                 db    0
.data:00000A86                 db    0
.data:00000A87                 db    0
.data:00000A88                 db    0
.data:00000A89                 db    0
.data:00000A8A                 db    0
.data:00000A8B                 db    0
.data:00000A8C                 db    0
.data:00000A8D                 db    0
.data:00000A8E                 db    0
.data:00000A8F                 db    0
.data:00000A90                 db    0
.data:00000A91                 db    0
.data:00000A92                 db    0
.data:00000A93                 db    0
.data:00000A94                 db    0
.data:00000A95                 db    0
.data:00000A96                 db    0
.data:00000A97                 db    0
.data:00000A98                 db    0
.data:00000A99                 db    0
.data:00000A9A                 db    0
.data:00000A9B                 db    0
.data:00000A9C                 db    0
.data:00000A9D                 db    0
.data:00000A9E                 db    0
.data:00000A9F                 db    0
.data:00000AA0                 db    0
.data:00000AA1                 db    0
.data:00000AA2                 db    0
.data:00000AA3                 db    0
.data:00000AA4                 db    0
.data:00000AA5                 db    0
.data:00000AA6                 db    0
.data:00000AA7                 db    0
.data:00000AA8                 db    0
.data:00000AA9                 db    0
.data:00000AAA                 db    0
.data:00000AAB                 db    0
.data:00000AAC                 db    0
.data:00000AAD                 db    0
.data:00000AAE                 db    0
.data:00000AAF                 db    0
.data:00000AB0                 db    0
.data:00000AB1                 db    0
.data:00000AB2                 db    0
.data:00000AB3                 db    0
.data:00000AB4                 db    0
.data:00000AB5                 db    0
.data:00000AB6                 db    0
.data:00000AB7                 db    0
.data:00000AB8                 db    0
.data:00000AB9                 db    0
.data:00000ABA                 db    0
.data:00000ABB                 db    0
.data:00000ABC                 db    0
.data:00000ABD                 db    0
.data:00000ABE                 db    0
.data:00000ABF                 db    0
.data:00000AC0                 db    0
.data:00000AC1                 db    0
.data:00000AC2                 db    0
.data:00000AC3                 db    0
.data:00000AC4                 db    0
.data:00000AC5                 db    0
.data:00000AC6                 db    0
.data:00000AC7                 db    0
.data:00000AC8                 db    0
.data:00000AC9                 db    0
.data:00000ACA                 db    0
.data:00000ACB                 db    0
.data:00000ACC                 db    0
.data:00000ACD                 db    0
.data:00000ACE                 db    0
.data:00000ACF                 db    0
.data:00000AD0                 db    0
.data:00000AD1                 db    0
.data:00000AD2                 db    0
.data:00000AD3                 db    0
.data:00000AD4                 db    0
.data:00000AD5                 db    0
.data:00000AD6                 db    0
.data:00000AD7                 db    0
.data:00000AD8                 db  6Dh ; m
.data:00000AD9                 db    0
.data:00000ADA                 db  69h ; i
.data:00000ADB                 db    0
.data:00000ADC                 db  73h ; s
.data:00000ADD                 db    0
.data:00000ADE                 db  63h ; c
.data:00000ADF                 db    0
.data:00000AE0                 db    0
.data:00000AE1                 db    0
.data:00000AE2                 db    0
.data:00000AE3                 db    0
.data:00000AE4                 db    0
.data:00000AE5                 db    0
.data:00000AE6                 db    0
.data:00000AE7                 db    0
.data:00000AE8                 db    0
.data:00000AE9                 db    0
.data:00000AEA                 db    0
.data:00000AEB                 db    0
.data:00000AEC                 db    0
.data:00000AED                 db    0
.data:00000AEE                 db    0
.data:00000AEF                 db    0
.data:00000AF0                 db    0
.data:00000AF1                 db    0
.data:00000AF2                 db    0
.data:00000AF3                 db    0
.data:00000AF4                 db    0
.data:00000AF5                 db    0
.data:00000AF6                 db    0
.data:00000AF7                 db    0
.data:00000AF8                 db    0
.data:00000AF9                 db    0
.data:00000AFA                 db    0
.data:00000AFB                 db    0
.data:00000AFC                 db  2Eh ; .
.data:00000AFD                 db    0
.data:00000AFE                 db  6Eh ; n
.data:00000AFF                 db    0
.data:00000B00                 db  66h ; f
.data:00000B01                 db    0
.data:00000B02                 db  6Fh ; o
.data:00000B03                 db    0
.data:00000B04                 db    0
.data:00000B05                 db    0
.data:00000B06                 db    0
.data:00000B07                 db    0
.data:00000B08                 db    0
.data:00000B09                 db    0
.data:00000B0A                 db    0
.data:00000B0B                 db    0
.data:00000B0C                 db    0
.data:00000B0D                 db    0
.data:00000B0E                 db    0
.data:00000B0F                 db    0
.data:00000B10                 db    0
.data:00000B11                 db    0
.data:00000B12                 db    0
.data:00000B13                 db    0
.data:00000B14                 db    0
.data:00000B15                 db    0
.data:00000B16                 db    0
.data:00000B17                 db    0
.data:00000B18                 db    0
.data:00000B19                 db    0
.data:00000B1A                 db    0
.data:00000B1B                 db    0
.data:00000B1C                 db    0
.data:00000B1D                 db    0
.data:00000B1E                 db    0
.data:00000B1F                 db    0
.data:00000B20                 db  2Eh ; .
.data:00000B21                 db    0
.data:00000B22                 db  6Dh ; m
.data:00000B23                 db    0
.data:00000B24                 db  61h ; a
.data:00000B25                 db    0
.data:00000B26                 db  6Bh ; k
.data:00000B27                 db    0
.data:00000B28                 db    0
.data:00000B29                 db    0
.data:00000B2A                 db    0
.data:00000B2B                 db    0
.data:00000B2C                 db    0
.data:00000B2D                 db    0
.data:00000B2E                 db    0
.data:00000B2F                 db    0
.data:00000B30                 db    0
.data:00000B31                 db    0
.data:00000B32                 db    0
.data:00000B33                 db    0
.data:00000B34                 db    0
.data:00000B35                 db    0
.data:00000B36                 db    0
.data:00000B37                 db    0
.data:00000B38                 db    0
.data:00000B39                 db    0
.data:00000B3A                 db    0
.data:00000B3B                 db    0
.data:00000B3C                 db    0
.data:00000B3D                 db    0
.data:00000B3E                 db    0
.data:00000B3F                 db    0
.data:00000B40                 db    0
.data:00000B41                 db    0
.data:00000B42                 db    0
.data:00000B43                 db    0
.data:00000B44                 db    0
.data:00000B45                 db    0
.data:00000B46                 db    0
.data:00000B47                 db    0
.data:00000B48                 db    0
.data:00000B49                 db    0
.data:00000B4A                 db    0
.data:00000B4B                 db    0
.data:00000B4C                 db    0
.data:00000B4D                 db    0
.data:00000B4E                 db    0
.data:00000B4F                 db    0
.data:00000B50                 db    0
.data:00000B51                 db    0
.data:00000B52                 db    0
.data:00000B53                 db    0
.data:00000B54                 db    0
.data:00000B55                 db    0
.data:00000B56                 db    0
.data:00000B57                 db    0
.data:00000B58                 db    0
.data:00000B59                 db    0
.data:00000B5A                 db    0
.data:00000B5B                 db    0
.data:00000B5C                 db    0
.data:00000B5D                 db    0
.data:00000B5E                 db    0
.data:00000B5F                 db    0
.data:00000B60                 db    0
.data:00000B61                 db    0
.data:00000B62                 db    0
.data:00000B63                 db    0
.data:00000B64                 db    0
.data:00000B65                 db    0
.data:00000B66                 db    0
.data:00000B67                 db    0
.data:00000B68                 db    0
.data:00000B69                 db    0
.data:00000B6A                 db    0
.data:00000B6B                 db    0
.data:00000B6C                 db    0
.data:00000B6D                 db    0
.data:00000B6E                 db    0
.data:00000B6F                 db    0
.data:00000B70                 db    0
.data:00000B71                 db    0
.data:00000B72                 db    0
.data:00000B73                 db    0
.data:00000B74                 db    0
.data:00000B75                 db    0
.data:00000B76                 db    0
.data:00000B77                 db    0
.data:00000B78                 db    0
.data:00000B79                 db    0
.data:00000B7A                 db    0
.data:00000B7B                 db    0
.data:00000B7C                 db    0
.data:00000B7D                 db    0
.data:00000B7E                 db    0
.data:00000B7F                 db    0
.data:00000B80                 db    0
.data:00000B81                 db    0
.data:00000B82                 db    0
.data:00000B83                 db    0
.data:00000B84                 db    0
.data:00000B85                 db    0
.data:00000B86                 db    0
.data:00000B87                 db    0
.data:00000B88                 db    0
.data:00000B89                 db    0
.data:00000B8A                 db    0
.data:00000B8B                 db    0
.data:00000B8C                 db    0
.data:00000B8D                 db    0
.data:00000B8E                 db    0
.data:00000B8F                 db    0
.data:00000B90                 db    0
.data:00000B91                 db    0
.data:00000B92                 db    0
.data:00000B93                 db    0
.data:00000B94                 db    0
.data:00000B95                 db    0
.data:00000B96                 db    0
.data:00000B97                 db    0
.data:00000B98                 db    0
.data:00000B99                 db    0
.data:00000B9A                 db    0
.data:00000B9B                 db    0
.data:00000B9C                 db    0
.data:00000B9D                 db    0
.data:00000B9E                 db    0
.data:00000B9F                 db    0
.data:00000BA0                 db    0
.data:00000BA1                 db    0
.data:00000BA2                 db    0
.data:00000BA3                 db    0
.data:00000BA4                 db    0
.data:00000BA5                 db    0
.data:00000BA6                 db    0
.data:00000BA7                 db    0
.data:00000BA8                 db    0
.data:00000BA9                 db    0
.data:00000BAA                 db    0
.data:00000BAB                 db    0
.data:00000BAC                 db    0
.data:00000BAD                 db    0
.data:00000BAE                 db    0
.data:00000BAF                 db    0
.data:00000BB0                 db    0
.data:00000BB1                 db    0
.data:00000BB2                 db    0
.data:00000BB3                 db    0
.data:00000BB4                 db    0
.data:00000BB5                 db    0
.data:00000BB6                 db    0
.data:00000BB7                 db    0
.data:00000BB8                 db    0
.data:00000BB9                 db    0
.data:00000BBA                 db    0
.data:00000BBB                 db    0
.data:00000BBC                 db    0
.data:00000BBD                 db    0
.data:00000BBE                 db    0
.data:00000BBF                 db    0
.data:00000BC0                 db    0
.data:00000BC1                 db    0
.data:00000BC2                 db    0
.data:00000BC3                 db    0
.data:00000BC4                 db    0
.data:00000BC5                 db    0
.data:00000BC6                 db    0
.data:00000BC7                 db    0
.data:00000BC8                 db    0
.data:00000BC9                 db    0
.data:00000BCA                 db    0
.data:00000BCB                 db    0
.data:00000BCC                 db    0
.data:00000BCD                 db    0
.data:00000BCE                 db    0
.data:00000BCF                 db    0
.data:00000BD0                 db    0
.data:00000BD1                 db    0
.data:00000BD2                 db    0
.data:00000BD3                 db    0
.data:00000BD4                 db    0
.data:00000BD5                 db    0
.data:00000BD6                 db    0
.data:00000BD7                 db    0
.data:00000BD8                 db    0
.data:00000BD9                 db    0
.data:00000BDA                 db    0
.data:00000BDB                 db    0
.data:00000BDC                 db    0
.data:00000BDD                 db    0
.data:00000BDE                 db    0
.data:00000BDF                 db    0
.data:00000BE0                 db    0
.data:00000BE1                 db    0
.data:00000BE2                 db    0
.data:00000BE3                 db    0
.data:00000BE4                 db    0
.data:00000BE5                 db    0
.data:00000BE6                 db    0
.data:00000BE7                 db    0
.data:00000BE8                 db    0
.data:00000BE9                 db    0
.data:00000BEA                 db    0
.data:00000BEB                 db    0
.data:00000BEC                 db    0
.data:00000BED                 db    0
.data:00000BEE                 db    0
.data:00000BEF                 db    0
.data:00000BF0                 db    0
.data:00000BF1                 db    0
.data:00000BF2                 db    0
.data:00000BF3                 db    0
.data:00000BF4                 db    0
.data:00000BF5                 db    0
.data:00000BF6                 db    0
.data:00000BF7                 db    0
.data:00000BF8                 db    0
.data:00000BF9                 db    0
.data:00000BFA                 db    0
.data:00000BFB                 db    0
.data:00000BFC                 db    0
.data:00000BFD                 db    0
.data:00000BFE                 db    0
.data:00000BFF                 db    0
.data:00000C00                 db    0
.data:00000C01                 db    0
.data:00000C02                 db    0
.data:00000C03                 db    0
.data:00000C04                 db    0
.data:00000C05                 db    0
.data:00000C06                 db    0
.data:00000C07                 db    0
.data:00000C08                 db    0
.data:00000C09                 db    0
.data:00000C0A                 db    0
.data:00000C0B                 db    0
.data:00000C0C                 db    0
.data:00000C0D                 db    0
.data:00000C0E                 db    0
.data:00000C0F                 db    0
.data:00000C10                 db    0
.data:00000C11                 db    0
.data:00000C12                 db    0
.data:00000C13                 db    0
.data:00000C14                 db    0
.data:00000C15                 db    0
.data:00000C16                 db    0
.data:00000C17                 db    0
.data:00000C18                 db    0
.data:00000C19                 db    0
.data:00000C1A                 db    0
.data:00000C1B                 db    0
.data:00000C1C                 db    0
.data:00000C1D                 db    0
.data:00000C1E                 db    0
.data:00000C1F                 db    0
.data:00000C20                 db    0
.data:00000C21                 db    0
.data:00000C22                 db    0
.data:00000C23                 db    0
.data:00000C24                 db    0
.data:00000C25                 db    0
.data:00000C26                 db    0
.data:00000C27                 db    0
.data:00000C28                 db    0
.data:00000C29                 db    0
.data:00000C2A                 db    0
.data:00000C2B                 db    0
.data:00000C2C                 db    0
.data:00000C2D                 db    0
.data:00000C2E                 db    0
.data:00000C2F                 db    0
.data:00000C30                 db    0
.data:00000C31                 db    0
.data:00000C32                 db    0
.data:00000C33                 db    0
.data:00000C34                 db    0
.data:00000C35                 db    0
.data:00000C36                 db    0
.data:00000C37                 db    0
.data:00000C38                 db    0
.data:00000C39                 db    0
.data:00000C3A                 db    0
.data:00000C3B                 db    0
.data:00000C3C                 db    0
.data:00000C3D                 db    0
.data:00000C3E                 db    0
.data:00000C3F                 db    0
.data:00000C40                 db  63h ; c
.data:00000C41                 db    0
.data:00000C42                 db  75h ; u
.data:00000C43                 db    0
.data:00000C44                 db  73h ; s
.data:00000C45                 db    0
.data:00000C46                 db  74h ; t
.data:00000C47                 db    0
.data:00000C48                 db  6Fh ; o
.data:00000C49                 db    0
.data:00000C4A                 db  6Dh ; m
.data:00000C4B                 db    0
.data:00000C4C                 db  69h ; i
.data:00000C4D                 db    0
.data:00000C4E                 db  7Ah ; z
.data:00000C4F                 db    0
.data:00000C50                 db  65h ; e
.data:00000C51                 db    0
.data:00000C52                 db    0
.data:00000C53                 db    0
.data:00000C54                 db    0
.data:00000C55                 db    0
.data:00000C56                 db    0
.data:00000C57                 db    0
.data:00000C58                 db    0
.data:00000C59                 db    0
.data:00000C5A                 db    0
.data:00000C5B                 db    0
.data:00000C5C                 db    0
.data:00000C5D                 db    0
.data:00000C5E                 db    0
.data:00000C5F                 db    0
.data:00000C60                 db    0
.data:00000C61                 db    0
.data:00000C62                 db    0
.data:00000C63                 db    0
.data:00000C64                 db    0
.data:00000C65                 db    0
.data:00000C66                 db    0
.data:00000C67                 db    0
.data:00000C68                 db    0
.data:00000C69                 db    0
.data:00000C6A                 db    0
.data:00000C6B                 db    0
.data:00000C6C                 db    0
.data:00000C6D                 db    0
.data:00000C6E                 db    0
.data:00000C6F                 db    0
.data:00000C70                 db    0
.data:00000C71                 db    0
.data:00000C72                 db    0
.data:00000C73                 db    0
.data:00000C74                 db    0
.data:00000C75                 db    0
.data:00000C76                 db    0
.data:00000C77                 db    0
.data:00000C78                 db    0
.data:00000C79                 db    0
.data:00000C7A                 db    0
.data:00000C7B                 db    0
.data:00000C7C                 db    0
.data:00000C7D                 db    0
.data:00000C7E                 db    0
.data:00000C7F                 db    0
.data:00000C80                 db    0
.data:00000C81                 db    0
.data:00000C82                 db    0
.data:00000C83                 db    0
.data:00000C84                 db    0
.data:00000C85                 db    0
.data:00000C86                 db    0
.data:00000C87                 db    0
.data:00000C88                 db    0
.data:00000C89                 db    0
.data:00000C8A                 db    0
.data:00000C8B                 db    0
.data:00000C8C                 db    0
.data:00000C8D                 db    0
.data:00000C8E                 db    0
.data:00000C8F                 db    0
.data:00000C90                 db    0
.data:00000C91                 db    0
.data:00000C92                 db    0
.data:00000C93                 db    0
.data:00000C94                 db    0
.data:00000C95                 db    0
.data:00000C96                 db    0
.data:00000C97                 db    0
.data:00000C98                 db    0
.data:00000C99                 db    0
.data:00000C9A                 db    0
.data:00000C9B                 db    0
.data:00000C9C                 db    0
.data:00000C9D                 db    0
.data:00000C9E                 db    0
.data:00000C9F                 db    0
.data:00000CA0                 db    0
.data:00000CA1                 db    0
.data:00000CA2                 db    0
.data:00000CA3                 db    0
.data:00000CA4                 db    0
.data:00000CA5                 db    0
.data:00000CA6                 db    0
.data:00000CA7                 db    0
.data:00000CA8                 db    0
.data:00000CA9                 db    0
.data:00000CAA                 db    0
.data:00000CAB                 db    0
.data:00000CAC                 db    0
.data:00000CAD                 db    0
.data:00000CAE                 db    0
.data:00000CAF                 db    0
.data:00000CB0                 db    0
.data:00000CB1                 db    0
.data:00000CB2                 db    0
.data:00000CB3                 db    0
.data:00000CB4                 db    0
.data:00000CB5                 db    0
.data:00000CB6                 db    0
.data:00000CB7                 db    0
.data:00000CB8                 db    0
.data:00000CB9                 db    0
.data:00000CBA                 db    0
.data:00000CBB                 db    0
.data:00000CBC                 db    0
.data:00000CBD                 db    0
.data:00000CBE                 db    0
.data:00000CBF                 db    0
.data:00000CC0                 db    0
.data:00000CC1                 db    0
.data:00000CC2                 db    0
.data:00000CC3                 db    0
.data:00000CC4                 db    0
.data:00000CC5                 db    0
.data:00000CC6                 db    0
.data:00000CC7                 db    0
.data:00000CC8                 db    0
.data:00000CC9                 db    0
.data:00000CCA                 db    0
.data:00000CCB                 db    0
.data:00000CCC                 db    0
.data:00000CCD                 db    0
.data:00000CCE                 db    0
.data:00000CCF                 db    0
.data:00000CD0                 db    0
.data:00000CD1                 db    0
.data:00000CD2                 db    0
.data:00000CD3                 db    0
.data:00000CD4                 db    0
.data:00000CD5                 db    0
.data:00000CD6                 db    0
.data:00000CD7                 db    0
.data:00000CD8                 db    0
.data:00000CD9                 db    0
.data:00000CDA                 db    0
.data:00000CDB                 db    0
.data:00000CDC                 db    0
.data:00000CDD                 db    0
.data:00000CDE                 db    0
.data:00000CDF                 db    0
.data:00000CE0                 db    0
.data:00000CE1                 db    0
.data:00000CE2                 db    0
.data:00000CE3                 db    0
.data:00000CE4                 db    0
.data:00000CE5                 db    0
.data:00000CE6                 db    0
.data:00000CE7                 db    0
.data:00000CE8                 db    0
.data:00000CE9                 db    0
.data:00000CEA                 db    0
.data:00000CEB                 db    0
.data:00000CEC                 db    0
.data:00000CED                 db    0
.data:00000CEE                 db    0
.data:00000CEF                 db    0
.data:00000CF0                 db    0
.data:00000CF1                 db    0
.data:00000CF2                 db    0
.data:00000CF3                 db    0
.data:00000CF4                 db    0
.data:00000CF5                 db    0
.data:00000CF6                 db    0
.data:00000CF7                 db    0
.data:00000CF8                 db    0
.data:00000CF9                 db    0
.data:00000CFA                 db    0
.data:00000CFB                 db    0
.data:00000CFC                 db    0
.data:00000CFD                 db    0
.data:00000CFE                 db    0
.data:00000CFF                 db    0
.data:00000D00                 db    0
.data:00000D01                 db    0
.data:00000D02                 db    0
.data:00000D03                 db    0
.data:00000D04                 db    0
.data:00000D05                 db    0
.data:00000D06                 db    0
.data:00000D07                 db    0
.data:00000D08                 db    0
.data:00000D09                 db    0
.data:00000D0A                 db    0
.data:00000D0B                 db    0
.data:00000D0C                 db    0
.data:00000D0D                 db    0
.data:00000D0E                 db    0
.data:00000D0F                 db    0
.data:00000D10                 db    0
.data:00000D11                 db    0
.data:00000D12                 db    0
.data:00000D13                 db    0
.data:00000D14                 db    0
.data:00000D15                 db    0
.data:00000D16                 db    0
.data:00000D17                 db    0
.data:00000D18                 db    0
.data:00000D19                 db    0
.data:00000D1A                 db    0
.data:00000D1B                 db    0
.data:00000D1C                 db    0
.data:00000D1D                 db    0
.data:00000D1E                 db    0
.data:00000D1F                 db    0
.data:00000D20                 db    0
.data:00000D21                 db    0
.data:00000D22                 db    0
.data:00000D23                 db    0
.data:00000D24                 db    0
.data:00000D25                 db    0
.data:00000D26                 db    0
.data:00000D27                 db    0
.data:00000D28                 db    0
.data:00000D29                 db    0
.data:00000D2A                 db    0
.data:00000D2B                 db    0
.data:00000D2C                 db    0
.data:00000D2D                 db    0
.data:00000D2E                 db    0
.data:00000D2F                 db    0
.data:00000D30                 db    0
.data:00000D31                 db    0
.data:00000D32                 db    0
.data:00000D33                 db    0
.data:00000D34                 db    0
.data:00000D35                 db    0
.data:00000D36                 db    0
.data:00000D37                 db    0
.data:00000D38                 db    0
.data:00000D39                 db    0
.data:00000D3A                 db    0
.data:00000D3B                 db    0
.data:00000D3C                 db    0
.data:00000D3D                 db    0
.data:00000D3E                 db    0
.data:00000D3F                 db    0
.data:00000D40                 db    0
.data:00000D41                 db    0
.data:00000D42                 db    0
.data:00000D43                 db    0
.data:00000D44                 db    0
.data:00000D45                 db    0
.data:00000D46                 db    0
.data:00000D47                 db    0
.data:00000D48                 db    0
.data:00000D49                 db    0
.data:00000D4A                 db    0
.data:00000D4B                 db    0
.data:00000D4C                 db    0
.data:00000D4D                 db    0
.data:00000D4E                 db    0
.data:00000D4F                 db    0
.data:00000D50                 db    0
.data:00000D51                 db    0
.data:00000D52                 db    0
.data:00000D53                 db    0
.data:00000D54                 db    0
.data:00000D55                 db    0
.data:00000D56                 db    0
.data:00000D57                 db    0
.data:00000D58                 db    0
.data:00000D59                 db    0
.data:00000D5A                 db    0
.data:00000D5B                 db    0
.data:00000D5C                 db    0
.data:00000D5D                 db    0
.data:00000D5E                 db    0
.data:00000D5F                 db    0
.data:00000D60                 db    0
.data:00000D61                 db    0
.data:00000D62                 db    0
.data:00000D63                 db    0
.data:00000D64                 db    0
.data:00000D65                 db    0
.data:00000D66                 db    0
.data:00000D67                 db    0
.data:00000D68                 db    0
.data:00000D69                 db    0
.data:00000D6A                 db    0
.data:00000D6B                 db    0
.data:00000D6C                 db    0
.data:00000D6D                 db    0
.data:00000D6E                 db    0
.data:00000D6F                 db    0
.data:00000D70                 db    0
.data:00000D71                 db    0
.data:00000D72                 db    0
.data:00000D73                 db    0
.data:00000D74                 db    0
.data:00000D75                 db    0
.data:00000D76                 db    0
.data:00000D77                 db    0
.data:00000D78                 db    0
.data:00000D79                 db    0
.data:00000D7A                 db    0
.data:00000D7B                 db    0
.data:00000D7C                 db    0
.data:00000D7D                 db    0
.data:00000D7E                 db    0
.data:00000D7F                 db    0
.data:00000D80                 db    0
.data:00000D81                 db    0
.data:00000D82                 db    0
.data:00000D83                 db    0
.data:00000D84                 db    0
.data:00000D85                 db    0
.data:00000D86                 db    0
.data:00000D87                 db    0
.data:00000D88                 db    0
.data:00000D89                 db    0
.data:00000D8A                 db    0
.data:00000D8B                 db    0
.data:00000D8C                 db    0
.data:00000D8D                 db    0
.data:00000D8E                 db    0
.data:00000D8F                 db    0
.data:00000D90                 db    0
.data:00000D91                 db    0
.data:00000D92                 db    0
.data:00000D93                 db    0
.data:00000D94                 db    0
.data:00000D95                 db    0
.data:00000D96                 db    0
.data:00000D97                 db    0
.data:00000D98                 db    0
.data:00000D99                 db    0
.data:00000D9A                 db    0
.data:00000D9B                 db    0
.data:00000D9C                 db    0
.data:00000D9D                 db    0
.data:00000D9E                 db    0
.data:00000D9F                 db    0
.data:00000DA0                 db    0
.data:00000DA1                 db    0
.data:00000DA2                 db    0
.data:00000DA3                 db    0
.data:00000DA4                 db    0
.data:00000DA5                 db    0
.data:00000DA6                 db    0
.data:00000DA7                 db    0
.data:00000DA7 _data           ends
.data:00000DA7
.text$mn:00000DA8 ; ===========================================================================
.text$mn:00000DA8
.text$mn:00000DA8 ; Segment type: Pure code
.text$mn:00000DA8 ; Segment permissions: Read/Execute
.text$mn:00000DA8 _text$mn        segment para public 'CODE' use32
.text$mn:00000DA8                 assume cs:_text$mn
.text$mn:00000DA8                 ;org 0DA8h
.text$mn:00000DA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000DA8
.text$mn:00000DA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000DA8
.text$mn:00000DA8 ; Attributes: bp-based frame
.text$mn:00000DA8
.text$mn:00000DA8 ; void __thiscall RegExtDlg::doDialog(RegExtDlg *this, bool)
.text$mn:00000DA8                 public ?doDialog@RegExtDlg@@QAEX_N@Z
.text$mn:00000DA8 ?doDialog@RegExtDlg@@QAEX_N@Z proc near
.text$mn:00000DA8
.text$mn:00000DA8 hMem            = dword ptr -0Ch
.text$mn:00000DA8 hDialogTemplate = dword ptr -8
.text$mn:00000DA8 dwInitParam     = dword ptr -4
.text$mn:00000DA8 arg_0           = byte ptr  8
.text$mn:00000DA8
.text$mn:00000DA8                 push    ebp
.text$mn:00000DA9                 mov     ebp, esp
.text$mn:00000DAB                 sub     esp, 0Ch
.text$mn:00000DAE                 mov     [ebp+dwInitParam], ecx
.text$mn:00000DB1                 movzx   eax, [ebp+arg_0]
.text$mn:00000DB5                 test    eax, eax
.text$mn:00000DB7                 jz      short loc_E01
.text$mn:00000DB9                 mov     [ebp+hDialogTemplate], 0
.text$mn:00000DC0                 lea     ecx, [ebp+hDialogTemplate]
.text$mn:00000DC3                 push    ecx             ; struct DLGTEMPLATE **
.text$mn:00000DC4                 push    0FA0h           ; int
.text$mn:00000DC9                 mov     ecx, [ebp+dwInitParam] ; this
.text$mn:00000DCC                 call    ?makeRTLResource@StaticDialog@@IAEPAXHPAPAUDLGTEMPLATE@@@Z ; StaticDialog::makeRTLResource(int,DLGTEMPLATE * *)
.text$mn:00000DD1                 mov     [ebp+hMem], eax
.text$mn:00000DD4                 mov     edx, [ebp+dwInitParam]
.text$mn:00000DD7                 push    edx             ; dwInitParam
.text$mn:00000DD8                 push    offset ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z ; lpDialogFunc
.text$mn:00000DDD                 mov     eax, [ebp+dwInitParam]
.text$mn:00000DE0                 mov     ecx, [eax+8]
.text$mn:00000DE3                 push    ecx             ; hWndParent
.text$mn:00000DE4                 mov     edx, [ebp+hDialogTemplate]
.text$mn:00000DE7                 push    edx             ; hDialogTemplate
.text$mn:00000DE8                 mov     eax, [ebp+dwInitParam]
.text$mn:00000DEB                 mov     ecx, [eax+4]
.text$mn:00000DEE                 push    ecx             ; hInstance
.text$mn:00000DEF                 call    dword ptr ds:__imp__DialogBoxIndirectParamW@20 ; DialogBoxIndirectParamW(x,x,x,x,x)
.text$mn:00000DF5                 mov     edx, [ebp+hMem]
.text$mn:00000DF8                 push    edx             ; hMem
.text$mn:00000DF9                 call    dword ptr ds:__imp__GlobalFree@4 ; GlobalFree(x)
.text$mn:00000DFF                 jmp     short loc_E23
.text$mn:00000E01 ; ---------------------------------------------------------------------------
.text$mn:00000E01
.text$mn:00000E01 loc_E01:                                ; CODE XREF: RegExtDlg::doDialog(bool)+Fj
.text$mn:00000E01                 mov     eax, [ebp+dwInitParam]
.text$mn:00000E04                 push    eax             ; dwInitParam
.text$mn:00000E05                 push    offset ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z ; lpDialogFunc
.text$mn:00000E0A                 mov     ecx, [ebp+dwInitParam]
.text$mn:00000E0D                 mov     edx, [ecx+8]
.text$mn:00000E10                 push    edx             ; hWndParent
.text$mn:00000E11                 push    (offset loc_F9E+2) ; lpTemplateName
.text$mn:00000E16                 mov     eax, [ebp+dwInitParam]
.text$mn:00000E19                 mov     ecx, [eax+4]
.text$mn:00000E1C                 push    ecx             ; hInstance
.text$mn:00000E1D                 call    dword ptr ds:__imp__DialogBoxParamW@20 ; DialogBoxParamW(x,x,x,x,x)
.text$mn:00000E23
.text$mn:00000E23 loc_E23:                                ; CODE XREF: RegExtDlg::doDialog(bool)+57j
.text$mn:00000E23                 mov     esp, ebp
.text$mn:00000E25                 pop     ebp
.text$mn:00000E26                 retn    4
.text$mn:00000E26 ?doDialog@RegExtDlg@@QAEX_N@Z endp
.text$mn:00000E26
.text$mn:00000E26 ; ---------------------------------------------------------------------------
.text$mn:00000E29                 db 0Fh dup(0CCh)
.text$mn:00000E38
.text$mn:00000E38 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E38
.text$mn:00000E38 ; Attributes: bp-based frame
.text$mn:00000E38
.text$mn:00000E38 ; int __stdcall RegExtDlg::run_dlgProc(RegExtDlg *this, unsigned int, unsigned int, __int32)
.text$mn:00000E38                 public ?run_dlgProc@RegExtDlg@@EAGHIIJ@Z
.text$mn:00000E38 ?run_dlgProc@RegExtDlg@@EAGHIIJ@Z proc near
.text$mn:00000E38
.text$mn:00000E38 var_EC          = dword ptr -0ECh
.text$mn:00000E38 var_E8          = dword ptr -0E8h
.text$mn:00000E38 hIcon           = dword ptr -0E4h
.text$mn:00000E38 var_E0          = dword ptr -0E0h
.text$mn:00000E38 wParam          = dword ptr -0DCh
.text$mn:00000E38 bEnable         = dword ptr -0D8h
.text$mn:00000E38 var_D4          = dword ptr -0D4h
.text$mn:00000E38 var_D0          = dword ptr -0D0h
.text$mn:00000E38 var_CC          = dword ptr -0CCh
.text$mn:00000E38 var_C8          = dword ptr -0C8h
.text$mn:00000E38 var_C4          = dword ptr -0C4h
.text$mn:00000E38 var_C0          = dword ptr -0C0h
.text$mn:00000E38 var_BC          = dword ptr -0BCh
.text$mn:00000E38 var_B8          = dword ptr -0B8h
.text$mn:00000E38 var_B4          = dword ptr -0B4h
.text$mn:00000E38 var_B0          = dword ptr -0B0h
.text$mn:00000E38 var_70          = dword ptr -70h
.text$mn:00000E38 var_6A          = dword ptr -6Ah
.text$mn:00000E38 var_66          = dword ptr -66h
.text$mn:00000E38 var_62          = dword ptr -62h
.text$mn:00000E38 var_5E          = dword ptr -5Eh
.text$mn:00000E38 var_5A          = dword ptr -5Ah
.text$mn:00000E38 var_56          = dword ptr -56h
.text$mn:00000E38 var_52          = dword ptr -52h
.text$mn:00000E38 var_4E          = word ptr -4Eh
.text$mn:00000E38 lParam          = dword ptr -4Ch
.text$mn:00000E38 var_46          = dword ptr -46h
.text$mn:00000E38 var_42          = dword ptr -42h
.text$mn:00000E38 var_3E          = dword ptr -3Eh
.text$mn:00000E38 var_3A          = dword ptr -3Ah
.text$mn:00000E38 var_36          = dword ptr -36h
.text$mn:00000E38 var_32          = dword ptr -32h
.text$mn:00000E38 var_2E          = dword ptr -2Eh
.text$mn:00000E38 var_2A          = word ptr -2Ah
.text$mn:00000E38 var_28          = dword ptr -28h
.text$mn:00000E38 var_22          = dword ptr -22h
.text$mn:00000E38 var_1E          = dword ptr -1Eh
.text$mn:00000E38 var_1A          = dword ptr -1Ah
.text$mn:00000E38 var_16          = dword ptr -16h
.text$mn:00000E38 var_12          = dword ptr -12h
.text$mn:00000E38 var_E           = dword ptr -0Eh
.text$mn:00000E38 var_A           = dword ptr -0Ah
.text$mn:00000E38 var_6           = word ptr -6
.text$mn:00000E38 var_4           = dword ptr -4
.text$mn:00000E38 this            = dword ptr  8
.text$mn:00000E38 arg_4           = dword ptr  0Ch
.text$mn:00000E38 arg_8           = dword ptr  10h
.text$mn:00000E38 arg_C           = dword ptr  14h
.text$mn:00000E38
.text$mn:00000E38                 push    ebp
.text$mn:00000E39                 mov     ebp, esp
.text$mn:00000E3B                 sub     esp, 0ECh
.text$mn:00000E41                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000E46                 xor     eax, ebp
.text$mn:00000E48                 mov     [ebp+var_4], eax
.text$mn:00000E4B                 mov     eax, [ebp+arg_4]
.text$mn:00000E4E                 mov     [ebp+var_C4], eax
.text$mn:00000E54                 cmp     [ebp+var_C4], 2Bh ; '+'
.text$mn:00000E5B                 jz      loc_EED
.text$mn:00000E61                 cmp     [ebp+var_C4], 110h
.text$mn:00000E6B                 jz      short loc_E82
.text$mn:00000E6D                 cmp     [ebp+var_C4], 111h
.text$mn:00000E77                 jz      loc_F33
.text$mn:00000E7D                 jmp     loc_16B4
.text$mn:00000E82 ; ---------------------------------------------------------------------------
.text$mn:00000E82
.text$mn:00000E82 loc_E82:                                ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+33j
.text$mn:00000E82                 mov     ecx, [ebp+this] ; this
.text$mn:00000E85                 call    ?getRegisteredExts@RegExtDlg@@AAEXXZ ; RegExtDlg::getRegisteredExts(void)
.text$mn:00000E8A                 mov     ecx, [ebp+this] ; this
.text$mn:00000E8D                 call    ?getDefSupportedExts@RegExtDlg@@AAEXXZ ; RegExtDlg::getDefSupportedExts(void)
.text$mn:00000E92                 push    0               ; bEnable
.text$mn:00000E94                 push    0FA4h           ; nIDDlgItem
.text$mn:00000E99                 mov     ecx, [ebp+this]
.text$mn:00000E9C                 mov     edx, [ecx+0Ch]
.text$mn:00000E9F                 push    edx             ; hDlg
.text$mn:00000EA0                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00000EA6                 push    eax             ; hWnd
.text$mn:00000EA7                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00000EAD                 push    0               ; bEnable
.text$mn:00000EAF                 push    0FA7h           ; nIDDlgItem
.text$mn:00000EB4                 mov     eax, [ebp+this]
.text$mn:00000EB7                 mov     ecx, [eax+0Ch]
.text$mn:00000EBA                 push    ecx             ; hDlg
.text$mn:00000EBB                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00000EC1                 push    eax             ; hWnd
.text$mn:00000EC2                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00000EC8                 push    0               ; lParam
.text$mn:00000ECA                 push    11h             ; wParam
.text$mn:00000ECC                 push    0C5h ; '+'      ; Msg
.text$mn:00000ED1                 push    0FA6h           ; nIDDlgItem
.text$mn:00000ED6                 mov     edx, [ebp+this]
.text$mn:00000ED9                 mov     eax, [edx+0Ch]
.text$mn:00000EDC                 push    eax             ; hDlg
.text$mn:00000EDD                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00000EE3                 mov     eax, 1
.text$mn:00000EE8                 jmp     loc_16B6
.text$mn:00000EED ; ---------------------------------------------------------------------------
.text$mn:00000EED
.text$mn:00000EED loc_EED:                                ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+23j
.text$mn:00000EED                 push    offset IconName ; lpIconName
.text$mn:00000EF2                 mov     ecx, [ebp+this]
.text$mn:00000EF5                 mov     edx, [ecx+4]
.text$mn:00000EF8                 push    edx             ; hInstance
.text$mn:00000EF9                 call    dword ptr ds:__imp__LoadIconW@8 ; LoadIconW(x,x)
.text$mn:00000EFF                 mov     [ebp+hIcon], eax
.text$mn:00000F05                 mov     eax, [ebp+arg_C]
.text$mn:00000F08                 mov     [ebp+var_EC], eax
.text$mn:00000F0E                 mov     ecx, [ebp+hIcon]
.text$mn:00000F14                 push    ecx             ; hIcon
.text$mn:00000F15                 push    0               ; Y
.text$mn:00000F17                 push    0               ; X
.text$mn:00000F19                 mov     edx, [ebp+var_EC]
.text$mn:00000F1F                 mov     eax, [edx+18h]
.text$mn:00000F22                 push    eax             ; hDC
.text$mn:00000F23                 call    dword ptr ds:__imp__DrawIcon@16 ; DrawIcon(x,x,x,x)
.text$mn:00000F29                 mov     eax, 1
.text$mn:00000F2E                 jmp     loc_16B6
.text$mn:00000F33 ; ---------------------------------------------------------------------------
.text$mn:00000F33
.text$mn:00000F33 loc_F33:                                ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+3Fj
.text$mn:00000F33                 mov     ecx, [ebp+arg_8]
.text$mn:00000F36                 mov     [ebp+var_C8], ecx
.text$mn:00000F3C                 cmp     [ebp+var_C8], 2
.text$mn:00000F43                 jz      loc_1233
.text$mn:00000F49                 cmp     [ebp+var_C8], 0FA4h
.text$mn:00000F53                 jz      short loc_F6A
.text$mn:00000F55                 cmp     [ebp+var_C8], 0FA7h
.text$mn:00000F5F                 jz      loc_10D0
.text$mn:00000F65                 jmp     loc_124C
.text$mn:00000F6A ; ---------------------------------------------------------------------------
.text$mn:00000F6A
.text$mn:00000F6A loc_F6A:                                ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+11Bj
.text$mn:00000F6A                 mov     ecx, [ebp+this] ; this
.text$mn:00000F6D                 call    ?writeNppPath@RegExtDlg@@AAEXXZ ; RegExtDlg::writeNppPath(void)
.text$mn:00000F72                 mov     dx, $SG95036
.text$mn:00000F79                 mov     word ptr [ebp+lParam], dx
.text$mn:00000F7D                 xor     eax, eax
.text$mn:00000F7F                 mov     [ebp+lParam+2], eax
.text$mn:00000F82                 mov     [ebp+var_46], eax
.text$mn:00000F85                 mov     [ebp+var_42], eax
.text$mn:00000F88                 mov     [ebp+var_3E], eax
.text$mn:00000F8B                 mov     [ebp+var_3A], eax
.text$mn:00000F8E                 mov     [ebp+var_36], eax
.text$mn:00000F91                 mov     [ebp+var_32], eax
.text$mn:00000F94                 mov     [ebp+var_2E], eax
.text$mn:00000F97                 mov     [ebp+var_2A], ax
.text$mn:00000F9B                 mov     ecx, [ebp+this]
.text$mn:00000F9E
.text$mn:00000F9E loc_F9E:                                ; DATA XREF: RegExtDlg::doDialog(bool)+69o
.text$mn:00000F9E                 movzx   edx, byte ptr [ecx+20h]
.text$mn:00000FA2                 test    edx, edx
.text$mn:00000FA4                 jnz     short loc_1017
.text$mn:00000FA6                 push    0               ; lParam
.text$mn:00000FA8                 push    0               ; wParam
.text$mn:00000FAA                 push    188h            ; Msg
.text$mn:00000FAF                 push    0FA2h           ; nIDDlgItem
.text$mn:00000FB4                 mov     eax, [ebp+this]
.text$mn:00000FB7                 mov     ecx, [eax+0Ch]
.text$mn:00000FBA                 push    ecx             ; hDlg
.text$mn:00000FBB                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00000FC1                 mov     [ebp+wParam], eax
.text$mn:00000FC7                 lea     edx, [ebp+lParam]
.text$mn:00000FCA                 push    edx             ; lParam
.text$mn:00000FCB                 mov     eax, [ebp+wParam]
.text$mn:00000FD1                 push    eax             ; wParam
.text$mn:00000FD2                 push    189h            ; Msg
.text$mn:00000FD7                 push    0FA2h           ; nIDDlgItem
.text$mn:00000FDC                 mov     ecx, [ebp+this]
.text$mn:00000FDF                 mov     edx, [ecx+0Ch]
.text$mn:00000FE2                 push    edx             ; hDlg
.text$mn:00000FE3                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00000FE9                 lea     eax, [ebp+lParam]
.text$mn:00000FEC                 push    eax             ; wchar_t *
.text$mn:00000FED                 mov     ecx, [ebp+this] ; this
.text$mn:00000FF0                 call    ?addExt@RegExtDlg@@AAEXPA_W@Z ; RegExtDlg::addExt(wchar_t *)
.text$mn:00000FF5                 push    0               ; lParam
.text$mn:00000FF7                 mov     ecx, [ebp+wParam]
.text$mn:00000FFD                 push    ecx             ; wParam
.text$mn:00000FFE                 push    182h            ; Msg
.text$mn:00001003                 push    0FA2h           ; nIDDlgItem
.text$mn:00001008                 mov     edx, [ebp+this]
.text$mn:0000100B                 mov     eax, [edx+0Ch]
.text$mn:0000100E                 push    eax             ; hDlg
.text$mn:0000100F                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001015                 jmp     short loc_108E
.text$mn:00001017 ; ---------------------------------------------------------------------------
.text$mn:00001017
.text$mn:00001017 loc_1017:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+16Cj
.text$mn:00001017                 lea     ecx, [ebp+lParam]
.text$mn:0000101A                 push    ecx             ; lParam
.text$mn:0000101B                 push    12h             ; wParam
.text$mn:0000101D                 push    0Dh             ; Msg
.text$mn:0000101F                 push    0FA6h           ; nIDDlgItem
.text$mn:00001024                 mov     edx, [ebp+this]
.text$mn:00001027                 mov     eax, [edx+0Ch]
.text$mn:0000102A                 push    eax             ; hDlg
.text$mn:0000102B                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001031                 lea     ecx, [ebp+lParam]
.text$mn:00001034                 push    ecx             ; lParam
.text$mn:00001035                 push    0               ; wParam
.text$mn:00001037                 push    1A2h            ; Msg
.text$mn:0000103C                 push    0FA3h           ; nIDDlgItem
.text$mn:00001041                 mov     edx, [ebp+this]
.text$mn:00001044                 mov     eax, [edx+0Ch]
.text$mn:00001047                 push    eax             ; hDlg
.text$mn:00001048                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000104E                 mov     [ebp+var_E8], eax
.text$mn:00001054                 cmp     [ebp+var_E8], 0FFFFFFFFh
.text$mn:0000105B                 jz      short loc_1067
.text$mn:0000105D                 mov     eax, 1
.text$mn:00001062                 jmp     loc_16B6
.text$mn:00001067 ; ---------------------------------------------------------------------------
.text$mn:00001067
.text$mn:00001067 loc_1067:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+223j
.text$mn:00001067                 lea     ecx, [ebp+lParam]
.text$mn:0000106A                 push    ecx             ; wchar_t *
.text$mn:0000106B                 mov     ecx, [ebp+this] ; this
.text$mn:0000106E                 call    ?addExt@RegExtDlg@@AAEXPA_W@Z ; RegExtDlg::addExt(wchar_t *)
.text$mn:00001073                 push    offset $SG95046 ; lParam
.text$mn:00001078                 push    0               ; wParam
.text$mn:0000107A                 push    0Ch             ; Msg
.text$mn:0000107C                 push    0FA6h           ; nIDDlgItem
.text$mn:00001081                 mov     edx, [ebp+this]
.text$mn:00001084                 mov     eax, [edx+0Ch]
.text$mn:00001087                 push    eax             ; hDlg
.text$mn:00001088                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000108E
.text$mn:0000108E loc_108E:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+1DDj
.text$mn:0000108E                 lea     ecx, [ebp+lParam]
.text$mn:00001091                 push    ecx             ; lParam
.text$mn:00001092                 push    0               ; wParam
.text$mn:00001094                 push    180h            ; Msg
.text$mn:00001099                 push    0FA3h           ; nIDDlgItem
.text$mn:0000109E                 mov     edx, [ebp+this]
.text$mn:000010A1                 mov     eax, [edx+0Ch]
.text$mn:000010A4                 push    eax             ; hDlg
.text$mn:000010A5                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000010AB                 push    0               ; bEnable
.text$mn:000010AD                 push    0FA4h           ; nIDDlgItem
.text$mn:000010B2                 mov     ecx, [ebp+this]
.text$mn:000010B5                 mov     edx, [ecx+0Ch]
.text$mn:000010B8                 push    edx             ; hDlg
.text$mn:000010B9                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000010BF                 push    eax             ; hWnd
.text$mn:000010C0                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000010C6                 mov     eax, 1
.text$mn:000010CB                 jmp     loc_16B6
.text$mn:000010D0 ; ---------------------------------------------------------------------------
.text$mn:000010D0
.text$mn:000010D0 loc_10D0:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+127j
.text$mn:000010D0                 mov     ax, $SG95050
.text$mn:000010D6                 mov     word ptr [ebp+var_70], ax
.text$mn:000010DA                 xor     ecx, ecx
.text$mn:000010DC                 mov     [ebp+var_70+2], ecx
.text$mn:000010DF                 mov     [ebp+var_6A], ecx
.text$mn:000010E2                 mov     [ebp+var_66], ecx
.text$mn:000010E5                 mov     [ebp+var_62], ecx
.text$mn:000010E8                 mov     [ebp+var_5E], ecx
.text$mn:000010EB                 mov     [ebp+var_5A], ecx
.text$mn:000010EE                 mov     [ebp+var_56], ecx
.text$mn:000010F1                 mov     [ebp+var_52], ecx
.text$mn:000010F4                 mov     [ebp+var_4E], cx
.text$mn:000010F8                 push    0               ; lParam
.text$mn:000010FA                 push    0               ; wParam
.text$mn:000010FC                 push    188h            ; Msg
.text$mn:00001101                 push    0FA3h           ; nIDDlgItem
.text$mn:00001106                 mov     edx, [ebp+this]
.text$mn:00001109                 mov     eax, [edx+0Ch]
.text$mn:0000110C                 push    eax             ; hDlg
.text$mn:0000110D                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001113                 mov     [ebp+var_D0], eax
.text$mn:00001119                 lea     ecx, [ebp+var_70]
.text$mn:0000111C                 push    ecx             ; lParam
.text$mn:0000111D                 mov     edx, [ebp+var_D0]
.text$mn:00001123                 push    edx             ; wParam
.text$mn:00001124                 push    189h            ; Msg
.text$mn:00001129                 push    0FA3h           ; nIDDlgItem
.text$mn:0000112E                 mov     eax, [ebp+this]
.text$mn:00001131                 mov     ecx, [eax+0Ch]
.text$mn:00001134                 push    ecx             ; hDlg
.text$mn:00001135                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000113B                 lea     edx, [ebp+var_70]
.text$mn:0000113E                 push    edx             ; wchar_t *
.text$mn:0000113F                 mov     ecx, [ebp+this] ; this
.text$mn:00001142                 call    ?deleteExts@RegExtDlg@@AAE_NPB_W@Z ; RegExtDlg::deleteExts(wchar_t const *)
.text$mn:00001147                 movzx   eax, al
.text$mn:0000114A                 test    eax, eax
.text$mn:0000114C                 jz      short loc_116E
.text$mn:0000114E                 push    0               ; lParam
.text$mn:00001150                 mov     ecx, [ebp+var_D0]
.text$mn:00001156                 push    ecx             ; wParam
.text$mn:00001157                 push    182h            ; Msg
.text$mn:0000115C                 push    0FA3h           ; nIDDlgItem
.text$mn:00001161                 mov     edx, [ebp+this]
.text$mn:00001164                 mov     eax, [edx+0Ch]
.text$mn:00001167                 push    eax             ; hDlg
.text$mn:00001168                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000116E
.text$mn:0000116E loc_116E:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+314j
.text$mn:0000116E                 push    0               ; lParam
.text$mn:00001170                 push    0               ; wParam
.text$mn:00001172                 push    188h            ; Msg
.text$mn:00001177                 push    0FA1h           ; nIDDlgItem
.text$mn:0000117C                 mov     ecx, [ebp+this]
.text$mn:0000117F                 mov     edx, [ecx+0Ch]
.text$mn:00001182                 push    edx             ; hDlg
.text$mn:00001183                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001189                 mov     [ebp+var_D4], eax
.text$mn:0000118F                 push    0               ; bEnable
.text$mn:00001191                 push    0FA7h           ; nIDDlgItem
.text$mn:00001196                 mov     eax, [ebp+this]
.text$mn:00001199                 mov     ecx, [eax+0Ch]
.text$mn:0000119C                 push    ecx             ; hDlg
.text$mn:0000119D                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000011A3                 push    eax             ; hWnd
.text$mn:000011A4                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000011AA                 cmp     [ebp+var_D4], 0FFFFFFFFh
.text$mn:000011B1                 jz      short loc_1229
.text$mn:000011B3                 mov     [ebp+var_C0], 1
.text$mn:000011BD                 jmp     short loc_11CE
.text$mn:000011BF ; ---------------------------------------------------------------------------
.text$mn:000011BF
.text$mn:000011BF loc_11BF:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long):loc_1227j
.text$mn:000011BF                 mov     edx, [ebp+var_C0]
.text$mn:000011C5                 add     edx, 1
.text$mn:000011C8                 mov     [ebp+var_C0], edx
.text$mn:000011CE
.text$mn:000011CE loc_11CE:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+385j
.text$mn:000011CE                 cmp     [ebp+var_C0], 0Ah
.text$mn:000011D5                 jge     short loc_1229
.text$mn:000011D7                 imul    eax, [ebp+var_D4], 168h
.text$mn:000011E1                 imul    ecx, [ebp+var_C0], 24h
.text$mn:000011E8                 lea     edx, ?defExtArray@@3PAY19BC@_WA[eax+ecx] ; "Notepad"
.text$mn:000011EF                 push    edx             ; Str2
.text$mn:000011F0                 lea     eax, [ebp+var_70]
.text$mn:000011F3                 push    eax             ; Str1
.text$mn:000011F4                 call    _wcsicmp
.text$mn:000011F9                 add     esp, 8
.text$mn:000011FC                 test    eax, eax
.text$mn:000011FE                 jnz     short loc_1227
.text$mn:00001200                 lea     ecx, [ebp+var_70]
.text$mn:00001203                 push    ecx             ; lParam
.text$mn:00001204                 push    0               ; wParam
.text$mn:00001206                 push    180h            ; Msg
.text$mn:0000120B                 push    0FA2h           ; nIDDlgItem
.text$mn:00001210                 mov     edx, [ebp+this]
.text$mn:00001213                 mov     eax, [edx+0Ch]
.text$mn:00001216                 push    eax             ; hDlg
.text$mn:00001217                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000121D                 mov     eax, 1
.text$mn:00001222                 jmp     loc_16B6
.text$mn:00001227 ; ---------------------------------------------------------------------------
.text$mn:00001227
.text$mn:00001227 loc_1227:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+3C6j
.text$mn:00001227                 jmp     short loc_11BF
.text$mn:00001229 ; ---------------------------------------------------------------------------
.text$mn:00001229
.text$mn:00001229 loc_1229:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+379j
.text$mn:00001229                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+39Dj
.text$mn:00001229                 mov     eax, 1
.text$mn:0000122E                 jmp     loc_16B6
.text$mn:00001233 ; ---------------------------------------------------------------------------
.text$mn:00001233
.text$mn:00001233 loc_1233:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+10Bj
.text$mn:00001233                 push    0               ; nResult
.text$mn:00001235                 mov     ecx, [ebp+this]
.text$mn:00001238                 mov     edx, [ecx+0Ch]
.text$mn:0000123B                 push    edx             ; hDlg
.text$mn:0000123C                 call    dword ptr ds:__imp__EndDialog@8 ; EndDialog(x,x)
.text$mn:00001242                 mov     eax, 1
.text$mn:00001247                 jmp     loc_16B6
.text$mn:0000124C ; ---------------------------------------------------------------------------
.text$mn:0000124C
.text$mn:0000124C loc_124C:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+12Dj
.text$mn:0000124C                 mov     eax, [ebp+arg_8]
.text$mn:0000124F                 shr     eax, 10h
.text$mn:00001252                 and     eax, 0FFFFh
.text$mn:00001257                 movzx   ecx, ax
.text$mn:0000125A                 cmp     ecx, 300h
.text$mn:00001260                 jnz     loc_13AC
.text$mn:00001266                 mov     dx, $SG95067
.text$mn:0000126D                 mov     word ptr [ebp+var_28], dx
.text$mn:00001271                 xor     eax, eax
.text$mn:00001273                 mov     [ebp+var_28+2], eax
.text$mn:00001276                 mov     [ebp+var_22], eax
.text$mn:00001279                 mov     [ebp+var_1E], eax
.text$mn:0000127C                 mov     [ebp+var_1A], eax
.text$mn:0000127F                 mov     [ebp+var_16], eax
.text$mn:00001282                 mov     [ebp+var_12], eax
.text$mn:00001285                 mov     [ebp+var_E], eax
.text$mn:00001288                 mov     [ebp+var_A], eax
.text$mn:0000128B                 mov     [ebp+var_6], ax
.text$mn:0000128F                 lea     ecx, [ebp+var_28]
.text$mn:00001292                 push    ecx             ; lParam
.text$mn:00001293                 push    12h             ; wParam
.text$mn:00001295                 push    0Dh             ; Msg
.text$mn:00001297                 push    0FA6h           ; nIDDlgItem
.text$mn:0000129C                 mov     edx, [ebp+this]
.text$mn:0000129F                 mov     eax, [edx+0Ch]
.text$mn:000012A2                 push    eax             ; hDlg
.text$mn:000012A3                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000012A9                 lea     ecx, [ebp+var_28]
.text$mn:000012AC                 push    ecx             ; lpString
.text$mn:000012AD                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:000012B3                 cmp     eax, 1
.text$mn:000012B6                 jnz     loc_135D
.text$mn:000012BC                 mov     edx, 2
.text$mn:000012C1                 imul    eax, edx, 0
.text$mn:000012C4                 movzx   ecx, word ptr [ebp+eax+var_28]
.text$mn:000012C9                 cmp     ecx, 2Eh ; '.'
.text$mn:000012CC                 jz      loc_135D
.text$mn:000012D2                 mov     edx, 2
.text$mn:000012D7                 imul    eax, edx, 0
.text$mn:000012DA                 mov     ecx, 2
.text$mn:000012DF                 shl     ecx, 0
.text$mn:000012E2                 mov     dx, word ptr [ebp+eax+var_28]
.text$mn:000012E7                 mov     word ptr [ebp+ecx+var_28], dx
.text$mn:000012EC                 mov     eax, 2
.text$mn:000012F1                 imul    ecx, eax, 0
.text$mn:000012F4                 mov     edx, 2Eh ; '.'
.text$mn:000012F9                 mov     word ptr [ebp+ecx+var_28], dx
.text$mn:000012FE                 mov     eax, 2
.text$mn:00001303                 shl     eax, 1
.text$mn:00001305                 mov     [ebp+var_CC], eax
.text$mn:0000130B                 cmp     [ebp+var_CC], 24h ; '$'
.text$mn:00001312                 jnb     short loc_1316
.text$mn:00001314                 jmp     short loc_131B
.text$mn:00001316 ; ---------------------------------------------------------------------------
.text$mn:00001316
.text$mn:00001316 loc_1316:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+4DAj
.text$mn:00001316                 call    ___report_rangecheckfailure
.text$mn:0000131B
.text$mn:0000131B loc_131B:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+4DCj
.text$mn:0000131B                 xor     ecx, ecx
.text$mn:0000131D                 mov     edx, [ebp+var_CC]
.text$mn:00001323                 mov     word ptr [ebp+edx+var_28], cx
.text$mn:00001328                 lea     eax, [ebp+var_28]
.text$mn:0000132B                 push    eax             ; lParam
.text$mn:0000132C                 push    0               ; wParam
.text$mn:0000132E                 push    0Ch             ; Msg
.text$mn:00001330                 push    0FA6h           ; nIDDlgItem
.text$mn:00001335                 mov     ecx, [ebp+this]
.text$mn:00001338                 mov     edx, [ecx+0Ch]
.text$mn:0000133B                 push    edx             ; hDlg
.text$mn:0000133C                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001342                 push    2               ; lParam
.text$mn:00001344                 push    2               ; wParam
.text$mn:00001346                 push    0B1h ; '¦'      ; Msg
.text$mn:0000134B                 push    0FA6h           ; nIDDlgItem
.text$mn:00001350                 mov     eax, [ebp+this]
.text$mn:00001353                 mov     ecx, [eax+0Ch]
.text$mn:00001356                 push    ecx             ; hDlg
.text$mn:00001357                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000135D
.text$mn:0000135D loc_135D:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+47Ej
.text$mn:0000135D                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+494j
.text$mn:0000135D                 lea     edx, [ebp+var_28]
.text$mn:00001360                 push    edx             ; lpString
.text$mn:00001361                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00001367                 cmp     eax, 1
.text$mn:0000136A                 jle     short loc_1378
.text$mn:0000136C                 mov     [ebp+bEnable], 1
.text$mn:00001376                 jmp     short loc_1382
.text$mn:00001378 ; ---------------------------------------------------------------------------
.text$mn:00001378
.text$mn:00001378 loc_1378:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+532j
.text$mn:00001378                 mov     [ebp+bEnable], 0
.text$mn:00001382
.text$mn:00001382 loc_1382:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+53Ej
.text$mn:00001382                 mov     eax, [ebp+bEnable]
.text$mn:00001388                 push    eax             ; bEnable
.text$mn:00001389                 push    0FA4h           ; nIDDlgItem
.text$mn:0000138E                 mov     ecx, [ebp+this]
.text$mn:00001391                 mov     edx, [ecx+0Ch]
.text$mn:00001394                 push    edx             ; hDlg
.text$mn:00001395                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000139B                 push    eax             ; hWnd
.text$mn:0000139C                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000013A2                 mov     eax, 1
.text$mn:000013A7                 jmp     loc_16B6
.text$mn:000013AC ; ---------------------------------------------------------------------------
.text$mn:000013AC
.text$mn:000013AC loc_13AC:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+428j
.text$mn:000013AC                 mov     eax, [ebp+arg_8]
.text$mn:000013AF                 shr     eax, 10h
.text$mn:000013B2                 and     eax, 0FFFFh
.text$mn:000013B7                 movzx   ecx, ax
.text$mn:000013BA                 cmp     ecx, 1
.text$mn:000013BD                 jnz     loc_16B4
.text$mn:000013C3                 push    0               ; lParam
.text$mn:000013C5                 push    0               ; wParam
.text$mn:000013C7                 push    188h            ; Msg
.text$mn:000013CC                 mov     edx, [ebp+arg_8]
.text$mn:000013CF                 and     edx, 0FFFFh
.text$mn:000013D5                 movzx   eax, dx
.text$mn:000013D8                 push    eax             ; nIDDlgItem
.text$mn:000013D9                 mov     ecx, [ebp+this]
.text$mn:000013DC                 mov     edx, [ecx+0Ch]
.text$mn:000013DF                 push    edx             ; hDlg
.text$mn:000013E0                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000013E6                 mov     [ebp+var_B4], eax
.text$mn:000013EC                 mov     eax, [ebp+arg_8]
.text$mn:000013EF                 and     eax, 0FFFFh
.text$mn:000013F4                 movzx   ecx, ax
.text$mn:000013F7                 cmp     ecx, 0FA1h
.text$mn:000013FD                 jnz     loc_1643
.text$mn:00001403                 cmp     [ebp+var_B4], 0FFFFFFFFh
.text$mn:0000140A                 jz      loc_1641
.text$mn:00001410                 lea     edx, [ebp+var_B0]
.text$mn:00001416                 push    edx             ; lParam
.text$mn:00001417                 mov     eax, [ebp+var_B4]
.text$mn:0000141D                 push    eax             ; wParam
.text$mn:0000141E                 push    189h            ; Msg
.text$mn:00001423                 mov     ecx, [ebp+arg_8]
.text$mn:00001426                 and     ecx, 0FFFFh
.text$mn:0000142C                 movzx   edx, cx
.text$mn:0000142F                 push    edx             ; nIDDlgItem
.text$mn:00001430                 mov     eax, [ebp+this]
.text$mn:00001433                 mov     ecx, [eax+0Ch]
.text$mn:00001436                 push    ecx             ; hDlg
.text$mn:00001437                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000143D                 lea     edx, [ebp+var_B0]
.text$mn:00001443                 push    edx             ; Str2
.text$mn:00001444                 mov     eax, 168h
.text$mn:00001449                 shl     eax, 3
.text$mn:0000144C                 mov     ecx, 24h ; '$'
.text$mn:00001451                 imul    edx, ecx, 0
.text$mn:00001454                 lea     eax, ?defExtArray@@3PAY19BC@_WA[eax+edx] ; "Notepad"
.text$mn:0000145B                 push    eax             ; Str1
.text$mn:0000145C                 call    _wcsicmp
.text$mn:00001461                 add     esp, 8
.text$mn:00001464                 test    eax, eax
.text$mn:00001466                 jnz     short loc_14AA
.text$mn:00001468                 push    0               ; nCmdShow
.text$mn:0000146A                 push    0FA2h           ; nIDDlgItem
.text$mn:0000146F                 mov     ecx, [ebp+this]
.text$mn:00001472                 mov     edx, [ecx+0Ch]
.text$mn:00001475                 push    edx             ; hDlg
.text$mn:00001476                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000147C                 push    eax             ; hWnd
.text$mn:0000147D                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:00001483                 push    5               ; nCmdShow
.text$mn:00001485                 push    0FA6h           ; nIDDlgItem
.text$mn:0000148A                 mov     eax, [ebp+this]
.text$mn:0000148D                 mov     ecx, [eax+0Ch]
.text$mn:00001490                 push    ecx             ; hDlg
.text$mn:00001491                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001497                 push    eax             ; hWnd
.text$mn:00001498                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:0000149E                 mov     edx, [ebp+this]
.text$mn:000014A1                 mov     byte ptr [edx+20h], 1
.text$mn:000014A5                 jmp     loc_1626
.text$mn:000014AA ; ---------------------------------------------------------------------------
.text$mn:000014AA
.text$mn:000014AA loc_14AA:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+62Ej
.text$mn:000014AA                 mov     eax, [ebp+this]
.text$mn:000014AD                 movzx   ecx, byte ptr [eax+20h]
.text$mn:000014B1                 test    ecx, ecx
.text$mn:000014B3                 jz      short loc_14F2
.text$mn:000014B5                 push    5               ; nCmdShow
.text$mn:000014B7                 push    0FA2h           ; nIDDlgItem
.text$mn:000014BC                 mov     edx, [ebp+this]
.text$mn:000014BF                 mov     eax, [edx+0Ch]
.text$mn:000014C2                 push    eax             ; hDlg
.text$mn:000014C3                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000014C9                 push    eax             ; hWnd
.text$mn:000014CA                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000014D0                 push    0               ; nCmdShow
.text$mn:000014D2                 push    0FA6h           ; nIDDlgItem
.text$mn:000014D7                 mov     ecx, [ebp+this]
.text$mn:000014DA                 mov     edx, [ecx+0Ch]
.text$mn:000014DD                 push    edx             ; hDlg
.text$mn:000014DE                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000014E4                 push    eax             ; hWnd
.text$mn:000014E5                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000014EB                 mov     eax, [ebp+this]
.text$mn:000014EE                 mov     byte ptr [eax+20h], 0
.text$mn:000014F2
.text$mn:000014F2 loc_14F2:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+67Bj
.text$mn:000014F2                 push    0               ; lParam
.text$mn:000014F4                 push    0               ; wParam
.text$mn:000014F6                 push    18Bh            ; Msg
.text$mn:000014FB                 push    0FA2h           ; nIDDlgItem
.text$mn:00001500                 mov     ecx, [ebp+this]
.text$mn:00001503                 mov     edx, [ecx+0Ch]
.text$mn:00001506                 push    edx             ; hDlg
.text$mn:00001507                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000150D                 mov     [ebp+var_B8], eax
.text$mn:00001513                 mov     eax, [ebp+var_B8]
.text$mn:00001519                 sub     eax, 1
.text$mn:0000151C                 mov     [ebp+var_B8], eax
.text$mn:00001522                 jmp     short loc_1533
.text$mn:00001524 ; ---------------------------------------------------------------------------
.text$mn:00001524
.text$mn:00001524 loc_1524:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+724j
.text$mn:00001524                 mov     ecx, [ebp+var_B8]
.text$mn:0000152A                 sub     ecx, 1
.text$mn:0000152D                 mov     [ebp+var_B8], ecx
.text$mn:00001533
.text$mn:00001533 loc_1533:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+6EAj
.text$mn:00001533                 cmp     [ebp+var_B8], 0
.text$mn:0000153A                 jl      short loc_155E
.text$mn:0000153C                 push    0               ; lParam
.text$mn:0000153E                 mov     edx, [ebp+var_B8]
.text$mn:00001544                 push    edx             ; wParam
.text$mn:00001545                 push    182h            ; Msg
.text$mn:0000154A                 push    0FA2h           ; nIDDlgItem
.text$mn:0000154F                 mov     eax, [ebp+this]
.text$mn:00001552                 mov     ecx, [eax+0Ch]
.text$mn:00001555                 push    ecx             ; hDlg
.text$mn:00001556                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:0000155C                 jmp     short loc_1524
.text$mn:0000155E ; ---------------------------------------------------------------------------
.text$mn:0000155E
.text$mn:0000155E loc_155E:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+702j
.text$mn:0000155E                 mov     [ebp+var_BC], 1
.text$mn:00001568                 jmp     short loc_1579
.text$mn:0000156A ; ---------------------------------------------------------------------------
.text$mn:0000156A
.text$mn:0000156A loc_156A:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long):loc_1621j
.text$mn:0000156A                 mov     edx, [ebp+var_BC]
.text$mn:00001570                 add     edx, 1
.text$mn:00001573                 mov     [ebp+var_BC], edx
.text$mn:00001579
.text$mn:00001579 loc_1579:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+730j
.text$mn:00001579                 cmp     [ebp+var_BC], 0Ah
.text$mn:00001580                 jge     loc_1626
.text$mn:00001586                 imul    eax, [ebp+var_B4], 168h
.text$mn:00001590                 imul    ecx, [ebp+var_BC], 24h
.text$mn:00001597                 lea     edx, ?defExtArray@@3PAY19BC@_WA[eax+ecx] ; "Notepad"
.text$mn:0000159E                 push    edx             ; lpString2
.text$mn:0000159F                 push    offset $SG95098 ; lpString1
.text$mn:000015A4                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:000015AA                 test    eax, eax
.text$mn:000015AC                 jz      short loc_1621
.text$mn:000015AE                 imul    eax, [ebp+var_B4], 168h
.text$mn:000015B8                 imul    ecx, [ebp+var_BC], 24h
.text$mn:000015BF                 lea     edx, ?defExtArray@@3PAY19BC@_WA[eax+ecx] ; "Notepad"
.text$mn:000015C6                 push    edx             ; lParam
.text$mn:000015C7                 push    0               ; wParam
.text$mn:000015C9                 push    1A2h            ; Msg
.text$mn:000015CE                 push    0FA3h           ; nIDDlgItem
.text$mn:000015D3                 mov     eax, [ebp+this]
.text$mn:000015D6                 mov     ecx, [eax+0Ch]
.text$mn:000015D9                 push    ecx             ; hDlg
.text$mn:000015DA                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:000015E0                 mov     [ebp+var_E0], eax
.text$mn:000015E6                 cmp     [ebp+var_E0], 0FFFFFFFFh
.text$mn:000015ED                 jnz     short loc_1621
.text$mn:000015EF                 imul    edx, [ebp+var_B4], 168h
.text$mn:000015F9                 imul    eax, [ebp+var_BC], 24h
.text$mn:00001600                 lea     ecx, ?defExtArray@@3PAY19BC@_WA[edx+eax] ; "Notepad"
.text$mn:00001607                 push    ecx             ; lParam
.text$mn:00001608                 push    0               ; wParam
.text$mn:0000160A                 push    180h            ; Msg
.text$mn:0000160F                 push    0FA2h           ; nIDDlgItem
.text$mn:00001614                 mov     edx, [ebp+this]
.text$mn:00001617                 mov     eax, [edx+0Ch]
.text$mn:0000161A                 push    eax             ; hDlg
.text$mn:0000161B                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001621
.text$mn:00001621 loc_1621:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+774j
.text$mn:00001621                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+7B5j
.text$mn:00001621                 jmp     loc_156A
.text$mn:00001626 ; ---------------------------------------------------------------------------
.text$mn:00001626
.text$mn:00001626 loc_1626:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+66Dj
.text$mn:00001626                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+748j
.text$mn:00001626                 push    0               ; bEnable
.text$mn:00001628                 push    0FA4h           ; nIDDlgItem
.text$mn:0000162D                 mov     ecx, [ebp+this]
.text$mn:00001630                 mov     edx, [ecx+0Ch]
.text$mn:00001633                 push    edx             ; hDlg
.text$mn:00001634                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:0000163A                 push    eax             ; hWnd
.text$mn:0000163B                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:00001641
.text$mn:00001641 loc_1641:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+5D2j
.text$mn:00001641                 jmp     short loc_16B4
.text$mn:00001643 ; ---------------------------------------------------------------------------
.text$mn:00001643
.text$mn:00001643 loc_1643:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+5C5j
.text$mn:00001643                 mov     eax, [ebp+arg_8]
.text$mn:00001646                 and     eax, 0FFFFh
.text$mn:0000164B                 movzx   ecx, ax
.text$mn:0000164E                 cmp     ecx, 0FA2h
.text$mn:00001654                 jnz     short loc_167C
.text$mn:00001656                 cmp     [ebp+var_B4], 0FFFFFFFFh
.text$mn:0000165D                 jz      short loc_167A
.text$mn:0000165F                 push    1               ; bEnable
.text$mn:00001661                 push    0FA4h           ; nIDDlgItem
.text$mn:00001666                 mov     edx, [ebp+this]
.text$mn:00001669                 mov     eax, [edx+0Ch]
.text$mn:0000166C                 push    eax             ; hDlg
.text$mn:0000166D                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00001673                 push    eax             ; hWnd
.text$mn:00001674                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:0000167A
.text$mn:0000167A loc_167A:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+825j
.text$mn:0000167A                 jmp     short loc_16B4
.text$mn:0000167C ; ---------------------------------------------------------------------------
.text$mn:0000167C
.text$mn:0000167C loc_167C:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+81Cj
.text$mn:0000167C                 mov     ecx, [ebp+arg_8]
.text$mn:0000167F                 and     ecx, 0FFFFh
.text$mn:00001685                 movzx   edx, cx
.text$mn:00001688                 cmp     edx, 0FA3h
.text$mn:0000168E                 jnz     short loc_16B4
.text$mn:00001690                 cmp     [ebp+var_B4], 0FFFFFFFFh
.text$mn:00001697                 jz      short loc_16B4
.text$mn:00001699                 push    1               ; bEnable
.text$mn:0000169B                 push    0FA7h           ; nIDDlgItem
.text$mn:000016A0                 mov     eax, [ebp+this]
.text$mn:000016A3                 mov     ecx, [eax+0Ch]
.text$mn:000016A6                 push    ecx             ; hDlg
.text$mn:000016A7                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000016AD                 push    eax             ; hWnd
.text$mn:000016AE                 call    dword ptr ds:__imp__EnableWindow@8 ; EnableWindow(x,x)
.text$mn:000016B4
.text$mn:000016B4 loc_16B4:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+45j
.text$mn:000016B4                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+585j ...
.text$mn:000016B4                 xor     eax, eax
.text$mn:000016B6
.text$mn:000016B6 loc_16B6:                               ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+B0j
.text$mn:000016B6                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+F6j ...
.text$mn:000016B6                 mov     ecx, [ebp+var_4]
.text$mn:000016B9                 xor     ecx, ebp
.text$mn:000016BB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000016C0                 mov     esp, ebp
.text$mn:000016C2                 pop     ebp
.text$mn:000016C3                 retn    10h
.text$mn:000016C3 ?run_dlgProc@RegExtDlg@@EAGHIIJ@Z endp
.text$mn:000016C3
.text$mn:000016C3 ; ---------------------------------------------------------------------------
.text$mn:000016C6                 align 4
.text$mn:000016C8
.text$mn:000016C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000016C8
.text$mn:000016C8 ; Attributes: bp-based frame
.text$mn:000016C8
.text$mn:000016C8 ; void __thiscall RegExtDlg::getRegisteredExts(RegExtDlg *__hidden this)
.text$mn:000016C8                 public ?getRegisteredExts@RegExtDlg@@AAEXXZ
.text$mn:000016C8 ?getRegisteredExts@RegExtDlg@@AAEXXZ proc near
.text$mn:000016C8                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+4Dp
.text$mn:000016C8
.text$mn:000016C8 cbData          = dword ptr -0A4h
.text$mn:000016C8 Type            = dword ptr -0A0h
.text$mn:000016C8 var_9C          = dword ptr -9Ch
.text$mn:000016C8 var_98          = dword ptr -98h
.text$mn:000016C8 phkResult       = dword ptr -94h
.text$mn:000016C8 cchName         = dword ptr -90h
.text$mn:000016C8 var_8C          = dword ptr -8Ch
.text$mn:000016C8 dwIndex         = dword ptr -88h
.text$mn:000016C8 Data            = byte ptr -84h
.text$mn:000016C8 Name            = word ptr -44h
.text$mn:000016C8 var_4           = dword ptr -4
.text$mn:000016C8
.text$mn:000016C8                 push    ebp
.text$mn:000016C9                 mov     ebp, esp
.text$mn:000016CB                 sub     esp, 0A4h
.text$mn:000016D1                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000016D6                 xor     eax, ebp
.text$mn:000016D8                 mov     [ebp+var_4], eax
.text$mn:000016DB                 mov     [ebp+var_8C], ecx
.text$mn:000016E1                 push    80000000h       ; HKEY
.text$mn:000016E6                 mov     ecx, [ebp+var_8C] ; this
.text$mn:000016EC                 call    ?getNbSubKey@RegExtDlg@@ABEHPAUHKEY__@@@Z ; RegExtDlg::getNbSubKey(HKEY__ *)
.text$mn:000016F1                 mov     [ebp+var_98], eax
.text$mn:000016F7                 mov     [ebp+dwIndex], 0
.text$mn:00001701                 jmp     short loc_1712
.text$mn:00001703 ; ---------------------------------------------------------------------------
.text$mn:00001703
.text$mn:00001703 loc_1703:                               ; CODE XREF: RegExtDlg::getRegisteredExts(void):loc_1824j
.text$mn:00001703                 mov     eax, [ebp+dwIndex]
.text$mn:00001709                 add     eax, 1
.text$mn:0000170C                 mov     [ebp+dwIndex], eax
.text$mn:00001712
.text$mn:00001712 loc_1712:                               ; CODE XREF: RegExtDlg::getRegisteredExts(void)+39j
.text$mn:00001712                 mov     ecx, [ebp+dwIndex]
.text$mn:00001718                 cmp     ecx, [ebp+var_98]
.text$mn:0000171E                 jge     loc_1829
.text$mn:00001724                 mov     [ebp+cchName], 20h ; ' '
.text$mn:0000172E                 push    0               ; lpftLastWriteTime
.text$mn:00001730                 push    0               ; lpcchClass
.text$mn:00001732                 push    0               ; lpClass
.text$mn:00001734                 push    0               ; lpReserved
.text$mn:00001736                 lea     edx, [ebp+cchName]
.text$mn:0000173C                 push    edx             ; lpcchName
.text$mn:0000173D                 lea     eax, [ebp+Name]
.text$mn:00001740                 push    eax             ; lpName
.text$mn:00001741                 mov     ecx, [ebp+dwIndex]
.text$mn:00001747                 push    ecx             ; dwIndex
.text$mn:00001748                 push    80000000h       ; hKey
.text$mn:0000174D                 call    dword ptr ds:__imp__RegEnumKeyExW@32 ; RegEnumKeyExW(x,x,x,x,x,x,x,x)
.text$mn:00001753                 mov     [ebp+var_9C], eax
.text$mn:00001759                 cmp     [ebp+var_9C], 0
.text$mn:00001760                 jnz     loc_1824
.text$mn:00001766                 mov     edx, 2
.text$mn:0000176B                 imul    eax, edx, 0
.text$mn:0000176E                 movzx   ecx, [ebp+eax+Name]
.text$mn:00001773                 cmp     ecx, 2Eh ; '.'
.text$mn:00001776                 jnz     loc_1824
.text$mn:0000177C                 mov     [ebp+cbData], 40h ; '@'
.text$mn:00001786                 mov     [ebp+cchName], 20h ; ' '
.text$mn:00001790                 lea     edx, [ebp+phkResult]
.text$mn:00001796                 push    edx             ; phkResult
.text$mn:00001797                 push    0F003Fh         ; samDesired
.text$mn:0000179C                 push    0               ; ulOptions
.text$mn:0000179E                 lea     eax, [ebp+Name]
.text$mn:000017A1                 push    eax             ; lpSubKey
.text$mn:000017A2                 push    80000000h       ; hKey
.text$mn:000017A7                 call    dword ptr ds:__imp__RegOpenKeyExW@20 ; RegOpenKeyExW(x,x,x,x,x)
.text$mn:000017AD                 lea     ecx, [ebp+cbData]
.text$mn:000017B3                 push    ecx             ; lpcbData
.text$mn:000017B4                 lea     edx, [ebp+Data]
.text$mn:000017BA                 push    edx             ; lpData
.text$mn:000017BB                 lea     eax, [ebp+Type]
.text$mn:000017C1                 push    eax             ; lpType
.text$mn:000017C2                 push    0               ; lpReserved
.text$mn:000017C4                 push    offset $SG95144 ; lpValueName
.text$mn:000017C9                 mov     ecx, [ebp+phkResult]
.text$mn:000017CF                 push    ecx             ; hKey
.text$mn:000017D0                 call    dword ptr ds:__imp__RegQueryValueExW@24 ; RegQueryValueExW(x,x,x,x,x,x)
.text$mn:000017D6                 cmp     [ebp+Type], 1
.text$mn:000017DD                 jnz     short loc_1817
.text$mn:000017DF                 mov     edx, ds:?nppName@@3PB_WB ; wchar_t const * const nppName
.text$mn:000017E5                 push    edx             ; lpString2
.text$mn:000017E6                 lea     eax, [ebp+Data]
.text$mn:000017EC                 push    eax             ; lpString1
.text$mn:000017ED                 call    dword ptr ds:__imp__lstrcmpW@8 ; lstrcmpW(x,x)
.text$mn:000017F3                 test    eax, eax
.text$mn:000017F5                 jnz     short loc_1817
.text$mn:000017F7                 lea     ecx, [ebp+Name]
.text$mn:000017FA                 push    ecx             ; lParam
.text$mn:000017FB                 push    0               ; wParam
.text$mn:000017FD                 push    180h            ; Msg
.text$mn:00001802                 push    0FA3h           ; nIDDlgItem
.text$mn:00001807                 mov     edx, [ebp+var_8C]
.text$mn:0000180D                 mov     eax, [edx+0Ch]
.text$mn:00001810                 push    eax             ; hDlg
.text$mn:00001811                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001817
.text$mn:00001817 loc_1817:                               ; CODE XREF: RegExtDlg::getRegisteredExts(void)+115j
.text$mn:00001817                                         ; RegExtDlg::getRegisteredExts(void)+12Dj
.text$mn:00001817                 mov     ecx, [ebp+phkResult]
.text$mn:0000181D                 push    ecx             ; hKey
.text$mn:0000181E                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text$mn:00001824
.text$mn:00001824 loc_1824:                               ; CODE XREF: RegExtDlg::getRegisteredExts(void)+98j
.text$mn:00001824                                         ; RegExtDlg::getRegisteredExts(void)+AEj
.text$mn:00001824                 jmp     loc_1703
.text$mn:00001829 ; ---------------------------------------------------------------------------
.text$mn:00001829
.text$mn:00001829 loc_1829:                               ; CODE XREF: RegExtDlg::getRegisteredExts(void)+56j
.text$mn:00001829                 mov     ecx, [ebp+var_4]
.text$mn:0000182C                 xor     ecx, ebp
.text$mn:0000182E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001833                 mov     esp, ebp
.text$mn:00001835                 pop     ebp
.text$mn:00001836                 retn
.text$mn:00001836 ?getRegisteredExts@RegExtDlg@@AAEXXZ endp
.text$mn:00001836
.text$mn:00001836 ; ---------------------------------------------------------------------------
.text$mn:00001837                 align 4
.text$mn:00001838
.text$mn:00001838 ; =============== S U B R O U T I N E =======================================
.text$mn:00001838
.text$mn:00001838 ; Attributes: bp-based frame
.text$mn:00001838
.text$mn:00001838 ; void __thiscall RegExtDlg::getDefSupportedExts(RegExtDlg *__hidden this)
.text$mn:00001838                 public ?getDefSupportedExts@RegExtDlg@@AAEXXZ
.text$mn:00001838 ?getDefSupportedExts@RegExtDlg@@AAEXXZ proc near
.text$mn:00001838                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+55p
.text$mn:00001838
.text$mn:00001838 var_8           = dword ptr -8
.text$mn:00001838 var_4           = dword ptr -4
.text$mn:00001838
.text$mn:00001838                 push    ebp
.text$mn:00001839                 mov     ebp, esp
.text$mn:0000183B                 sub     esp, 8
.text$mn:0000183E                 mov     [ebp+var_8], ecx
.text$mn:00001841                 mov     [ebp+var_4], 0
.text$mn:00001848                 jmp     short loc_1853
.text$mn:0000184A ; ---------------------------------------------------------------------------
.text$mn:0000184A
.text$mn:0000184A loc_184A:                               ; CODE XREF: RegExtDlg::getDefSupportedExts(void)+51j
.text$mn:0000184A                 mov     eax, [ebp+var_4]
.text$mn:0000184D                 add     eax, 1
.text$mn:00001850                 mov     [ebp+var_4], eax
.text$mn:00001853
.text$mn:00001853 loc_1853:                               ; CODE XREF: RegExtDlg::getDefSupportedExts(void)+10j
.text$mn:00001853                 cmp     [ebp+var_4], 9
.text$mn:00001857                 jge     short loc_188B
.text$mn:00001859                 imul    ecx, [ebp+var_4], 168h
.text$mn:00001860                 mov     edx, 24h ; '$'
.text$mn:00001865                 imul    eax, edx, 0
.text$mn:00001868                 lea     ecx, ?defExtArray@@3PAY19BC@_WA[ecx+eax] ; "Notepad"
.text$mn:0000186F                 push    ecx             ; lParam
.text$mn:00001870                 push    0               ; wParam
.text$mn:00001872                 push    180h            ; Msg
.text$mn:00001877                 push    0FA1h           ; nIDDlgItem
.text$mn:0000187C                 mov     edx, [ebp+var_8]
.text$mn:0000187F                 mov     eax, [edx+0Ch]
.text$mn:00001882                 push    eax             ; hDlg
.text$mn:00001883                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00001889                 jmp     short loc_184A
.text$mn:0000188B ; ---------------------------------------------------------------------------
.text$mn:0000188B
.text$mn:0000188B loc_188B:                               ; CODE XREF: RegExtDlg::getDefSupportedExts(void)+1Fj
.text$mn:0000188B                 mov     esp, ebp
.text$mn:0000188D                 pop     ebp
.text$mn:0000188E                 retn
.text$mn:0000188E ?getDefSupportedExts@RegExtDlg@@AAEXXZ endp
.text$mn:0000188E
.text$mn:0000188E ; ---------------------------------------------------------------------------
.text$mn:0000188F                 db 9 dup(0CCh)
.text$mn:00001898
.text$mn:00001898 ; =============== S U B R O U T I N E =======================================
.text$mn:00001898
.text$mn:00001898 ; Attributes: bp-based frame
.text$mn:00001898
.text$mn:00001898 ; void __thiscall RegExtDlg::addExt(RegExtDlg *this, wchar_t *)
.text$mn:00001898                 public ?addExt@RegExtDlg@@AAEXPA_W@Z
.text$mn:00001898 ?addExt@RegExtDlg@@AAEXPA_W@Z proc near ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+1B8p
.text$mn:00001898                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+236p
.text$mn:00001898
.text$mn:00001898 var_224         = dword ptr -224h
.text$mn:00001898 var_220         = dword ptr -220h
.text$mn:00001898 var_21C         = dword ptr -21Ch
.text$mn:00001898 dwDisposition   = dword ptr -218h
.text$mn:00001898 cbData          = dword ptr -214h
.text$mn:00001898 phkResult       = dword ptr -210h
.text$mn:00001898 Data            = byte ptr -20Ch
.text$mn:00001898 var_4           = dword ptr -4
.text$mn:00001898 lpSubKey        = dword ptr  8
.text$mn:00001898
.text$mn:00001898                 push    ebp
.text$mn:00001899                 mov     ebp, esp
.text$mn:0000189B                 sub     esp, 224h
.text$mn:000018A1                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000018A6                 xor     eax, ebp
.text$mn:000018A8                 mov     [ebp+var_4], eax
.text$mn:000018AB                 mov     [ebp+var_224], ecx
.text$mn:000018B1                 lea     eax, [ebp+dwDisposition]
.text$mn:000018B7                 push    eax             ; lpdwDisposition
.text$mn:000018B8                 lea     ecx, [ebp+phkResult]
.text$mn:000018BE                 push    ecx             ; phkResult
.text$mn:000018BF                 push    0               ; lpSecurityAttributes
.text$mn:000018C1                 push    0F003Fh         ; samDesired
.text$mn:000018C6                 push    0               ; dwOptions
.text$mn:000018C8                 push    0               ; lpClass
.text$mn:000018CA                 push    0               ; Reserved
.text$mn:000018CC                 mov     edx, [ebp+lpSubKey]
.text$mn:000018CF                 push    edx             ; lpSubKey
.text$mn:000018D0                 push    80000000h       ; hKey
.text$mn:000018D5                 call    dword ptr ds:__imp__RegCreateKeyExW@36 ; RegCreateKeyExW(x,x,x,x,x,x,x,x,x)
.text$mn:000018DB                 mov     [ebp+var_21C], eax
.text$mn:000018E1                 cmp     [ebp+var_21C], 0
.text$mn:000018E8                 jnz     loc_1992
.text$mn:000018EE                 mov     [ebp+cbData], 208h
.text$mn:000018F8                 cmp     [ebp+dwDisposition], 2
.text$mn:000018FF                 jnz     short loc_195A
.text$mn:00001901                 lea     eax, [ebp+cbData]
.text$mn:00001907                 push    eax             ; lpcbData
.text$mn:00001908                 lea     ecx, [ebp+Data]
.text$mn:0000190E                 push    ecx             ; lpData
.text$mn:0000190F                 push    0               ; lpType
.text$mn:00001911                 push    0               ; lpReserved
.text$mn:00001913                 push    offset $SG95173 ; lpValueName
.text$mn:00001918                 mov     edx, [ebp+phkResult]
.text$mn:0000191E                 push    edx             ; hKey
.text$mn:0000191F                 call    dword ptr ds:__imp__RegQueryValueExW@24 ; RegQueryValueExW(x,x,x,x,x,x)
.text$mn:00001925                 mov     [ebp+var_220], eax
.text$mn:0000192B                 cmp     [ebp+var_220], 0
.text$mn:00001932                 jnz     short loc_195A
.text$mn:00001934                 mov     eax, [ebp+cbData]
.text$mn:0000193A                 push    eax             ; cbData
.text$mn:0000193B                 lea     ecx, [ebp+Data]
.text$mn:00001941                 push    ecx             ; lpData
.text$mn:00001942                 push    1               ; dwType
.text$mn:00001944                 push    0               ; Reserved
.text$mn:00001946                 mov     edx, ds:?nppBackup@@3PB_WB ; wchar_t const * const nppBackup
.text$mn:0000194C                 push    edx             ; lpValueName
.text$mn:0000194D                 mov     eax, [ebp+phkResult]
.text$mn:00001953                 push    eax             ; hKey
.text$mn:00001954                 call    dword ptr ds:__imp__RegSetValueExW@24 ; RegSetValueExW(x,x,x,x,x,x)
.text$mn:0000195A
.text$mn:0000195A loc_195A:                               ; CODE XREF: RegExtDlg::addExt(wchar_t *)+67j
.text$mn:0000195A                                         ; RegExtDlg::addExt(wchar_t *)+9Aj
.text$mn:0000195A                 mov     ecx, ds:?nppName@@3PB_WB ; wchar_t const * const nppName
.text$mn:00001960                 push    ecx             ; lpString
.text$mn:00001961                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00001967                 lea     edx, [eax+eax+2]
.text$mn:0000196B                 push    edx             ; cbData
.text$mn:0000196C                 mov     eax, ds:?nppName@@3PB_WB ; wchar_t const * const nppName
.text$mn:00001971                 push    eax             ; lpData
.text$mn:00001972                 push    1               ; dwType
.text$mn:00001974                 push    0               ; Reserved
.text$mn:00001976                 push    0               ; lpValueName
.text$mn:00001978                 mov     ecx, [ebp+phkResult]
.text$mn:0000197E                 push    ecx             ; hKey
.text$mn:0000197F                 call    dword ptr ds:__imp__RegSetValueExW@24 ; RegSetValueExW(x,x,x,x,x,x)
.text$mn:00001985                 mov     edx, [ebp+phkResult]
.text$mn:0000198B                 push    edx             ; hKey
.text$mn:0000198C                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text$mn:00001992
.text$mn:00001992 loc_1992:                               ; CODE XREF: RegExtDlg::addExt(wchar_t *)+50j
.text$mn:00001992                 mov     ecx, [ebp+var_4]
.text$mn:00001995                 xor     ecx, ebp
.text$mn:00001997                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:0000199C                 mov     esp, ebp
.text$mn:0000199E                 pop     ebp
.text$mn:0000199F                 retn    4
.text$mn:0000199F ?addExt@RegExtDlg@@AAEXPA_W@Z endp
.text$mn:0000199F
.text$mn:0000199F ; ---------------------------------------------------------------------------
.text$mn:000019A2                 align 8
.text$mn:000019A8
.text$mn:000019A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000019A8
.text$mn:000019A8 ; Attributes: bp-based frame
.text$mn:000019A8
.text$mn:000019A8 ; bool __thiscall RegExtDlg::deleteExts(RegExtDlg *this, const wchar_t *)
.text$mn:000019A8                 public ?deleteExts@RegExtDlg@@AAE_NPB_W@Z
.text$mn:000019A8 ?deleteExts@RegExtDlg@@AAE_NPB_W@Z proc near
.text$mn:000019A8                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+30Ap
.text$mn:000019A8
.text$mn:000019A8 var_A0          = dword ptr -0A0h
.text$mn:000019A8 Type            = dword ptr -9Ch
.text$mn:000019A8 var_98          = dword ptr -98h
.text$mn:000019A8 var_94          = dword ptr -94h
.text$mn:000019A8 var_90          = dword ptr -90h
.text$mn:000019A8 cbData          = dword ptr -8Ch
.text$mn:000019A8 phkResult       = dword ptr -88h
.text$mn:000019A8 Data            = byte ptr -84h
.text$mn:000019A8 String1         = word ptr -44h
.text$mn:000019A8 Dst             = byte ptr -40h
.text$mn:000019A8 var_4           = dword ptr -4
.text$mn:000019A8 lpSubKey        = dword ptr  8
.text$mn:000019A8
.text$mn:000019A8                 push    ebp
.text$mn:000019A9                 mov     ebp, esp
.text$mn:000019AB                 sub     esp, 0A0h
.text$mn:000019B1                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000019B6                 xor     eax, ebp
.text$mn:000019B8                 mov     [ebp+var_4], eax
.text$mn:000019BB                 mov     [ebp+var_90], ecx
.text$mn:000019C1                 lea     eax, [ebp+phkResult]
.text$mn:000019C7                 push    eax             ; phkResult
.text$mn:000019C8                 push    0F003Fh         ; samDesired
.text$mn:000019CD                 push    0               ; ulOptions
.text$mn:000019CF                 mov     ecx, [ebp+lpSubKey]
.text$mn:000019D2                 push    ecx             ; lpSubKey
.text$mn:000019D3                 push    80000000h       ; hKey
.text$mn:000019D8                 call    dword ptr ds:__imp__RegOpenKeyExW@20 ; RegOpenKeyExW(x,x,x,x,x)
.text$mn:000019DE                 mov     edx, [ebp+phkResult]
.text$mn:000019E4                 push    edx             ; HKEY
.text$mn:000019E5                 mov     ecx, [ebp+var_90] ; this
.text$mn:000019EB                 call    ?getNbSubValue@RegExtDlg@@ABEHPAUHKEY__@@@Z ; RegExtDlg::getNbSubValue(HKEY__ *)
.text$mn:000019F0                 mov     [ebp+var_98], eax
.text$mn:000019F6                 mov     eax, [ebp+phkResult]
.text$mn:000019FC                 push    eax             ; HKEY
.text$mn:000019FD                 mov     ecx, [ebp+var_90] ; this
.text$mn:00001A03                 call    ?getNbSubKey@RegExtDlg@@ABEHPAUHKEY__@@@Z ; RegExtDlg::getNbSubKey(HKEY__ *)
.text$mn:00001A08                 mov     [ebp+var_94], eax
.text$mn:00001A0E                 cmp     [ebp+var_98], 1
.text$mn:00001A15                 jg      short loc_1A5B
.text$mn:00001A17                 cmp     [ebp+var_94], 0
.text$mn:00001A1E                 jnz     short loc_1A5B
.text$mn:00001A20                 mov     ecx, $SG95190
.text$mn:00001A26                 mov     dword ptr [ebp+String1], ecx
.text$mn:00001A29                 push    3Ch ; '<'       ; Size
.text$mn:00001A2B                 push    0               ; Val
.text$mn:00001A2D                 lea     edx, [ebp+Dst]
.text$mn:00001A30                 push    edx             ; Dst
.text$mn:00001A31                 call    _memset
.text$mn:00001A36                 add     esp, 0Ch
.text$mn:00001A39                 mov     eax, [ebp+lpSubKey]
.text$mn:00001A3C                 push    eax             ; lpString2
.text$mn:00001A3D                 lea     ecx, [ebp+String1]
.text$mn:00001A40                 push    ecx             ; lpString1
.text$mn:00001A41                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00001A47                 lea     edx, [ebp+String1]
.text$mn:00001A4A                 push    edx             ; lpSubKey
.text$mn:00001A4B                 push    80000000h       ; hKey
.text$mn:00001A50                 call    dword ptr ds:__imp__RegDeleteKeyW@8 ; RegDeleteKeyW(x,x)
.text$mn:00001A56                 jmp     loc_1AE8
.text$mn:00001A5B ; ---------------------------------------------------------------------------
.text$mn:00001A5B
.text$mn:00001A5B loc_1A5B:                               ; CODE XREF: RegExtDlg::deleteExts(wchar_t const *)+6Dj
.text$mn:00001A5B                                         ; RegExtDlg::deleteExts(wchar_t const *)+76j
.text$mn:00001A5B                 mov     [ebp+cbData], 40h ; '@'
.text$mn:00001A65                 lea     eax, [ebp+cbData]
.text$mn:00001A6B                 push    eax             ; lpcbData
.text$mn:00001A6C                 lea     ecx, [ebp+Data]
.text$mn:00001A72                 push    ecx             ; lpData
.text$mn:00001A73                 lea     edx, [ebp+Type]
.text$mn:00001A79                 push    edx             ; lpType
.text$mn:00001A7A                 push    0               ; lpReserved
.text$mn:00001A7C                 mov     eax, ds:?nppBackup@@3PB_WB ; wchar_t const * const nppBackup
.text$mn:00001A81                 push    eax             ; lpValueName
.text$mn:00001A82                 mov     ecx, [ebp+phkResult]
.text$mn:00001A88                 push    ecx             ; hKey
.text$mn:00001A89                 call    dword ptr ds:__imp__RegQueryValueExW@24 ; RegQueryValueExW(x,x,x,x,x,x)
.text$mn:00001A8F                 mov     [ebp+var_A0], eax
.text$mn:00001A95                 cmp     [ebp+var_A0], 0
.text$mn:00001A9C                 jnz     short loc_1AD9
.text$mn:00001A9E                 mov     edx, [ebp+cbData]
.text$mn:00001AA4                 push    edx             ; cbData
.text$mn:00001AA5                 lea     eax, [ebp+Data]
.text$mn:00001AAB                 push    eax             ; lpData
.text$mn:00001AAC                 mov     ecx, [ebp+Type]
.text$mn:00001AB2                 push    ecx             ; dwType
.text$mn:00001AB3                 push    0               ; Reserved
.text$mn:00001AB5                 push    0               ; lpValueName
.text$mn:00001AB7                 mov     edx, [ebp+phkResult]
.text$mn:00001ABD                 push    edx             ; hKey
.text$mn:00001ABE                 call    dword ptr ds:__imp__RegSetValueExW@24 ; RegSetValueExW(x,x,x,x,x,x)
.text$mn:00001AC4                 mov     eax, ds:?nppBackup@@3PB_WB ; wchar_t const * const nppBackup
.text$mn:00001AC9                 push    eax             ; lpValueName
.text$mn:00001ACA                 mov     ecx, [ebp+phkResult]
.text$mn:00001AD0                 push    ecx             ; hKey
.text$mn:00001AD1                 call    dword ptr ds:__imp__RegDeleteValueW@8 ; RegDeleteValueW(x,x)
.text$mn:00001AD7                 jmp     short loc_1AE8
.text$mn:00001AD9 ; ---------------------------------------------------------------------------
.text$mn:00001AD9
.text$mn:00001AD9 loc_1AD9:                               ; CODE XREF: RegExtDlg::deleteExts(wchar_t const *)+F4j
.text$mn:00001AD9                 push    0               ; lpValueName
.text$mn:00001ADB                 mov     edx, [ebp+phkResult]
.text$mn:00001AE1                 push    edx             ; hKey
.text$mn:00001AE2                 call    dword ptr ds:__imp__RegDeleteValueW@8 ; RegDeleteValueW(x,x)
.text$mn:00001AE8
.text$mn:00001AE8 loc_1AE8:                               ; CODE XREF: RegExtDlg::deleteExts(wchar_t const *)+AEj
.text$mn:00001AE8                                         ; RegExtDlg::deleteExts(wchar_t const *)+12Fj
.text$mn:00001AE8                 mov     al, 1
.text$mn:00001AEA                 mov     ecx, [ebp+var_4]
.text$mn:00001AED                 xor     ecx, ebp
.text$mn:00001AEF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001AF4                 mov     esp, ebp
.text$mn:00001AF6                 pop     ebp
.text$mn:00001AF7                 retn    4
.text$mn:00001AF7 ?deleteExts@RegExtDlg@@AAE_NPB_W@Z endp
.text$mn:00001AF7
.text$mn:00001AF7 ; ---------------------------------------------------------------------------
.text$mn:00001AFA                 db 0Eh dup(0CCh)
.text$mn:00001B08
.text$mn:00001B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00001B08
.text$mn:00001B08 ; Attributes: bp-based frame
.text$mn:00001B08
.text$mn:00001B08 ; void __thiscall RegExtDlg::writeNppPath(RegExtDlg *__hidden this)
.text$mn:00001B08                 public ?writeNppPath@RegExtDlg@@AAEXXZ
.text$mn:00001B08 ?writeNppPath@RegExtDlg@@AAEXXZ proc near
.text$mn:00001B08                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+135p
.text$mn:00001B08
.text$mn:00001B08 dwDisposition   = dword ptr -860h
.text$mn:00001B08 hKey            = dword ptr -85Ch
.text$mn:00001B08 var_858         = dword ptr -858h
.text$mn:00001B08 var_854         = dword ptr -854h
.text$mn:00001B08 phkResult       = dword ptr -850h
.text$mn:00001B08 var_84C         = byte ptr -84Ch
.text$mn:00001B08 Filename        = word ptr -830h
.text$mn:00001B08 String2         = word ptr -628h
.text$mn:00001B08 String          = word ptr -420h
.text$mn:00001B08 var_41C         = byte ptr -41Ch
.text$mn:00001B08 String1         = word ptr -218h
.text$mn:00001B08 Dst             = byte ptr -214h
.text$mn:00001B08 var_10          = dword ptr -10h
.text$mn:00001B08 var_C           = dword ptr -0Ch
.text$mn:00001B08 var_4           = dword ptr -4
.text$mn:00001B08
.text$mn:00001B08                 push    ebp
.text$mn:00001B09                 mov     ebp, esp
.text$mn:00001B0B                 push    0FFFFFFFFh
.text$mn:00001B0D                 push    offset __ehhandler$?writeNppPath@RegExtDlg@@AAEXXZ
.text$mn:00001B12                 mov     eax, large fs:0
.text$mn:00001B18                 push    eax
.text$mn:00001B19                 sub     esp, 854h
.text$mn:00001B1F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001B24                 xor     eax, ebp
.text$mn:00001B26                 mov     [ebp+var_10], eax
.text$mn:00001B29                 push    eax
.text$mn:00001B2A                 lea     eax, [ebp+var_C]
.text$mn:00001B2D                 mov     large fs:0, eax
.text$mn:00001B33                 mov     [ebp+var_858], ecx
.text$mn:00001B39                 mov     eax, ds:?nppName@@3PB_WB ; wchar_t const * const nppName
.text$mn:00001B3E                 push    eax             ; Str
.text$mn:00001B3F                 lea     ecx, [ebp+var_84C]
.text$mn:00001B45                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001B4A                 mov     [ebp+var_4], 0
.text$mn:00001B51                 push    offset $SG95214 ; "\\shell\\open\\command"
.text$mn:00001B56                 lea     ecx, [ebp+var_84C]
.text$mn:00001B5C                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00001B61                 lea     ecx, [ebp+dwDisposition]
.text$mn:00001B67                 push    ecx             ; lpdwDisposition
.text$mn:00001B68                 lea     edx, [ebp+phkResult]
.text$mn:00001B6E                 push    edx             ; phkResult
.text$mn:00001B6F                 push    0               ; lpSecurityAttributes
.text$mn:00001B71                 push    0F003Fh         ; samDesired
.text$mn:00001B76                 push    0               ; dwOptions
.text$mn:00001B78                 push    0               ; lpClass
.text$mn:00001B7A                 push    0               ; Reserved
.text$mn:00001B7C                 lea     ecx, [ebp+var_84C]
.text$mn:00001B82                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001B87                 push    eax             ; lpSubKey
.text$mn:00001B88                 push    80000000h       ; hKey
.text$mn:00001B8D                 call    dword ptr ds:__imp__RegCreateKeyExW@36 ; RegCreateKeyExW(x,x,x,x,x,x,x,x,x)
.text$mn:00001B93                 mov     [ebp+var_854], eax
.text$mn:00001B99                 cmp     [ebp+var_854], 0
.text$mn:00001BA0                 jnz     loc_1C96
.text$mn:00001BA6                 lea     eax, [ebp+hKey]
.text$mn:00001BAC                 push    eax             ; phkResult
.text$mn:00001BAD                 push    0F003Fh         ; samDesired
.text$mn:00001BB2                 push    0               ; ulOptions
.text$mn:00001BB4                 mov     ecx, ds:?nppName@@3PB_WB ; wchar_t const * const nppName
.text$mn:00001BBA                 push    ecx             ; lpSubKey
.text$mn:00001BBB                 push    80000000h       ; hKey
.text$mn:00001BC0                 call    dword ptr ds:__imp__RegOpenKeyExW@20 ; RegOpenKeyExW(x,x,x,x,x)
.text$mn:00001BC6                 mov     edx, ds:?nppDoc@@3PB_WB ; wchar_t const * const nppDoc
.text$mn:00001BCC                 push    edx             ; lpString
.text$mn:00001BCD                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00001BD3                 lea     eax, [eax+eax+2]
.text$mn:00001BD7                 push    eax             ; cbData
.text$mn:00001BD8                 mov     ecx, ds:?nppDoc@@3PB_WB ; wchar_t const * const nppDoc
.text$mn:00001BDE                 push    ecx             ; lpData
.text$mn:00001BDF                 push    1               ; dwType
.text$mn:00001BE1                 push    0               ; Reserved
.text$mn:00001BE3                 push    0               ; lpValueName
.text$mn:00001BE5                 mov     edx, [ebp+hKey]
.text$mn:00001BEB                 push    edx             ; hKey
.text$mn:00001BEC                 call    dword ptr ds:__imp__RegSetValueExW@24 ; RegSetValueExW(x,x,x,x,x,x)
.text$mn:00001BF2                 mov     eax, [ebp+hKey]
.text$mn:00001BF8                 push    eax             ; hKey
.text$mn:00001BF9                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text$mn:00001BFF                 push    104h            ; nSize
.text$mn:00001C04                 lea     ecx, [ebp+Filename]
.text$mn:00001C0A                 push    ecx             ; lpFilename
.text$mn:00001C0B                 mov     edx, [ebp+var_858]
.text$mn:00001C11                 mov     eax, [edx+4]
.text$mn:00001C14                 push    eax             ; hModule
.text$mn:00001C15                 call    dword ptr ds:__imp__GetModuleFileNameW@12 ; GetModuleFileNameW(x,x,x)
.text$mn:00001C1B                 mov     ecx, $SG95226
.text$mn:00001C21                 mov     dword ptr [ebp+String1], ecx
.text$mn:00001C27                 push    204h            ; Size
.text$mn:00001C2C                 push    0               ; Val
.text$mn:00001C2E                 lea     edx, [ebp+Dst]
.text$mn:00001C34                 push    edx             ; Dst
.text$mn:00001C35                 call    _memset
.text$mn:00001C3A                 add     esp, 0Ch
.text$mn:00001C3D                 push    offset $SG95227 ; "\" \"%1\""
.text$mn:00001C42                 lea     eax, [ebp+Filename]
.text$mn:00001C48                 push    eax             ; lpString2
.text$mn:00001C49                 lea     ecx, [ebp+String1]
.text$mn:00001C4F                 push    ecx             ; lpString1
.text$mn:00001C50                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00001C56                 push    eax             ; lpString1
.text$mn:00001C57                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00001C5D                 lea     edx, [ebp+String1]
.text$mn:00001C63                 push    edx             ; lpString
.text$mn:00001C64                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00001C6A                 lea     eax, [eax+eax+2]
.text$mn:00001C6E                 push    eax             ; cbData
.text$mn:00001C6F                 lea     ecx, [ebp+String1]
.text$mn:00001C75                 push    ecx             ; lpData
.text$mn:00001C76                 push    1               ; dwType
.text$mn:00001C78                 push    0               ; Reserved
.text$mn:00001C7A                 push    0               ; lpValueName
.text$mn:00001C7C                 mov     edx, [ebp+phkResult]
.text$mn:00001C82                 push    edx             ; hKey
.text$mn:00001C83                 call    dword ptr ds:__imp__RegSetValueExW@24 ; RegSetValueExW(x,x,x,x,x,x)
.text$mn:00001C89                 mov     eax, [ebp+phkResult]
.text$mn:00001C8F                 push    eax             ; hKey
.text$mn:00001C90                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text$mn:00001C96
.text$mn:00001C96 loc_1C96:                               ; CODE XREF: RegExtDlg::writeNppPath(void)+98j
.text$mn:00001C96                 mov     ecx, ds:?nppName@@3PB_WB ; wchar_t const * const nppName
.text$mn:00001C9C                 push    ecx             ; Str
.text$mn:00001C9D                 lea     ecx, [ebp+var_84C]
.text$mn:00001CA3                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00001CA8                 push    offset $SG95230 ; "\\DefaultIcon"
.text$mn:00001CAD                 lea     ecx, [ebp+var_84C]
.text$mn:00001CB3                 call    ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)
.text$mn:00001CB8                 lea     edx, [ebp+dwDisposition]
.text$mn:00001CBE                 push    edx             ; lpdwDisposition
.text$mn:00001CBF                 lea     eax, [ebp+phkResult]
.text$mn:00001CC5                 push    eax             ; phkResult
.text$mn:00001CC6                 push    0               ; lpSecurityAttributes
.text$mn:00001CC8                 push    0F003Fh         ; samDesired
.text$mn:00001CCD                 push    0               ; dwOptions
.text$mn:00001CCF                 push    0               ; lpClass
.text$mn:00001CD1                 push    0               ; Reserved
.text$mn:00001CD3                 lea     ecx, [ebp+var_84C]
.text$mn:00001CD9                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001CDE                 push    eax             ; lpSubKey
.text$mn:00001CDF                 push    80000000h       ; hKey
.text$mn:00001CE4                 call    dword ptr ds:__imp__RegCreateKeyExW@36 ; RegCreateKeyExW(x,x,x,x,x,x,x,x,x)
.text$mn:00001CEA                 mov     [ebp+var_854], eax
.text$mn:00001CF0                 cmp     [ebp+var_854], 0
.text$mn:00001CF7                 jnz     loc_1D94
.text$mn:00001CFD                 push    104h            ; nSize
.text$mn:00001D02                 lea     ecx, [ebp+String2]
.text$mn:00001D08                 push    ecx             ; lpFilename
.text$mn:00001D09                 mov     edx, [ebp+var_858]
.text$mn:00001D0F                 mov     eax, [edx+4]
.text$mn:00001D12                 push    eax             ; hModule
.text$mn:00001D13                 call    dword ptr ds:__imp__GetModuleFileNameW@12 ; GetModuleFileNameW(x,x,x)
.text$mn:00001D19                 mov     ecx, $SG95237
.text$mn:00001D1F                 mov     dword ptr [ebp+String], ecx
.text$mn:00001D25                 push    204h            ; Size
.text$mn:00001D2A                 push    0               ; Val
.text$mn:00001D2C                 lea     edx, [ebp+var_41C]
.text$mn:00001D32                 push    edx             ; Dst
.text$mn:00001D33                 call    _memset
.text$mn:00001D38                 add     esp, 0Ch
.text$mn:00001D3B                 push    offset $SG95238 ; "\",0"
.text$mn:00001D40                 lea     eax, [ebp+String2]
.text$mn:00001D46                 push    eax             ; lpString2
.text$mn:00001D47                 lea     ecx, [ebp+String]
.text$mn:00001D4D                 push    ecx             ; lpString1
.text$mn:00001D4E                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00001D54                 push    eax             ; lpString1
.text$mn:00001D55                 call    dword ptr ds:__imp__lstrcatW@8 ; lstrcatW(x,x)
.text$mn:00001D5B                 lea     edx, [ebp+String]
.text$mn:00001D61                 push    edx             ; lpString
.text$mn:00001D62                 call    dword ptr ds:__imp__lstrlenW@4 ; lstrlenW(x)
.text$mn:00001D68                 lea     eax, [eax+eax+2]
.text$mn:00001D6C                 push    eax             ; cbData
.text$mn:00001D6D                 lea     ecx, [ebp+String]
.text$mn:00001D73                 push    ecx             ; lpData
.text$mn:00001D74                 push    1               ; dwType
.text$mn:00001D76                 push    0               ; Reserved
.text$mn:00001D78                 push    0               ; lpValueName
.text$mn:00001D7A                 mov     edx, [ebp+phkResult]
.text$mn:00001D80                 push    edx             ; hKey
.text$mn:00001D81                 call    dword ptr ds:__imp__RegSetValueExW@24 ; RegSetValueExW(x,x,x,x,x,x)
.text$mn:00001D87                 mov     eax, [ebp+phkResult]
.text$mn:00001D8D                 push    eax             ; hKey
.text$mn:00001D8E                 call    dword ptr ds:__imp__RegCloseKey@4 ; RegCloseKey(x)
.text$mn:00001D94
.text$mn:00001D94 loc_1D94:                               ; CODE XREF: RegExtDlg::writeNppPath(void)+1EFj
.text$mn:00001D94                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001D9B                 lea     ecx, [ebp+var_84C]
.text$mn:00001DA1                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001DA6                 mov     ecx, [ebp+var_C]
.text$mn:00001DA9                 mov     large fs:0, ecx
.text$mn:00001DB0                 pop     ecx
.text$mn:00001DB1                 mov     ecx, [ebp+var_10]
.text$mn:00001DB4                 xor     ecx, ebp
.text$mn:00001DB6                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001DBB                 mov     esp, ebp
.text$mn:00001DBD                 pop     ebp
.text$mn:00001DBE                 retn
.text$mn:00001DBE ?writeNppPath@RegExtDlg@@AAEXXZ endp
.text$mn:00001DBE
.text$mn:00001DBE ; ---------------------------------------------------------------------------
.text$mn:00001DBF                 align 10h
.text$mn:00001DBF _text$mn        ends
.text$mn:00001DBF
.text$x:00001DC0 ; ===========================================================================
.text$x:00001DC0
.text$x:00001DC0 ; Segment type: Pure code
.text$x:00001DC0 ; Segment permissions: Read/Execute
.text$x:00001DC0 _text$x         segment para public 'CODE' use32
.text$x:00001DC0                 assume cs:_text$x
.text$x:00001DC0                 ;org 1DC0h
.text$x:00001DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001DC0
.text$x:00001DC0 ; =============== S U B R O U T I N E =======================================
.text$x:00001DC0
.text$x:00001DC0
.text$x:00001DC0 __unwindfunclet$?writeNppPath@RegExtDlg@@AAEXXZ$0 proc near
.text$x:00001DC0                                         ; DATA XREF: .xdata$x:00004C68o
.text$x:00001DC0                 lea     ecx, [ebp-84Ch]
.text$x:00001DC6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001DC6 __unwindfunclet$?writeNppPath@RegExtDlg@@AAEXXZ$0 endp
.text$x:00001DC6
.text$x:00001DCB
.text$x:00001DCB ; =============== S U B R O U T I N E =======================================
.text$x:00001DCB
.text$x:00001DCB
.text$x:00001DCB __ehhandler$?writeNppPath@RegExtDlg@@AAEXXZ proc near
.text$x:00001DCB                                         ; DATA XREF: RegExtDlg::writeNppPath(void)+5o
.text$x:00001DCB
.text$x:00001DCB arg_4           = dword ptr  8
.text$x:00001DCB
.text$x:00001DCB                 mov     edx, [esp+arg_4]
.text$x:00001DCF                 lea     eax, [edx+0Ch]
.text$x:00001DD2                 mov     ecx, [edx-858h]
.text$x:00001DD8                 xor     ecx, eax
.text$x:00001DDA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001DDF                 mov     ecx, [edx-4]
.text$x:00001DE2                 xor     ecx, eax
.text$x:00001DE4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001DE9                 mov     eax, offset __ehfuncinfo$?writeNppPath@RegExtDlg@@AAEXXZ
.text$x:00001DEE                 jmp     ___CxxFrameHandler3
.text$x:00001DEE __ehhandler$?writeNppPath@RegExtDlg@@AAEXXZ endp
.text$x:00001DEE
.text$x:00001DEE ; ---------------------------------------------------------------------------
.text$x:00001DF3                 align 4
.text$x:00001DF3 _text$x         ends
.text$x:00001DF3
.text$mn:00001DF4 ; ===========================================================================
.text$mn:00001DF4
.text$mn:00001DF4 ; Segment type: Pure code
.text$mn:00001DF4 ; Segment permissions: Read/Execute
.text$mn:00001DF4 _text$mn        segment para public 'CODE' use32
.text$mn:00001DF4                 assume cs:_text$mn
.text$mn:00001DF4                 ;org 1DF4h
.text$mn:00001DF4 ; COMDAT (pick any)
.text$mn:00001DF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DF4
.text$mn:00001DF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DF4
.text$mn:00001DF4 ; Attributes: bp-based frame
.text$mn:00001DF4
.text$mn:00001DF4 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:00001DF4                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:00001DF4 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:00001DF4                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:00001DF4
.text$mn:00001DF4 var_4           = dword ptr -4
.text$mn:00001DF4 arg_0           = dword ptr  8
.text$mn:00001DF4
.text$mn:00001DF4                 push    ebp
.text$mn:00001DF5                 mov     ebp, esp
.text$mn:00001DF7                 push    ecx
.text$mn:00001DF8                 mov     [ebp+var_4], 0
.text$mn:00001DFF                 cmp     [ebp+arg_0], 0
.text$mn:00001E03                 jnz     short loc_1E07
.text$mn:00001E05                 jmp     short loc_1E27
.text$mn:00001E07 ; ---------------------------------------------------------------------------
.text$mn:00001E07
.text$mn:00001E07 loc_1E07:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:00001E07                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:00001E0B                 ja      short loc_1E22
.text$mn:00001E0D                 mov     eax, [ebp+arg_0]
.text$mn:00001E10                 push    eax             ; unsigned int
.text$mn:00001E11                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001E16                 add     esp, 4
.text$mn:00001E19                 mov     [ebp+var_4], eax
.text$mn:00001E1C                 cmp     [ebp+var_4], 0
.text$mn:00001E20                 jnz     short loc_1E27
.text$mn:00001E22
.text$mn:00001E22 loc_1E22:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:00001E22                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00001E27
.text$mn:00001E27 loc_1E27:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:00001E27                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:00001E27                 mov     eax, [ebp+var_4]
.text$mn:00001E2A                 mov     esp, ebp
.text$mn:00001E2C                 pop     ebp
.text$mn:00001E2D                 retn
.text$mn:00001E2D ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:00001E2D
.text$mn:00001E2D ; ---------------------------------------------------------------------------
.text$mn:00001E2E                 align 10h
.text$mn:00001E2E _text$mn        ends
.text$mn:00001E2E
.text$mn:00001E30 ; ===========================================================================
.text$mn:00001E30
.text$mn:00001E30 ; Segment type: Pure code
.text$mn:00001E30 ; Segment permissions: Read/Execute
.text$mn:00001E30 _text$mn        segment para public 'CODE' use32
.text$mn:00001E30                 assume cs:_text$mn
.text$mn:00001E30                 ;org 1E30h
.text$mn:00001E30 ; COMDAT (pick any)
.text$mn:00001E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E30
.text$mn:00001E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E30
.text$mn:00001E30 ; Attributes: bp-based frame
.text$mn:00001E30
.text$mn:00001E30 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00001E30                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00001E30 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00001E30                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00001E30
.text$mn:00001E30 var_4           = dword ptr -4
.text$mn:00001E30 arg_0           = dword ptr  8
.text$mn:00001E30
.text$mn:00001E30                 push    ebp
.text$mn:00001E31                 mov     ebp, esp
.text$mn:00001E33                 push    ecx
.text$mn:00001E34                 mov     [ebp+var_4], 0
.text$mn:00001E3B                 cmp     [ebp+arg_0], 0
.text$mn:00001E3F                 jnz     short loc_1E43
.text$mn:00001E41                 jmp     short loc_1E69
.text$mn:00001E43 ; ---------------------------------------------------------------------------
.text$mn:00001E43
.text$mn:00001E43 loc_1E43:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00001E43                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:00001E4A                 ja      short loc_1E64
.text$mn:00001E4C                 mov     eax, [ebp+arg_0]
.text$mn:00001E4F                 shl     eax, 3
.text$mn:00001E52                 push    eax             ; unsigned int
.text$mn:00001E53                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001E58                 add     esp, 4
.text$mn:00001E5B                 mov     [ebp+var_4], eax
.text$mn:00001E5E                 cmp     [ebp+var_4], 0
.text$mn:00001E62                 jnz     short loc_1E69
.text$mn:00001E64
.text$mn:00001E64 loc_1E64:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00001E64                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00001E69
.text$mn:00001E69 loc_1E69:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00001E69                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00001E69                 mov     eax, [ebp+var_4]
.text$mn:00001E6C                 mov     esp, ebp
.text$mn:00001E6E                 pop     ebp
.text$mn:00001E6F                 retn
.text$mn:00001E6F ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:00001E6F
.text$mn:00001E6F _text$mn        ends
.text$mn:00001E6F
.text$mn:00001E70 ; ===========================================================================
.text$mn:00001E70
.text$mn:00001E70 ; Segment type: Pure code
.text$mn:00001E70 ; Segment permissions: Read/Execute
.text$mn:00001E70 _text$mn        segment para public 'CODE' use32
.text$mn:00001E70                 assume cs:_text$mn
.text$mn:00001E70                 ;org 1E70h
.text$mn:00001E70 ; COMDAT (pick any)
.text$mn:00001E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E70
.text$mn:00001E70 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E70
.text$mn:00001E70 ; Attributes: bp-based frame
.text$mn:00001E70
.text$mn:00001E70 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00001E70                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00001E70 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00001E70                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00001E70
.text$mn:00001E70 var_4           = dword ptr -4
.text$mn:00001E70 arg_0           = dword ptr  8
.text$mn:00001E70
.text$mn:00001E70                 push    ebp
.text$mn:00001E71                 mov     ebp, esp
.text$mn:00001E73                 push    ecx
.text$mn:00001E74                 mov     [ebp+var_4], 0
.text$mn:00001E7B                 cmp     [ebp+arg_0], 0
.text$mn:00001E7F                 jnz     short loc_1E83
.text$mn:00001E81                 jmp     short loc_1EA8
.text$mn:00001E83 ; ---------------------------------------------------------------------------
.text$mn:00001E83
.text$mn:00001E83 loc_1E83:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:00001E83                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:00001E8A                 ja      short loc_1EA3
.text$mn:00001E8C                 mov     eax, [ebp+arg_0]
.text$mn:00001E8F                 shl     eax, 1
.text$mn:00001E91                 push    eax             ; unsigned int
.text$mn:00001E92                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00001E97                 add     esp, 4
.text$mn:00001E9A                 mov     [ebp+var_4], eax
.text$mn:00001E9D                 cmp     [ebp+var_4], 0
.text$mn:00001EA1                 jnz     short loc_1EA8
.text$mn:00001EA3
.text$mn:00001EA3 loc_1EA3:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:00001EA3                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00001EA8
.text$mn:00001EA8 loc_1EA8:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00001EA8                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00001EA8                 mov     eax, [ebp+var_4]
.text$mn:00001EAB                 mov     esp, ebp
.text$mn:00001EAD                 pop     ebp
.text$mn:00001EAE                 retn
.text$mn:00001EAE ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:00001EAE
.text$mn:00001EAE ; ---------------------------------------------------------------------------
.text$mn:00001EAF                 align 10h
.text$mn:00001EAF _text$mn        ends
.text$mn:00001EAF
.text$mn:00001EB0 ; ===========================================================================
.text$mn:00001EB0
.text$mn:00001EB0 ; Segment type: Pure code
.text$mn:00001EB0 ; Segment permissions: Read/Execute
.text$mn:00001EB0 _text$mn        segment para public 'CODE' use32
.text$mn:00001EB0                 assume cs:_text$mn
.text$mn:00001EB0                 ;org 1EB0h
.text$mn:00001EB0 ; COMDAT (pick any)
.text$mn:00001EB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EB0
.text$mn:00001EB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EB0
.text$mn:00001EB0 ; Attributes: bp-based frame
.text$mn:00001EB0
.text$mn:00001EB0 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00001EB0                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00001EB0 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00001EB0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00001EB0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00001EB0
.text$mn:00001EB0 arg_0           = dword ptr  8
.text$mn:00001EB0 arg_4           = dword ptr  0Ch
.text$mn:00001EB0 arg_8           = dword ptr  10h
.text$mn:00001EB0
.text$mn:00001EB0                 push    ebp
.text$mn:00001EB1                 mov     ebp, esp
.text$mn:00001EB3                 cmp     [ebp+arg_0], 0
.text$mn:00001EB7                 jnz     short loc_1ECE
.text$mn:00001EB9                 mov     eax, [ebp+arg_8]
.text$mn:00001EBC                 push    eax             ; unsigned int
.text$mn:00001EBD                 mov     ecx, [ebp+arg_4]
.text$mn:00001EC0                 push    ecx             ; wchar_t *
.text$mn:00001EC1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00001EC6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00001ECB                 add     esp, 0Ch
.text$mn:00001ECE
.text$mn:00001ECE loc_1ECE:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:00001ECE                 pop     ebp
.text$mn:00001ECF                 retn
.text$mn:00001ECF ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:00001ECF
.text$mn:00001ECF _text$mn        ends
.text$mn:00001ECF
.text$mn:00001ED0 ; ===========================================================================
.text$mn:00001ED0
.text$mn:00001ED0 ; Segment type: Pure code
.text$mn:00001ED0 ; Segment permissions: Read/Execute
.text$mn:00001ED0 _text$mn        segment para public 'CODE' use32
.text$mn:00001ED0                 assume cs:_text$mn
.text$mn:00001ED0                 ;org 1ED0h
.text$mn:00001ED0 ; COMDAT (pick any)
.text$mn:00001ED0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001ED0
.text$mn:00001ED0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001ED0
.text$mn:00001ED0 ; Attributes: bp-based frame
.text$mn:00001ED0
.text$mn:00001ED0 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:00001ED0                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:00001ED0 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:00001ED0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+15p
.text$mn:00001ED0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+1Dp ...
.text$mn:00001ED0
.text$mn:00001ED0 arg_0           = dword ptr  8
.text$mn:00001ED0 arg_4           = dword ptr  0Ch
.text$mn:00001ED0 arg_8           = dword ptr  10h
.text$mn:00001ED0
.text$mn:00001ED0                 push    ebp
.text$mn:00001ED1                 mov     ebp, esp
.text$mn:00001ED3                 cmp     [ebp+arg_0], 0
.text$mn:00001ED7                 jnz     short loc_1EEE
.text$mn:00001ED9                 mov     eax, [ebp+arg_8]
.text$mn:00001EDC                 push    eax             ; unsigned int
.text$mn:00001EDD                 mov     ecx, [ebp+arg_4]
.text$mn:00001EE0                 push    ecx             ; wchar_t *
.text$mn:00001EE1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00001EE6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00001EEB                 add     esp, 0Ch
.text$mn:00001EEE
.text$mn:00001EEE loc_1EEE:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:00001EEE                 pop     ebp
.text$mn:00001EEF                 retn
.text$mn:00001EEF ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:00001EEF
.text$mn:00001EEF _text$mn        ends
.text$mn:00001EEF
.text$mn:00001EF0 ; ===========================================================================
.text$mn:00001EF0
.text$mn:00001EF0 ; Segment type: Pure code
.text$mn:00001EF0 ; Segment permissions: Read/Execute
.text$mn:00001EF0 _text$mn        segment para public 'CODE' use32
.text$mn:00001EF0                 assume cs:_text$mn
.text$mn:00001EF0                 ;org 1EF0h
.text$mn:00001EF0 ; COMDAT (pick any)
.text$mn:00001EF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EF0
.text$mn:00001EF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EF0
.text$mn:00001EF0 ; Attributes: bp-based frame
.text$mn:00001EF0
.text$mn:00001EF0 ; char * __cdecl std::addressof<char>(char &)
.text$mn:00001EF0                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00001EF0 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00001EF0                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00001EF0                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00001EF0
.text$mn:00001EF0 arg_0           = dword ptr  8
.text$mn:00001EF0
.text$mn:00001EF0                 push    ebp
.text$mn:00001EF1                 mov     ebp, esp
.text$mn:00001EF3                 mov     eax, [ebp+arg_0]
.text$mn:00001EF6                 pop     ebp
.text$mn:00001EF7                 retn
.text$mn:00001EF7 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00001EF7
.text$mn:00001EF7 _text$mn        ends
.text$mn:00001EF7
.text$mn:00001EF8 ; ===========================================================================
.text$mn:00001EF8
.text$mn:00001EF8 ; Segment type: Pure code
.text$mn:00001EF8 ; Segment permissions: Read/Execute
.text$mn:00001EF8 _text$mn        segment para public 'CODE' use32
.text$mn:00001EF8                 assume cs:_text$mn
.text$mn:00001EF8                 ;org 1EF8h
.text$mn:00001EF8 ; COMDAT (pick any)
.text$mn:00001EF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EF8
.text$mn:00001EF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EF8
.text$mn:00001EF8 ; Attributes: bp-based frame
.text$mn:00001EF8
.text$mn:00001EF8 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00001EF8                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00001EF8 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00001EF8                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00001EF8                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00001EF8
.text$mn:00001EF8 arg_0           = dword ptr  8
.text$mn:00001EF8
.text$mn:00001EF8                 push    ebp
.text$mn:00001EF9                 mov     ebp, esp
.text$mn:00001EFB                 mov     eax, [ebp+arg_0]
.text$mn:00001EFE                 pop     ebp
.text$mn:00001EFF                 retn
.text$mn:00001EFF ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:00001EFF
.text$mn:00001EFF _text$mn        ends
.text$mn:00001EFF
.text$mn:00001F00 ; ===========================================================================
.text$mn:00001F00
.text$mn:00001F00 ; Segment type: Pure code
.text$mn:00001F00 ; Segment permissions: Read/Execute
.text$mn:00001F00 _text$mn        segment para public 'CODE' use32
.text$mn:00001F00                 assume cs:_text$mn
.text$mn:00001F00                 ;org 1F00h
.text$mn:00001F00 ; COMDAT (pick any)
.text$mn:00001F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F00
.text$mn:00001F00 ; =============== S U B R O U T I N E =======================================
.text$mn:00001F00
.text$mn:00001F00 ; Attributes: bp-based frame
.text$mn:00001F00
.text$mn:00001F00 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00001F00                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00001F00 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00001F00                                         ; CODE XREF: $LN19+4Bp
.text$mn:00001F00
.text$mn:00001F00 var_4           = dword ptr -4
.text$mn:00001F00 arg_0           = dword ptr  8
.text$mn:00001F00 arg_4           = dword ptr  0Ch
.text$mn:00001F00
.text$mn:00001F00                 push    ebp
.text$mn:00001F01                 mov     ebp, esp
.text$mn:00001F03                 push    ecx
.text$mn:00001F04                 mov     [ebp+var_4], ecx
.text$mn:00001F07                 mov     eax, [ebp+arg_4]
.text$mn:00001F0A                 push    eax
.text$mn:00001F0B                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00001F10                 add     esp, 4
.text$mn:00001F13                 push    eax             ; int
.text$mn:00001F14                 mov     ecx, [ebp+arg_0]
.text$mn:00001F17                 push    ecx             ; void *
.text$mn:00001F18                 mov     edx, [ebp+var_4]
.text$mn:00001F1B                 push    edx             ; int
.text$mn:00001F1C                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00001F21                 add     esp, 0Ch
.text$mn:00001F24                 mov     esp, ebp
.text$mn:00001F26                 pop     ebp
.text$mn:00001F27                 retn    8
.text$mn:00001F27 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00001F27
.text$mn:00001F27 ; ---------------------------------------------------------------------------
.text$mn:00001F2A                 align 4
.text$mn:00001F2A _text$mn        ends
.text$mn:00001F2A
.text$mn:00001F2C ; ===========================================================================
.text$mn:00001F2C
.text$mn:00001F2C ; Segment type: Pure code
.text$mn:00001F2C ; Segment permissions: Read/Execute
.text$mn:00001F2C _text$mn        segment para public 'CODE' use32
.text$mn:00001F2C                 assume cs:_text$mn
.text$mn:00001F2C                 ;org 1F2Ch
.text$mn:00001F2C ; COMDAT (pick any)
.text$mn:00001F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001F2C
.text$mn:00001F2C ; =============== S U B R O U T I N E =======================================
.text$mn:00001F2C
.text$mn:00001F2C ; Attributes: bp-based frame
.text$mn:00001F2C
.text$mn:00001F2C ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00001F2C                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00001F2C ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00001F2C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00001F2C
.text$mn:00001F2C var_1C          = dword ptr -1Ch
.text$mn:00001F2C var_18          = dword ptr -18h
.text$mn:00001F2C var_14          = dword ptr -14h
.text$mn:00001F2C var_10          = dword ptr -10h
.text$mn:00001F2C var_C           = dword ptr -0Ch
.text$mn:00001F2C var_4           = dword ptr -4
.text$mn:00001F2C arg_0           = dword ptr  8
.text$mn:00001F2C arg_4           = dword ptr  0Ch
.text$mn:00001F2C
.text$mn:00001F2C                 push    ebp
.text$mn:00001F2D                 mov     ebp, esp
.text$mn:00001F2F                 push    0FFFFFFFFh
.text$mn:00001F31                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00001F36                 mov     eax, large fs:0
.text$mn:00001F3C                 push    eax
.text$mn:00001F3D                 sub     esp, 10h
.text$mn:00001F40                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001F45                 xor     eax, ebp
.text$mn:00001F47                 push    eax
.text$mn:00001F48                 lea     eax, [ebp+var_C]
.text$mn:00001F4B                 mov     large fs:0, eax
.text$mn:00001F51                 mov     [ebp+var_18], ecx
.text$mn:00001F54                 mov     eax, [ebp+arg_0]
.text$mn:00001F57                 push    eax             ; void *
.text$mn:00001F58                 push    4               ; unsigned int
.text$mn:00001F5A                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00001F5F                 add     esp, 8
.text$mn:00001F62                 mov     [ebp+var_10], eax
.text$mn:00001F65                 mov     [ebp+var_4], 0
.text$mn:00001F6C                 cmp     [ebp+var_10], 0
.text$mn:00001F70                 jz      short loc_1F8D
.text$mn:00001F72                 mov     ecx, [ebp+arg_4]
.text$mn:00001F75                 push    ecx
.text$mn:00001F76                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00001F7B                 add     esp, 4
.text$mn:00001F7E                 mov     edx, [ebp+var_10]
.text$mn:00001F81                 mov     eax, [eax]
.text$mn:00001F83                 mov     [edx], eax
.text$mn:00001F85                 mov     ecx, [ebp+var_10]
.text$mn:00001F88                 mov     [ebp+var_14], ecx
.text$mn:00001F8B                 jmp     short loc_1F94
.text$mn:00001F8D ; ---------------------------------------------------------------------------
.text$mn:00001F8D
.text$mn:00001F8D loc_1F8D:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:00001F8D                 mov     [ebp+var_14], 0
.text$mn:00001F94
.text$mn:00001F94 loc_1F94:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00001F94                 mov     edx, [ebp+var_14]
.text$mn:00001F97                 mov     [ebp+var_1C], edx
.text$mn:00001F9A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001FA1                 mov     ecx, [ebp+var_C]
.text$mn:00001FA4                 mov     large fs:0, ecx
.text$mn:00001FAB                 pop     ecx
.text$mn:00001FAC                 mov     esp, ebp
.text$mn:00001FAE                 pop     ebp
.text$mn:00001FAF                 retn    8
.text$mn:00001FAF ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00001FAF
.text$mn:00001FAF ; ---------------------------------------------------------------------------
.text$mn:00001FB2                 align 4
.text$mn:00001FB2 _text$mn        ends
.text$mn:00001FB2
.text$x:00001FB4 ; ===========================================================================
.text$x:00001FB4
.text$x:00001FB4 ; Segment type: Pure code
.text$x:00001FB4 ; Segment permissions: Read/Execute
.text$x:00001FB4 _text$x         segment para public 'CODE' use32
.text$x:00001FB4                 assume cs:_text$x
.text$x:00001FB4                 ;org 1FB4h
.text$x:00001FB4 ; COMDAT (pick associative to section at 1F2C)
.text$x:00001FB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001FB4
.text$x:00001FB4 ; =============== S U B R O U T I N E =======================================
.text$x:00001FB4
.text$x:00001FB4
.text$x:00001FB4 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00001FB4                                         ; DATA XREF: .xdata$x:00004CC0o
.text$x:00001FB4                 mov     eax, [ebp+8]
.text$x:00001FB7                 push    eax
.text$x:00001FB8                 mov     eax, [ebp-10h]
.text$x:00001FBB                 push    eax             ; void *
.text$x:00001FBC                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00001FC1                 add     esp, 8
.text$x:00001FC4                 retn
.text$x:00001FC4 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00001FC4
.text$x:00001FC5
.text$x:00001FC5 ; =============== S U B R O U T I N E =======================================
.text$x:00001FC5
.text$x:00001FC5
.text$x:00001FC5 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00001FC5                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00001FC5
.text$x:00001FC5 arg_4           = dword ptr  8
.text$x:00001FC5
.text$x:00001FC5                 mov     edx, [esp+arg_4]
.text$x:00001FC9                 lea     eax, [edx+0Ch]
.text$x:00001FCC                 mov     ecx, [edx-14h]
.text$x:00001FCF                 xor     ecx, eax
.text$x:00001FD1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001FD6                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00001FDB                 jmp     ___CxxFrameHandler3
.text$x:00001FDB __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00001FDB
.text$x:00001FDB _text$x         ends
.text$x:00001FDB
.text$mn:00001FE0 ; ===========================================================================
.text$mn:00001FE0
.text$mn:00001FE0 ; Segment type: Pure code
.text$mn:00001FE0 ; Segment permissions: Read/Execute
.text$mn:00001FE0 _text$mn        segment para public 'CODE' use32
.text$mn:00001FE0                 assume cs:_text$mn
.text$mn:00001FE0                 ;org 1FE0h
.text$mn:00001FE0 ; COMDAT (pick any)
.text$mn:00001FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001FE0
.text$mn:00001FE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001FE0
.text$mn:00001FE0 ; Attributes: bp-based frame
.text$mn:00001FE0
.text$mn:00001FE0 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00001FE0                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00001FE0 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00001FE0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00001FE0
.text$mn:00001FE0 arg_0           = dword ptr  8
.text$mn:00001FE0 arg_4           = dword ptr  0Ch
.text$mn:00001FE0 arg_8           = dword ptr  10h
.text$mn:00001FE0
.text$mn:00001FE0                 push    ebp
.text$mn:00001FE1                 mov     ebp, esp
.text$mn:00001FE3                 mov     eax, [ebp+arg_8]
.text$mn:00001FE6                 push    eax
.text$mn:00001FE7                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00001FEC                 add     esp, 4
.text$mn:00001FEF                 push    eax             ; int
.text$mn:00001FF0                 mov     ecx, [ebp+arg_4]
.text$mn:00001FF3                 push    ecx             ; void *
.text$mn:00001FF4                 mov     ecx, [ebp+arg_0]
.text$mn:00001FF7                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00001FFC                 pop     ebp
.text$mn:00001FFD                 retn
.text$mn:00001FFD ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00001FFD
.text$mn:00001FFD ; ---------------------------------------------------------------------------
.text$mn:00001FFE                 align 10h
.text$mn:00001FFE _text$mn        ends
.text$mn:00001FFE
.text$mn:00002000 ; ===========================================================================
.text$mn:00002000
.text$mn:00002000 ; Segment type: Pure code
.text$mn:00002000 ; Segment permissions: Read/Execute
.text$mn:00002000 _text$mn        segment para public 'CODE' use32
.text$mn:00002000                 assume cs:_text$mn
.text$mn:00002000                 ;org 2000h
.text$mn:00002000 ; COMDAT (pick any)
.text$mn:00002000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002000
.text$mn:00002000 ; =============== S U B R O U T I N E =======================================
.text$mn:00002000
.text$mn:00002000 ; Attributes: bp-based frame
.text$mn:00002000
.text$mn:00002000 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00002000                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00002000 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00002000                                         ; CODE XREF: $LN19_0+4Bp
.text$mn:00002000
.text$mn:00002000 var_4           = dword ptr -4
.text$mn:00002000 arg_0           = dword ptr  8
.text$mn:00002000 arg_4           = dword ptr  0Ch
.text$mn:00002000
.text$mn:00002000                 push    ebp
.text$mn:00002001                 mov     ebp, esp
.text$mn:00002003                 push    ecx
.text$mn:00002004                 mov     [ebp+var_4], ecx
.text$mn:00002007                 mov     eax, [ebp+arg_4]
.text$mn:0000200A                 push    eax
.text$mn:0000200B                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00002010                 add     esp, 4
.text$mn:00002013                 push    eax             ; int
.text$mn:00002014                 mov     ecx, [ebp+arg_0]
.text$mn:00002017                 push    ecx             ; void *
.text$mn:00002018                 mov     edx, [ebp+var_4]
.text$mn:0000201B                 push    edx             ; int
.text$mn:0000201C                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00002021                 add     esp, 0Ch
.text$mn:00002024                 mov     esp, ebp
.text$mn:00002026                 pop     ebp
.text$mn:00002027                 retn    8
.text$mn:00002027 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00002027
.text$mn:00002027 ; ---------------------------------------------------------------------------
.text$mn:0000202A                 align 4
.text$mn:0000202A _text$mn        ends
.text$mn:0000202A
.text$mn:0000202C ; ===========================================================================
.text$mn:0000202C
.text$mn:0000202C ; Segment type: Pure code
.text$mn:0000202C ; Segment permissions: Read/Execute
.text$mn:0000202C _text$mn        segment para public 'CODE' use32
.text$mn:0000202C                 assume cs:_text$mn
.text$mn:0000202C                 ;org 202Ch
.text$mn:0000202C ; COMDAT (pick any)
.text$mn:0000202C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000202C
.text$mn:0000202C ; =============== S U B R O U T I N E =======================================
.text$mn:0000202C
.text$mn:0000202C ; Attributes: bp-based frame
.text$mn:0000202C
.text$mn:0000202C ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:0000202C                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:0000202C ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:0000202C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:0000202C
.text$mn:0000202C var_1C          = dword ptr -1Ch
.text$mn:0000202C var_18          = dword ptr -18h
.text$mn:0000202C var_14          = dword ptr -14h
.text$mn:0000202C var_10          = dword ptr -10h
.text$mn:0000202C var_C           = dword ptr -0Ch
.text$mn:0000202C var_4           = dword ptr -4
.text$mn:0000202C arg_0           = dword ptr  8
.text$mn:0000202C arg_4           = dword ptr  0Ch
.text$mn:0000202C
.text$mn:0000202C                 push    ebp
.text$mn:0000202D                 mov     ebp, esp
.text$mn:0000202F                 push    0FFFFFFFFh
.text$mn:00002031                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00002036                 mov     eax, large fs:0
.text$mn:0000203C                 push    eax
.text$mn:0000203D                 sub     esp, 10h
.text$mn:00002040                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002045                 xor     eax, ebp
.text$mn:00002047                 push    eax
.text$mn:00002048                 lea     eax, [ebp+var_C]
.text$mn:0000204B                 mov     large fs:0, eax
.text$mn:00002051                 mov     [ebp+var_18], ecx
.text$mn:00002054                 mov     eax, [ebp+arg_0]
.text$mn:00002057                 push    eax             ; void *
.text$mn:00002058                 push    4               ; unsigned int
.text$mn:0000205A                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:0000205F                 add     esp, 8
.text$mn:00002062                 mov     [ebp+var_10], eax
.text$mn:00002065                 mov     [ebp+var_4], 0
.text$mn:0000206C                 cmp     [ebp+var_10], 0
.text$mn:00002070                 jz      short loc_208D
.text$mn:00002072                 mov     ecx, [ebp+arg_4]
.text$mn:00002075                 push    ecx
.text$mn:00002076                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:0000207B                 add     esp, 4
.text$mn:0000207E                 mov     edx, [ebp+var_10]
.text$mn:00002081                 mov     eax, [eax]
.text$mn:00002083                 mov     [edx], eax
.text$mn:00002085                 mov     ecx, [ebp+var_10]
.text$mn:00002088                 mov     [ebp+var_14], ecx
.text$mn:0000208B                 jmp     short loc_2094
.text$mn:0000208D ; ---------------------------------------------------------------------------
.text$mn:0000208D
.text$mn:0000208D loc_208D:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:0000208D                 mov     [ebp+var_14], 0
.text$mn:00002094
.text$mn:00002094 loc_2094:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00002094                 mov     edx, [ebp+var_14]
.text$mn:00002097                 mov     [ebp+var_1C], edx
.text$mn:0000209A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000020A1                 mov     ecx, [ebp+var_C]
.text$mn:000020A4                 mov     large fs:0, ecx
.text$mn:000020AB                 pop     ecx
.text$mn:000020AC                 mov     esp, ebp
.text$mn:000020AE                 pop     ebp
.text$mn:000020AF                 retn    8
.text$mn:000020AF ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:000020AF
.text$mn:000020AF ; ---------------------------------------------------------------------------
.text$mn:000020B2                 align 4
.text$mn:000020B2 _text$mn        ends
.text$mn:000020B2
.text$x:000020B4 ; ===========================================================================
.text$x:000020B4
.text$x:000020B4 ; Segment type: Pure code
.text$x:000020B4 ; Segment permissions: Read/Execute
.text$x:000020B4 _text$x         segment para public 'CODE' use32
.text$x:000020B4                 assume cs:_text$x
.text$x:000020B4                 ;org 20B4h
.text$x:000020B4 ; COMDAT (pick associative to section at 202C)
.text$x:000020B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000020B4
.text$x:000020B4 ; =============== S U B R O U T I N E =======================================
.text$x:000020B4
.text$x:000020B4
.text$x:000020B4 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:000020B4                                         ; DATA XREF: .xdata$x:00004CECo
.text$x:000020B4                 mov     eax, [ebp+8]
.text$x:000020B7                 push    eax
.text$x:000020B8                 mov     eax, [ebp-10h]
.text$x:000020BB                 push    eax             ; void *
.text$x:000020BC                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:000020C1                 add     esp, 8
.text$x:000020C4                 retn
.text$x:000020C4 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:000020C4
.text$x:000020C5
.text$x:000020C5 ; =============== S U B R O U T I N E =======================================
.text$x:000020C5
.text$x:000020C5
.text$x:000020C5 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:000020C5                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:000020C5
.text$x:000020C5 arg_4           = dword ptr  8
.text$x:000020C5
.text$x:000020C5                 mov     edx, [esp+arg_4]
.text$x:000020C9                 lea     eax, [edx+0Ch]
.text$x:000020CC                 mov     ecx, [edx-14h]
.text$x:000020CF                 xor     ecx, eax
.text$x:000020D1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000020D6                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:000020DB                 jmp     ___CxxFrameHandler3
.text$x:000020DB __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:000020DB
.text$x:000020DB _text$x         ends
.text$x:000020DB
.text$mn:000020E0 ; ===========================================================================
.text$mn:000020E0
.text$mn:000020E0 ; Segment type: Pure code
.text$mn:000020E0 ; Segment permissions: Read/Execute
.text$mn:000020E0 _text$mn        segment para public 'CODE' use32
.text$mn:000020E0                 assume cs:_text$mn
.text$mn:000020E0                 ;org 20E0h
.text$mn:000020E0 ; COMDAT (pick any)
.text$mn:000020E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000020E0
.text$mn:000020E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000020E0
.text$mn:000020E0 ; Attributes: bp-based frame
.text$mn:000020E0
.text$mn:000020E0 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:000020E0                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:000020E0 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:000020E0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:000020E0
.text$mn:000020E0 arg_0           = dword ptr  8
.text$mn:000020E0 arg_4           = dword ptr  0Ch
.text$mn:000020E0 arg_8           = dword ptr  10h
.text$mn:000020E0
.text$mn:000020E0                 push    ebp
.text$mn:000020E1                 mov     ebp, esp
.text$mn:000020E3                 mov     eax, [ebp+arg_8]
.text$mn:000020E6                 push    eax
.text$mn:000020E7                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000020EC                 add     esp, 4
.text$mn:000020EF                 push    eax             ; int
.text$mn:000020F0                 mov     ecx, [ebp+arg_4]
.text$mn:000020F3                 push    ecx             ; void *
.text$mn:000020F4                 mov     ecx, [ebp+arg_0]
.text$mn:000020F7                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:000020FC                 pop     ebp
.text$mn:000020FD                 retn
.text$mn:000020FD ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:000020FD
.text$mn:000020FD ; ---------------------------------------------------------------------------
.text$mn:000020FE                 align 10h
.text$mn:000020FE _text$mn        ends
.text$mn:000020FE
.text$mn:00002100 ; ===========================================================================
.text$mn:00002100
.text$mn:00002100 ; Segment type: Pure code
.text$mn:00002100 ; Segment permissions: Read/Execute
.text$mn:00002100 _text$mn        segment para public 'CODE' use32
.text$mn:00002100                 assume cs:_text$mn
.text$mn:00002100                 ;org 2100h
.text$mn:00002100 ; COMDAT (pick any)
.text$mn:00002100                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002100
.text$mn:00002100 ; =============== S U B R O U T I N E =======================================
.text$mn:00002100
.text$mn:00002100 ; Attributes: bp-based frame
.text$mn:00002100
.text$mn:00002100 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00002100                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00002100 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00002100                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p
.text$mn:00002100                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+32p
.text$mn:00002100
.text$mn:00002100 var_1C          = dword ptr -1Ch
.text$mn:00002100 var_18          = dword ptr -18h
.text$mn:00002100 var_14          = dword ptr -14h
.text$mn:00002100 var_10          = dword ptr -10h
.text$mn:00002100 var_C           = dword ptr -0Ch
.text$mn:00002100 var_4           = dword ptr -4
.text$mn:00002100 arg_0           = dword ptr  8
.text$mn:00002100 arg_4           = dword ptr  0Ch
.text$mn:00002100
.text$mn:00002100                 push    ebp
.text$mn:00002101                 mov     ebp, esp
.text$mn:00002103                 push    0FFFFFFFFh
.text$mn:00002105                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:0000210A                 mov     eax, large fs:0
.text$mn:00002110                 push    eax
.text$mn:00002111                 sub     esp, 10h
.text$mn:00002114                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002119                 xor     eax, ebp
.text$mn:0000211B                 push    eax
.text$mn:0000211C                 lea     eax, [ebp+var_C]
.text$mn:0000211F                 mov     large fs:0, eax
.text$mn:00002125                 mov     [ebp+var_18], ecx
.text$mn:00002128                 mov     eax, [ebp+arg_0]
.text$mn:0000212B                 push    eax             ; void *
.text$mn:0000212C                 push    8               ; unsigned int
.text$mn:0000212E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00002133                 add     esp, 8
.text$mn:00002136                 mov     [ebp+var_10], eax
.text$mn:00002139                 mov     [ebp+var_4], 0
.text$mn:00002140                 cmp     [ebp+var_10], 0
.text$mn:00002144                 jz      short loc_2167
.text$mn:00002146                 mov     ecx, [ebp+arg_4]
.text$mn:00002149                 push    ecx
.text$mn:0000214A                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:0000214F                 add     esp, 4
.text$mn:00002152                 mov     edx, [eax]
.text$mn:00002154                 mov     eax, [eax+4]
.text$mn:00002157                 mov     ecx, [ebp+var_10]
.text$mn:0000215A                 mov     [ecx], edx
.text$mn:0000215C                 mov     [ecx+4], eax
.text$mn:0000215F                 mov     edx, [ebp+var_10]
.text$mn:00002162                 mov     [ebp+var_14], edx
.text$mn:00002165                 jmp     short loc_216E
.text$mn:00002167 ; ---------------------------------------------------------------------------
.text$mn:00002167
.text$mn:00002167 loc_2167:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00002167                 mov     [ebp+var_14], 0
.text$mn:0000216E
.text$mn:0000216E loc_216E:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:0000216E                 mov     eax, [ebp+var_14]
.text$mn:00002171                 mov     [ebp+var_1C], eax
.text$mn:00002174                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000217B                 mov     ecx, [ebp+var_C]
.text$mn:0000217E                 mov     large fs:0, ecx
.text$mn:00002185                 pop     ecx
.text$mn:00002186                 mov     esp, ebp
.text$mn:00002188                 pop     ebp
.text$mn:00002189                 retn    8
.text$mn:00002189 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00002189
.text$mn:00002189 _text$mn        ends
.text$mn:00002189
.text$x:0000218C ; ===========================================================================
.text$x:0000218C
.text$x:0000218C ; Segment type: Pure code
.text$x:0000218C ; Segment permissions: Read/Execute
.text$x:0000218C _text$x         segment para public 'CODE' use32
.text$x:0000218C                 assume cs:_text$x
.text$x:0000218C                 ;org 218Ch
.text$x:0000218C ; COMDAT (pick associative to section at 2100)
.text$x:0000218C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000218C
.text$x:0000218C ; =============== S U B R O U T I N E =======================================
.text$x:0000218C
.text$x:0000218C
.text$x:0000218C __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:0000218C                                         ; DATA XREF: .xdata$x:00004C94o
.text$x:0000218C                 mov     eax, [ebp+8]
.text$x:0000218F                 push    eax
.text$x:00002190                 mov     eax, [ebp-10h]
.text$x:00002193                 push    eax             ; void *
.text$x:00002194                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00002199                 add     esp, 8
.text$x:0000219C                 retn
.text$x:0000219C __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:0000219C
.text$x:0000219D
.text$x:0000219D ; =============== S U B R O U T I N E =======================================
.text$x:0000219D
.text$x:0000219D
.text$x:0000219D __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:0000219D                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:0000219D
.text$x:0000219D arg_4           = dword ptr  8
.text$x:0000219D
.text$x:0000219D                 mov     edx, [esp+arg_4]
.text$x:000021A1                 lea     eax, [edx+0Ch]
.text$x:000021A4                 mov     ecx, [edx-14h]
.text$x:000021A7                 xor     ecx, eax
.text$x:000021A9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000021AE                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:000021B3                 jmp     ___CxxFrameHandler3
.text$x:000021B3 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:000021B3
.text$x:000021B3 _text$x         ends
.text$x:000021B3
.text$mn:000021B8 ; ===========================================================================
.text$mn:000021B8
.text$mn:000021B8 ; Segment type: Pure code
.text$mn:000021B8 ; Segment permissions: Read/Execute
.text$mn:000021B8 _text$mn        segment para public 'CODE' use32
.text$mn:000021B8                 assume cs:_text$mn
.text$mn:000021B8                 ;org 21B8h
.text$mn:000021B8 ; COMDAT (pick any)
.text$mn:000021B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021B8
.text$mn:000021B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000021B8
.text$mn:000021B8 ; Attributes: bp-based frame
.text$mn:000021B8
.text$mn:000021B8 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:000021B8                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:000021B8 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:000021B8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:000021B8
.text$mn:000021B8 var_4           = dword ptr -4
.text$mn:000021B8 arg_0           = dword ptr  8
.text$mn:000021B8
.text$mn:000021B8                 push    ebp
.text$mn:000021B9                 mov     ebp, esp
.text$mn:000021BB                 push    ecx
.text$mn:000021BC                 mov     [ebp+var_4], ecx
.text$mn:000021BF                 mov     eax, [ebp+arg_0]
.text$mn:000021C2                 push    eax
.text$mn:000021C3                 mov     ecx, [ebp+var_4]
.text$mn:000021C6                 push    ecx
.text$mn:000021C7                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:000021CC                 add     esp, 8
.text$mn:000021CF                 mov     esp, ebp
.text$mn:000021D1                 pop     ebp
.text$mn:000021D2                 retn    4
.text$mn:000021D2 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:000021D2
.text$mn:000021D2 ; ---------------------------------------------------------------------------
.text$mn:000021D5                 align 4
.text$mn:000021D5 _text$mn        ends
.text$mn:000021D5
.text$mn:000021D8 ; ===========================================================================
.text$mn:000021D8
.text$mn:000021D8 ; Segment type: Pure code
.text$mn:000021D8 ; Segment permissions: Read/Execute
.text$mn:000021D8 _text$mn        segment para public 'CODE' use32
.text$mn:000021D8                 assume cs:_text$mn
.text$mn:000021D8                 ;org 21D8h
.text$mn:000021D8 ; COMDAT (pick any)
.text$mn:000021D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021D8
.text$mn:000021D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000021D8
.text$mn:000021D8 ; Attributes: bp-based frame
.text$mn:000021D8
.text$mn:000021D8 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:000021D8                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:000021D8 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:000021D8                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:000021D8
.text$mn:000021D8 var_4           = dword ptr -4
.text$mn:000021D8
.text$mn:000021D8                 push    ebp
.text$mn:000021D9                 mov     ebp, esp
.text$mn:000021DB                 push    ecx
.text$mn:000021DC                 mov     [ebp+var_4], ecx
.text$mn:000021DF                 mov     esp, ebp
.text$mn:000021E1                 pop     ebp
.text$mn:000021E2                 retn    4
.text$mn:000021E2 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:000021E2
.text$mn:000021E2 ; ---------------------------------------------------------------------------
.text$mn:000021E5                 align 4
.text$mn:000021E5 _text$mn        ends
.text$mn:000021E5
.text$mn:000021E8 ; ===========================================================================
.text$mn:000021E8
.text$mn:000021E8 ; Segment type: Pure code
.text$mn:000021E8 ; Segment permissions: Read/Execute
.text$mn:000021E8 _text$mn        segment para public 'CODE' use32
.text$mn:000021E8                 assume cs:_text$mn
.text$mn:000021E8                 ;org 21E8h
.text$mn:000021E8 ; COMDAT (pick any)
.text$mn:000021E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021E8
.text$mn:000021E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000021E8
.text$mn:000021E8 ; Attributes: bp-based frame
.text$mn:000021E8
.text$mn:000021E8 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:000021E8                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:000021E8 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:000021E8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:000021E8
.text$mn:000021E8 arg_0           = dword ptr  8
.text$mn:000021E8 arg_4           = dword ptr  0Ch
.text$mn:000021E8
.text$mn:000021E8                 push    ebp
.text$mn:000021E9                 mov     ebp, esp
.text$mn:000021EB                 mov     eax, [ebp+arg_4]
.text$mn:000021EE                 push    eax
.text$mn:000021EF                 mov     ecx, [ebp+arg_0]
.text$mn:000021F2                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:000021F7                 pop     ebp
.text$mn:000021F8                 retn
.text$mn:000021F8 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:000021F8
.text$mn:000021F8 ; ---------------------------------------------------------------------------
.text$mn:000021F9                 align 4
.text$mn:000021F9 _text$mn        ends
.text$mn:000021F9
.text$mn:000021FC ; ===========================================================================
.text$mn:000021FC
.text$mn:000021FC ; Segment type: Pure code
.text$mn:000021FC ; Segment permissions: Read/Execute
.text$mn:000021FC _text$mn        segment para public 'CODE' use32
.text$mn:000021FC                 assume cs:_text$mn
.text$mn:000021FC                 ;org 21FCh
.text$mn:000021FC ; COMDAT (pick any)
.text$mn:000021FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021FC
.text$mn:000021FC ; =============== S U B R O U T I N E =======================================
.text$mn:000021FC
.text$mn:000021FC ; Attributes: bp-based frame
.text$mn:000021FC
.text$mn:000021FC ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000021FC                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:000021FC ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:000021FC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:000021FC
.text$mn:000021FC var_4           = dword ptr -4
.text$mn:000021FC arg_0           = dword ptr  8
.text$mn:000021FC
.text$mn:000021FC                 push    ebp
.text$mn:000021FD                 mov     ebp, esp
.text$mn:000021FF                 push    ecx
.text$mn:00002200                 mov     [ebp+var_4], ecx
.text$mn:00002203                 mov     eax, [ebp+arg_0]
.text$mn:00002206                 push    eax
.text$mn:00002207                 mov     ecx, [ebp+var_4]
.text$mn:0000220A                 push    ecx
.text$mn:0000220B                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00002210                 add     esp, 8
.text$mn:00002213                 mov     esp, ebp
.text$mn:00002215                 pop     ebp
.text$mn:00002216                 retn    4
.text$mn:00002216 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:00002216
.text$mn:00002216 ; ---------------------------------------------------------------------------
.text$mn:00002219                 align 4
.text$mn:00002219 _text$mn        ends
.text$mn:00002219
.text$mn:0000221C ; ===========================================================================
.text$mn:0000221C
.text$mn:0000221C ; Segment type: Pure code
.text$mn:0000221C ; Segment permissions: Read/Execute
.text$mn:0000221C _text$mn        segment para public 'CODE' use32
.text$mn:0000221C                 assume cs:_text$mn
.text$mn:0000221C                 ;org 221Ch
.text$mn:0000221C ; COMDAT (pick any)
.text$mn:0000221C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000221C
.text$mn:0000221C ; =============== S U B R O U T I N E =======================================
.text$mn:0000221C
.text$mn:0000221C ; Attributes: bp-based frame
.text$mn:0000221C
.text$mn:0000221C ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000221C                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:0000221C ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:0000221C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:0000221C
.text$mn:0000221C var_4           = dword ptr -4
.text$mn:0000221C
.text$mn:0000221C                 push    ebp
.text$mn:0000221D                 mov     ebp, esp
.text$mn:0000221F                 push    ecx
.text$mn:00002220                 mov     [ebp+var_4], ecx
.text$mn:00002223                 mov     esp, ebp
.text$mn:00002225                 pop     ebp
.text$mn:00002226                 retn    4
.text$mn:00002226 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00002226
.text$mn:00002226 ; ---------------------------------------------------------------------------
.text$mn:00002229                 align 4
.text$mn:00002229 _text$mn        ends
.text$mn:00002229
.text$mn:0000222C ; ===========================================================================
.text$mn:0000222C
.text$mn:0000222C ; Segment type: Pure code
.text$mn:0000222C ; Segment permissions: Read/Execute
.text$mn:0000222C _text$mn        segment para public 'CODE' use32
.text$mn:0000222C                 assume cs:_text$mn
.text$mn:0000222C                 ;org 222Ch
.text$mn:0000222C ; COMDAT (pick any)
.text$mn:0000222C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000222C
.text$mn:0000222C ; =============== S U B R O U T I N E =======================================
.text$mn:0000222C
.text$mn:0000222C ; Attributes: bp-based frame
.text$mn:0000222C
.text$mn:0000222C ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:0000222C                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:0000222C ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:0000222C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:0000222C
.text$mn:0000222C arg_0           = dword ptr  8
.text$mn:0000222C arg_4           = dword ptr  0Ch
.text$mn:0000222C
.text$mn:0000222C                 push    ebp
.text$mn:0000222D                 mov     ebp, esp
.text$mn:0000222F                 mov     eax, [ebp+arg_4]
.text$mn:00002232                 push    eax
.text$mn:00002233                 mov     ecx, [ebp+arg_0]
.text$mn:00002236                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000223B                 pop     ebp
.text$mn:0000223C                 retn
.text$mn:0000223C ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:0000223C
.text$mn:0000223C ; ---------------------------------------------------------------------------
.text$mn:0000223D                 align 10h
.text$mn:0000223D _text$mn        ends
.text$mn:0000223D
.text$mn:00002240 ; ===========================================================================
.text$mn:00002240
.text$mn:00002240 ; Segment type: Pure code
.text$mn:00002240 ; Segment permissions: Read/Execute
.text$mn:00002240 _text$mn        segment para public 'CODE' use32
.text$mn:00002240                 assume cs:_text$mn
.text$mn:00002240                 ;org 2240h
.text$mn:00002240 ; COMDAT (pick any)
.text$mn:00002240                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002240
.text$mn:00002240 ; =============== S U B R O U T I N E =======================================
.text$mn:00002240
.text$mn:00002240 ; Attributes: bp-based frame
.text$mn:00002240
.text$mn:00002240 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00002240                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00002240 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00002240                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p
.text$mn:00002240                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+22p
.text$mn:00002240
.text$mn:00002240 var_4           = dword ptr -4
.text$mn:00002240
.text$mn:00002240                 push    ebp
.text$mn:00002241                 mov     ebp, esp
.text$mn:00002243                 push    ecx
.text$mn:00002244                 mov     [ebp+var_4], ecx
.text$mn:00002247                 mov     esp, ebp
.text$mn:00002249                 pop     ebp
.text$mn:0000224A                 retn    4
.text$mn:0000224A ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:0000224A
.text$mn:0000224A ; ---------------------------------------------------------------------------
.text$mn:0000224D                 align 10h
.text$mn:0000224D _text$mn        ends
.text$mn:0000224D
.text$mn:00002250 ; ===========================================================================
.text$mn:00002250
.text$mn:00002250 ; Segment type: Pure code
.text$mn:00002250 ; Segment permissions: Read/Execute
.text$mn:00002250 _text$mn        segment para public 'CODE' use32
.text$mn:00002250                 assume cs:_text$mn
.text$mn:00002250                 ;org 2250h
.text$mn:00002250 ; COMDAT (pick any)
.text$mn:00002250                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002250
.text$mn:00002250 ; =============== S U B R O U T I N E =======================================
.text$mn:00002250
.text$mn:00002250 ; Attributes: bp-based frame
.text$mn:00002250
.text$mn:00002250 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00002250                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00002250 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00002250                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00002250                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00002250
.text$mn:00002250 arg_0           = dword ptr  8
.text$mn:00002250
.text$mn:00002250                 push    ebp
.text$mn:00002251                 mov     ebp, esp
.text$mn:00002253                 mov     eax, [ebp+arg_0]
.text$mn:00002256                 pop     ebp
.text$mn:00002257                 retn
.text$mn:00002257 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:00002257
.text$mn:00002257 _text$mn        ends
.text$mn:00002257
.text$mn:00002258 ; ===========================================================================
.text$mn:00002258
.text$mn:00002258 ; Segment type: Pure code
.text$mn:00002258 ; Segment permissions: Read/Execute
.text$mn:00002258 _text$mn        segment para public 'CODE' use32
.text$mn:00002258                 assume cs:_text$mn
.text$mn:00002258                 ;org 2258h
.text$mn:00002258 ; COMDAT (pick any)
.text$mn:00002258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002258
.text$mn:00002258 ; =============== S U B R O U T I N E =======================================
.text$mn:00002258
.text$mn:00002258 ; Attributes: bp-based frame
.text$mn:00002258
.text$mn:00002258 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00002258                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00002258 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00002258                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00002258                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00002258
.text$mn:00002258 arg_0           = dword ptr  8
.text$mn:00002258
.text$mn:00002258                 push    ebp
.text$mn:00002259                 mov     ebp, esp
.text$mn:0000225B                 mov     eax, [ebp+arg_0]
.text$mn:0000225E                 pop     ebp
.text$mn:0000225F                 retn
.text$mn:0000225F ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:0000225F
.text$mn:0000225F _text$mn        ends
.text$mn:0000225F
.text$mn:00002260 ; ===========================================================================
.text$mn:00002260
.text$mn:00002260 ; Segment type: Pure code
.text$mn:00002260 ; Segment permissions: Read/Execute
.text$mn:00002260 _text$mn        segment para public 'CODE' use32
.text$mn:00002260                 assume cs:_text$mn
.text$mn:00002260                 ;org 2260h
.text$mn:00002260 ; COMDAT (pick any)
.text$mn:00002260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002260
.text$mn:00002260 ; =============== S U B R O U T I N E =======================================
.text$mn:00002260
.text$mn:00002260 ; Attributes: bp-based frame
.text$mn:00002260
.text$mn:00002260 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00002260                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00002260 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00002260                                         ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap
.text$mn:00002260
.text$mn:00002260 arg_0           = dword ptr  8
.text$mn:00002260
.text$mn:00002260                 push    ebp
.text$mn:00002261                 mov     ebp, esp
.text$mn:00002263                 mov     eax, [ebp+arg_0]
.text$mn:00002266                 pop     ebp
.text$mn:00002267                 retn
.text$mn:00002267 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00002267
.text$mn:00002267 _text$mn        ends
.text$mn:00002267
.text$mn:00002268 ; ===========================================================================
.text$mn:00002268
.text$mn:00002268 ; Segment type: Pure code
.text$mn:00002268 ; Segment permissions: Read/Execute
.text$mn:00002268 _text$mn        segment para public 'CODE' use32
.text$mn:00002268                 assume cs:_text$mn
.text$mn:00002268                 ;org 2268h
.text$mn:00002268 ; COMDAT (pick any)
.text$mn:00002268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002268
.text$mn:00002268 ; =============== S U B R O U T I N E =======================================
.text$mn:00002268
.text$mn:00002268 ; Attributes: bp-based frame
.text$mn:00002268
.text$mn:00002268 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00002268                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00002268 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00002268                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:00002268
.text$mn:00002268 var_10          = dword ptr -10h
.text$mn:00002268 var_C           = dword ptr -0Ch
.text$mn:00002268 var_4           = dword ptr -4
.text$mn:00002268
.text$mn:00002268                 push    ebp
.text$mn:00002269                 mov     ebp, esp
.text$mn:0000226B                 push    0FFFFFFFFh
.text$mn:0000226D                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00002272                 mov     eax, large fs:0
.text$mn:00002278                 push    eax
.text$mn:00002279                 push    ecx
.text$mn:0000227A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000227F                 xor     eax, ebp
.text$mn:00002281                 push    eax
.text$mn:00002282                 lea     eax, [ebp+var_C]
.text$mn:00002285                 mov     large fs:0, eax
.text$mn:0000228B                 mov     [ebp+var_10], ecx
.text$mn:0000228E                 mov     ecx, [ebp+var_10]
.text$mn:00002291                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:00002296                 mov     [ebp+var_4], 0
.text$mn:0000229D                 mov     ecx, [ebp+var_10]
.text$mn:000022A0                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000022A5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000022AC                 mov     eax, [ebp+var_10]
.text$mn:000022AF                 mov     ecx, [ebp+var_C]
.text$mn:000022B2                 mov     large fs:0, ecx
.text$mn:000022B9                 pop     ecx
.text$mn:000022BA                 mov     esp, ebp
.text$mn:000022BC                 pop     ebp
.text$mn:000022BD                 retn    4
.text$mn:000022BD ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:000022BD
.text$mn:000022BD _text$mn        ends
.text$mn:000022BD
.text$x:000022C0 ; ===========================================================================
.text$x:000022C0
.text$x:000022C0 ; Segment type: Pure code
.text$x:000022C0 ; Segment permissions: Read/Execute
.text$x:000022C0 _text$x         segment para public 'CODE' use32
.text$x:000022C0                 assume cs:_text$x
.text$x:000022C0                 ;org 22C0h
.text$x:000022C0 ; COMDAT (pick associative to section at 2268)
.text$x:000022C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000022C0
.text$x:000022C0 ; =============== S U B R O U T I N E =======================================
.text$x:000022C0
.text$x:000022C0
.text$x:000022C0 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:000022C0                                         ; DATA XREF: .xdata$x:0000480Co
.text$x:000022C0                 mov     ecx, [ebp-10h]
.text$x:000022C3                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:000022C3 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:000022C3
.text$x:000022C8
.text$x:000022C8 ; =============== S U B R O U T I N E =======================================
.text$x:000022C8
.text$x:000022C8
.text$x:000022C8 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:000022C8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:000022C8
.text$x:000022C8 arg_4           = dword ptr  8
.text$x:000022C8
.text$x:000022C8                 mov     edx, [esp+arg_4]
.text$x:000022CC                 lea     eax, [edx+0Ch]
.text$x:000022CF                 mov     ecx, [edx-8]
.text$x:000022D2                 xor     ecx, eax
.text$x:000022D4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000022D9                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:000022DE                 jmp     ___CxxFrameHandler3
.text$x:000022DE __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:000022DE
.text$x:000022DE ; ---------------------------------------------------------------------------
.text$x:000022E3                 align 4
.text$x:000022E3 _text$x         ends
.text$x:000022E3
.text$mn:000022E4 ; ===========================================================================
.text$mn:000022E4
.text$mn:000022E4 ; Segment type: Pure code
.text$mn:000022E4 ; Segment permissions: Read/Execute
.text$mn:000022E4 _text$mn        segment para public 'CODE' use32
.text$mn:000022E4                 assume cs:_text$mn
.text$mn:000022E4                 ;org 22E4h
.text$mn:000022E4 ; COMDAT (pick any)
.text$mn:000022E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000022E4
.text$mn:000022E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000022E4
.text$mn:000022E4 ; Attributes: bp-based frame
.text$mn:000022E4
.text$mn:000022E4 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:000022E4                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000022E4 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:000022E4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+34p
.text$mn:000022E4
.text$mn:000022E4 var_10          = dword ptr -10h
.text$mn:000022E4 var_C           = dword ptr -0Ch
.text$mn:000022E4 var_4           = dword ptr -4
.text$mn:000022E4
.text$mn:000022E4                 push    ebp
.text$mn:000022E5                 mov     ebp, esp
.text$mn:000022E7                 push    0FFFFFFFFh
.text$mn:000022E9                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000022EE                 mov     eax, large fs:0
.text$mn:000022F4                 push    eax
.text$mn:000022F5                 push    ecx
.text$mn:000022F6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000022FB                 xor     eax, ebp
.text$mn:000022FD                 push    eax
.text$mn:000022FE                 lea     eax, [ebp+var_C]
.text$mn:00002301                 mov     large fs:0, eax
.text$mn:00002307                 mov     [ebp+var_10], ecx
.text$mn:0000230A                 mov     ecx, [ebp+var_10]
.text$mn:0000230D                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00002312                 mov     [ebp+var_4], 0
.text$mn:00002319                 mov     ecx, [ebp+var_10]
.text$mn:0000231C                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00002321                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002328                 mov     eax, [ebp+var_10]
.text$mn:0000232B                 mov     ecx, [ebp+var_C]
.text$mn:0000232E                 mov     large fs:0, ecx
.text$mn:00002335                 pop     ecx
.text$mn:00002336                 mov     esp, ebp
.text$mn:00002338                 pop     ebp
.text$mn:00002339                 retn    4
.text$mn:00002339 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00002339
.text$mn:00002339 _text$mn        ends
.text$mn:00002339
.text$x:0000233C ; ===========================================================================
.text$x:0000233C
.text$x:0000233C ; Segment type: Pure code
.text$x:0000233C ; Segment permissions: Read/Execute
.text$x:0000233C _text$x         segment para public 'CODE' use32
.text$x:0000233C                 assume cs:_text$x
.text$x:0000233C                 ;org 233Ch
.text$x:0000233C ; COMDAT (pick associative to section at 22E4)
.text$x:0000233C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000233C
.text$x:0000233C ; =============== S U B R O U T I N E =======================================
.text$x:0000233C
.text$x:0000233C
.text$x:0000233C __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:0000233C                                         ; DATA XREF: .xdata$x:00004B2Co
.text$x:0000233C                 mov     ecx, [ebp-10h]
.text$x:0000233F                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:0000233F __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:0000233F
.text$x:00002344
.text$x:00002344 ; =============== S U B R O U T I N E =======================================
.text$x:00002344
.text$x:00002344
.text$x:00002344 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:00002344                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:00002344
.text$x:00002344 arg_4           = dword ptr  8
.text$x:00002344
.text$x:00002344                 mov     edx, [esp+arg_4]
.text$x:00002348                 lea     eax, [edx+0Ch]
.text$x:0000234B                 mov     ecx, [edx-8]
.text$x:0000234E                 xor     ecx, eax
.text$x:00002350                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002355                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:0000235A                 jmp     ___CxxFrameHandler3
.text$x:0000235A __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:0000235A
.text$x:0000235A ; ---------------------------------------------------------------------------
.text$x:0000235F                 align 10h
.text$x:0000235F _text$x         ends
.text$x:0000235F
.text$mn:00002360 ; ===========================================================================
.text$mn:00002360
.text$mn:00002360 ; Segment type: Pure code
.text$mn:00002360 ; Segment permissions: Read/Execute
.text$mn:00002360 _text$mn        segment para public 'CODE' use32
.text$mn:00002360                 assume cs:_text$mn
.text$mn:00002360                 ;org 2360h
.text$mn:00002360 ; COMDAT (pick any)
.text$mn:00002360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002360
.text$mn:00002360 ; =============== S U B R O U T I N E =======================================
.text$mn:00002360
.text$mn:00002360 ; Attributes: bp-based frame
.text$mn:00002360
.text$mn:00002360 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00002360                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00002360 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00002360                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00002360
.text$mn:00002360 var_10          = dword ptr -10h
.text$mn:00002360 var_C           = dword ptr -0Ch
.text$mn:00002360 var_4           = dword ptr -4
.text$mn:00002360
.text$mn:00002360                 push    ebp
.text$mn:00002361                 mov     ebp, esp
.text$mn:00002363                 push    0FFFFFFFFh
.text$mn:00002365                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000236A                 mov     eax, large fs:0
.text$mn:00002370                 push    eax
.text$mn:00002371                 push    ecx
.text$mn:00002372                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002377                 xor     eax, ebp
.text$mn:00002379                 push    eax
.text$mn:0000237A                 lea     eax, [ebp+var_C]
.text$mn:0000237D                 mov     large fs:0, eax
.text$mn:00002383                 mov     [ebp+var_10], ecx
.text$mn:00002386                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002389                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:0000238E                 mov     [ebp+var_4], 0
.text$mn:00002395                 mov     eax, [ebp+var_10]
.text$mn:00002398                 mov     dword ptr [eax+14h], 0
.text$mn:0000239F                 mov     ecx, [ebp+var_10]
.text$mn:000023A2                 mov     dword ptr [ecx+18h], 0
.text$mn:000023A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000023B0                 mov     eax, [ebp+var_10]
.text$mn:000023B3                 mov     ecx, [ebp+var_C]
.text$mn:000023B6                 mov     large fs:0, ecx
.text$mn:000023BD                 pop     ecx
.text$mn:000023BE                 mov     esp, ebp
.text$mn:000023C0                 pop     ebp
.text$mn:000023C1                 retn
.text$mn:000023C1 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000023C1
.text$mn:000023C1 ; ---------------------------------------------------------------------------
.text$mn:000023C2                 align 4
.text$mn:000023C2 _text$mn        ends
.text$mn:000023C2
.text$x:000023C4 ; ===========================================================================
.text$x:000023C4
.text$x:000023C4 ; Segment type: Pure code
.text$x:000023C4 ; Segment permissions: Read/Execute
.text$x:000023C4 _text$x         segment para public 'CODE' use32
.text$x:000023C4                 assume cs:_text$x
.text$x:000023C4                 ;org 23C4h
.text$x:000023C4 ; COMDAT (pick associative to section at 2360)
.text$x:000023C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000023C4
.text$x:000023C4 ; =============== S U B R O U T I N E =======================================
.text$x:000023C4
.text$x:000023C4
.text$x:000023C4 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000023C4                                         ; DATA XREF: .xdata$x:000047B4o
.text$x:000023C4                 mov     ecx, [ebp-10h]  ; this
.text$x:000023C7                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000023C7 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000023C7
.text$x:000023CC
.text$x:000023CC ; =============== S U B R O U T I N E =======================================
.text$x:000023CC
.text$x:000023CC
.text$x:000023CC __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000023CC                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000023CC
.text$x:000023CC arg_4           = dword ptr  8
.text$x:000023CC
.text$x:000023CC                 mov     edx, [esp+arg_4]
.text$x:000023D0                 lea     eax, [edx+0Ch]
.text$x:000023D3                 mov     ecx, [edx-8]
.text$x:000023D6                 xor     ecx, eax
.text$x:000023D8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000023DD                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000023E2                 jmp     ___CxxFrameHandler3
.text$x:000023E2 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000023E2
.text$x:000023E2 ; ---------------------------------------------------------------------------
.text$x:000023E7                 align 4
.text$x:000023E7 _text$x         ends
.text$x:000023E7
.text$mn:000023E8 ; ===========================================================================
.text$mn:000023E8
.text$mn:000023E8 ; Segment type: Pure code
.text$mn:000023E8 ; Segment permissions: Read/Execute
.text$mn:000023E8 _text$mn        segment para public 'CODE' use32
.text$mn:000023E8                 assume cs:_text$mn
.text$mn:000023E8                 ;org 23E8h
.text$mn:000023E8 ; COMDAT (pick any)
.text$mn:000023E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000023E8
.text$mn:000023E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000023E8
.text$mn:000023E8 ; Attributes: bp-based frame
.text$mn:000023E8
.text$mn:000023E8 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000023E8                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000023E8 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000023E8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:000023E8
.text$mn:000023E8 var_10          = dword ptr -10h
.text$mn:000023E8 var_C           = dword ptr -0Ch
.text$mn:000023E8 var_4           = dword ptr -4
.text$mn:000023E8
.text$mn:000023E8                 push    ebp
.text$mn:000023E9                 mov     ebp, esp
.text$mn:000023EB                 push    0FFFFFFFFh
.text$mn:000023ED                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000023F2                 mov     eax, large fs:0
.text$mn:000023F8                 push    eax
.text$mn:000023F9                 push    ecx
.text$mn:000023FA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000023FF                 xor     eax, ebp
.text$mn:00002401                 push    eax
.text$mn:00002402                 lea     eax, [ebp+var_C]
.text$mn:00002405                 mov     large fs:0, eax
.text$mn:0000240B                 mov     [ebp+var_10], ecx
.text$mn:0000240E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002411                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00002416                 mov     [ebp+var_4], 0
.text$mn:0000241D                 mov     eax, [ebp+var_10]
.text$mn:00002420                 mov     dword ptr [eax+14h], 0
.text$mn:00002427                 mov     ecx, [ebp+var_10]
.text$mn:0000242A                 mov     dword ptr [ecx+18h], 0
.text$mn:00002431                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002438                 mov     eax, [ebp+var_10]
.text$mn:0000243B                 mov     ecx, [ebp+var_C]
.text$mn:0000243E                 mov     large fs:0, ecx
.text$mn:00002445                 pop     ecx
.text$mn:00002446                 mov     esp, ebp
.text$mn:00002448                 pop     ebp
.text$mn:00002449                 retn
.text$mn:00002449 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00002449
.text$mn:00002449 ; ---------------------------------------------------------------------------
.text$mn:0000244A                 align 4
.text$mn:0000244A _text$mn        ends
.text$mn:0000244A
.text$x:0000244C ; ===========================================================================
.text$x:0000244C
.text$x:0000244C ; Segment type: Pure code
.text$x:0000244C ; Segment permissions: Read/Execute
.text$x:0000244C _text$x         segment para public 'CODE' use32
.text$x:0000244C                 assume cs:_text$x
.text$x:0000244C                 ;org 244Ch
.text$x:0000244C ; COMDAT (pick associative to section at 23E8)
.text$x:0000244C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000244C
.text$x:0000244C ; =============== S U B R O U T I N E =======================================
.text$x:0000244C
.text$x:0000244C
.text$x:0000244C __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:0000244C                                         ; DATA XREF: .xdata$x:00004AD4o
.text$x:0000244C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000244F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000244F __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000244F
.text$x:00002454
.text$x:00002454 ; =============== S U B R O U T I N E =======================================
.text$x:00002454
.text$x:00002454
.text$x:00002454 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00002454                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00002454
.text$x:00002454 arg_4           = dword ptr  8
.text$x:00002454
.text$x:00002454                 mov     edx, [esp+arg_4]
.text$x:00002458                 lea     eax, [edx+0Ch]
.text$x:0000245B                 mov     ecx, [edx-8]
.text$x:0000245E                 xor     ecx, eax
.text$x:00002460                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002465                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:0000246A                 jmp     ___CxxFrameHandler3
.text$x:0000246A __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:0000246A
.text$x:0000246A ; ---------------------------------------------------------------------------
.text$x:0000246F                 align 10h
.text$x:0000246F _text$x         ends
.text$x:0000246F
.text$mn:00002470 ; ===========================================================================
.text$mn:00002470
.text$mn:00002470 ; Segment type: Pure code
.text$mn:00002470 ; Segment permissions: Read/Execute
.text$mn:00002470 _text$mn        segment para public 'CODE' use32
.text$mn:00002470                 assume cs:_text$mn
.text$mn:00002470                 ;org 2470h
.text$mn:00002470 ; COMDAT (pick any)
.text$mn:00002470                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002470
.text$mn:00002470 ; =============== S U B R O U T I N E =======================================
.text$mn:00002470
.text$mn:00002470 ; Attributes: bp-based frame
.text$mn:00002470
.text$mn:00002470 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00002470                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00002470 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00002470                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00002470
.text$mn:00002470 var_4           = dword ptr -4
.text$mn:00002470
.text$mn:00002470                 push    ebp
.text$mn:00002471                 mov     ebp, esp
.text$mn:00002473                 push    ecx
.text$mn:00002474                 mov     [ebp+var_4], ecx
.text$mn:00002477                 mov     ecx, [ebp+var_4]
.text$mn:0000247A                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:0000247F                 mov     eax, [ebp+var_4]
.text$mn:00002482                 mov     esp, ebp
.text$mn:00002484                 pop     ebp
.text$mn:00002485                 retn
.text$mn:00002485 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00002485
.text$mn:00002485 ; ---------------------------------------------------------------------------
.text$mn:00002486                 align 4
.text$mn:00002486 _text$mn        ends
.text$mn:00002486
.text$mn:00002488 ; ===========================================================================
.text$mn:00002488
.text$mn:00002488 ; Segment type: Pure code
.text$mn:00002488 ; Segment permissions: Read/Execute
.text$mn:00002488 _text$mn        segment para public 'CODE' use32
.text$mn:00002488                 assume cs:_text$mn
.text$mn:00002488                 ;org 2488h
.text$mn:00002488 ; COMDAT (pick any)
.text$mn:00002488                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002488
.text$mn:00002488 ; =============== S U B R O U T I N E =======================================
.text$mn:00002488
.text$mn:00002488 ; Attributes: bp-based frame
.text$mn:00002488
.text$mn:00002488 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00002488                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00002488 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00002488                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00002488
.text$mn:00002488 var_4           = dword ptr -4
.text$mn:00002488
.text$mn:00002488                 push    ebp
.text$mn:00002489                 mov     ebp, esp
.text$mn:0000248B                 push    ecx
.text$mn:0000248C                 mov     [ebp+var_4], ecx
.text$mn:0000248F                 mov     ecx, [ebp+var_4]
.text$mn:00002492                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00002497                 mov     eax, [ebp+var_4]
.text$mn:0000249A                 mov     esp, ebp
.text$mn:0000249C                 pop     ebp
.text$mn:0000249D                 retn
.text$mn:0000249D ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:0000249D
.text$mn:0000249D ; ---------------------------------------------------------------------------
.text$mn:0000249E                 align 10h
.text$mn:0000249E _text$mn        ends
.text$mn:0000249E
.text$mn:000024A0 ; ===========================================================================
.text$mn:000024A0
.text$mn:000024A0 ; Segment type: Pure code
.text$mn:000024A0 ; Segment permissions: Read/Execute
.text$mn:000024A0 _text$mn        segment para public 'CODE' use32
.text$mn:000024A0                 assume cs:_text$mn
.text$mn:000024A0                 ;org 24A0h
.text$mn:000024A0 ; COMDAT (pick any)
.text$mn:000024A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000024A0
.text$mn:000024A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000024A0
.text$mn:000024A0 ; Attributes: bp-based frame
.text$mn:000024A0
.text$mn:000024A0 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:000024A0                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:000024A0 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:000024A0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:000024A0
.text$mn:000024A0 var_4           = dword ptr -4
.text$mn:000024A0
.text$mn:000024A0                 push    ebp
.text$mn:000024A1                 mov     ebp, esp
.text$mn:000024A3                 push    ecx
.text$mn:000024A4                 mov     [ebp+var_4], ecx
.text$mn:000024A7                 mov     eax, [ebp+var_4]
.text$mn:000024AA                 mov     esp, ebp
.text$mn:000024AC                 pop     ebp
.text$mn:000024AD                 retn
.text$mn:000024AD ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:000024AD
.text$mn:000024AD ; ---------------------------------------------------------------------------
.text$mn:000024AE                 align 10h
.text$mn:000024AE _text$mn        ends
.text$mn:000024AE
.text$mn:000024B0 ; ===========================================================================
.text$mn:000024B0
.text$mn:000024B0 ; Segment type: Pure code
.text$mn:000024B0 ; Segment permissions: Read/Execute
.text$mn:000024B0 _text$mn        segment para public 'CODE' use32
.text$mn:000024B0                 assume cs:_text$mn
.text$mn:000024B0                 ;org 24B0h
.text$mn:000024B0 ; COMDAT (pick any)
.text$mn:000024B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000024B0
.text$mn:000024B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000024B0
.text$mn:000024B0 ; Attributes: bp-based frame
.text$mn:000024B0
.text$mn:000024B0 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:000024B0                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:000024B0 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:000024B0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp
.text$mn:000024B0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+Cp ...
.text$mn:000024B0
.text$mn:000024B0 var_4           = dword ptr -4
.text$mn:000024B0
.text$mn:000024B0                 push    ebp
.text$mn:000024B1                 mov     ebp, esp
.text$mn:000024B3                 push    ecx
.text$mn:000024B4                 mov     [ebp+var_4], ecx
.text$mn:000024B7                 mov     eax, [ebp+var_4]
.text$mn:000024BA                 mov     esp, ebp
.text$mn:000024BC                 pop     ebp
.text$mn:000024BD                 retn
.text$mn:000024BD ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:000024BD
.text$mn:000024BD ; ---------------------------------------------------------------------------
.text$mn:000024BE                 align 10h
.text$mn:000024BE _text$mn        ends
.text$mn:000024BE
.text$mn:000024C0 ; ===========================================================================
.text$mn:000024C0
.text$mn:000024C0 ; Segment type: Pure code
.text$mn:000024C0 ; Segment permissions: Read/Execute
.text$mn:000024C0 _text$mn        segment para public 'CODE' use32
.text$mn:000024C0                 assume cs:_text$mn
.text$mn:000024C0                 ;org 24C0h
.text$mn:000024C0 ; COMDAT (pick any)
.text$mn:000024C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000024C0
.text$mn:000024C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000024C0
.text$mn:000024C0 ; Attributes: bp-based frame
.text$mn:000024C0
.text$mn:000024C0 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000024C0                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:000024C0 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:000024C0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp
.text$mn:000024C0
.text$mn:000024C0 var_4           = dword ptr -4
.text$mn:000024C0
.text$mn:000024C0                 push    ebp
.text$mn:000024C1                 mov     ebp, esp
.text$mn:000024C3                 push    ecx
.text$mn:000024C4                 mov     [ebp+var_4], ecx
.text$mn:000024C7                 mov     eax, [ebp+var_4]
.text$mn:000024CA                 mov     esp, ebp
.text$mn:000024CC                 pop     ebp
.text$mn:000024CD                 retn
.text$mn:000024CD ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:000024CD
.text$mn:000024CD ; ---------------------------------------------------------------------------
.text$mn:000024CE                 align 10h
.text$mn:000024CE _text$mn        ends
.text$mn:000024CE
.text$mn:000024D0 ; ===========================================================================
.text$mn:000024D0
.text$mn:000024D0 ; Segment type: Pure code
.text$mn:000024D0 ; Segment permissions: Read/Execute
.text$mn:000024D0 _text$mn        segment para public 'CODE' use32
.text$mn:000024D0                 assume cs:_text$mn
.text$mn:000024D0                 ;org 24D0h
.text$mn:000024D0 ; COMDAT (pick any)
.text$mn:000024D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000024D0
.text$mn:000024D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000024D0
.text$mn:000024D0 ; Attributes: bp-based frame
.text$mn:000024D0
.text$mn:000024D0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:000024D0                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000024D0 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:000024D0                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:000024D0                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:000024D0
.text$mn:000024D0 var_14          = dword ptr -14h
.text$mn:000024D0 var_D           = byte ptr -0Dh
.text$mn:000024D0 var_C           = dword ptr -0Ch
.text$mn:000024D0 var_4           = dword ptr -4
.text$mn:000024D0 Str             = dword ptr  8
.text$mn:000024D0
.text$mn:000024D0                 push    ebp
.text$mn:000024D1                 mov     ebp, esp
.text$mn:000024D3                 push    0FFFFFFFFh
.text$mn:000024D5                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:000024DA                 mov     eax, large fs:0
.text$mn:000024E0                 push    eax
.text$mn:000024E1                 sub     esp, 8
.text$mn:000024E4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000024E9                 xor     eax, ebp
.text$mn:000024EB                 push    eax
.text$mn:000024EC                 lea     eax, [ebp+var_C]
.text$mn:000024EF                 mov     large fs:0, eax
.text$mn:000024F5                 mov     [ebp+var_14], ecx
.text$mn:000024F8                 lea     ecx, [ebp+var_D]
.text$mn:000024FB                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00002500                 push    eax
.text$mn:00002501                 mov     ecx, [ebp+var_14]
.text$mn:00002504                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00002509                 mov     [ebp+var_4], 0
.text$mn:00002510                 push    0               ; Size
.text$mn:00002512                 push    0               ; char
.text$mn:00002514                 mov     ecx, [ebp+var_14]
.text$mn:00002517                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:0000251C                 mov     eax, [ebp+Str]
.text$mn:0000251F                 push    eax             ; Str
.text$mn:00002520                 mov     ecx, [ebp+var_14]
.text$mn:00002523                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00002528                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000252F                 mov     eax, [ebp+var_14]
.text$mn:00002532                 mov     ecx, [ebp+var_C]
.text$mn:00002535                 mov     large fs:0, ecx
.text$mn:0000253C                 pop     ecx
.text$mn:0000253D                 mov     esp, ebp
.text$mn:0000253F                 pop     ebp
.text$mn:00002540                 retn    4
.text$mn:00002540 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00002540
.text$mn:00002540 ; ---------------------------------------------------------------------------
.text$mn:00002543                 align 4
.text$mn:00002543 _text$mn        ends
.text$mn:00002543
.text$x:00002544 ; ===========================================================================
.text$x:00002544
.text$x:00002544 ; Segment type: Pure code
.text$x:00002544 ; Segment permissions: Read/Execute
.text$x:00002544 _text$x         segment para public 'CODE' use32
.text$x:00002544                 assume cs:_text$x
.text$x:00002544                 ;org 2544h
.text$x:00002544 ; COMDAT (pick associative to section at 24D0)
.text$x:00002544                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002544
.text$x:00002544 ; =============== S U B R O U T I N E =======================================
.text$x:00002544
.text$x:00002544
.text$x:00002544 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00002544                                         ; DATA XREF: .xdata$x:00004864o
.text$x:00002544                 mov     ecx, [ebp-14h]
.text$x:00002547                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00002547 __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:00002547
.text$x:0000254C
.text$x:0000254C ; =============== S U B R O U T I N E =======================================
.text$x:0000254C
.text$x:0000254C
.text$x:0000254C __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:0000254C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:0000254C
.text$x:0000254C arg_4           = dword ptr  8
.text$x:0000254C
.text$x:0000254C                 mov     edx, [esp+arg_4]
.text$x:00002550                 lea     eax, [edx+0Ch]
.text$x:00002553                 mov     ecx, [edx-0Ch]
.text$x:00002556                 xor     ecx, eax
.text$x:00002558                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000255D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:00002562                 jmp     ___CxxFrameHandler3
.text$x:00002562 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:00002562
.text$x:00002562 ; ---------------------------------------------------------------------------
.text$x:00002567                 align 4
.text$x:00002567 _text$x         ends
.text$x:00002567
.text$mn:00002568 ; ===========================================================================
.text$mn:00002568
.text$mn:00002568 ; Segment type: Pure code
.text$mn:00002568 ; Segment permissions: Read/Execute
.text$mn:00002568 _text$mn        segment para public 'CODE' use32
.text$mn:00002568                 assume cs:_text$mn
.text$mn:00002568                 ;org 2568h
.text$mn:00002568 ; COMDAT (pick any)
.text$mn:00002568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002568
.text$mn:00002568 ; =============== S U B R O U T I N E =======================================
.text$mn:00002568
.text$mn:00002568 ; Attributes: bp-based frame
.text$mn:00002568
.text$mn:00002568 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00002568                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00002568 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00002568                                         ; CODE XREF: RegExtDlg::writeNppPath(void)+3Dp
.text$mn:00002568
.text$mn:00002568 var_14          = dword ptr -14h
.text$mn:00002568 var_D           = byte ptr -0Dh
.text$mn:00002568 var_C           = dword ptr -0Ch
.text$mn:00002568 var_4           = dword ptr -4
.text$mn:00002568 Str             = dword ptr  8
.text$mn:00002568
.text$mn:00002568                 push    ebp
.text$mn:00002569                 mov     ebp, esp
.text$mn:0000256B                 push    0FFFFFFFFh
.text$mn:0000256D                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00002572                 mov     eax, large fs:0
.text$mn:00002578                 push    eax
.text$mn:00002579                 sub     esp, 8
.text$mn:0000257C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002581                 xor     eax, ebp
.text$mn:00002583                 push    eax
.text$mn:00002584                 lea     eax, [ebp+var_C]
.text$mn:00002587                 mov     large fs:0, eax
.text$mn:0000258D                 mov     [ebp+var_14], ecx
.text$mn:00002590                 lea     ecx, [ebp+var_D]
.text$mn:00002593                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00002598                 push    eax
.text$mn:00002599                 mov     ecx, [ebp+var_14]
.text$mn:0000259C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000025A1                 mov     [ebp+var_4], 0
.text$mn:000025A8                 push    0
.text$mn:000025AA                 push    0
.text$mn:000025AC                 mov     ecx, [ebp+var_14]
.text$mn:000025AF                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000025B4                 mov     eax, [ebp+Str]
.text$mn:000025B7                 push    eax             ; Str
.text$mn:000025B8                 mov     ecx, [ebp+var_14]
.text$mn:000025BB                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:000025C0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000025C7                 mov     eax, [ebp+var_14]
.text$mn:000025CA                 mov     ecx, [ebp+var_C]
.text$mn:000025CD                 mov     large fs:0, ecx
.text$mn:000025D4                 pop     ecx
.text$mn:000025D5                 mov     esp, ebp
.text$mn:000025D7                 pop     ebp
.text$mn:000025D8                 retn    4
.text$mn:000025D8 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:000025D8
.text$mn:000025D8 ; ---------------------------------------------------------------------------
.text$mn:000025DB                 align 4
.text$mn:000025DB _text$mn        ends
.text$mn:000025DB
.text$x:000025DC ; ===========================================================================
.text$x:000025DC
.text$x:000025DC ; Segment type: Pure code
.text$x:000025DC ; Segment permissions: Read/Execute
.text$x:000025DC _text$x         segment para public 'CODE' use32
.text$x:000025DC                 assume cs:_text$x
.text$x:000025DC                 ;org 25DCh
.text$x:000025DC ; COMDAT (pick associative to section at 2568)
.text$x:000025DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000025DC
.text$x:000025DC ; =============== S U B R O U T I N E =======================================
.text$x:000025DC
.text$x:000025DC
.text$x:000025DC __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:000025DC                                         ; DATA XREF: .xdata$x:00004B84o
.text$x:000025DC                 mov     ecx, [ebp-14h]
.text$x:000025DF                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000025DF __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:000025DF
.text$x:000025E4
.text$x:000025E4 ; =============== S U B R O U T I N E =======================================
.text$x:000025E4
.text$x:000025E4
.text$x:000025E4 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:000025E4                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:000025E4
.text$x:000025E4 arg_4           = dword ptr  8
.text$x:000025E4
.text$x:000025E4                 mov     edx, [esp+arg_4]
.text$x:000025E8                 lea     eax, [edx+0Ch]
.text$x:000025EB                 mov     ecx, [edx-0Ch]
.text$x:000025EE                 xor     ecx, eax
.text$x:000025F0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000025F5                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:000025FA                 jmp     ___CxxFrameHandler3
.text$x:000025FA __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:000025FA
.text$x:000025FA ; ---------------------------------------------------------------------------
.text$x:000025FF                 align 10h
.text$x:000025FF _text$x         ends
.text$x:000025FF
.text$mn:00002600 ; ===========================================================================
.text$mn:00002600
.text$mn:00002600 ; Segment type: Pure code
.text$mn:00002600 ; Segment permissions: Read/Execute
.text$mn:00002600 _text$mn        segment para public 'CODE' use32
.text$mn:00002600                 assume cs:_text$mn
.text$mn:00002600                 ;org 2600h
.text$mn:00002600 ; COMDAT (pick any)
.text$mn:00002600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002600
.text$mn:00002600 ; =============== S U B R O U T I N E =======================================
.text$mn:00002600
.text$mn:00002600 ; Attributes: bp-based frame
.text$mn:00002600
.text$mn:00002600 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00002600                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:00002600 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:00002600                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:00002600                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p
.text$mn:00002600
.text$mn:00002600 var_4           = dword ptr -4
.text$mn:00002600
.text$mn:00002600                 push    ebp
.text$mn:00002601                 mov     ebp, esp
.text$mn:00002603                 push    ecx
.text$mn:00002604                 mov     [ebp+var_4], ecx
.text$mn:00002607                 mov     eax, [ebp+var_4]
.text$mn:0000260A                 mov     dword ptr [eax], 0
.text$mn:00002610                 mov     eax, [ebp+var_4]
.text$mn:00002613                 mov     esp, ebp
.text$mn:00002615                 pop     ebp
.text$mn:00002616                 retn
.text$mn:00002616 ??0_Container_base12@std@@QAE@XZ endp
.text$mn:00002616
.text$mn:00002616 ; ---------------------------------------------------------------------------
.text$mn:00002617                 align 4
.text$mn:00002617 _text$mn        ends
.text$mn:00002617
.text$mn:00002618 ; ===========================================================================
.text$mn:00002618
.text$mn:00002618 ; Segment type: Pure code
.text$mn:00002618 ; Segment permissions: Read/Execute
.text$mn:00002618 _text$mn        segment para public 'CODE' use32
.text$mn:00002618                 assume cs:_text$mn
.text$mn:00002618                 ;org 2618h
.text$mn:00002618 ; COMDAT (pick any)
.text$mn:00002618                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002618
.text$mn:00002618 ; =============== S U B R O U T I N E =======================================
.text$mn:00002618
.text$mn:00002618 ; Attributes: bp-based frame
.text$mn:00002618
.text$mn:00002618 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:00002618                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:00002618 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:00002618                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:00002618                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p
.text$mn:00002618
.text$mn:00002618 var_4           = dword ptr -4
.text$mn:00002618
.text$mn:00002618                 push    ebp
.text$mn:00002619                 mov     ebp, esp
.text$mn:0000261B                 push    ecx
.text$mn:0000261C                 mov     [ebp+var_4], ecx
.text$mn:0000261F                 mov     eax, [ebp+var_4]
.text$mn:00002622                 mov     dword ptr [eax], 0
.text$mn:00002628                 mov     ecx, [ebp+var_4]
.text$mn:0000262B                 mov     dword ptr [ecx+4], 0
.text$mn:00002632                 mov     eax, [ebp+var_4]
.text$mn:00002635                 mov     esp, ebp
.text$mn:00002637                 pop     ebp
.text$mn:00002638                 retn
.text$mn:00002638 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:00002638
.text$mn:00002638 ; ---------------------------------------------------------------------------
.text$mn:00002639                 align 4
.text$mn:00002639 _text$mn        ends
.text$mn:00002639
.text$mn:0000263C ; ===========================================================================
.text$mn:0000263C
.text$mn:0000263C ; Segment type: Pure code
.text$mn:0000263C ; Segment permissions: Read/Execute
.text$mn:0000263C _text$mn        segment para public 'CODE' use32
.text$mn:0000263C                 assume cs:_text$mn
.text$mn:0000263C                 ;org 263Ch
.text$mn:0000263C ; COMDAT (pick any)
.text$mn:0000263C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000263C
.text$mn:0000263C ; =============== S U B R O U T I N E =======================================
.text$mn:0000263C
.text$mn:0000263C ; Attributes: bp-based frame
.text$mn:0000263C
.text$mn:0000263C ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:0000263C                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:0000263C ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:0000263C                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:0000263C                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:0000263C
.text$mn:0000263C var_10          = dword ptr -10h
.text$mn:0000263C var_C           = dword ptr -0Ch
.text$mn:0000263C var_4           = dword ptr -4
.text$mn:0000263C
.text$mn:0000263C                 push    ebp
.text$mn:0000263D                 mov     ebp, esp
.text$mn:0000263F                 push    0FFFFFFFFh
.text$mn:00002641                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:00002646                 mov     eax, large fs:0
.text$mn:0000264C                 push    eax
.text$mn:0000264D                 push    ecx
.text$mn:0000264E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002653                 xor     eax, ebp
.text$mn:00002655                 push    eax
.text$mn:00002656                 lea     eax, [ebp+var_C]
.text$mn:00002659                 mov     large fs:0, eax
.text$mn:0000265F                 mov     [ebp+var_10], ecx
.text$mn:00002662                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002665                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:0000266A                 mov     [ebp+var_4], 0
.text$mn:00002671                 mov     eax, [ebp+var_10]
.text$mn:00002674                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:0000267A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002681                 mov     eax, [ebp+var_10]
.text$mn:00002684                 mov     ecx, [ebp+var_C]
.text$mn:00002687                 mov     large fs:0, ecx
.text$mn:0000268E                 pop     ecx
.text$mn:0000268F                 mov     esp, ebp
.text$mn:00002691                 pop     ebp
.text$mn:00002692                 retn
.text$mn:00002692 ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00002692
.text$mn:00002692 ; ---------------------------------------------------------------------------
.text$mn:00002693                 align 4
.text$mn:00002693 _text$mn        ends
.text$mn:00002693
.text$x:00002694 ; ===========================================================================
.text$x:00002694
.text$x:00002694 ; Segment type: Pure code
.text$x:00002694 ; Segment permissions: Read/Execute
.text$x:00002694 _text$x         segment para public 'CODE' use32
.text$x:00002694                 assume cs:_text$x
.text$x:00002694                 ;org 2694h
.text$x:00002694 ; COMDAT (pick associative to section at 263C)
.text$x:00002694                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002694
.text$x:00002694 ; =============== S U B R O U T I N E =======================================
.text$x:00002694
.text$x:00002694
.text$x:00002694 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00002694                                         ; DATA XREF: .xdata$x:00004948o
.text$x:00002694                 mov     ecx, [ebp-10h]  ; this
.text$x:00002697                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00002697 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:00002697
.text$x:0000269C
.text$x:0000269C ; =============== S U B R O U T I N E =======================================
.text$x:0000269C
.text$x:0000269C
.text$x:0000269C __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:0000269C                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:0000269C
.text$x:0000269C arg_4           = dword ptr  8
.text$x:0000269C
.text$x:0000269C                 mov     edx, [esp+arg_4]
.text$x:000026A0                 lea     eax, [edx+0Ch]
.text$x:000026A3                 mov     ecx, [edx-8]
.text$x:000026A6                 xor     ecx, eax
.text$x:000026A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000026AD                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:000026B2                 jmp     ___CxxFrameHandler3
.text$x:000026B2 __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:000026B2
.text$x:000026B2 ; ---------------------------------------------------------------------------
.text$x:000026B7                 align 4
.text$x:000026B7 _text$x         ends
.text$x:000026B7
.text$mn:000026B8 ; ===========================================================================
.text$mn:000026B8
.text$mn:000026B8 ; Segment type: Pure code
.text$mn:000026B8 ; Segment permissions: Read/Execute
.text$mn:000026B8 _text$mn        segment para public 'CODE' use32
.text$mn:000026B8                 assume cs:_text$mn
.text$mn:000026B8                 ;org 26B8h
.text$mn:000026B8 ; COMDAT (pick any)
.text$mn:000026B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000026B8
.text$mn:000026B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000026B8
.text$mn:000026B8 ; Attributes: bp-based frame
.text$mn:000026B8
.text$mn:000026B8 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:000026B8                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:000026B8 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:000026B8                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:000026B8
.text$mn:000026B8 var_10          = dword ptr -10h
.text$mn:000026B8 var_C           = dword ptr -0Ch
.text$mn:000026B8 var_4           = dword ptr -4
.text$mn:000026B8
.text$mn:000026B8                 push    ebp
.text$mn:000026B9                 mov     ebp, esp
.text$mn:000026BB                 push    0FFFFFFFFh
.text$mn:000026BD                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:000026C2                 mov     eax, large fs:0
.text$mn:000026C8                 push    eax
.text$mn:000026C9                 push    ecx
.text$mn:000026CA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000026CF                 xor     eax, ebp
.text$mn:000026D1                 push    eax
.text$mn:000026D2                 lea     eax, [ebp+var_C]
.text$mn:000026D5                 mov     large fs:0, eax
.text$mn:000026DB                 mov     [ebp+var_10], ecx
.text$mn:000026DE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000026E1                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:000026E6                 mov     [ebp+var_4], 0
.text$mn:000026ED                 mov     eax, [ebp+var_10]
.text$mn:000026F0                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:000026F6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000026FD                 mov     eax, [ebp+var_10]
.text$mn:00002700                 mov     ecx, [ebp+var_C]
.text$mn:00002703                 mov     large fs:0, ecx
.text$mn:0000270A                 pop     ecx
.text$mn:0000270B                 mov     esp, ebp
.text$mn:0000270D                 pop     ebp
.text$mn:0000270E                 retn
.text$mn:0000270E ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:0000270E
.text$mn:0000270E ; ---------------------------------------------------------------------------
.text$mn:0000270F                 align 10h
.text$mn:0000270F _text$mn        ends
.text$mn:0000270F
.text$x:00002710 ; ===========================================================================
.text$x:00002710
.text$x:00002710 ; Segment type: Pure code
.text$x:00002710 ; Segment permissions: Read/Execute
.text$x:00002710 _text$x         segment para public 'CODE' use32
.text$x:00002710                 assume cs:_text$x
.text$x:00002710                 ;org 2710h
.text$x:00002710 ; COMDAT (pick associative to section at 26B8)
.text$x:00002710                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002710
.text$x:00002710 ; =============== S U B R O U T I N E =======================================
.text$x:00002710
.text$x:00002710
.text$x:00002710 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:00002710                                         ; DATA XREF: .xdata$x:000049CCo
.text$x:00002710                 mov     ecx, [ebp-10h]  ; this
.text$x:00002713                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00002713 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:00002713
.text$x:00002718
.text$x:00002718 ; =============== S U B R O U T I N E =======================================
.text$x:00002718
.text$x:00002718
.text$x:00002718 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:00002718                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:00002718
.text$x:00002718 arg_4           = dword ptr  8
.text$x:00002718
.text$x:00002718                 mov     edx, [esp+arg_4]
.text$x:0000271C                 lea     eax, [edx+0Ch]
.text$x:0000271F                 mov     ecx, [edx-8]
.text$x:00002722                 xor     ecx, eax
.text$x:00002724                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002729                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:0000272E                 jmp     ___CxxFrameHandler3
.text$x:0000272E __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:0000272E
.text$x:0000272E ; ---------------------------------------------------------------------------
.text$x:00002733                 align 4
.text$x:00002733 _text$x         ends
.text$x:00002733
.text$mn:00002734 ; ===========================================================================
.text$mn:00002734
.text$mn:00002734 ; Segment type: Pure code
.text$mn:00002734 ; Segment permissions: Read/Execute
.text$mn:00002734 _text$mn        segment para public 'CODE' use32
.text$mn:00002734                 assume cs:_text$mn
.text$mn:00002734                 ;org 2734h
.text$mn:00002734 ; COMDAT (pick any)
.text$mn:00002734                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002734
.text$mn:00002734 ; =============== S U B R O U T I N E =======================================
.text$mn:00002734
.text$mn:00002734 ; Attributes: bp-based frame
.text$mn:00002734
.text$mn:00002734 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00002734                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00002734 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00002734                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00002734
.text$mn:00002734 var_10          = dword ptr -10h
.text$mn:00002734 var_C           = dword ptr -0Ch
.text$mn:00002734 var_4           = dword ptr -4
.text$mn:00002734
.text$mn:00002734                 push    ebp
.text$mn:00002735                 mov     ebp, esp
.text$mn:00002737                 push    0FFFFFFFFh
.text$mn:00002739                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:0000273E                 mov     eax, large fs:0
.text$mn:00002744                 push    eax
.text$mn:00002745                 push    ecx
.text$mn:00002746                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000274B                 xor     eax, ebp
.text$mn:0000274D                 push    eax
.text$mn:0000274E                 lea     eax, [ebp+var_C]
.text$mn:00002751                 mov     large fs:0, eax
.text$mn:00002757                 mov     [ebp+var_10], ecx
.text$mn:0000275A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000275D                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:00002762                 mov     [ebp+var_4], 0
.text$mn:00002769                 mov     eax, [ebp+var_10]
.text$mn:0000276C                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:00002772                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002779                 mov     eax, [ebp+var_10]
.text$mn:0000277C                 mov     ecx, [ebp+var_C]
.text$mn:0000277F                 mov     large fs:0, ecx
.text$mn:00002786                 pop     ecx
.text$mn:00002787                 mov     esp, ebp
.text$mn:00002789                 pop     ebp
.text$mn:0000278A                 retn
.text$mn:0000278A ??0_System_error_category@std@@QAE@XZ endp
.text$mn:0000278A
.text$mn:0000278A ; ---------------------------------------------------------------------------
.text$mn:0000278B                 align 4
.text$mn:0000278B _text$mn        ends
.text$mn:0000278B
.text$x:0000278C ; ===========================================================================
.text$x:0000278C
.text$x:0000278C ; Segment type: Pure code
.text$x:0000278C ; Segment permissions: Read/Execute
.text$x:0000278C _text$x         segment para public 'CODE' use32
.text$x:0000278C                 assume cs:_text$x
.text$x:0000278C                 ;org 278Ch
.text$x:0000278C ; COMDAT (pick associative to section at 2734)
.text$x:0000278C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000278C
.text$x:0000278C ; =============== S U B R O U T I N E =======================================
.text$x:0000278C
.text$x:0000278C
.text$x:0000278C __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:0000278C                                         ; DATA XREF: .xdata$x:00004A50o
.text$x:0000278C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000278F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:0000278F __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:0000278F
.text$x:00002794
.text$x:00002794 ; =============== S U B R O U T I N E =======================================
.text$x:00002794
.text$x:00002794
.text$x:00002794 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:00002794                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:00002794
.text$x:00002794 arg_4           = dword ptr  8
.text$x:00002794
.text$x:00002794                 mov     edx, [esp+arg_4]
.text$x:00002798                 lea     eax, [edx+0Ch]
.text$x:0000279B                 mov     ecx, [edx-8]
.text$x:0000279E                 xor     ecx, eax
.text$x:000027A0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000027A5                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:000027AA                 jmp     ___CxxFrameHandler3
.text$x:000027AA __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:000027AA
.text$x:000027AA ; ---------------------------------------------------------------------------
.text$x:000027AF                 align 10h
.text$x:000027AF _text$x         ends
.text$x:000027AF
.text$mn:000027B0 ; ===========================================================================
.text$mn:000027B0
.text$mn:000027B0 ; Segment type: Pure code
.text$mn:000027B0 ; Segment permissions: Read/Execute
.text$mn:000027B0 _text$mn        segment para public 'CODE' use32
.text$mn:000027B0                 assume cs:_text$mn
.text$mn:000027B0                 ;org 27B0h
.text$mn:000027B0 ; COMDAT (pick any)
.text$mn:000027B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000027B0
.text$mn:000027B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000027B0
.text$mn:000027B0 ; Attributes: bp-based frame
.text$mn:000027B0
.text$mn:000027B0 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:000027B0                 public ??0error_category@std@@QAE@XZ
.text$mn:000027B0 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:000027B0
.text$mn:000027B0 var_4           = dword ptr -4
.text$mn:000027B0
.text$mn:000027B0                 push    ebp
.text$mn:000027B1                 mov     ebp, esp
.text$mn:000027B3                 push    ecx
.text$mn:000027B4                 mov     [ebp+var_4], ecx
.text$mn:000027B7                 mov     eax, [ebp+var_4]
.text$mn:000027BA                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:000027C0                 mov     eax, [ebp+var_4]
.text$mn:000027C3                 mov     esp, ebp
.text$mn:000027C5                 pop     ebp
.text$mn:000027C6                 retn
.text$mn:000027C6 ??0error_category@std@@QAE@XZ endp
.text$mn:000027C6
.text$mn:000027C6 ; ---------------------------------------------------------------------------
.text$mn:000027C7                 align 4
.text$mn:000027C7 _text$mn        ends
.text$mn:000027C7
.text$mn:000027C8 ; ===========================================================================
.text$mn:000027C8
.text$mn:000027C8 ; Segment type: Pure code
.text$mn:000027C8 ; Segment permissions: Read/Execute
.text$mn:000027C8 _text$mn        segment para public 'CODE' use32
.text$mn:000027C8                 assume cs:_text$mn
.text$mn:000027C8                 ;org 27C8h
.text$mn:000027C8 ; COMDAT (pick any)
.text$mn:000027C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000027C8
.text$mn:000027C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000027C8
.text$mn:000027C8 ; Attributes: bp-based frame
.text$mn:000027C8
.text$mn:000027C8 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:000027C8                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:000027C8 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:000027C8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:000027C8                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:000027C8
.text$mn:000027C8 var_4           = dword ptr -4
.text$mn:000027C8 arg_0           = dword ptr  8
.text$mn:000027C8 arg_4           = dword ptr  0Ch
.text$mn:000027C8
.text$mn:000027C8                 push    ebp
.text$mn:000027C9                 mov     ebp, esp
.text$mn:000027CB                 push    ecx
.text$mn:000027CC                 mov     [ebp+var_4], ecx
.text$mn:000027CF                 mov     eax, [ebp+var_4]
.text$mn:000027D2                 mov     ecx, [ebp+arg_0]
.text$mn:000027D5                 mov     [eax], ecx
.text$mn:000027D7                 mov     edx, [ebp+var_4]
.text$mn:000027DA                 mov     eax, [ebp+arg_4]
.text$mn:000027DD                 mov     [edx+4], eax
.text$mn:000027E0                 mov     eax, [ebp+var_4]
.text$mn:000027E3                 mov     esp, ebp
.text$mn:000027E5                 pop     ebp
.text$mn:000027E6                 retn    8
.text$mn:000027E6 ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:000027E6
.text$mn:000027E6 ; ---------------------------------------------------------------------------
.text$mn:000027E9                 align 4
.text$mn:000027E9 _text$mn        ends
.text$mn:000027E9
.text$mn:000027EC ; ===========================================================================
.text$mn:000027EC
.text$mn:000027EC ; Segment type: Pure code
.text$mn:000027EC ; Segment permissions: Read/Execute
.text$mn:000027EC _text$mn        segment para public 'CODE' use32
.text$mn:000027EC                 assume cs:_text$mn
.text$mn:000027EC                 ;org 27ECh
.text$mn:000027EC ; COMDAT (pick any)
.text$mn:000027EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000027EC
.text$mn:000027EC ; =============== S U B R O U T I N E =======================================
.text$mn:000027EC
.text$mn:000027EC ; Attributes: bp-based frame
.text$mn:000027EC
.text$mn:000027EC ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:000027EC                 public ??0id@locale@std@@QAE@I@Z
.text$mn:000027EC ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:000027EC                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:000027EC
.text$mn:000027EC var_4           = dword ptr -4
.text$mn:000027EC arg_0           = dword ptr  8
.text$mn:000027EC
.text$mn:000027EC                 push    ebp
.text$mn:000027ED                 mov     ebp, esp
.text$mn:000027EF                 push    ecx
.text$mn:000027F0                 mov     [ebp+var_4], ecx
.text$mn:000027F3                 mov     eax, [ebp+var_4]
.text$mn:000027F6                 mov     ecx, [ebp+arg_0]
.text$mn:000027F9                 mov     [eax], ecx
.text$mn:000027FB                 mov     eax, [ebp+var_4]
.text$mn:000027FE                 mov     esp, ebp
.text$mn:00002800                 pop     ebp
.text$mn:00002801                 retn    4
.text$mn:00002801 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00002801
.text$mn:00002801 _text$mn        ends
.text$mn:00002801
.text$mn:00002804 ; ===========================================================================
.text$mn:00002804
.text$mn:00002804 ; Segment type: Pure code
.text$mn:00002804 ; Segment permissions: Read/Execute
.text$mn:00002804 _text$mn        segment para public 'CODE' use32
.text$mn:00002804                 assume cs:_text$mn
.text$mn:00002804                 ;org 2804h
.text$mn:00002804 ; COMDAT (pick any)
.text$mn:00002804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002804
.text$mn:00002804 ; =============== S U B R O U T I N E =======================================
.text$mn:00002804
.text$mn:00002804 ; Attributes: bp-based frame
.text$mn:00002804
.text$mn:00002804 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00002804                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00002804 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00002804                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00002804                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:00002804
.text$mn:00002804 var_10          = dword ptr -10h
.text$mn:00002804 var_C           = dword ptr -0Ch
.text$mn:00002804 var_4           = dword ptr -4
.text$mn:00002804
.text$mn:00002804                 push    ebp
.text$mn:00002805                 mov     ebp, esp
.text$mn:00002807                 push    0FFFFFFFFh
.text$mn:00002809                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:0000280E                 mov     eax, large fs:0
.text$mn:00002814                 push    eax
.text$mn:00002815                 push    ecx
.text$mn:00002816                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000281B                 xor     eax, ebp
.text$mn:0000281D                 push    eax
.text$mn:0000281E                 lea     eax, [ebp+var_C]
.text$mn:00002821                 mov     large fs:0, eax
.text$mn:00002827                 mov     [ebp+var_10], ecx
.text$mn:0000282A                 mov     [ebp+var_4], 0
.text$mn:00002831                 mov     ecx, [ebp+var_10]
.text$mn:00002834                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:00002839                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002840                 mov     ecx, [ebp+var_10]
.text$mn:00002843                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:00002848                 mov     ecx, [ebp+var_C]
.text$mn:0000284B                 mov     large fs:0, ecx
.text$mn:00002852                 pop     ecx
.text$mn:00002853                 mov     esp, ebp
.text$mn:00002855                 pop     ebp
.text$mn:00002856                 retn
.text$mn:00002856 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00002856
.text$mn:00002856 ; ---------------------------------------------------------------------------
.text$mn:00002857                 align 4
.text$mn:00002857 _text$mn        ends
.text$mn:00002857
.text$x:00002858 ; ===========================================================================
.text$x:00002858
.text$x:00002858 ; Segment type: Pure code
.text$x:00002858 ; Segment permissions: Read/Execute
.text$x:00002858 _text$x         segment para public 'CODE' use32
.text$x:00002858                 assume cs:_text$x
.text$x:00002858                 ;org 2858h
.text$x:00002858 ; COMDAT (pick associative to section at 2804)
.text$x:00002858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002858
.text$x:00002858 ; =============== S U B R O U T I N E =======================================
.text$x:00002858
.text$x:00002858
.text$x:00002858 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00002858                                         ; DATA XREF: .xdata$x:00004838o
.text$x:00002858                 mov     ecx, [ebp-10h]
.text$x:0000285B                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:0000285B __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000285B
.text$x:00002860
.text$x:00002860 ; =============== S U B R O U T I N E =======================================
.text$x:00002860
.text$x:00002860
.text$x:00002860 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:00002860                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:00002860
.text$x:00002860 arg_4           = dword ptr  8
.text$x:00002860
.text$x:00002860                 mov     edx, [esp+arg_4]
.text$x:00002864                 lea     eax, [edx+0Ch]
.text$x:00002867                 mov     ecx, [edx-8]
.text$x:0000286A                 xor     ecx, eax
.text$x:0000286C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002871                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:00002876                 jmp     ___CxxFrameHandler3
.text$x:00002876 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00002876
.text$x:00002876 ; ---------------------------------------------------------------------------
.text$x:0000287B                 align 4
.text$x:0000287B _text$x         ends
.text$x:0000287B
.text$mn:0000287C ; ===========================================================================
.text$mn:0000287C
.text$mn:0000287C ; Segment type: Pure code
.text$mn:0000287C ; Segment permissions: Read/Execute
.text$mn:0000287C _text$mn        segment para public 'CODE' use32
.text$mn:0000287C                 assume cs:_text$mn
.text$mn:0000287C                 ;org 287Ch
.text$mn:0000287C ; COMDAT (pick any)
.text$mn:0000287C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000287C
.text$mn:0000287C ; =============== S U B R O U T I N E =======================================
.text$mn:0000287C
.text$mn:0000287C ; Attributes: bp-based frame
.text$mn:0000287C
.text$mn:0000287C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:0000287C                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000287C ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000287C                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0+3j
.text$mn:0000287C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+43p ...
.text$mn:0000287C
.text$mn:0000287C var_10          = dword ptr -10h
.text$mn:0000287C var_C           = dword ptr -0Ch
.text$mn:0000287C var_4           = dword ptr -4
.text$mn:0000287C
.text$mn:0000287C                 push    ebp
.text$mn:0000287D                 mov     ebp, esp
.text$mn:0000287F                 push    0FFFFFFFFh
.text$mn:00002881                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00002886                 mov     eax, large fs:0
.text$mn:0000288C                 push    eax
.text$mn:0000288D                 push    ecx
.text$mn:0000288E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002893                 xor     eax, ebp
.text$mn:00002895                 push    eax
.text$mn:00002896                 lea     eax, [ebp+var_C]
.text$mn:00002899                 mov     large fs:0, eax
.text$mn:0000289F                 mov     [ebp+var_10], ecx
.text$mn:000028A2                 mov     [ebp+var_4], 0
.text$mn:000028A9                 mov     ecx, [ebp+var_10]
.text$mn:000028AC                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:000028B1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000028B8                 mov     ecx, [ebp+var_10]
.text$mn:000028BB                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:000028C0                 mov     ecx, [ebp+var_C]
.text$mn:000028C3                 mov     large fs:0, ecx
.text$mn:000028CA                 pop     ecx
.text$mn:000028CB                 mov     esp, ebp
.text$mn:000028CD                 pop     ebp
.text$mn:000028CE                 retn
.text$mn:000028CE ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:000028CE
.text$mn:000028CE ; ---------------------------------------------------------------------------
.text$mn:000028CF                 align 10h
.text$mn:000028CF _text$mn        ends
.text$mn:000028CF
.text$x:000028D0 ; ===========================================================================
.text$x:000028D0
.text$x:000028D0 ; Segment type: Pure code
.text$x:000028D0 ; Segment permissions: Read/Execute
.text$x:000028D0 _text$x         segment para public 'CODE' use32
.text$x:000028D0                 assume cs:_text$x
.text$x:000028D0                 ;org 28D0h
.text$x:000028D0 ; COMDAT (pick associative to section at 287C)
.text$x:000028D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000028D0
.text$x:000028D0 ; =============== S U B R O U T I N E =======================================
.text$x:000028D0
.text$x:000028D0
.text$x:000028D0 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000028D0                                         ; DATA XREF: .xdata$x:00004B58o
.text$x:000028D0                 mov     ecx, [ebp-10h]
.text$x:000028D3                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:000028D3 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000028D3
.text$x:000028D8
.text$x:000028D8 ; =============== S U B R O U T I N E =======================================
.text$x:000028D8
.text$x:000028D8
.text$x:000028D8 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000028D8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:000028D8
.text$x:000028D8 arg_4           = dword ptr  8
.text$x:000028D8
.text$x:000028D8                 mov     edx, [esp+arg_4]
.text$x:000028DC                 lea     eax, [edx+0Ch]
.text$x:000028DF                 mov     ecx, [edx-8]
.text$x:000028E2                 xor     ecx, eax
.text$x:000028E4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000028E9                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:000028EE                 jmp     ___CxxFrameHandler3
.text$x:000028EE __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000028EE
.text$x:000028EE ; ---------------------------------------------------------------------------
.text$x:000028F3                 align 4
.text$x:000028F3 _text$x         ends
.text$x:000028F3
.text$mn:000028F4 ; ===========================================================================
.text$mn:000028F4
.text$mn:000028F4 ; Segment type: Pure code
.text$mn:000028F4 ; Segment permissions: Read/Execute
.text$mn:000028F4 _text$mn        segment para public 'CODE' use32
.text$mn:000028F4                 assume cs:_text$mn
.text$mn:000028F4                 ;org 28F4h
.text$mn:000028F4 ; COMDAT (pick any)
.text$mn:000028F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000028F4
.text$mn:000028F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000028F4
.text$mn:000028F4 ; Attributes: bp-based frame
.text$mn:000028F4
.text$mn:000028F4 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000028F4                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000028F4 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000028F4                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:000028F4                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:000028F4
.text$mn:000028F4 var_10          = dword ptr -10h
.text$mn:000028F4 var_C           = dword ptr -0Ch
.text$mn:000028F4 var_4           = dword ptr -4
.text$mn:000028F4
.text$mn:000028F4                 push    ebp
.text$mn:000028F5                 mov     ebp, esp
.text$mn:000028F7                 push    0FFFFFFFFh
.text$mn:000028F9                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000028FE                 mov     eax, large fs:0
.text$mn:00002904                 push    eax
.text$mn:00002905                 push    ecx
.text$mn:00002906                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000290B                 xor     eax, ebp
.text$mn:0000290D                 push    eax
.text$mn:0000290E                 lea     eax, [ebp+var_C]
.text$mn:00002911                 mov     large fs:0, eax
.text$mn:00002917                 mov     [ebp+var_10], ecx
.text$mn:0000291A                 mov     [ebp+var_4], 0
.text$mn:00002921                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002928                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000292B                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00002930                 mov     ecx, [ebp+var_C]
.text$mn:00002933                 mov     large fs:0, ecx
.text$mn:0000293A                 pop     ecx
.text$mn:0000293B                 mov     esp, ebp
.text$mn:0000293D                 pop     ebp
.text$mn:0000293E                 retn
.text$mn:0000293E ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:0000293E
.text$mn:0000293E ; ---------------------------------------------------------------------------
.text$mn:0000293F                 align 10h
.text$mn:0000293F _text$mn        ends
.text$mn:0000293F
.text$x:00002940 ; ===========================================================================
.text$x:00002940
.text$x:00002940 ; Segment type: Pure code
.text$x:00002940 ; Segment permissions: Read/Execute
.text$x:00002940 _text$x         segment para public 'CODE' use32
.text$x:00002940                 assume cs:_text$x
.text$x:00002940                 ;org 2940h
.text$x:00002940 ; COMDAT (pick associative to section at 28F4)
.text$x:00002940                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002940
.text$x:00002940 ; =============== S U B R O U T I N E =======================================
.text$x:00002940
.text$x:00002940
.text$x:00002940 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00002940                                         ; DATA XREF: .xdata$x:000047E0o
.text$x:00002940                 mov     ecx, [ebp-10h]  ; this
.text$x:00002943                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00002943 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00002943
.text$x:00002948
.text$x:00002948 ; =============== S U B R O U T I N E =======================================
.text$x:00002948
.text$x:00002948
.text$x:00002948 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00002948                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00002948
.text$x:00002948 arg_4           = dword ptr  8
.text$x:00002948
.text$x:00002948                 mov     edx, [esp+arg_4]
.text$x:0000294C                 lea     eax, [edx+0Ch]
.text$x:0000294F                 mov     ecx, [edx-8]
.text$x:00002952                 xor     ecx, eax
.text$x:00002954                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002959                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:0000295E                 jmp     ___CxxFrameHandler3
.text$x:0000295E __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:0000295E
.text$x:0000295E ; ---------------------------------------------------------------------------
.text$x:00002963                 align 4
.text$x:00002963 _text$x         ends
.text$x:00002963
.text$mn:00002964 ; ===========================================================================
.text$mn:00002964
.text$mn:00002964 ; Segment type: Pure code
.text$mn:00002964 ; Segment permissions: Read/Execute
.text$mn:00002964 _text$mn        segment para public 'CODE' use32
.text$mn:00002964                 assume cs:_text$mn
.text$mn:00002964                 ;org 2964h
.text$mn:00002964 ; COMDAT (pick any)
.text$mn:00002964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002964
.text$mn:00002964 ; =============== S U B R O U T I N E =======================================
.text$mn:00002964
.text$mn:00002964 ; Attributes: bp-based frame
.text$mn:00002964
.text$mn:00002964 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00002964                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00002964 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00002964                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:00002964                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:00002964
.text$mn:00002964 var_10          = dword ptr -10h
.text$mn:00002964 var_C           = dword ptr -0Ch
.text$mn:00002964 var_4           = dword ptr -4
.text$mn:00002964
.text$mn:00002964                 push    ebp
.text$mn:00002965                 mov     ebp, esp
.text$mn:00002967                 push    0FFFFFFFFh
.text$mn:00002969                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000296E                 mov     eax, large fs:0
.text$mn:00002974                 push    eax
.text$mn:00002975                 push    ecx
.text$mn:00002976                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000297B                 xor     eax, ebp
.text$mn:0000297D                 push    eax
.text$mn:0000297E                 lea     eax, [ebp+var_C]
.text$mn:00002981                 mov     large fs:0, eax
.text$mn:00002987                 mov     [ebp+var_10], ecx
.text$mn:0000298A                 mov     [ebp+var_4], 0
.text$mn:00002991                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002998                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000299B                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000029A0                 mov     ecx, [ebp+var_C]
.text$mn:000029A3                 mov     large fs:0, ecx
.text$mn:000029AA                 pop     ecx
.text$mn:000029AB                 mov     esp, ebp
.text$mn:000029AD                 pop     ebp
.text$mn:000029AE                 retn
.text$mn:000029AE ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:000029AE
.text$mn:000029AE ; ---------------------------------------------------------------------------
.text$mn:000029AF                 align 10h
.text$mn:000029AF _text$mn        ends
.text$mn:000029AF
.text$x:000029B0 ; ===========================================================================
.text$x:000029B0
.text$x:000029B0 ; Segment type: Pure code
.text$x:000029B0 ; Segment permissions: Read/Execute
.text$x:000029B0 _text$x         segment para public 'CODE' use32
.text$x:000029B0                 assume cs:_text$x
.text$x:000029B0                 ;org 29B0h
.text$x:000029B0 ; COMDAT (pick associative to section at 2964)
.text$x:000029B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000029B0
.text$x:000029B0 ; =============== S U B R O U T I N E =======================================
.text$x:000029B0
.text$x:000029B0
.text$x:000029B0 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:000029B0                                         ; DATA XREF: .xdata$x:00004B00o
.text$x:000029B0                 mov     ecx, [ebp-10h]  ; this
.text$x:000029B3                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000029B3 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:000029B3
.text$x:000029B8
.text$x:000029B8 ; =============== S U B R O U T I N E =======================================
.text$x:000029B8
.text$x:000029B8
.text$x:000029B8 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:000029B8                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:000029B8
.text$x:000029B8 arg_4           = dword ptr  8
.text$x:000029B8
.text$x:000029B8                 mov     edx, [esp+arg_4]
.text$x:000029BC                 lea     eax, [edx+0Ch]
.text$x:000029BF                 mov     ecx, [edx-8]
.text$x:000029C2                 xor     ecx, eax
.text$x:000029C4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000029C9                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:000029CE                 jmp     ___CxxFrameHandler3
.text$x:000029CE __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:000029CE
.text$x:000029CE ; ---------------------------------------------------------------------------
.text$x:000029D3                 align 4
.text$x:000029D3 _text$x         ends
.text$x:000029D3
.text$mn:000029D4 ; ===========================================================================
.text$mn:000029D4
.text$mn:000029D4 ; Segment type: Pure code
.text$mn:000029D4 ; Segment permissions: Read/Execute
.text$mn:000029D4 _text$mn        segment para public 'CODE' use32
.text$mn:000029D4                 assume cs:_text$mn
.text$mn:000029D4                 ;org 29D4h
.text$mn:000029D4 ; COMDAT (pick any)
.text$mn:000029D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000029D4
.text$mn:000029D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000029D4
.text$mn:000029D4 ; Attributes: bp-based frame
.text$mn:000029D4
.text$mn:000029D4 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:000029D4                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000029D4 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:000029D4                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:000029D4                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:000029D4
.text$mn:000029D4 var_10          = dword ptr -10h
.text$mn:000029D4 var_C           = dword ptr -0Ch
.text$mn:000029D4 var_4           = dword ptr -4
.text$mn:000029D4
.text$mn:000029D4                 push    ebp
.text$mn:000029D5                 mov     ebp, esp
.text$mn:000029D7                 push    0FFFFFFFFh
.text$mn:000029D9                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:000029DE                 mov     eax, large fs:0
.text$mn:000029E4                 push    eax
.text$mn:000029E5                 push    ecx
.text$mn:000029E6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000029EB                 xor     eax, ebp
.text$mn:000029ED                 push    eax
.text$mn:000029EE                 lea     eax, [ebp+var_C]
.text$mn:000029F1                 mov     large fs:0, eax
.text$mn:000029F7                 mov     [ebp+var_10], ecx
.text$mn:000029FA                 mov     [ebp+var_4], 0
.text$mn:00002A01                 push    0               ; Size
.text$mn:00002A03                 push    1               ; char
.text$mn:00002A05                 mov     ecx, [ebp+var_10]
.text$mn:00002A08                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00002A0D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002A14                 mov     ecx, [ebp+var_10]
.text$mn:00002A17                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:00002A1C                 mov     ecx, [ebp+var_C]
.text$mn:00002A1F                 mov     large fs:0, ecx
.text$mn:00002A26                 pop     ecx
.text$mn:00002A27                 mov     esp, ebp
.text$mn:00002A29                 pop     ebp
.text$mn:00002A2A                 retn
.text$mn:00002A2A ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:00002A2A
.text$mn:00002A2A ; ---------------------------------------------------------------------------
.text$mn:00002A2B                 align 4
.text$mn:00002A2B _text$mn        ends
.text$mn:00002A2B
.text$x:00002A2C ; ===========================================================================
.text$x:00002A2C
.text$x:00002A2C ; Segment type: Pure code
.text$x:00002A2C ; Segment permissions: Read/Execute
.text$x:00002A2C _text$x         segment para public 'CODE' use32
.text$x:00002A2C                 assume cs:_text$x
.text$x:00002A2C                 ;org 2A2Ch
.text$x:00002A2C ; COMDAT (pick associative to section at 29D4)
.text$x:00002A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002A2C
.text$x:00002A2C ; =============== S U B R O U T I N E =======================================
.text$x:00002A2C
.text$x:00002A2C
.text$x:00002A2C __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00002A2C                                         ; DATA XREF: .xdata$x:00004890o
.text$x:00002A2C                 mov     ecx, [ebp-10h]
.text$x:00002A2F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00002A2F __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:00002A2F
.text$x:00002A34
.text$x:00002A34 ; =============== S U B R O U T I N E =======================================
.text$x:00002A34
.text$x:00002A34
.text$x:00002A34 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00002A34                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00002A34
.text$x:00002A34 arg_4           = dword ptr  8
.text$x:00002A34
.text$x:00002A34                 mov     edx, [esp+arg_4]
.text$x:00002A38                 lea     eax, [edx+0Ch]
.text$x:00002A3B                 mov     ecx, [edx-8]
.text$x:00002A3E                 xor     ecx, eax
.text$x:00002A40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002A45                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00002A4A                 jmp     ___CxxFrameHandler3
.text$x:00002A4A __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00002A4A
.text$x:00002A4A ; ---------------------------------------------------------------------------
.text$x:00002A4F                 align 10h
.text$x:00002A4F _text$x         ends
.text$x:00002A4F
.text$mn:00002A50 ; ===========================================================================
.text$mn:00002A50
.text$mn:00002A50 ; Segment type: Pure code
.text$mn:00002A50 ; Segment permissions: Read/Execute
.text$mn:00002A50 _text$mn        segment para public 'CODE' use32
.text$mn:00002A50                 assume cs:_text$mn
.text$mn:00002A50                 ;org 2A50h
.text$mn:00002A50 ; COMDAT (pick any)
.text$mn:00002A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002A50
.text$mn:00002A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00002A50
.text$mn:00002A50 ; Attributes: bp-based frame
.text$mn:00002A50
.text$mn:00002A50 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00002A50                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00002A50 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00002A50                                         ; CODE XREF: RegExtDlg::writeNppPath(void)+299p
.text$mn:00002A50                                         ; __unwindfunclet$?writeNppPath@RegExtDlg@@AAEXXZ$0+6j
.text$mn:00002A50
.text$mn:00002A50 var_10          = dword ptr -10h
.text$mn:00002A50 var_C           = dword ptr -0Ch
.text$mn:00002A50 var_4           = dword ptr -4
.text$mn:00002A50
.text$mn:00002A50                 push    ebp
.text$mn:00002A51                 mov     ebp, esp
.text$mn:00002A53                 push    0FFFFFFFFh
.text$mn:00002A55                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00002A5A                 mov     eax, large fs:0
.text$mn:00002A60                 push    eax
.text$mn:00002A61                 push    ecx
.text$mn:00002A62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002A67                 xor     eax, ebp
.text$mn:00002A69                 push    eax
.text$mn:00002A6A                 lea     eax, [ebp+var_C]
.text$mn:00002A6D                 mov     large fs:0, eax
.text$mn:00002A73                 mov     [ebp+var_10], ecx
.text$mn:00002A76                 mov     [ebp+var_4], 0
.text$mn:00002A7D                 push    0
.text$mn:00002A7F                 push    1
.text$mn:00002A81                 mov     ecx, [ebp+var_10]
.text$mn:00002A84                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00002A89                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002A90                 mov     ecx, [ebp+var_10]
.text$mn:00002A93                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00002A98                 mov     ecx, [ebp+var_C]
.text$mn:00002A9B                 mov     large fs:0, ecx
.text$mn:00002AA2                 pop     ecx
.text$mn:00002AA3                 mov     esp, ebp
.text$mn:00002AA5                 pop     ebp
.text$mn:00002AA6                 retn
.text$mn:00002AA6 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00002AA6
.text$mn:00002AA6 ; ---------------------------------------------------------------------------
.text$mn:00002AA7                 align 4
.text$mn:00002AA7 _text$mn        ends
.text$mn:00002AA7
.text$x:00002AA8 ; ===========================================================================
.text$x:00002AA8
.text$x:00002AA8 ; Segment type: Pure code
.text$x:00002AA8 ; Segment permissions: Read/Execute
.text$x:00002AA8 _text$x         segment para public 'CODE' use32
.text$x:00002AA8                 assume cs:_text$x
.text$x:00002AA8                 ;org 2AA8h
.text$x:00002AA8 ; COMDAT (pick associative to section at 2A50)
.text$x:00002AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002AA8
.text$x:00002AA8 ; =============== S U B R O U T I N E =======================================
.text$x:00002AA8
.text$x:00002AA8
.text$x:00002AA8 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00002AA8                                         ; DATA XREF: .xdata$x:00004BB0o
.text$x:00002AA8                 mov     ecx, [ebp-10h]
.text$x:00002AAB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00002AAB __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00002AAB
.text$x:00002AB0
.text$x:00002AB0 ; =============== S U B R O U T I N E =======================================
.text$x:00002AB0
.text$x:00002AB0
.text$x:00002AB0 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00002AB0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00002AB0
.text$x:00002AB0 arg_4           = dword ptr  8
.text$x:00002AB0
.text$x:00002AB0                 mov     edx, [esp+arg_4]
.text$x:00002AB4                 lea     eax, [edx+0Ch]
.text$x:00002AB7                 mov     ecx, [edx-8]
.text$x:00002ABA                 xor     ecx, eax
.text$x:00002ABC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002AC1                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00002AC6                 jmp     ___CxxFrameHandler3
.text$x:00002AC6 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00002AC6
.text$x:00002AC6 ; ---------------------------------------------------------------------------
.text$x:00002ACB                 align 4
.text$x:00002ACB _text$x         ends
.text$x:00002ACB
.text$mn:00002ACC ; ===========================================================================
.text$mn:00002ACC
.text$mn:00002ACC ; Segment type: Pure code
.text$mn:00002ACC ; Segment permissions: Read/Execute
.text$mn:00002ACC _text$mn        segment para public 'CODE' use32
.text$mn:00002ACC                 assume cs:_text$mn
.text$mn:00002ACC                 ;org 2ACCh
.text$mn:00002ACC ; COMDAT (pick any)
.text$mn:00002ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002ACC
.text$mn:00002ACC ; =============== S U B R O U T I N E =======================================
.text$mn:00002ACC
.text$mn:00002ACC ; Attributes: bp-based frame
.text$mn:00002ACC
.text$mn:00002ACC ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00002ACC                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00002ACC ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00002ACC                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00002ACC                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00002ACC
.text$mn:00002ACC var_4           = dword ptr -4
.text$mn:00002ACC
.text$mn:00002ACC                 push    ebp
.text$mn:00002ACD                 mov     ebp, esp
.text$mn:00002ACF                 push    ecx
.text$mn:00002AD0                 mov     [ebp+var_4], ecx
.text$mn:00002AD3                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002AD6                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00002ADB                 mov     esp, ebp
.text$mn:00002ADD                 pop     ebp
.text$mn:00002ADE                 retn
.text$mn:00002ADE ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00002ADE
.text$mn:00002ADE ; ---------------------------------------------------------------------------
.text$mn:00002ADF                 align 10h
.text$mn:00002ADF _text$mn        ends
.text$mn:00002ADF
.text$mn:00002AE0 ; ===========================================================================
.text$mn:00002AE0
.text$mn:00002AE0 ; Segment type: Pure code
.text$mn:00002AE0 ; Segment permissions: Read/Execute
.text$mn:00002AE0 _text$mn        segment para public 'CODE' use32
.text$mn:00002AE0                 assume cs:_text$mn
.text$mn:00002AE0                 ;org 2AE0h
.text$mn:00002AE0 ; COMDAT (pick any)
.text$mn:00002AE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002AE0
.text$mn:00002AE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00002AE0
.text$mn:00002AE0 ; Attributes: bp-based frame
.text$mn:00002AE0
.text$mn:00002AE0 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00002AE0                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00002AE0 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00002AE0                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00002AE0                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00002AE0
.text$mn:00002AE0 var_10          = dword ptr -10h
.text$mn:00002AE0 var_C           = dword ptr -0Ch
.text$mn:00002AE0 var_4           = dword ptr -4
.text$mn:00002AE0
.text$mn:00002AE0                 push    ebp
.text$mn:00002AE1                 mov     ebp, esp
.text$mn:00002AE3                 push    0FFFFFFFFh
.text$mn:00002AE5                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00002AEA                 mov     eax, large fs:0
.text$mn:00002AF0                 push    eax
.text$mn:00002AF1                 push    ecx
.text$mn:00002AF2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002AF7                 xor     eax, ebp
.text$mn:00002AF9                 push    eax
.text$mn:00002AFA                 lea     eax, [ebp+var_C]
.text$mn:00002AFD                 mov     large fs:0, eax
.text$mn:00002B03                 mov     [ebp+var_10], ecx
.text$mn:00002B06                 mov     [ebp+var_4], 0
.text$mn:00002B0D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002B14                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002B17                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00002B1C                 mov     ecx, [ebp+var_C]
.text$mn:00002B1F                 mov     large fs:0, ecx
.text$mn:00002B26                 pop     ecx
.text$mn:00002B27                 mov     esp, ebp
.text$mn:00002B29                 pop     ebp
.text$mn:00002B2A                 retn
.text$mn:00002B2A ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00002B2A
.text$mn:00002B2A ; ---------------------------------------------------------------------------
.text$mn:00002B2B                 align 4
.text$mn:00002B2B _text$mn        ends
.text$mn:00002B2B
.text$x:00002B2C ; ===========================================================================
.text$x:00002B2C
.text$x:00002B2C ; Segment type: Pure code
.text$x:00002B2C ; Segment permissions: Read/Execute
.text$x:00002B2C _text$x         segment para public 'CODE' use32
.text$x:00002B2C                 assume cs:_text$x
.text$x:00002B2C                 ;org 2B2Ch
.text$x:00002B2C ; COMDAT (pick associative to section at 2AE0)
.text$x:00002B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002B2C
.text$x:00002B2C ; =============== S U B R O U T I N E =======================================
.text$x:00002B2C
.text$x:00002B2C
.text$x:00002B2C __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00002B2C                                         ; DATA XREF: .xdata$x:000049A0o
.text$x:00002B2C                 mov     ecx, [ebp-10h]  ; this
.text$x:00002B2F                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00002B2F __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00002B2F
.text$x:00002B34
.text$x:00002B34 ; =============== S U B R O U T I N E =======================================
.text$x:00002B34
.text$x:00002B34
.text$x:00002B34 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00002B34                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00002B34
.text$x:00002B34 arg_4           = dword ptr  8
.text$x:00002B34
.text$x:00002B34                 mov     edx, [esp+arg_4]
.text$x:00002B38                 lea     eax, [edx+0Ch]
.text$x:00002B3B                 mov     ecx, [edx-8]
.text$x:00002B3E                 xor     ecx, eax
.text$x:00002B40                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002B45                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00002B4A                 jmp     ___CxxFrameHandler3
.text$x:00002B4A __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00002B4A
.text$x:00002B4A ; ---------------------------------------------------------------------------
.text$x:00002B4F                 align 10h
.text$x:00002B4F _text$x         ends
.text$x:00002B4F
.text$mn:00002B50 ; ===========================================================================
.text$mn:00002B50
.text$mn:00002B50 ; Segment type: Pure code
.text$mn:00002B50 ; Segment permissions: Read/Execute
.text$mn:00002B50 _text$mn        segment para public 'CODE' use32
.text$mn:00002B50                 assume cs:_text$mn
.text$mn:00002B50                 ;org 2B50h
.text$mn:00002B50 ; COMDAT (pick any)
.text$mn:00002B50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002B50
.text$mn:00002B50 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B50
.text$mn:00002B50 ; Attributes: bp-based frame
.text$mn:00002B50
.text$mn:00002B50 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00002B50                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00002B50 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00002B50                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00002B50                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00002B50
.text$mn:00002B50 var_10          = dword ptr -10h
.text$mn:00002B50 var_C           = dword ptr -0Ch
.text$mn:00002B50 var_4           = dword ptr -4
.text$mn:00002B50
.text$mn:00002B50                 push    ebp
.text$mn:00002B51                 mov     ebp, esp
.text$mn:00002B53                 push    0FFFFFFFFh
.text$mn:00002B55                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00002B5A                 mov     eax, large fs:0
.text$mn:00002B60                 push    eax
.text$mn:00002B61                 push    ecx
.text$mn:00002B62                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002B67                 xor     eax, ebp
.text$mn:00002B69                 push    eax
.text$mn:00002B6A                 lea     eax, [ebp+var_C]
.text$mn:00002B6D                 mov     large fs:0, eax
.text$mn:00002B73                 mov     [ebp+var_10], ecx
.text$mn:00002B76                 mov     [ebp+var_4], 0
.text$mn:00002B7D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002B84                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002B87                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00002B8C                 mov     ecx, [ebp+var_C]
.text$mn:00002B8F                 mov     large fs:0, ecx
.text$mn:00002B96                 pop     ecx
.text$mn:00002B97                 mov     esp, ebp
.text$mn:00002B99                 pop     ebp
.text$mn:00002B9A                 retn
.text$mn:00002B9A ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00002B9A
.text$mn:00002B9A ; ---------------------------------------------------------------------------
.text$mn:00002B9B                 align 4
.text$mn:00002B9B _text$mn        ends
.text$mn:00002B9B
.text$x:00002B9C ; ===========================================================================
.text$x:00002B9C
.text$x:00002B9C ; Segment type: Pure code
.text$x:00002B9C ; Segment permissions: Read/Execute
.text$x:00002B9C _text$x         segment para public 'CODE' use32
.text$x:00002B9C                 assume cs:_text$x
.text$x:00002B9C                 ;org 2B9Ch
.text$x:00002B9C ; COMDAT (pick associative to section at 2B50)
.text$x:00002B9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002B9C
.text$x:00002B9C ; =============== S U B R O U T I N E =======================================
.text$x:00002B9C
.text$x:00002B9C
.text$x:00002B9C __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00002B9C                                         ; DATA XREF: .xdata$x:00004A24o
.text$x:00002B9C                 mov     ecx, [ebp-10h]  ; this
.text$x:00002B9F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00002B9F __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00002B9F
.text$x:00002BA4
.text$x:00002BA4 ; =============== S U B R O U T I N E =======================================
.text$x:00002BA4
.text$x:00002BA4
.text$x:00002BA4 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00002BA4                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00002BA4
.text$x:00002BA4 arg_4           = dword ptr  8
.text$x:00002BA4
.text$x:00002BA4                 mov     edx, [esp+arg_4]
.text$x:00002BA8                 lea     eax, [edx+0Ch]
.text$x:00002BAB                 mov     ecx, [edx-8]
.text$x:00002BAE                 xor     ecx, eax
.text$x:00002BB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002BB5                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00002BBA                 jmp     ___CxxFrameHandler3
.text$x:00002BBA __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00002BBA
.text$x:00002BBA ; ---------------------------------------------------------------------------
.text$x:00002BBF                 align 10h
.text$x:00002BBF _text$x         ends
.text$x:00002BBF
.text$mn:00002BC0 ; ===========================================================================
.text$mn:00002BC0
.text$mn:00002BC0 ; Segment type: Pure code
.text$mn:00002BC0 ; Segment permissions: Read/Execute
.text$mn:00002BC0 _text$mn        segment para public 'CODE' use32
.text$mn:00002BC0                 assume cs:_text$mn
.text$mn:00002BC0                 ;org 2BC0h
.text$mn:00002BC0 ; COMDAT (pick any)
.text$mn:00002BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002BC0
.text$mn:00002BC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BC0
.text$mn:00002BC0 ; Attributes: bp-based frame
.text$mn:00002BC0
.text$mn:00002BC0 ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00002BC0                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00002BC0 ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00002BC0                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00002BC0                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00002BC0
.text$mn:00002BC0 var_10          = dword ptr -10h
.text$mn:00002BC0 var_C           = dword ptr -0Ch
.text$mn:00002BC0 var_4           = dword ptr -4
.text$mn:00002BC0
.text$mn:00002BC0                 push    ebp
.text$mn:00002BC1                 mov     ebp, esp
.text$mn:00002BC3                 push    0FFFFFFFFh
.text$mn:00002BC5                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00002BCA                 mov     eax, large fs:0
.text$mn:00002BD0                 push    eax
.text$mn:00002BD1                 push    ecx
.text$mn:00002BD2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002BD7                 xor     eax, ebp
.text$mn:00002BD9                 push    eax
.text$mn:00002BDA                 lea     eax, [ebp+var_C]
.text$mn:00002BDD                 mov     large fs:0, eax
.text$mn:00002BE3                 mov     [ebp+var_10], ecx
.text$mn:00002BE6                 mov     [ebp+var_4], 0
.text$mn:00002BED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002BF4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002BF7                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00002BFC                 mov     ecx, [ebp+var_C]
.text$mn:00002BFF                 mov     large fs:0, ecx
.text$mn:00002C06                 pop     ecx
.text$mn:00002C07                 mov     esp, ebp
.text$mn:00002C09                 pop     ebp
.text$mn:00002C0A                 retn
.text$mn:00002C0A ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00002C0A
.text$mn:00002C0A ; ---------------------------------------------------------------------------
.text$mn:00002C0B                 align 4
.text$mn:00002C0B _text$mn        ends
.text$mn:00002C0B
.text$x:00002C0C ; ===========================================================================
.text$x:00002C0C
.text$x:00002C0C ; Segment type: Pure code
.text$x:00002C0C ; Segment permissions: Read/Execute
.text$x:00002C0C _text$x         segment para public 'CODE' use32
.text$x:00002C0C                 assume cs:_text$x
.text$x:00002C0C                 ;org 2C0Ch
.text$x:00002C0C ; COMDAT (pick associative to section at 2BC0)
.text$x:00002C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002C0C
.text$x:00002C0C ; =============== S U B R O U T I N E =======================================
.text$x:00002C0C
.text$x:00002C0C
.text$x:00002C0C __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00002C0C                                         ; DATA XREF: .xdata$x:00004AA8o
.text$x:00002C0C                 mov     ecx, [ebp-10h]  ; this
.text$x:00002C0F                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00002C0F __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:00002C0F
.text$x:00002C14
.text$x:00002C14 ; =============== S U B R O U T I N E =======================================
.text$x:00002C14
.text$x:00002C14
.text$x:00002C14 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00002C14                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00002C14
.text$x:00002C14 arg_4           = dword ptr  8
.text$x:00002C14
.text$x:00002C14                 mov     edx, [esp+arg_4]
.text$x:00002C18                 lea     eax, [edx+0Ch]
.text$x:00002C1B                 mov     ecx, [edx-8]
.text$x:00002C1E                 xor     ecx, eax
.text$x:00002C20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002C25                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00002C2A                 jmp     ___CxxFrameHandler3
.text$x:00002C2A __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00002C2A
.text$x:00002C2A ; ---------------------------------------------------------------------------
.text$x:00002C2F                 align 10h
.text$x:00002C2F _text$x         ends
.text$x:00002C2F
.text$mn:00002C30 ; ===========================================================================
.text$mn:00002C30
.text$mn:00002C30 ; Segment type: Pure code
.text$mn:00002C30 ; Segment permissions: Read/Execute
.text$mn:00002C30 _text$mn        segment para public 'CODE' use32
.text$mn:00002C30                 assume cs:_text$mn
.text$mn:00002C30                 ;org 2C30h
.text$mn:00002C30 ; COMDAT (pick any)
.text$mn:00002C30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C30
.text$mn:00002C30 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C30
.text$mn:00002C30 ; Attributes: bp-based frame
.text$mn:00002C30
.text$mn:00002C30 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00002C30                 public ??1error_category@std@@UAE@XZ
.text$mn:00002C30 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00002C30                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00002C30
.text$mn:00002C30 var_4           = dword ptr -4
.text$mn:00002C30
.text$mn:00002C30                 push    ebp
.text$mn:00002C31                 mov     ebp, esp
.text$mn:00002C33                 push    ecx
.text$mn:00002C34                 mov     [ebp+var_4], ecx
.text$mn:00002C37                 mov     eax, [ebp+var_4]
.text$mn:00002C3A                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00002C40                 mov     esp, ebp
.text$mn:00002C42                 pop     ebp
.text$mn:00002C43                 retn
.text$mn:00002C43 ??1error_category@std@@UAE@XZ endp
.text$mn:00002C43
.text$mn:00002C43 _text$mn        ends
.text$mn:00002C43
.text$mn:00002C44 ; ===========================================================================
.text$mn:00002C44
.text$mn:00002C44 ; Segment type: Pure code
.text$mn:00002C44 ; Segment permissions: Read/Execute
.text$mn:00002C44 _text$mn        segment para public 'CODE' use32
.text$mn:00002C44                 assume cs:_text$mn
.text$mn:00002C44                 ;org 2C44h
.text$mn:00002C44 ; COMDAT (pick any)
.text$mn:00002C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C44
.text$mn:00002C44 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C44
.text$mn:00002C44 ; Attributes: bp-based frame
.text$mn:00002C44
.text$mn:00002C44 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00002C44                 public ??2@YAPAXIPAX@Z
.text$mn:00002C44 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00002C44                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00002C44
.text$mn:00002C44 arg_4           = dword ptr  0Ch
.text$mn:00002C44
.text$mn:00002C44                 push    ebp
.text$mn:00002C45                 mov     ebp, esp
.text$mn:00002C47                 mov     eax, [ebp+arg_4]
.text$mn:00002C4A                 pop     ebp
.text$mn:00002C4B                 retn
.text$mn:00002C4B ??2@YAPAXIPAX@Z endp
.text$mn:00002C4B
.text$mn:00002C4B _text$mn        ends
.text$mn:00002C4B
.text$mn:00002C4C ; ===========================================================================
.text$mn:00002C4C
.text$mn:00002C4C ; Segment type: Pure code
.text$mn:00002C4C ; Segment permissions: Read/Execute
.text$mn:00002C4C _text$mn        segment para public 'CODE' use32
.text$mn:00002C4C                 assume cs:_text$mn
.text$mn:00002C4C                 ;org 2C4Ch
.text$mn:00002C4C ; COMDAT (pick any)
.text$mn:00002C4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C4C
.text$mn:00002C4C ; =============== S U B R O U T I N E =======================================
.text$mn:00002C4C
.text$mn:00002C4C ; Attributes: bp-based frame
.text$mn:00002C4C
.text$mn:00002C4C ; void __cdecl operator delete(void *)
.text$mn:00002C4C                 public ??3@YAXPAX0@Z
.text$mn:00002C4C ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00002C4C                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00002C4C                 push    ebp
.text$mn:00002C4D                 mov     ebp, esp
.text$mn:00002C4F                 pop     ebp
.text$mn:00002C50                 retn
.text$mn:00002C50 ??3@YAXPAX0@Z   endp
.text$mn:00002C50
.text$mn:00002C50 ; ---------------------------------------------------------------------------
.text$mn:00002C51                 align 4
.text$mn:00002C51 _text$mn        ends
.text$mn:00002C51
.text$mn:00002C54 ; ===========================================================================
.text$mn:00002C54
.text$mn:00002C54 ; Segment type: Pure code
.text$mn:00002C54 ; Segment permissions: Read/Execute
.text$mn:00002C54 _text$mn        segment para public 'CODE' use32
.text$mn:00002C54                 assume cs:_text$mn
.text$mn:00002C54                 ;org 2C54h
.text$mn:00002C54 ; COMDAT (pick any)
.text$mn:00002C54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C54
.text$mn:00002C54 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C54
.text$mn:00002C54 ; Attributes: bp-based frame
.text$mn:00002C54
.text$mn:00002C54 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00002C54                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00002C54 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00002C54                                         ; CODE XREF: RegExtDlg::writeNppPath(void)+19Bp
.text$mn:00002C54
.text$mn:00002C54 var_4           = dword ptr -4
.text$mn:00002C54 Str             = dword ptr  8
.text$mn:00002C54
.text$mn:00002C54                 push    ebp
.text$mn:00002C55                 mov     ebp, esp
.text$mn:00002C57                 push    ecx
.text$mn:00002C58                 mov     [ebp+var_4], ecx
.text$mn:00002C5B                 mov     eax, [ebp+Str]
.text$mn:00002C5E                 push    eax             ; Str
.text$mn:00002C5F                 mov     ecx, [ebp+var_4]
.text$mn:00002C62                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00002C67                 mov     esp, ebp
.text$mn:00002C69                 pop     ebp
.text$mn:00002C6A                 retn    4
.text$mn:00002C6A ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00002C6A
.text$mn:00002C6A ; ---------------------------------------------------------------------------
.text$mn:00002C6D                 align 10h
.text$mn:00002C6D _text$mn        ends
.text$mn:00002C6D
.text$mn:00002C70 ; ===========================================================================
.text$mn:00002C70
.text$mn:00002C70 ; Segment type: Pure code
.text$mn:00002C70 ; Segment permissions: Read/Execute
.text$mn:00002C70 _text$mn        segment para public 'CODE' use32
.text$mn:00002C70                 assume cs:_text$mn
.text$mn:00002C70                 ;org 2C70h
.text$mn:00002C70 ; COMDAT (pick any)
.text$mn:00002C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C70
.text$mn:00002C70 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C70
.text$mn:00002C70 ; Attributes: bp-based frame
.text$mn:00002C70
.text$mn:00002C70 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00002C70                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00002C70 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00002C70                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00002C70                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00002C70
.text$mn:00002C70 var_8           = dword ptr -8
.text$mn:00002C70 var_4           = dword ptr -4
.text$mn:00002C70 arg_0           = dword ptr  8
.text$mn:00002C70
.text$mn:00002C70                 push    ebp
.text$mn:00002C71                 mov     ebp, esp
.text$mn:00002C73                 sub     esp, 8
.text$mn:00002C76                 mov     [ebp+var_8], ecx
.text$mn:00002C79                 mov     eax, [ebp+var_8]
.text$mn:00002C7C                 cmp     eax, [ebp+arg_0]
.text$mn:00002C7F                 jnz     short loc_2C8A
.text$mn:00002C81                 mov     [ebp+var_4], 1
.text$mn:00002C88                 jmp     short loc_2C91
.text$mn:00002C8A ; ---------------------------------------------------------------------------
.text$mn:00002C8A
.text$mn:00002C8A loc_2C8A:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:00002C8A                 mov     [ebp+var_4], 0
.text$mn:00002C91
.text$mn:00002C91 loc_2C91:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00002C91                 mov     al, byte ptr [ebp+var_4]
.text$mn:00002C94                 mov     esp, ebp
.text$mn:00002C96                 pop     ebp
.text$mn:00002C97                 retn    4
.text$mn:00002C97 ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:00002C97
.text$mn:00002C97 ; ---------------------------------------------------------------------------
.text$mn:00002C9A                 align 4
.text$mn:00002C9A _text$mn        ends
.text$mn:00002C9A
.text$mn:00002C9C ; ===========================================================================
.text$mn:00002C9C
.text$mn:00002C9C ; Segment type: Pure code
.text$mn:00002C9C ; Segment permissions: Read/Execute
.text$mn:00002C9C _text$mn        segment para public 'CODE' use32
.text$mn:00002C9C                 assume cs:_text$mn
.text$mn:00002C9C                 ;org 2C9Ch
.text$mn:00002C9C ; COMDAT (pick any)
.text$mn:00002C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C9C
.text$mn:00002C9C ; =============== S U B R O U T I N E =======================================
.text$mn:00002C9C
.text$mn:00002C9C ; Attributes: bp-based frame
.text$mn:00002C9C
.text$mn:00002C9C ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00002C9C                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00002C9C ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00002C9C                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00002C9C
.text$mn:00002C9C var_8           = dword ptr -8
.text$mn:00002C9C var_4           = dword ptr -4
.text$mn:00002C9C arg_0           = dword ptr  8
.text$mn:00002C9C
.text$mn:00002C9C                 push    ebp
.text$mn:00002C9D                 mov     ebp, esp
.text$mn:00002C9F                 sub     esp, 8
.text$mn:00002CA2                 push    esi
.text$mn:00002CA3                 mov     [ebp+var_4], ecx
.text$mn:00002CA6                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002CA9                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00002CAE                 push    eax
.text$mn:00002CAF                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002CB2                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00002CB7                 mov     ecx, eax
.text$mn:00002CB9                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00002CBE                 movzx   eax, al
.text$mn:00002CC1                 test    eax, eax
.text$mn:00002CC3                 jz      short loc_2CE4
.text$mn:00002CC5                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002CC8                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00002CCD                 mov     esi, eax
.text$mn:00002CCF                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002CD2                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00002CD7                 cmp     esi, eax
.text$mn:00002CD9                 jnz     short loc_2CE4
.text$mn:00002CDB                 mov     [ebp+var_8], 1
.text$mn:00002CE2                 jmp     short loc_2CEB
.text$mn:00002CE4 ; ---------------------------------------------------------------------------
.text$mn:00002CE4
.text$mn:00002CE4 loc_2CE4:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00002CE4                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00002CE4                 mov     [ebp+var_8], 0
.text$mn:00002CEB
.text$mn:00002CEB loc_2CEB:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:00002CEB                 mov     al, byte ptr [ebp+var_8]
.text$mn:00002CEE                 pop     esi
.text$mn:00002CEF                 mov     esp, ebp
.text$mn:00002CF1                 pop     ebp
.text$mn:00002CF2                 retn    4
.text$mn:00002CF2 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00002CF2
.text$mn:00002CF2 ; ---------------------------------------------------------------------------
.text$mn:00002CF5                 align 4
.text$mn:00002CF5 _text$mn        ends
.text$mn:00002CF5
.text$mn:00002CF8 ; ===========================================================================
.text$mn:00002CF8
.text$mn:00002CF8 ; Segment type: Pure code
.text$mn:00002CF8 ; Segment permissions: Read/Execute
.text$mn:00002CF8 _text$mn        segment para public 'CODE' use32
.text$mn:00002CF8                 assume cs:_text$mn
.text$mn:00002CF8                 ;org 2CF8h
.text$mn:00002CF8 ; COMDAT (pick any)
.text$mn:00002CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002CF8
.text$mn:00002CF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002CF8
.text$mn:00002CF8 ; Attributes: bp-based frame
.text$mn:00002CF8
.text$mn:00002CF8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t *Str)
.text$mn:00002CF8                 public ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00002CF8 ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00002CF8                                         ; CODE XREF: RegExtDlg::writeNppPath(void)+54p
.text$mn:00002CF8                                         ; RegExtDlg::writeNppPath(void)+1ABp
.text$mn:00002CF8
.text$mn:00002CF8 var_4           = dword ptr -4
.text$mn:00002CF8 Str             = dword ptr  8
.text$mn:00002CF8
.text$mn:00002CF8                 push    ebp
.text$mn:00002CF9                 mov     ebp, esp
.text$mn:00002CFB                 push    ecx
.text$mn:00002CFC                 mov     [ebp+var_4], ecx
.text$mn:00002CFF                 mov     eax, [ebp+Str]
.text$mn:00002D02                 push    eax             ; Str
.text$mn:00002D03                 mov     ecx, [ebp+var_4]
.text$mn:00002D06                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)
.text$mn:00002D0B                 mov     esp, ebp
.text$mn:00002D0D                 pop     ebp
.text$mn:00002D0E                 retn    4
.text$mn:00002D0E ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00002D0E
.text$mn:00002D0E ; ---------------------------------------------------------------------------
.text$mn:00002D11                 align 4
.text$mn:00002D11 _text$mn        ends
.text$mn:00002D11
.text$mn:00002D14 ; ===========================================================================
.text$mn:00002D14
.text$mn:00002D14 ; Segment type: Pure code
.text$mn:00002D14 ; Segment permissions: Read/Execute
.text$mn:00002D14 _text$mn        segment para public 'CODE' use32
.text$mn:00002D14                 assume cs:_text$mn
.text$mn:00002D14                 ;org 2D14h
.text$mn:00002D14 ; COMDAT (pick any)
.text$mn:00002D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002D14
.text$mn:00002D14 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D14
.text$mn:00002D14 ; Attributes: bp-based frame
.text$mn:00002D14
.text$mn:00002D14 ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00002D14                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:00002D14 ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:00002D14
.text$mn:00002D14 var_4           = dword ptr -4
.text$mn:00002D14 arg_0           = dword ptr  8
.text$mn:00002D14
.text$mn:00002D14                 push    ebp
.text$mn:00002D15                 mov     ebp, esp
.text$mn:00002D17                 push    ecx
.text$mn:00002D18                 mov     [ebp+var_4], ecx
.text$mn:00002D1B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002D1E                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00002D23                 mov     eax, [ebp+arg_0]
.text$mn:00002D26                 and     eax, 1
.text$mn:00002D29                 jz      short loc_2D37
.text$mn:00002D2B                 mov     ecx, [ebp+var_4]
.text$mn:00002D2E                 push    ecx             ; void *
.text$mn:00002D2F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00002D34                 add     esp, 4
.text$mn:00002D37
.text$mn:00002D37 loc_2D37:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00002D37                 mov     eax, [ebp+var_4]
.text$mn:00002D3A                 mov     esp, ebp
.text$mn:00002D3C                 pop     ebp
.text$mn:00002D3D                 retn    4
.text$mn:00002D3D ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00002D3D
.text$mn:00002D3D _text$mn        ends
.text$mn:00002D3D
.text$mn:00002D40 ; ===========================================================================
.text$mn:00002D40
.text$mn:00002D40 ; Segment type: Pure code
.text$mn:00002D40 ; Segment permissions: Read/Execute
.text$mn:00002D40 _text$mn        segment para public 'CODE' use32
.text$mn:00002D40                 assume cs:_text$mn
.text$mn:00002D40                 ;org 2D40h
.text$mn:00002D40 ; COMDAT (pick any)
.text$mn:00002D40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002D40
.text$mn:00002D40 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D40
.text$mn:00002D40 ; Attributes: bp-based frame
.text$mn:00002D40
.text$mn:00002D40 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00002D40                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00002D40 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00002D40
.text$mn:00002D40 var_4           = dword ptr -4
.text$mn:00002D40 arg_0           = dword ptr  8
.text$mn:00002D40
.text$mn:00002D40                 push    ebp
.text$mn:00002D41                 mov     ebp, esp
.text$mn:00002D43                 push    ecx
.text$mn:00002D44                 mov     [ebp+var_4], ecx
.text$mn:00002D47                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002D4A                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00002D4F                 mov     eax, [ebp+arg_0]
.text$mn:00002D52                 and     eax, 1
.text$mn:00002D55                 jz      short loc_2D63
.text$mn:00002D57                 mov     ecx, [ebp+var_4]
.text$mn:00002D5A                 push    ecx             ; void *
.text$mn:00002D5B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00002D60                 add     esp, 4
.text$mn:00002D63
.text$mn:00002D63 loc_2D63:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00002D63                 mov     eax, [ebp+var_4]
.text$mn:00002D66                 mov     esp, ebp
.text$mn:00002D68                 pop     ebp
.text$mn:00002D69                 retn    4
.text$mn:00002D69 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00002D69
.text$mn:00002D69 _text$mn        ends
.text$mn:00002D69
.text$mn:00002D6C ; ===========================================================================
.text$mn:00002D6C
.text$mn:00002D6C ; Segment type: Pure code
.text$mn:00002D6C ; Segment permissions: Read/Execute
.text$mn:00002D6C _text$mn        segment para public 'CODE' use32
.text$mn:00002D6C                 assume cs:_text$mn
.text$mn:00002D6C                 ;org 2D6Ch
.text$mn:00002D6C ; COMDAT (pick any)
.text$mn:00002D6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002D6C
.text$mn:00002D6C ; =============== S U B R O U T I N E =======================================
.text$mn:00002D6C
.text$mn:00002D6C ; Attributes: bp-based frame
.text$mn:00002D6C
.text$mn:00002D6C ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00002D6C                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00002D6C ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00002D6C
.text$mn:00002D6C var_4           = dword ptr -4
.text$mn:00002D6C arg_0           = dword ptr  8
.text$mn:00002D6C
.text$mn:00002D6C                 push    ebp
.text$mn:00002D6D                 mov     ebp, esp
.text$mn:00002D6F                 push    ecx
.text$mn:00002D70                 mov     [ebp+var_4], ecx
.text$mn:00002D73                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002D76                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:00002D7B                 mov     eax, [ebp+arg_0]
.text$mn:00002D7E                 and     eax, 1
.text$mn:00002D81                 jz      short loc_2D8F
.text$mn:00002D83                 mov     ecx, [ebp+var_4]
.text$mn:00002D86                 push    ecx             ; void *
.text$mn:00002D87                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00002D8C                 add     esp, 4
.text$mn:00002D8F
.text$mn:00002D8F loc_2D8F:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00002D8F                 mov     eax, [ebp+var_4]
.text$mn:00002D92                 mov     esp, ebp
.text$mn:00002D94                 pop     ebp
.text$mn:00002D95                 retn    4
.text$mn:00002D95 ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:00002D95
.text$mn:00002D95 _text$mn        ends
.text$mn:00002D95
.text$mn:00002D98 ; ===========================================================================
.text$mn:00002D98
.text$mn:00002D98 ; Segment type: Pure code
.text$mn:00002D98 ; Segment permissions: Read/Execute
.text$mn:00002D98 _text$mn        segment para public 'CODE' use32
.text$mn:00002D98                 assume cs:_text$mn
.text$mn:00002D98                 ;org 2D98h
.text$mn:00002D98 ; COMDAT (pick any)
.text$mn:00002D98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002D98
.text$mn:00002D98 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D98
.text$mn:00002D98 ; Attributes: bp-based frame
.text$mn:00002D98
.text$mn:00002D98 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00002D98                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00002D98 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00002D98
.text$mn:00002D98 var_4           = dword ptr -4
.text$mn:00002D98 arg_0           = dword ptr  8
.text$mn:00002D98
.text$mn:00002D98                 push    ebp
.text$mn:00002D99                 mov     ebp, esp
.text$mn:00002D9B                 push    ecx
.text$mn:00002D9C                 mov     [ebp+var_4], ecx
.text$mn:00002D9F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002DA2                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00002DA7                 mov     eax, [ebp+arg_0]
.text$mn:00002DAA                 and     eax, 1
.text$mn:00002DAD                 jz      short loc_2DBB
.text$mn:00002DAF                 mov     ecx, [ebp+var_4]
.text$mn:00002DB2                 push    ecx             ; void *
.text$mn:00002DB3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00002DB8                 add     esp, 4
.text$mn:00002DBB
.text$mn:00002DBB loc_2DBB:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00002DBB                 mov     eax, [ebp+var_4]
.text$mn:00002DBE                 mov     esp, ebp
.text$mn:00002DC0                 pop     ebp
.text$mn:00002DC1                 retn    4
.text$mn:00002DC1 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00002DC1
.text$mn:00002DC1 _text$mn        ends
.text$mn:00002DC1
.text$di:00002DC4 ; ===========================================================================
.text$di:00002DC4
.text$di:00002DC4 ; Segment type: Pure code
.text$di:00002DC4 ; Segment permissions: Read/Execute
.text$di:00002DC4 _text$di        segment para public 'CODE' use32
.text$di:00002DC4                 assume cs:_text$di
.text$di:00002DC4                 ;org 2DC4h
.text$di:00002DC4 ; COMDAT (pick any)
.text$di:00002DC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002DC4
.text$di:00002DC4 ; =============== S U B R O U T I N E =======================================
.text$di:00002DC4
.text$di:00002DC4 ; Attributes: bp-based frame
.text$di:00002DC4
.text$di:00002DC4 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:00002DC4 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:00002DC4                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:00002DC4                 push    ebp
.text$di:00002DC5                 mov     ebp, esp
.text$di:00002DC7                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:00002DCC                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:00002DD1                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00002DD6                 call    _atexit
.text$di:00002DDB                 add     esp, 4
.text$di:00002DDE                 pop     ebp
.text$di:00002DDF                 retn
.text$di:00002DDF ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:00002DDF
.text$di:00002DDF _text$di        ends
.text$di:00002DDF
.text$di:00002DE0 ; ===========================================================================
.text$di:00002DE0
.text$di:00002DE0 ; Segment type: Pure code
.text$di:00002DE0 ; Segment permissions: Read/Execute
.text$di:00002DE0 _text$di        segment para public 'CODE' use32
.text$di:00002DE0                 assume cs:_text$di
.text$di:00002DE0                 ;org 2DE0h
.text$di:00002DE0 ; COMDAT (pick any)
.text$di:00002DE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002DE0
.text$di:00002DE0 ; =============== S U B R O U T I N E =======================================
.text$di:00002DE0
.text$di:00002DE0 ; Attributes: bp-based frame
.text$di:00002DE0
.text$di:00002DE0 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:00002DE0 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:00002DE0                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:00002DE0                 push    ebp
.text$di:00002DE1                 mov     ebp, esp
.text$di:00002DE3                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:00002DE8                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:00002DED                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00002DF2                 call    _atexit
.text$di:00002DF7                 add     esp, 4
.text$di:00002DFA                 pop     ebp
.text$di:00002DFB                 retn
.text$di:00002DFB ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:00002DFB
.text$di:00002DFB _text$di        ends
.text$di:00002DFB
.text$di:00002DFC ; ===========================================================================
.text$di:00002DFC
.text$di:00002DFC ; Segment type: Pure code
.text$di:00002DFC ; Segment permissions: Read/Execute
.text$di:00002DFC _text$di        segment para public 'CODE' use32
.text$di:00002DFC                 assume cs:_text$di
.text$di:00002DFC                 ;org 2DFCh
.text$di:00002DFC ; COMDAT (pick any)
.text$di:00002DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002DFC
.text$di:00002DFC ; =============== S U B R O U T I N E =======================================
.text$di:00002DFC
.text$di:00002DFC ; Attributes: bp-based frame
.text$di:00002DFC
.text$di:00002DFC ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:00002DFC ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:00002DFC                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:00002DFC                 push    ebp
.text$di:00002DFD                 mov     ebp, esp
.text$di:00002DFF                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00002E04                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00002E09                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00002E0E                 call    _atexit
.text$di:00002E13                 add     esp, 4
.text$di:00002E16                 pop     ebp
.text$di:00002E17                 retn
.text$di:00002E17 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:00002E17
.text$di:00002E17 _text$di        ends
.text$di:00002E17
.text$di:00002E18 ; ===========================================================================
.text$di:00002E18
.text$di:00002E18 ; Segment type: Pure code
.text$di:00002E18 ; Segment permissions: Read/Execute
.text$di:00002E18 _text$di        segment para public 'CODE' use32
.text$di:00002E18                 assume cs:_text$di
.text$di:00002E18                 ;org 2E18h
.text$di:00002E18 ; COMDAT (pick any)
.text$di:00002E18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002E18
.text$di:00002E18 ; =============== S U B R O U T I N E =======================================
.text$di:00002E18
.text$di:00002E18 ; Attributes: bp-based frame
.text$di:00002E18
.text$di:00002E18 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00002E18 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00002E18                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00002E18                 push    ebp
.text$di:00002E19                 mov     ebp, esp
.text$di:00002E1B                 push    0               ; unsigned int
.text$di:00002E1D                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00002E22                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00002E27                 pop     ebp
.text$di:00002E28                 retn
.text$di:00002E28 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00002E28
.text$di:00002E28 ; ---------------------------------------------------------------------------
.text$di:00002E29                 align 4
.text$di:00002E29 _text$di        ends
.text$di:00002E29
.text$di:00002E2C ; ===========================================================================
.text$di:00002E2C
.text$di:00002E2C ; Segment type: Pure code
.text$di:00002E2C ; Segment permissions: Read/Execute
.text$di:00002E2C _text$di        segment para public 'CODE' use32
.text$di:00002E2C                 assume cs:_text$di
.text$di:00002E2C                 ;org 2E2Ch
.text$di:00002E2C ; COMDAT (pick any)
.text$di:00002E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002E2C
.text$di:00002E2C ; =============== S U B R O U T I N E =======================================
.text$di:00002E2C
.text$di:00002E2C ; Attributes: bp-based frame
.text$di:00002E2C
.text$di:00002E2C ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00002E2C ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00002E2C                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00002E2C                 push    ebp
.text$di:00002E2D                 mov     ebp, esp
.text$di:00002E2F                 push    0               ; unsigned int
.text$di:00002E31                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00002E36                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00002E3B                 pop     ebp
.text$di:00002E3C                 retn
.text$di:00002E3C ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00002E3C
.text$di:00002E3C ; ---------------------------------------------------------------------------
.text$di:00002E3D                 align 10h
.text$di:00002E3D _text$di        ends
.text$di:00002E3D
.text$di:00002E40 ; ===========================================================================
.text$di:00002E40
.text$di:00002E40 ; Segment type: Pure code
.text$di:00002E40 ; Segment permissions: Read/Execute
.text$di:00002E40 _text$di        segment para public 'CODE' use32
.text$di:00002E40                 assume cs:_text$di
.text$di:00002E40                 ;org 2E40h
.text$di:00002E40 ; COMDAT (pick any)
.text$di:00002E40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002E40
.text$di:00002E40 ; =============== S U B R O U T I N E =======================================
.text$di:00002E40
.text$di:00002E40 ; Attributes: bp-based frame
.text$di:00002E40
.text$di:00002E40 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00002E40 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00002E40                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00002E40                 push    ebp
.text$di:00002E41                 mov     ebp, esp
.text$di:00002E43                 push    0               ; unsigned int
.text$di:00002E45                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00002E4A                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00002E4F                 pop     ebp
.text$di:00002E50                 retn
.text$di:00002E50 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00002E50
.text$di:00002E50 ; ---------------------------------------------------------------------------
.text$di:00002E51                 align 4
.text$di:00002E51 _text$di        ends
.text$di:00002E51
.text$di:00002E54 ; ===========================================================================
.text$di:00002E54
.text$di:00002E54 ; Segment type: Pure code
.text$di:00002E54 ; Segment permissions: Read/Execute
.text$di:00002E54 _text$di        segment para public 'CODE' use32
.text$di:00002E54                 assume cs:_text$di
.text$di:00002E54                 ;org 2E54h
.text$di:00002E54 ; COMDAT (pick any)
.text$di:00002E54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002E54
.text$di:00002E54 ; =============== S U B R O U T I N E =======================================
.text$di:00002E54
.text$di:00002E54 ; Attributes: bp-based frame
.text$di:00002E54
.text$di:00002E54 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:00002E54 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00002E54                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:00002E54                 push    ebp
.text$di:00002E55                 mov     ebp, esp
.text$di:00002E57                 push    0               ; unsigned int
.text$di:00002E59                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00002E5E                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00002E63                 pop     ebp
.text$di:00002E64                 retn
.text$di:00002E64 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00002E64
.text$di:00002E64 ; ---------------------------------------------------------------------------
.text$di:00002E65                 align 4
.text$di:00002E65 _text$di        ends
.text$di:00002E65
.text$di:00002E68 ; ===========================================================================
.text$di:00002E68
.text$di:00002E68 ; Segment type: Pure code
.text$di:00002E68 ; Segment permissions: Read/Execute
.text$di:00002E68 _text$di        segment para public 'CODE' use32
.text$di:00002E68                 assume cs:_text$di
.text$di:00002E68                 ;org 2E68h
.text$di:00002E68 ; COMDAT (pick any)
.text$di:00002E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002E68
.text$di:00002E68 ; =============== S U B R O U T I N E =======================================
.text$di:00002E68
.text$di:00002E68 ; Attributes: bp-based frame
.text$di:00002E68
.text$di:00002E68 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00002E68 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00002E68
.text$di:00002E68 var_1           = byte ptr -1
.text$di:00002E68
.text$di:00002E68                 push    ebp
.text$di:00002E69                 mov     ebp, esp
.text$di:00002E6B                 push    ecx
.text$di:00002E6C                 xor     eax, eax
.text$di:00002E6E                 mov     [ebp+var_1], al
.text$di:00002E71                 mov     esp, ebp
.text$di:00002E73                 pop     ebp
.text$di:00002E74                 retn
.text$di:00002E74 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00002E74
.text$di:00002E74 ; ---------------------------------------------------------------------------
.text$di:00002E75                 align 4
.text$di:00002E75 _text$di        ends
.text$di:00002E75
.text$di:00002E78 ; ===========================================================================
.text$di:00002E78
.text$di:00002E78 ; Segment type: Pure code
.text$di:00002E78 ; Segment permissions: Read/Execute
.text$di:00002E78 _text$di        segment para public 'CODE' use32
.text$di:00002E78                 assume cs:_text$di
.text$di:00002E78                 ;org 2E78h
.text$di:00002E78 ; COMDAT (pick any)
.text$di:00002E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00002E78
.text$di:00002E78 ; =============== S U B R O U T I N E =======================================
.text$di:00002E78
.text$di:00002E78 ; Attributes: bp-based frame
.text$di:00002E78
.text$di:00002E78 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:00002E78 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:00002E78                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:00002E78
.text$di:00002E78 var_1           = byte ptr -1
.text$di:00002E78
.text$di:00002E78                 push    ebp
.text$di:00002E79                 mov     ebp, esp
.text$di:00002E7B                 push    ecx
.text$di:00002E7C                 xor     eax, eax
.text$di:00002E7E                 mov     [ebp+var_1], al
.text$di:00002E81                 mov     esp, ebp
.text$di:00002E83                 pop     ebp
.text$di:00002E84                 retn
.text$di:00002E84 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:00002E84
.text$di:00002E84 ; ---------------------------------------------------------------------------
.text$di:00002E85                 align 4
.text$di:00002E85 _text$di        ends
.text$di:00002E85
.text$yd:00002E88 ; ===========================================================================
.text$yd:00002E88
.text$yd:00002E88 ; Segment type: Pure code
.text$yd:00002E88 ; Segment permissions: Read/Execute
.text$yd:00002E88 _text$yd        segment para public 'CODE' use32
.text$yd:00002E88                 assume cs:_text$yd
.text$yd:00002E88                 ;org 2E88h
.text$yd:00002E88 ; COMDAT (pick any)
.text$yd:00002E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00002E88
.text$yd:00002E88 ; =============== S U B R O U T I N E =======================================
.text$yd:00002E88
.text$yd:00002E88 ; Attributes: bp-based frame
.text$yd:00002E88
.text$yd:00002E88 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:00002E88 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:00002E88                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:00002E88                 push    ebp
.text$yd:00002E89                 mov     ebp, esp
.text$yd:00002E8B                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:00002E90                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:00002E95                 pop     ebp
.text$yd:00002E96                 retn
.text$yd:00002E96 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:00002E96
.text$yd:00002E96 ; ---------------------------------------------------------------------------
.text$yd:00002E97                 align 4
.text$yd:00002E97 _text$yd        ends
.text$yd:00002E97
.text$yd:00002E98 ; ===========================================================================
.text$yd:00002E98
.text$yd:00002E98 ; Segment type: Pure code
.text$yd:00002E98 ; Segment permissions: Read/Execute
.text$yd:00002E98 _text$yd        segment para public 'CODE' use32
.text$yd:00002E98                 assume cs:_text$yd
.text$yd:00002E98                 ;org 2E98h
.text$yd:00002E98 ; COMDAT (pick any)
.text$yd:00002E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00002E98
.text$yd:00002E98 ; =============== S U B R O U T I N E =======================================
.text$yd:00002E98
.text$yd:00002E98 ; Attributes: bp-based frame
.text$yd:00002E98
.text$yd:00002E98 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:00002E98 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:00002E98                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:00002E98                 push    ebp
.text$yd:00002E99                 mov     ebp, esp
.text$yd:00002E9B                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:00002EA0                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:00002EA5                 pop     ebp
.text$yd:00002EA6                 retn
.text$yd:00002EA6 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:00002EA6
.text$yd:00002EA6 ; ---------------------------------------------------------------------------
.text$yd:00002EA7                 align 4
.text$yd:00002EA7 _text$yd        ends
.text$yd:00002EA7
.text$yd:00002EA8 ; ===========================================================================
.text$yd:00002EA8
.text$yd:00002EA8 ; Segment type: Pure code
.text$yd:00002EA8 ; Segment permissions: Read/Execute
.text$yd:00002EA8 _text$yd        segment para public 'CODE' use32
.text$yd:00002EA8                 assume cs:_text$yd
.text$yd:00002EA8                 ;org 2EA8h
.text$yd:00002EA8 ; COMDAT (pick any)
.text$yd:00002EA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:00002EA8
.text$yd:00002EA8 ; =============== S U B R O U T I N E =======================================
.text$yd:00002EA8
.text$yd:00002EA8 ; Attributes: bp-based frame
.text$yd:00002EA8
.text$yd:00002EA8 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:00002EA8 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:00002EA8                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:00002EA8                 push    ebp
.text$yd:00002EA9                 mov     ebp, esp
.text$yd:00002EAB                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:00002EB0                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:00002EB5                 pop     ebp
.text$yd:00002EB6                 retn
.text$yd:00002EB6 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:00002EB6
.text$yd:00002EB6 ; ---------------------------------------------------------------------------
.text$yd:00002EB7                 align 4
.text$yd:00002EB7 _text$yd        ends
.text$yd:00002EB7
.text$mn:00002EB8 ; ===========================================================================
.text$mn:00002EB8
.text$mn:00002EB8 ; Segment type: Pure code
.text$mn:00002EB8 ; Segment permissions: Read/Execute
.text$mn:00002EB8 _text$mn        segment para public 'CODE' use32
.text$mn:00002EB8                 assume cs:_text$mn
.text$mn:00002EB8                 ;org 2EB8h
.text$mn:00002EB8 ; COMDAT (pick any)
.text$mn:00002EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002EB8
.text$mn:00002EB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002EB8
.text$mn:00002EB8 ; Attributes: bp-based frame
.text$mn:00002EB8
.text$mn:00002EB8 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00002EB8                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00002EB8 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00002EB8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:00002EB8
.text$mn:00002EB8 var_10          = byte ptr -10h
.text$mn:00002EB8 var_8           = dword ptr -8
.text$mn:00002EB8 var_1           = byte ptr -1
.text$mn:00002EB8
.text$mn:00002EB8                 push    ebp
.text$mn:00002EB9                 mov     ebp, esp
.text$mn:00002EBB                 sub     esp, 10h
.text$mn:00002EBE                 mov     [ebp+var_8], ecx
.text$mn:00002EC1                 lea     ecx, [ebp+var_1]
.text$mn:00002EC4                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00002EC9                 push    1
.text$mn:00002ECB                 lea     ecx, [ebp+var_1]
.text$mn:00002ECE                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00002ED3                 mov     ecx, [ebp+var_8]
.text$mn:00002ED6                 mov     [ecx], eax
.text$mn:00002ED8                 lea     ecx, [ebp+var_10] ; this
.text$mn:00002EDB                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00002EE0                 push    eax             ; int
.text$mn:00002EE1                 mov     edx, [ebp+var_8]
.text$mn:00002EE4                 mov     eax, [edx]
.text$mn:00002EE6                 push    eax             ; void *
.text$mn:00002EE7                 lea     ecx, [ebp+var_1]
.text$mn:00002EEA                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00002EEF                 mov     ecx, [ebp+var_8]
.text$mn:00002EF2                 mov     edx, [ecx]
.text$mn:00002EF4                 mov     eax, [ebp+var_8]
.text$mn:00002EF7                 mov     [edx], eax
.text$mn:00002EF9                 mov     esp, ebp
.text$mn:00002EFB                 pop     ebp
.text$mn:00002EFC                 retn
.text$mn:00002EFC ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00002EFC
.text$mn:00002EFC ; ---------------------------------------------------------------------------
.text$mn:00002EFD                 align 10h
.text$mn:00002EFD _text$mn        ends
.text$mn:00002EFD
.text$mn:00002F00 ; ===========================================================================
.text$mn:00002F00
.text$mn:00002F00 ; Segment type: Pure code
.text$mn:00002F00 ; Segment permissions: Read/Execute
.text$mn:00002F00 _text$mn        segment para public 'CODE' use32
.text$mn:00002F00                 assume cs:_text$mn
.text$mn:00002F00                 ;org 2F00h
.text$mn:00002F00 ; COMDAT (pick any)
.text$mn:00002F00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002F00
.text$mn:00002F00 ; =============== S U B R O U T I N E =======================================
.text$mn:00002F00
.text$mn:00002F00 ; Attributes: bp-based frame
.text$mn:00002F00
.text$mn:00002F00 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00002F00                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00002F00 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00002F00                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:00002F00
.text$mn:00002F00 var_10          = byte ptr -10h
.text$mn:00002F00 var_8           = dword ptr -8
.text$mn:00002F00 var_1           = byte ptr -1
.text$mn:00002F00
.text$mn:00002F00                 push    ebp
.text$mn:00002F01                 mov     ebp, esp
.text$mn:00002F03                 sub     esp, 10h
.text$mn:00002F06                 mov     [ebp+var_8], ecx
.text$mn:00002F09                 lea     ecx, [ebp+var_1]
.text$mn:00002F0C                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00002F11                 push    1
.text$mn:00002F13                 lea     ecx, [ebp+var_1]
.text$mn:00002F16                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00002F1B                 mov     ecx, [ebp+var_8]
.text$mn:00002F1E                 mov     [ecx], eax
.text$mn:00002F20                 lea     ecx, [ebp+var_10] ; this
.text$mn:00002F23                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00002F28                 push    eax             ; int
.text$mn:00002F29                 mov     edx, [ebp+var_8]
.text$mn:00002F2C                 mov     eax, [edx]
.text$mn:00002F2E                 push    eax             ; void *
.text$mn:00002F2F                 lea     ecx, [ebp+var_1]
.text$mn:00002F32                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00002F37                 mov     ecx, [ebp+var_8]
.text$mn:00002F3A                 mov     edx, [ecx]
.text$mn:00002F3C                 mov     eax, [ebp+var_8]
.text$mn:00002F3F                 mov     [edx], eax
.text$mn:00002F41                 mov     esp, ebp
.text$mn:00002F43                 pop     ebp
.text$mn:00002F44                 retn
.text$mn:00002F44 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00002F44
.text$mn:00002F44 ; ---------------------------------------------------------------------------
.text$mn:00002F45                 align 4
.text$mn:00002F45 _text$mn        ends
.text$mn:00002F45
.text$mn:00002F48 ; ===========================================================================
.text$mn:00002F48
.text$mn:00002F48 ; Segment type: Pure code
.text$mn:00002F48 ; Segment permissions: Read/Execute
.text$mn:00002F48 _text$mn        segment para public 'CODE' use32
.text$mn:00002F48                 assume cs:_text$mn
.text$mn:00002F48                 ;org 2F48h
.text$mn:00002F48 ; COMDAT (pick any)
.text$mn:00002F48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002F48
.text$mn:00002F48 ; =============== S U B R O U T I N E =======================================
.text$mn:00002F48
.text$mn:00002F48 ; Attributes: bp-based frame
.text$mn:00002F48
.text$mn:00002F48 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00002F48                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00002F48 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00002F48                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00002F48
.text$mn:00002F48 var_20          = dword ptr -20h
.text$mn:00002F48 var_1C          = dword ptr -1Ch
.text$mn:00002F48 var_18          = dword ptr -18h
.text$mn:00002F48 var_11          = byte ptr -11h
.text$mn:00002F48 var_10          = dword ptr -10h
.text$mn:00002F48 var_C           = byte ptr -0Ch
.text$mn:00002F48 var_4           = dword ptr -4
.text$mn:00002F48 arg_0           = dword ptr  8
.text$mn:00002F48
.text$mn:00002F48 ; FUNCTION CHUNK AT .text$mn:0000306A SIZE 00000009 BYTES
.text$mn:00002F48
.text$mn:00002F48                 push    ebp
.text$mn:00002F49                 mov     ebp, esp
.text$mn:00002F4B                 push    0FFFFFFFFh
.text$mn:00002F4D                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00002F52                 mov     eax, large fs:0
.text$mn:00002F58                 push    eax
.text$mn:00002F59                 push    ecx
.text$mn:00002F5A                 sub     esp, 10h
.text$mn:00002F5D                 push    ebx
.text$mn:00002F5E                 push    esi
.text$mn:00002F5F                 push    edi
.text$mn:00002F60                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002F65                 xor     eax, ebp
.text$mn:00002F67                 push    eax
.text$mn:00002F68                 lea     eax, [ebp+var_C]
.text$mn:00002F6B                 mov     large fs:0, eax
.text$mn:00002F71                 mov     [ebp+var_10], esp
.text$mn:00002F74                 mov     [ebp+var_18], ecx
.text$mn:00002F77                 mov     eax, [ebp+arg_0]
.text$mn:00002F7A                 or      eax, 0Fh
.text$mn:00002F7D                 mov     [ebp+var_1C], eax
.text$mn:00002F80                 mov     ecx, [ebp+var_18]
.text$mn:00002F83                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00002F88                 cmp     eax, [ebp+var_1C]
.text$mn:00002F8B                 jnb     short loc_2F95
.text$mn:00002F8D                 mov     ecx, [ebp+arg_0]
.text$mn:00002F90                 mov     [ebp+var_1C], ecx
.text$mn:00002F93                 jmp     short loc_2FE7
.text$mn:00002F95 ; ---------------------------------------------------------------------------
.text$mn:00002F95
.text$mn:00002F95 loc_2F95:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00002F95                 mov     edx, [ebp+var_18]
.text$mn:00002F98                 mov     ecx, [edx+18h]
.text$mn:00002F9B                 shr     ecx, 1
.text$mn:00002F9D                 mov     eax, [ebp+var_1C]
.text$mn:00002FA0                 xor     edx, edx
.text$mn:00002FA2                 mov     esi, 3
.text$mn:00002FA7                 div     esi
.text$mn:00002FA9                 cmp     ecx, eax
.text$mn:00002FAB                 ja      short loc_2FAF
.text$mn:00002FAD                 jmp     short loc_2FE7
.text$mn:00002FAF ; ---------------------------------------------------------------------------
.text$mn:00002FAF
.text$mn:00002FAF loc_2FAF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00002FAF                 mov     ecx, [ebp+var_18]
.text$mn:00002FB2                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00002FB7                 mov     edx, [ebp+var_18]
.text$mn:00002FBA                 mov     ecx, [edx+18h]
.text$mn:00002FBD                 shr     ecx, 1
.text$mn:00002FBF                 sub     eax, ecx
.text$mn:00002FC1                 mov     edx, [ebp+var_18]
.text$mn:00002FC4                 cmp     [edx+18h], eax
.text$mn:00002FC7                 ja      short loc_2FDC
.text$mn:00002FC9                 mov     eax, [ebp+var_18]
.text$mn:00002FCC                 mov     ecx, [eax+18h]
.text$mn:00002FCF                 shr     ecx, 1
.text$mn:00002FD1                 mov     edx, [ebp+var_18]
.text$mn:00002FD4                 add     ecx, [edx+18h]
.text$mn:00002FD7                 mov     [ebp+var_1C], ecx
.text$mn:00002FDA                 jmp     short loc_2FE7
.text$mn:00002FDC ; ---------------------------------------------------------------------------
.text$mn:00002FDC
.text$mn:00002FDC loc_2FDC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00002FDC                 mov     ecx, [ebp+var_18]
.text$mn:00002FDF                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00002FE4                 mov     [ebp+var_1C], eax
.text$mn:00002FE7
.text$mn:00002FE7 loc_2FE7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:00002FE7                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:00002FE7                 mov     [ebp+var_4], 0
.text$mn:00002FEE                 mov     eax, [ebp+var_1C]
.text$mn:00002FF1                 add     eax, 1
.text$mn:00002FF4                 push    eax
.text$mn:00002FF5                 lea     ecx, [ebp+var_11]
.text$mn:00002FF8                 push    ecx
.text$mn:00002FF9                 mov     ecx, [ebp+var_18]
.text$mn:00002FFC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00003001                 mov     ecx, eax
.text$mn:00003003                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00003008                 mov     [ebp+var_20], eax
.text$mn:0000300B                 jmp     short loc_306A
.text$mn:0000300B ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:0000300B
.text$mn:0000300D
.text$mn:0000300D ; =============== S U B R O U T I N E =======================================
.text$mn:0000300D
.text$mn:0000300D
.text$mn:0000300D __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:0000300D                                         ; DATA XREF: .xdata$x:000048C4o
.text$mn:0000300D
.text$mn:0000300D ; FUNCTION CHUNK AT .text$mn:00003054 SIZE 00000009 BYTES
.text$mn:0000300D ; FUNCTION CHUNK AT .text$mn:00003064 SIZE 00000006 BYTES
.text$mn:0000300D
.text$mn:0000300D                 mov     [ebp-10h], esp
.text$mn:00003010                 mov     edx, [ebp+8]
.text$mn:00003013                 mov     [ebp-1Ch], edx
.text$mn:00003016                 mov     byte ptr [ebp-4], 2
.text$mn:0000301A                 mov     eax, [ebp-1Ch]
.text$mn:0000301D                 add     eax, 1
.text$mn:00003020                 push    eax
.text$mn:00003021                 lea     ecx, [ebp-12h]
.text$mn:00003024                 push    ecx
.text$mn:00003025                 mov     ecx, [ebp-18h]
.text$mn:00003028                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:0000302D                 mov     ecx, eax
.text$mn:0000302F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00003034                 mov     [ebp-20h], eax
.text$mn:00003037                 jmp     short loc_3054
.text$mn:00003037 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:00003037
.text$mn:00003039
.text$mn:00003039 ; =============== S U B R O U T I N E =======================================
.text$mn:00003039
.text$mn:00003039 ; Attributes: noreturn
.text$mn:00003039
.text$mn:00003039 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00003039                                         ; DATA XREF: .xdata$x:000048D4o
.text$mn:00003039                 push    0               ; Size
.text$mn:0000303B                 push    1               ; char
.text$mn:0000303D                 mov     ecx, [ebp-18h]
.text$mn:00003040                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00003045                 push    0
.text$mn:00003047                 push    0
.text$mn:00003049                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00003049 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00003049
.text$mn:0000304E ; ---------------------------------------------------------------------------
.text$mn:0000304E                 mov     eax, offset $LN17
.text$mn:00003053                 retn
.text$mn:00003054 ; ---------------------------------------------------------------------------
.text$mn:00003054 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00003054
.text$mn:00003054 loc_3054:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00003054                 mov     dword ptr [ebp-4], 1
.text$mn:0000305B                 jmp     short loc_3064
.text$mn:0000305B ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000305D
.text$mn:0000305D ; =============== S U B R O U T I N E =======================================
.text$mn:0000305D
.text$mn:0000305D
.text$mn:0000305D $LN17           proc near               ; DATA XREF: .text$mn:0000304Eo
.text$mn:0000305D                 mov     dword ptr [ebp-4], 1
.text$mn:0000305D $LN17           endp ; sp-analysis failed
.text$mn:0000305D
.text$mn:00003064 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00003064
.text$mn:00003064 loc_3064:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00003064                 mov     eax, offset $LN19
.text$mn:00003069                 retn
.text$mn:00003069 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:0000306A ; ---------------------------------------------------------------------------
.text$mn:0000306A ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000306A
.text$mn:0000306A loc_306A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:0000306A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003071                 jmp     short loc_307A
.text$mn:00003071 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00003073
.text$mn:00003073 ; =============== S U B R O U T I N E =======================================
.text$mn:00003073
.text$mn:00003073
.text$mn:00003073 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_3064o
.text$mn:00003073                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000307A
.text$mn:0000307A loc_307A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:0000307A                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000307E                 jbe     short loc_3099
.text$mn:00003080                 mov     edx, [ebp+0Ch]
.text$mn:00003083                 push    edx             ; Size
.text$mn:00003084                 mov     ecx, [ebp-18h]
.text$mn:00003087                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000308C                 push    eax             ; Src
.text$mn:0000308D                 mov     eax, [ebp-20h]
.text$mn:00003090                 push    eax             ; Dst
.text$mn:00003091                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00003096                 add     esp, 0Ch
.text$mn:00003099
.text$mn:00003099 loc_3099:                               ; CODE XREF: $LN19+Bj
.text$mn:00003099                 push    0               ; Size
.text$mn:0000309B                 push    1               ; char
.text$mn:0000309D                 mov     ecx, [ebp-18h]
.text$mn:000030A0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000030A5                 lea     ecx, [ebp-20h]
.text$mn:000030A8                 push    ecx             ; int
.text$mn:000030A9                 mov     edx, [ebp-18h]
.text$mn:000030AC                 add     edx, 4
.text$mn:000030AF                 push    edx             ; void *
.text$mn:000030B0                 lea     eax, [ebp-13h]
.text$mn:000030B3                 push    eax
.text$mn:000030B4                 mov     ecx, [ebp-18h]
.text$mn:000030B7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000030BC                 mov     ecx, eax
.text$mn:000030BE                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:000030C3                 mov     ecx, [ebp-18h]
.text$mn:000030C6                 mov     edx, [ebp-1Ch]
.text$mn:000030C9                 mov     [ecx+18h], edx
.text$mn:000030CC                 mov     eax, [ebp+0Ch]
.text$mn:000030CF                 push    eax
.text$mn:000030D0                 mov     ecx, [ebp-18h]
.text$mn:000030D3                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000030D8                 mov     ecx, [ebp-0Ch]
.text$mn:000030DB                 mov     large fs:0, ecx
.text$mn:000030E2                 pop     ecx
.text$mn:000030E3                 pop     edi
.text$mn:000030E4                 pop     esi
.text$mn:000030E5                 pop     ebx
.text$mn:000030E6                 mov     esp, ebp
.text$mn:000030E8                 pop     ebp
.text$mn:000030E9                 retn    8
.text$mn:000030E9 $LN19           endp ; sp-analysis failed
.text$mn:000030E9
.text$mn:000030E9 _text$mn        ends
.text$mn:000030E9
.text$x:000030EC ; ===========================================================================
.text$x:000030EC
.text$x:000030EC ; Segment type: Pure code
.text$x:000030EC ; Segment permissions: Read/Execute
.text$x:000030EC _text$x         segment para public 'CODE' use32
.text$x:000030EC                 assume cs:_text$x
.text$x:000030EC                 ;org 30ECh
.text$x:000030EC ; COMDAT (pick associative to section at 2F48)
.text$x:000030EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000030EC
.text$x:000030EC ; =============== S U B R O U T I N E =======================================
.text$x:000030EC
.text$x:000030EC
.text$x:000030EC __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:000030EC                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:000030EC
.text$x:000030EC arg_4           = dword ptr  8
.text$x:000030EC
.text$x:000030EC                 mov     edx, [esp+arg_4]
.text$x:000030F0                 lea     eax, [edx+0Ch]
.text$x:000030F3                 mov     ecx, [edx-24h]
.text$x:000030F6                 xor     ecx, eax
.text$x:000030F8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000030FD                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:00003102                 jmp     ___CxxFrameHandler3
.text$x:00003102 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:00003102
.text$x:00003102 ; ---------------------------------------------------------------------------
.text$x:00003107                 align 4
.text$x:00003107 _text$x         ends
.text$x:00003107
.text$mn:00003108 ; ===========================================================================
.text$mn:00003108
.text$mn:00003108 ; Segment type: Pure code
.text$mn:00003108 ; Segment permissions: Read/Execute
.text$mn:00003108 _text$mn        segment para public 'CODE' use32
.text$mn:00003108                 assume cs:_text$mn
.text$mn:00003108                 ;org 3108h
.text$mn:00003108 ; COMDAT (pick any)
.text$mn:00003108                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003108
.text$mn:00003108 ; =============== S U B R O U T I N E =======================================
.text$mn:00003108
.text$mn:00003108 ; Attributes: bp-based frame
.text$mn:00003108
.text$mn:00003108 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:00003108                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00003108 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:00003108                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:00003108
.text$mn:00003108 var_20          = dword ptr -20h
.text$mn:00003108 var_1C          = dword ptr -1Ch
.text$mn:00003108 var_18          = dword ptr -18h
.text$mn:00003108 var_11          = byte ptr -11h
.text$mn:00003108 var_10          = dword ptr -10h
.text$mn:00003108 var_C           = byte ptr -0Ch
.text$mn:00003108 var_4           = dword ptr -4
.text$mn:00003108 arg_0           = dword ptr  8
.text$mn:00003108
.text$mn:00003108 ; FUNCTION CHUNK AT .text$mn:0000322A SIZE 00000009 BYTES
.text$mn:00003108
.text$mn:00003108                 push    ebp
.text$mn:00003109                 mov     ebp, esp
.text$mn:0000310B                 push    0FFFFFFFFh
.text$mn:0000310D                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00003112                 mov     eax, large fs:0
.text$mn:00003118                 push    eax
.text$mn:00003119                 push    ecx
.text$mn:0000311A                 sub     esp, 10h
.text$mn:0000311D                 push    ebx
.text$mn:0000311E                 push    esi
.text$mn:0000311F                 push    edi
.text$mn:00003120                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003125                 xor     eax, ebp
.text$mn:00003127                 push    eax
.text$mn:00003128                 lea     eax, [ebp+var_C]
.text$mn:0000312B                 mov     large fs:0, eax
.text$mn:00003131                 mov     [ebp+var_10], esp
.text$mn:00003134                 mov     [ebp+var_18], ecx
.text$mn:00003137                 mov     eax, [ebp+arg_0]
.text$mn:0000313A                 or      eax, 7
.text$mn:0000313D                 mov     [ebp+var_1C], eax
.text$mn:00003140                 mov     ecx, [ebp+var_18]
.text$mn:00003143                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00003148                 cmp     eax, [ebp+var_1C]
.text$mn:0000314B                 jnb     short loc_3155
.text$mn:0000314D                 mov     ecx, [ebp+arg_0]
.text$mn:00003150                 mov     [ebp+var_1C], ecx
.text$mn:00003153                 jmp     short loc_31A7
.text$mn:00003155 ; ---------------------------------------------------------------------------
.text$mn:00003155
.text$mn:00003155 loc_3155:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:00003155                 mov     edx, [ebp+var_18]
.text$mn:00003158                 mov     ecx, [edx+18h]
.text$mn:0000315B                 shr     ecx, 1
.text$mn:0000315D                 mov     eax, [ebp+var_1C]
.text$mn:00003160                 xor     edx, edx
.text$mn:00003162                 mov     esi, 3
.text$mn:00003167                 div     esi
.text$mn:00003169                 cmp     ecx, eax
.text$mn:0000316B                 ja      short loc_316F
.text$mn:0000316D                 jmp     short loc_31A7
.text$mn:0000316F ; ---------------------------------------------------------------------------
.text$mn:0000316F
.text$mn:0000316F loc_316F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:0000316F                 mov     ecx, [ebp+var_18]
.text$mn:00003172                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00003177                 mov     edx, [ebp+var_18]
.text$mn:0000317A                 mov     ecx, [edx+18h]
.text$mn:0000317D                 shr     ecx, 1
.text$mn:0000317F                 sub     eax, ecx
.text$mn:00003181                 mov     edx, [ebp+var_18]
.text$mn:00003184                 cmp     [edx+18h], eax
.text$mn:00003187                 ja      short loc_319C
.text$mn:00003189                 mov     eax, [ebp+var_18]
.text$mn:0000318C                 mov     ecx, [eax+18h]
.text$mn:0000318F                 shr     ecx, 1
.text$mn:00003191                 mov     edx, [ebp+var_18]
.text$mn:00003194                 add     ecx, [edx+18h]
.text$mn:00003197                 mov     [ebp+var_1C], ecx
.text$mn:0000319A                 jmp     short loc_31A7
.text$mn:0000319C ; ---------------------------------------------------------------------------
.text$mn:0000319C
.text$mn:0000319C loc_319C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:0000319C                 mov     ecx, [ebp+var_18]
.text$mn:0000319F                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000031A4                 mov     [ebp+var_1C], eax
.text$mn:000031A7
.text$mn:000031A7 loc_31A7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:000031A7                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:000031A7                 mov     [ebp+var_4], 0
.text$mn:000031AE                 mov     eax, [ebp+var_1C]
.text$mn:000031B1                 add     eax, 1
.text$mn:000031B4                 push    eax
.text$mn:000031B5                 lea     ecx, [ebp+var_11]
.text$mn:000031B8                 push    ecx
.text$mn:000031B9                 mov     ecx, [ebp+var_18]
.text$mn:000031BC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000031C1                 mov     ecx, eax
.text$mn:000031C3                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:000031C8                 mov     [ebp+var_20], eax
.text$mn:000031CB                 jmp     short loc_322A
.text$mn:000031CB ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:000031CB
.text$mn:000031CD
.text$mn:000031CD ; =============== S U B R O U T I N E =======================================
.text$mn:000031CD
.text$mn:000031CD
.text$mn:000031CD __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:000031CD                                         ; DATA XREF: .xdata$x:00004BE4o
.text$mn:000031CD
.text$mn:000031CD ; FUNCTION CHUNK AT .text$mn:00003214 SIZE 00000009 BYTES
.text$mn:000031CD ; FUNCTION CHUNK AT .text$mn:00003224 SIZE 00000006 BYTES
.text$mn:000031CD
.text$mn:000031CD                 mov     [ebp-10h], esp
.text$mn:000031D0                 mov     edx, [ebp+8]
.text$mn:000031D3                 mov     [ebp-1Ch], edx
.text$mn:000031D6                 mov     byte ptr [ebp-4], 2
.text$mn:000031DA                 mov     eax, [ebp-1Ch]
.text$mn:000031DD                 add     eax, 1
.text$mn:000031E0                 push    eax
.text$mn:000031E1                 lea     ecx, [ebp-12h]
.text$mn:000031E4                 push    ecx
.text$mn:000031E5                 mov     ecx, [ebp-18h]
.text$mn:000031E8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000031ED                 mov     ecx, eax
.text$mn:000031EF                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:000031F4                 mov     [ebp-20h], eax
.text$mn:000031F7                 jmp     short loc_3214
.text$mn:000031F7 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:000031F7
.text$mn:000031F9
.text$mn:000031F9 ; =============== S U B R O U T I N E =======================================
.text$mn:000031F9
.text$mn:000031F9 ; Attributes: noreturn
.text$mn:000031F9
.text$mn:000031F9 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:000031F9                                         ; DATA XREF: .xdata$x:00004BF4o
.text$mn:000031F9                 push    0
.text$mn:000031FB                 push    1
.text$mn:000031FD                 mov     ecx, [ebp-18h]
.text$mn:00003200                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00003205                 push    0
.text$mn:00003207                 push    0
.text$mn:00003209                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00003209 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:00003209
.text$mn:0000320E ; ---------------------------------------------------------------------------
.text$mn:0000320E                 mov     eax, offset $LN17_0
.text$mn:00003213                 retn
.text$mn:00003214 ; ---------------------------------------------------------------------------
.text$mn:00003214 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00003214
.text$mn:00003214 loc_3214:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00003214                 mov     dword ptr [ebp-4], 1
.text$mn:0000321B                 jmp     short loc_3224
.text$mn:0000321B ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000321D
.text$mn:0000321D ; =============== S U B R O U T I N E =======================================
.text$mn:0000321D
.text$mn:0000321D
.text$mn:0000321D $LN17_0         proc near               ; DATA XREF: .text$mn:0000320Eo
.text$mn:0000321D                 mov     dword ptr [ebp-4], 1
.text$mn:0000321D $LN17_0         endp ; sp-analysis failed
.text$mn:0000321D
.text$mn:00003224 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00003224
.text$mn:00003224 loc_3224:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00003224                 mov     eax, offset $LN19_0
.text$mn:00003229                 retn
.text$mn:00003229 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:0000322A ; ---------------------------------------------------------------------------
.text$mn:0000322A ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:0000322A
.text$mn:0000322A loc_322A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:0000322A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003231                 jmp     short loc_323A
.text$mn:00003231 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00003233
.text$mn:00003233 ; =============== S U B R O U T I N E =======================================
.text$mn:00003233
.text$mn:00003233
.text$mn:00003233 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_3224o
.text$mn:00003233                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:0000323A
.text$mn:0000323A loc_323A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:0000323A                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000323E                 jbe     short loc_3259
.text$mn:00003240                 mov     edx, [ebp+0Ch]
.text$mn:00003243                 push    edx             ; int
.text$mn:00003244                 mov     ecx, [ebp-18h]
.text$mn:00003247                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000324C                 push    eax             ; Src
.text$mn:0000324D                 mov     eax, [ebp-20h]
.text$mn:00003250                 push    eax             ; Dst
.text$mn:00003251                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00003256                 add     esp, 0Ch
.text$mn:00003259
.text$mn:00003259 loc_3259:                               ; CODE XREF: $LN19_0+Bj
.text$mn:00003259                 push    0
.text$mn:0000325B                 push    1
.text$mn:0000325D                 mov     ecx, [ebp-18h]
.text$mn:00003260                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00003265                 lea     ecx, [ebp-20h]
.text$mn:00003268                 push    ecx             ; int
.text$mn:00003269                 mov     edx, [ebp-18h]
.text$mn:0000326C                 add     edx, 4
.text$mn:0000326F                 push    edx             ; void *
.text$mn:00003270                 lea     eax, [ebp-13h]
.text$mn:00003273                 push    eax
.text$mn:00003274                 mov     ecx, [ebp-18h]
.text$mn:00003277                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000327C                 mov     ecx, eax
.text$mn:0000327E                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00003283                 mov     ecx, [ebp-18h]
.text$mn:00003286                 mov     edx, [ebp-1Ch]
.text$mn:00003289                 mov     [ecx+18h], edx
.text$mn:0000328C                 mov     eax, [ebp+0Ch]
.text$mn:0000328F                 push    eax
.text$mn:00003290                 mov     ecx, [ebp-18h]
.text$mn:00003293                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00003298                 mov     ecx, [ebp-0Ch]
.text$mn:0000329B                 mov     large fs:0, ecx
.text$mn:000032A2                 pop     ecx
.text$mn:000032A3                 pop     edi
.text$mn:000032A4                 pop     esi
.text$mn:000032A5                 pop     ebx
.text$mn:000032A6                 mov     esp, ebp
.text$mn:000032A8                 pop     ebp
.text$mn:000032A9                 retn    8
.text$mn:000032A9 $LN19_0         endp ; sp-analysis failed
.text$mn:000032A9
.text$mn:000032A9 _text$mn        ends
.text$mn:000032A9
.text$x:000032AC ; ===========================================================================
.text$x:000032AC
.text$x:000032AC ; Segment type: Pure code
.text$x:000032AC ; Segment permissions: Read/Execute
.text$x:000032AC _text$x         segment para public 'CODE' use32
.text$x:000032AC                 assume cs:_text$x
.text$x:000032AC                 ;org 32ACh
.text$x:000032AC ; COMDAT (pick associative to section at 3108)
.text$x:000032AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000032AC
.text$x:000032AC ; =============== S U B R O U T I N E =======================================
.text$x:000032AC
.text$x:000032AC
.text$x:000032AC __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:000032AC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:000032AC
.text$x:000032AC arg_4           = dword ptr  8
.text$x:000032AC
.text$x:000032AC                 mov     edx, [esp+arg_4]
.text$x:000032B0                 lea     eax, [edx+0Ch]
.text$x:000032B3                 mov     ecx, [edx-24h]
.text$x:000032B6                 xor     ecx, eax
.text$x:000032B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000032BD                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:000032C2                 jmp     ___CxxFrameHandler3
.text$x:000032C2 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:000032C2
.text$x:000032C2 ; ---------------------------------------------------------------------------
.text$x:000032C7                 align 4
.text$x:000032C7 _text$x         ends
.text$x:000032C7
.text$mn:000032C8 ; ===========================================================================
.text$mn:000032C8
.text$mn:000032C8 ; Segment type: Pure code
.text$mn:000032C8 ; Segment permissions: Read/Execute
.text$mn:000032C8 _text$mn        segment para public 'CODE' use32
.text$mn:000032C8                 assume cs:_text$mn
.text$mn:000032C8                 ;org 32C8h
.text$mn:000032C8 ; COMDAT (pick any)
.text$mn:000032C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000032C8
.text$mn:000032C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000032C8
.text$mn:000032C8 ; Attributes: bp-based frame
.text$mn:000032C8
.text$mn:000032C8 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:000032C8                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:000032C8 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:000032C8                                         ; CODE XREF: $LN19+60p
.text$mn:000032C8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:000032C8
.text$mn:000032C8 var_8           = dword ptr -8
.text$mn:000032C8 var_1           = byte ptr -1
.text$mn:000032C8 arg_0           = dword ptr  8
.text$mn:000032C8
.text$mn:000032C8                 push    ebp
.text$mn:000032C9                 mov     ebp, esp
.text$mn:000032CB                 sub     esp, 8
.text$mn:000032CE                 mov     [ebp+var_8], ecx
.text$mn:000032D1                 mov     [ebp+var_1], 0
.text$mn:000032D5                 mov     eax, [ebp+var_8]
.text$mn:000032D8                 mov     ecx, [ebp+arg_0]
.text$mn:000032DB                 mov     [eax+14h], ecx
.text$mn:000032DE                 lea     edx, [ebp+var_1]
.text$mn:000032E1                 push    edx
.text$mn:000032E2                 mov     ecx, [ebp+var_8]
.text$mn:000032E5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000032EA                 add     eax, [ebp+arg_0]
.text$mn:000032ED                 push    eax
.text$mn:000032EE                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:000032F3                 add     esp, 8
.text$mn:000032F6                 mov     esp, ebp
.text$mn:000032F8                 pop     ebp
.text$mn:000032F9                 retn    4
.text$mn:000032F9 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:000032F9
.text$mn:000032F9 _text$mn        ends
.text$mn:000032F9
.text$mn:000032FC ; ===========================================================================
.text$mn:000032FC
.text$mn:000032FC ; Segment type: Pure code
.text$mn:000032FC ; Segment permissions: Read/Execute
.text$mn:000032FC _text$mn        segment para public 'CODE' use32
.text$mn:000032FC                 assume cs:_text$mn
.text$mn:000032FC                 ;org 32FCh
.text$mn:000032FC ; COMDAT (pick any)
.text$mn:000032FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000032FC
.text$mn:000032FC ; =============== S U B R O U T I N E =======================================
.text$mn:000032FC
.text$mn:000032FC ; Attributes: bp-based frame
.text$mn:000032FC
.text$mn:000032FC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:000032FC                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:000032FC ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:000032FC                                         ; CODE XREF: $LN19_0+60p
.text$mn:000032FC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:000032FC
.text$mn:000032FC var_8           = dword ptr -8
.text$mn:000032FC var_2           = word ptr -2
.text$mn:000032FC arg_0           = dword ptr  8
.text$mn:000032FC
.text$mn:000032FC                 push    ebp
.text$mn:000032FD                 mov     ebp, esp
.text$mn:000032FF                 sub     esp, 8
.text$mn:00003302                 mov     [ebp+var_8], ecx
.text$mn:00003305                 xor     eax, eax
.text$mn:00003307                 mov     [ebp+var_2], ax
.text$mn:0000330B                 mov     ecx, [ebp+var_8]
.text$mn:0000330E                 mov     edx, [ebp+arg_0]
.text$mn:00003311                 mov     [ecx+14h], edx
.text$mn:00003314                 lea     eax, [ebp+var_2]
.text$mn:00003317                 push    eax
.text$mn:00003318                 mov     ecx, [ebp+var_8]
.text$mn:0000331B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003320                 mov     ecx, [ebp+arg_0]
.text$mn:00003323                 lea     edx, [eax+ecx*2]
.text$mn:00003326                 push    edx
.text$mn:00003327                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:0000332C                 add     esp, 8
.text$mn:0000332F                 mov     esp, ebp
.text$mn:00003331                 pop     ebp
.text$mn:00003332                 retn    4
.text$mn:00003332 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:00003332
.text$mn:00003332 ; ---------------------------------------------------------------------------
.text$mn:00003335                 align 4
.text$mn:00003335 _text$mn        ends
.text$mn:00003335
.text$mn:00003338 ; ===========================================================================
.text$mn:00003338
.text$mn:00003338 ; Segment type: Pure code
.text$mn:00003338 ; Segment permissions: Read/Execute
.text$mn:00003338 _text$mn        segment para public 'CODE' use32
.text$mn:00003338                 assume cs:_text$mn
.text$mn:00003338                 ;org 3338h
.text$mn:00003338 ; COMDAT (pick any)
.text$mn:00003338                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003338
.text$mn:00003338 ; =============== S U B R O U T I N E =======================================
.text$mn:00003338
.text$mn:00003338 ; Attributes: bp-based frame
.text$mn:00003338
.text$mn:00003338 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00003338                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00003338 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00003338                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00003338
.text$mn:00003338 var_8           = dword ptr -8
.text$mn:00003338 var_1           = byte ptr -1
.text$mn:00003338
.text$mn:00003338                 push    ebp
.text$mn:00003339                 mov     ebp, esp
.text$mn:0000333B                 sub     esp, 8
.text$mn:0000333E                 mov     [ebp+var_8], ecx
.text$mn:00003341                 lea     ecx, [ebp+var_1]
.text$mn:00003344                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00003349                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000334C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00003351                 mov     eax, [ebp+var_8]
.text$mn:00003354                 mov     ecx, [eax]
.text$mn:00003356                 push    ecx
.text$mn:00003357                 lea     ecx, [ebp+var_1]
.text$mn:0000335A                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000335F                 push    1               ; int
.text$mn:00003361                 mov     edx, [ebp+var_8]
.text$mn:00003364                 mov     eax, [edx]
.text$mn:00003366                 push    eax             ; void *
.text$mn:00003367                 lea     ecx, [ebp+var_1]
.text$mn:0000336A                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000336F                 mov     ecx, [ebp+var_8]
.text$mn:00003372                 mov     dword ptr [ecx], 0
.text$mn:00003378                 mov     esp, ebp
.text$mn:0000337A                 pop     ebp
.text$mn:0000337B                 retn
.text$mn:0000337B ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000337B
.text$mn:0000337B _text$mn        ends
.text$mn:0000337B
.text$mn:0000337C ; ===========================================================================
.text$mn:0000337C
.text$mn:0000337C ; Segment type: Pure code
.text$mn:0000337C ; Segment permissions: Read/Execute
.text$mn:0000337C _text$mn        segment para public 'CODE' use32
.text$mn:0000337C                 assume cs:_text$mn
.text$mn:0000337C                 ;org 337Ch
.text$mn:0000337C ; COMDAT (pick any)
.text$mn:0000337C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000337C
.text$mn:0000337C ; =============== S U B R O U T I N E =======================================
.text$mn:0000337C
.text$mn:0000337C ; Attributes: bp-based frame
.text$mn:0000337C
.text$mn:0000337C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:0000337C                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000337C ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000337C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:0000337C
.text$mn:0000337C var_8           = dword ptr -8
.text$mn:0000337C var_1           = byte ptr -1
.text$mn:0000337C
.text$mn:0000337C                 push    ebp
.text$mn:0000337D                 mov     ebp, esp
.text$mn:0000337F                 sub     esp, 8
.text$mn:00003382                 mov     [ebp+var_8], ecx
.text$mn:00003385                 lea     ecx, [ebp+var_1]
.text$mn:00003388                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000338D                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003390                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00003395                 mov     eax, [ebp+var_8]
.text$mn:00003398                 mov     ecx, [eax]
.text$mn:0000339A                 push    ecx
.text$mn:0000339B                 lea     ecx, [ebp+var_1]
.text$mn:0000339E                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000033A3                 push    1               ; int
.text$mn:000033A5                 mov     edx, [ebp+var_8]
.text$mn:000033A8                 mov     eax, [edx]
.text$mn:000033AA                 push    eax             ; void *
.text$mn:000033AB                 lea     ecx, [ebp+var_1]
.text$mn:000033AE                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:000033B3                 mov     ecx, [ebp+var_8]
.text$mn:000033B6                 mov     dword ptr [ecx], 0
.text$mn:000033BC                 mov     esp, ebp
.text$mn:000033BE                 pop     ebp
.text$mn:000033BF                 retn
.text$mn:000033BF ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:000033BF
.text$mn:000033BF _text$mn        ends
.text$mn:000033BF
.text$mn:000033C0 ; ===========================================================================
.text$mn:000033C0
.text$mn:000033C0 ; Segment type: Pure code
.text$mn:000033C0 ; Segment permissions: Read/Execute
.text$mn:000033C0 _text$mn        segment para public 'CODE' use32
.text$mn:000033C0                 assume cs:_text$mn
.text$mn:000033C0                 ;org 33C0h
.text$mn:000033C0 ; COMDAT (pick any)
.text$mn:000033C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000033C0
.text$mn:000033C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000033C0
.text$mn:000033C0 ; Attributes: bp-based frame
.text$mn:000033C0
.text$mn:000033C0 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:000033C0                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:000033C0 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:000033C0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:000033C0                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:000033C0
.text$mn:000033C0 var_4           = dword ptr -4
.text$mn:000033C0 arg_0           = dword ptr  8
.text$mn:000033C0
.text$mn:000033C0                 push    ebp
.text$mn:000033C1                 mov     ebp, esp
.text$mn:000033C3                 push    ecx
.text$mn:000033C4                 mov     [ebp+var_4], ecx
.text$mn:000033C7                 mov     ecx, [ebp+arg_0]
.text$mn:000033CA                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:000033CF                 mov     eax, [ebp+arg_0]
.text$mn:000033D2                 mov     esp, ebp
.text$mn:000033D4                 pop     ebp
.text$mn:000033D5                 retn    4
.text$mn:000033D5 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:000033D5
.text$mn:000033D5 _text$mn        ends
.text$mn:000033D5
.text$mn:000033D8 ; ===========================================================================
.text$mn:000033D8
.text$mn:000033D8 ; Segment type: Pure code
.text$mn:000033D8 ; Segment permissions: Read/Execute
.text$mn:000033D8 _text$mn        segment para public 'CODE' use32
.text$mn:000033D8                 assume cs:_text$mn
.text$mn:000033D8                 ;org 33D8h
.text$mn:000033D8 ; COMDAT (pick any)
.text$mn:000033D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000033D8
.text$mn:000033D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000033D8
.text$mn:000033D8 ; Attributes: bp-based frame
.text$mn:000033D8
.text$mn:000033D8 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:000033D8                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:000033D8 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:000033D8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+B4p
.text$mn:000033D8                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:000033D8
.text$mn:000033D8 var_4           = dword ptr -4
.text$mn:000033D8 arg_0           = dword ptr  8
.text$mn:000033D8
.text$mn:000033D8                 push    ebp
.text$mn:000033D9                 mov     ebp, esp
.text$mn:000033DB                 push    ecx
.text$mn:000033DC                 mov     [ebp+var_4], ecx
.text$mn:000033DF                 mov     ecx, [ebp+arg_0]
.text$mn:000033E2                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:000033E7                 mov     eax, [ebp+arg_0]
.text$mn:000033EA                 mov     esp, ebp
.text$mn:000033EC                 pop     ebp
.text$mn:000033ED                 retn    4
.text$mn:000033ED ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:000033ED
.text$mn:000033ED _text$mn        ends
.text$mn:000033ED
.text$mn:000033F0 ; ===========================================================================
.text$mn:000033F0
.text$mn:000033F0 ; Segment type: Pure code
.text$mn:000033F0 ; Segment permissions: Read/Execute
.text$mn:000033F0 _text$mn        segment para public 'CODE' use32
.text$mn:000033F0                 assume cs:_text$mn
.text$mn:000033F0                 ;org 33F0h
.text$mn:000033F0 ; COMDAT (pick any)
.text$mn:000033F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000033F0
.text$mn:000033F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000033F0
.text$mn:000033F0 ; Attributes: bp-based frame
.text$mn:000033F0
.text$mn:000033F0 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:000033F0                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:000033F0 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:000033F0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:000033F0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:000033F0
.text$mn:000033F0 var_C           = dword ptr -0Ch
.text$mn:000033F0 Size            = dword ptr -8
.text$mn:000033F0 var_4           = dword ptr -4
.text$mn:000033F0 arg_0           = dword ptr  8
.text$mn:000033F0 arg_4           = byte ptr  0Ch
.text$mn:000033F0
.text$mn:000033F0                 push    ebp
.text$mn:000033F1                 mov     ebp, esp
.text$mn:000033F3                 sub     esp, 0Ch
.text$mn:000033F6                 mov     [ebp+var_4], ecx
.text$mn:000033F9                 mov     ecx, [ebp+var_4]
.text$mn:000033FC                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00003401                 cmp     eax, [ebp+arg_0]
.text$mn:00003404                 jnb     short loc_340E
.text$mn:00003406                 mov     ecx, [ebp+var_4]
.text$mn:00003409                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:0000340E
.text$mn:0000340E loc_340E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:0000340E                 mov     eax, [ebp+var_4]
.text$mn:00003411                 mov     ecx, [eax+18h]
.text$mn:00003414                 cmp     ecx, [ebp+arg_0]
.text$mn:00003417                 jnb     short loc_342E
.text$mn:00003419                 mov     edx, [ebp+var_4]
.text$mn:0000341C                 mov     eax, [edx+14h]
.text$mn:0000341F                 push    eax
.text$mn:00003420                 mov     ecx, [ebp+arg_0]
.text$mn:00003423                 push    ecx
.text$mn:00003424                 mov     ecx, [ebp+var_4]
.text$mn:00003427                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:0000342C                 jmp     short loc_3478
.text$mn:0000342E ; ---------------------------------------------------------------------------
.text$mn:0000342E
.text$mn:0000342E loc_342E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:0000342E                 movzx   edx, [ebp+arg_4]
.text$mn:00003432                 test    edx, edx
.text$mn:00003434                 jz      short loc_3468
.text$mn:00003436                 cmp     [ebp+arg_0], 10h
.text$mn:0000343A                 jnb     short loc_3468
.text$mn:0000343C                 mov     eax, [ebp+var_4]
.text$mn:0000343F                 mov     ecx, [ebp+arg_0]
.text$mn:00003442                 cmp     ecx, [eax+14h]
.text$mn:00003445                 jnb     short loc_344F
.text$mn:00003447                 mov     edx, [ebp+arg_0]
.text$mn:0000344A                 mov     [ebp+Size], edx
.text$mn:0000344D                 jmp     short loc_3458
.text$mn:0000344F ; ---------------------------------------------------------------------------
.text$mn:0000344F
.text$mn:0000344F loc_344F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:0000344F                 mov     eax, [ebp+var_4]
.text$mn:00003452                 mov     ecx, [eax+14h]
.text$mn:00003455                 mov     [ebp+Size], ecx
.text$mn:00003458
.text$mn:00003458 loc_3458:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00003458                 mov     edx, [ebp+Size]
.text$mn:0000345B                 push    edx             ; Size
.text$mn:0000345C                 push    1               ; char
.text$mn:0000345E                 mov     ecx, [ebp+var_4]
.text$mn:00003461                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00003466                 jmp     short loc_3478
.text$mn:00003468 ; ---------------------------------------------------------------------------
.text$mn:00003468
.text$mn:00003468 loc_3468:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00003468                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00003468                 cmp     [ebp+arg_0], 0
.text$mn:0000346C                 jnz     short loc_3478
.text$mn:0000346E                 push    0
.text$mn:00003470                 mov     ecx, [ebp+var_4]
.text$mn:00003473                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00003478
.text$mn:00003478 loc_3478:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00003478                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00003478                 cmp     [ebp+arg_0], 0
.text$mn:0000347C                 jbe     short loc_3487
.text$mn:0000347E                 mov     [ebp+var_C], 1
.text$mn:00003485                 jmp     short loc_348E
.text$mn:00003487 ; ---------------------------------------------------------------------------
.text$mn:00003487
.text$mn:00003487 loc_3487:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00003487                 mov     [ebp+var_C], 0
.text$mn:0000348E
.text$mn:0000348E loc_348E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:0000348E                 mov     al, byte ptr [ebp+var_C]
.text$mn:00003491                 mov     esp, ebp
.text$mn:00003493                 pop     ebp
.text$mn:00003494                 retn    8
.text$mn:00003494 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00003494
.text$mn:00003494 ; ---------------------------------------------------------------------------
.text$mn:00003497                 align 4
.text$mn:00003497 _text$mn        ends
.text$mn:00003497
.text$mn:00003498 ; ===========================================================================
.text$mn:00003498
.text$mn:00003498 ; Segment type: Pure code
.text$mn:00003498 ; Segment permissions: Read/Execute
.text$mn:00003498 _text$mn        segment para public 'CODE' use32
.text$mn:00003498                 assume cs:_text$mn
.text$mn:00003498                 ;org 3498h
.text$mn:00003498 ; COMDAT (pick any)
.text$mn:00003498                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003498
.text$mn:00003498 ; =============== S U B R O U T I N E =======================================
.text$mn:00003498
.text$mn:00003498 ; Attributes: bp-based frame
.text$mn:00003498
.text$mn:00003498 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00003498                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00003498 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00003498                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Dp
.text$mn:00003498                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+8Ep ...
.text$mn:00003498
.text$mn:00003498 var_C           = dword ptr -0Ch
.text$mn:00003498 var_8           = dword ptr -8
.text$mn:00003498 var_4           = dword ptr -4
.text$mn:00003498 arg_0           = dword ptr  8
.text$mn:00003498 arg_4           = byte ptr  0Ch
.text$mn:00003498
.text$mn:00003498                 push    ebp
.text$mn:00003499                 mov     ebp, esp
.text$mn:0000349B                 sub     esp, 0Ch
.text$mn:0000349E                 mov     [ebp+var_4], ecx
.text$mn:000034A1                 mov     ecx, [ebp+var_4]
.text$mn:000034A4                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:000034A9                 cmp     eax, [ebp+arg_0]
.text$mn:000034AC                 jnb     short loc_34B6
.text$mn:000034AE                 mov     ecx, [ebp+var_4]
.text$mn:000034B1                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000034B6
.text$mn:000034B6 loc_34B6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:000034B6                 mov     eax, [ebp+var_4]
.text$mn:000034B9                 mov     ecx, [eax+18h]
.text$mn:000034BC                 cmp     ecx, [ebp+arg_0]
.text$mn:000034BF                 jnb     short loc_34D6
.text$mn:000034C1                 mov     edx, [ebp+var_4]
.text$mn:000034C4                 mov     eax, [edx+14h]
.text$mn:000034C7                 push    eax
.text$mn:000034C8                 mov     ecx, [ebp+arg_0]
.text$mn:000034CB                 push    ecx
.text$mn:000034CC                 mov     ecx, [ebp+var_4]
.text$mn:000034CF                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:000034D4                 jmp     short loc_3520
.text$mn:000034D6 ; ---------------------------------------------------------------------------
.text$mn:000034D6
.text$mn:000034D6 loc_34D6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:000034D6                 movzx   edx, [ebp+arg_4]
.text$mn:000034DA                 test    edx, edx
.text$mn:000034DC                 jz      short loc_3510
.text$mn:000034DE                 cmp     [ebp+arg_0], 8
.text$mn:000034E2                 jnb     short loc_3510
.text$mn:000034E4                 mov     eax, [ebp+var_4]
.text$mn:000034E7                 mov     ecx, [ebp+arg_0]
.text$mn:000034EA                 cmp     ecx, [eax+14h]
.text$mn:000034ED                 jnb     short loc_34F7
.text$mn:000034EF                 mov     edx, [ebp+arg_0]
.text$mn:000034F2                 mov     [ebp+var_8], edx
.text$mn:000034F5                 jmp     short loc_3500
.text$mn:000034F7 ; ---------------------------------------------------------------------------
.text$mn:000034F7
.text$mn:000034F7 loc_34F7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:000034F7                 mov     eax, [ebp+var_4]
.text$mn:000034FA                 mov     ecx, [eax+14h]
.text$mn:000034FD                 mov     [ebp+var_8], ecx
.text$mn:00003500
.text$mn:00003500 loc_3500:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00003500                 mov     edx, [ebp+var_8]
.text$mn:00003503                 push    edx
.text$mn:00003504                 push    1
.text$mn:00003506                 mov     ecx, [ebp+var_4]
.text$mn:00003509                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000350E                 jmp     short loc_3520
.text$mn:00003510 ; ---------------------------------------------------------------------------
.text$mn:00003510
.text$mn:00003510 loc_3510:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00003510                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00003510                 cmp     [ebp+arg_0], 0
.text$mn:00003514                 jnz     short loc_3520
.text$mn:00003516                 push    0
.text$mn:00003518                 mov     ecx, [ebp+var_4]
.text$mn:0000351B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00003520
.text$mn:00003520 loc_3520:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:00003520                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:00003520                 cmp     [ebp+arg_0], 0
.text$mn:00003524                 jbe     short loc_352F
.text$mn:00003526                 mov     [ebp+var_C], 1
.text$mn:0000352D                 jmp     short loc_3536
.text$mn:0000352F ; ---------------------------------------------------------------------------
.text$mn:0000352F
.text$mn:0000352F loc_352F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:0000352F                 mov     [ebp+var_C], 0
.text$mn:00003536
.text$mn:00003536 loc_3536:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:00003536                 mov     al, byte ptr [ebp+var_C]
.text$mn:00003539                 mov     esp, ebp
.text$mn:0000353B                 pop     ebp
.text$mn:0000353C                 retn    8
.text$mn:0000353C ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:0000353C
.text$mn:0000353C ; ---------------------------------------------------------------------------
.text$mn:0000353F                 align 10h
.text$mn:0000353F _text$mn        ends
.text$mn:0000353F
.text$mn:00003540 ; ===========================================================================
.text$mn:00003540
.text$mn:00003540 ; Segment type: Pure code
.text$mn:00003540 ; Segment permissions: Read/Execute
.text$mn:00003540 _text$mn        segment para public 'CODE' use32
.text$mn:00003540                 assume cs:_text$mn
.text$mn:00003540                 ;org 3540h
.text$mn:00003540 ; COMDAT (pick any)
.text$mn:00003540                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003540
.text$mn:00003540 ; =============== S U B R O U T I N E =======================================
.text$mn:00003540
.text$mn:00003540 ; Attributes: bp-based frame
.text$mn:00003540
.text$mn:00003540 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00003540                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00003540 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00003540                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00003540
.text$mn:00003540 var_4           = dword ptr -4
.text$mn:00003540 arg_0           = dword ptr  8
.text$mn:00003540
.text$mn:00003540                 push    ebp
.text$mn:00003541                 mov     ebp, esp
.text$mn:00003543                 push    ecx
.text$mn:00003544                 mov     [ebp+var_4], ecx
.text$mn:00003547                 cmp     [ebp+arg_0], 0
.text$mn:0000354B                 jz      short loc_356D
.text$mn:0000354D                 mov     ecx, [ebp+var_4]
.text$mn:00003550                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00003555                 cmp     [ebp+arg_0], eax
.text$mn:00003558                 jb      short loc_356D
.text$mn:0000355A                 mov     ecx, [ebp+var_4]
.text$mn:0000355D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00003562                 mov     ecx, [ebp+var_4]
.text$mn:00003565                 add     eax, [ecx+14h]
.text$mn:00003568                 cmp     eax, [ebp+arg_0]
.text$mn:0000356B                 ja      short loc_3573
.text$mn:0000356D
.text$mn:0000356D loc_356D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:0000356D                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:0000356D                 xor     al, al
.text$mn:0000356F                 jmp     short loc_3575
.text$mn:00003571 ; ---------------------------------------------------------------------------
.text$mn:00003571                 jmp     short loc_3575
.text$mn:00003573 ; ---------------------------------------------------------------------------
.text$mn:00003573
.text$mn:00003573 loc_3573:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00003573                 mov     al, 1
.text$mn:00003575
.text$mn:00003575 loc_3575:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00003575                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00003575                 mov     esp, ebp
.text$mn:00003577                 pop     ebp
.text$mn:00003578                 retn    4
.text$mn:00003578 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00003578
.text$mn:00003578 ; ---------------------------------------------------------------------------
.text$mn:0000357B                 align 4
.text$mn:0000357B _text$mn        ends
.text$mn:0000357B
.text$mn:0000357C ; ===========================================================================
.text$mn:0000357C
.text$mn:0000357C ; Segment type: Pure code
.text$mn:0000357C ; Segment permissions: Read/Execute
.text$mn:0000357C _text$mn        segment para public 'CODE' use32
.text$mn:0000357C                 assume cs:_text$mn
.text$mn:0000357C                 ;org 357Ch
.text$mn:0000357C ; COMDAT (pick any)
.text$mn:0000357C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000357C
.text$mn:0000357C ; =============== S U B R O U T I N E =======================================
.text$mn:0000357C
.text$mn:0000357C ; Attributes: bp-based frame
.text$mn:0000357C
.text$mn:0000357C ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000357C                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:0000357C ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:0000357C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+2Cp
.text$mn:0000357C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap
.text$mn:0000357C
.text$mn:0000357C var_4           = dword ptr -4
.text$mn:0000357C arg_0           = dword ptr  8
.text$mn:0000357C
.text$mn:0000357C                 push    ebp
.text$mn:0000357D                 mov     ebp, esp
.text$mn:0000357F                 push    ecx
.text$mn:00003580                 mov     [ebp+var_4], ecx
.text$mn:00003583                 cmp     [ebp+arg_0], 0
.text$mn:00003587                 jz      short loc_35AC
.text$mn:00003589                 mov     ecx, [ebp+var_4]
.text$mn:0000358C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003591                 cmp     [ebp+arg_0], eax
.text$mn:00003594                 jb      short loc_35AC
.text$mn:00003596                 mov     ecx, [ebp+var_4]
.text$mn:00003599                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000359E                 mov     ecx, [ebp+var_4]
.text$mn:000035A1                 mov     edx, [ecx+14h]
.text$mn:000035A4                 lea     eax, [eax+edx*2]
.text$mn:000035A7                 cmp     eax, [ebp+arg_0]
.text$mn:000035AA                 ja      short loc_35B2
.text$mn:000035AC
.text$mn:000035AC loc_35AC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:000035AC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:000035AC                 xor     al, al
.text$mn:000035AE                 jmp     short loc_35B4
.text$mn:000035B0 ; ---------------------------------------------------------------------------
.text$mn:000035B0                 jmp     short loc_35B4
.text$mn:000035B2 ; ---------------------------------------------------------------------------
.text$mn:000035B2
.text$mn:000035B2 loc_35B2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:000035B2                 mov     al, 1
.text$mn:000035B4
.text$mn:000035B4 loc_35B4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:000035B4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:000035B4                 mov     esp, ebp
.text$mn:000035B6                 pop     ebp
.text$mn:000035B7                 retn    4
.text$mn:000035B7 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:000035B7
.text$mn:000035B7 ; ---------------------------------------------------------------------------
.text$mn:000035BA                 align 4
.text$mn:000035BA _text$mn        ends
.text$mn:000035BA
.text$mn:000035BC ; ===========================================================================
.text$mn:000035BC
.text$mn:000035BC ; Segment type: Pure code
.text$mn:000035BC ; Segment permissions: Read/Execute
.text$mn:000035BC _text$mn        segment para public 'CODE' use32
.text$mn:000035BC                 assume cs:_text$mn
.text$mn:000035BC                 ;org 35BCh
.text$mn:000035BC ; COMDAT (pick any)
.text$mn:000035BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035BC
.text$mn:000035BC ; =============== S U B R O U T I N E =======================================
.text$mn:000035BC
.text$mn:000035BC ; Attributes: bp-based frame
.text$mn:000035BC
.text$mn:000035BC ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:000035BC                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:000035BC ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:000035BC                                         ; CODE XREF: $LN19+14p
.text$mn:000035BC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:000035BC
.text$mn:000035BC var_8           = dword ptr -8
.text$mn:000035BC var_4           = dword ptr -4
.text$mn:000035BC
.text$mn:000035BC                 push    ebp
.text$mn:000035BD                 mov     ebp, esp
.text$mn:000035BF                 sub     esp, 8
.text$mn:000035C2                 mov     [ebp+var_4], ecx
.text$mn:000035C5                 mov     eax, [ebp+var_4]
.text$mn:000035C8                 cmp     dword ptr [eax+18h], 10h
.text$mn:000035CC                 jb      short loc_35E2
.text$mn:000035CE                 mov     ecx, [ebp+var_4]
.text$mn:000035D1                 mov     edx, [ecx+4]
.text$mn:000035D4                 push    edx
.text$mn:000035D5                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000035DA                 add     esp, 4
.text$mn:000035DD                 mov     [ebp+var_8], eax
.text$mn:000035E0                 jmp     short loc_35EB
.text$mn:000035E2 ; ---------------------------------------------------------------------------
.text$mn:000035E2
.text$mn:000035E2 loc_35E2:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:000035E2                 mov     eax, [ebp+var_4]
.text$mn:000035E5                 add     eax, 4
.text$mn:000035E8                 mov     [ebp+var_8], eax
.text$mn:000035EB
.text$mn:000035EB loc_35EB:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:000035EB                 mov     eax, [ebp+var_8]
.text$mn:000035EE                 mov     esp, ebp
.text$mn:000035F0                 pop     ebp
.text$mn:000035F1                 retn
.text$mn:000035F1 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:000035F1
.text$mn:000035F1 ; ---------------------------------------------------------------------------
.text$mn:000035F2                 align 4
.text$mn:000035F2 _text$mn        ends
.text$mn:000035F2
.text$mn:000035F4 ; ===========================================================================
.text$mn:000035F4
.text$mn:000035F4 ; Segment type: Pure code
.text$mn:000035F4 ; Segment permissions: Read/Execute
.text$mn:000035F4 _text$mn        segment para public 'CODE' use32
.text$mn:000035F4                 assume cs:_text$mn
.text$mn:000035F4                 ;org 35F4h
.text$mn:000035F4 ; COMDAT (pick any)
.text$mn:000035F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035F4
.text$mn:000035F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000035F4
.text$mn:000035F4 ; Attributes: bp-based frame
.text$mn:000035F4
.text$mn:000035F4 ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:000035F4                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:000035F4 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:000035F4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:000035F4
.text$mn:000035F4 var_8           = dword ptr -8
.text$mn:000035F4 var_4           = dword ptr -4
.text$mn:000035F4
.text$mn:000035F4                 push    ebp
.text$mn:000035F5                 mov     ebp, esp
.text$mn:000035F7                 sub     esp, 8
.text$mn:000035FA                 mov     [ebp+var_4], ecx
.text$mn:000035FD                 mov     eax, [ebp+var_4]
.text$mn:00003600                 cmp     dword ptr [eax+18h], 10h
.text$mn:00003604                 jb      short loc_361A
.text$mn:00003606                 mov     ecx, [ebp+var_4]
.text$mn:00003609                 mov     edx, [ecx+4]
.text$mn:0000360C                 push    edx
.text$mn:0000360D                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00003612                 add     esp, 4
.text$mn:00003615                 mov     [ebp+var_8], eax
.text$mn:00003618                 jmp     short loc_3623
.text$mn:0000361A ; ---------------------------------------------------------------------------
.text$mn:0000361A
.text$mn:0000361A loc_361A:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:0000361A                 mov     eax, [ebp+var_4]
.text$mn:0000361D                 add     eax, 4
.text$mn:00003620                 mov     [ebp+var_8], eax
.text$mn:00003623
.text$mn:00003623 loc_3623:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00003623                 mov     eax, [ebp+var_8]
.text$mn:00003626                 mov     esp, ebp
.text$mn:00003628                 pop     ebp
.text$mn:00003629                 retn
.text$mn:00003629 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00003629
.text$mn:00003629 ; ---------------------------------------------------------------------------
.text$mn:0000362A                 align 4
.text$mn:0000362A _text$mn        ends
.text$mn:0000362A
.text$mn:0000362C ; ===========================================================================
.text$mn:0000362C
.text$mn:0000362C ; Segment type: Pure code
.text$mn:0000362C ; Segment permissions: Read/Execute
.text$mn:0000362C _text$mn        segment para public 'CODE' use32
.text$mn:0000362C                 assume cs:_text$mn
.text$mn:0000362C                 ;org 362Ch
.text$mn:0000362C ; COMDAT (pick any)
.text$mn:0000362C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000362C
.text$mn:0000362C ; =============== S U B R O U T I N E =======================================
.text$mn:0000362C
.text$mn:0000362C ; Attributes: bp-based frame
.text$mn:0000362C
.text$mn:0000362C ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000362C                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:0000362C ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:0000362C                                         ; CODE XREF: $LN19_0+14p
.text$mn:0000362C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+1Fp ...
.text$mn:0000362C
.text$mn:0000362C var_8           = dword ptr -8
.text$mn:0000362C var_4           = dword ptr -4
.text$mn:0000362C
.text$mn:0000362C                 push    ebp
.text$mn:0000362D                 mov     ebp, esp
.text$mn:0000362F                 sub     esp, 8
.text$mn:00003632                 mov     [ebp+var_4], ecx
.text$mn:00003635                 mov     eax, [ebp+var_4]
.text$mn:00003638                 cmp     dword ptr [eax+18h], 8
.text$mn:0000363C                 jb      short loc_3652
.text$mn:0000363E                 mov     ecx, [ebp+var_4]
.text$mn:00003641                 mov     edx, [ecx+4]
.text$mn:00003644                 push    edx
.text$mn:00003645                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000364A                 add     esp, 4
.text$mn:0000364D                 mov     [ebp+var_8], eax
.text$mn:00003650                 jmp     short loc_365B
.text$mn:00003652 ; ---------------------------------------------------------------------------
.text$mn:00003652
.text$mn:00003652 loc_3652:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00003652                 mov     eax, [ebp+var_4]
.text$mn:00003655                 add     eax, 4
.text$mn:00003658                 mov     [ebp+var_8], eax
.text$mn:0000365B
.text$mn:0000365B loc_365B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000365B                 mov     eax, [ebp+var_8]
.text$mn:0000365E                 mov     esp, ebp
.text$mn:00003660                 pop     ebp
.text$mn:00003661                 retn
.text$mn:00003661 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00003661
.text$mn:00003661 ; ---------------------------------------------------------------------------
.text$mn:00003662                 align 4
.text$mn:00003662 _text$mn        ends
.text$mn:00003662
.text$mn:00003664 ; ===========================================================================
.text$mn:00003664
.text$mn:00003664 ; Segment type: Pure code
.text$mn:00003664 ; Segment permissions: Read/Execute
.text$mn:00003664 _text$mn        segment para public 'CODE' use32
.text$mn:00003664                 assume cs:_text$mn
.text$mn:00003664                 ;org 3664h
.text$mn:00003664 ; COMDAT (pick any)
.text$mn:00003664                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003664
.text$mn:00003664 ; =============== S U B R O U T I N E =======================================
.text$mn:00003664
.text$mn:00003664 ; Attributes: bp-based frame
.text$mn:00003664
.text$mn:00003664 ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00003664                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00003664 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00003664                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+80p
.text$mn:00003664                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp ...
.text$mn:00003664
.text$mn:00003664 var_8           = dword ptr -8
.text$mn:00003664 var_4           = dword ptr -4
.text$mn:00003664
.text$mn:00003664                 push    ebp
.text$mn:00003665                 mov     ebp, esp
.text$mn:00003667                 sub     esp, 8
.text$mn:0000366A                 mov     [ebp+var_4], ecx
.text$mn:0000366D                 mov     eax, [ebp+var_4]
.text$mn:00003670                 cmp     dword ptr [eax+18h], 8
.text$mn:00003674                 jb      short loc_368A
.text$mn:00003676                 mov     ecx, [ebp+var_4]
.text$mn:00003679                 mov     edx, [ecx+4]
.text$mn:0000367C                 push    edx
.text$mn:0000367D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00003682                 add     esp, 4
.text$mn:00003685                 mov     [ebp+var_8], eax
.text$mn:00003688                 jmp     short loc_3693
.text$mn:0000368A ; ---------------------------------------------------------------------------
.text$mn:0000368A
.text$mn:0000368A loc_368A:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:0000368A                 mov     eax, [ebp+var_4]
.text$mn:0000368D                 add     eax, 4
.text$mn:00003690                 mov     [ebp+var_8], eax
.text$mn:00003693
.text$mn:00003693 loc_3693:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00003693                 mov     eax, [ebp+var_8]
.text$mn:00003696                 mov     esp, ebp
.text$mn:00003698                 pop     ebp
.text$mn:00003699                 retn
.text$mn:00003699 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00003699
.text$mn:00003699 ; ---------------------------------------------------------------------------
.text$mn:0000369A                 align 4
.text$mn:0000369A _text$mn        ends
.text$mn:0000369A
.text$mn:0000369C ; ===========================================================================
.text$mn:0000369C
.text$mn:0000369C ; Segment type: Pure code
.text$mn:0000369C ; Segment permissions: Read/Execute
.text$mn:0000369C _text$mn        segment para public 'CODE' use32
.text$mn:0000369C                 assume cs:_text$mn
.text$mn:0000369C                 ;org 369Ch
.text$mn:0000369C ; COMDAT (pick any)
.text$mn:0000369C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000369C
.text$mn:0000369C ; =============== S U B R O U T I N E =======================================
.text$mn:0000369C
.text$mn:0000369C ; Attributes: bp-based frame
.text$mn:0000369C
.text$mn:0000369C ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:0000369C                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000369C ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:0000369C                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:0000369C                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:0000369C
.text$mn:0000369C var_18          = byte ptr -18h
.text$mn:0000369C var_14          = dword ptr -14h
.text$mn:0000369C var_10          = dword ptr -10h
.text$mn:0000369C var_C           = dword ptr -0Ch
.text$mn:0000369C var_4           = dword ptr -4
.text$mn:0000369C
.text$mn:0000369C                 push    ebp
.text$mn:0000369D                 mov     ebp, esp
.text$mn:0000369F                 push    0FFFFFFFFh
.text$mn:000036A1                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:000036A6                 mov     eax, large fs:0
.text$mn:000036AC                 push    eax
.text$mn:000036AD                 sub     esp, 0Ch
.text$mn:000036B0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000036B5                 xor     eax, ebp
.text$mn:000036B7                 push    eax
.text$mn:000036B8                 lea     eax, [ebp+var_C]
.text$mn:000036BB                 mov     large fs:0, eax
.text$mn:000036C1                 mov     [ebp+var_14], ecx
.text$mn:000036C4                 mov     eax, [ebp+var_14]
.text$mn:000036C7                 cmp     dword ptr [eax], 0
.text$mn:000036CA                 jz      short loc_3727
.text$mn:000036CC                 push    3               ; int
.text$mn:000036CE                 lea     ecx, [ebp+var_18] ; this
.text$mn:000036D1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000036D6                 mov     [ebp+var_4], 0
.text$mn:000036DD                 mov     ecx, [ebp+var_14]
.text$mn:000036E0                 mov     edx, [ecx]
.text$mn:000036E2                 add     edx, 4
.text$mn:000036E5                 mov     [ebp+var_10], edx
.text$mn:000036E8                 jmp     short loc_36F7
.text$mn:000036EA ; ---------------------------------------------------------------------------
.text$mn:000036EA
.text$mn:000036EA loc_36EA:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:000036EA                 mov     eax, [ebp+var_10]
.text$mn:000036ED                 mov     ecx, [eax]
.text$mn:000036EF                 mov     edx, [ebp+var_10]
.text$mn:000036F2                 mov     eax, [ecx+4]
.text$mn:000036F5                 mov     [edx], eax
.text$mn:000036F7
.text$mn:000036F7 loc_36F7:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:000036F7                 mov     ecx, [ebp+var_10]
.text$mn:000036FA                 cmp     dword ptr [ecx], 0
.text$mn:000036FD                 jz      short loc_370C
.text$mn:000036FF                 mov     edx, [ebp+var_10]
.text$mn:00003702                 mov     eax, [edx]
.text$mn:00003704                 mov     dword ptr [eax], 0
.text$mn:0000370A                 jmp     short loc_36EA
.text$mn:0000370C ; ---------------------------------------------------------------------------
.text$mn:0000370C
.text$mn:0000370C loc_370C:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:0000370C                 mov     ecx, [ebp+var_14]
.text$mn:0000370F                 mov     edx, [ecx]
.text$mn:00003711                 mov     dword ptr [edx+4], 0
.text$mn:00003718                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000371F                 lea     ecx, [ebp+var_18] ; this
.text$mn:00003722                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00003727
.text$mn:00003727 loc_3727:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00003727                 mov     ecx, [ebp+var_C]
.text$mn:0000372A                 mov     large fs:0, ecx
.text$mn:00003731                 pop     ecx
.text$mn:00003732                 mov     esp, ebp
.text$mn:00003734                 pop     ebp
.text$mn:00003735                 retn
.text$mn:00003735 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00003735
.text$mn:00003735 ; ---------------------------------------------------------------------------
.text$mn:00003736                 align 4
.text$mn:00003736 _text$mn        ends
.text$mn:00003736
.text$x:00003738 ; ===========================================================================
.text$x:00003738
.text$x:00003738 ; Segment type: Pure code
.text$x:00003738 ; Segment permissions: Read/Execute
.text$x:00003738 _text$x         segment para public 'CODE' use32
.text$x:00003738                 assume cs:_text$x
.text$x:00003738                 ;org 3738h
.text$x:00003738 ; COMDAT (pick associative to section at 369C)
.text$x:00003738                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003738
.text$x:00003738 ; =============== S U B R O U T I N E =======================================
.text$x:00003738
.text$x:00003738
.text$x:00003738 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00003738                                         ; DATA XREF: .xdata$x:00004788o
.text$x:00003738                 lea     ecx, [ebp-18h]  ; this
.text$x:0000373B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000373B __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:0000373B
.text$x:00003740
.text$x:00003740 ; =============== S U B R O U T I N E =======================================
.text$x:00003740
.text$x:00003740
.text$x:00003740 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00003740                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00003740
.text$x:00003740 arg_4           = dword ptr  8
.text$x:00003740
.text$x:00003740                 mov     edx, [esp+arg_4]
.text$x:00003744                 lea     eax, [edx+0Ch]
.text$x:00003747                 mov     ecx, [edx-10h]
.text$x:0000374A                 xor     ecx, eax
.text$x:0000374C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003751                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00003756                 jmp     ___CxxFrameHandler3
.text$x:00003756 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00003756
.text$x:00003756 ; ---------------------------------------------------------------------------
.text$x:0000375B                 align 4
.text$x:0000375B _text$x         ends
.text$x:0000375B
.text$mn:0000375C ; ===========================================================================
.text$mn:0000375C
.text$mn:0000375C ; Segment type: Pure code
.text$mn:0000375C ; Segment permissions: Read/Execute
.text$mn:0000375C _text$mn        segment para public 'CODE' use32
.text$mn:0000375C                 assume cs:_text$mn
.text$mn:0000375C                 ;org 375Ch
.text$mn:0000375C ; COMDAT (pick any)
.text$mn:0000375C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000375C
.text$mn:0000375C ; =============== S U B R O U T I N E =======================================
.text$mn:0000375C
.text$mn:0000375C ; Attributes: bp-based frame
.text$mn:0000375C
.text$mn:0000375C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:0000375C                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:0000375C ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:0000375C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:0000375C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:0000375C
.text$mn:0000375C var_C           = dword ptr -0Ch
.text$mn:0000375C var_8           = dword ptr -8
.text$mn:0000375C var_2           = byte ptr -2
.text$mn:0000375C var_1           = byte ptr -1
.text$mn:0000375C arg_0           = byte ptr  8
.text$mn:0000375C Size            = dword ptr  0Ch
.text$mn:0000375C
.text$mn:0000375C                 push    ebp
.text$mn:0000375D                 mov     ebp, esp
.text$mn:0000375F                 sub     esp, 0Ch
.text$mn:00003762                 mov     [ebp+var_8], ecx
.text$mn:00003765                 movzx   eax, [ebp+arg_0]
.text$mn:00003769                 test    eax, eax
.text$mn:0000376B                 jnz     short loc_376F
.text$mn:0000376D                 jmp     short loc_37E2
.text$mn:0000376F ; ---------------------------------------------------------------------------
.text$mn:0000376F
.text$mn:0000376F loc_376F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:0000376F                 mov     ecx, [ebp+var_8]
.text$mn:00003772                 cmp     dword ptr [ecx+18h], 10h
.text$mn:00003776                 jb      short loc_37E2
.text$mn:00003778                 mov     edx, [ebp+var_8]
.text$mn:0000377B                 mov     eax, [edx+4]
.text$mn:0000377E                 mov     [ebp+var_C], eax
.text$mn:00003781                 mov     ecx, [ebp+var_8]
.text$mn:00003784                 add     ecx, 4
.text$mn:00003787                 push    ecx
.text$mn:00003788                 lea     edx, [ebp+var_1]
.text$mn:0000378B                 push    edx
.text$mn:0000378C                 mov     ecx, [ebp+var_8]
.text$mn:0000378F                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00003794                 mov     ecx, eax
.text$mn:00003796                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:0000379B                 cmp     [ebp+Size], 0
.text$mn:0000379F                 jbe     short loc_37C1
.text$mn:000037A1                 mov     eax, [ebp+Size]
.text$mn:000037A4                 push    eax             ; Size
.text$mn:000037A5                 mov     ecx, [ebp+var_C]
.text$mn:000037A8                 push    ecx
.text$mn:000037A9                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000037AE                 add     esp, 4
.text$mn:000037B1                 push    eax             ; Src
.text$mn:000037B2                 mov     edx, [ebp+var_8]
.text$mn:000037B5                 add     edx, 4
.text$mn:000037B8                 push    edx             ; Dst
.text$mn:000037B9                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:000037BE                 add     esp, 0Ch
.text$mn:000037C1
.text$mn:000037C1 loc_37C1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:000037C1                 mov     eax, [ebp+var_8]
.text$mn:000037C4                 mov     ecx, [eax+18h]
.text$mn:000037C7                 add     ecx, 1
.text$mn:000037CA                 push    ecx             ; int
.text$mn:000037CB                 mov     edx, [ebp+var_C]
.text$mn:000037CE                 push    edx             ; void *
.text$mn:000037CF                 lea     eax, [ebp+var_2]
.text$mn:000037D2                 push    eax
.text$mn:000037D3                 mov     ecx, [ebp+var_8]
.text$mn:000037D6                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000037DB                 mov     ecx, eax
.text$mn:000037DD                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:000037E2
.text$mn:000037E2 loc_37E2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:000037E2                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:000037E2                 mov     ecx, [ebp+var_8]
.text$mn:000037E5                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:000037EC                 mov     edx, [ebp+Size]
.text$mn:000037EF                 push    edx
.text$mn:000037F0                 mov     ecx, [ebp+var_8]
.text$mn:000037F3                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000037F8                 mov     esp, ebp
.text$mn:000037FA                 pop     ebp
.text$mn:000037FB                 retn    8
.text$mn:000037FB ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:000037FB
.text$mn:000037FB ; ---------------------------------------------------------------------------
.text$mn:000037FE                 align 10h
.text$mn:000037FE _text$mn        ends
.text$mn:000037FE
.text$mn:00003800 ; ===========================================================================
.text$mn:00003800
.text$mn:00003800 ; Segment type: Pure code
.text$mn:00003800 ; Segment permissions: Read/Execute
.text$mn:00003800 _text$mn        segment para public 'CODE' use32
.text$mn:00003800                 assume cs:_text$mn
.text$mn:00003800                 ;org 3800h
.text$mn:00003800 ; COMDAT (pick any)
.text$mn:00003800                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003800
.text$mn:00003800 ; =============== S U B R O U T I N E =======================================
.text$mn:00003800
.text$mn:00003800 ; Attributes: bp-based frame
.text$mn:00003800
.text$mn:00003800 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00003800                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00003800 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00003800                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+47p
.text$mn:00003800                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+34p ...
.text$mn:00003800
.text$mn:00003800 var_C           = dword ptr -0Ch
.text$mn:00003800 var_8           = dword ptr -8
.text$mn:00003800 var_2           = byte ptr -2
.text$mn:00003800 var_1           = byte ptr -1
.text$mn:00003800 arg_0           = byte ptr  8
.text$mn:00003800 arg_4           = dword ptr  0Ch
.text$mn:00003800
.text$mn:00003800                 push    ebp
.text$mn:00003801                 mov     ebp, esp
.text$mn:00003803                 sub     esp, 0Ch
.text$mn:00003806                 mov     [ebp+var_8], ecx
.text$mn:00003809                 movzx   eax, [ebp+arg_0]
.text$mn:0000380D                 test    eax, eax
.text$mn:0000380F                 jnz     short loc_3813
.text$mn:00003811                 jmp     short loc_3886
.text$mn:00003813 ; ---------------------------------------------------------------------------
.text$mn:00003813
.text$mn:00003813 loc_3813:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00003813                 mov     ecx, [ebp+var_8]
.text$mn:00003816                 cmp     dword ptr [ecx+18h], 8
.text$mn:0000381A                 jb      short loc_3886
.text$mn:0000381C                 mov     edx, [ebp+var_8]
.text$mn:0000381F                 mov     eax, [edx+4]
.text$mn:00003822                 mov     [ebp+var_C], eax
.text$mn:00003825                 mov     ecx, [ebp+var_8]
.text$mn:00003828                 add     ecx, 4
.text$mn:0000382B                 push    ecx
.text$mn:0000382C                 lea     edx, [ebp+var_1]
.text$mn:0000382F                 push    edx
.text$mn:00003830                 mov     ecx, [ebp+var_8]
.text$mn:00003833                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00003838                 mov     ecx, eax
.text$mn:0000383A                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:0000383F                 cmp     [ebp+arg_4], 0
.text$mn:00003843                 jbe     short loc_3865
.text$mn:00003845                 mov     eax, [ebp+arg_4]
.text$mn:00003848                 push    eax             ; int
.text$mn:00003849                 mov     ecx, [ebp+var_C]
.text$mn:0000384C                 push    ecx
.text$mn:0000384D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00003852                 add     esp, 4
.text$mn:00003855                 push    eax             ; Src
.text$mn:00003856                 mov     edx, [ebp+var_8]
.text$mn:00003859                 add     edx, 4
.text$mn:0000385C                 push    edx             ; Dst
.text$mn:0000385D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00003862                 add     esp, 0Ch
.text$mn:00003865
.text$mn:00003865 loc_3865:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:00003865                 mov     eax, [ebp+var_8]
.text$mn:00003868                 mov     ecx, [eax+18h]
.text$mn:0000386B                 add     ecx, 1
.text$mn:0000386E                 push    ecx             ; int
.text$mn:0000386F                 mov     edx, [ebp+var_C]
.text$mn:00003872                 push    edx             ; void *
.text$mn:00003873                 lea     eax, [ebp+var_2]
.text$mn:00003876                 push    eax
.text$mn:00003877                 mov     ecx, [ebp+var_8]
.text$mn:0000387A                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000387F                 mov     ecx, eax
.text$mn:00003881                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:00003886
.text$mn:00003886 loc_3886:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:00003886                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:00003886                 mov     ecx, [ebp+var_8]
.text$mn:00003889                 mov     dword ptr [ecx+18h], 7
.text$mn:00003890                 mov     edx, [ebp+arg_4]
.text$mn:00003893                 push    edx
.text$mn:00003894                 mov     ecx, [ebp+var_8]
.text$mn:00003897                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000389C                 mov     esp, ebp
.text$mn:0000389E                 pop     ebp
.text$mn:0000389F                 retn    8
.text$mn:0000389F ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:0000389F
.text$mn:0000389F ; ---------------------------------------------------------------------------
.text$mn:000038A2                 align 4
.text$mn:000038A2 _text$mn        ends
.text$mn:000038A2
.text$mn:000038A4 ; ===========================================================================
.text$mn:000038A4
.text$mn:000038A4 ; Segment type: Pure code
.text$mn:000038A4 ; Segment permissions: Read/Execute
.text$mn:000038A4 _text$mn        segment para public 'CODE' use32
.text$mn:000038A4                 assume cs:_text$mn
.text$mn:000038A4                 ;org 38A4h
.text$mn:000038A4 ; COMDAT (pick any)
.text$mn:000038A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038A4
.text$mn:000038A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000038A4
.text$mn:000038A4 ; Attributes: bp-based frame
.text$mn:000038A4
.text$mn:000038A4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:000038A4                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:000038A4 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:000038A4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:000038A4
.text$mn:000038A4 var_4           = dword ptr -4
.text$mn:000038A4
.text$mn:000038A4                 push    ebp
.text$mn:000038A5                 mov     ebp, esp
.text$mn:000038A7                 push    ecx
.text$mn:000038A8                 mov     [ebp+var_4], ecx
.text$mn:000038AB                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:000038B0                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:000038B5                 mov     esp, ebp
.text$mn:000038B7                 pop     ebp
.text$mn:000038B8                 retn
.text$mn:000038B8 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:000038B8
.text$mn:000038B8 ; ---------------------------------------------------------------------------
.text$mn:000038B9                 align 4
.text$mn:000038B9 _text$mn        ends
.text$mn:000038B9
.text$mn:000038BC ; ===========================================================================
.text$mn:000038BC
.text$mn:000038BC ; Segment type: Pure code
.text$mn:000038BC ; Segment permissions: Read/Execute
.text$mn:000038BC _text$mn        segment para public 'CODE' use32
.text$mn:000038BC                 assume cs:_text$mn
.text$mn:000038BC                 ;org 38BCh
.text$mn:000038BC ; COMDAT (pick any)
.text$mn:000038BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038BC
.text$mn:000038BC ; =============== S U B R O U T I N E =======================================
.text$mn:000038BC
.text$mn:000038BC ; Attributes: bp-based frame
.text$mn:000038BC
.text$mn:000038BC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:000038BC                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:000038BC ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:000038BC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:000038BC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Dp ...
.text$mn:000038BC
.text$mn:000038BC var_4           = dword ptr -4
.text$mn:000038BC
.text$mn:000038BC                 push    ebp
.text$mn:000038BD                 mov     ebp, esp
.text$mn:000038BF                 push    ecx
.text$mn:000038C0                 mov     [ebp+var_4], ecx
.text$mn:000038C3                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:000038C8                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:000038CD                 mov     esp, ebp
.text$mn:000038CF                 pop     ebp
.text$mn:000038D0                 retn
.text$mn:000038D0 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:000038D0
.text$mn:000038D0 ; ---------------------------------------------------------------------------
.text$mn:000038D1                 align 4
.text$mn:000038D1 _text$mn        ends
.text$mn:000038D1
.text$mn:000038D4 ; ===========================================================================
.text$mn:000038D4
.text$mn:000038D4 ; Segment type: Pure code
.text$mn:000038D4 ; Segment permissions: Read/Execute
.text$mn:000038D4 _text$mn        segment para public 'CODE' use32
.text$mn:000038D4                 assume cs:_text$mn
.text$mn:000038D4                 ;org 38D4h
.text$mn:000038D4 ; COMDAT (pick any)
.text$mn:000038D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038D4
.text$mn:000038D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000038D4
.text$mn:000038D4 ; Attributes: bp-based frame
.text$mn:000038D4
.text$mn:000038D4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:000038D4                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:000038D4 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:000038D4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:000038D4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:000038D4
.text$mn:000038D4 var_4           = dword ptr -4
.text$mn:000038D4
.text$mn:000038D4                 push    ebp
.text$mn:000038D5                 mov     ebp, esp
.text$mn:000038D7                 push    ecx
.text$mn:000038D8                 mov     [ebp+var_4], ecx
.text$mn:000038DB                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:000038E0                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:000038E5                 mov     esp, ebp
.text$mn:000038E7                 pop     ebp
.text$mn:000038E8                 retn
.text$mn:000038E8 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:000038E8
.text$mn:000038E8 ; ---------------------------------------------------------------------------
.text$mn:000038E9                 align 4
.text$mn:000038E9 _text$mn        ends
.text$mn:000038E9
.text$mn:000038EC ; ===========================================================================
.text$mn:000038EC
.text$mn:000038EC ; Segment type: Pure code
.text$mn:000038EC ; Segment permissions: Read/Execute
.text$mn:000038EC _text$mn        segment para public 'CODE' use32
.text$mn:000038EC                 assume cs:_text$mn
.text$mn:000038EC                 ;org 38ECh
.text$mn:000038EC ; COMDAT (pick any)
.text$mn:000038EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000038EC
.text$mn:000038EC ; =============== S U B R O U T I N E =======================================
.text$mn:000038EC
.text$mn:000038EC ; Attributes: bp-based frame
.text$mn:000038EC
.text$mn:000038EC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:000038EC                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:000038EC ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:000038EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:000038EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p ...
.text$mn:000038EC
.text$mn:000038EC var_4           = dword ptr -4
.text$mn:000038EC
.text$mn:000038EC                 push    ebp
.text$mn:000038ED                 mov     ebp, esp
.text$mn:000038EF                 push    ecx
.text$mn:000038F0                 mov     [ebp+var_4], ecx
.text$mn:000038F3                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:000038F8                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:000038FD                 mov     esp, ebp
.text$mn:000038FF                 pop     ebp
.text$mn:00003900                 retn
.text$mn:00003900 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00003900
.text$mn:00003900 ; ---------------------------------------------------------------------------
.text$mn:00003901                 align 4
.text$mn:00003901 _text$mn        ends
.text$mn:00003901
.text$mn:00003904 ; ===========================================================================
.text$mn:00003904
.text$mn:00003904 ; Segment type: Pure code
.text$mn:00003904 ; Segment permissions: Read/Execute
.text$mn:00003904 _text$mn        segment para public 'CODE' use32
.text$mn:00003904                 assume cs:_text$mn
.text$mn:00003904                 ;org 3904h
.text$mn:00003904 ; COMDAT (pick any)
.text$mn:00003904                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003904
.text$mn:00003904 ; =============== S U B R O U T I N E =======================================
.text$mn:00003904
.text$mn:00003904 ; Attributes: bp-based frame
.text$mn:00003904
.text$mn:00003904 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00003904                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00003904 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00003904                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00003904                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00003904
.text$mn:00003904 var_4           = dword ptr -4
.text$mn:00003904 arg_0           = dword ptr  8
.text$mn:00003904
.text$mn:00003904                 push    ebp
.text$mn:00003905                 mov     ebp, esp
.text$mn:00003907                 push    ecx
.text$mn:00003908                 mov     [ebp+var_4], ecx
.text$mn:0000390B                 mov     eax, [ebp+arg_0]
.text$mn:0000390E                 push    eax
.text$mn:0000390F                 mov     ecx, [ebp+var_4]
.text$mn:00003912                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:00003917                 mov     esp, ebp
.text$mn:00003919                 pop     ebp
.text$mn:0000391A                 retn    4
.text$mn:0000391A ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:0000391A
.text$mn:0000391A ; ---------------------------------------------------------------------------
.text$mn:0000391D                 align 10h
.text$mn:0000391D _text$mn        ends
.text$mn:0000391D
.text$mn:00003920 ; ===========================================================================
.text$mn:00003920
.text$mn:00003920 ; Segment type: Pure code
.text$mn:00003920 ; Segment permissions: Read/Execute
.text$mn:00003920 _text$mn        segment para public 'CODE' use32
.text$mn:00003920                 assume cs:_text$mn
.text$mn:00003920                 ;org 3920h
.text$mn:00003920 ; COMDAT (pick any)
.text$mn:00003920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003920
.text$mn:00003920 ; =============== S U B R O U T I N E =======================================
.text$mn:00003920
.text$mn:00003920 ; Attributes: bp-based frame
.text$mn:00003920
.text$mn:00003920 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:00003920                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:00003920 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:00003920                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:00003920                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:00003920
.text$mn:00003920 var_4           = dword ptr -4
.text$mn:00003920 arg_0           = dword ptr  8
.text$mn:00003920
.text$mn:00003920                 push    ebp
.text$mn:00003921                 mov     ebp, esp
.text$mn:00003923                 push    ecx
.text$mn:00003924                 mov     [ebp+var_4], ecx
.text$mn:00003927                 mov     eax, [ebp+arg_0]
.text$mn:0000392A                 push    eax
.text$mn:0000392B                 mov     ecx, [ebp+var_4]
.text$mn:0000392E                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:00003933                 mov     esp, ebp
.text$mn:00003935                 pop     ebp
.text$mn:00003936                 retn    4
.text$mn:00003936 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:00003936
.text$mn:00003936 ; ---------------------------------------------------------------------------
.text$mn:00003939                 align 4
.text$mn:00003939 _text$mn        ends
.text$mn:00003939
.text$mn:0000393C ; ===========================================================================
.text$mn:0000393C
.text$mn:0000393C ; Segment type: Pure code
.text$mn:0000393C ; Segment permissions: Read/Execute
.text$mn:0000393C _text$mn        segment para public 'CODE' use32
.text$mn:0000393C                 assume cs:_text$mn
.text$mn:0000393C                 ;org 393Ch
.text$mn:0000393C ; COMDAT (pick any)
.text$mn:0000393C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000393C
.text$mn:0000393C ; =============== S U B R O U T I N E =======================================
.text$mn:0000393C
.text$mn:0000393C ; Attributes: bp-based frame
.text$mn:0000393C
.text$mn:0000393C ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:0000393C                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:0000393C ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:0000393C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:0000393C
.text$mn:0000393C var_4           = dword ptr -4
.text$mn:0000393C arg_0           = dword ptr  8
.text$mn:0000393C
.text$mn:0000393C                 push    ebp
.text$mn:0000393D                 mov     ebp, esp
.text$mn:0000393F                 push    ecx
.text$mn:00003940                 mov     [ebp+var_4], ecx
.text$mn:00003943                 push    0
.text$mn:00003945                 mov     eax, [ebp+arg_0]
.text$mn:00003948                 push    eax
.text$mn:00003949                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:0000394E                 add     esp, 8
.text$mn:00003951                 mov     esp, ebp
.text$mn:00003953                 pop     ebp
.text$mn:00003954                 retn    4
.text$mn:00003954 ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:00003954
.text$mn:00003954 ; ---------------------------------------------------------------------------
.text$mn:00003957                 align 4
.text$mn:00003957 _text$mn        ends
.text$mn:00003957
.text$mn:00003958 ; ===========================================================================
.text$mn:00003958
.text$mn:00003958 ; Segment type: Pure code
.text$mn:00003958 ; Segment permissions: Read/Execute
.text$mn:00003958 _text$mn        segment para public 'CODE' use32
.text$mn:00003958                 assume cs:_text$mn
.text$mn:00003958                 ;org 3958h
.text$mn:00003958 ; COMDAT (pick any)
.text$mn:00003958                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003958
.text$mn:00003958 ; =============== S U B R O U T I N E =======================================
.text$mn:00003958
.text$mn:00003958 ; Attributes: bp-based frame
.text$mn:00003958
.text$mn:00003958 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:00003958                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00003958 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00003958                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:00003958                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p
.text$mn:00003958
.text$mn:00003958 var_4           = dword ptr -4
.text$mn:00003958 arg_0           = dword ptr  8
.text$mn:00003958
.text$mn:00003958                 push    ebp
.text$mn:00003959                 mov     ebp, esp
.text$mn:0000395B                 push    ecx
.text$mn:0000395C                 mov     [ebp+var_4], ecx
.text$mn:0000395F                 push    0
.text$mn:00003961                 mov     eax, [ebp+arg_0]
.text$mn:00003964                 push    eax
.text$mn:00003965                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:0000396A                 add     esp, 8
.text$mn:0000396D                 mov     esp, ebp
.text$mn:0000396F                 pop     ebp
.text$mn:00003970                 retn    4
.text$mn:00003970 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00003970
.text$mn:00003970 ; ---------------------------------------------------------------------------
.text$mn:00003973                 align 4
.text$mn:00003973 _text$mn        ends
.text$mn:00003973
.text$mn:00003974 ; ===========================================================================
.text$mn:00003974
.text$mn:00003974 ; Segment type: Pure code
.text$mn:00003974 ; Segment permissions: Read/Execute
.text$mn:00003974 _text$mn        segment para public 'CODE' use32
.text$mn:00003974                 assume cs:_text$mn
.text$mn:00003974                 ;org 3974h
.text$mn:00003974 ; COMDAT (pick any)
.text$mn:00003974                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003974
.text$mn:00003974 ; =============== S U B R O U T I N E =======================================
.text$mn:00003974
.text$mn:00003974 ; Attributes: bp-based frame
.text$mn:00003974
.text$mn:00003974 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:00003974                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:00003974 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:00003974                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:00003974
.text$mn:00003974 var_4           = dword ptr -4
.text$mn:00003974 arg_0           = dword ptr  8
.text$mn:00003974
.text$mn:00003974                 push    ebp
.text$mn:00003975                 mov     ebp, esp
.text$mn:00003977                 push    ecx
.text$mn:00003978                 mov     [ebp+var_4], ecx
.text$mn:0000397B                 push    0
.text$mn:0000397D                 mov     eax, [ebp+arg_0]
.text$mn:00003980                 push    eax
.text$mn:00003981                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:00003986                 add     esp, 8
.text$mn:00003989                 mov     esp, ebp
.text$mn:0000398B                 pop     ebp
.text$mn:0000398C                 retn    4
.text$mn:0000398C ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:0000398C
.text$mn:0000398C ; ---------------------------------------------------------------------------
.text$mn:0000398F                 align 10h
.text$mn:0000398F _text$mn        ends
.text$mn:0000398F
.text$mn:00003990 ; ===========================================================================
.text$mn:00003990
.text$mn:00003990 ; Segment type: Pure code
.text$mn:00003990 ; Segment permissions: Read/Execute
.text$mn:00003990 _text$mn        segment para public 'CODE' use32
.text$mn:00003990                 assume cs:_text$mn
.text$mn:00003990                 ;org 3990h
.text$mn:00003990 ; COMDAT (pick any)
.text$mn:00003990                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003990
.text$mn:00003990 ; =============== S U B R O U T I N E =======================================
.text$mn:00003990
.text$mn:00003990 ; Attributes: bp-based frame
.text$mn:00003990
.text$mn:00003990 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00003990                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00003990 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00003990                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+53p
.text$mn:00003990
.text$mn:00003990 var_8           = dword ptr -8
.text$mn:00003990 var_4           = dword ptr -4
.text$mn:00003990 arg_0           = dword ptr  8
.text$mn:00003990 arg_4           = dword ptr  0Ch
.text$mn:00003990 arg_8           = dword ptr  10h
.text$mn:00003990
.text$mn:00003990                 push    ebp
.text$mn:00003991                 mov     ebp, esp
.text$mn:00003993                 sub     esp, 8
.text$mn:00003996                 mov     [ebp+var_4], ecx
.text$mn:00003999                 mov     ecx, [ebp+arg_0]
.text$mn:0000399C                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000039A1                 cmp     eax, [ebp+arg_4]
.text$mn:000039A4                 jnb     short loc_39AE
.text$mn:000039A6                 mov     ecx, [ebp+var_4]
.text$mn:000039A9                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000039AE
.text$mn:000039AE loc_39AE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:000039AE                 mov     ecx, [ebp+arg_0]
.text$mn:000039B1                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000039B6                 sub     eax, [ebp+arg_4]
.text$mn:000039B9                 mov     [ebp+var_8], eax
.text$mn:000039BC                 mov     eax, [ebp+var_8]
.text$mn:000039BF                 cmp     eax, [ebp+arg_8]
.text$mn:000039C2                 jnb     short loc_39CA
.text$mn:000039C4                 mov     ecx, [ebp+var_8]
.text$mn:000039C7                 mov     [ebp+arg_8], ecx
.text$mn:000039CA
.text$mn:000039CA loc_39CA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:000039CA                 mov     edx, [ebp+var_4]
.text$mn:000039CD                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000039D2                 sub     eax, [edx+14h]
.text$mn:000039D5                 cmp     eax, [ebp+arg_8]
.text$mn:000039D8                 ja      short loc_39E2
.text$mn:000039DA                 mov     ecx, [ebp+var_4]
.text$mn:000039DD                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:000039E2
.text$mn:000039E2 loc_39E2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+48j
.text$mn:000039E2                 cmp     [ebp+arg_8], 0
.text$mn:000039E6                 jbe     short loc_3A42
.text$mn:000039E8                 mov     ecx, [ebp+var_4]
.text$mn:000039EB                 mov     edx, [ecx+14h]
.text$mn:000039EE                 add     edx, [ebp+arg_8]
.text$mn:000039F1                 mov     [ebp+var_8], edx
.text$mn:000039F4                 push    0
.text$mn:000039F6                 mov     eax, [ebp+var_8]
.text$mn:000039F9                 push    eax
.text$mn:000039FA                 mov     ecx, [ebp+var_4]
.text$mn:000039FD                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00003A02                 movzx   ecx, al
.text$mn:00003A05                 test    ecx, ecx
.text$mn:00003A07                 jz      short loc_3A42
.text$mn:00003A09                 mov     edx, [ebp+arg_8]
.text$mn:00003A0C                 push    edx             ; int
.text$mn:00003A0D                 mov     ecx, [ebp+arg_0]
.text$mn:00003A10                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003A15                 mov     ecx, [ebp+arg_4]
.text$mn:00003A18                 lea     edx, [eax+ecx*2]
.text$mn:00003A1B                 push    edx             ; Src
.text$mn:00003A1C                 mov     ecx, [ebp+var_4]
.text$mn:00003A1F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003A24                 mov     ecx, [ebp+var_4]
.text$mn:00003A27                 mov     edx, [ecx+14h]
.text$mn:00003A2A                 lea     eax, [eax+edx*2]
.text$mn:00003A2D                 push    eax             ; Dst
.text$mn:00003A2E                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00003A33                 add     esp, 0Ch
.text$mn:00003A36                 mov     ecx, [ebp+var_8]
.text$mn:00003A39                 push    ecx
.text$mn:00003A3A                 mov     ecx, [ebp+var_4]
.text$mn:00003A3D                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00003A42
.text$mn:00003A42 loc_3A42:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+56j
.text$mn:00003A42                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+77j
.text$mn:00003A42                 mov     eax, [ebp+var_4]
.text$mn:00003A45                 mov     esp, ebp
.text$mn:00003A47                 pop     ebp
.text$mn:00003A48                 retn    0Ch
.text$mn:00003A48 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00003A48
.text$mn:00003A48 ; ---------------------------------------------------------------------------
.text$mn:00003A4B                 align 4
.text$mn:00003A4B _text$mn        ends
.text$mn:00003A4B
.text$mn:00003A4C ; ===========================================================================
.text$mn:00003A4C
.text$mn:00003A4C ; Segment type: Pure code
.text$mn:00003A4C ; Segment permissions: Read/Execute
.text$mn:00003A4C _text$mn        segment para public 'CODE' use32
.text$mn:00003A4C                 assume cs:_text$mn
.text$mn:00003A4C                 ;org 3A4Ch
.text$mn:00003A4C ; COMDAT (pick any)
.text$mn:00003A4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A4C
.text$mn:00003A4C ; =============== S U B R O U T I N E =======================================
.text$mn:00003A4C
.text$mn:00003A4C ; Attributes: bp-based frame
.text$mn:00003A4C
.text$mn:00003A4C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t *Str)
.text$mn:00003A4C                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00003A4C ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00003A4C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator+=(wchar_t const *)+Ep
.text$mn:00003A4C
.text$mn:00003A4C var_4           = dword ptr -4
.text$mn:00003A4C Str             = dword ptr  8
.text$mn:00003A4C
.text$mn:00003A4C                 push    ebp
.text$mn:00003A4D                 mov     ebp, esp
.text$mn:00003A4F                 push    ecx
.text$mn:00003A50                 mov     [ebp+var_4], ecx
.text$mn:00003A53                 push    43Eh            ; unsigned int
.text$mn:00003A58                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003A5D                 mov     eax, [ebp+Str]
.text$mn:00003A60                 push    eax             ; int
.text$mn:00003A61                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00003A66                 add     esp, 0Ch
.text$mn:00003A69                 mov     ecx, [ebp+Str]
.text$mn:00003A6C                 push    ecx             ; Str
.text$mn:00003A6D                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00003A72                 add     esp, 4
.text$mn:00003A75                 push    eax             ; int
.text$mn:00003A76                 mov     edx, [ebp+Str]
.text$mn:00003A79                 push    edx             ; Src
.text$mn:00003A7A                 mov     ecx, [ebp+var_4]
.text$mn:00003A7D                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)
.text$mn:00003A82                 mov     esp, ebp
.text$mn:00003A84                 pop     ebp
.text$mn:00003A85                 retn    4
.text$mn:00003A85 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00003A85
.text$mn:00003A85 _text$mn        ends
.text$mn:00003A85
.text$mn:00003A88 ; ===========================================================================
.text$mn:00003A88
.text$mn:00003A88 ; Segment type: Pure code
.text$mn:00003A88 ; Segment permissions: Read/Execute
.text$mn:00003A88 _text$mn        segment para public 'CODE' use32
.text$mn:00003A88                 assume cs:_text$mn
.text$mn:00003A88                 ;org 3A88h
.text$mn:00003A88 ; COMDAT (pick any)
.text$mn:00003A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A88
.text$mn:00003A88 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A88
.text$mn:00003A88 ; Attributes: bp-based frame
.text$mn:00003A88
.text$mn:00003A88 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(void *Src, int)
.text$mn:00003A88                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00003A88 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00003A88                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+31p
.text$mn:00003A88
.text$mn:00003A88 var_8           = dword ptr -8
.text$mn:00003A88 var_4           = dword ptr -4
.text$mn:00003A88 Src             = dword ptr  8
.text$mn:00003A88 arg_4           = dword ptr  0Ch
.text$mn:00003A88
.text$mn:00003A88                 push    ebp
.text$mn:00003A89                 mov     ebp, esp
.text$mn:00003A8B                 sub     esp, 8
.text$mn:00003A8E                 mov     [ebp+var_4], ecx
.text$mn:00003A91                 cmp     [ebp+arg_4], 0
.text$mn:00003A95                 jz      short loc_3AAD
.text$mn:00003A97                 push    42Ah            ; unsigned int
.text$mn:00003A9C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003AA1                 mov     eax, [ebp+Src]
.text$mn:00003AA4                 push    eax             ; int
.text$mn:00003AA5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00003AAA                 add     esp, 0Ch
.text$mn:00003AAD
.text$mn:00003AAD loc_3AAD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+Dj
.text$mn:00003AAD                 mov     ecx, [ebp+Src]
.text$mn:00003AB0                 push    ecx
.text$mn:00003AB1                 mov     ecx, [ebp+var_4]
.text$mn:00003AB4                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00003AB9                 movzx   edx, al
.text$mn:00003ABC                 test    edx, edx
.text$mn:00003ABE                 jz      short loc_3AE2
.text$mn:00003AC0                 mov     eax, [ebp+arg_4]
.text$mn:00003AC3                 push    eax
.text$mn:00003AC4                 mov     ecx, [ebp+var_4]
.text$mn:00003AC7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003ACC                 mov     ecx, [ebp+Src]
.text$mn:00003ACF                 sub     ecx, eax
.text$mn:00003AD1                 sar     ecx, 1
.text$mn:00003AD3                 push    ecx
.text$mn:00003AD4                 mov     edx, [ebp+var_4]
.text$mn:00003AD7                 push    edx
.text$mn:00003AD8                 mov     ecx, [ebp+var_4]
.text$mn:00003ADB                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00003AE0                 jmp     short loc_3B53
.text$mn:00003AE2 ; ---------------------------------------------------------------------------
.text$mn:00003AE2
.text$mn:00003AE2 loc_3AE2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+36j
.text$mn:00003AE2                 mov     eax, [ebp+var_4]
.text$mn:00003AE5                 mov     ecx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00003AEB                 sub     ecx, [eax+14h]
.text$mn:00003AEE                 cmp     ecx, [ebp+arg_4]
.text$mn:00003AF1                 ja      short loc_3AFB
.text$mn:00003AF3                 mov     ecx, [ebp+var_4]
.text$mn:00003AF6                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00003AFB
.text$mn:00003AFB loc_3AFB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+69j
.text$mn:00003AFB                 cmp     [ebp+arg_4], 0
.text$mn:00003AFF                 jbe     short loc_3B50
.text$mn:00003B01                 mov     edx, [ebp+var_4]
.text$mn:00003B04                 mov     eax, [edx+14h]
.text$mn:00003B07                 add     eax, [ebp+arg_4]
.text$mn:00003B0A                 mov     [ebp+var_8], eax
.text$mn:00003B0D                 push    0
.text$mn:00003B0F                 mov     ecx, [ebp+var_8]
.text$mn:00003B12                 push    ecx
.text$mn:00003B13                 mov     ecx, [ebp+var_4]
.text$mn:00003B16                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00003B1B                 movzx   edx, al
.text$mn:00003B1E                 test    edx, edx
.text$mn:00003B20                 jz      short loc_3B50
.text$mn:00003B22                 mov     eax, [ebp+arg_4]
.text$mn:00003B25                 push    eax             ; int
.text$mn:00003B26                 mov     ecx, [ebp+Src]
.text$mn:00003B29                 push    ecx             ; Src
.text$mn:00003B2A                 mov     ecx, [ebp+var_4]
.text$mn:00003B2D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003B32                 mov     edx, [ebp+var_4]
.text$mn:00003B35                 mov     ecx, [edx+14h]
.text$mn:00003B38                 lea     edx, [eax+ecx*2]
.text$mn:00003B3B                 push    edx             ; Dst
.text$mn:00003B3C                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00003B41                 add     esp, 0Ch
.text$mn:00003B44                 mov     eax, [ebp+var_8]
.text$mn:00003B47                 push    eax
.text$mn:00003B48                 mov     ecx, [ebp+var_4]
.text$mn:00003B4B                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00003B50
.text$mn:00003B50 loc_3B50:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+77j
.text$mn:00003B50                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+98j
.text$mn:00003B50                 mov     eax, [ebp+var_4]
.text$mn:00003B53
.text$mn:00003B53 loc_3B53:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+58j
.text$mn:00003B53                 mov     esp, ebp
.text$mn:00003B55                 pop     ebp
.text$mn:00003B56                 retn    8
.text$mn:00003B56 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00003B56
.text$mn:00003B56 ; ---------------------------------------------------------------------------
.text$mn:00003B59                 align 4
.text$mn:00003B59 _text$mn        ends
.text$mn:00003B59
.text$mn:00003B5C ; ===========================================================================
.text$mn:00003B5C
.text$mn:00003B5C ; Segment type: Pure code
.text$mn:00003B5C ; Segment permissions: Read/Execute
.text$mn:00003B5C _text$mn        segment para public 'CODE' use32
.text$mn:00003B5C                 assume cs:_text$mn
.text$mn:00003B5C                 ;org 3B5Ch
.text$mn:00003B5C ; COMDAT (pick any)
.text$mn:00003B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B5C
.text$mn:00003B5C ; =============== S U B R O U T I N E =======================================
.text$mn:00003B5C
.text$mn:00003B5C ; Attributes: bp-based frame
.text$mn:00003B5C
.text$mn:00003B5C ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:00003B5C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00003B5C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00003B5C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:00003B5C
.text$mn:00003B5C Size            = dword ptr -8
.text$mn:00003B5C var_4           = dword ptr -4
.text$mn:00003B5C arg_0           = dword ptr  8
.text$mn:00003B5C arg_4           = dword ptr  0Ch
.text$mn:00003B5C arg_8           = dword ptr  10h
.text$mn:00003B5C
.text$mn:00003B5C                 push    ebp
.text$mn:00003B5D                 mov     ebp, esp
.text$mn:00003B5F                 sub     esp, 8
.text$mn:00003B62                 mov     [ebp+var_4], ecx
.text$mn:00003B65                 mov     ecx, [ebp+arg_0]
.text$mn:00003B68                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00003B6D                 cmp     eax, [ebp+arg_4]
.text$mn:00003B70                 jnb     short loc_3B7A
.text$mn:00003B72                 mov     ecx, [ebp+var_4]
.text$mn:00003B75                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00003B7A
.text$mn:00003B7A loc_3B7A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:00003B7A                 mov     ecx, [ebp+arg_0]
.text$mn:00003B7D                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:00003B82                 sub     eax, [ebp+arg_4]
.text$mn:00003B85                 mov     [ebp+Size], eax
.text$mn:00003B88                 mov     eax, [ebp+arg_8]
.text$mn:00003B8B                 cmp     eax, [ebp+Size]
.text$mn:00003B8E                 jnb     short loc_3B96
.text$mn:00003B90                 mov     ecx, [ebp+arg_8]
.text$mn:00003B93                 mov     [ebp+Size], ecx
.text$mn:00003B96
.text$mn:00003B96 loc_3B96:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:00003B96                 mov     edx, [ebp+var_4]
.text$mn:00003B99                 cmp     edx, [ebp+arg_0]
.text$mn:00003B9C                 jnz     short loc_3BBD
.text$mn:00003B9E                 mov     eax, [ebp+arg_4]
.text$mn:00003BA1                 add     eax, [ebp+Size]
.text$mn:00003BA4                 push    eax
.text$mn:00003BA5                 mov     ecx, [ebp+var_4]
.text$mn:00003BA8                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00003BAD                 mov     ecx, [ebp+arg_4]
.text$mn:00003BB0                 push    ecx
.text$mn:00003BB1                 push    0
.text$mn:00003BB3                 mov     ecx, [ebp+var_4]
.text$mn:00003BB6                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00003BBB                 jmp     short loc_3BFF
.text$mn:00003BBD ; ---------------------------------------------------------------------------
.text$mn:00003BBD
.text$mn:00003BBD loc_3BBD:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00003BBD                 push    0
.text$mn:00003BBF                 mov     edx, [ebp+Size]
.text$mn:00003BC2                 push    edx
.text$mn:00003BC3                 mov     ecx, [ebp+var_4]
.text$mn:00003BC6                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00003BCB                 movzx   eax, al
.text$mn:00003BCE                 test    eax, eax
.text$mn:00003BD0                 jz      short loc_3BFF
.text$mn:00003BD2                 mov     ecx, [ebp+Size]
.text$mn:00003BD5                 push    ecx             ; Size
.text$mn:00003BD6                 mov     ecx, [ebp+arg_0]
.text$mn:00003BD9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00003BDE                 add     eax, [ebp+arg_4]
.text$mn:00003BE1                 push    eax             ; Src
.text$mn:00003BE2                 mov     ecx, [ebp+var_4]
.text$mn:00003BE5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00003BEA                 push    eax             ; Dst
.text$mn:00003BEB                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00003BF0                 add     esp, 0Ch
.text$mn:00003BF3                 mov     edx, [ebp+Size]
.text$mn:00003BF6                 push    edx
.text$mn:00003BF7                 mov     ecx, [ebp+var_4]
.text$mn:00003BFA                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00003BFF
.text$mn:00003BFF loc_3BFF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:00003BFF                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:00003BFF                 mov     eax, [ebp+var_4]
.text$mn:00003C02                 mov     esp, ebp
.text$mn:00003C04                 pop     ebp
.text$mn:00003C05                 retn    0Ch
.text$mn:00003C05 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00003C05
.text$mn:00003C05 _text$mn        ends
.text$mn:00003C05
.text$mn:00003C08 ; ===========================================================================
.text$mn:00003C08
.text$mn:00003C08 ; Segment type: Pure code
.text$mn:00003C08 ; Segment permissions: Read/Execute
.text$mn:00003C08 _text$mn        segment para public 'CODE' use32
.text$mn:00003C08                 assume cs:_text$mn
.text$mn:00003C08                 ;org 3C08h
.text$mn:00003C08 ; COMDAT (pick any)
.text$mn:00003C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C08
.text$mn:00003C08 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C08
.text$mn:00003C08 ; Attributes: bp-based frame
.text$mn:00003C08
.text$mn:00003C08 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:00003C08                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00003C08 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00003C08                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:00003C08
.text$mn:00003C08 var_4           = dword ptr -4
.text$mn:00003C08 Str             = dword ptr  8
.text$mn:00003C08
.text$mn:00003C08                 push    ebp
.text$mn:00003C09                 mov     ebp, esp
.text$mn:00003C0B                 push    ecx
.text$mn:00003C0C                 mov     [ebp+var_4], ecx
.text$mn:00003C0F                 push    490h            ; unsigned int
.text$mn:00003C14                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003C19                 mov     eax, [ebp+Str]
.text$mn:00003C1C                 push    eax             ; int
.text$mn:00003C1D                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00003C22                 add     esp, 0Ch
.text$mn:00003C25                 mov     ecx, [ebp+Str]
.text$mn:00003C28                 push    ecx             ; Str
.text$mn:00003C29                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00003C2E                 add     esp, 4
.text$mn:00003C31                 push    eax             ; Size
.text$mn:00003C32                 mov     edx, [ebp+Str]
.text$mn:00003C35                 push    edx             ; Src
.text$mn:00003C36                 mov     ecx, [ebp+var_4]
.text$mn:00003C39                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00003C3E                 mov     esp, ebp
.text$mn:00003C40                 pop     ebp
.text$mn:00003C41                 retn    4
.text$mn:00003C41 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00003C41
.text$mn:00003C41 _text$mn        ends
.text$mn:00003C41
.text$mn:00003C44 ; ===========================================================================
.text$mn:00003C44
.text$mn:00003C44 ; Segment type: Pure code
.text$mn:00003C44 ; Segment permissions: Read/Execute
.text$mn:00003C44 _text$mn        segment para public 'CODE' use32
.text$mn:00003C44                 assume cs:_text$mn
.text$mn:00003C44                 ;org 3C44h
.text$mn:00003C44 ; COMDAT (pick any)
.text$mn:00003C44                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C44
.text$mn:00003C44 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C44
.text$mn:00003C44 ; Attributes: bp-based frame
.text$mn:00003C44
.text$mn:00003C44 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:00003C44                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:00003C44 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:00003C44                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:00003C44
.text$mn:00003C44 var_4           = dword ptr -4
.text$mn:00003C44 Src             = dword ptr  8
.text$mn:00003C44 Size            = dword ptr  0Ch
.text$mn:00003C44
.text$mn:00003C44                 push    ebp
.text$mn:00003C45                 mov     ebp, esp
.text$mn:00003C47                 push    ecx
.text$mn:00003C48                 mov     [ebp+var_4], ecx
.text$mn:00003C4B                 cmp     [ebp+Size], 0
.text$mn:00003C4F                 jz      short loc_3C67
.text$mn:00003C51                 push    47Fh            ; unsigned int
.text$mn:00003C56                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003C5B                 mov     eax, [ebp+Src]
.text$mn:00003C5E                 push    eax             ; int
.text$mn:00003C5F                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00003C64                 add     esp, 0Ch
.text$mn:00003C67
.text$mn:00003C67 loc_3C67:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:00003C67                 mov     ecx, [ebp+Src]
.text$mn:00003C6A                 push    ecx
.text$mn:00003C6B                 mov     ecx, [ebp+var_4]
.text$mn:00003C6E                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00003C73                 movzx   edx, al
.text$mn:00003C76                 test    edx, edx
.text$mn:00003C78                 jz      short loc_3C9A
.text$mn:00003C7A                 mov     eax, [ebp+Size]
.text$mn:00003C7D                 push    eax
.text$mn:00003C7E                 mov     ecx, [ebp+var_4]
.text$mn:00003C81                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00003C86                 mov     ecx, [ebp+Src]
.text$mn:00003C89                 sub     ecx, eax
.text$mn:00003C8B                 push    ecx
.text$mn:00003C8C                 mov     edx, [ebp+var_4]
.text$mn:00003C8F                 push    edx
.text$mn:00003C90                 mov     ecx, [ebp+var_4]
.text$mn:00003C93                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00003C98                 jmp     short loc_3CD7
.text$mn:00003C9A ; ---------------------------------------------------------------------------
.text$mn:00003C9A
.text$mn:00003C9A loc_3C9A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00003C9A                 push    0
.text$mn:00003C9C                 mov     eax, [ebp+Size]
.text$mn:00003C9F                 push    eax
.text$mn:00003CA0                 mov     ecx, [ebp+var_4]
.text$mn:00003CA3                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00003CA8                 movzx   ecx, al
.text$mn:00003CAB                 test    ecx, ecx
.text$mn:00003CAD                 jz      short loc_3CD4
.text$mn:00003CAF                 mov     edx, [ebp+Size]
.text$mn:00003CB2                 push    edx             ; Size
.text$mn:00003CB3                 mov     eax, [ebp+Src]
.text$mn:00003CB6                 push    eax             ; Src
.text$mn:00003CB7                 mov     ecx, [ebp+var_4]
.text$mn:00003CBA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00003CBF                 push    eax             ; Dst
.text$mn:00003CC0                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00003CC5                 add     esp, 0Ch
.text$mn:00003CC8                 mov     ecx, [ebp+Size]
.text$mn:00003CCB                 push    ecx
.text$mn:00003CCC                 mov     ecx, [ebp+var_4]
.text$mn:00003CCF                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00003CD4
.text$mn:00003CD4 loc_3CD4:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:00003CD4                 mov     eax, [ebp+var_4]
.text$mn:00003CD7
.text$mn:00003CD7 loc_3CD7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:00003CD7                 mov     esp, ebp
.text$mn:00003CD9                 pop     ebp
.text$mn:00003CDA                 retn    8
.text$mn:00003CDA ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00003CDA
.text$mn:00003CDA ; ---------------------------------------------------------------------------
.text$mn:00003CDD                 align 10h
.text$mn:00003CDD _text$mn        ends
.text$mn:00003CDD
.text$mn:00003CE0 ; ===========================================================================
.text$mn:00003CE0
.text$mn:00003CE0 ; Segment type: Pure code
.text$mn:00003CE0 ; Segment permissions: Read/Execute
.text$mn:00003CE0 _text$mn        segment para public 'CODE' use32
.text$mn:00003CE0                 assume cs:_text$mn
.text$mn:00003CE0                 ;org 3CE0h
.text$mn:00003CE0 ; COMDAT (pick any)
.text$mn:00003CE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003CE0
.text$mn:00003CE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003CE0
.text$mn:00003CE0 ; Attributes: bp-based frame
.text$mn:00003CE0
.text$mn:00003CE0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00003CE0                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00003CE0 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00003CE0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+51p
.text$mn:00003CE0
.text$mn:00003CE0 var_8           = dword ptr -8
.text$mn:00003CE0 var_4           = dword ptr -4
.text$mn:00003CE0 arg_0           = dword ptr  8
.text$mn:00003CE0 arg_4           = dword ptr  0Ch
.text$mn:00003CE0 arg_8           = dword ptr  10h
.text$mn:00003CE0
.text$mn:00003CE0                 push    ebp
.text$mn:00003CE1                 mov     ebp, esp
.text$mn:00003CE3                 sub     esp, 8
.text$mn:00003CE6                 mov     [ebp+var_4], ecx
.text$mn:00003CE9                 mov     ecx, [ebp+arg_0]
.text$mn:00003CEC                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00003CF1                 cmp     eax, [ebp+arg_4]
.text$mn:00003CF4                 jnb     short loc_3CFE
.text$mn:00003CF6                 mov     ecx, [ebp+var_4]
.text$mn:00003CF9                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00003CFE
.text$mn:00003CFE loc_3CFE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00003CFE                 mov     ecx, [ebp+arg_0]
.text$mn:00003D01                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00003D06                 sub     eax, [ebp+arg_4]
.text$mn:00003D09                 mov     [ebp+var_8], eax
.text$mn:00003D0C                 mov     eax, [ebp+arg_8]
.text$mn:00003D0F                 cmp     eax, [ebp+var_8]
.text$mn:00003D12                 jnb     short loc_3D1A
.text$mn:00003D14                 mov     ecx, [ebp+arg_8]
.text$mn:00003D17                 mov     [ebp+var_8], ecx
.text$mn:00003D1A
.text$mn:00003D1A loc_3D1A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00003D1A                 mov     edx, [ebp+var_4]
.text$mn:00003D1D                 cmp     edx, [ebp+arg_0]
.text$mn:00003D20                 jnz     short loc_3D41
.text$mn:00003D22                 mov     eax, [ebp+arg_4]
.text$mn:00003D25                 add     eax, [ebp+var_8]
.text$mn:00003D28                 push    eax
.text$mn:00003D29                 mov     ecx, [ebp+var_4]
.text$mn:00003D2C                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:00003D31                 mov     ecx, [ebp+arg_4]
.text$mn:00003D34                 push    ecx
.text$mn:00003D35                 push    0
.text$mn:00003D37                 mov     ecx, [ebp+var_4]
.text$mn:00003D3A                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00003D3F                 jmp     short loc_3D86
.text$mn:00003D41 ; ---------------------------------------------------------------------------
.text$mn:00003D41
.text$mn:00003D41 loc_3D41:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:00003D41                 push    0
.text$mn:00003D43                 mov     edx, [ebp+var_8]
.text$mn:00003D46                 push    edx
.text$mn:00003D47                 mov     ecx, [ebp+var_4]
.text$mn:00003D4A                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00003D4F                 movzx   eax, al
.text$mn:00003D52                 test    eax, eax
.text$mn:00003D54                 jz      short loc_3D86
.text$mn:00003D56                 mov     ecx, [ebp+var_8]
.text$mn:00003D59                 push    ecx             ; int
.text$mn:00003D5A                 mov     ecx, [ebp+arg_0]
.text$mn:00003D5D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003D62                 mov     edx, [ebp+arg_4]
.text$mn:00003D65                 lea     eax, [eax+edx*2]
.text$mn:00003D68                 push    eax             ; Src
.text$mn:00003D69                 mov     ecx, [ebp+var_4]
.text$mn:00003D6C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003D71                 push    eax             ; Dst
.text$mn:00003D72                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00003D77                 add     esp, 0Ch
.text$mn:00003D7A                 mov     ecx, [ebp+var_8]
.text$mn:00003D7D                 push    ecx
.text$mn:00003D7E                 mov     ecx, [ebp+var_4]
.text$mn:00003D81                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00003D86
.text$mn:00003D86 loc_3D86:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:00003D86                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:00003D86                 mov     eax, [ebp+var_4]
.text$mn:00003D89                 mov     esp, ebp
.text$mn:00003D8B                 pop     ebp
.text$mn:00003D8C                 retn    0Ch
.text$mn:00003D8C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00003D8C
.text$mn:00003D8C ; ---------------------------------------------------------------------------
.text$mn:00003D8F                 align 10h
.text$mn:00003D8F _text$mn        ends
.text$mn:00003D8F
.text$mn:00003D90 ; ===========================================================================
.text$mn:00003D90
.text$mn:00003D90 ; Segment type: Pure code
.text$mn:00003D90 ; Segment permissions: Read/Execute
.text$mn:00003D90 _text$mn        segment para public 'CODE' use32
.text$mn:00003D90                 assume cs:_text$mn
.text$mn:00003D90                 ;org 3D90h
.text$mn:00003D90 ; COMDAT (pick any)
.text$mn:00003D90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D90
.text$mn:00003D90 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D90
.text$mn:00003D90 ; Attributes: bp-based frame
.text$mn:00003D90
.text$mn:00003D90 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:00003D90                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00003D90 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00003D90                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:00003D90                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:00003D90
.text$mn:00003D90 var_4           = dword ptr -4
.text$mn:00003D90 Str             = dword ptr  8
.text$mn:00003D90
.text$mn:00003D90                 push    ebp
.text$mn:00003D91                 mov     ebp, esp
.text$mn:00003D93                 push    ecx
.text$mn:00003D94                 mov     [ebp+var_4], ecx
.text$mn:00003D97                 push    490h            ; unsigned int
.text$mn:00003D9C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003DA1                 mov     eax, [ebp+Str]
.text$mn:00003DA4                 push    eax             ; int
.text$mn:00003DA5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00003DAA                 add     esp, 0Ch
.text$mn:00003DAD                 mov     ecx, [ebp+Str]
.text$mn:00003DB0                 push    ecx             ; Str
.text$mn:00003DB1                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00003DB6                 add     esp, 4
.text$mn:00003DB9                 push    eax             ; int
.text$mn:00003DBA                 mov     edx, [ebp+Str]
.text$mn:00003DBD                 push    edx             ; Src
.text$mn:00003DBE                 mov     ecx, [ebp+var_4]
.text$mn:00003DC1                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:00003DC6                 mov     esp, ebp
.text$mn:00003DC8                 pop     ebp
.text$mn:00003DC9                 retn    4
.text$mn:00003DC9 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00003DC9
.text$mn:00003DC9 _text$mn        ends
.text$mn:00003DC9
.text$mn:00003DCC ; ===========================================================================
.text$mn:00003DCC
.text$mn:00003DCC ; Segment type: Pure code
.text$mn:00003DCC ; Segment permissions: Read/Execute
.text$mn:00003DCC _text$mn        segment para public 'CODE' use32
.text$mn:00003DCC                 assume cs:_text$mn
.text$mn:00003DCC                 ;org 3DCCh
.text$mn:00003DCC ; COMDAT (pick any)
.text$mn:00003DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003DCC
.text$mn:00003DCC ; =============== S U B R O U T I N E =======================================
.text$mn:00003DCC
.text$mn:00003DCC ; Attributes: bp-based frame
.text$mn:00003DCC
.text$mn:00003DCC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:00003DCC                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00003DCC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00003DCC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:00003DCC
.text$mn:00003DCC var_4           = dword ptr -4
.text$mn:00003DCC Src             = dword ptr  8
.text$mn:00003DCC arg_4           = dword ptr  0Ch
.text$mn:00003DCC
.text$mn:00003DCC                 push    ebp
.text$mn:00003DCD                 mov     ebp, esp
.text$mn:00003DCF                 push    ecx
.text$mn:00003DD0                 mov     [ebp+var_4], ecx
.text$mn:00003DD3                 cmp     [ebp+arg_4], 0
.text$mn:00003DD7                 jz      short loc_3DEF
.text$mn:00003DD9                 push    47Fh            ; unsigned int
.text$mn:00003DDE                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00003DE3                 mov     eax, [ebp+Src]
.text$mn:00003DE6                 push    eax             ; int
.text$mn:00003DE7                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00003DEC                 add     esp, 0Ch
.text$mn:00003DEF
.text$mn:00003DEF loc_3DEF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:00003DEF                 mov     ecx, [ebp+Src]
.text$mn:00003DF2                 push    ecx
.text$mn:00003DF3                 mov     ecx, [ebp+var_4]
.text$mn:00003DF6                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00003DFB                 movzx   edx, al
.text$mn:00003DFE                 test    edx, edx
.text$mn:00003E00                 jz      short loc_3E24
.text$mn:00003E02                 mov     eax, [ebp+arg_4]
.text$mn:00003E05                 push    eax
.text$mn:00003E06                 mov     ecx, [ebp+var_4]
.text$mn:00003E09                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003E0E                 mov     ecx, [ebp+Src]
.text$mn:00003E11                 sub     ecx, eax
.text$mn:00003E13                 sar     ecx, 1
.text$mn:00003E15                 push    ecx
.text$mn:00003E16                 mov     edx, [ebp+var_4]
.text$mn:00003E19                 push    edx
.text$mn:00003E1A                 mov     ecx, [ebp+var_4]
.text$mn:00003E1D                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00003E22                 jmp     short loc_3E61
.text$mn:00003E24 ; ---------------------------------------------------------------------------
.text$mn:00003E24
.text$mn:00003E24 loc_3E24:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:00003E24                 push    0
.text$mn:00003E26                 mov     eax, [ebp+arg_4]
.text$mn:00003E29                 push    eax
.text$mn:00003E2A                 mov     ecx, [ebp+var_4]
.text$mn:00003E2D                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00003E32                 movzx   ecx, al
.text$mn:00003E35                 test    ecx, ecx
.text$mn:00003E37                 jz      short loc_3E5E
.text$mn:00003E39                 mov     edx, [ebp+arg_4]
.text$mn:00003E3C                 push    edx             ; int
.text$mn:00003E3D                 mov     eax, [ebp+Src]
.text$mn:00003E40                 push    eax             ; Src
.text$mn:00003E41                 mov     ecx, [ebp+var_4]
.text$mn:00003E44                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003E49                 push    eax             ; Dst
.text$mn:00003E4A                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00003E4F                 add     esp, 0Ch
.text$mn:00003E52                 mov     ecx, [ebp+arg_4]
.text$mn:00003E55                 push    ecx
.text$mn:00003E56                 mov     ecx, [ebp+var_4]
.text$mn:00003E59                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00003E5E
.text$mn:00003E5E loc_3E5E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:00003E5E                 mov     eax, [ebp+var_4]
.text$mn:00003E61
.text$mn:00003E61 loc_3E61:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:00003E61                 mov     esp, ebp
.text$mn:00003E63                 pop     ebp
.text$mn:00003E64                 retn    8
.text$mn:00003E64 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00003E64
.text$mn:00003E64 ; ---------------------------------------------------------------------------
.text$mn:00003E67                 align 4
.text$mn:00003E67 _text$mn        ends
.text$mn:00003E67
.text$mn:00003E68 ; ===========================================================================
.text$mn:00003E68
.text$mn:00003E68 ; Segment type: Pure code
.text$mn:00003E68 ; Segment permissions: Read/Execute
.text$mn:00003E68 _text$mn        segment para public 'CODE' use32
.text$mn:00003E68                 assume cs:_text$mn
.text$mn:00003E68                 ;org 3E68h
.text$mn:00003E68 ; COMDAT (pick any)
.text$mn:00003E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E68
.text$mn:00003E68 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E68
.text$mn:00003E68 ; Attributes: bp-based frame
.text$mn:00003E68
.text$mn:00003E68 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00003E68                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00003E68 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00003E68                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00003E68
.text$mn:00003E68 arg_0           = dword ptr  8
.text$mn:00003E68 arg_4           = dword ptr  0Ch
.text$mn:00003E68
.text$mn:00003E68                 push    ebp
.text$mn:00003E69                 mov     ebp, esp
.text$mn:00003E6B                 mov     eax, [ebp+arg_0]
.text$mn:00003E6E                 mov     ecx, [ebp+arg_4]
.text$mn:00003E71                 mov     dl, [ecx]
.text$mn:00003E73                 mov     [eax], dl
.text$mn:00003E75                 pop     ebp
.text$mn:00003E76                 retn
.text$mn:00003E76 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:00003E76
.text$mn:00003E76 ; ---------------------------------------------------------------------------
.text$mn:00003E77                 align 4
.text$mn:00003E77 _text$mn        ends
.text$mn:00003E77
.text$mn:00003E78 ; ===========================================================================
.text$mn:00003E78
.text$mn:00003E78 ; Segment type: Pure code
.text$mn:00003E78 ; Segment permissions: Read/Execute
.text$mn:00003E78 _text$mn        segment para public 'CODE' use32
.text$mn:00003E78                 assume cs:_text$mn
.text$mn:00003E78                 ;org 3E78h
.text$mn:00003E78 ; COMDAT (pick any)
.text$mn:00003E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E78
.text$mn:00003E78 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E78
.text$mn:00003E78 ; Attributes: bp-based frame
.text$mn:00003E78
.text$mn:00003E78 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:00003E78                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:00003E78 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:00003E78                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:00003E78
.text$mn:00003E78 arg_0           = dword ptr  8
.text$mn:00003E78 arg_4           = dword ptr  0Ch
.text$mn:00003E78
.text$mn:00003E78                 push    ebp
.text$mn:00003E79                 mov     ebp, esp
.text$mn:00003E7B                 mov     eax, [ebp+arg_0]
.text$mn:00003E7E                 mov     ecx, [ebp+arg_4]
.text$mn:00003E81                 mov     dx, [ecx]
.text$mn:00003E84                 mov     [eax], dx
.text$mn:00003E87                 pop     ebp
.text$mn:00003E88                 retn
.text$mn:00003E88 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:00003E88
.text$mn:00003E88 ; ---------------------------------------------------------------------------
.text$mn:00003E89                 align 4
.text$mn:00003E89 _text$mn        ends
.text$mn:00003E89
.text$mn:00003E8C ; ===========================================================================
.text$mn:00003E8C
.text$mn:00003E8C ; Segment type: Pure code
.text$mn:00003E8C ; Segment permissions: Read/Execute
.text$mn:00003E8C _text$mn        segment para public 'CODE' use32
.text$mn:00003E8C                 assume cs:_text$mn
.text$mn:00003E8C                 ;org 3E8Ch
.text$mn:00003E8C ; COMDAT (pick any)
.text$mn:00003E8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E8C
.text$mn:00003E8C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E8C
.text$mn:00003E8C ; Attributes: bp-based frame
.text$mn:00003E8C
.text$mn:00003E8C ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:00003E8C                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:00003E8C ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:00003E8C                                         ; CODE XREF: RegExtDlg::writeNppPath(void)+7Ap
.text$mn:00003E8C                                         ; RegExtDlg::writeNppPath(void)+1D1p
.text$mn:00003E8C
.text$mn:00003E8C var_4           = dword ptr -4
.text$mn:00003E8C
.text$mn:00003E8C                 push    ebp
.text$mn:00003E8D                 mov     ebp, esp
.text$mn:00003E8F                 push    ecx
.text$mn:00003E90                 mov     [ebp+var_4], ecx
.text$mn:00003E93                 mov     ecx, [ebp+var_4]
.text$mn:00003E96                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00003E9B                 mov     esp, ebp
.text$mn:00003E9D                 pop     ebp
.text$mn:00003E9E                 retn
.text$mn:00003E9E ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:00003E9E
.text$mn:00003E9E ; ---------------------------------------------------------------------------
.text$mn:00003E9F                 align 10h
.text$mn:00003E9F _text$mn        ends
.text$mn:00003E9F
.text$mn:00003EA0 ; ===========================================================================
.text$mn:00003EA0
.text$mn:00003EA0 ; Segment type: Pure code
.text$mn:00003EA0 ; Segment permissions: Read/Execute
.text$mn:00003EA0 _text$mn        segment para public 'CODE' use32
.text$mn:00003EA0                 assume cs:_text$mn
.text$mn:00003EA0                 ;org 3EA0h
.text$mn:00003EA0 ; COMDAT (pick any)
.text$mn:00003EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EA0
.text$mn:00003EA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EA0
.text$mn:00003EA0 ; Attributes: bp-based frame
.text$mn:00003EA0
.text$mn:00003EA0 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:00003EA0                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:00003EA0 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00003EA0                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:00003EA0
.text$mn:00003EA0 var_4           = dword ptr -4
.text$mn:00003EA0
.text$mn:00003EA0                 push    ebp
.text$mn:00003EA1                 mov     ebp, esp
.text$mn:00003EA3                 push    ecx
.text$mn:00003EA4                 mov     [ebp+var_4], ecx
.text$mn:00003EA7                 mov     eax, [ebp+var_4]
.text$mn:00003EAA                 mov     eax, [eax+4]
.text$mn:00003EAD                 mov     esp, ebp
.text$mn:00003EAF                 pop     ebp
.text$mn:00003EB0                 retn
.text$mn:00003EB0 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00003EB0
.text$mn:00003EB0 ; ---------------------------------------------------------------------------
.text$mn:00003EB1                 align 4
.text$mn:00003EB1 _text$mn        ends
.text$mn:00003EB1
.text$mn:00003EB4 ; ===========================================================================
.text$mn:00003EB4
.text$mn:00003EB4 ; Segment type: Pure code
.text$mn:00003EB4 ; Segment permissions: Read/Execute
.text$mn:00003EB4 _text$mn        segment para public 'CODE' use32
.text$mn:00003EB4                 assume cs:_text$mn
.text$mn:00003EB4                 ;org 3EB4h
.text$mn:00003EB4 ; COMDAT (pick any)
.text$mn:00003EB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EB4
.text$mn:00003EB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EB4
.text$mn:00003EB4 ; Attributes: bp-based frame
.text$mn:00003EB4
.text$mn:00003EB4 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00003EB4                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00003EB4 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00003EB4                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00003EB4                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00003EB4
.text$mn:00003EB4 var_4           = dword ptr -4
.text$mn:00003EB4
.text$mn:00003EB4                 push    ebp
.text$mn:00003EB5                 mov     ebp, esp
.text$mn:00003EB7                 push    ecx
.text$mn:00003EB8                 mov     [ebp+var_4], ecx
.text$mn:00003EBB                 mov     eax, [ebp+var_4]
.text$mn:00003EBE                 mov     eax, [eax+4]
.text$mn:00003EC1                 mov     esp, ebp
.text$mn:00003EC3                 pop     ebp
.text$mn:00003EC4                 retn
.text$mn:00003EC4 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00003EC4
.text$mn:00003EC4 ; ---------------------------------------------------------------------------
.text$mn:00003EC5                 align 4
.text$mn:00003EC5 _text$mn        ends
.text$mn:00003EC5
.text$mn:00003EC8 ; ===========================================================================
.text$mn:00003EC8
.text$mn:00003EC8 ; Segment type: Pure code
.text$mn:00003EC8 ; Segment permissions: Read/Execute
.text$mn:00003EC8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EC8                 assume cs:_text$mn
.text$mn:00003EC8                 ;org 3EC8h
.text$mn:00003EC8 ; COMDAT (pick any)
.text$mn:00003EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EC8
.text$mn:00003EC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EC8
.text$mn:00003EC8 ; Attributes: bp-based frame
.text$mn:00003EC8
.text$mn:00003EC8 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:00003EC8                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00003EC8 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:00003EC8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00003EC8
.text$mn:00003EC8 var_4           = dword ptr -4
.text$mn:00003EC8 Dst             = dword ptr  8
.text$mn:00003EC8 Src             = dword ptr  0Ch
.text$mn:00003EC8 Size            = dword ptr  10h
.text$mn:00003EC8
.text$mn:00003EC8                 push    ebp
.text$mn:00003EC9                 mov     ebp, esp
.text$mn:00003ECB                 push    ecx
.text$mn:00003ECC                 cmp     [ebp+Size], 0
.text$mn:00003ED0                 jnz     short loc_3EDA
.text$mn:00003ED2                 mov     eax, [ebp+Dst]
.text$mn:00003ED5                 mov     [ebp+var_4], eax
.text$mn:00003ED8                 jmp     short loc_3EF1
.text$mn:00003EDA ; ---------------------------------------------------------------------------
.text$mn:00003EDA
.text$mn:00003EDA loc_3EDA:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:00003EDA                 mov     ecx, [ebp+Size]
.text$mn:00003EDD                 push    ecx             ; Size
.text$mn:00003EDE                 mov     edx, [ebp+Src]
.text$mn:00003EE1                 push    edx             ; Src
.text$mn:00003EE2                 mov     eax, [ebp+Dst]
.text$mn:00003EE5                 push    eax             ; Dst
.text$mn:00003EE6                 call    _memcpy
.text$mn:00003EEB                 add     esp, 0Ch
.text$mn:00003EEE                 mov     [ebp+var_4], eax
.text$mn:00003EF1
.text$mn:00003EF1 loc_3EF1:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:00003EF1                 mov     eax, [ebp+var_4]
.text$mn:00003EF4                 mov     esp, ebp
.text$mn:00003EF6                 pop     ebp
.text$mn:00003EF7                 retn
.text$mn:00003EF7 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00003EF7
.text$mn:00003EF7 _text$mn        ends
.text$mn:00003EF7
.text$mn:00003EF8 ; ===========================================================================
.text$mn:00003EF8
.text$mn:00003EF8 ; Segment type: Pure code
.text$mn:00003EF8 ; Segment permissions: Read/Execute
.text$mn:00003EF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EF8                 assume cs:_text$mn
.text$mn:00003EF8                 ;org 3EF8h
.text$mn:00003EF8 ; COMDAT (pick any)
.text$mn:00003EF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EF8
.text$mn:00003EF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EF8
.text$mn:00003EF8 ; Attributes: bp-based frame
.text$mn:00003EF8
.text$mn:00003EF8 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:00003EF8                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00003EF8 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00003EF8                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:00003EF8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00003EF8
.text$mn:00003EF8 var_4           = dword ptr -4
.text$mn:00003EF8 Dst             = dword ptr  8
.text$mn:00003EF8 Src             = dword ptr  0Ch
.text$mn:00003EF8 arg_8           = dword ptr  10h
.text$mn:00003EF8
.text$mn:00003EF8                 push    ebp
.text$mn:00003EF9                 mov     ebp, esp
.text$mn:00003EFB                 push    ecx
.text$mn:00003EFC                 cmp     [ebp+arg_8], 0
.text$mn:00003F00                 jnz     short loc_3F0A
.text$mn:00003F02                 mov     eax, [ebp+Dst]
.text$mn:00003F05                 mov     [ebp+var_4], eax
.text$mn:00003F08                 jmp     short loc_3F21
.text$mn:00003F0A ; ---------------------------------------------------------------------------
.text$mn:00003F0A
.text$mn:00003F0A loc_3F0A:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00003F0A                 mov     ecx, [ebp+arg_8]
.text$mn:00003F0D                 push    ecx             ; int
.text$mn:00003F0E                 mov     edx, [ebp+Src]
.text$mn:00003F11                 push    edx             ; Src
.text$mn:00003F12                 mov     eax, [ebp+Dst]
.text$mn:00003F15                 push    eax             ; Dst
.text$mn:00003F16                 call    _wmemcpy
.text$mn:00003F1B                 add     esp, 0Ch
.text$mn:00003F1E                 mov     [ebp+var_4], eax
.text$mn:00003F21
.text$mn:00003F21 loc_3F21:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00003F21                 mov     eax, [ebp+var_4]
.text$mn:00003F24                 mov     esp, ebp
.text$mn:00003F26                 pop     ebp
.text$mn:00003F27                 retn
.text$mn:00003F27 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00003F27
.text$mn:00003F27 _text$mn        ends
.text$mn:00003F27
.text$mn:00003F28 ; ===========================================================================
.text$mn:00003F28
.text$mn:00003F28 ; Segment type: Pure code
.text$mn:00003F28 ; Segment permissions: Read/Execute
.text$mn:00003F28 _text$mn        segment para public 'CODE' use32
.text$mn:00003F28                 assume cs:_text$mn
.text$mn:00003F28                 ;org 3F28h
.text$mn:00003F28 ; COMDAT (pick any)
.text$mn:00003F28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F28
.text$mn:00003F28 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F28
.text$mn:00003F28 ; Attributes: bp-based frame
.text$mn:00003F28
.text$mn:00003F28 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:00003F28                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:00003F28 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:00003F28                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:00003F28
.text$mn:00003F28 var_4           = dword ptr -4
.text$mn:00003F28 arg_0           = dword ptr  8
.text$mn:00003F28 arg_4           = dword ptr  0Ch
.text$mn:00003F28
.text$mn:00003F28                 push    ebp
.text$mn:00003F29                 mov     ebp, esp
.text$mn:00003F2B                 push    ecx
.text$mn:00003F2C                 mov     [ebp+var_4], ecx
.text$mn:00003F2F                 mov     eax, [ebp+arg_4]
.text$mn:00003F32                 push    eax             ; int
.text$mn:00003F33                 mov     ecx, [ebp+arg_0]
.text$mn:00003F36                 push    ecx             ; void *
.text$mn:00003F37                 mov     ecx, [ebp+var_4]
.text$mn:00003F3A                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:00003F3F                 mov     esp, ebp
.text$mn:00003F41                 pop     ebp
.text$mn:00003F42                 retn    8
.text$mn:00003F42 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:00003F42
.text$mn:00003F42 ; ---------------------------------------------------------------------------
.text$mn:00003F45                 align 4
.text$mn:00003F45 _text$mn        ends
.text$mn:00003F45
.text$mn:00003F48 ; ===========================================================================
.text$mn:00003F48
.text$mn:00003F48 ; Segment type: Pure code
.text$mn:00003F48 ; Segment permissions: Read/Execute
.text$mn:00003F48 _text$mn        segment para public 'CODE' use32
.text$mn:00003F48                 assume cs:_text$mn
.text$mn:00003F48                 ;org 3F48h
.text$mn:00003F48 ; COMDAT (pick any)
.text$mn:00003F48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F48
.text$mn:00003F48 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F48
.text$mn:00003F48 ; Attributes: bp-based frame
.text$mn:00003F48
.text$mn:00003F48 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:00003F48                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:00003F48 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:00003F48                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:00003F48
.text$mn:00003F48 var_4           = dword ptr -4
.text$mn:00003F48 arg_0           = dword ptr  8
.text$mn:00003F48 arg_4           = dword ptr  0Ch
.text$mn:00003F48
.text$mn:00003F48                 push    ebp
.text$mn:00003F49                 mov     ebp, esp
.text$mn:00003F4B                 push    ecx
.text$mn:00003F4C                 mov     [ebp+var_4], ecx
.text$mn:00003F4F                 mov     eax, [ebp+arg_4]
.text$mn:00003F52                 push    eax             ; int
.text$mn:00003F53                 mov     ecx, [ebp+arg_0]
.text$mn:00003F56                 push    ecx             ; void *
.text$mn:00003F57                 mov     ecx, [ebp+var_4]
.text$mn:00003F5A                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:00003F5F                 mov     esp, ebp
.text$mn:00003F61                 pop     ebp
.text$mn:00003F62                 retn    8
.text$mn:00003F62 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:00003F62
.text$mn:00003F62 ; ---------------------------------------------------------------------------
.text$mn:00003F65                 align 4
.text$mn:00003F65 _text$mn        ends
.text$mn:00003F65
.text$mn:00003F68 ; ===========================================================================
.text$mn:00003F68
.text$mn:00003F68 ; Segment type: Pure code
.text$mn:00003F68 ; Segment permissions: Read/Execute
.text$mn:00003F68 _text$mn        segment para public 'CODE' use32
.text$mn:00003F68                 assume cs:_text$mn
.text$mn:00003F68                 ;org 3F68h
.text$mn:00003F68 ; COMDAT (pick any)
.text$mn:00003F68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F68
.text$mn:00003F68 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F68
.text$mn:00003F68 ; Attributes: bp-based frame
.text$mn:00003F68
.text$mn:00003F68 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:00003F68                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:00003F68 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:00003F68                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:00003F68
.text$mn:00003F68 var_4           = dword ptr -4
.text$mn:00003F68 arg_0           = dword ptr  8
.text$mn:00003F68
.text$mn:00003F68                 push    ebp
.text$mn:00003F69                 mov     ebp, esp
.text$mn:00003F6B                 push    ecx
.text$mn:00003F6C                 mov     [ebp+var_4], ecx
.text$mn:00003F6F                 mov     eax, [ebp+arg_0]
.text$mn:00003F72                 push    eax             ; void *
.text$mn:00003F73                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00003F78                 add     esp, 4
.text$mn:00003F7B                 mov     esp, ebp
.text$mn:00003F7D                 pop     ebp
.text$mn:00003F7E                 retn    8
.text$mn:00003F7E ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:00003F7E
.text$mn:00003F7E ; ---------------------------------------------------------------------------
.text$mn:00003F81                 align 4
.text$mn:00003F81 _text$mn        ends
.text$mn:00003F81
.text$mn:00003F84 ; ===========================================================================
.text$mn:00003F84
.text$mn:00003F84 ; Segment type: Pure code
.text$mn:00003F84 ; Segment permissions: Read/Execute
.text$mn:00003F84 _text$mn        segment para public 'CODE' use32
.text$mn:00003F84                 assume cs:_text$mn
.text$mn:00003F84                 ;org 3F84h
.text$mn:00003F84 ; COMDAT (pick any)
.text$mn:00003F84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F84
.text$mn:00003F84 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F84
.text$mn:00003F84 ; Attributes: bp-based frame
.text$mn:00003F84
.text$mn:00003F84 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:00003F84                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00003F84 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00003F84                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:00003F84                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p
.text$mn:00003F84
.text$mn:00003F84 var_4           = dword ptr -4
.text$mn:00003F84 arg_0           = dword ptr  8
.text$mn:00003F84
.text$mn:00003F84                 push    ebp
.text$mn:00003F85                 mov     ebp, esp
.text$mn:00003F87                 push    ecx
.text$mn:00003F88                 mov     [ebp+var_4], ecx
.text$mn:00003F8B                 mov     eax, [ebp+arg_0]
.text$mn:00003F8E                 push    eax             ; void *
.text$mn:00003F8F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00003F94                 add     esp, 4
.text$mn:00003F97                 mov     esp, ebp
.text$mn:00003F99                 pop     ebp
.text$mn:00003F9A                 retn    8
.text$mn:00003F9A ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00003F9A
.text$mn:00003F9A ; ---------------------------------------------------------------------------
.text$mn:00003F9D                 align 10h
.text$mn:00003F9D _text$mn        ends
.text$mn:00003F9D
.text$mn:00003FA0 ; ===========================================================================
.text$mn:00003FA0
.text$mn:00003FA0 ; Segment type: Pure code
.text$mn:00003FA0 ; Segment permissions: Read/Execute
.text$mn:00003FA0 _text$mn        segment para public 'CODE' use32
.text$mn:00003FA0                 assume cs:_text$mn
.text$mn:00003FA0                 ;org 3FA0h
.text$mn:00003FA0 ; COMDAT (pick any)
.text$mn:00003FA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FA0
.text$mn:00003FA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FA0
.text$mn:00003FA0 ; Attributes: bp-based frame
.text$mn:00003FA0
.text$mn:00003FA0 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:00003FA0                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:00003FA0 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:00003FA0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:00003FA0
.text$mn:00003FA0 var_4           = dword ptr -4
.text$mn:00003FA0 arg_0           = dword ptr  8
.text$mn:00003FA0
.text$mn:00003FA0                 push    ebp
.text$mn:00003FA1                 mov     ebp, esp
.text$mn:00003FA3                 push    ecx
.text$mn:00003FA4                 mov     [ebp+var_4], ecx
.text$mn:00003FA7                 mov     eax, [ebp+arg_0]
.text$mn:00003FAA                 push    eax             ; void *
.text$mn:00003FAB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00003FB0                 add     esp, 4
.text$mn:00003FB3                 mov     esp, ebp
.text$mn:00003FB5                 pop     ebp
.text$mn:00003FB6                 retn    8
.text$mn:00003FB6 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:00003FB6
.text$mn:00003FB6 ; ---------------------------------------------------------------------------
.text$mn:00003FB9                 align 4
.text$mn:00003FB9 _text$mn        ends
.text$mn:00003FB9
.text$mn:00003FBC ; ===========================================================================
.text$mn:00003FBC
.text$mn:00003FBC ; Segment type: Pure code
.text$mn:00003FBC ; Segment permissions: Read/Execute
.text$mn:00003FBC _text$mn        segment para public 'CODE' use32
.text$mn:00003FBC                 assume cs:_text$mn
.text$mn:00003FBC                 ;org 3FBCh
.text$mn:00003FBC ; COMDAT (pick any)
.text$mn:00003FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FBC
.text$mn:00003FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00003FBC
.text$mn:00003FBC ; Attributes: bp-based frame
.text$mn:00003FBC
.text$mn:00003FBC ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:00003FBC                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00003FBC ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00003FBC                                         ; DATA XREF: .rdata:00004DB8o
.text$mn:00003FBC
.text$mn:00003FBC var_4           = dword ptr -4
.text$mn:00003FBC arg_0           = dword ptr  8
.text$mn:00003FBC arg_4           = dword ptr  0Ch
.text$mn:00003FBC
.text$mn:00003FBC                 push    ebp
.text$mn:00003FBD                 mov     ebp, esp
.text$mn:00003FBF                 push    ecx
.text$mn:00003FC0                 mov     [ebp+var_4], ecx
.text$mn:00003FC3                 mov     eax, [ebp+arg_4]
.text$mn:00003FC6                 push    eax             ; int
.text$mn:00003FC7                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00003FCC                 add     esp, 4
.text$mn:00003FCF                 test    eax, eax
.text$mn:00003FD1                 jz      short loc_3FEC
.text$mn:00003FD3                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00003FD8                 push    eax             ; struct std::error_category *
.text$mn:00003FD9                 mov     ecx, [ebp+arg_4]
.text$mn:00003FDC                 push    ecx             ; int
.text$mn:00003FDD                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003FE0                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00003FE5                 mov     eax, [ebp+arg_0]
.text$mn:00003FE8                 jmp     short loc_4001
.text$mn:00003FEA ; ---------------------------------------------------------------------------
.text$mn:00003FEA                 jmp     short loc_4001
.text$mn:00003FEC ; ---------------------------------------------------------------------------
.text$mn:00003FEC
.text$mn:00003FEC loc_3FEC:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:00003FEC                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:00003FF1                 push    eax             ; struct std::error_category *
.text$mn:00003FF2                 mov     edx, [ebp+arg_4]
.text$mn:00003FF5                 push    edx             ; int
.text$mn:00003FF6                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003FF9                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00003FFE                 mov     eax, [ebp+arg_0]
.text$mn:00004001
.text$mn:00004001 loc_4001:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:00004001                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:00004001                 mov     esp, ebp
.text$mn:00004003                 pop     ebp
.text$mn:00004004                 retn    8
.text$mn:00004004 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00004004
.text$mn:00004004 ; ---------------------------------------------------------------------------
.text$mn:00004007                 align 4
.text$mn:00004007 _text$mn        ends
.text$mn:00004007
.text$mn:00004008 ; ===========================================================================
.text$mn:00004008
.text$mn:00004008 ; Segment type: Pure code
.text$mn:00004008 ; Segment permissions: Read/Execute
.text$mn:00004008 _text$mn        segment para public 'CODE' use32
.text$mn:00004008                 assume cs:_text$mn
.text$mn:00004008                 ;org 4008h
.text$mn:00004008 ; COMDAT (pick any)
.text$mn:00004008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004008
.text$mn:00004008 ; =============== S U B R O U T I N E =======================================
.text$mn:00004008
.text$mn:00004008 ; Attributes: bp-based frame
.text$mn:00004008
.text$mn:00004008 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:00004008                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00004008 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00004008                                         ; DATA XREF: .rdata:00004D28o
.text$mn:00004008                                         ; .rdata:00004D44o ...
.text$mn:00004008
.text$mn:00004008 var_4           = dword ptr -4
.text$mn:00004008 arg_0           = dword ptr  8
.text$mn:00004008 arg_4           = dword ptr  0Ch
.text$mn:00004008
.text$mn:00004008                 push    ebp
.text$mn:00004009                 mov     ebp, esp
.text$mn:0000400B                 push    ecx
.text$mn:0000400C                 mov     [ebp+var_4], ecx
.text$mn:0000400F                 mov     eax, [ebp+var_4]
.text$mn:00004012                 push    eax             ; struct std::error_category *
.text$mn:00004013                 mov     ecx, [ebp+arg_4]
.text$mn:00004016                 push    ecx             ; int
.text$mn:00004017                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000401A                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000401F                 mov     eax, [ebp+arg_0]
.text$mn:00004022                 mov     esp, ebp
.text$mn:00004024                 pop     ebp
.text$mn:00004025                 retn    8
.text$mn:00004025 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00004025
.text$mn:00004025 _text$mn        ends
.text$mn:00004025
.text$mn:00004028 ; ===========================================================================
.text$mn:00004028
.text$mn:00004028 ; Segment type: Pure code
.text$mn:00004028 ; Segment permissions: Read/Execute
.text$mn:00004028 _text$mn        segment para public 'CODE' use32
.text$mn:00004028                 assume cs:_text$mn
.text$mn:00004028                 ;org 4028h
.text$mn:00004028 ; COMDAT (pick any)
.text$mn:00004028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004028
.text$mn:00004028 ; =============== S U B R O U T I N E =======================================
.text$mn:00004028
.text$mn:00004028 ; Attributes: bp-based frame
.text$mn:00004028
.text$mn:00004028 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:00004028                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:00004028 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:00004028                                         ; DATA XREF: .rdata:00004D2Co
.text$mn:00004028                                         ; .rdata:00004D48o ...
.text$mn:00004028
.text$mn:00004028 var_8           = dword ptr -8
.text$mn:00004028 var_4           = dword ptr -4
.text$mn:00004028 arg_0           = dword ptr  8
.text$mn:00004028 arg_4           = dword ptr  0Ch
.text$mn:00004028
.text$mn:00004028                 push    ebp
.text$mn:00004029                 mov     ebp, esp
.text$mn:0000402B                 sub     esp, 8
.text$mn:0000402E                 mov     [ebp+var_8], ecx
.text$mn:00004031                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004034                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:00004039                 push    eax
.text$mn:0000403A                 mov     ecx, [ebp+var_8]
.text$mn:0000403D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00004042                 movzx   eax, al
.text$mn:00004045                 test    eax, eax
.text$mn:00004047                 jz      short loc_405F
.text$mn:00004049                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000404C                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00004051                 cmp     eax, [ebp+arg_4]
.text$mn:00004054                 jnz     short loc_405F
.text$mn:00004056                 mov     [ebp+var_4], 1
.text$mn:0000405D                 jmp     short loc_4066
.text$mn:0000405F ; ---------------------------------------------------------------------------
.text$mn:0000405F
.text$mn:0000405F loc_405F:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:0000405F                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:0000405F                 mov     [ebp+var_4], 0
.text$mn:00004066
.text$mn:00004066 loc_4066:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:00004066                 mov     al, byte ptr [ebp+var_4]
.text$mn:00004069                 mov     esp, ebp
.text$mn:0000406B                 pop     ebp
.text$mn:0000406C                 retn    8
.text$mn:0000406C ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:0000406C
.text$mn:0000406C ; ---------------------------------------------------------------------------
.text$mn:0000406F                 align 10h
.text$mn:0000406F _text$mn        ends
.text$mn:0000406F
.text$mn:00004070 ; ===========================================================================
.text$mn:00004070
.text$mn:00004070 ; Segment type: Pure code
.text$mn:00004070 ; Segment permissions: Read/Execute
.text$mn:00004070 _text$mn        segment para public 'CODE' use32
.text$mn:00004070                 assume cs:_text$mn
.text$mn:00004070                 ;org 4070h
.text$mn:00004070 ; COMDAT (pick any)
.text$mn:00004070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004070
.text$mn:00004070 ; =============== S U B R O U T I N E =======================================
.text$mn:00004070
.text$mn:00004070 ; Attributes: bp-based frame
.text$mn:00004070
.text$mn:00004070 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:00004070                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:00004070 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:00004070                                         ; DATA XREF: .rdata:00004D30o
.text$mn:00004070                                         ; .rdata:00004D4Co ...
.text$mn:00004070
.text$mn:00004070 var_C           = byte ptr -0Ch
.text$mn:00004070 var_4           = dword ptr -4
.text$mn:00004070 arg_0           = dword ptr  8
.text$mn:00004070 arg_4           = dword ptr  0Ch
.text$mn:00004070
.text$mn:00004070                 push    ebp
.text$mn:00004071                 mov     ebp, esp
.text$mn:00004073                 sub     esp, 0Ch
.text$mn:00004076                 mov     [ebp+var_4], ecx
.text$mn:00004079                 mov     eax, [ebp+arg_4]
.text$mn:0000407C                 push    eax             ; std::error_condition *
.text$mn:0000407D                 mov     ecx, [ebp+arg_0]
.text$mn:00004080                 push    ecx
.text$mn:00004081                 lea     edx, [ebp+var_C]
.text$mn:00004084                 push    edx
.text$mn:00004085                 mov     eax, [ebp+var_4]
.text$mn:00004088                 mov     edx, [eax]
.text$mn:0000408A                 mov     ecx, [ebp+var_4]
.text$mn:0000408D                 mov     eax, [edx+0Ch]
.text$mn:00004090                 call    eax
.text$mn:00004092                 mov     ecx, eax
.text$mn:00004094                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:00004099                 mov     esp, ebp
.text$mn:0000409B                 pop     ebp
.text$mn:0000409C                 retn    8
.text$mn:0000409C ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:0000409C
.text$mn:0000409C ; ---------------------------------------------------------------------------
.text$mn:0000409F                 align 10h
.text$mn:0000409F _text$mn        ends
.text$mn:0000409F
.text$mn:000040A0 ; ===========================================================================
.text$mn:000040A0
.text$mn:000040A0 ; Segment type: Pure code
.text$mn:000040A0 ; Segment permissions: Read/Execute
.text$mn:000040A0 _text$mn        segment para public 'CODE' use32
.text$mn:000040A0                 assume cs:_text$mn
.text$mn:000040A0                 ;org 40A0h
.text$mn:000040A0 ; COMDAT (pick any)
.text$mn:000040A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040A0
.text$mn:000040A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000040A0
.text$mn:000040A0 ; Attributes: bp-based frame
.text$mn:000040A0
.text$mn:000040A0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:000040A0                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:000040A0 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:000040A0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:000040A0
.text$mn:000040A0 var_4           = dword ptr -4
.text$mn:000040A0 arg_0           = dword ptr  8
.text$mn:000040A0
.text$mn:000040A0                 push    ebp
.text$mn:000040A1                 mov     ebp, esp
.text$mn:000040A3                 push    ecx
.text$mn:000040A4                 mov     [ebp+var_4], ecx
.text$mn:000040A7                 mov     eax, [ebp+var_4]
.text$mn:000040AA                 mov     ecx, [eax+14h]
.text$mn:000040AD                 cmp     ecx, [ebp+arg_0]
.text$mn:000040B0                 jnb     short loc_40BA
.text$mn:000040B2                 mov     ecx, [ebp+var_4]
.text$mn:000040B5                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000040BA
.text$mn:000040BA loc_40BA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:000040BA                 mov     edx, [ebp+arg_0]
.text$mn:000040BD                 push    edx
.text$mn:000040BE                 mov     ecx, [ebp+var_4]
.text$mn:000040C1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000040C6                 mov     eax, [ebp+var_4]
.text$mn:000040C9                 mov     esp, ebp
.text$mn:000040CB                 pop     ebp
.text$mn:000040CC                 retn    4
.text$mn:000040CC ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:000040CC
.text$mn:000040CC ; ---------------------------------------------------------------------------
.text$mn:000040CF                 align 10h
.text$mn:000040CF _text$mn        ends
.text$mn:000040CF
.text$mn:000040D0 ; ===========================================================================
.text$mn:000040D0
.text$mn:000040D0 ; Segment type: Pure code
.text$mn:000040D0 ; Segment permissions: Read/Execute
.text$mn:000040D0 _text$mn        segment para public 'CODE' use32
.text$mn:000040D0                 assume cs:_text$mn
.text$mn:000040D0                 ;org 40D0h
.text$mn:000040D0 ; COMDAT (pick any)
.text$mn:000040D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000040D0
.text$mn:000040D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000040D0
.text$mn:000040D0 ; Attributes: bp-based frame
.text$mn:000040D0
.text$mn:000040D0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:000040D0                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:000040D0 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:000040D0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:000040D0
.text$mn:000040D0 var_C           = dword ptr -0Ch
.text$mn:000040D0 Dst             = dword ptr -8
.text$mn:000040D0 var_4           = dword ptr -4
.text$mn:000040D0 arg_0           = dword ptr  8
.text$mn:000040D0 arg_4           = dword ptr  0Ch
.text$mn:000040D0
.text$mn:000040D0                 push    ebp
.text$mn:000040D1                 mov     ebp, esp
.text$mn:000040D3                 sub     esp, 0Ch
.text$mn:000040D6                 mov     [ebp+var_4], ecx
.text$mn:000040D9                 mov     eax, [ebp+var_4]
.text$mn:000040DC                 mov     ecx, [eax+14h]
.text$mn:000040DF                 cmp     ecx, [ebp+arg_0]
.text$mn:000040E2                 jnb     short loc_40EC
.text$mn:000040E4                 mov     ecx, [ebp+var_4]
.text$mn:000040E7                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000040EC
.text$mn:000040EC loc_40EC:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:000040EC                 mov     edx, [ebp+var_4]
.text$mn:000040EF                 mov     eax, [edx+14h]
.text$mn:000040F2                 sub     eax, [ebp+arg_0]
.text$mn:000040F5                 cmp     eax, [ebp+arg_4]
.text$mn:000040F8                 ja      short loc_4108
.text$mn:000040FA                 mov     ecx, [ebp+arg_0]
.text$mn:000040FD                 push    ecx
.text$mn:000040FE                 mov     ecx, [ebp+var_4]
.text$mn:00004101                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00004106                 jmp     short loc_414E
.text$mn:00004108 ; ---------------------------------------------------------------------------
.text$mn:00004108
.text$mn:00004108 loc_4108:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:00004108                 cmp     [ebp+arg_4], 0
.text$mn:0000410C                 jbe     short loc_414E
.text$mn:0000410E                 mov     ecx, [ebp+var_4]
.text$mn:00004111                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00004116                 add     eax, [ebp+arg_0]
.text$mn:00004119                 mov     [ebp+Dst], eax
.text$mn:0000411C                 mov     edx, [ebp+var_4]
.text$mn:0000411F                 mov     eax, [edx+14h]
.text$mn:00004122                 sub     eax, [ebp+arg_4]
.text$mn:00004125                 mov     [ebp+var_C], eax
.text$mn:00004128                 mov     ecx, [ebp+var_C]
.text$mn:0000412B                 sub     ecx, [ebp+arg_0]
.text$mn:0000412E                 push    ecx             ; Size
.text$mn:0000412F                 mov     edx, [ebp+Dst]
.text$mn:00004132                 add     edx, [ebp+arg_4]
.text$mn:00004135                 push    edx             ; Src
.text$mn:00004136                 mov     eax, [ebp+Dst]
.text$mn:00004139                 push    eax             ; Dst
.text$mn:0000413A                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000413F                 add     esp, 0Ch
.text$mn:00004142                 mov     ecx, [ebp+var_C]
.text$mn:00004145                 push    ecx
.text$mn:00004146                 mov     ecx, [ebp+var_4]
.text$mn:00004149                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000414E
.text$mn:0000414E loc_414E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:0000414E                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:0000414E                 mov     eax, [ebp+var_4]
.text$mn:00004151                 mov     esp, ebp
.text$mn:00004153                 pop     ebp
.text$mn:00004154                 retn    8
.text$mn:00004154 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:00004154
.text$mn:00004154 ; ---------------------------------------------------------------------------
.text$mn:00004157                 align 4
.text$mn:00004157 _text$mn        ends
.text$mn:00004157
.text$mn:00004158 ; ===========================================================================
.text$mn:00004158
.text$mn:00004158 ; Segment type: Pure code
.text$mn:00004158 ; Segment permissions: Read/Execute
.text$mn:00004158 _text$mn        segment para public 'CODE' use32
.text$mn:00004158                 assume cs:_text$mn
.text$mn:00004158                 ;org 4158h
.text$mn:00004158 ; COMDAT (pick any)
.text$mn:00004158                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004158
.text$mn:00004158 ; =============== S U B R O U T I N E =======================================
.text$mn:00004158
.text$mn:00004158 ; Attributes: bp-based frame
.text$mn:00004158
.text$mn:00004158 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:00004158                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:00004158 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00004158                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:00004158
.text$mn:00004158 var_4           = dword ptr -4
.text$mn:00004158 arg_0           = dword ptr  8
.text$mn:00004158
.text$mn:00004158                 push    ebp
.text$mn:00004159                 mov     ebp, esp
.text$mn:0000415B                 push    ecx
.text$mn:0000415C                 mov     [ebp+var_4], ecx
.text$mn:0000415F                 mov     eax, [ebp+var_4]
.text$mn:00004162                 mov     ecx, [eax+14h]
.text$mn:00004165                 cmp     ecx, [ebp+arg_0]
.text$mn:00004168                 jnb     short loc_4172
.text$mn:0000416A                 mov     ecx, [ebp+var_4]
.text$mn:0000416D                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00004172
.text$mn:00004172 loc_4172:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:00004172                 mov     edx, [ebp+arg_0]
.text$mn:00004175                 push    edx
.text$mn:00004176                 mov     ecx, [ebp+var_4]
.text$mn:00004179                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000417E                 mov     eax, [ebp+var_4]
.text$mn:00004181                 mov     esp, ebp
.text$mn:00004183                 pop     ebp
.text$mn:00004184                 retn    4
.text$mn:00004184 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:00004184
.text$mn:00004184 ; ---------------------------------------------------------------------------
.text$mn:00004187                 align 4
.text$mn:00004187 _text$mn        ends
.text$mn:00004187
.text$mn:00004188 ; ===========================================================================
.text$mn:00004188
.text$mn:00004188 ; Segment type: Pure code
.text$mn:00004188 ; Segment permissions: Read/Execute
.text$mn:00004188 _text$mn        segment para public 'CODE' use32
.text$mn:00004188                 assume cs:_text$mn
.text$mn:00004188                 ;org 4188h
.text$mn:00004188 ; COMDAT (pick any)
.text$mn:00004188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004188
.text$mn:00004188 ; =============== S U B R O U T I N E =======================================
.text$mn:00004188
.text$mn:00004188 ; Attributes: bp-based frame
.text$mn:00004188
.text$mn:00004188 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:00004188                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:00004188 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00004188                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:00004188
.text$mn:00004188 var_C           = dword ptr -0Ch
.text$mn:00004188 Dst             = dword ptr -8
.text$mn:00004188 var_4           = dword ptr -4
.text$mn:00004188 arg_0           = dword ptr  8
.text$mn:00004188 arg_4           = dword ptr  0Ch
.text$mn:00004188
.text$mn:00004188                 push    ebp
.text$mn:00004189                 mov     ebp, esp
.text$mn:0000418B                 sub     esp, 0Ch
.text$mn:0000418E                 mov     [ebp+var_4], ecx
.text$mn:00004191                 mov     eax, [ebp+var_4]
.text$mn:00004194                 mov     ecx, [eax+14h]
.text$mn:00004197                 cmp     ecx, [ebp+arg_0]
.text$mn:0000419A                 jnb     short loc_41A4
.text$mn:0000419C                 mov     ecx, [ebp+var_4]
.text$mn:0000419F                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000041A4
.text$mn:000041A4 loc_41A4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:000041A4                 mov     edx, [ebp+var_4]
.text$mn:000041A7                 mov     eax, [edx+14h]
.text$mn:000041AA                 sub     eax, [ebp+arg_0]
.text$mn:000041AD                 cmp     eax, [ebp+arg_4]
.text$mn:000041B0                 ja      short loc_41C0
.text$mn:000041B2                 mov     ecx, [ebp+arg_0]
.text$mn:000041B5                 push    ecx
.text$mn:000041B6                 mov     ecx, [ebp+var_4]
.text$mn:000041B9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000041BE                 jmp     short loc_420C
.text$mn:000041C0 ; ---------------------------------------------------------------------------
.text$mn:000041C0
.text$mn:000041C0 loc_41C0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:000041C0                 cmp     [ebp+arg_4], 0
.text$mn:000041C4                 jbe     short loc_420C
.text$mn:000041C6                 mov     ecx, [ebp+var_4]
.text$mn:000041C9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000041CE                 mov     edx, [ebp+arg_0]
.text$mn:000041D1                 lea     eax, [eax+edx*2]
.text$mn:000041D4                 mov     [ebp+Dst], eax
.text$mn:000041D7                 mov     ecx, [ebp+var_4]
.text$mn:000041DA                 mov     edx, [ecx+14h]
.text$mn:000041DD                 sub     edx, [ebp+arg_4]
.text$mn:000041E0                 mov     [ebp+var_C], edx
.text$mn:000041E3                 mov     eax, [ebp+var_C]
.text$mn:000041E6                 sub     eax, [ebp+arg_0]
.text$mn:000041E9                 push    eax             ; int
.text$mn:000041EA                 mov     ecx, [ebp+arg_4]
.text$mn:000041ED                 mov     edx, [ebp+Dst]
.text$mn:000041F0                 lea     eax, [edx+ecx*2]
.text$mn:000041F3                 push    eax             ; Src
.text$mn:000041F4                 mov     ecx, [ebp+Dst]
.text$mn:000041F7                 push    ecx             ; Dst
.text$mn:000041F8                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000041FD                 add     esp, 0Ch
.text$mn:00004200                 mov     edx, [ebp+var_C]
.text$mn:00004203                 push    edx
.text$mn:00004204                 mov     ecx, [ebp+var_4]
.text$mn:00004207                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000420C
.text$mn:0000420C loc_420C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:0000420C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:0000420C                 mov     eax, [ebp+var_4]
.text$mn:0000420F                 mov     esp, ebp
.text$mn:00004211                 pop     ebp
.text$mn:00004212                 retn    8
.text$mn:00004212 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:00004212
.text$mn:00004212 ; ---------------------------------------------------------------------------
.text$mn:00004215                 align 4
.text$mn:00004215 _text$mn        ends
.text$mn:00004215
.text$mn:00004218 ; ===========================================================================
.text$mn:00004218
.text$mn:00004218 ; Segment type: Pure code
.text$mn:00004218 ; Segment permissions: Read/Execute
.text$mn:00004218 _text$mn        segment para public 'CODE' use32
.text$mn:00004218                 assume cs:_text$mn
.text$mn:00004218                 ;org 4218h
.text$mn:00004218 ; COMDAT (pick any)
.text$mn:00004218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004218
.text$mn:00004218 ; =============== S U B R O U T I N E =======================================
.text$mn:00004218
.text$mn:00004218 ; Attributes: bp-based frame
.text$mn:00004218
.text$mn:00004218 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:00004218                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:00004218 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00004218                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:00004218                 push    ebp
.text$mn:00004219                 mov     ebp, esp
.text$mn:0000421B                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:00004220                 pop     ebp
.text$mn:00004221                 retn
.text$mn:00004221 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00004221
.text$mn:00004221 ; ---------------------------------------------------------------------------
.text$mn:00004222                 align 4
.text$mn:00004222 _text$mn        ends
.text$mn:00004222
.text$mn:00004224 ; ===========================================================================
.text$mn:00004224
.text$mn:00004224 ; Segment type: Pure code
.text$mn:00004224 ; Segment permissions: Read/Execute
.text$mn:00004224 _text$mn        segment para public 'CODE' use32
.text$mn:00004224                 assume cs:_text$mn
.text$mn:00004224                 ;org 4224h
.text$mn:00004224 ; COMDAT (pick any)
.text$mn:00004224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004224
.text$mn:00004224 ; =============== S U B R O U T I N E =======================================
.text$mn:00004224
.text$mn:00004224 ; Attributes: bp-based frame
.text$mn:00004224
.text$mn:00004224 ; int __thiscall RegExtDlg::getNbSubKey(RegExtDlg *this, HKEY)
.text$mn:00004224                 public ?getNbSubKey@RegExtDlg@@ABEHPAUHKEY__@@@Z
.text$mn:00004224 ?getNbSubKey@RegExtDlg@@ABEHPAUHKEY__@@@Z proc near
.text$mn:00004224                                         ; CODE XREF: RegExtDlg::getRegisteredExts(void)+24p
.text$mn:00004224                                         ; RegExtDlg::deleteExts(wchar_t const *)+5Bp
.text$mn:00004224
.text$mn:00004224 var_10          = dword ptr -10h
.text$mn:00004224 cSubKeys        = dword ptr -0Ch
.text$mn:00004224 var_8           = dword ptr -8
.text$mn:00004224 var_4           = dword ptr -4
.text$mn:00004224 hKey            = dword ptr  8
.text$mn:00004224
.text$mn:00004224                 push    ebp
.text$mn:00004225                 mov     ebp, esp
.text$mn:00004227                 sub     esp, 10h
.text$mn:0000422A                 mov     [ebp+var_10], ecx
.text$mn:0000422D                 push    0               ; lpftLastWriteTime
.text$mn:0000422F                 push    0               ; lpcbSecurityDescriptor
.text$mn:00004231                 push    0               ; lpcbMaxValueLen
.text$mn:00004233                 push    0               ; lpcbMaxValueNameLen
.text$mn:00004235                 push    0               ; lpcValues
.text$mn:00004237                 push    0               ; lpcbMaxClassLen
.text$mn:00004239                 push    0               ; lpcbMaxSubKeyLen
.text$mn:0000423B                 lea     eax, [ebp+cSubKeys]
.text$mn:0000423E                 push    eax             ; lpcSubKeys
.text$mn:0000423F                 push    0               ; lpReserved
.text$mn:00004241                 push    0               ; lpcchClass
.text$mn:00004243                 push    0               ; lpClass
.text$mn:00004245                 mov     ecx, [ebp+hKey]
.text$mn:00004248                 push    ecx             ; hKey
.text$mn:00004249                 call    dword ptr ds:__imp__RegQueryInfoKeyW@48 ; RegQueryInfoKeyW(x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:0000424F                 mov     [ebp+var_8], eax
.text$mn:00004252                 cmp     [ebp+var_8], 0
.text$mn:00004256                 jnz     short loc_4260
.text$mn:00004258                 mov     edx, [ebp+cSubKeys]
.text$mn:0000425B                 mov     [ebp+var_4], edx
.text$mn:0000425E                 jmp     short loc_4267
.text$mn:00004260 ; ---------------------------------------------------------------------------
.text$mn:00004260
.text$mn:00004260 loc_4260:                               ; CODE XREF: RegExtDlg::getNbSubKey(HKEY__ *)+32j
.text$mn:00004260                 mov     [ebp+var_4], 0
.text$mn:00004267
.text$mn:00004267 loc_4267:                               ; CODE XREF: RegExtDlg::getNbSubKey(HKEY__ *)+3Aj
.text$mn:00004267                 mov     eax, [ebp+var_4]
.text$mn:0000426A                 mov     esp, ebp
.text$mn:0000426C                 pop     ebp
.text$mn:0000426D                 retn    4
.text$mn:0000426D ?getNbSubKey@RegExtDlg@@ABEHPAUHKEY__@@@Z endp
.text$mn:0000426D
.text$mn:0000426D _text$mn        ends
.text$mn:0000426D
.text$mn:00004270 ; ===========================================================================
.text$mn:00004270
.text$mn:00004270 ; Segment type: Pure code
.text$mn:00004270 ; Segment permissions: Read/Execute
.text$mn:00004270 _text$mn        segment para public 'CODE' use32
.text$mn:00004270                 assume cs:_text$mn
.text$mn:00004270                 ;org 4270h
.text$mn:00004270 ; COMDAT (pick any)
.text$mn:00004270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004270
.text$mn:00004270 ; =============== S U B R O U T I N E =======================================
.text$mn:00004270
.text$mn:00004270 ; Attributes: bp-based frame
.text$mn:00004270
.text$mn:00004270 ; int __thiscall RegExtDlg::getNbSubValue(RegExtDlg *this, HKEY)
.text$mn:00004270                 public ?getNbSubValue@RegExtDlg@@ABEHPAUHKEY__@@@Z
.text$mn:00004270 ?getNbSubValue@RegExtDlg@@ABEHPAUHKEY__@@@Z proc near
.text$mn:00004270                                         ; CODE XREF: RegExtDlg::deleteExts(wchar_t const *)+43p
.text$mn:00004270
.text$mn:00004270 var_10          = dword ptr -10h
.text$mn:00004270 cValues         = dword ptr -0Ch
.text$mn:00004270 var_8           = dword ptr -8
.text$mn:00004270 var_4           = dword ptr -4
.text$mn:00004270 hKey            = dword ptr  8
.text$mn:00004270
.text$mn:00004270                 push    ebp
.text$mn:00004271                 mov     ebp, esp
.text$mn:00004273                 sub     esp, 10h
.text$mn:00004276                 mov     [ebp+var_10], ecx
.text$mn:00004279                 push    0               ; lpftLastWriteTime
.text$mn:0000427B                 push    0               ; lpcbSecurityDescriptor
.text$mn:0000427D                 push    0               ; lpcbMaxValueLen
.text$mn:0000427F                 push    0               ; lpcbMaxValueNameLen
.text$mn:00004281                 lea     eax, [ebp+cValues]
.text$mn:00004284                 push    eax             ; lpcValues
.text$mn:00004285                 push    0               ; lpcbMaxClassLen
.text$mn:00004287                 push    0               ; lpcbMaxSubKeyLen
.text$mn:00004289                 push    0               ; lpcSubKeys
.text$mn:0000428B                 push    0               ; lpReserved
.text$mn:0000428D                 push    0               ; lpcchClass
.text$mn:0000428F                 push    0               ; lpClass
.text$mn:00004291                 mov     ecx, [ebp+hKey]
.text$mn:00004294                 push    ecx             ; hKey
.text$mn:00004295                 call    dword ptr ds:__imp__RegQueryInfoKeyW@48 ; RegQueryInfoKeyW(x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:0000429B                 mov     [ebp+var_8], eax
.text$mn:0000429E                 cmp     [ebp+var_8], 0
.text$mn:000042A2                 jnz     short loc_42AC
.text$mn:000042A4                 mov     edx, [ebp+cValues]
.text$mn:000042A7                 mov     [ebp+var_4], edx
.text$mn:000042AA                 jmp     short loc_42B3
.text$mn:000042AC ; ---------------------------------------------------------------------------
.text$mn:000042AC
.text$mn:000042AC loc_42AC:                               ; CODE XREF: RegExtDlg::getNbSubValue(HKEY__ *)+32j
.text$mn:000042AC                 mov     [ebp+var_4], 0
.text$mn:000042B3
.text$mn:000042B3 loc_42B3:                               ; CODE XREF: RegExtDlg::getNbSubValue(HKEY__ *)+3Aj
.text$mn:000042B3                 mov     eax, [ebp+var_4]
.text$mn:000042B6                 mov     esp, ebp
.text$mn:000042B8                 pop     ebp
.text$mn:000042B9                 retn    4
.text$mn:000042B9 ?getNbSubValue@RegExtDlg@@ABEHPAUHKEY__@@@Z endp
.text$mn:000042B9
.text$mn:000042B9 _text$mn        ends
.text$mn:000042B9
.text$mn:000042BC ; ===========================================================================
.text$mn:000042BC
.text$mn:000042BC ; Segment type: Pure code
.text$mn:000042BC ; Segment permissions: Read/Execute
.text$mn:000042BC _text$mn        segment para public 'CODE' use32
.text$mn:000042BC                 assume cs:_text$mn
.text$mn:000042BC                 ;org 42BCh
.text$mn:000042BC ; COMDAT (pick any)
.text$mn:000042BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042BC
.text$mn:000042BC ; =============== S U B R O U T I N E =======================================
.text$mn:000042BC
.text$mn:000042BC ; Attributes: bp-based frame
.text$mn:000042BC
.text$mn:000042BC ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:000042BC                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:000042BC ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:000042BC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:000042BC
.text$mn:000042BC var_4           = dword ptr -4
.text$mn:000042BC Str             = dword ptr  8
.text$mn:000042BC
.text$mn:000042BC                 push    ebp
.text$mn:000042BD                 mov     ebp, esp
.text$mn:000042BF                 push    ecx
.text$mn:000042C0                 mov     eax, [ebp+Str]
.text$mn:000042C3                 movsx   ecx, byte ptr [eax]
.text$mn:000042C6                 test    ecx, ecx
.text$mn:000042C8                 jnz     short loc_42D3
.text$mn:000042CA                 mov     [ebp+var_4], 0
.text$mn:000042D1                 jmp     short loc_42E2
.text$mn:000042D3 ; ---------------------------------------------------------------------------
.text$mn:000042D3
.text$mn:000042D3 loc_42D3:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:000042D3                 mov     edx, [ebp+Str]
.text$mn:000042D6                 push    edx             ; Str
.text$mn:000042D7                 call    _strlen
.text$mn:000042DC                 add     esp, 4
.text$mn:000042DF                 mov     [ebp+var_4], eax
.text$mn:000042E2
.text$mn:000042E2 loc_42E2:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:000042E2                 mov     eax, [ebp+var_4]
.text$mn:000042E5                 mov     esp, ebp
.text$mn:000042E7                 pop     ebp
.text$mn:000042E8                 retn
.text$mn:000042E8 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:000042E8
.text$mn:000042E8 ; ---------------------------------------------------------------------------
.text$mn:000042E9                 align 4
.text$mn:000042E9 _text$mn        ends
.text$mn:000042E9
.text$mn:000042EC ; ===========================================================================
.text$mn:000042EC
.text$mn:000042EC ; Segment type: Pure code
.text$mn:000042EC ; Segment permissions: Read/Execute
.text$mn:000042EC _text$mn        segment para public 'CODE' use32
.text$mn:000042EC                 assume cs:_text$mn
.text$mn:000042EC                 ;org 42ECh
.text$mn:000042EC ; COMDAT (pick any)
.text$mn:000042EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042EC
.text$mn:000042EC ; =============== S U B R O U T I N E =======================================
.text$mn:000042EC
.text$mn:000042EC ; Attributes: bp-based frame
.text$mn:000042EC
.text$mn:000042EC ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:000042EC                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:000042EC ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:000042EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+21p
.text$mn:000042EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p
.text$mn:000042EC
.text$mn:000042EC var_4           = dword ptr -4
.text$mn:000042EC Str             = dword ptr  8
.text$mn:000042EC
.text$mn:000042EC                 push    ebp
.text$mn:000042ED                 mov     ebp, esp
.text$mn:000042EF                 push    ecx
.text$mn:000042F0                 mov     eax, [ebp+Str]
.text$mn:000042F3                 movzx   ecx, word ptr [eax]
.text$mn:000042F6                 test    ecx, ecx
.text$mn:000042F8                 jnz     short loc_4303
.text$mn:000042FA                 mov     [ebp+var_4], 0
.text$mn:00004301                 jmp     short loc_4312
.text$mn:00004303 ; ---------------------------------------------------------------------------
.text$mn:00004303
.text$mn:00004303 loc_4303:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:00004303                 mov     edx, [ebp+Str]
.text$mn:00004306                 push    edx             ; Str
.text$mn:00004307                 call    _wcslen
.text$mn:0000430C                 add     esp, 4
.text$mn:0000430F                 mov     [ebp+var_4], eax
.text$mn:00004312
.text$mn:00004312 loc_4312:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:00004312                 mov     eax, [ebp+var_4]
.text$mn:00004315                 mov     esp, ebp
.text$mn:00004317                 pop     ebp
.text$mn:00004318                 retn
.text$mn:00004318 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:00004318
.text$mn:00004318 ; ---------------------------------------------------------------------------
.text$mn:00004319                 align 4
.text$mn:00004319 _text$mn        ends
.text$mn:00004319
.text$mn:0000431C ; ===========================================================================
.text$mn:0000431C
.text$mn:0000431C ; Segment type: Pure code
.text$mn:0000431C ; Segment permissions: Read/Execute
.text$mn:0000431C _text$mn        segment para public 'CODE' use32
.text$mn:0000431C                 assume cs:_text$mn
.text$mn:0000431C                 ;org 431Ch
.text$mn:0000431C ; COMDAT (pick any)
.text$mn:0000431C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000431C
.text$mn:0000431C ; =============== S U B R O U T I N E =======================================
.text$mn:0000431C
.text$mn:0000431C ; Attributes: bp-based frame
.text$mn:0000431C
.text$mn:0000431C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:0000431C                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:0000431C ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:0000431C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:0000431C
.text$mn:0000431C var_4           = dword ptr -4
.text$mn:0000431C
.text$mn:0000431C                 push    ebp
.text$mn:0000431D                 mov     ebp, esp
.text$mn:0000431F                 push    ecx
.text$mn:00004320                 mov     [ebp+var_4], ecx
.text$mn:00004323                 mov     eax, [ebp+var_4]
.text$mn:00004326                 push    eax
.text$mn:00004327                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:0000432C                 add     esp, 4
.text$mn:0000432F                 mov     esp, ebp
.text$mn:00004331                 pop     ebp
.text$mn:00004332                 retn
.text$mn:00004332 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:00004332
.text$mn:00004332 ; ---------------------------------------------------------------------------
.text$mn:00004333                 align 4
.text$mn:00004333 _text$mn        ends
.text$mn:00004333
.text$mn:00004334 ; ===========================================================================
.text$mn:00004334
.text$mn:00004334 ; Segment type: Pure code
.text$mn:00004334 ; Segment permissions: Read/Execute
.text$mn:00004334 _text$mn        segment para public 'CODE' use32
.text$mn:00004334                 assume cs:_text$mn
.text$mn:00004334                 ;org 4334h
.text$mn:00004334 ; COMDAT (pick any)
.text$mn:00004334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004334
.text$mn:00004334 ; =============== S U B R O U T I N E =======================================
.text$mn:00004334
.text$mn:00004334 ; Attributes: bp-based frame
.text$mn:00004334
.text$mn:00004334 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00004334                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:00004334 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:00004334                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:00004334
.text$mn:00004334 var_4           = dword ptr -4
.text$mn:00004334
.text$mn:00004334                 push    ebp
.text$mn:00004335                 mov     ebp, esp
.text$mn:00004337                 push    ecx
.text$mn:00004338                 mov     [ebp+var_4], ecx
.text$mn:0000433B                 mov     eax, [ebp+var_4]
.text$mn:0000433E                 push    eax
.text$mn:0000433F                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:00004344                 add     esp, 4
.text$mn:00004347                 mov     esp, ebp
.text$mn:00004349                 pop     ebp
.text$mn:0000434A                 retn
.text$mn:0000434A ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:0000434A
.text$mn:0000434A ; ---------------------------------------------------------------------------
.text$mn:0000434B                 align 4
.text$mn:0000434B _text$mn        ends
.text$mn:0000434B
.text$mn:0000434C ; ===========================================================================
.text$mn:0000434C
.text$mn:0000434C ; Segment type: Pure code
.text$mn:0000434C ; Segment permissions: Read/Execute
.text$mn:0000434C _text$mn        segment para public 'CODE' use32
.text$mn:0000434C                 assume cs:_text$mn
.text$mn:0000434C                 ;org 434Ch
.text$mn:0000434C ; COMDAT (pick any)
.text$mn:0000434C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000434C
.text$mn:0000434C ; =============== S U B R O U T I N E =======================================
.text$mn:0000434C
.text$mn:0000434C ; Attributes: bp-based frame
.text$mn:0000434C
.text$mn:0000434C ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:0000434C                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:0000434C ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:0000434C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:0000434C
.text$mn:0000434C var_4           = dword ptr -4
.text$mn:0000434C
.text$mn:0000434C                 push    ebp
.text$mn:0000434D                 mov     ebp, esp
.text$mn:0000434F                 push    ecx
.text$mn:00004350                 mov     [ebp+var_4], ecx
.text$mn:00004353                 or      eax, 0FFFFFFFFh
.text$mn:00004356                 mov     esp, ebp
.text$mn:00004358                 pop     ebp
.text$mn:00004359                 retn
.text$mn:00004359 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00004359
.text$mn:00004359 ; ---------------------------------------------------------------------------
.text$mn:0000435A                 align 4
.text$mn:0000435A _text$mn        ends
.text$mn:0000435A
.text$mn:0000435C ; ===========================================================================
.text$mn:0000435C
.text$mn:0000435C ; Segment type: Pure code
.text$mn:0000435C ; Segment permissions: Read/Execute
.text$mn:0000435C _text$mn        segment para public 'CODE' use32
.text$mn:0000435C                 assume cs:_text$mn
.text$mn:0000435C                 ;org 435Ch
.text$mn:0000435C ; COMDAT (pick any)
.text$mn:0000435C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000435C
.text$mn:0000435C ; =============== S U B R O U T I N E =======================================
.text$mn:0000435C
.text$mn:0000435C ; Attributes: bp-based frame
.text$mn:0000435C
.text$mn:0000435C ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:0000435C                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:0000435C ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:0000435C                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:0000435C
.text$mn:0000435C var_4           = dword ptr -4
.text$mn:0000435C
.text$mn:0000435C                 push    ebp
.text$mn:0000435D                 mov     ebp, esp
.text$mn:0000435F                 push    ecx
.text$mn:00004360                 mov     [ebp+var_4], ecx
.text$mn:00004363                 mov     eax, 7FFFFFFFh
.text$mn:00004368                 mov     esp, ebp
.text$mn:0000436A                 pop     ebp
.text$mn:0000436B                 retn
.text$mn:0000436B ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:0000436B
.text$mn:0000436B _text$mn        ends
.text$mn:0000436B
.text$mn:0000436C ; ===========================================================================
.text$mn:0000436C
.text$mn:0000436C ; Segment type: Pure code
.text$mn:0000436C ; Segment permissions: Read/Execute
.text$mn:0000436C _text$mn        segment para public 'CODE' use32
.text$mn:0000436C                 assume cs:_text$mn
.text$mn:0000436C                 ;org 436Ch
.text$mn:0000436C ; COMDAT (pick any)
.text$mn:0000436C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000436C
.text$mn:0000436C ; =============== S U B R O U T I N E =======================================
.text$mn:0000436C
.text$mn:0000436C ; Attributes: bp-based frame
.text$mn:0000436C
.text$mn:0000436C ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:0000436C                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:0000436C ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:0000436C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:0000436C
.text$mn:0000436C arg_0           = dword ptr  8
.text$mn:0000436C
.text$mn:0000436C                 push    ebp
.text$mn:0000436D                 mov     ebp, esp
.text$mn:0000436F                 mov     ecx, [ebp+arg_0]
.text$mn:00004372                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:00004377                 pop     ebp
.text$mn:00004378                 retn
.text$mn:00004378 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:00004378
.text$mn:00004378 ; ---------------------------------------------------------------------------
.text$mn:00004379                 align 4
.text$mn:00004379 _text$mn        ends
.text$mn:00004379
.text$mn:0000437C ; ===========================================================================
.text$mn:0000437C
.text$mn:0000437C ; Segment type: Pure code
.text$mn:0000437C ; Segment permissions: Read/Execute
.text$mn:0000437C _text$mn        segment para public 'CODE' use32
.text$mn:0000437C                 assume cs:_text$mn
.text$mn:0000437C                 ;org 437Ch
.text$mn:0000437C ; COMDAT (pick any)
.text$mn:0000437C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000437C
.text$mn:0000437C ; =============== S U B R O U T I N E =======================================
.text$mn:0000437C
.text$mn:0000437C ; Attributes: bp-based frame
.text$mn:0000437C
.text$mn:0000437C ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:0000437C                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:0000437C ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:0000437C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:0000437C
.text$mn:0000437C arg_0           = dword ptr  8
.text$mn:0000437C
.text$mn:0000437C                 push    ebp
.text$mn:0000437D                 mov     ebp, esp
.text$mn:0000437F                 mov     ecx, [ebp+arg_0]
.text$mn:00004382                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:00004387                 pop     ebp
.text$mn:00004388                 retn
.text$mn:00004388 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:00004388
.text$mn:00004388 ; ---------------------------------------------------------------------------
.text$mn:00004389                 align 4
.text$mn:00004389 _text$mn        ends
.text$mn:00004389
.text$mn:0000438C ; ===========================================================================
.text$mn:0000438C
.text$mn:0000438C ; Segment type: Pure code
.text$mn:0000438C ; Segment permissions: Read/Execute
.text$mn:0000438C _text$mn        segment para public 'CODE' use32
.text$mn:0000438C                 assume cs:_text$mn
.text$mn:0000438C                 ;org 438Ch
.text$mn:0000438C ; COMDAT (pick any)
.text$mn:0000438C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000438C
.text$mn:0000438C ; =============== S U B R O U T I N E =======================================
.text$mn:0000438C
.text$mn:0000438C ; Attributes: bp-based frame
.text$mn:0000438C
.text$mn:0000438C ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:0000438C                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:0000438C ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:0000438C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:0000438C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:0000438C
.text$mn:0000438C var_10          = dword ptr -10h
.text$mn:0000438C var_C           = dword ptr -0Ch
.text$mn:0000438C var_8           = dword ptr -8
.text$mn:0000438C var_1           = byte ptr -1
.text$mn:0000438C
.text$mn:0000438C                 push    ebp
.text$mn:0000438D                 mov     ebp, esp
.text$mn:0000438F                 sub     esp, 10h
.text$mn:00004392                 mov     [ebp+var_10], ecx
.text$mn:00004395                 lea     eax, [ebp+var_1]
.text$mn:00004398                 push    eax
.text$mn:00004399                 mov     ecx, [ebp+var_10]
.text$mn:0000439C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000043A1                 mov     ecx, eax
.text$mn:000043A3                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:000043A8                 mov     [ebp+var_8], eax
.text$mn:000043AB                 cmp     [ebp+var_8], 1
.text$mn:000043AF                 ja      short loc_43BA
.text$mn:000043B1                 mov     [ebp+var_C], 1
.text$mn:000043B8                 jmp     short loc_43C3
.text$mn:000043BA ; ---------------------------------------------------------------------------
.text$mn:000043BA
.text$mn:000043BA loc_43BA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:000043BA                 mov     ecx, [ebp+var_8]
.text$mn:000043BD                 sub     ecx, 1
.text$mn:000043C0                 mov     [ebp+var_C], ecx
.text$mn:000043C3
.text$mn:000043C3 loc_43C3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:000043C3                 mov     eax, [ebp+var_C]
.text$mn:000043C6                 mov     esp, ebp
.text$mn:000043C8                 pop     ebp
.text$mn:000043C9                 retn
.text$mn:000043C9 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:000043C9
.text$mn:000043C9 ; ---------------------------------------------------------------------------
.text$mn:000043CA                 align 4
.text$mn:000043CA _text$mn        ends
.text$mn:000043CA
.text$mn:000043CC ; ===========================================================================
.text$mn:000043CC
.text$mn:000043CC ; Segment type: Pure code
.text$mn:000043CC ; Segment permissions: Read/Execute
.text$mn:000043CC _text$mn        segment para public 'CODE' use32
.text$mn:000043CC                 assume cs:_text$mn
.text$mn:000043CC                 ;org 43CCh
.text$mn:000043CC ; COMDAT (pick any)
.text$mn:000043CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043CC
.text$mn:000043CC ; =============== S U B R O U T I N E =======================================
.text$mn:000043CC
.text$mn:000043CC ; Attributes: bp-based frame
.text$mn:000043CC
.text$mn:000043CC ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:000043CC                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000043CC ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000043CC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:000043CC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:000043CC
.text$mn:000043CC var_10          = dword ptr -10h
.text$mn:000043CC var_C           = dword ptr -0Ch
.text$mn:000043CC var_8           = dword ptr -8
.text$mn:000043CC var_1           = byte ptr -1
.text$mn:000043CC
.text$mn:000043CC                 push    ebp
.text$mn:000043CD                 mov     ebp, esp
.text$mn:000043CF                 sub     esp, 10h
.text$mn:000043D2                 mov     [ebp+var_10], ecx
.text$mn:000043D5                 lea     eax, [ebp+var_1]
.text$mn:000043D8                 push    eax
.text$mn:000043D9                 mov     ecx, [ebp+var_10]
.text$mn:000043DC                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000043E1                 mov     ecx, eax
.text$mn:000043E3                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:000043E8                 mov     [ebp+var_8], eax
.text$mn:000043EB                 cmp     [ebp+var_8], 1
.text$mn:000043EF                 ja      short loc_43FA
.text$mn:000043F1                 mov     [ebp+var_C], 1
.text$mn:000043F8                 jmp     short loc_4403
.text$mn:000043FA ; ---------------------------------------------------------------------------
.text$mn:000043FA
.text$mn:000043FA loc_43FA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:000043FA                 mov     ecx, [ebp+var_8]
.text$mn:000043FD                 sub     ecx, 1
.text$mn:00004400                 mov     [ebp+var_C], ecx
.text$mn:00004403
.text$mn:00004403 loc_4403:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:00004403                 mov     eax, [ebp+var_C]
.text$mn:00004406                 mov     esp, ebp
.text$mn:00004408                 pop     ebp
.text$mn:00004409                 retn
.text$mn:00004409 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00004409
.text$mn:00004409 ; ---------------------------------------------------------------------------
.text$mn:0000440A                 align 4
.text$mn:0000440A _text$mn        ends
.text$mn:0000440A
.text$mn:0000440C ; ===========================================================================
.text$mn:0000440C
.text$mn:0000440C ; Segment type: Pure code
.text$mn:0000440C ; Segment permissions: Read/Execute
.text$mn:0000440C _text$mn        segment para public 'CODE' use32
.text$mn:0000440C                 assume cs:_text$mn
.text$mn:0000440C                 ;org 440Ch
.text$mn:0000440C ; COMDAT (pick any)
.text$mn:0000440C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000440C
.text$mn:0000440C ; =============== S U B R O U T I N E =======================================
.text$mn:0000440C
.text$mn:0000440C ; Attributes: bp-based frame
.text$mn:0000440C
.text$mn:0000440C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:0000440C                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000440C ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000440C                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:0000440C                                         ; DATA XREF: .rdata:00004D40o
.text$mn:0000440C
.text$mn:0000440C var_1C          = dword ptr -1Ch
.text$mn:0000440C var_18          = dword ptr -18h
.text$mn:0000440C Str             = dword ptr -14h
.text$mn:0000440C var_10          = dword ptr -10h
.text$mn:0000440C var_C           = dword ptr -0Ch
.text$mn:0000440C var_4           = dword ptr -4
.text$mn:0000440C arg_0           = dword ptr  8
.text$mn:0000440C arg_4           = dword ptr  0Ch
.text$mn:0000440C
.text$mn:0000440C                 push    ebp
.text$mn:0000440D                 mov     ebp, esp
.text$mn:0000440F                 push    0FFFFFFFFh
.text$mn:00004411                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00004416                 mov     eax, large fs:0
.text$mn:0000441C                 push    eax
.text$mn:0000441D                 sub     esp, 10h
.text$mn:00004420                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004425                 xor     eax, ebp
.text$mn:00004427                 push    eax
.text$mn:00004428                 lea     eax, [ebp+var_C]
.text$mn:0000442B                 mov     large fs:0, eax
.text$mn:00004431                 mov     [ebp+var_1C], ecx
.text$mn:00004434                 mov     [ebp+var_18], 0
.text$mn:0000443B                 mov     eax, [ebp+arg_4]
.text$mn:0000443E                 push    eax             ; int
.text$mn:0000443F                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00004444                 add     esp, 4
.text$mn:00004447                 mov     [ebp+var_10], eax
.text$mn:0000444A                 cmp     [ebp+var_10], 0
.text$mn:0000444E                 jz      short loc_4458
.text$mn:00004450                 mov     ecx, [ebp+var_10]
.text$mn:00004453                 mov     [ebp+Str], ecx
.text$mn:00004456                 jmp     short loc_445F
.text$mn:00004458 ; ---------------------------------------------------------------------------
.text$mn:00004458
.text$mn:00004458 loc_4458:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:00004458                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:0000445F
.text$mn:0000445F loc_445F:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:0000445F                 mov     edx, [ebp+Str]
.text$mn:00004462                 push    edx             ; Str
.text$mn:00004463                 mov     ecx, [ebp+arg_0]
.text$mn:00004466                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000446B                 mov     [ebp+var_4], 0
.text$mn:00004472                 mov     eax, [ebp+var_18]
.text$mn:00004475                 or      eax, 1
.text$mn:00004478                 mov     [ebp+var_18], eax
.text$mn:0000447B                 mov     eax, [ebp+arg_0]
.text$mn:0000447E                 mov     ecx, [ebp+var_C]
.text$mn:00004481                 mov     large fs:0, ecx
.text$mn:00004488                 pop     ecx
.text$mn:00004489                 mov     esp, ebp
.text$mn:0000448B                 pop     ebp
.text$mn:0000448C                 retn    8
.text$mn:0000448C ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000448C
.text$mn:0000448C ; ---------------------------------------------------------------------------
.text$mn:0000448F                 align 10h
.text$mn:0000448F _text$mn        ends
.text$mn:0000448F
.text$x:00004490 ; ===========================================================================
.text$x:00004490
.text$x:00004490 ; Segment type: Pure code
.text$x:00004490 ; Segment permissions: Read/Execute
.text$x:00004490 _text$x         segment para public 'CODE' use32
.text$x:00004490                 assume cs:_text$x
.text$x:00004490                 ;org 4490h
.text$x:00004490 ; COMDAT (pick associative to section at 440C)
.text$x:00004490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004490
.text$x:00004490 ; =============== S U B R O U T I N E =======================================
.text$x:00004490
.text$x:00004490
.text$x:00004490 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00004490                                         ; DATA XREF: .xdata$x:00004974o
.text$x:00004490                 mov     eax, [ebp-18h]
.text$x:00004493                 and     eax, 1
.text$x:00004496                 jz      $LN6
.text$x:0000449C                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:000044A0                 mov     ecx, [ebp+8]
.text$x:000044A3                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000044A8 ; ---------------------------------------------------------------------------
.text$x:000044A8
.text$x:000044A8 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:000044A8                 retn
.text$x:000044A8 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:000044A8
.text$x:000044A9
.text$x:000044A9 ; =============== S U B R O U T I N E =======================================
.text$x:000044A9
.text$x:000044A9
.text$x:000044A9 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:000044A9                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:000044A9
.text$x:000044A9 arg_4           = dword ptr  8
.text$x:000044A9
.text$x:000044A9                 mov     edx, [esp+arg_4]
.text$x:000044AD                 lea     eax, [edx+0Ch]
.text$x:000044B0                 mov     ecx, [edx-14h]
.text$x:000044B3                 xor     ecx, eax
.text$x:000044B5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000044BA                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:000044BF                 jmp     ___CxxFrameHandler3
.text$x:000044BF __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:000044BF
.text$x:000044BF _text$x         ends
.text$x:000044BF
.text$mn:000044C4 ; ===========================================================================
.text$mn:000044C4
.text$mn:000044C4 ; Segment type: Pure code
.text$mn:000044C4 ; Segment permissions: Read/Execute
.text$mn:000044C4 _text$mn        segment para public 'CODE' use32
.text$mn:000044C4                 assume cs:_text$mn
.text$mn:000044C4                 ;org 44C4h
.text$mn:000044C4 ; COMDAT (pick any)
.text$mn:000044C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044C4
.text$mn:000044C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000044C4
.text$mn:000044C4 ; Attributes: bp-based frame
.text$mn:000044C4
.text$mn:000044C4 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:000044C4                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:000044C4 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:000044C4                                         ; DATA XREF: .rdata:00004D74o
.text$mn:000044C4
.text$mn:000044C4 var_14          = dword ptr -14h
.text$mn:000044C4 var_10          = dword ptr -10h
.text$mn:000044C4 var_C           = dword ptr -0Ch
.text$mn:000044C4 var_4           = dword ptr -4
.text$mn:000044C4 arg_0           = dword ptr  8
.text$mn:000044C4 arg_4           = dword ptr  0Ch
.text$mn:000044C4
.text$mn:000044C4                 push    ebp
.text$mn:000044C5                 mov     ebp, esp
.text$mn:000044C7                 push    0FFFFFFFFh
.text$mn:000044C9                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:000044CE                 mov     eax, large fs:0
.text$mn:000044D4                 push    eax
.text$mn:000044D5                 sub     esp, 8
.text$mn:000044D8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000044DD                 xor     eax, ebp
.text$mn:000044DF                 push    eax
.text$mn:000044E0                 lea     eax, [ebp+var_C]
.text$mn:000044E3                 mov     large fs:0, eax
.text$mn:000044E9                 mov     [ebp+var_14], ecx
.text$mn:000044EC                 mov     [ebp+var_10], 0
.text$mn:000044F3                 cmp     [ebp+arg_4], 1
.text$mn:000044F7                 jnz     short loc_451D
.text$mn:000044F9                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:000044FE                 mov     ecx, [ebp+arg_0]
.text$mn:00004501                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00004506                 mov     [ebp+var_4], 0
.text$mn:0000450D                 mov     eax, [ebp+var_10]
.text$mn:00004510                 or      eax, 1
.text$mn:00004513                 mov     [ebp+var_10], eax
.text$mn:00004516                 mov     eax, [ebp+arg_0]
.text$mn:00004519                 jmp     short loc_4540
.text$mn:0000451B ; ---------------------------------------------------------------------------
.text$mn:0000451B                 jmp     short loc_4540
.text$mn:0000451D ; ---------------------------------------------------------------------------
.text$mn:0000451D
.text$mn:0000451D loc_451D:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:0000451D                 mov     ecx, [ebp+arg_4]
.text$mn:00004520                 push    ecx
.text$mn:00004521                 mov     edx, [ebp+arg_0]
.text$mn:00004524                 push    edx
.text$mn:00004525                 mov     ecx, [ebp+var_14]
.text$mn:00004528                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:0000452D                 mov     [ebp+var_4], 0
.text$mn:00004534                 mov     eax, [ebp+var_10]
.text$mn:00004537                 or      eax, 1
.text$mn:0000453A                 mov     [ebp+var_10], eax
.text$mn:0000453D                 mov     eax, [ebp+arg_0]
.text$mn:00004540
.text$mn:00004540 loc_4540:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:00004540                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:00004540                 mov     ecx, [ebp+var_C]
.text$mn:00004543                 mov     large fs:0, ecx
.text$mn:0000454A                 pop     ecx
.text$mn:0000454B                 mov     esp, ebp
.text$mn:0000454D                 pop     ebp
.text$mn:0000454E                 retn    8
.text$mn:0000454E ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000454E
.text$mn:0000454E ; ---------------------------------------------------------------------------
.text$mn:00004551                 align 4
.text$mn:00004551 _text$mn        ends
.text$mn:00004551
.text$x:00004554 ; ===========================================================================
.text$x:00004554
.text$x:00004554 ; Segment type: Pure code
.text$x:00004554 ; Segment permissions: Read/Execute
.text$x:00004554 _text$x         segment para public 'CODE' use32
.text$x:00004554                 assume cs:_text$x
.text$x:00004554                 ;org 4554h
.text$x:00004554 ; COMDAT (pick associative to section at 44C4)
.text$x:00004554                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004554
.text$x:00004554 ; =============== S U B R O U T I N E =======================================
.text$x:00004554
.text$x:00004554
.text$x:00004554 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00004554                                         ; DATA XREF: .xdata$x:000049F8o
.text$x:00004554                 mov     eax, [ebp-10h]
.text$x:00004557                 and     eax, 1
.text$x:0000455A                 jz      $LN6_0
.text$x:00004560                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00004564                 mov     ecx, [ebp+8]
.text$x:00004567                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:0000456C ; ---------------------------------------------------------------------------
.text$x:0000456C
.text$x:0000456C $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:0000456C                 retn
.text$x:0000456C __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:0000456C
.text$x:0000456D
.text$x:0000456D ; =============== S U B R O U T I N E =======================================
.text$x:0000456D
.text$x:0000456D
.text$x:0000456D __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:0000456D                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:0000456D
.text$x:0000456D arg_4           = dword ptr  8
.text$x:0000456D
.text$x:0000456D                 mov     edx, [esp+arg_4]
.text$x:00004571                 lea     eax, [edx+0Ch]
.text$x:00004574                 mov     ecx, [edx-0Ch]
.text$x:00004577                 xor     ecx, eax
.text$x:00004579                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000457E                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00004583                 jmp     ___CxxFrameHandler3
.text$x:00004583 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00004583
.text$x:00004583 _text$x         ends
.text$x:00004583
.text$mn:00004588 ; ===========================================================================
.text$mn:00004588
.text$mn:00004588 ; Segment type: Pure code
.text$mn:00004588 ; Segment permissions: Read/Execute
.text$mn:00004588 _text$mn        segment para public 'CODE' use32
.text$mn:00004588                 assume cs:_text$mn
.text$mn:00004588                 ;org 4588h
.text$mn:00004588 ; COMDAT (pick any)
.text$mn:00004588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004588
.text$mn:00004588 ; =============== S U B R O U T I N E =======================================
.text$mn:00004588
.text$mn:00004588 ; Attributes: bp-based frame
.text$mn:00004588
.text$mn:00004588 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00004588                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00004588 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00004588                                         ; DATA XREF: .rdata:00004DB4o
.text$mn:00004588
.text$mn:00004588 var_1C          = dword ptr -1Ch
.text$mn:00004588 var_18          = dword ptr -18h
.text$mn:00004588 Str             = dword ptr -14h
.text$mn:00004588 var_10          = dword ptr -10h
.text$mn:00004588 var_C           = dword ptr -0Ch
.text$mn:00004588 var_4           = dword ptr -4
.text$mn:00004588 arg_0           = dword ptr  8
.text$mn:00004588 arg_4           = dword ptr  0Ch
.text$mn:00004588
.text$mn:00004588                 push    ebp
.text$mn:00004589                 mov     ebp, esp
.text$mn:0000458B                 push    0FFFFFFFFh
.text$mn:0000458D                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00004592                 mov     eax, large fs:0
.text$mn:00004598                 push    eax
.text$mn:00004599                 sub     esp, 10h
.text$mn:0000459C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000045A1                 xor     eax, ebp
.text$mn:000045A3                 push    eax
.text$mn:000045A4                 lea     eax, [ebp+var_C]
.text$mn:000045A7                 mov     large fs:0, eax
.text$mn:000045AD                 mov     [ebp+var_1C], ecx
.text$mn:000045B0                 mov     [ebp+var_18], 0
.text$mn:000045B7                 mov     eax, [ebp+arg_4]
.text$mn:000045BA                 push    eax             ; int
.text$mn:000045BB                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:000045C0                 add     esp, 4
.text$mn:000045C3                 mov     [ebp+var_10], eax
.text$mn:000045C6                 cmp     [ebp+var_10], 0
.text$mn:000045CA                 jz      short loc_45D4
.text$mn:000045CC                 mov     ecx, [ebp+var_10]
.text$mn:000045CF                 mov     [ebp+Str], ecx
.text$mn:000045D2                 jmp     short loc_45DB
.text$mn:000045D4 ; ---------------------------------------------------------------------------
.text$mn:000045D4
.text$mn:000045D4 loc_45D4:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:000045D4                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:000045DB
.text$mn:000045DB loc_45DB:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:000045DB                 mov     edx, [ebp+Str]
.text$mn:000045DE                 push    edx             ; Str
.text$mn:000045DF                 mov     ecx, [ebp+arg_0]
.text$mn:000045E2                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:000045E7                 mov     [ebp+var_4], 0
.text$mn:000045EE                 mov     eax, [ebp+var_18]
.text$mn:000045F1                 or      eax, 1
.text$mn:000045F4                 mov     [ebp+var_18], eax
.text$mn:000045F7                 mov     eax, [ebp+arg_0]
.text$mn:000045FA                 mov     ecx, [ebp+var_C]
.text$mn:000045FD                 mov     large fs:0, ecx
.text$mn:00004604                 pop     ecx
.text$mn:00004605                 mov     esp, ebp
.text$mn:00004607                 pop     ebp
.text$mn:00004608                 retn    8
.text$mn:00004608 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00004608
.text$mn:00004608 ; ---------------------------------------------------------------------------
.text$mn:0000460B                 align 4
.text$mn:0000460B _text$mn        ends
.text$mn:0000460B
.text$x:0000460C ; ===========================================================================
.text$x:0000460C
.text$x:0000460C ; Segment type: Pure code
.text$x:0000460C ; Segment permissions: Read/Execute
.text$x:0000460C _text$x         segment para public 'CODE' use32
.text$x:0000460C                 assume cs:_text$x
.text$x:0000460C                 ;org 460Ch
.text$x:0000460C ; COMDAT (pick associative to section at 4588)
.text$x:0000460C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000460C
.text$x:0000460C ; =============== S U B R O U T I N E =======================================
.text$x:0000460C
.text$x:0000460C
.text$x:0000460C __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:0000460C                                         ; DATA XREF: .xdata$x:00004A7Co
.text$x:0000460C                 mov     eax, [ebp-18h]
.text$x:0000460F                 and     eax, 1
.text$x:00004612                 jz      $LN6_1
.text$x:00004618                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:0000461C                 mov     ecx, [ebp+8]
.text$x:0000461F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00004624 ; ---------------------------------------------------------------------------
.text$x:00004624
.text$x:00004624 $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00004624                 retn
.text$x:00004624 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00004624
.text$x:00004625
.text$x:00004625 ; =============== S U B R O U T I N E =======================================
.text$x:00004625
.text$x:00004625
.text$x:00004625 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00004625                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:00004625
.text$x:00004625 arg_4           = dword ptr  8
.text$x:00004625
.text$x:00004625                 mov     edx, [esp+arg_4]
.text$x:00004629                 lea     eax, [edx+0Ch]
.text$x:0000462C                 mov     ecx, [edx-14h]
.text$x:0000462F                 xor     ecx, eax
.text$x:00004631                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004636                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000463B                 jmp     ___CxxFrameHandler3
.text$x:0000463B __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000463B
.text$x:0000463B _text$x         ends
.text$x:0000463B
.text$mn:00004640 ; ===========================================================================
.text$mn:00004640
.text$mn:00004640 ; Segment type: Pure code
.text$mn:00004640 ; Segment permissions: Read/Execute
.text$mn:00004640 _text$mn        segment para public 'CODE' use32
.text$mn:00004640                 assume cs:_text$mn
.text$mn:00004640                 ;org 4640h
.text$mn:00004640 ; COMDAT (pick any)
.text$mn:00004640                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004640
.text$mn:00004640 ; =============== S U B R O U T I N E =======================================
.text$mn:00004640
.text$mn:00004640 ; Attributes: bp-based frame
.text$mn:00004640
.text$mn:00004640 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:00004640                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00004640 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:00004640                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:00004640
.text$mn:00004640 var_4           = dword ptr -4
.text$mn:00004640 Dst             = dword ptr  8
.text$mn:00004640 Src             = dword ptr  0Ch
.text$mn:00004640 Size            = dword ptr  10h
.text$mn:00004640
.text$mn:00004640                 push    ebp
.text$mn:00004641                 mov     ebp, esp
.text$mn:00004643                 push    ecx
.text$mn:00004644                 cmp     [ebp+Size], 0
.text$mn:00004648                 jnz     short loc_4652
.text$mn:0000464A                 mov     eax, [ebp+Dst]
.text$mn:0000464D                 mov     [ebp+var_4], eax
.text$mn:00004650                 jmp     short loc_4669
.text$mn:00004652 ; ---------------------------------------------------------------------------
.text$mn:00004652
.text$mn:00004652 loc_4652:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:00004652                 mov     ecx, [ebp+Size]
.text$mn:00004655                 push    ecx             ; Size
.text$mn:00004656                 mov     edx, [ebp+Src]
.text$mn:00004659                 push    edx             ; Src
.text$mn:0000465A                 mov     eax, [ebp+Dst]
.text$mn:0000465D                 push    eax             ; Dst
.text$mn:0000465E                 call    _memmove
.text$mn:00004663                 add     esp, 0Ch
.text$mn:00004666                 mov     [ebp+var_4], eax
.text$mn:00004669
.text$mn:00004669 loc_4669:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:00004669                 mov     eax, [ebp+var_4]
.text$mn:0000466C                 mov     esp, ebp
.text$mn:0000466E                 pop     ebp
.text$mn:0000466F                 retn
.text$mn:0000466F ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000466F
.text$mn:0000466F _text$mn        ends
.text$mn:0000466F
.text$mn:00004670 ; ===========================================================================
.text$mn:00004670
.text$mn:00004670 ; Segment type: Pure code
.text$mn:00004670 ; Segment permissions: Read/Execute
.text$mn:00004670 _text$mn        segment para public 'CODE' use32
.text$mn:00004670                 assume cs:_text$mn
.text$mn:00004670                 ;org 4670h
.text$mn:00004670 ; COMDAT (pick any)
.text$mn:00004670                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004670
.text$mn:00004670 ; =============== S U B R O U T I N E =======================================
.text$mn:00004670
.text$mn:00004670 ; Attributes: bp-based frame
.text$mn:00004670
.text$mn:00004670 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:00004670                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00004670 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00004670                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p
.text$mn:00004670
.text$mn:00004670 var_4           = dword ptr -4
.text$mn:00004670 Dst             = dword ptr  8
.text$mn:00004670 Src             = dword ptr  0Ch
.text$mn:00004670 arg_8           = dword ptr  10h
.text$mn:00004670
.text$mn:00004670                 push    ebp
.text$mn:00004671                 mov     ebp, esp
.text$mn:00004673                 push    ecx
.text$mn:00004674                 cmp     [ebp+arg_8], 0
.text$mn:00004678                 jnz     short loc_4682
.text$mn:0000467A                 mov     eax, [ebp+Dst]
.text$mn:0000467D                 mov     [ebp+var_4], eax
.text$mn:00004680                 jmp     short loc_4699
.text$mn:00004682 ; ---------------------------------------------------------------------------
.text$mn:00004682
.text$mn:00004682 loc_4682:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00004682                 mov     ecx, [ebp+arg_8]
.text$mn:00004685                 push    ecx             ; int
.text$mn:00004686                 mov     edx, [ebp+Src]
.text$mn:00004689                 push    edx             ; Src
.text$mn:0000468A                 mov     eax, [ebp+Dst]
.text$mn:0000468D                 push    eax             ; Dst
.text$mn:0000468E                 call    _wmemmove
.text$mn:00004693                 add     esp, 0Ch
.text$mn:00004696                 mov     [ebp+var_4], eax
.text$mn:00004699
.text$mn:00004699 loc_4699:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00004699                 mov     eax, [ebp+var_4]
.text$mn:0000469C                 mov     esp, ebp
.text$mn:0000469E                 pop     ebp
.text$mn:0000469F                 retn
.text$mn:0000469F ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000469F
.text$mn:0000469F _text$mn        ends
.text$mn:0000469F
.text$mn:000046A0 ; ===========================================================================
.text$mn:000046A0
.text$mn:000046A0 ; Segment type: Pure code
.text$mn:000046A0 ; Segment permissions: Read/Execute
.text$mn:000046A0 _text$mn        segment para public 'CODE' use32
.text$mn:000046A0                 assume cs:_text$mn
.text$mn:000046A0                 ;org 46A0h
.text$mn:000046A0 ; COMDAT (pick any)
.text$mn:000046A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046A0
.text$mn:000046A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000046A0
.text$mn:000046A0 ; Attributes: bp-based frame
.text$mn:000046A0
.text$mn:000046A0 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:000046A0                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:000046A0 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:000046A0                                         ; DATA XREF: .rdata:00004D3Co
.text$mn:000046A0
.text$mn:000046A0 var_4           = dword ptr -4
.text$mn:000046A0
.text$mn:000046A0                 push    ebp
.text$mn:000046A1                 mov     ebp, esp
.text$mn:000046A3                 push    ecx
.text$mn:000046A4                 mov     [ebp+var_4], ecx
.text$mn:000046A7                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:000046AC                 mov     esp, ebp
.text$mn:000046AE                 pop     ebp
.text$mn:000046AF                 retn
.text$mn:000046AF ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:000046AF
.text$mn:000046AF _text$mn        ends
.text$mn:000046AF
.text$mn:000046B0 ; ===========================================================================
.text$mn:000046B0
.text$mn:000046B0 ; Segment type: Pure code
.text$mn:000046B0 ; Segment permissions: Read/Execute
.text$mn:000046B0 _text$mn        segment para public 'CODE' use32
.text$mn:000046B0                 assume cs:_text$mn
.text$mn:000046B0                 ;org 46B0h
.text$mn:000046B0 ; COMDAT (pick any)
.text$mn:000046B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046B0
.text$mn:000046B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000046B0
.text$mn:000046B0 ; Attributes: bp-based frame
.text$mn:000046B0
.text$mn:000046B0 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:000046B0                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:000046B0 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:000046B0                                         ; DATA XREF: .rdata:00004D70o
.text$mn:000046B0
.text$mn:000046B0 var_4           = dword ptr -4
.text$mn:000046B0
.text$mn:000046B0                 push    ebp
.text$mn:000046B1                 mov     ebp, esp
.text$mn:000046B3                 push    ecx
.text$mn:000046B4                 mov     [ebp+var_4], ecx
.text$mn:000046B7                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:000046BC                 mov     esp, ebp
.text$mn:000046BE                 pop     ebp
.text$mn:000046BF                 retn
.text$mn:000046BF ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:000046BF
.text$mn:000046BF _text$mn        ends
.text$mn:000046BF
.text$mn:000046C0 ; ===========================================================================
.text$mn:000046C0
.text$mn:000046C0 ; Segment type: Pure code
.text$mn:000046C0 ; Segment permissions: Read/Execute
.text$mn:000046C0 _text$mn        segment para public 'CODE' use32
.text$mn:000046C0                 assume cs:_text$mn
.text$mn:000046C0                 ;org 46C0h
.text$mn:000046C0 ; COMDAT (pick any)
.text$mn:000046C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046C0
.text$mn:000046C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000046C0
.text$mn:000046C0 ; Attributes: bp-based frame
.text$mn:000046C0
.text$mn:000046C0 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:000046C0                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:000046C0 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:000046C0                                         ; DATA XREF: .rdata:00004DB0o
.text$mn:000046C0
.text$mn:000046C0 var_4           = dword ptr -4
.text$mn:000046C0
.text$mn:000046C0                 push    ebp
.text$mn:000046C1                 mov     ebp, esp
.text$mn:000046C3                 push    ecx
.text$mn:000046C4                 mov     [ebp+var_4], ecx
.text$mn:000046C7                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:000046CC                 mov     esp, ebp
.text$mn:000046CE                 pop     ebp
.text$mn:000046CF                 retn
.text$mn:000046CF ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:000046CF
.text$mn:000046CF _text$mn        ends
.text$mn:000046CF
.text$mn:000046D0 ; ===========================================================================
.text$mn:000046D0
.text$mn:000046D0 ; Segment type: Pure code
.text$mn:000046D0 ; Segment permissions: Read/Execute
.text$mn:000046D0 _text$mn        segment para public 'CODE' use32
.text$mn:000046D0                 assume cs:_text$mn
.text$mn:000046D0                 ;org 46D0h
.text$mn:000046D0 ; COMDAT (pick any)
.text$mn:000046D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046D0
.text$mn:000046D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000046D0
.text$mn:000046D0 ; Attributes: bp-based frame
.text$mn:000046D0
.text$mn:000046D0 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:000046D0                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:000046D0 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:000046D0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:000046D0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:000046D0
.text$mn:000046D0 var_4           = dword ptr -4
.text$mn:000046D0
.text$mn:000046D0                 push    ebp
.text$mn:000046D1                 mov     ebp, esp
.text$mn:000046D3                 push    ecx
.text$mn:000046D4                 mov     [ebp+var_4], ecx
.text$mn:000046D7                 mov     eax, [ebp+var_4]
.text$mn:000046DA                 mov     eax, [eax+14h]
.text$mn:000046DD                 mov     esp, ebp
.text$mn:000046DF                 pop     ebp
.text$mn:000046E0                 retn
.text$mn:000046E0 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:000046E0
.text$mn:000046E0 ; ---------------------------------------------------------------------------
.text$mn:000046E1                 align 4
.text$mn:000046E1 _text$mn        ends
.text$mn:000046E1
.text$mn:000046E4 ; ===========================================================================
.text$mn:000046E4
.text$mn:000046E4 ; Segment type: Pure code
.text$mn:000046E4 ; Segment permissions: Read/Execute
.text$mn:000046E4 _text$mn        segment para public 'CODE' use32
.text$mn:000046E4                 assume cs:_text$mn
.text$mn:000046E4                 ;org 46E4h
.text$mn:000046E4 ; COMDAT (pick any)
.text$mn:000046E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046E4
.text$mn:000046E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000046E4
.text$mn:000046E4 ; Attributes: bp-based frame
.text$mn:000046E4
.text$mn:000046E4 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:000046E4                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000046E4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000046E4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:000046E4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:000046E4
.text$mn:000046E4 var_4           = dword ptr -4
.text$mn:000046E4
.text$mn:000046E4                 push    ebp
.text$mn:000046E5                 mov     ebp, esp
.text$mn:000046E7                 push    ecx
.text$mn:000046E8                 mov     [ebp+var_4], ecx
.text$mn:000046EB                 mov     eax, [ebp+var_4]
.text$mn:000046EE                 mov     eax, [eax+14h]
.text$mn:000046F1                 mov     esp, ebp
.text$mn:000046F3                 pop     ebp
.text$mn:000046F4                 retn
.text$mn:000046F4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:000046F4
.text$mn:000046F4 ; ---------------------------------------------------------------------------
.text$mn:000046F5                 align 4
.text$mn:000046F5 _text$mn        ends
.text$mn:000046F5
.text$mn:000046F8 ; ===========================================================================
.text$mn:000046F8
.text$mn:000046F8 ; Segment type: Pure code
.text$mn:000046F8 ; Segment permissions: Read/Execute
.text$mn:000046F8 _text$mn        segment para public 'CODE' use32
.text$mn:000046F8                 assume cs:_text$mn
.text$mn:000046F8                 ;org 46F8h
.text$mn:000046F8 ; COMDAT (pick any)
.text$mn:000046F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000046F8
.text$mn:000046F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000046F8
.text$mn:000046F8 ; Attributes: bp-based frame
.text$mn:000046F8
.text$mn:000046F8 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:000046F8                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:000046F8 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:000046F8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_3FECp
.text$mn:000046F8                 push    ebp
.text$mn:000046F9                 mov     ebp, esp
.text$mn:000046FB                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:00004700                 pop     ebp
.text$mn:00004701                 retn
.text$mn:00004701 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00004701
.text$mn:00004701 ; ---------------------------------------------------------------------------
.text$mn:00004702                 align 4
.text$mn:00004702 _text$mn        ends
.text$mn:00004702
.text$mn:00004704 ; ===========================================================================
.text$mn:00004704
.text$mn:00004704 ; Segment type: Pure code
.text$mn:00004704 ; Segment permissions: Read/Execute
.text$mn:00004704 _text$mn        segment para public 'CODE' use32
.text$mn:00004704                 assume cs:_text$mn
.text$mn:00004704                 ;org 4704h
.text$mn:00004704 ; COMDAT (pick any)
.text$mn:00004704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004704
.text$mn:00004704 ; =============== S U B R O U T I N E =======================================
.text$mn:00004704
.text$mn:00004704 ; Attributes: bp-based frame
.text$mn:00004704
.text$mn:00004704 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:00004704                 public ?value@error_code@std@@QBEHXZ
.text$mn:00004704 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:00004704
.text$mn:00004704 var_4           = dword ptr -4
.text$mn:00004704
.text$mn:00004704                 push    ebp
.text$mn:00004705                 mov     ebp, esp
.text$mn:00004707                 push    ecx
.text$mn:00004708                 mov     [ebp+var_4], ecx
.text$mn:0000470B                 mov     eax, [ebp+var_4]
.text$mn:0000470E                 mov     eax, [eax]
.text$mn:00004710                 mov     esp, ebp
.text$mn:00004712                 pop     ebp
.text$mn:00004713                 retn
.text$mn:00004713 ?value@error_code@std@@QBEHXZ endp
.text$mn:00004713
.text$mn:00004713 _text$mn        ends
.text$mn:00004713
.text$mn:00004714 ; ===========================================================================
.text$mn:00004714
.text$mn:00004714 ; Segment type: Pure code
.text$mn:00004714 ; Segment permissions: Read/Execute
.text$mn:00004714 _text$mn        segment para public 'CODE' use32
.text$mn:00004714                 assume cs:_text$mn
.text$mn:00004714                 ;org 4714h
.text$mn:00004714 ; COMDAT (pick any)
.text$mn:00004714                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004714
.text$mn:00004714 ; =============== S U B R O U T I N E =======================================
.text$mn:00004714
.text$mn:00004714 ; Attributes: bp-based frame
.text$mn:00004714
.text$mn:00004714 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:00004714                 public ?value@error_condition@std@@QBEHXZ
.text$mn:00004714 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:00004714                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:00004714                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:00004714
.text$mn:00004714 var_4           = dword ptr -4
.text$mn:00004714
.text$mn:00004714                 push    ebp
.text$mn:00004715                 mov     ebp, esp
.text$mn:00004717                 push    ecx
.text$mn:00004718                 mov     [ebp+var_4], ecx
.text$mn:0000471B                 mov     eax, [ebp+var_4]
.text$mn:0000471E                 mov     eax, [eax]
.text$mn:00004720                 mov     esp, ebp
.text$mn:00004722                 pop     ebp
.text$mn:00004723                 retn
.text$mn:00004723 ?value@error_condition@std@@QBEHXZ endp
.text$mn:00004723
.text$mn:00004723 _text$mn        ends
.text$mn:00004723
.text$mn:00004724 ; ===========================================================================
.text$mn:00004724
.text$mn:00004724 ; Segment type: Pure code
.text$mn:00004724 ; Segment permissions: Read/Execute
.text$mn:00004724 _text$mn        segment para public 'CODE' use32
.text$mn:00004724                 assume cs:_text$mn
.text$mn:00004724                 ;org 4724h
.text$mn:00004724 ; COMDAT (pick any)
.text$mn:00004724                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004724
.text$mn:00004724 ; =============== S U B R O U T I N E =======================================
.text$mn:00004724
.text$mn:00004724 ; Attributes: bp-based frame
.text$mn:00004724
.text$mn:00004724                 public _hypot
.text$mn:00004724 _hypot          proc near
.text$mn:00004724
.text$mn:00004724 var_10          = qword ptr -10h
.text$mn:00004724 var_8           = qword ptr -8
.text$mn:00004724 arg_0           = qword ptr  8
.text$mn:00004724 arg_8           = qword ptr  10h
.text$mn:00004724
.text$mn:00004724                 push    ebp
.text$mn:00004725                 mov     ebp, esp
.text$mn:00004727                 sub     esp, 8
.text$mn:0000472A                 movsd   xmm0, [ebp+arg_8]
.text$mn:0000472F                 movsd   [esp+8+var_8], xmm0
.text$mn:00004734                 sub     esp, 8
.text$mn:00004737                 movsd   xmm0, [ebp+arg_0]
.text$mn:0000473C                 movsd   [esp+10h+var_10], xmm0
.text$mn:00004741                 call    __hypot
.text$mn:00004746                 add     esp, 10h
.text$mn:00004749                 pop     ebp
.text$mn:0000474A                 retn
.text$mn:0000474A _hypot          endp
.text$mn:0000474A
.text$mn:0000474A ; ---------------------------------------------------------------------------
.text$mn:0000474B                 align 4
.text$mn:0000474B _text$mn        ends
.text$mn:0000474B
.text$mn:0000474C ; ===========================================================================
.text$mn:0000474C
.text$mn:0000474C ; Segment type: Pure code
.text$mn:0000474C ; Segment permissions: Read/Execute
.text$mn:0000474C _text$mn        segment para public 'CODE' use32
.text$mn:0000474C                 assume cs:_text$mn
.text$mn:0000474C                 ;org 474Ch
.text$mn:0000474C ; COMDAT (pick any)
.text$mn:0000474C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000474C
.text$mn:0000474C ; =============== S U B R O U T I N E =======================================
.text$mn:0000474C
.text$mn:0000474C ; Attributes: bp-based frame
.text$mn:0000474C
.text$mn:0000474C ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:0000474C                 public _wmemcpy
.text$mn:0000474C _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000474C
.text$mn:0000474C Dst             = dword ptr  8
.text$mn:0000474C Src             = dword ptr  0Ch
.text$mn:0000474C arg_8           = dword ptr  10h
.text$mn:0000474C
.text$mn:0000474C                 push    ebp
.text$mn:0000474D                 mov     ebp, esp
.text$mn:0000474F                 mov     eax, [ebp+arg_8]
.text$mn:00004752                 shl     eax, 1
.text$mn:00004754                 push    eax             ; Size
.text$mn:00004755                 mov     ecx, [ebp+Src]
.text$mn:00004758                 push    ecx             ; Src
.text$mn:00004759                 mov     edx, [ebp+Dst]
.text$mn:0000475C                 push    edx             ; Dst
.text$mn:0000475D                 call    _memcpy
.text$mn:00004762                 add     esp, 0Ch
.text$mn:00004765                 pop     ebp
.text$mn:00004766                 retn
.text$mn:00004766 _wmemcpy        endp
.text$mn:00004766
.text$mn:00004766 ; ---------------------------------------------------------------------------
.text$mn:00004767                 align 4
.text$mn:00004767 _text$mn        ends
.text$mn:00004767
.text$mn:00004768 ; ===========================================================================
.text$mn:00004768
.text$mn:00004768 ; Segment type: Pure code
.text$mn:00004768 ; Segment permissions: Read/Execute
.text$mn:00004768 _text$mn        segment para public 'CODE' use32
.text$mn:00004768                 assume cs:_text$mn
.text$mn:00004768                 ;org 4768h
.text$mn:00004768 ; COMDAT (pick any)
.text$mn:00004768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004768
.text$mn:00004768 ; =============== S U B R O U T I N E =======================================
.text$mn:00004768
.text$mn:00004768 ; Attributes: bp-based frame
.text$mn:00004768
.text$mn:00004768 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:00004768                 public _wmemmove
.text$mn:00004768 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:00004768
.text$mn:00004768 Dst             = dword ptr  8
.text$mn:00004768 Src             = dword ptr  0Ch
.text$mn:00004768 arg_8           = dword ptr  10h
.text$mn:00004768
.text$mn:00004768                 push    ebp
.text$mn:00004769                 mov     ebp, esp
.text$mn:0000476B                 mov     eax, [ebp+arg_8]
.text$mn:0000476E                 shl     eax, 1
.text$mn:00004770                 push    eax             ; Size
.text$mn:00004771                 mov     ecx, [ebp+Src]
.text$mn:00004774                 push    ecx             ; Src
.text$mn:00004775                 mov     edx, [ebp+Dst]
.text$mn:00004778                 push    edx             ; Dst
.text$mn:00004779                 call    _memmove
.text$mn:0000477E                 add     esp, 0Ch
.text$mn:00004781                 pop     ebp
.text$mn:00004782                 retn
.text$mn:00004782 _wmemmove       endp
.text$mn:00004782
.text$mn:00004782 ; ---------------------------------------------------------------------------
.text$mn:00004783                 align 4
.text$mn:00004783 _text$mn        ends
.text$mn:00004783
.xdata$x:00004784 ; ===========================================================================
.xdata$x:00004784
.xdata$x:00004784 ; Segment type: Pure data
.xdata$x:00004784 ; Segment permissions: Read
.xdata$x:00004784 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004784                 assume cs:_xdata$x
.xdata$x:00004784                 ;org 4784h
.xdata$x:00004784 ; COMDAT (pick associative to section at 369C)
.xdata$x:00004784 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:00004784                                         ; DATA XREF: .xdata$x:00004794o
.xdata$x:00004785                 db 0FFh
.xdata$x:00004786                 db 0FFh
.xdata$x:00004787                 db 0FFh
.xdata$x:00004788                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000478C __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000478C                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000478D                 db    5
.xdata$x:0000478E                 db  93h ; ô
.xdata$x:0000478F                 db  19h
.xdata$x:00004790                 db    1
.xdata$x:00004791                 db    0
.xdata$x:00004792                 db    0
.xdata$x:00004793                 db    0
.xdata$x:00004794                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:00004798                 db    0
.xdata$x:00004799                 db    0
.xdata$x:0000479A                 db    0
.xdata$x:0000479B                 db    0
.xdata$x:0000479C                 db    0
.xdata$x:0000479D                 db    0
.xdata$x:0000479E                 db    0
.xdata$x:0000479F                 db    0
.xdata$x:000047A0                 db    0
.xdata$x:000047A1                 db    0
.xdata$x:000047A2                 db    0
.xdata$x:000047A3                 db    0
.xdata$x:000047A4                 db    0
.xdata$x:000047A5                 db    0
.xdata$x:000047A6                 db    0
.xdata$x:000047A7                 db    0
.xdata$x:000047A8                 db    0
.xdata$x:000047A9                 db    0
.xdata$x:000047AA                 db    0
.xdata$x:000047AB                 db    0
.xdata$x:000047AC                 db    0
.xdata$x:000047AD                 db    0
.xdata$x:000047AE                 db    0
.xdata$x:000047AF                 db    0
.xdata$x:000047AF _xdata$x        ends
.xdata$x:000047AF
.xdata$x:000047B0 ; ===========================================================================
.xdata$x:000047B0
.xdata$x:000047B0 ; Segment type: Pure data
.xdata$x:000047B0 ; Segment permissions: Read
.xdata$x:000047B0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000047B0                 assume cs:_xdata$x
.xdata$x:000047B0                 ;org 47B0h
.xdata$x:000047B0 ; COMDAT (pick associative to section at 2360)
.xdata$x:000047B0 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000047B0                                         ; DATA XREF: .xdata$x:000047C0o
.xdata$x:000047B1                 db 0FFh
.xdata$x:000047B2                 db 0FFh
.xdata$x:000047B3                 db 0FFh
.xdata$x:000047B4                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:000047B8 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000047B8                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:000047B9                 db    5
.xdata$x:000047BA                 db  93h ; ô
.xdata$x:000047BB                 db  19h
.xdata$x:000047BC                 db    1
.xdata$x:000047BD                 db    0
.xdata$x:000047BE                 db    0
.xdata$x:000047BF                 db    0
.xdata$x:000047C0                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:000047C4                 db    0
.xdata$x:000047C5                 db    0
.xdata$x:000047C6                 db    0
.xdata$x:000047C7                 db    0
.xdata$x:000047C8                 db    0
.xdata$x:000047C9                 db    0
.xdata$x:000047CA                 db    0
.xdata$x:000047CB                 db    0
.xdata$x:000047CC                 db    0
.xdata$x:000047CD                 db    0
.xdata$x:000047CE                 db    0
.xdata$x:000047CF                 db    0
.xdata$x:000047D0                 db    0
.xdata$x:000047D1                 db    0
.xdata$x:000047D2                 db    0
.xdata$x:000047D3                 db    0
.xdata$x:000047D4                 db    0
.xdata$x:000047D5                 db    0
.xdata$x:000047D6                 db    0
.xdata$x:000047D7                 db    0
.xdata$x:000047D8                 db    0
.xdata$x:000047D9                 db    0
.xdata$x:000047DA                 db    0
.xdata$x:000047DB                 db    0
.xdata$x:000047DB _xdata$x        ends
.xdata$x:000047DB
.xdata$x:000047DC ; ===========================================================================
.xdata$x:000047DC
.xdata$x:000047DC ; Segment type: Pure data
.xdata$x:000047DC ; Segment permissions: Read
.xdata$x:000047DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000047DC                 assume cs:_xdata$x
.xdata$x:000047DC                 ;org 47DCh
.xdata$x:000047DC ; COMDAT (pick associative to section at 28F4)
.xdata$x:000047DC __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000047DC                                         ; DATA XREF: .xdata$x:000047ECo
.xdata$x:000047DD                 db 0FFh
.xdata$x:000047DE                 db 0FFh
.xdata$x:000047DF                 db 0FFh
.xdata$x:000047E0                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:000047E4 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000047E4                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:000047E5                 db    5
.xdata$x:000047E6                 db  93h ; ô
.xdata$x:000047E7                 db  19h
.xdata$x:000047E8                 db    1
.xdata$x:000047E9                 db    0
.xdata$x:000047EA                 db    0
.xdata$x:000047EB                 db    0
.xdata$x:000047EC                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:000047F0                 db    0
.xdata$x:000047F1                 db    0
.xdata$x:000047F2                 db    0
.xdata$x:000047F3                 db    0
.xdata$x:000047F4                 db    0
.xdata$x:000047F5                 db    0
.xdata$x:000047F6                 db    0
.xdata$x:000047F7                 db    0
.xdata$x:000047F8                 db    0
.xdata$x:000047F9                 db    0
.xdata$x:000047FA                 db    0
.xdata$x:000047FB                 db    0
.xdata$x:000047FC                 db    0
.xdata$x:000047FD                 db    0
.xdata$x:000047FE                 db    0
.xdata$x:000047FF                 db    0
.xdata$x:00004800                 db    0
.xdata$x:00004801                 db    0
.xdata$x:00004802                 db    0
.xdata$x:00004803                 db    0
.xdata$x:00004804                 db    0
.xdata$x:00004805                 db    0
.xdata$x:00004806                 db    0
.xdata$x:00004807                 db    0
.xdata$x:00004807 _xdata$x        ends
.xdata$x:00004807
.xdata$x:00004808 ; ===========================================================================
.xdata$x:00004808
.xdata$x:00004808 ; Segment type: Pure data
.xdata$x:00004808 ; Segment permissions: Read
.xdata$x:00004808 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004808                 assume cs:_xdata$x
.xdata$x:00004808                 ;org 4808h
.xdata$x:00004808 ; COMDAT (pick associative to section at 2268)
.xdata$x:00004808 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:00004808                                         ; DATA XREF: .xdata$x:00004818o
.xdata$x:00004809                 db 0FFh
.xdata$x:0000480A                 db 0FFh
.xdata$x:0000480B                 db 0FFh
.xdata$x:0000480C                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:00004810 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:00004810                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:00004811                 db    5
.xdata$x:00004812                 db  93h ; ô
.xdata$x:00004813                 db  19h
.xdata$x:00004814                 db    1
.xdata$x:00004815                 db    0
.xdata$x:00004816                 db    0
.xdata$x:00004817                 db    0
.xdata$x:00004818                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:0000481C                 db    0
.xdata$x:0000481D                 db    0
.xdata$x:0000481E                 db    0
.xdata$x:0000481F                 db    0
.xdata$x:00004820                 db    0
.xdata$x:00004821                 db    0
.xdata$x:00004822                 db    0
.xdata$x:00004823                 db    0
.xdata$x:00004824                 db    0
.xdata$x:00004825                 db    0
.xdata$x:00004826                 db    0
.xdata$x:00004827                 db    0
.xdata$x:00004828                 db    0
.xdata$x:00004829                 db    0
.xdata$x:0000482A                 db    0
.xdata$x:0000482B                 db    0
.xdata$x:0000482C                 db    0
.xdata$x:0000482D                 db    0
.xdata$x:0000482E                 db    0
.xdata$x:0000482F                 db    0
.xdata$x:00004830                 db    0
.xdata$x:00004831                 db    0
.xdata$x:00004832                 db    0
.xdata$x:00004833                 db    0
.xdata$x:00004833 _xdata$x        ends
.xdata$x:00004833
.xdata$x:00004834 ; ===========================================================================
.xdata$x:00004834
.xdata$x:00004834 ; Segment type: Pure data
.xdata$x:00004834 ; Segment permissions: Read
.xdata$x:00004834 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004834                 assume cs:_xdata$x
.xdata$x:00004834                 ;org 4834h
.xdata$x:00004834 ; COMDAT (pick associative to section at 2804)
.xdata$x:00004834 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00004834                                         ; DATA XREF: .xdata$x:00004844o
.xdata$x:00004835                 db 0FFh
.xdata$x:00004836                 db 0FFh
.xdata$x:00004837                 db 0FFh
.xdata$x:00004838                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000483C __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000483C                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000483D                 db    5
.xdata$x:0000483E                 db  93h ; ô
.xdata$x:0000483F                 db  19h
.xdata$x:00004840                 db    1
.xdata$x:00004841                 db    0
.xdata$x:00004842                 db    0
.xdata$x:00004843                 db    0
.xdata$x:00004844                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:00004848                 align 20h
.xdata$x:00004848 _xdata$x        ends
.xdata$x:00004848
.xdata$x:00004860 ; ===========================================================================
.xdata$x:00004860
.xdata$x:00004860 ; Segment type: Pure data
.xdata$x:00004860 ; Segment permissions: Read
.xdata$x:00004860 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004860                 assume cs:_xdata$x
.xdata$x:00004860                 ;org 4860h
.xdata$x:00004860 ; COMDAT (pick associative to section at 24D0)
.xdata$x:00004860 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:00004860                                         ; DATA XREF: .xdata$x:00004870o
.xdata$x:00004861                 db 0FFh
.xdata$x:00004862                 db 0FFh
.xdata$x:00004863                 db 0FFh
.xdata$x:00004864                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:00004868 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00004868                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:00004869                 db    5
.xdata$x:0000486A                 db  93h ; ô
.xdata$x:0000486B                 db  19h
.xdata$x:0000486C                 db    1
.xdata$x:0000486D                 db    0
.xdata$x:0000486E                 db    0
.xdata$x:0000486F                 db    0
.xdata$x:00004870                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:00004874                 db    0
.xdata$x:00004875                 db    0
.xdata$x:00004876                 db    0
.xdata$x:00004877                 db    0
.xdata$x:00004878                 db    0
.xdata$x:00004879                 db    0
.xdata$x:0000487A                 db    0
.xdata$x:0000487B                 db    0
.xdata$x:0000487C                 db    0
.xdata$x:0000487D                 db    0
.xdata$x:0000487E                 db    0
.xdata$x:0000487F                 db    0
.xdata$x:00004880                 db    0
.xdata$x:00004881                 db    0
.xdata$x:00004882                 db    0
.xdata$x:00004883                 db    0
.xdata$x:00004884                 db    0
.xdata$x:00004885                 db    0
.xdata$x:00004886                 db    0
.xdata$x:00004887                 db    0
.xdata$x:00004888                 db    0
.xdata$x:00004889                 db    0
.xdata$x:0000488A                 db    0
.xdata$x:0000488B                 db    0
.xdata$x:0000488B _xdata$x        ends
.xdata$x:0000488B
.xdata$x:0000488C ; ===========================================================================
.xdata$x:0000488C
.xdata$x:0000488C ; Segment type: Pure data
.xdata$x:0000488C ; Segment permissions: Read
.xdata$x:0000488C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000488C                 assume cs:_xdata$x
.xdata$x:0000488C                 ;org 488Ch
.xdata$x:0000488C ; COMDAT (pick associative to section at 29D4)
.xdata$x:0000488C __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000488C                                         ; DATA XREF: .xdata$x:0000489Co
.xdata$x:0000488D                 db 0FFh
.xdata$x:0000488E                 db 0FFh
.xdata$x:0000488F                 db 0FFh
.xdata$x:00004890                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:00004894 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00004894                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:00004895                 db    5
.xdata$x:00004896                 db  93h ; ô
.xdata$x:00004897                 db  19h
.xdata$x:00004898                 db    1
.xdata$x:00004899                 db    0
.xdata$x:0000489A                 db    0
.xdata$x:0000489B                 db    0
.xdata$x:0000489C                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:000048A0                 db    0
.xdata$x:000048A1                 db    0
.xdata$x:000048A2                 db    0
.xdata$x:000048A3                 db    0
.xdata$x:000048A4                 db    0
.xdata$x:000048A5                 db    0
.xdata$x:000048A6                 db    0
.xdata$x:000048A7                 db    0
.xdata$x:000048A8                 db    0
.xdata$x:000048A9                 db    0
.xdata$x:000048AA                 db    0
.xdata$x:000048AB                 db    0
.xdata$x:000048AC                 db    0
.xdata$x:000048AD                 db    0
.xdata$x:000048AE                 db    0
.xdata$x:000048AF                 db    0
.xdata$x:000048B0                 db    0
.xdata$x:000048B1                 db    0
.xdata$x:000048B2                 db    0
.xdata$x:000048B3                 db    0
.xdata$x:000048B4                 db    0
.xdata$x:000048B5                 db    0
.xdata$x:000048B6                 db    0
.xdata$x:000048B7                 db    0
.xdata$x:000048B7 _xdata$x        ends
.xdata$x:000048B7
.xdata$x:000048B8 ; ===========================================================================
.xdata$x:000048B8
.xdata$x:000048B8 ; Segment type: Pure data
.xdata$x:000048B8 ; Segment permissions: Read
.xdata$x:000048B8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000048B8                 assume cs:_xdata$x
.xdata$x:000048B8                 ;org 48B8h
.xdata$x:000048B8 ; COMDAT (pick associative to section at 2F48)
.xdata$x:000048B8 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:000048B8                                         ; DATA XREF: .xdata$x:00004940o
.xdata$x:000048B9                 db    0
.xdata$x:000048BA                 db    0
.xdata$x:000048BB                 db    0
.xdata$x:000048BC                 db    0
.xdata$x:000048BD                 db    0
.xdata$x:000048BE                 db    0
.xdata$x:000048BF                 db    0
.xdata$x:000048C0                 db    0
.xdata$x:000048C1                 db    0
.xdata$x:000048C2                 db    0
.xdata$x:000048C3                 db    0
.xdata$x:000048C4                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:000048C8 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:000048C8                                         ; DATA XREF: .xdata$x:0000492Co
.xdata$x:000048C9                 db    0
.xdata$x:000048CA                 db    0
.xdata$x:000048CB                 db    0
.xdata$x:000048CC                 db    0
.xdata$x:000048CD                 db    0
.xdata$x:000048CE                 db    0
.xdata$x:000048CF                 db    0
.xdata$x:000048D0                 db    0
.xdata$x:000048D1                 db    0
.xdata$x:000048D2                 db    0
.xdata$x:000048D3                 db    0
.xdata$x:000048D4                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:000048D8 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:000048D8                                         ; DATA XREF: .xdata$x:00004900o
.xdata$x:000048D9                 db 0FFh
.xdata$x:000048DA                 db 0FFh
.xdata$x:000048DB                 db 0FFh
.xdata$x:000048DC                 db    0
.xdata$x:000048DD                 db    0
.xdata$x:000048DE                 db    0
.xdata$x:000048DF                 db    0
.xdata$x:000048E0                 db 0FFh
.xdata$x:000048E1                 db 0FFh
.xdata$x:000048E2                 db 0FFh
.xdata$x:000048E3                 db 0FFh
.xdata$x:000048E4                 db    0
.xdata$x:000048E5                 db    0
.xdata$x:000048E6                 db    0
.xdata$x:000048E7                 db    0
.xdata$x:000048E8                 db    1
.xdata$x:000048E9                 db    0
.xdata$x:000048EA                 db    0
.xdata$x:000048EB                 db    0
.xdata$x:000048EC                 db    0
.xdata$x:000048ED                 db    0
.xdata$x:000048EE                 db    0
.xdata$x:000048EF                 db    0
.xdata$x:000048F0                 db    1
.xdata$x:000048F1                 db    0
.xdata$x:000048F2                 db    0
.xdata$x:000048F3                 db    0
.xdata$x:000048F4                 db    0
.xdata$x:000048F5                 db    0
.xdata$x:000048F6                 db    0
.xdata$x:000048F7                 db    0
.xdata$x:000048F8 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:000048F8                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:000048F9                 db    5
.xdata$x:000048FA                 db  93h ; ô
.xdata$x:000048FB                 db  19h
.xdata$x:000048FC                 db    4
.xdata$x:000048FD                 db    0
.xdata$x:000048FE                 db    0
.xdata$x:000048FF                 db    0
.xdata$x:00004900                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:00004904                 db    2
.xdata$x:00004905                 db    0
.xdata$x:00004906                 db    0
.xdata$x:00004907                 db    0
.xdata$x:00004908                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:0000490C                 db    0
.xdata$x:0000490D                 db    0
.xdata$x:0000490E                 db    0
.xdata$x:0000490F                 db    0
.xdata$x:00004910                 db    0
.xdata$x:00004911                 db    0
.xdata$x:00004912                 db    0
.xdata$x:00004913                 db    0
.xdata$x:00004914                 db    0
.xdata$x:00004915                 db    0
.xdata$x:00004916                 db    0
.xdata$x:00004917                 db    0
.xdata$x:00004918                 db    0
.xdata$x:00004919                 db    0
.xdata$x:0000491A                 db    0
.xdata$x:0000491B                 db    0
.xdata$x:0000491C __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:0000491C                                         ; DATA XREF: .xdata$x:00004908o
.xdata$x:0000491D                 db    0
.xdata$x:0000491E                 db    0
.xdata$x:0000491F                 db    0
.xdata$x:00004920                 db    2
.xdata$x:00004921                 db    0
.xdata$x:00004922                 db    0
.xdata$x:00004923                 db    0
.xdata$x:00004924                 db    3
.xdata$x:00004925                 db    0
.xdata$x:00004926                 db    0
.xdata$x:00004927                 db    0
.xdata$x:00004928                 db    1
.xdata$x:00004929                 db    0
.xdata$x:0000492A                 db    0
.xdata$x:0000492B                 db    0
.xdata$x:0000492C                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:00004930                 db    0
.xdata$x:00004931                 db    0
.xdata$x:00004932                 db    0
.xdata$x:00004933                 db    0
.xdata$x:00004934                 db    0
.xdata$x:00004935                 db    0
.xdata$x:00004936                 db    0
.xdata$x:00004937                 db    0
.xdata$x:00004938                 db    3
.xdata$x:00004939                 db    0
.xdata$x:0000493A                 db    0
.xdata$x:0000493B                 db    0
.xdata$x:0000493C                 db    1
.xdata$x:0000493D                 db    0
.xdata$x:0000493E                 db    0
.xdata$x:0000493F                 db    0
.xdata$x:00004940                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:00004940 _xdata$x        ends
.xdata$x:00004940
.xdata$x:00004944 ; ===========================================================================
.xdata$x:00004944
.xdata$x:00004944 ; Segment type: Pure data
.xdata$x:00004944 ; Segment permissions: Read
.xdata$x:00004944 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004944                 assume cs:_xdata$x
.xdata$x:00004944                 ;org 4944h
.xdata$x:00004944 ; COMDAT (pick associative to section at 263C)
.xdata$x:00004944 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00004944                                         ; DATA XREF: .xdata$x:00004954o
.xdata$x:00004945                 db 0FFh
.xdata$x:00004946                 db 0FFh
.xdata$x:00004947                 db 0FFh
.xdata$x:00004948                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:0000494C __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000494C                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:0000494D                 db    5
.xdata$x:0000494E                 db  93h ; ô
.xdata$x:0000494F                 db  19h
.xdata$x:00004950                 db    1
.xdata$x:00004951                 db    0
.xdata$x:00004952                 db    0
.xdata$x:00004953                 db    0
.xdata$x:00004954                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:00004958                 db    0
.xdata$x:00004959                 db    0
.xdata$x:0000495A                 db    0
.xdata$x:0000495B                 db    0
.xdata$x:0000495C                 db    0
.xdata$x:0000495D                 db    0
.xdata$x:0000495E                 db    0
.xdata$x:0000495F                 db    0
.xdata$x:00004960                 db    0
.xdata$x:00004961                 db    0
.xdata$x:00004962                 db    0
.xdata$x:00004963                 db    0
.xdata$x:00004964                 db    0
.xdata$x:00004965                 db    0
.xdata$x:00004966                 db    0
.xdata$x:00004967                 db    0
.xdata$x:00004968                 db    0
.xdata$x:00004969                 db    0
.xdata$x:0000496A                 db    0
.xdata$x:0000496B                 db    0
.xdata$x:0000496C                 db    0
.xdata$x:0000496D                 db    0
.xdata$x:0000496E                 db    0
.xdata$x:0000496F                 db    0
.xdata$x:0000496F _xdata$x        ends
.xdata$x:0000496F
.xdata$x:00004970 ; ===========================================================================
.xdata$x:00004970
.xdata$x:00004970 ; Segment type: Pure data
.xdata$x:00004970 ; Segment permissions: Read
.xdata$x:00004970 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004970                 assume cs:_xdata$x
.xdata$x:00004970                 ;org 4970h
.xdata$x:00004970 ; COMDAT (pick associative to section at 440C)
.xdata$x:00004970 __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00004970                                         ; DATA XREF: .xdata$x:00004980o
.xdata$x:00004971                 db 0FFh
.xdata$x:00004972                 db 0FFh
.xdata$x:00004973                 db 0FFh
.xdata$x:00004974                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00004978 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00004978                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00004979                 db    5
.xdata$x:0000497A                 db  93h ; ô
.xdata$x:0000497B                 db  19h
.xdata$x:0000497C                 db    1
.xdata$x:0000497D                 db    0
.xdata$x:0000497E                 db    0
.xdata$x:0000497F                 db    0
.xdata$x:00004980                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00004984                 db    0
.xdata$x:00004985                 db    0
.xdata$x:00004986                 db    0
.xdata$x:00004987                 db    0
.xdata$x:00004988                 db    0
.xdata$x:00004989                 db    0
.xdata$x:0000498A                 db    0
.xdata$x:0000498B                 db    0
.xdata$x:0000498C                 db    0
.xdata$x:0000498D                 db    0
.xdata$x:0000498E                 db    0
.xdata$x:0000498F                 db    0
.xdata$x:00004990                 db    0
.xdata$x:00004991                 db    0
.xdata$x:00004992                 db    0
.xdata$x:00004993                 db    0
.xdata$x:00004994                 db    0
.xdata$x:00004995                 db    0
.xdata$x:00004996                 db    0
.xdata$x:00004997                 db    0
.xdata$x:00004998                 db    0
.xdata$x:00004999                 db    0
.xdata$x:0000499A                 db    0
.xdata$x:0000499B                 db    0
.xdata$x:0000499B _xdata$x        ends
.xdata$x:0000499B
.xdata$x:0000499C ; ===========================================================================
.xdata$x:0000499C
.xdata$x:0000499C ; Segment type: Pure data
.xdata$x:0000499C ; Segment permissions: Read
.xdata$x:0000499C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000499C                 assume cs:_xdata$x
.xdata$x:0000499C                 ;org 499Ch
.xdata$x:0000499C ; COMDAT (pick associative to section at 2AE0)
.xdata$x:0000499C __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000499C                                         ; DATA XREF: .xdata$x:000049ACo
.xdata$x:0000499D                 db 0FFh
.xdata$x:0000499E                 db 0FFh
.xdata$x:0000499F                 db 0FFh
.xdata$x:000049A0                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:000049A4 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:000049A4                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:000049A5                 db    5
.xdata$x:000049A6                 db  93h ; ô
.xdata$x:000049A7                 db  19h
.xdata$x:000049A8                 db    1
.xdata$x:000049A9                 db    0
.xdata$x:000049AA                 db    0
.xdata$x:000049AB                 db    0
.xdata$x:000049AC                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:000049B0                 db    0
.xdata$x:000049B1                 db    0
.xdata$x:000049B2                 db    0
.xdata$x:000049B3                 db    0
.xdata$x:000049B4                 db    0
.xdata$x:000049B5                 db    0
.xdata$x:000049B6                 db    0
.xdata$x:000049B7                 db    0
.xdata$x:000049B8                 db    0
.xdata$x:000049B9                 db    0
.xdata$x:000049BA                 db    0
.xdata$x:000049BB                 db    0
.xdata$x:000049BC                 db    0
.xdata$x:000049BD                 db    0
.xdata$x:000049BE                 db    0
.xdata$x:000049BF                 db    0
.xdata$x:000049C0                 db    0
.xdata$x:000049C1                 db    0
.xdata$x:000049C2                 db    0
.xdata$x:000049C3                 db    0
.xdata$x:000049C4                 db    0
.xdata$x:000049C5                 db    0
.xdata$x:000049C6                 db    0
.xdata$x:000049C7                 db    0
.xdata$x:000049C7 _xdata$x        ends
.xdata$x:000049C7
.xdata$x:000049C8 ; ===========================================================================
.xdata$x:000049C8
.xdata$x:000049C8 ; Segment type: Pure data
.xdata$x:000049C8 ; Segment permissions: Read
.xdata$x:000049C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000049C8                 assume cs:_xdata$x
.xdata$x:000049C8                 ;org 49C8h
.xdata$x:000049C8 ; COMDAT (pick associative to section at 26B8)
.xdata$x:000049C8 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:000049C8                                         ; DATA XREF: .xdata$x:000049D8o
.xdata$x:000049C9                 db 0FFh
.xdata$x:000049CA                 db 0FFh
.xdata$x:000049CB                 db 0FFh
.xdata$x:000049CC                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:000049D0 __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:000049D0                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:000049D1                 db    5
.xdata$x:000049D2                 db  93h ; ô
.xdata$x:000049D3                 db  19h
.xdata$x:000049D4                 db    1
.xdata$x:000049D5                 db    0
.xdata$x:000049D6                 db    0
.xdata$x:000049D7                 db    0
.xdata$x:000049D8                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:000049DC                 db    0
.xdata$x:000049DD                 db    0
.xdata$x:000049DE                 db    0
.xdata$x:000049DF                 db    0
.xdata$x:000049E0                 db    0
.xdata$x:000049E1                 db    0
.xdata$x:000049E2                 db    0
.xdata$x:000049E3                 db    0
.xdata$x:000049E4                 db    0
.xdata$x:000049E5                 db    0
.xdata$x:000049E6                 db    0
.xdata$x:000049E7                 db    0
.xdata$x:000049E8                 db    0
.xdata$x:000049E9                 db    0
.xdata$x:000049EA                 db    0
.xdata$x:000049EB                 db    0
.xdata$x:000049EC                 db    0
.xdata$x:000049ED                 db    0
.xdata$x:000049EE                 db    0
.xdata$x:000049EF                 db    0
.xdata$x:000049F0                 db    0
.xdata$x:000049F1                 db    0
.xdata$x:000049F2                 db    0
.xdata$x:000049F3                 db    0
.xdata$x:000049F3 _xdata$x        ends
.xdata$x:000049F3
.xdata$x:000049F4 ; ===========================================================================
.xdata$x:000049F4
.xdata$x:000049F4 ; Segment type: Pure data
.xdata$x:000049F4 ; Segment permissions: Read
.xdata$x:000049F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000049F4                 assume cs:_xdata$x
.xdata$x:000049F4                 ;org 49F4h
.xdata$x:000049F4 ; COMDAT (pick associative to section at 44C4)
.xdata$x:000049F4 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:000049F4                                         ; DATA XREF: .xdata$x:00004A04o
.xdata$x:000049F5                 db 0FFh
.xdata$x:000049F6                 db 0FFh
.xdata$x:000049F7                 db 0FFh
.xdata$x:000049F8                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:000049FC __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:000049FC                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:000049FD                 db    5
.xdata$x:000049FE                 db  93h ; ô
.xdata$x:000049FF                 db  19h
.xdata$x:00004A00                 db    1
.xdata$x:00004A01                 db    0
.xdata$x:00004A02                 db    0
.xdata$x:00004A03                 db    0
.xdata$x:00004A04                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00004A08                 align 20h
.xdata$x:00004A08 _xdata$x        ends
.xdata$x:00004A08
.xdata$x:00004A20 ; ===========================================================================
.xdata$x:00004A20
.xdata$x:00004A20 ; Segment type: Pure data
.xdata$x:00004A20 ; Segment permissions: Read
.xdata$x:00004A20 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004A20                 assume cs:_xdata$x
.xdata$x:00004A20                 ;org 4A20h
.xdata$x:00004A20 ; COMDAT (pick associative to section at 2B50)
.xdata$x:00004A20 __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00004A20                                         ; DATA XREF: .xdata$x:00004A30o
.xdata$x:00004A21                 db 0FFh
.xdata$x:00004A22                 db 0FFh
.xdata$x:00004A23                 db 0FFh
.xdata$x:00004A24                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:00004A28 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00004A28                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:00004A29                 db    5
.xdata$x:00004A2A                 db  93h ; ô
.xdata$x:00004A2B                 db  19h
.xdata$x:00004A2C                 db    1
.xdata$x:00004A2D                 db    0
.xdata$x:00004A2E                 db    0
.xdata$x:00004A2F                 db    0
.xdata$x:00004A30                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:00004A34                 db    0
.xdata$x:00004A35                 db    0
.xdata$x:00004A36                 db    0
.xdata$x:00004A37                 db    0
.xdata$x:00004A38                 db    0
.xdata$x:00004A39                 db    0
.xdata$x:00004A3A                 db    0
.xdata$x:00004A3B                 db    0
.xdata$x:00004A3C                 db    0
.xdata$x:00004A3D                 db    0
.xdata$x:00004A3E                 db    0
.xdata$x:00004A3F                 db    0
.xdata$x:00004A40                 db    0
.xdata$x:00004A41                 db    0
.xdata$x:00004A42                 db    0
.xdata$x:00004A43                 db    0
.xdata$x:00004A44                 db    0
.xdata$x:00004A45                 db    0
.xdata$x:00004A46                 db    0
.xdata$x:00004A47                 db    0
.xdata$x:00004A48                 db    0
.xdata$x:00004A49                 db    0
.xdata$x:00004A4A                 db    0
.xdata$x:00004A4B                 db    0
.xdata$x:00004A4B _xdata$x        ends
.xdata$x:00004A4B
.xdata$x:00004A4C ; ===========================================================================
.xdata$x:00004A4C
.xdata$x:00004A4C ; Segment type: Pure data
.xdata$x:00004A4C ; Segment permissions: Read
.xdata$x:00004A4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004A4C                 assume cs:_xdata$x
.xdata$x:00004A4C                 ;org 4A4Ch
.xdata$x:00004A4C ; COMDAT (pick associative to section at 2734)
.xdata$x:00004A4C __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00004A4C                                         ; DATA XREF: .xdata$x:00004A5Co
.xdata$x:00004A4D                 db 0FFh
.xdata$x:00004A4E                 db 0FFh
.xdata$x:00004A4F                 db 0FFh
.xdata$x:00004A50                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:00004A54 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00004A54                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:00004A55                 db    5
.xdata$x:00004A56                 db  93h ; ô
.xdata$x:00004A57                 db  19h
.xdata$x:00004A58                 db    1
.xdata$x:00004A59                 db    0
.xdata$x:00004A5A                 db    0
.xdata$x:00004A5B                 db    0
.xdata$x:00004A5C                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:00004A60                 db    0
.xdata$x:00004A61                 db    0
.xdata$x:00004A62                 db    0
.xdata$x:00004A63                 db    0
.xdata$x:00004A64                 db    0
.xdata$x:00004A65                 db    0
.xdata$x:00004A66                 db    0
.xdata$x:00004A67                 db    0
.xdata$x:00004A68                 db    0
.xdata$x:00004A69                 db    0
.xdata$x:00004A6A                 db    0
.xdata$x:00004A6B                 db    0
.xdata$x:00004A6C                 db    0
.xdata$x:00004A6D                 db    0
.xdata$x:00004A6E                 db    0
.xdata$x:00004A6F                 db    0
.xdata$x:00004A70                 db    0
.xdata$x:00004A71                 db    0
.xdata$x:00004A72                 db    0
.xdata$x:00004A73                 db    0
.xdata$x:00004A74                 db    0
.xdata$x:00004A75                 db    0
.xdata$x:00004A76                 db    0
.xdata$x:00004A77                 db    0
.xdata$x:00004A77 _xdata$x        ends
.xdata$x:00004A77
.xdata$x:00004A78 ; ===========================================================================
.xdata$x:00004A78
.xdata$x:00004A78 ; Segment type: Pure data
.xdata$x:00004A78 ; Segment permissions: Read
.xdata$x:00004A78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004A78                 assume cs:_xdata$x
.xdata$x:00004A78                 ;org 4A78h
.xdata$x:00004A78 ; COMDAT (pick associative to section at 4588)
.xdata$x:00004A78 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00004A78                                         ; DATA XREF: .xdata$x:00004A88o
.xdata$x:00004A79                 db 0FFh
.xdata$x:00004A7A                 db 0FFh
.xdata$x:00004A7B                 db 0FFh
.xdata$x:00004A7C                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00004A80 __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00004A80                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00004A81                 db    5
.xdata$x:00004A82                 db  93h ; ô
.xdata$x:00004A83                 db  19h
.xdata$x:00004A84                 db    1
.xdata$x:00004A85                 db    0
.xdata$x:00004A86                 db    0
.xdata$x:00004A87                 db    0
.xdata$x:00004A88                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00004A8C                 db    0
.xdata$x:00004A8D                 db    0
.xdata$x:00004A8E                 db    0
.xdata$x:00004A8F                 db    0
.xdata$x:00004A90                 db    0
.xdata$x:00004A91                 db    0
.xdata$x:00004A92                 db    0
.xdata$x:00004A93                 db    0
.xdata$x:00004A94                 db    0
.xdata$x:00004A95                 db    0
.xdata$x:00004A96                 db    0
.xdata$x:00004A97                 db    0
.xdata$x:00004A98                 db    0
.xdata$x:00004A99                 db    0
.xdata$x:00004A9A                 db    0
.xdata$x:00004A9B                 db    0
.xdata$x:00004A9C                 db    0
.xdata$x:00004A9D                 db    0
.xdata$x:00004A9E                 db    0
.xdata$x:00004A9F                 db    0
.xdata$x:00004AA0                 db    0
.xdata$x:00004AA1                 db    0
.xdata$x:00004AA2                 db    0
.xdata$x:00004AA3                 db    0
.xdata$x:00004AA3 _xdata$x        ends
.xdata$x:00004AA3
.xdata$x:00004AA4 ; ===========================================================================
.xdata$x:00004AA4
.xdata$x:00004AA4 ; Segment type: Pure data
.xdata$x:00004AA4 ; Segment permissions: Read
.xdata$x:00004AA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004AA4                 assume cs:_xdata$x
.xdata$x:00004AA4                 ;org 4AA4h
.xdata$x:00004AA4 ; COMDAT (pick associative to section at 2BC0)
.xdata$x:00004AA4 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00004AA4                                         ; DATA XREF: .xdata$x:00004AB4o
.xdata$x:00004AA5                 db 0FFh
.xdata$x:00004AA6                 db 0FFh
.xdata$x:00004AA7                 db 0FFh
.xdata$x:00004AA8                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:00004AAC __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00004AAC                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:00004AAD                 db    5
.xdata$x:00004AAE                 db  93h ; ô
.xdata$x:00004AAF                 db  19h
.xdata$x:00004AB0                 db    1
.xdata$x:00004AB1                 db    0
.xdata$x:00004AB2                 db    0
.xdata$x:00004AB3                 db    0
.xdata$x:00004AB4                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:00004AB8                 db    0
.xdata$x:00004AB9                 db    0
.xdata$x:00004ABA                 db    0
.xdata$x:00004ABB                 db    0
.xdata$x:00004ABC                 db    0
.xdata$x:00004ABD                 db    0
.xdata$x:00004ABE                 db    0
.xdata$x:00004ABF                 db    0
.xdata$x:00004AC0                 db    0
.xdata$x:00004AC1                 db    0
.xdata$x:00004AC2                 db    0
.xdata$x:00004AC3                 db    0
.xdata$x:00004AC4                 db    0
.xdata$x:00004AC5                 db    0
.xdata$x:00004AC6                 db    0
.xdata$x:00004AC7                 db    0
.xdata$x:00004AC8                 db    0
.xdata$x:00004AC9                 db    0
.xdata$x:00004ACA                 db    0
.xdata$x:00004ACB                 db    0
.xdata$x:00004ACC                 db    0
.xdata$x:00004ACD                 db    0
.xdata$x:00004ACE                 db    0
.xdata$x:00004ACF                 db    0
.xdata$x:00004ACF _xdata$x        ends
.xdata$x:00004ACF
.xdata$x:00004AD0 ; ===========================================================================
.xdata$x:00004AD0
.xdata$x:00004AD0 ; Segment type: Pure data
.xdata$x:00004AD0 ; Segment permissions: Read
.xdata$x:00004AD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004AD0                 assume cs:_xdata$x
.xdata$x:00004AD0                 ;org 4AD0h
.xdata$x:00004AD0 ; COMDAT (pick associative to section at 23E8)
.xdata$x:00004AD0 __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00004AD0                                         ; DATA XREF: .xdata$x:00004AE0o
.xdata$x:00004AD1                 db 0FFh
.xdata$x:00004AD2                 db 0FFh
.xdata$x:00004AD3                 db 0FFh
.xdata$x:00004AD4                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00004AD8 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00004AD8                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00004AD9                 db    5
.xdata$x:00004ADA                 db  93h ; ô
.xdata$x:00004ADB                 db  19h
.xdata$x:00004ADC                 db    1
.xdata$x:00004ADD                 db    0
.xdata$x:00004ADE                 db    0
.xdata$x:00004ADF                 db    0
.xdata$x:00004AE0                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00004AE4                 db    0
.xdata$x:00004AE5                 db    0
.xdata$x:00004AE6                 db    0
.xdata$x:00004AE7                 db    0
.xdata$x:00004AE8                 db    0
.xdata$x:00004AE9                 db    0
.xdata$x:00004AEA                 db    0
.xdata$x:00004AEB                 db    0
.xdata$x:00004AEC                 db    0
.xdata$x:00004AED                 db    0
.xdata$x:00004AEE                 db    0
.xdata$x:00004AEF                 db    0
.xdata$x:00004AF0                 db    0
.xdata$x:00004AF1                 db    0
.xdata$x:00004AF2                 db    0
.xdata$x:00004AF3                 db    0
.xdata$x:00004AF4                 db    0
.xdata$x:00004AF5                 db    0
.xdata$x:00004AF6                 db    0
.xdata$x:00004AF7                 db    0
.xdata$x:00004AF8                 db    0
.xdata$x:00004AF9                 db    0
.xdata$x:00004AFA                 db    0
.xdata$x:00004AFB                 db    0
.xdata$x:00004AFB _xdata$x        ends
.xdata$x:00004AFB
.xdata$x:00004AFC ; ===========================================================================
.xdata$x:00004AFC
.xdata$x:00004AFC ; Segment type: Pure data
.xdata$x:00004AFC ; Segment permissions: Read
.xdata$x:00004AFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004AFC                 assume cs:_xdata$x
.xdata$x:00004AFC                 ;org 4AFCh
.xdata$x:00004AFC ; COMDAT (pick associative to section at 2964)
.xdata$x:00004AFC __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00004AFC                                         ; DATA XREF: .xdata$x:00004B0Co
.xdata$x:00004AFD                 db 0FFh
.xdata$x:00004AFE                 db 0FFh
.xdata$x:00004AFF                 db 0FFh
.xdata$x:00004B00                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00004B04 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00004B04                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00004B05                 db    5
.xdata$x:00004B06                 db  93h ; ô
.xdata$x:00004B07                 db  19h
.xdata$x:00004B08                 db    1
.xdata$x:00004B09                 db    0
.xdata$x:00004B0A                 db    0
.xdata$x:00004B0B                 db    0
.xdata$x:00004B0C                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00004B10                 db    0
.xdata$x:00004B11                 db    0
.xdata$x:00004B12                 db    0
.xdata$x:00004B13                 db    0
.xdata$x:00004B14                 db    0
.xdata$x:00004B15                 db    0
.xdata$x:00004B16                 db    0
.xdata$x:00004B17                 db    0
.xdata$x:00004B18                 db    0
.xdata$x:00004B19                 db    0
.xdata$x:00004B1A                 db    0
.xdata$x:00004B1B                 db    0
.xdata$x:00004B1C                 db    0
.xdata$x:00004B1D                 db    0
.xdata$x:00004B1E                 db    0
.xdata$x:00004B1F                 db    0
.xdata$x:00004B20                 db    0
.xdata$x:00004B21                 db    0
.xdata$x:00004B22                 db    0
.xdata$x:00004B23                 db    0
.xdata$x:00004B24                 db    0
.xdata$x:00004B25                 db    0
.xdata$x:00004B26                 db    0
.xdata$x:00004B27                 db    0
.xdata$x:00004B27 _xdata$x        ends
.xdata$x:00004B27
.xdata$x:00004B28 ; ===========================================================================
.xdata$x:00004B28
.xdata$x:00004B28 ; Segment type: Pure data
.xdata$x:00004B28 ; Segment permissions: Read
.xdata$x:00004B28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004B28                 assume cs:_xdata$x
.xdata$x:00004B28                 ;org 4B28h
.xdata$x:00004B28 ; COMDAT (pick associative to section at 22E4)
.xdata$x:00004B28 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:00004B28                                         ; DATA XREF: .xdata$x:00004B38o
.xdata$x:00004B29                 db 0FFh
.xdata$x:00004B2A                 db 0FFh
.xdata$x:00004B2B                 db 0FFh
.xdata$x:00004B2C                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:00004B30 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:00004B30                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:00004B31                 db    5
.xdata$x:00004B32                 db  93h ; ô
.xdata$x:00004B33                 db  19h
.xdata$x:00004B34                 db    1
.xdata$x:00004B35                 db    0
.xdata$x:00004B36                 db    0
.xdata$x:00004B37                 db    0
.xdata$x:00004B38                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:00004B3C                 db    0
.xdata$x:00004B3D                 db    0
.xdata$x:00004B3E                 db    0
.xdata$x:00004B3F                 db    0
.xdata$x:00004B40                 db    0
.xdata$x:00004B41                 db    0
.xdata$x:00004B42                 db    0
.xdata$x:00004B43                 db    0
.xdata$x:00004B44                 db    0
.xdata$x:00004B45                 db    0
.xdata$x:00004B46                 db    0
.xdata$x:00004B47                 db    0
.xdata$x:00004B48                 db    0
.xdata$x:00004B49                 db    0
.xdata$x:00004B4A                 db    0
.xdata$x:00004B4B                 db    0
.xdata$x:00004B4C                 db    0
.xdata$x:00004B4D                 db    0
.xdata$x:00004B4E                 db    0
.xdata$x:00004B4F                 db    0
.xdata$x:00004B50                 db    0
.xdata$x:00004B51                 db    0
.xdata$x:00004B52                 db    0
.xdata$x:00004B53                 db    0
.xdata$x:00004B53 _xdata$x        ends
.xdata$x:00004B53
.xdata$x:00004B54 ; ===========================================================================
.xdata$x:00004B54
.xdata$x:00004B54 ; Segment type: Pure data
.xdata$x:00004B54 ; Segment permissions: Read
.xdata$x:00004B54 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004B54                 assume cs:_xdata$x
.xdata$x:00004B54                 ;org 4B54h
.xdata$x:00004B54 ; COMDAT (pick associative to section at 287C)
.xdata$x:00004B54 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00004B54                                         ; DATA XREF: .xdata$x:00004B64o
.xdata$x:00004B55                 db 0FFh
.xdata$x:00004B56                 db 0FFh
.xdata$x:00004B57                 db 0FFh
.xdata$x:00004B58                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00004B5C __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00004B5C                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00004B5D                 db    5
.xdata$x:00004B5E                 db  93h ; ô
.xdata$x:00004B5F                 db  19h
.xdata$x:00004B60                 db    1
.xdata$x:00004B61                 db    0
.xdata$x:00004B62                 db    0
.xdata$x:00004B63                 db    0
.xdata$x:00004B64                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:00004B68                 align 20h
.xdata$x:00004B68 _xdata$x        ends
.xdata$x:00004B68
.xdata$x:00004B80 ; ===========================================================================
.xdata$x:00004B80
.xdata$x:00004B80 ; Segment type: Pure data
.xdata$x:00004B80 ; Segment permissions: Read
.xdata$x:00004B80 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004B80                 assume cs:_xdata$x
.xdata$x:00004B80                 ;org 4B80h
.xdata$x:00004B80 ; COMDAT (pick associative to section at 2568)
.xdata$x:00004B80 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:00004B80                                         ; DATA XREF: .xdata$x:00004B90o
.xdata$x:00004B81                 db 0FFh
.xdata$x:00004B82                 db 0FFh
.xdata$x:00004B83                 db 0FFh
.xdata$x:00004B84                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:00004B88 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:00004B88                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:00004B89                 db    5
.xdata$x:00004B8A                 db  93h ; ô
.xdata$x:00004B8B                 db  19h
.xdata$x:00004B8C                 db    1
.xdata$x:00004B8D                 db    0
.xdata$x:00004B8E                 db    0
.xdata$x:00004B8F                 db    0
.xdata$x:00004B90                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:00004B94                 db    0
.xdata$x:00004B95                 db    0
.xdata$x:00004B96                 db    0
.xdata$x:00004B97                 db    0
.xdata$x:00004B98                 db    0
.xdata$x:00004B99                 db    0
.xdata$x:00004B9A                 db    0
.xdata$x:00004B9B                 db    0
.xdata$x:00004B9C                 db    0
.xdata$x:00004B9D                 db    0
.xdata$x:00004B9E                 db    0
.xdata$x:00004B9F                 db    0
.xdata$x:00004BA0                 db    0
.xdata$x:00004BA1                 db    0
.xdata$x:00004BA2                 db    0
.xdata$x:00004BA3                 db    0
.xdata$x:00004BA4                 db    0
.xdata$x:00004BA5                 db    0
.xdata$x:00004BA6                 db    0
.xdata$x:00004BA7                 db    0
.xdata$x:00004BA8                 db    0
.xdata$x:00004BA9                 db    0
.xdata$x:00004BAA                 db    0
.xdata$x:00004BAB                 db    0
.xdata$x:00004BAB _xdata$x        ends
.xdata$x:00004BAB
.xdata$x:00004BAC ; ===========================================================================
.xdata$x:00004BAC
.xdata$x:00004BAC ; Segment type: Pure data
.xdata$x:00004BAC ; Segment permissions: Read
.xdata$x:00004BAC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004BAC                 assume cs:_xdata$x
.xdata$x:00004BAC                 ;org 4BACh
.xdata$x:00004BAC ; COMDAT (pick associative to section at 2A50)
.xdata$x:00004BAC __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:00004BAC                                         ; DATA XREF: .xdata$x:00004BBCo
.xdata$x:00004BAD                 db 0FFh
.xdata$x:00004BAE                 db 0FFh
.xdata$x:00004BAF                 db 0FFh
.xdata$x:00004BB0                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:00004BB4 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00004BB4                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:00004BB5                 db    5
.xdata$x:00004BB6                 db  93h ; ô
.xdata$x:00004BB7                 db  19h
.xdata$x:00004BB8                 db    1
.xdata$x:00004BB9                 db    0
.xdata$x:00004BBA                 db    0
.xdata$x:00004BBB                 db    0
.xdata$x:00004BBC                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:00004BC0                 db    0
.xdata$x:00004BC1                 db    0
.xdata$x:00004BC2                 db    0
.xdata$x:00004BC3                 db    0
.xdata$x:00004BC4                 db    0
.xdata$x:00004BC5                 db    0
.xdata$x:00004BC6                 db    0
.xdata$x:00004BC7                 db    0
.xdata$x:00004BC8                 db    0
.xdata$x:00004BC9                 db    0
.xdata$x:00004BCA                 db    0
.xdata$x:00004BCB                 db    0
.xdata$x:00004BCC                 db    0
.xdata$x:00004BCD                 db    0
.xdata$x:00004BCE                 db    0
.xdata$x:00004BCF                 db    0
.xdata$x:00004BD0                 db    0
.xdata$x:00004BD1                 db    0
.xdata$x:00004BD2                 db    0
.xdata$x:00004BD3                 db    0
.xdata$x:00004BD4                 db    0
.xdata$x:00004BD5                 db    0
.xdata$x:00004BD6                 db    0
.xdata$x:00004BD7                 db    0
.xdata$x:00004BD7 _xdata$x        ends
.xdata$x:00004BD7
.xdata$x:00004BD8 ; ===========================================================================
.xdata$x:00004BD8
.xdata$x:00004BD8 ; Segment type: Pure data
.xdata$x:00004BD8 ; Segment permissions: Read
.xdata$x:00004BD8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004BD8                 assume cs:_xdata$x
.xdata$x:00004BD8                 ;org 4BD8h
.xdata$x:00004BD8 ; COMDAT (pick associative to section at 3108)
.xdata$x:00004BD8 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00004BD8                                         ; DATA XREF: .xdata$x:00004C60o
.xdata$x:00004BD9                 db    0
.xdata$x:00004BDA                 db    0
.xdata$x:00004BDB                 db    0
.xdata$x:00004BDC                 db    0
.xdata$x:00004BDD                 db    0
.xdata$x:00004BDE                 db    0
.xdata$x:00004BDF                 db    0
.xdata$x:00004BE0                 db    0
.xdata$x:00004BE1                 db    0
.xdata$x:00004BE2                 db    0
.xdata$x:00004BE3                 db    0
.xdata$x:00004BE4                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:00004BE8 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:00004BE8                                         ; DATA XREF: .xdata$x:00004C4Co
.xdata$x:00004BE9                 db    0
.xdata$x:00004BEA                 db    0
.xdata$x:00004BEB                 db    0
.xdata$x:00004BEC                 db    0
.xdata$x:00004BED                 db    0
.xdata$x:00004BEE                 db    0
.xdata$x:00004BEF                 db    0
.xdata$x:00004BF0                 db    0
.xdata$x:00004BF1                 db    0
.xdata$x:00004BF2                 db    0
.xdata$x:00004BF3                 db    0
.xdata$x:00004BF4                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:00004BF8 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:00004BF8                                         ; DATA XREF: .xdata$x:00004C20o
.xdata$x:00004BF9                 db 0FFh
.xdata$x:00004BFA                 db 0FFh
.xdata$x:00004BFB                 db 0FFh
.xdata$x:00004BFC                 db    0
.xdata$x:00004BFD                 db    0
.xdata$x:00004BFE                 db    0
.xdata$x:00004BFF                 db    0
.xdata$x:00004C00                 db 0FFh
.xdata$x:00004C01                 db 0FFh
.xdata$x:00004C02                 db 0FFh
.xdata$x:00004C03                 db 0FFh
.xdata$x:00004C04                 db    0
.xdata$x:00004C05                 db    0
.xdata$x:00004C06                 db    0
.xdata$x:00004C07                 db    0
.xdata$x:00004C08                 db    1
.xdata$x:00004C09                 db    0
.xdata$x:00004C0A                 db    0
.xdata$x:00004C0B                 db    0
.xdata$x:00004C0C                 db    0
.xdata$x:00004C0D                 db    0
.xdata$x:00004C0E                 db    0
.xdata$x:00004C0F                 db    0
.xdata$x:00004C10                 db    1
.xdata$x:00004C11                 db    0
.xdata$x:00004C12                 db    0
.xdata$x:00004C13                 db    0
.xdata$x:00004C14                 db    0
.xdata$x:00004C15                 db    0
.xdata$x:00004C16                 db    0
.xdata$x:00004C17                 db    0
.xdata$x:00004C18 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00004C18                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:00004C19                 db    5
.xdata$x:00004C1A                 db  93h ; ô
.xdata$x:00004C1B                 db  19h
.xdata$x:00004C1C                 db    4
.xdata$x:00004C1D                 db    0
.xdata$x:00004C1E                 db    0
.xdata$x:00004C1F                 db    0
.xdata$x:00004C20                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00004C24                 db    2
.xdata$x:00004C25                 db    0
.xdata$x:00004C26                 db    0
.xdata$x:00004C27                 db    0
.xdata$x:00004C28                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00004C2C                 db    0
.xdata$x:00004C2D                 db    0
.xdata$x:00004C2E                 db    0
.xdata$x:00004C2F                 db    0
.xdata$x:00004C30                 db    0
.xdata$x:00004C31                 db    0
.xdata$x:00004C32                 db    0
.xdata$x:00004C33                 db    0
.xdata$x:00004C34                 db    0
.xdata$x:00004C35                 db    0
.xdata$x:00004C36                 db    0
.xdata$x:00004C37                 db    0
.xdata$x:00004C38                 db    0
.xdata$x:00004C39                 db    0
.xdata$x:00004C3A                 db    0
.xdata$x:00004C3B                 db    0
.xdata$x:00004C3C __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:00004C3C                                         ; DATA XREF: .xdata$x:00004C28o
.xdata$x:00004C3D                 db    0
.xdata$x:00004C3E                 db    0
.xdata$x:00004C3F                 db    0
.xdata$x:00004C40                 db    2
.xdata$x:00004C41                 db    0
.xdata$x:00004C42                 db    0
.xdata$x:00004C43                 db    0
.xdata$x:00004C44                 db    3
.xdata$x:00004C45                 db    0
.xdata$x:00004C46                 db    0
.xdata$x:00004C47                 db    0
.xdata$x:00004C48                 db    1
.xdata$x:00004C49                 db    0
.xdata$x:00004C4A                 db    0
.xdata$x:00004C4B                 db    0
.xdata$x:00004C4C                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:00004C50                 db    0
.xdata$x:00004C51                 db    0
.xdata$x:00004C52                 db    0
.xdata$x:00004C53                 db    0
.xdata$x:00004C54                 db    0
.xdata$x:00004C55                 db    0
.xdata$x:00004C56                 db    0
.xdata$x:00004C57                 db    0
.xdata$x:00004C58                 db    3
.xdata$x:00004C59                 db    0
.xdata$x:00004C5A                 db    0
.xdata$x:00004C5B                 db    0
.xdata$x:00004C5C                 db    1
.xdata$x:00004C5D                 db    0
.xdata$x:00004C5E                 db    0
.xdata$x:00004C5F                 db    0
.xdata$x:00004C60                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:00004C60 _xdata$x        ends
.xdata$x:00004C60
.xdata$x:00004C64 ; ===========================================================================
.xdata$x:00004C64
.xdata$x:00004C64 ; Segment type: Pure data
.xdata$x:00004C64 ; Segment permissions: Read
.xdata$x:00004C64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004C64                 assume cs:_xdata$x
.xdata$x:00004C64                 ;org 4C64h
.xdata$x:00004C64 __unwindtable$?writeNppPath@RegExtDlg@@AAEXXZ db 0FFh
.xdata$x:00004C64                                         ; DATA XREF: .xdata$x:00004C74o
.xdata$x:00004C65                 db 0FFh
.xdata$x:00004C66                 db 0FFh
.xdata$x:00004C67                 db 0FFh
.xdata$x:00004C68                 dd offset __unwindfunclet$?writeNppPath@RegExtDlg@@AAEXXZ$0
.xdata$x:00004C6C __ehfuncinfo$?writeNppPath@RegExtDlg@@AAEXXZ db  22h ; "
.xdata$x:00004C6C                                         ; DATA XREF: __ehhandler$?writeNppPath@RegExtDlg@@AAEXXZ+1Eo
.xdata$x:00004C6D                 db    5
.xdata$x:00004C6E                 db  93h ; ô
.xdata$x:00004C6F                 db  19h
.xdata$x:00004C70                 db    1
.xdata$x:00004C71                 db    0
.xdata$x:00004C72                 db    0
.xdata$x:00004C73                 db    0
.xdata$x:00004C74                 dd offset __unwindtable$?writeNppPath@RegExtDlg@@AAEXXZ
.xdata$x:00004C78                 db    0
.xdata$x:00004C79                 db    0
.xdata$x:00004C7A                 db    0
.xdata$x:00004C7B                 db    0
.xdata$x:00004C7C                 db    0
.xdata$x:00004C7D                 db    0
.xdata$x:00004C7E                 db    0
.xdata$x:00004C7F                 db    0
.xdata$x:00004C80                 db    0
.xdata$x:00004C81                 db    0
.xdata$x:00004C82                 db    0
.xdata$x:00004C83                 db    0
.xdata$x:00004C84                 db    0
.xdata$x:00004C85                 db    0
.xdata$x:00004C86                 db    0
.xdata$x:00004C87                 db    0
.xdata$x:00004C88                 db    0
.xdata$x:00004C89                 db    0
.xdata$x:00004C8A                 db    0
.xdata$x:00004C8B                 db    0
.xdata$x:00004C8C                 db    0
.xdata$x:00004C8D                 db    0
.xdata$x:00004C8E                 db    0
.xdata$x:00004C8F                 db    0
.xdata$x:00004C8F _xdata$x        ends
.xdata$x:00004C8F
.xdata$x:00004C90 ; ===========================================================================
.xdata$x:00004C90
.xdata$x:00004C90 ; Segment type: Pure data
.xdata$x:00004C90 ; Segment permissions: Read
.xdata$x:00004C90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004C90                 assume cs:_xdata$x
.xdata$x:00004C90                 ;org 4C90h
.xdata$x:00004C90 ; COMDAT (pick associative to section at 2100)
.xdata$x:00004C90 __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:00004C90                                         ; DATA XREF: .xdata$x:00004CA0o
.xdata$x:00004C91                 db 0FFh
.xdata$x:00004C92                 db 0FFh
.xdata$x:00004C93                 db 0FFh
.xdata$x:00004C94                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:00004C98 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:00004C98                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:00004C99                 db    5
.xdata$x:00004C9A                 db  93h ; ô
.xdata$x:00004C9B                 db  19h
.xdata$x:00004C9C                 db    1
.xdata$x:00004C9D                 db    0
.xdata$x:00004C9E                 db    0
.xdata$x:00004C9F                 db    0
.xdata$x:00004CA0                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:00004CA4                 db    0
.xdata$x:00004CA5                 db    0
.xdata$x:00004CA6                 db    0
.xdata$x:00004CA7                 db    0
.xdata$x:00004CA8                 db    0
.xdata$x:00004CA9                 db    0
.xdata$x:00004CAA                 db    0
.xdata$x:00004CAB                 db    0
.xdata$x:00004CAC                 db    0
.xdata$x:00004CAD                 db    0
.xdata$x:00004CAE                 db    0
.xdata$x:00004CAF                 db    0
.xdata$x:00004CB0                 db    0
.xdata$x:00004CB1                 db    0
.xdata$x:00004CB2                 db    0
.xdata$x:00004CB3                 db    0
.xdata$x:00004CB4                 db    0
.xdata$x:00004CB5                 db    0
.xdata$x:00004CB6                 db    0
.xdata$x:00004CB7                 db    0
.xdata$x:00004CB8                 db    0
.xdata$x:00004CB9                 db    0
.xdata$x:00004CBA                 db    0
.xdata$x:00004CBB                 db    0
.xdata$x:00004CBB _xdata$x        ends
.xdata$x:00004CBB
.xdata$x:00004CBC ; ===========================================================================
.xdata$x:00004CBC
.xdata$x:00004CBC ; Segment type: Pure data
.xdata$x:00004CBC ; Segment permissions: Read
.xdata$x:00004CBC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004CBC                 assume cs:_xdata$x
.xdata$x:00004CBC                 ;org 4CBCh
.xdata$x:00004CBC ; COMDAT (pick associative to section at 1F2C)
.xdata$x:00004CBC __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:00004CBC                                         ; DATA XREF: .xdata$x:00004CCCo
.xdata$x:00004CBD                 db 0FFh
.xdata$x:00004CBE                 db 0FFh
.xdata$x:00004CBF                 db 0FFh
.xdata$x:00004CC0                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:00004CC4 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:00004CC4                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:00004CC5                 db    5
.xdata$x:00004CC6                 db  93h ; ô
.xdata$x:00004CC7                 db  19h
.xdata$x:00004CC8                 db    1
.xdata$x:00004CC9                 db    0
.xdata$x:00004CCA                 db    0
.xdata$x:00004CCB                 db    0
.xdata$x:00004CCC                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:00004CD0                 db    0
.xdata$x:00004CD1                 db    0
.xdata$x:00004CD2                 db    0
.xdata$x:00004CD3                 db    0
.xdata$x:00004CD4                 db    0
.xdata$x:00004CD5                 db    0
.xdata$x:00004CD6                 db    0
.xdata$x:00004CD7                 db    0
.xdata$x:00004CD8                 db    0
.xdata$x:00004CD9                 db    0
.xdata$x:00004CDA                 db    0
.xdata$x:00004CDB                 db    0
.xdata$x:00004CDC                 db    0
.xdata$x:00004CDD                 db    0
.xdata$x:00004CDE                 db    0
.xdata$x:00004CDF                 db    0
.xdata$x:00004CE0                 db    0
.xdata$x:00004CE1                 db    0
.xdata$x:00004CE2                 db    0
.xdata$x:00004CE3                 db    0
.xdata$x:00004CE4                 db    0
.xdata$x:00004CE5                 db    0
.xdata$x:00004CE6                 db    0
.xdata$x:00004CE7                 db    0
.xdata$x:00004CE7 _xdata$x        ends
.xdata$x:00004CE7
.xdata$x:00004CE8 ; ===========================================================================
.xdata$x:00004CE8
.xdata$x:00004CE8 ; Segment type: Pure data
.xdata$x:00004CE8 ; Segment permissions: Read
.xdata$x:00004CE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00004CE8                 assume cs:_xdata$x
.xdata$x:00004CE8                 ;org 4CE8h
.xdata$x:00004CE8 ; COMDAT (pick associative to section at 202C)
.xdata$x:00004CE8 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:00004CE8                                         ; DATA XREF: .xdata$x:00004CF8o
.xdata$x:00004CE9                 db 0FFh
.xdata$x:00004CEA                 db 0FFh
.xdata$x:00004CEB                 db 0FFh
.xdata$x:00004CEC                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:00004CF0 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:00004CF0                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:00004CF1                 db    5
.xdata$x:00004CF2                 db  93h ; ô
.xdata$x:00004CF3                 db  19h
.xdata$x:00004CF4                 db    1
.xdata$x:00004CF5                 db    0
.xdata$x:00004CF6                 db    0
.xdata$x:00004CF7                 db    0
.xdata$x:00004CF8                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:00004CFC                 db    0
.xdata$x:00004CFD                 db    0
.xdata$x:00004CFE                 db    0
.xdata$x:00004CFF                 db    0
.xdata$x:00004D00                 db    0
.xdata$x:00004D01                 db    0
.xdata$x:00004D02                 db    0
.xdata$x:00004D03                 db    0
.xdata$x:00004D04                 db    0
.xdata$x:00004D05                 db    0
.xdata$x:00004D06                 db    0
.xdata$x:00004D07                 db    0
.xdata$x:00004D08                 db    0
.xdata$x:00004D09                 db    0
.xdata$x:00004D0A                 db    0
.xdata$x:00004D0B                 db    0
.xdata$x:00004D0C                 db    0
.xdata$x:00004D0D                 db    0
.xdata$x:00004D0E                 db    0
.xdata$x:00004D0F                 db    0
.xdata$x:00004D10                 db    0
.xdata$x:00004D11                 db    0
.xdata$x:00004D12                 db    0
.xdata$x:00004D13                 db    0
.xdata$x:00004D13 _xdata$x        ends
.xdata$x:00004D13
.bss:00004D14 ; ===========================================================================
.bss:00004D14
.bss:00004D14 ; Segment type: Uninitialized
.bss:00004D14 ; Segment permissions: Read/Write
.bss:00004D14 _bss            segment byte public 'BSS' use32
.bss:00004D14                 assume cs:_bss
.bss:00004D14                 ;org 4D14h
.bss:00004D14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00004D14 _allocator_arg  db    ? ;
.bss:00004D15 _piecewise_construct db    ? ;
.bss:00004D16                 align 4
.bss:00004D16 _bss            ends
.bss:00004D16
.rdata:00004D18 ; ===========================================================================
.rdata:00004D18
.rdata:00004D18 ; Segment type: Pure data
.rdata:00004D18 ; Segment permissions: Read
.rdata:00004D18 _rdata          segment dword public 'DATA' use32
.rdata:00004D18                 assume cs:_rdata
.rdata:00004D18                 ;org 4D18h
.rdata:00004D18 ; COMDAT (pick largest)
.rdata:00004D18                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:00004D1C                 public ??_7error_category@std@@6B@
.rdata:00004D1C ; const std::error_category::`vftable'
.rdata:00004D1C ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:00004D1C                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:00004D1C                                         ; std::error_category::~error_category(void)+Ao
.rdata:00004D1C                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:00004D20                 dd offset __purecall
.rdata:00004D24                 dd offset __purecall
.rdata:00004D28                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00004D2C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00004D30                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00004D30 _rdata          ends
.rdata:00004D30
.rdata:00004D34 ; ===========================================================================
.rdata:00004D34
.rdata:00004D34 ; Segment type: Pure data
.rdata:00004D34 ; Segment permissions: Read
.rdata:00004D34 _rdata          segment dword public 'DATA' use32
.rdata:00004D34                 assume cs:_rdata
.rdata:00004D34                 ;org 4D34h
.rdata:00004D34 ; COMDAT (pick largest)
.rdata:00004D34                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:00004D38                 public ??_7_Generic_error_category@std@@6B@
.rdata:00004D38 ; const std::_Generic_error_category::`vftable'
.rdata:00004D38 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:00004D38                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:00004D38                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:00004D3C                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:00004D40                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:00004D44                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00004D48                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00004D4C                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00004D4C _rdata          ends
.rdata:00004D4C
.rdata:00004D50 ; ===========================================================================
.rdata:00004D50
.rdata:00004D50 ; Segment type: Pure data
.rdata:00004D50 ; Segment permissions: Read
.rdata:00004D50 _rdata          segment dword public 'DATA' use32
.rdata:00004D50                 assume cs:_rdata
.rdata:00004D50                 ;org 4D50h
.rdata:00004D50 ; COMDAT (pick any)
.rdata:00004D50                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:00004D50 ; `string'
.rdata:00004D50 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:00004D50                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:00004D50 _rdata          ends
.rdata:00004D50
.rdata:00004D58 ; ===========================================================================
.rdata:00004D58
.rdata:00004D58 ; Segment type: Pure data
.rdata:00004D58 ; Segment permissions: Read
.rdata:00004D58 _rdata          segment dword public 'DATA' use32
.rdata:00004D58                 assume cs:_rdata
.rdata:00004D58                 ;org 4D58h
.rdata:00004D58 ; COMDAT (pick any)
.rdata:00004D58                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:00004D58 ; `string'
.rdata:00004D58 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:00004D58                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_4458o
.rdata:00004D58                                         ; std::_System_error_category::message(int):loc_45D4o
.rdata:00004D66                 align 4
.rdata:00004D66 _rdata          ends
.rdata:00004D66
.rdata:00004D68 ; ===========================================================================
.rdata:00004D68
.rdata:00004D68 ; Segment type: Pure data
.rdata:00004D68 ; Segment permissions: Read
.rdata:00004D68 _rdata          segment dword public 'DATA' use32
.rdata:00004D68                 assume cs:_rdata
.rdata:00004D68                 ;org 4D68h
.rdata:00004D68 ; COMDAT (pick largest)
.rdata:00004D68                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:00004D6C                 public ??_7_Iostream_error_category@std@@6B@
.rdata:00004D6C ; const std::_Iostream_error_category::`vftable'
.rdata:00004D6C ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:00004D6C                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:00004D6C                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:00004D70                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:00004D74                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:00004D78                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:00004D7C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00004D80                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00004D80 _rdata          ends
.rdata:00004D80
.rdata:00004D84 ; ===========================================================================
.rdata:00004D84
.rdata:00004D84 ; Segment type: Pure data
.rdata:00004D84 ; Segment permissions: Read
.rdata:00004D84 _rdata          segment dword public 'DATA' use32
.rdata:00004D84                 assume cs:_rdata
.rdata:00004D84                 ;org 4D84h
.rdata:00004D84 ; COMDAT (pick any)
.rdata:00004D84                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:00004D84 ; `string'
.rdata:00004D84 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:00004D84                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:00004D8D                 align 10h
.rdata:00004D8D _rdata          ends
.rdata:00004D8D
.rdata:00004D90 ; ===========================================================================
.rdata:00004D90
.rdata:00004D90 ; Segment type: Pure data
.rdata:00004D90 ; Segment permissions: Read
.rdata:00004D90 _rdata          segment dword public 'DATA' use32
.rdata:00004D90                 assume cs:_rdata
.rdata:00004D90                 ;org 4D90h
.rdata:00004D90 ; COMDAT (pick any)
.rdata:00004D90                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:00004D90 ; char `string'[]
.rdata:00004D90 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:00004D90                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:00004DA6                 align 4
.rdata:00004DA6 _rdata          ends
.rdata:00004DA6
.rdata:00004DA8 ; ===========================================================================
.rdata:00004DA8
.rdata:00004DA8 ; Segment type: Pure data
.rdata:00004DA8 ; Segment permissions: Read
.rdata:00004DA8 _rdata          segment dword public 'DATA' use32
.rdata:00004DA8                 assume cs:_rdata
.rdata:00004DA8                 ;org 4DA8h
.rdata:00004DA8 ; COMDAT (pick largest)
.rdata:00004DA8                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:00004DAC                 public ??_7_System_error_category@std@@6B@
.rdata:00004DAC ; const std::_System_error_category::`vftable'
.rdata:00004DAC ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:00004DAC                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:00004DAC                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:00004DB0                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:00004DB4                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:00004DB8                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:00004DBC                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:00004DC0                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:00004DC0 _rdata          ends
.rdata:00004DC0
.rdata:00004DC4 ; ===========================================================================
.rdata:00004DC4
.rdata:00004DC4 ; Segment type: Pure data
.rdata:00004DC4 ; Segment permissions: Read
.rdata:00004DC4 _rdata          segment dword public 'DATA' use32
.rdata:00004DC4                 assume cs:_rdata
.rdata:00004DC4                 ;org 4DC4h
.rdata:00004DC4 ; COMDAT (pick any)
.rdata:00004DC4                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:00004DC4 ; `string'
.rdata:00004DC4 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:00004DC4                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:00004DCB                 align 4
.rdata:00004DCB _rdata          ends
.rdata:00004DCB
.bss:00004DCC ; ===========================================================================
.bss:00004DCC
.bss:00004DCC ; Segment type: Uninitialized
.bss:00004DCC ; Segment permissions: Read/Write
.bss:00004DCC _bss            segment dword public 'BSS' use32
.bss:00004DCC                 assume cs:_bss
.bss:00004DCC                 ;org 4DCCh
.bss:00004DCC ; COMDAT (pick any)
.bss:00004DCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00004DCC                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:00004DCC ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:00004DCC ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:00004DCC                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:00004DCC                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:00004DCD                 db    ? ;
.bss:00004DCE                 db    ? ;
.bss:00004DCF                 db    ? ;
.bss:00004DCF _bss            ends
.bss:00004DCF
.bss:00004DD0 ; ===========================================================================
.bss:00004DD0
.bss:00004DD0 ; Segment type: Uninitialized
.bss:00004DD0 ; Segment permissions: Read/Write
.bss:00004DD0 _bss            segment dword public 'BSS' use32
.bss:00004DD0                 assume cs:_bss
.bss:00004DD0                 ;org 4DD0h
.bss:00004DD0 ; COMDAT (pick any)
.bss:00004DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00004DD0                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:00004DD0 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:00004DD0 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:00004DD0                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:00004DD0                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:00004DD1                 db    ? ;
.bss:00004DD2                 db    ? ;
.bss:00004DD3                 db    ? ;
.bss:00004DD3 _bss            ends
.bss:00004DD3
.bss:00004DD4 ; ===========================================================================
.bss:00004DD4
.bss:00004DD4 ; Segment type: Uninitialized
.bss:00004DD4 ; Segment permissions: Read/Write
.bss:00004DD4 _bss            segment dword public 'BSS' use32
.bss:00004DD4                 assume cs:_bss
.bss:00004DD4                 ;org 4DD4h
.bss:00004DD4 ; COMDAT (pick any)
.bss:00004DD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00004DD4                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:00004DD4 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:00004DD4 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:00004DD4                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:00004DD4                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:00004DD5                 db    ? ;
.bss:00004DD6                 db    ? ;
.bss:00004DD7                 db    ? ;
.bss:00004DD7 _bss            ends
.bss:00004DD7
.rdata:00004DD8 ; ===========================================================================
.rdata:00004DD8
.rdata:00004DD8 ; Segment type: Pure data
.rdata:00004DD8 ; Segment permissions: Read
.rdata:00004DD8 _rdata          segment dword public 'DATA' use32
.rdata:00004DD8                 assume cs:_rdata
.rdata:00004DD8                 ;org 4DD8h
.rdata:00004DD8 ; COMDAT (pick any)
.rdata:00004DD8                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:00004DD8 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:00004DD8 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:00004DD8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+3Dr
.rdata:00004DD8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+5Dr
.rdata:00004DD8 _rdata          ends
.rdata:00004DD8
.bss:00004DDC ; ===========================================================================
.bss:00004DDC
.bss:00004DDC ; Segment type: Uninitialized
.bss:00004DDC ; Segment permissions: Read/Write
.bss:00004DDC _bss            segment dword public 'BSS' use32
.bss:00004DDC                 assume cs:_bss
.bss:00004DDC                 ;org 4DDCh
.bss:00004DDC ; COMDAT (pick any)
.bss:00004DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00004DDC                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:00004DDC ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:00004DDC ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:00004DDC                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:00004DDD                 db    ? ;
.bss:00004DDE                 db    ? ;
.bss:00004DDF                 db    ? ;
.bss:00004DDF _bss            ends
.bss:00004DDF
.bss:00004DE0 ; ===========================================================================
.bss:00004DE0
.bss:00004DE0 ; Segment type: Uninitialized
.bss:00004DE0 ; Segment permissions: Read/Write
.bss:00004DE0 _bss            segment dword public 'BSS' use32
.bss:00004DE0                 assume cs:_bss
.bss:00004DE0                 ;org 4DE0h
.bss:00004DE0 ; COMDAT (pick any)
.bss:00004DE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00004DE0                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:00004DE0 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:00004DE0 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:00004DE0                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:00004DE1                 db    ? ;
.bss:00004DE2                 db    ? ;
.bss:00004DE3                 db    ? ;
.bss:00004DE3 _bss            ends
.bss:00004DE3
.rdata:00004DE4 ; ===========================================================================
.rdata:00004DE4
.rdata:00004DE4 ; Segment type: Pure data
.rdata:00004DE4 ; Segment permissions: Read
.rdata:00004DE4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00004DE4 _rdata          segment para public 'DATA' use32
.rdata:00004DE4                 assume cs:_rdata
.rdata:00004DE4                 ;org 4DE4h
.rdata:00004DE4 ; COMDAT (pick any)
.rdata:00004DE4                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00004DE4 ; wchar_t `string'
.rdata:00004DE4 ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00004DE4                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *)+Co
.rdata:00004DE4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(wchar_t const *,uint)+14o ...
.rdata:00004DE4                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00004DE4                 unicode 0, <clude\xstring>,0
.rdata:00004E72                 align 4
.rdata:00004E72 _rdata          ends
.rdata:00004E72
.bss:00004E74 ; ===========================================================================
.bss:00004E74
.bss:00004E74 ; Segment type: Uninitialized
.bss:00004E74 ; Segment permissions: Read/Write
.bss:00004E74 _bss            segment dword public 'BSS' use32
.bss:00004E74                 assume cs:_bss
.bss:00004E74                 ;org 4E74h
.bss:00004E74 ; COMDAT (pick any)
.bss:00004E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00004E74                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:00004E74 ; std::locale::id std::numpunct<char>::id
.bss:00004E74 ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:00004E74                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:00004E75                 db    ? ;
.bss:00004E76                 db    ? ;
.bss:00004E77                 db    ? ;
.bss:00004E77 _bss            ends
.bss:00004E77
.bss:00004E78 ; ===========================================================================
.bss:00004E78
.bss:00004E78 ; Segment type: Uninitialized
.bss:00004E78 ; Segment permissions: Read/Write
.bss:00004E78 _bss            segment dword public 'BSS' use32
.bss:00004E78                 assume cs:_bss
.bss:00004E78                 ;org 4E78h
.bss:00004E78 ; COMDAT (pick any)
.bss:00004E78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00004E78                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:00004E78 ; std::locale::id std::numpunct<wchar_t>::id
.bss:00004E78 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:00004E78                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:00004E79                 db    ? ;
.bss:00004E7A                 db    ? ;
.bss:00004E7B                 db    ? ;
.bss:00004E7B _bss            ends
.bss:00004E7B
.rdata:00004E7C ; ===========================================================================
.rdata:00004E7C
.rdata:00004E7C ; Segment type: Pure data
.rdata:00004E7C ; Segment permissions: Read
.rdata:00004E7C _rdata          segment dword public 'DATA' use32
.rdata:00004E7C                 assume cs:_rdata
.rdata:00004E7C                 ;org 4E7Ch
.rdata:00004E7C ; COMDAT (pick any)
.rdata:00004E7C                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:00004E7C ; char `string'[]
.rdata:00004E7C ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:00004E7C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:00004E7C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:00004E7C _rdata          ends
.rdata:00004E7C
.rdata:00004E8C ; ===========================================================================
.rdata:00004E8C
.rdata:00004E8C ; Segment type: Pure data
.rdata:00004E8C ; Segment permissions: Read
.rdata:00004E8C _rdata          segment dword public 'DATA' use32
.rdata:00004E8C                 assume cs:_rdata
.rdata:00004E8C                 ;org 4E8Ch
.rdata:00004E8C ; COMDAT (pick any)
.rdata:00004E8C                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:00004E8C ; char `string'[]
.rdata:00004E8C ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:00004E8C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:00004E8C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:00004E8C _rdata          ends
.rdata:00004E8C
.rdata:00004EA4 ; ===========================================================================
.rdata:00004EA4
.rdata:00004EA4 ; Segment type: Pure data
.rdata:00004EA4 ; Segment permissions: Read
.rdata:00004EA4 _rdata          segment dword public 'DATA' use32
.rdata:00004EA4                 assume cs:_rdata
.rdata:00004EA4                 ;org 4EA4h
.rdata:00004EA4 ; COMDAT (pick any)
.rdata:00004EA4                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:00004EA4 ; wchar_t `string'
.rdata:00004EA4 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:00004EA4                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:00004EA4                                         ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+11o
.rdata:00004EA4                 unicode 0, <invalid null pointer>,0
.rdata:00004ECE                 align 10h
.rdata:00004ECE _rdata          ends
.rdata:00004ECE
.rdata$r:00004ED0 ; ===========================================================================
.rdata$r:00004ED0
.rdata$r:00004ED0 ; Segment type: Pure data
.rdata$r:00004ED0 ; Segment permissions: Read
.rdata$r:00004ED0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004ED0                 assume cs:_rdata$r
.rdata$r:00004ED0                 ;org 4ED0h
.rdata$r:00004ED0 ; COMDAT (pick any)
.rdata$r:00004ED0                 public ??_R4error_category@std@@6B@
.rdata$r:00004ED0 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:00004ED0 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:00004D18o
.rdata$r:00004ED1                 db    0
.rdata$r:00004ED2                 db    0
.rdata$r:00004ED3                 db    0
.rdata$r:00004ED4                 db    0
.rdata$r:00004ED5                 db    0
.rdata$r:00004ED6                 db    0
.rdata$r:00004ED7                 db    0
.rdata$r:00004ED8                 db    0
.rdata$r:00004ED9                 db    0
.rdata$r:00004EDA                 db    0
.rdata$r:00004EDB                 db    0
.rdata$r:00004EDC                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:00004EE0                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004EE0 _rdata$r        ends
.rdata$r:00004EE0
.data$r:00004EE4 ; ===========================================================================
.data$r:00004EE4
.data$r:00004EE4 ; Segment type: Pure data
.data$r:00004EE4 ; Segment permissions: Read/Write
.data$r:00004EE4 _data$r         segment dword public 'DATA' use32
.data$r:00004EE4                 assume cs:_data$r
.data$r:00004EE4                 ;org 4EE4h
.data$r:00004EE4 ; COMDAT (pick any)
.data$r:00004EE4                 public ??_R0?AVerror_category@std@@@8
.data$r:00004EE4 ; class std::error_category `RTTI Type Descriptor'
.data$r:00004EE4 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00004EE4                                         ; DATA XREF: .rdata$r:00004EDCo
.data$r:00004EE4                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00004EE4                                         ; const type_info::`vftable'
.data$r:00004EE8                 db    0
.data$r:00004EE9                 db    0
.data$r:00004EEA                 db    0
.data$r:00004EEB                 db    0
.data$r:00004EEC                 db  2Eh ; .
.data$r:00004EED                 db  3Fh ; ?
.data$r:00004EEE                 db  41h ; A
.data$r:00004EEF                 db  56h ; V
.data$r:00004EF0                 db  65h ; e
.data$r:00004EF1                 db  72h ; r
.data$r:00004EF2                 db  72h ; r
.data$r:00004EF3                 db  6Fh ; o
.data$r:00004EF4                 db  72h ; r
.data$r:00004EF5                 db  5Fh ; _
.data$r:00004EF6                 db  63h ; c
.data$r:00004EF7                 db  61h ; a
.data$r:00004EF8                 db  74h ; t
.data$r:00004EF9                 db  65h ; e
.data$r:00004EFA                 db  67h ; g
.data$r:00004EFB                 db  6Fh ; o
.data$r:00004EFC                 db  72h ; r
.data$r:00004EFD                 db  79h ; y
.data$r:00004EFE                 db  40h ; @
.data$r:00004EFF                 db  73h ; s
.data$r:00004F00                 db  74h ; t
.data$r:00004F01                 db  64h ; d
.data$r:00004F02                 db  40h ; @
.data$r:00004F03                 db  40h ; @
.data$r:00004F04                 db    0
.data$r:00004F05                 align 4
.data$r:00004F05 _data$r         ends
.data$r:00004F05
.rdata$r:00004F08 ; ===========================================================================
.rdata$r:00004F08
.rdata$r:00004F08 ; Segment type: Pure data
.rdata$r:00004F08 ; Segment permissions: Read
.rdata$r:00004F08 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004F08                 assume cs:_rdata$r
.rdata$r:00004F08                 ;org 4F08h
.rdata$r:00004F08 ; COMDAT (pick any)
.rdata$r:00004F08                 public ??_R3error_category@std@@8
.rdata$r:00004F08 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004F08 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:00004EE0o
.rdata$r:00004F08                                         ; .rdata$r:00004F38o
.rdata$r:00004F09                 db    0
.rdata$r:00004F0A                 db    0
.rdata$r:00004F0B                 db    0
.rdata$r:00004F0C                 db    0
.rdata$r:00004F0D                 db    0
.rdata$r:00004F0E                 db    0
.rdata$r:00004F0F                 db    0
.rdata$r:00004F10                 db    1
.rdata$r:00004F11                 db    0
.rdata$r:00004F12                 db    0
.rdata$r:00004F13                 db    0
.rdata$r:00004F14                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00004F14 _rdata$r        ends
.rdata$r:00004F14
.rdata$r:00004F18 ; ===========================================================================
.rdata$r:00004F18
.rdata$r:00004F18 ; Segment type: Pure data
.rdata$r:00004F18 ; Segment permissions: Read
.rdata$r:00004F18 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004F18                 assume cs:_rdata$r
.rdata$r:00004F18                 ;org 4F18h
.rdata$r:00004F18 ; COMDAT (pick any)
.rdata$r:00004F18                 public ??_R2error_category@std@@8
.rdata$r:00004F18 ; std::error_category::`RTTI Base Class Array'
.rdata$r:00004F18 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00004F18                                         ; DATA XREF: .rdata$r:00004F14o
.rdata$r:00004F18                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004F1C                 db    0
.rdata$r:00004F1D                 align 10h
.rdata$r:00004F1D _rdata$r        ends
.rdata$r:00004F1D
.rdata$r:00004F20 ; ===========================================================================
.rdata$r:00004F20
.rdata$r:00004F20 ; Segment type: Pure data
.rdata$r:00004F20 ; Segment permissions: Read
.rdata$r:00004F20 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004F20                 assume cs:_rdata$r
.rdata$r:00004F20                 ;org 4F20h
.rdata$r:00004F20 ; COMDAT (pick any)
.rdata$r:00004F20                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:00004F20 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004F20 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:00004F20                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:00004F20                                         ; .rdata$r:00004F90o ...
.rdata$r:00004F20                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:00004F24                 db    0
.rdata$r:00004F25                 db    0
.rdata$r:00004F26                 db    0
.rdata$r:00004F27                 db    0
.rdata$r:00004F28                 db    0
.rdata$r:00004F29                 db    0
.rdata$r:00004F2A                 db    0
.rdata$r:00004F2B                 db    0
.rdata$r:00004F2C                 db 0FFh
.rdata$r:00004F2D                 db 0FFh
.rdata$r:00004F2E                 db 0FFh
.rdata$r:00004F2F                 db 0FFh
.rdata$r:00004F30                 db    0
.rdata$r:00004F31                 db    0
.rdata$r:00004F32                 db    0
.rdata$r:00004F33                 db    0
.rdata$r:00004F34                 db  40h ; @
.rdata$r:00004F35                 db    0
.rdata$r:00004F36                 db    0
.rdata$r:00004F37                 db    0
.rdata$r:00004F38                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004F38 _rdata$r        ends
.rdata$r:00004F38
.rdata$r:00004F3C ; ===========================================================================
.rdata$r:00004F3C
.rdata$r:00004F3C ; Segment type: Pure data
.rdata$r:00004F3C ; Segment permissions: Read
.rdata$r:00004F3C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004F3C                 assume cs:_rdata$r
.rdata$r:00004F3C                 ;org 4F3Ch
.rdata$r:00004F3C ; COMDAT (pick any)
.rdata$r:00004F3C                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:00004F3C ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:00004F3C ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:00004F3C                                         ; DATA XREF: .rdata:00004D34o
.rdata$r:00004F3D                 db    0
.rdata$r:00004F3E                 db    0
.rdata$r:00004F3F                 db    0
.rdata$r:00004F40                 db    0
.rdata$r:00004F41                 db    0
.rdata$r:00004F42                 db    0
.rdata$r:00004F43                 db    0
.rdata$r:00004F44                 db    0
.rdata$r:00004F45                 db    0
.rdata$r:00004F46                 db    0
.rdata$r:00004F47                 db    0
.rdata$r:00004F48                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00004F4C                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004F4C _rdata$r        ends
.rdata$r:00004F4C
.data$r:00004F50 ; ===========================================================================
.data$r:00004F50
.data$r:00004F50 ; Segment type: Pure data
.data$r:00004F50 ; Segment permissions: Read/Write
.data$r:00004F50 _data$r         segment dword public 'DATA' use32
.data$r:00004F50                 assume cs:_data$r
.data$r:00004F50                 ;org 4F50h
.data$r:00004F50 ; COMDAT (pick any)
.data$r:00004F50                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:00004F50 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:00004F50 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00004F50                                         ; DATA XREF: .rdata$r:00004F48o
.data$r:00004F50                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00004F50                                         ; const type_info::`vftable'
.data$r:00004F54                 align 8
.data$r:00004F58 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:00004F7A                 align 4
.data$r:00004F7A _data$r         ends
.data$r:00004F7A
.rdata$r:00004F7C ; ===========================================================================
.rdata$r:00004F7C
.rdata$r:00004F7C ; Segment type: Pure data
.rdata$r:00004F7C ; Segment permissions: Read
.rdata$r:00004F7C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004F7C                 assume cs:_rdata$r
.rdata$r:00004F7C                 ;org 4F7Ch
.rdata$r:00004F7C ; COMDAT (pick any)
.rdata$r:00004F7C                 public ??_R3_Generic_error_category@std@@8
.rdata$r:00004F7C ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004F7C ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:00004F7C                                         ; DATA XREF: .rdata$r:00004F4Co
.rdata$r:00004F7C                                         ; .rdata$r:00004FB0o
.rdata$r:00004F7D                 db    0
.rdata$r:00004F7E                 db    0
.rdata$r:00004F7F                 db    0
.rdata$r:00004F80                 db    0
.rdata$r:00004F81                 db    0
.rdata$r:00004F82                 db    0
.rdata$r:00004F83                 db    0
.rdata$r:00004F84                 db    2
.rdata$r:00004F85                 db    0
.rdata$r:00004F86                 db    0
.rdata$r:00004F87                 db    0
.rdata$r:00004F88                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:00004F88 _rdata$r        ends
.rdata$r:00004F88
.rdata$r:00004F8C ; ===========================================================================
.rdata$r:00004F8C
.rdata$r:00004F8C ; Segment type: Pure data
.rdata$r:00004F8C ; Segment permissions: Read
.rdata$r:00004F8C _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004F8C                 assume cs:_rdata$r
.rdata$r:00004F8C                 ;org 4F8Ch
.rdata$r:00004F8C ; COMDAT (pick any)
.rdata$r:00004F8C                 public ??_R2_Generic_error_category@std@@8
.rdata$r:00004F8C ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:00004F8C ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:00004F8C                                         ; DATA XREF: .rdata$r:00004F88o
.rdata$r:00004F8C                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004F90                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00004F94                 db    0
.rdata$r:00004F95                 align 4
.rdata$r:00004F95 _rdata$r        ends
.rdata$r:00004F95
.rdata$r:00004F98 ; ===========================================================================
.rdata$r:00004F98
.rdata$r:00004F98 ; Segment type: Pure data
.rdata$r:00004F98 ; Segment permissions: Read
.rdata$r:00004F98 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004F98                 assume cs:_rdata$r
.rdata$r:00004F98                 ;org 4F98h
.rdata$r:00004F98 ; COMDAT (pick any)
.rdata$r:00004F98                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:00004F98 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00004F98 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:00004F98                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:00004F98                                         ; .rdata$r:00005008o ...
.rdata$r:00004F98                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:00004F9C                 db    1
.rdata$r:00004F9D                 db    0
.rdata$r:00004F9E                 db    0
.rdata$r:00004F9F                 db    0
.rdata$r:00004FA0                 db    0
.rdata$r:00004FA1                 db    0
.rdata$r:00004FA2                 db    0
.rdata$r:00004FA3                 db    0
.rdata$r:00004FA4                 db 0FFh
.rdata$r:00004FA5                 db 0FFh
.rdata$r:00004FA6                 db 0FFh
.rdata$r:00004FA7                 db 0FFh
.rdata$r:00004FA8                 db    0
.rdata$r:00004FA9                 db    0
.rdata$r:00004FAA                 db    0
.rdata$r:00004FAB                 db    0
.rdata$r:00004FAC                 db  40h ; @
.rdata$r:00004FAD                 db    0
.rdata$r:00004FAE                 db    0
.rdata$r:00004FAF                 db    0
.rdata$r:00004FB0                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004FB0 _rdata$r        ends
.rdata$r:00004FB0
.rdata$r:00004FB4 ; ===========================================================================
.rdata$r:00004FB4
.rdata$r:00004FB4 ; Segment type: Pure data
.rdata$r:00004FB4 ; Segment permissions: Read
.rdata$r:00004FB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004FB4                 assume cs:_rdata$r
.rdata$r:00004FB4                 ;org 4FB4h
.rdata$r:00004FB4 ; COMDAT (pick any)
.rdata$r:00004FB4                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:00004FB4 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:00004FB4 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:00004FB4                                         ; DATA XREF: .rdata:00004D68o
.rdata$r:00004FB5                 db    0
.rdata$r:00004FB6                 db    0
.rdata$r:00004FB7                 db    0
.rdata$r:00004FB8                 db    0
.rdata$r:00004FB9                 db    0
.rdata$r:00004FBA                 db    0
.rdata$r:00004FBB                 db    0
.rdata$r:00004FBC                 db    0
.rdata$r:00004FBD                 db    0
.rdata$r:00004FBE                 db    0
.rdata$r:00004FBF                 db    0
.rdata$r:00004FC0                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00004FC4                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004FC4 _rdata$r        ends
.rdata$r:00004FC4
.data$r:00004FC8 ; ===========================================================================
.data$r:00004FC8
.data$r:00004FC8 ; Segment type: Pure data
.data$r:00004FC8 ; Segment permissions: Read/Write
.data$r:00004FC8 _data$r         segment dword public 'DATA' use32
.data$r:00004FC8                 assume cs:_data$r
.data$r:00004FC8                 ;org 4FC8h
.data$r:00004FC8 ; COMDAT (pick any)
.data$r:00004FC8                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:00004FC8 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:00004FC8 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00004FC8                                         ; DATA XREF: .rdata$r:00004FC0o
.data$r:00004FC8                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00004FC8                                         ; const type_info::`vftable'
.data$r:00004FCC                 align 10h
.data$r:00004FD0 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:00004FF3                 align 4
.data$r:00004FF3 _data$r         ends
.data$r:00004FF3
.rdata$r:00004FF4 ; ===========================================================================
.rdata$r:00004FF4
.rdata$r:00004FF4 ; Segment type: Pure data
.rdata$r:00004FF4 ; Segment permissions: Read
.rdata$r:00004FF4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00004FF4                 assume cs:_rdata$r
.rdata$r:00004FF4                 ;org 4FF4h
.rdata$r:00004FF4 ; COMDAT (pick any)
.rdata$r:00004FF4                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:00004FF4 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00004FF4 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:00004FF4                                         ; DATA XREF: .rdata$r:00004FC4o
.rdata$r:00004FF4                                         ; .rdata$r:0000502Co
.rdata$r:00004FF5                 db    0
.rdata$r:00004FF6                 db    0
.rdata$r:00004FF7                 db    0
.rdata$r:00004FF8                 db    0
.rdata$r:00004FF9                 db    0
.rdata$r:00004FFA                 db    0
.rdata$r:00004FFB                 db    0
.rdata$r:00004FFC                 db    3
.rdata$r:00004FFD                 db    0
.rdata$r:00004FFE                 db    0
.rdata$r:00004FFF                 db    0
.rdata$r:00005000                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00005000 _rdata$r        ends
.rdata$r:00005000
.rdata$r:00005004 ; ===========================================================================
.rdata$r:00005004
.rdata$r:00005004 ; Segment type: Pure data
.rdata$r:00005004 ; Segment permissions: Read
.rdata$r:00005004 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005004                 assume cs:_rdata$r
.rdata$r:00005004                 ;org 5004h
.rdata$r:00005004 ; COMDAT (pick any)
.rdata$r:00005004                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:00005004 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:00005004 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00005004                                         ; DATA XREF: .rdata$r:00005000o
.rdata$r:00005004                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005008                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000500C                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005010                 db    0
.rdata$r:00005011                 align 4
.rdata$r:00005011 _rdata$r        ends
.rdata$r:00005011
.rdata$r:00005014 ; ===========================================================================
.rdata$r:00005014
.rdata$r:00005014 ; Segment type: Pure data
.rdata$r:00005014 ; Segment permissions: Read
.rdata$r:00005014 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005014                 assume cs:_rdata$r
.rdata$r:00005014                 ;org 5014h
.rdata$r:00005014 ; COMDAT (pick any)
.rdata$r:00005014                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:00005014 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005014 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:00005014                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:00005014                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:00005018                 db    2
.rdata$r:00005019                 db    0
.rdata$r:0000501A                 db    0
.rdata$r:0000501B                 db    0
.rdata$r:0000501C                 db    0
.rdata$r:0000501D                 db    0
.rdata$r:0000501E                 db    0
.rdata$r:0000501F                 db    0
.rdata$r:00005020                 db 0FFh
.rdata$r:00005021                 db 0FFh
.rdata$r:00005022                 db 0FFh
.rdata$r:00005023                 db 0FFh
.rdata$r:00005024                 db    0
.rdata$r:00005025                 db    0
.rdata$r:00005026                 db    0
.rdata$r:00005027                 db    0
.rdata$r:00005028                 db  40h ; @
.rdata$r:00005029                 db    0
.rdata$r:0000502A                 db    0
.rdata$r:0000502B                 db    0
.rdata$r:0000502C                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000502C _rdata$r        ends
.rdata$r:0000502C
.rdata$r:00005030 ; ===========================================================================
.rdata$r:00005030
.rdata$r:00005030 ; Segment type: Pure data
.rdata$r:00005030 ; Segment permissions: Read
.rdata$r:00005030 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005030                 assume cs:_rdata$r
.rdata$r:00005030                 ;org 5030h
.rdata$r:00005030 ; COMDAT (pick any)
.rdata$r:00005030                 public ??_R4_System_error_category@std@@6B@
.rdata$r:00005030 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:00005030 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:00004DA8o
.rdata$r:00005031                 db    0
.rdata$r:00005032                 db    0
.rdata$r:00005033                 db    0
.rdata$r:00005034                 db    0
.rdata$r:00005035                 db    0
.rdata$r:00005036                 db    0
.rdata$r:00005037                 db    0
.rdata$r:00005038                 db    0
.rdata$r:00005039                 db    0
.rdata$r:0000503A                 db    0
.rdata$r:0000503B                 db    0
.rdata$r:0000503C                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00005040                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005040 _rdata$r        ends
.rdata$r:00005040
.data$r:00005044 ; ===========================================================================
.data$r:00005044
.data$r:00005044 ; Segment type: Pure data
.data$r:00005044 ; Segment permissions: Read/Write
.data$r:00005044 _data$r         segment dword public 'DATA' use32
.data$r:00005044                 assume cs:_data$r
.data$r:00005044                 ;org 5044h
.data$r:00005044 ; COMDAT (pick any)
.data$r:00005044                 public ??_R0?AV_System_error_category@std@@@8
.data$r:00005044 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:00005044 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:00005044                                         ; DATA XREF: .rdata$r:0000503Co
.data$r:00005044                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:00005044                                         ; const type_info::`vftable'
.data$r:00005048                 db    0
.data$r:00005049                 db    0
.data$r:0000504A                 db    0
.data$r:0000504B                 db    0
.data$r:0000504C                 db  2Eh ; .
.data$r:0000504D                 db  3Fh ; ?
.data$r:0000504E                 db  41h ; A
.data$r:0000504F                 db  56h ; V
.data$r:00005050                 db  5Fh ; _
.data$r:00005051                 db  53h ; S
.data$r:00005052                 db  79h ; y
.data$r:00005053                 db  73h ; s
.data$r:00005054                 db  74h ; t
.data$r:00005055                 db  65h ; e
.data$r:00005056                 db  6Dh ; m
.data$r:00005057                 db  5Fh ; _
.data$r:00005058                 db  65h ; e
.data$r:00005059                 db  72h ; r
.data$r:0000505A                 db  72h ; r
.data$r:0000505B                 db  6Fh ; o
.data$r:0000505C                 db  72h ; r
.data$r:0000505D                 db  5Fh ; _
.data$r:0000505E                 db  63h ; c
.data$r:0000505F                 db  61h ; a
.data$r:00005060                 db  74h ; t
.data$r:00005061                 db  65h ; e
.data$r:00005062                 db  67h ; g
.data$r:00005063                 db  6Fh ; o
.data$r:00005064                 db  72h ; r
.data$r:00005065                 db  79h ; y
.data$r:00005066                 db  40h ; @
.data$r:00005067                 db  73h ; s
.data$r:00005068                 db  74h ; t
.data$r:00005069                 db  64h ; d
.data$r:0000506A                 db  40h ; @
.data$r:0000506B                 db  40h ; @
.data$r:0000506C                 db    0
.data$r:0000506D                 align 10h
.data$r:0000506D _data$r         ends
.data$r:0000506D
.rdata$r:00005070 ; ===========================================================================
.rdata$r:00005070
.rdata$r:00005070 ; Segment type: Pure data
.rdata$r:00005070 ; Segment permissions: Read
.rdata$r:00005070 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005070                 assume cs:_rdata$r
.rdata$r:00005070                 ;org 5070h
.rdata$r:00005070 ; COMDAT (pick any)
.rdata$r:00005070                 public ??_R3_System_error_category@std@@8
.rdata$r:00005070 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:00005070 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:00005040o
.rdata$r:00005070                                         ; .rdata$r:000050A8o
.rdata$r:00005071                 db    0
.rdata$r:00005072                 db    0
.rdata$r:00005073                 db    0
.rdata$r:00005074                 db    0
.rdata$r:00005075                 db    0
.rdata$r:00005076                 db    0
.rdata$r:00005077                 db    0
.rdata$r:00005078                 db    3
.rdata$r:00005079                 db    0
.rdata$r:0000507A                 db    0
.rdata$r:0000507B                 db    0
.rdata$r:0000507C                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000507C _rdata$r        ends
.rdata$r:0000507C
.rdata$r:00005080 ; ===========================================================================
.rdata$r:00005080
.rdata$r:00005080 ; Segment type: Pure data
.rdata$r:00005080 ; Segment permissions: Read
.rdata$r:00005080 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005080                 assume cs:_rdata$r
.rdata$r:00005080                 ;org 5080h
.rdata$r:00005080 ; COMDAT (pick any)
.rdata$r:00005080                 public ??_R2_System_error_category@std@@8
.rdata$r:00005080 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:00005080 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00005080                                         ; DATA XREF: .rdata$r:0000507Co
.rdata$r:00005080                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005084                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00005088                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000508C                 db    0
.rdata$r:0000508D                 align 10h
.rdata$r:0000508D _rdata$r        ends
.rdata$r:0000508D
.rdata$r:00005090 ; ===========================================================================
.rdata$r:00005090
.rdata$r:00005090 ; Segment type: Pure data
.rdata$r:00005090 ; Segment permissions: Read
.rdata$r:00005090 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00005090                 assume cs:_rdata$r
.rdata$r:00005090                 ;org 5090h
.rdata$r:00005090 ; COMDAT (pick any)
.rdata$r:00005090                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:00005090 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00005090 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:00005090                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:00005090                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:00005094                 db    2
.rdata$r:00005095                 db    0
.rdata$r:00005096                 db    0
.rdata$r:00005097                 db    0
.rdata$r:00005098                 db    0
.rdata$r:00005099                 db    0
.rdata$r:0000509A                 db    0
.rdata$r:0000509B                 db    0
.rdata$r:0000509C                 db 0FFh
.rdata$r:0000509D                 db 0FFh
.rdata$r:0000509E                 db 0FFh
.rdata$r:0000509F                 db 0FFh
.rdata$r:000050A0                 db    0
.rdata$r:000050A1                 db    0
.rdata$r:000050A2                 db    0
.rdata$r:000050A3                 db    0
.rdata$r:000050A4                 db  40h ; @
.rdata$r:000050A5                 db    0
.rdata$r:000050A6                 db    0
.rdata$r:000050A7                 db    0
.rdata$r:000050A8                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:000050A8 _rdata$r        ends
.rdata$r:000050A8
.CRT$XCU:000050AC ; ===========================================================================
.CRT$XCU:000050AC
.CRT$XCU:000050AC ; Segment type: Pure data
.CRT$XCU:000050AC ; Segment permissions: Read
.CRT$XCU:000050AC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000050AC                 assume cs:_CRT$XCU
.CRT$XCU:000050AC                 ;org 50ACh
.CRT$XCU:000050AC _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:000050B0 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:000050B0 _CRT$XCU        ends
.CRT$XCU:000050B0
.CRT$XCU:000050B4 ; ===========================================================================
.CRT$XCU:000050B4
.CRT$XCU:000050B4 ; Segment type: Pure data
.CRT$XCU:000050B4 ; Segment permissions: Read
.CRT$XCU:000050B4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000050B4                 assume cs:_CRT$XCU
.CRT$XCU:000050B4                 ;org 50B4h
.CRT$XCU:000050B4 ; COMDAT (pick associative to section at 4DCC)
.CRT$XCU:000050B4 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:000050B4 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:000050B4 _CRT$XCU        ends
.CRT$XCU:000050B4
.CRT$XCU:000050B8 ; ===========================================================================
.CRT$XCU:000050B8
.CRT$XCU:000050B8 ; Segment type: Pure data
.CRT$XCU:000050B8 ; Segment permissions: Read
.CRT$XCU:000050B8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000050B8                 assume cs:_CRT$XCU
.CRT$XCU:000050B8                 ;org 50B8h
.CRT$XCU:000050B8 ; COMDAT (pick associative to section at 4DD0)
.CRT$XCU:000050B8 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:000050B8 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:000050B8 _CRT$XCU        ends
.CRT$XCU:000050B8
.CRT$XCU:000050BC ; ===========================================================================
.CRT$XCU:000050BC
.CRT$XCU:000050BC ; Segment type: Pure data
.CRT$XCU:000050BC ; Segment permissions: Read
.CRT$XCU:000050BC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000050BC                 assume cs:_CRT$XCU
.CRT$XCU:000050BC                 ;org 50BCh
.CRT$XCU:000050BC ; COMDAT (pick associative to section at 4DD4)
.CRT$XCU:000050BC ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:000050BC ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:000050BC _CRT$XCU        ends
.CRT$XCU:000050BC
.CRT$XCU:000050C0 ; ===========================================================================
.CRT$XCU:000050C0
.CRT$XCU:000050C0 ; Segment type: Pure data
.CRT$XCU:000050C0 ; Segment permissions: Read
.CRT$XCU:000050C0 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000050C0                 assume cs:_CRT$XCU
.CRT$XCU:000050C0                 ;org 50C0h
.CRT$XCU:000050C0 ; COMDAT (pick associative to section at 4DDC)
.CRT$XCU:000050C0 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:000050C0 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:000050C0 _CRT$XCU        ends
.CRT$XCU:000050C0
.CRT$XCU:000050C4 ; ===========================================================================
.CRT$XCU:000050C4
.CRT$XCU:000050C4 ; Segment type: Pure data
.CRT$XCU:000050C4 ; Segment permissions: Read
.CRT$XCU:000050C4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000050C4                 assume cs:_CRT$XCU
.CRT$XCU:000050C4                 ;org 50C4h
.CRT$XCU:000050C4 ; COMDAT (pick associative to section at 4DE0)
.CRT$XCU:000050C4 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:000050C4 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:000050C4 _CRT$XCU        ends
.CRT$XCU:000050C4
.CRT$XCU:000050C8 ; ===========================================================================
.CRT$XCU:000050C8
.CRT$XCU:000050C8 ; Segment type: Pure data
.CRT$XCU:000050C8 ; Segment permissions: Read
.CRT$XCU:000050C8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000050C8                 assume cs:_CRT$XCU
.CRT$XCU:000050C8                 ;org 50C8h
.CRT$XCU:000050C8 ; COMDAT (pick associative to section at 4E74)
.CRT$XCU:000050C8 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:000050C8 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:000050C8 _CRT$XCU        ends
.CRT$XCU:000050C8
.CRT$XCU:000050CC ; ===========================================================================
.CRT$XCU:000050CC
.CRT$XCU:000050CC ; Segment type: Pure data
.CRT$XCU:000050CC ; Segment permissions: Read
.CRT$XCU:000050CC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:000050CC                 assume cs:_CRT$XCU
.CRT$XCU:000050CC                 ;org 50CCh
.CRT$XCU:000050CC ; COMDAT (pick associative to section at 4E78)
.CRT$XCU:000050CC ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:000050CC ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:000050CC _CRT$XCU        ends
.CRT$XCU:000050CC
UNDEF:000050D0 ; ===========================================================================
UNDEF:000050D0
UNDEF:000050D0 ; Segment type: Externs
UNDEF:000050D0 ; UNDEF
UNDEF:000050D0                 extrn __purecall:near   ; DATA XREF: .rdata:00004D20o
UNDEF:000050D0                                         ; .rdata:00004D24o
UNDEF:000050D4 ; void *__cdecl operator new(unsigned int)
UNDEF:000050D4                 extrn ??2@YAPAXI@Z:near ; CODE XREF: std::_Allocate<char>(uint,char *)+1Dp
UNDEF:000050D4                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+23p ...
UNDEF:000050D8 ; void __cdecl operator delete(void *)
UNDEF:000050D8                 extrn ??3@YAXPAX@Z:near ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+1Bp
UNDEF:000050D8                                         ; std::_Iostream_error_category::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:000050DC ; int __cdecl atexit(void (__cdecl *)())
UNDEF:000050DC                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:000050DC                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:000050E0                 extrn ___report_rangecheckfailure:near
UNDEF:000050E0                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long):loc_1316p
UNDEF:000050E4 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:000050E4                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:000050E4                                         ; CODE XREF: std::_Container_base12::_Orphan_all(void)+35p
UNDEF:000050E8 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:000050E8                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:000050E8                                         ; CODE XREF: std::_Container_base12::_Orphan_all(void)+86p
UNDEF:000050E8                                         ; __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0+3j
UNDEF:000050EC                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:000050F0 ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:000050F0                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:000050F4 ; int __cdecl wcsicmp(const wchar_t *Str1, const wchar_t *Str2)
UNDEF:000050F4                 extrn _wcsicmp:near     ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+3BCp
UNDEF:000050F4                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+624p
UNDEF:000050F8 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:000050F8                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:000050F8                                         ; _wmemmove+11p
UNDEF:000050FC ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:000050FC                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:000050FC                                         ; _wmemcpy+11p
UNDEF:00005100 ; size_t __cdecl strlen(const char *Str)
UNDEF:00005100                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:00005104 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:00005104                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:00005104                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:00005104                                         ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+16p
UNDEF:00005108 ; void __cdecl std::_Xbad_alloc()
UNDEF:00005108                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:00005108                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_1E22p
UNDEF:00005108                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *):loc_1E64p ...
UNDEF:0000510C ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000510C                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000510C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000510C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp
UNDEF:00005110 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:00005110                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:00005110                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:00005110                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:00005114 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:00005114                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00005114                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:00005118 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:00005118                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:00005118                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:00005118                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000511C ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000511C                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000511C                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:00005120 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00005120                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00005120                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:00005124 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00005124                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00005124                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:00005128 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:00005128                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:00005128                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000512C ; DWORD __stdcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
UNDEF:0000512C                 extrn __imp__GetModuleFileNameW@12:near
UNDEF:0000512C                                         ; CODE XREF: RegExtDlg::writeNppPath(void)+10Dp
UNDEF:0000512C                                         ; RegExtDlg::writeNppPath(void)+20Bp
UNDEF:0000512C                                         ; DATA XREF: ...
UNDEF:00005130 ; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
UNDEF:00005130                 extrn __imp__GlobalFree@4:near
UNDEF:00005130                                         ; CODE XREF: RegExtDlg::doDialog(bool)+51p
UNDEF:00005130                                         ; DATA XREF: RegExtDlg::doDialog(bool)+51r
UNDEF:00005134 ; int __stdcall lstrcmpW(LPCWSTR lpString1, LPCWSTR lpString2)
UNDEF:00005134                 extrn __imp__lstrcmpW@8:near
UNDEF:00005134                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+76Cp
UNDEF:00005134                                         ; RegExtDlg::getRegisteredExts(void)+125p
UNDEF:00005134                                         ; DATA XREF: ...
UNDEF:00005138 ; LPWSTR __stdcall lstrcatW(LPWSTR lpString1, LPCWSTR lpString2)
UNDEF:00005138                 extrn __imp__lstrcatW@8:near
UNDEF:00005138                                         ; CODE XREF: RegExtDlg::deleteExts(wchar_t const *)+99p
UNDEF:00005138                                         ; RegExtDlg::writeNppPath(void)+148p ...
UNDEF:0000513C ; int __stdcall lstrlenW(LPCWSTR lpString)
UNDEF:0000513C                 extrn __imp__lstrlenW@4:near
UNDEF:0000513C                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+475p
UNDEF:0000513C                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+529p ...
UNDEF:00005140 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:00005140                 extrn __imp__ShowWindow@8:near
UNDEF:00005140                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+645p
UNDEF:00005140                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+660p ...
UNDEF:00005144 ; INT_PTR __stdcall DialogBoxParamW(HINSTANCE hInstance, LPCWSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
UNDEF:00005144                 extrn __imp__DialogBoxParamW@20:near
UNDEF:00005144                                         ; CODE XREF: RegExtDlg::doDialog(bool)+75p
UNDEF:00005144                                         ; DATA XREF: RegExtDlg::doDialog(bool)+75r
UNDEF:00005148 ; INT_PTR __stdcall DialogBoxIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
UNDEF:00005148                 extrn __imp__DialogBoxIndirectParamW@20:near
UNDEF:00005148                                         ; CODE XREF: RegExtDlg::doDialog(bool)+47p
UNDEF:00005148                                         ; DATA XREF: RegExtDlg::doDialog(bool)+47r
UNDEF:0000514C ; BOOL __stdcall EndDialog(HWND hDlg, INT_PTR nResult)
UNDEF:0000514C                 extrn __imp__EndDialog@8:near
UNDEF:0000514C                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+404p
UNDEF:0000514C                                         ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+404r
UNDEF:00005150 ; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
UNDEF:00005150                 extrn __imp__GetDlgItem@8:near
UNDEF:00005150                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+68p
UNDEF:00005150                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+83p ...
UNDEF:00005154 ; LRESULT __stdcall SendDlgItemMessageW(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:00005154                 extrn __imp__SendDlgItemMessageW@20:near
UNDEF:00005154                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+A5p
UNDEF:00005154                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+183p ...
UNDEF:00005158 ; BOOL __stdcall EnableWindow(HWND hWnd, BOOL bEnable)
UNDEF:00005158                 extrn __imp__EnableWindow@8:near
UNDEF:00005158                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+6Fp
UNDEF:00005158                                         ; RegExtDlg::run_dlgProc(uint,uint,long)+8Ap ...
UNDEF:0000515C ; BOOL __stdcall DrawIcon(HDC hDC, int X, int Y, HICON hIcon)
UNDEF:0000515C                 extrn __imp__DrawIcon@16:near
UNDEF:0000515C                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+EBp
UNDEF:0000515C                                         ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+EBr
UNDEF:00005160 ; HICON __stdcall LoadIconW(HINSTANCE hInstance, LPCWSTR lpIconName)
UNDEF:00005160                 extrn __imp__LoadIconW@8:near
UNDEF:00005160                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+C1p
UNDEF:00005160                                         ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+C1r
UNDEF:00005164 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
UNDEF:00005164                 extrn __imp__RegCloseKey@4:near
UNDEF:00005164                                         ; CODE XREF: RegExtDlg::getRegisteredExts(void)+156p
UNDEF:00005164                                         ; RegExtDlg::addExt(wchar_t *)+F4p ...
UNDEF:00005168 ; LSTATUS __stdcall RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult, LPDWORD lpdwDisposition)
UNDEF:00005168                 extrn __imp__RegCreateKeyExW@36:near
UNDEF:00005168                                         ; CODE XREF: RegExtDlg::addExt(wchar_t *)+3Dp
UNDEF:00005168                                         ; RegExtDlg::writeNppPath(void)+85p ...
UNDEF:0000516C ; LSTATUS __stdcall RegDeleteKeyW(HKEY hKey, LPCWSTR lpSubKey)
UNDEF:0000516C                 extrn __imp__RegDeleteKeyW@8:near
UNDEF:0000516C                                         ; CODE XREF: RegExtDlg::deleteExts(wchar_t const *)+A8p
UNDEF:0000516C                                         ; DATA XREF: RegExtDlg::deleteExts(wchar_t const *)+A8r
UNDEF:00005170 ; LSTATUS __stdcall RegDeleteValueW(HKEY hKey, LPCWSTR lpValueName)
UNDEF:00005170                 extrn __imp__RegDeleteValueW@8:near
UNDEF:00005170                                         ; CODE XREF: RegExtDlg::deleteExts(wchar_t const *)+129p
UNDEF:00005170                                         ; RegExtDlg::deleteExts(wchar_t const *)+13Ap
UNDEF:00005170                                         ; DATA XREF: ...
UNDEF:00005174 ; LSTATUS __stdcall RegEnumKeyExW(HKEY hKey, DWORD dwIndex, LPWSTR lpName, LPDWORD lpcchName, LPDWORD lpReserved, LPWSTR lpClass, LPDWORD lpcchClass, PFILETIME lpftLastWriteTime)
UNDEF:00005174                 extrn __imp__RegEnumKeyExW@32:near
UNDEF:00005174                                         ; CODE XREF: RegExtDlg::getRegisteredExts(void)+85p
UNDEF:00005174                                         ; DATA XREF: RegExtDlg::getRegisteredExts(void)+85r
UNDEF:00005178 ; LSTATUS __stdcall RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
UNDEF:00005178                 extrn __imp__RegOpenKeyExW@20:near
UNDEF:00005178                                         ; CODE XREF: RegExtDlg::getRegisteredExts(void)+DFp
UNDEF:00005178                                         ; RegExtDlg::deleteExts(wchar_t const *)+30p ...
UNDEF:0000517C ; LSTATUS __stdcall RegQueryInfoKeyW(HKEY hKey, LPWSTR lpClass, LPDWORD lpcchClass, LPDWORD lpReserved, LPDWORD lpcSubKeys, LPDWORD lpcbMaxSubKeyLen, LPDWORD lpcbMaxClassLen, LPDWORD lpcValues, LPDWORD lpcbMaxValueNameLen, LPDWORD lpcbMaxValueLen, LPDWORD lpcbSecurityDescriptor, PFILETIME lpftLastWriteTime)
UNDEF:0000517C                 extrn __imp__RegQueryInfoKeyW@48:near
UNDEF:0000517C                                         ; CODE XREF: RegExtDlg::getNbSubKey(HKEY__ *)+25p
UNDEF:0000517C                                         ; RegExtDlg::getNbSubValue(HKEY__ *)+25p
UNDEF:0000517C                                         ; DATA XREF: ...
UNDEF:00005180 ; LSTATUS __stdcall RegQueryValueExW(HKEY hKey, LPCWSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
UNDEF:00005180                 extrn __imp__RegQueryValueExW@24:near
UNDEF:00005180                                         ; CODE XREF: RegExtDlg::getRegisteredExts(void)+108p
UNDEF:00005180                                         ; RegExtDlg::addExt(wchar_t *)+87p ...
UNDEF:00005184 ; LSTATUS __stdcall RegSetValueExW(HKEY hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData)
UNDEF:00005184                 extrn __imp__RegSetValueExW@24:near
UNDEF:00005184                                         ; CODE XREF: RegExtDlg::addExt(wchar_t *)+BCp
UNDEF:00005184                                         ; RegExtDlg::addExt(wchar_t *)+E7p ...
UNDEF:00005188 ; INT_PTR __stdcall StaticDialog::dlgProc(HWND, UINT, WPARAM, LPARAM)
UNDEF:00005188                 extrn ?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z:near
UNDEF:00005188                                         ; DATA XREF: RegExtDlg::doDialog(bool)+30o
UNDEF:00005188                                         ; RegExtDlg::doDialog(bool)+5Do
UNDEF:0000518C ; void *__thiscall StaticDialog::makeRTLResource(StaticDialog *__hidden this, int, struct DLGTEMPLATE **)
UNDEF:0000518C                 extrn ?makeRTLResource@StaticDialog@@IAEPAXHPAPAUDLGTEMPLATE@@@Z:near
UNDEF:0000518C                                         ; CODE XREF: RegExtDlg::doDialog(bool)+24p
UNDEF:00005190 ; __fastcall __security_check_cookie(x)
UNDEF:00005190                 extrn @__security_check_cookie@4:near
UNDEF:00005190                                         ; CODE XREF: RegExtDlg::run_dlgProc(uint,uint,long)+883p
UNDEF:00005190                                         ; RegExtDlg::getRegisteredExts(void)+166p ...
UNDEF:00005194 ; __stdcall _CxxThrowException(x, x)
UNDEF:00005194                 extrn __CxxThrowException@8:near
UNDEF:00005194                                         ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p
UNDEF:00005194                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1+10p
UNDEF:00005198                 extrn ___CxxFrameHandler3:near
UNDEF:00005198                                         ; CODE XREF: __ehhandler$?writeNppPath@RegExtDlg@@AAEXXZ+23j
UNDEF:00005198                                         ; __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+16j ...
UNDEF:0000519C ; void *__cdecl memset(void *Dst, int Val, size_t Size)
UNDEF:0000519C                 extrn _memset:near      ; CODE XREF: RegExtDlg::deleteExts(wchar_t const *)+89p
UNDEF:0000519C                                         ; RegExtDlg::writeNppPath(void)+12Dp ...
UNDEF:000051A0 ; const type_info::`vftable'
UNDEF:000051A0                 extrn ??_7type_info@@6B@:near
UNDEF:000051A0                                         ; DATA XREF: .data$r:std::error_category `RTTI Type Descriptor'o
UNDEF:000051A0                                         ; .data$r:std::_Generic_error_category `RTTI Type Descriptor'o ...
UNDEF:000051A4                 extrn ___security_cookie:near
UNDEF:000051A4                                         ; DATA XREF: RegExtDlg::run_dlgProc(uint,uint,long)+9r
UNDEF:000051A4                                         ; RegExtDlg::getRegisteredExts(void)+9r ...
UNDEF:000051A8                 extrn __fltused:near
UNDEF:000051A8
UNDEF:000051A8
UNDEF:000051A8                 end