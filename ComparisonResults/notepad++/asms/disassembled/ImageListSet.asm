.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : FA577957068119AD63D7D8055463D26A
.rdata:00000000 ; Input CRC32 : FFE6E338
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\ImageListSet.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; char _SG89599[]
.rdata:00000000 $SG89599        db 'IconList::create : ImageList_Create() function return null',0
.rdata:00000000                                         ; DATA XREF: IconList::create(HINSTANCE__ *,int)+42o
.rdata:0000003B                 align 4
.rdata:0000003C ; char _SG89626[]
.rdata:0000003C $SG89626        db 'IconList::addIcon : LoadIcon() function return null',0
.rdata:0000003C                                         ; DATA XREF: IconList::addIcon(int)+24o
.rdata:0000003C _rdata          ends
.rdata:0000003C
.text$mn:00000070 ; ===========================================================================
.text$mn:00000070
.text$mn:00000070 ; Segment type: Pure code
.text$mn:00000070 ; Segment permissions: Read/Execute
.text$mn:00000070 _text$mn        segment para public 'CODE' use32
.text$mn:00000070                 assume cs:_text$mn
.text$mn:00000070                 ;org 70h
.text$mn:00000070                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000070
.text$mn:00000070 ; =============== S U B R O U T I N E =======================================
.text$mn:00000070
.text$mn:00000070 ; Attributes: bp-based frame
.text$mn:00000070
.text$mn:00000070 ; void __thiscall IconList::create(IconList *this, HINSTANCE, int)
.text$mn:00000070                 public ?create@IconList@@QAEXPAUHINSTANCE__@@H@Z
.text$mn:00000070 ?create@IconList@@QAEXPAUHINSTANCE__@@H@Z proc near
.text$mn:00000070                                         ; CODE XREF: IconList::create(int,HINSTANCE__ *,int *,int)+14p
.text$mn:00000070                                         ; ToolBarIcons::create(HINSTANCE__ *,int)+50p ...
.text$mn:00000070
.text$mn:00000070 var_10          = byte ptr -10h
.text$mn:00000070 var_4           = dword ptr -4
.text$mn:00000070 arg_0           = dword ptr  8
.text$mn:00000070 cy              = dword ptr  0Ch
.text$mn:00000070
.text$mn:00000070                 push    ebp
.text$mn:00000071                 mov     ebp, esp
.text$mn:00000073                 sub     esp, 10h
.text$mn:00000076                 mov     [ebp+var_4], ecx
.text$mn:00000079                 call    dword ptr ds:__imp__InitCommonControls@0 ; InitCommonControls()
.text$mn:0000007F                 mov     eax, [ebp+var_4]
.text$mn:00000082                 mov     ecx, [ebp+arg_0]
.text$mn:00000085                 mov     [eax+4], ecx
.text$mn:00000088                 mov     edx, [ebp+var_4]
.text$mn:0000008B                 mov     eax, [ebp+cy]
.text$mn:0000008E                 mov     [edx+10h], eax
.text$mn:00000091                 push    2Dh ; '-'       ; cGrow
.text$mn:00000093                 push    0               ; cInitial
.text$mn:00000095                 push    21h ; '!'       ; flags
.text$mn:00000097                 mov     ecx, [ebp+cy]
.text$mn:0000009A                 push    ecx             ; cy
.text$mn:0000009B                 mov     edx, [ebp+cy]
.text$mn:0000009E                 push    edx             ; cx
.text$mn:0000009F                 call    dword ptr ds:__imp__ImageList_Create@20 ; ImageList_Create(x,x,x,x,x)
.text$mn:000000A5                 mov     ecx, [ebp+var_4]
.text$mn:000000A8                 mov     [ecx], eax
.text$mn:000000AA                 mov     edx, [ebp+var_4]
.text$mn:000000AD                 cmp     dword ptr [edx], 0
.text$mn:000000B0                 jnz     short loc_CD
.text$mn:000000B2                 push    offset $SG89599 ; "IconList::create : ImageList_Create() f"...
.text$mn:000000B7                 lea     ecx, [ebp+var_10] ; this
.text$mn:000000BA                 call    ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error(char const *)
.text$mn:000000BF                 push    offset __TI2?AVruntime_error@std@@
.text$mn:000000C4                 lea     eax, [ebp+var_10]
.text$mn:000000C7                 push    eax
.text$mn:000000C8                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000000CD ; ---------------------------------------------------------------------------
.text$mn:000000CD
.text$mn:000000CD loc_CD:                                 ; CODE XREF: IconList::create(HINSTANCE__ *,int)+40j
.text$mn:000000CD                 mov     esp, ebp
.text$mn:000000CF                 pop     ebp
.text$mn:000000D0                 retn    8
.text$mn:000000D0 ?create@IconList@@QAEXPAUHINSTANCE__@@H@Z endp
.text$mn:000000D0
.text$mn:000000D0 ; ---------------------------------------------------------------------------
.text$mn:000000D3                 align 10h
.text$mn:000000E0
.text$mn:000000E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000000E0
.text$mn:000000E0 ; Attributes: bp-based frame
.text$mn:000000E0
.text$mn:000000E0 ; void __thiscall IconList::create(IconList *this, int, HINSTANCE, int *, int)
.text$mn:000000E0                 public ?create@IconList@@QAEXHPAUHINSTANCE__@@PAHH@Z
.text$mn:000000E0 ?create@IconList@@QAEXHPAUHINSTANCE__@@PAHH@Z proc near
.text$mn:000000E0
.text$mn:000000E0 var_8           = dword ptr -8
.text$mn:000000E0 var_4           = dword ptr -4
.text$mn:000000E0 arg_0           = dword ptr  8
.text$mn:000000E0 arg_4           = dword ptr  0Ch
.text$mn:000000E0 arg_8           = dword ptr  10h
.text$mn:000000E0 arg_C           = dword ptr  14h
.text$mn:000000E0
.text$mn:000000E0                 push    ebp
.text$mn:000000E1                 mov     ebp, esp
.text$mn:000000E3                 sub     esp, 8
.text$mn:000000E6                 mov     [ebp+var_8], ecx
.text$mn:000000E9                 mov     eax, [ebp+arg_0]
.text$mn:000000EC                 push    eax             ; int
.text$mn:000000ED                 mov     ecx, [ebp+arg_4]
.text$mn:000000F0                 push    ecx             ; HINSTANCE
.text$mn:000000F1                 mov     ecx, [ebp+var_8] ; this
.text$mn:000000F4                 call    ?create@IconList@@QAEXPAUHINSTANCE__@@H@Z ; IconList::create(HINSTANCE__ *,int)
.text$mn:000000F9                 mov     edx, [ebp+var_8]
.text$mn:000000FC                 mov     eax, [ebp+arg_8]
.text$mn:000000FF                 mov     [edx+8], eax
.text$mn:00000102                 mov     ecx, [ebp+var_8]
.text$mn:00000105                 mov     edx, [ebp+arg_C]
.text$mn:00000108                 mov     [ecx+0Ch], edx
.text$mn:0000010B                 mov     [ebp+var_4], 0
.text$mn:00000112                 jmp     short loc_11D
.text$mn:00000114 ; ---------------------------------------------------------------------------
.text$mn:00000114
.text$mn:00000114 loc_114:                                ; CODE XREF: IconList::create(int,HINSTANCE__ *,int *,int)+57j
.text$mn:00000114                 mov     eax, [ebp+var_4]
.text$mn:00000117                 add     eax, 1
.text$mn:0000011A                 mov     [ebp+var_4], eax
.text$mn:0000011D
.text$mn:0000011D loc_11D:                                ; CODE XREF: IconList::create(int,HINSTANCE__ *,int *,int)+32j
.text$mn:0000011D                 mov     ecx, [ebp+var_4]
.text$mn:00000120                 cmp     ecx, [ebp+arg_C]
.text$mn:00000123                 jge     short loc_139
.text$mn:00000125                 mov     edx, [ebp+var_4]
.text$mn:00000128                 mov     eax, [ebp+arg_8]
.text$mn:0000012B                 mov     ecx, [eax+edx*4]
.text$mn:0000012E                 push    ecx             ; int
.text$mn:0000012F                 mov     ecx, [ebp+var_8] ; this
.text$mn:00000132                 call    ?addIcon@IconList@@QBEXH@Z ; IconList::addIcon(int)
.text$mn:00000137                 jmp     short loc_114
.text$mn:00000139 ; ---------------------------------------------------------------------------
.text$mn:00000139
.text$mn:00000139 loc_139:                                ; CODE XREF: IconList::create(int,HINSTANCE__ *,int *,int)+43j
.text$mn:00000139                 mov     esp, ebp
.text$mn:0000013B                 pop     ebp
.text$mn:0000013C                 retn    10h
.text$mn:0000013C ?create@IconList@@QAEXHPAUHINSTANCE__@@PAHH@Z endp
.text$mn:0000013C
.text$mn:0000013C ; ---------------------------------------------------------------------------
.text$mn:0000013F                 align 10h
.text$mn:00000140
.text$mn:00000140 ; =============== S U B R O U T I N E =======================================
.text$mn:00000140
.text$mn:00000140 ; Attributes: bp-based frame
.text$mn:00000140
.text$mn:00000140 ; void __thiscall IconList::addIcon(IconList *this, int)
.text$mn:00000140                 public ?addIcon@IconList@@QBEXH@Z
.text$mn:00000140 ?addIcon@IconList@@QBEXH@Z proc near    ; CODE XREF: IconList::create(int,HINSTANCE__ *,int *,int)+52p
.text$mn:00000140                                         ; IconList::setIconSize(int)+4Ap ...
.text$mn:00000140
.text$mn:00000140 var_14          = byte ptr -14h
.text$mn:00000140 var_8           = dword ptr -8
.text$mn:00000140 hicon           = dword ptr -4
.text$mn:00000140 arg_0           = dword ptr  8
.text$mn:00000140
.text$mn:00000140                 push    ebp
.text$mn:00000141                 mov     ebp, esp
.text$mn:00000143                 sub     esp, 14h
.text$mn:00000146                 mov     [ebp+var_8], ecx
.text$mn:00000149                 movzx   eax, word ptr [ebp+arg_0]
.text$mn:0000014D                 push    eax             ; lpIconName
.text$mn:0000014E                 mov     ecx, [ebp+var_8]
.text$mn:00000151                 mov     edx, [ecx+4]
.text$mn:00000154                 push    edx             ; hInstance
.text$mn:00000155                 call    dword ptr ds:__imp__LoadIconW@8 ; LoadIconW(x,x)
.text$mn:0000015B                 mov     [ebp+hicon], eax
.text$mn:0000015E                 cmp     [ebp+hicon], 0
.text$mn:00000162                 jnz     short loc_17F
.text$mn:00000164                 push    offset $SG89626 ; "IconList::addIcon : LoadIcon() function"...
.text$mn:00000169                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000016C                 call    ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error(char const *)
.text$mn:00000171                 push    offset __TI2?AVruntime_error@std@@
.text$mn:00000176                 lea     eax, [ebp+var_14]
.text$mn:00000179                 push    eax
.text$mn:0000017A                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000017F ; ---------------------------------------------------------------------------
.text$mn:0000017F
.text$mn:0000017F loc_17F:                                ; CODE XREF: IconList::addIcon(int)+22j
.text$mn:0000017F                 mov     ecx, [ebp+hicon]
.text$mn:00000182                 push    ecx             ; hicon
.text$mn:00000183                 push    0FFFFFFFFh      ; i
.text$mn:00000185                 mov     edx, [ebp+var_8]
.text$mn:00000188                 mov     eax, [edx]
.text$mn:0000018A                 push    eax             ; himl
.text$mn:0000018B                 call    dword ptr ds:__imp__ImageList_ReplaceIcon@12 ; ImageList_ReplaceIcon(x,x,x)
.text$mn:00000191                 mov     ecx, [ebp+hicon]
.text$mn:00000194                 push    ecx             ; hIcon
.text$mn:00000195                 call    dword ptr ds:__imp__DestroyIcon@4 ; DestroyIcon(x)
.text$mn:0000019B                 mov     esp, ebp
.text$mn:0000019D                 pop     ebp
.text$mn:0000019E                 retn    4
.text$mn:0000019E ?addIcon@IconList@@QBEXH@Z endp
.text$mn:0000019E
.text$mn:0000019E ; ---------------------------------------------------------------------------
.text$mn:000001A1                 align 10h
.text$mn:000001B0
.text$mn:000001B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000001B0
.text$mn:000001B0 ; Attributes: bp-based frame
.text$mn:000001B0
.text$mn:000001B0 ; bool __thiscall IconList::changeIcon(IconList *this, int i, const wchar_t *)
.text$mn:000001B0                 public ?changeIcon@IconList@@QBE_NHPB_W@Z
.text$mn:000001B0 ?changeIcon@IconList@@QBE_NHPB_W@Z proc near
.text$mn:000001B0
.text$mn:000001B0 var_10          = dword ptr -10h
.text$mn:000001B0 var_C           = dword ptr -0Ch
.text$mn:000001B0 hicon           = dword ptr -8
.text$mn:000001B0 var_4           = dword ptr -4
.text$mn:000001B0 i               = dword ptr  8
.text$mn:000001B0 name            = dword ptr  0Ch
.text$mn:000001B0
.text$mn:000001B0                 push    ebp
.text$mn:000001B1                 mov     ebp, esp
.text$mn:000001B3                 sub     esp, 10h
.text$mn:000001B6                 mov     [ebp+var_4], ecx
.text$mn:000001B9                 push    1030h           ; fuLoad
.text$mn:000001BE                 mov     eax, [ebp+var_4]
.text$mn:000001C1                 mov     ecx, [eax+10h]
.text$mn:000001C4                 push    ecx             ; cy
.text$mn:000001C5                 mov     edx, [ebp+var_4]
.text$mn:000001C8                 mov     eax, [edx+10h]
.text$mn:000001CB                 push    eax             ; cx
.text$mn:000001CC                 push    1               ; type
.text$mn:000001CE                 mov     ecx, [ebp+name]
.text$mn:000001D1                 push    ecx             ; name
.text$mn:000001D2                 mov     edx, [ebp+var_4]
.text$mn:000001D5                 mov     eax, [edx+4]
.text$mn:000001D8                 push    eax             ; hInst
.text$mn:000001D9                 call    dword ptr ds:__imp__LoadImageW@24 ; LoadImageW(x,x,x,x,x,x)
.text$mn:000001DF                 mov     [ebp+hicon], eax
.text$mn:000001E2                 cmp     [ebp+hicon], 0
.text$mn:000001E6                 jnz     short loc_1EC
.text$mn:000001E8                 xor     al, al
.text$mn:000001EA                 jmp     short loc_23D
.text$mn:000001EC ; ---------------------------------------------------------------------------
.text$mn:000001EC
.text$mn:000001EC loc_1EC:                                ; CODE XREF: IconList::changeIcon(int,wchar_t const *)+36j
.text$mn:000001EC                 mov     ecx, [ebp+hicon]
.text$mn:000001EF                 push    ecx             ; hicon
.text$mn:000001F0                 mov     edx, [ebp+i]
.text$mn:000001F3                 push    edx             ; i
.text$mn:000001F4                 mov     eax, [ebp+var_4]
.text$mn:000001F7                 mov     ecx, [eax]
.text$mn:000001F9                 push    ecx             ; himl
.text$mn:000001FA                 call    dword ptr ds:__imp__ImageList_ReplaceIcon@12 ; ImageList_ReplaceIcon(x,x,x)
.text$mn:00000200                 mov     [ebp+var_10], eax
.text$mn:00000203                 push    0FF00FFh        ; crMask
.text$mn:00000208                 mov     edx, [ebp+hicon]
.text$mn:0000020B                 push    edx             ; hbmImage
.text$mn:0000020C                 mov     eax, [ebp+var_4]
.text$mn:0000020F                 mov     ecx, [eax]
.text$mn:00000211                 push    ecx             ; himl
.text$mn:00000212                 call    dword ptr ds:__imp__ImageList_AddMasked@12 ; ImageList_AddMasked(x,x,x)
.text$mn:00000218                 mov     edx, [ebp+hicon]
.text$mn:0000021B                 push    edx             ; ho
.text$mn:0000021C                 call    dword ptr ds:__imp__DeleteObject@4 ; DeleteObject(x)
.text$mn:00000222                 mov     eax, [ebp+var_10]
.text$mn:00000225                 cmp     eax, [ebp+i]
.text$mn:00000228                 jnz     short loc_233
.text$mn:0000022A                 mov     [ebp+var_C], 1
.text$mn:00000231                 jmp     short loc_23A
.text$mn:00000233 ; ---------------------------------------------------------------------------
.text$mn:00000233
.text$mn:00000233 loc_233:                                ; CODE XREF: IconList::changeIcon(int,wchar_t const *)+78j
.text$mn:00000233                 mov     [ebp+var_C], 0
.text$mn:0000023A
.text$mn:0000023A loc_23A:                                ; CODE XREF: IconList::changeIcon(int,wchar_t const *)+81j
.text$mn:0000023A                 mov     al, byte ptr [ebp+var_C]
.text$mn:0000023D
.text$mn:0000023D loc_23D:                                ; CODE XREF: IconList::changeIcon(int,wchar_t const *)+3Aj
.text$mn:0000023D                 mov     esp, ebp
.text$mn:0000023F                 pop     ebp
.text$mn:00000240                 retn    8
.text$mn:00000240 ?changeIcon@IconList@@QBE_NHPB_W@Z endp
.text$mn:00000240
.text$mn:00000240 ; ---------------------------------------------------------------------------
.text$mn:00000243                 align 10h
.text$mn:00000250
.text$mn:00000250 ; =============== S U B R O U T I N E =======================================
.text$mn:00000250
.text$mn:00000250 ; Attributes: bp-based frame
.text$mn:00000250
.text$mn:00000250 ; void __thiscall IconList::setIconSize(IconList *this, int)
.text$mn:00000250                 public ?setIconSize@IconList@@QBEXH@Z
.text$mn:00000250 ?setIconSize@IconList@@QBEXH@Z proc near
.text$mn:00000250
.text$mn:00000250 var_8           = dword ptr -8
.text$mn:00000250 var_4           = dword ptr -4
.text$mn:00000250 cy              = dword ptr  8
.text$mn:00000250
.text$mn:00000250                 push    ebp
.text$mn:00000251                 mov     ebp, esp
.text$mn:00000253                 sub     esp, 8
.text$mn:00000256                 mov     [ebp+var_8], ecx
.text$mn:00000259                 mov     eax, [ebp+cy]
.text$mn:0000025C                 push    eax             ; cy
.text$mn:0000025D                 mov     ecx, [ebp+cy]
.text$mn:00000260                 push    ecx             ; cx
.text$mn:00000261                 mov     edx, [ebp+var_8]
.text$mn:00000264                 mov     eax, [edx]
.text$mn:00000266                 push    eax             ; himl
.text$mn:00000267                 call    dword ptr ds:__imp__ImageList_SetIconSize@12 ; ImageList_SetIconSize(x,x,x)
.text$mn:0000026D                 mov     [ebp+var_4], 0
.text$mn:00000274                 jmp     short loc_27F
.text$mn:00000276 ; ---------------------------------------------------------------------------
.text$mn:00000276
.text$mn:00000276 loc_276:                                ; CODE XREF: IconList::setIconSize(int)+4Fj
.text$mn:00000276                 mov     ecx, [ebp+var_4]
.text$mn:00000279                 add     ecx, 1
.text$mn:0000027C                 mov     [ebp+var_4], ecx
.text$mn:0000027F
.text$mn:0000027F loc_27F:                                ; CODE XREF: IconList::setIconSize(int)+24j
.text$mn:0000027F                 mov     edx, [ebp+var_8]
.text$mn:00000282                 mov     eax, [ebp+var_4]
.text$mn:00000285                 cmp     eax, [edx+0Ch]
.text$mn:00000288                 jge     short loc_2A1
.text$mn:0000028A                 mov     ecx, [ebp+var_8]
.text$mn:0000028D                 mov     edx, [ecx+8]
.text$mn:00000290                 mov     eax, [ebp+var_4]
.text$mn:00000293                 mov     ecx, [edx+eax*4]
.text$mn:00000296                 push    ecx             ; int
.text$mn:00000297                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000029A                 call    ?addIcon@IconList@@QBEXH@Z ; IconList::addIcon(int)
.text$mn:0000029F                 jmp     short loc_276
.text$mn:000002A1 ; ---------------------------------------------------------------------------
.text$mn:000002A1
.text$mn:000002A1 loc_2A1:                                ; CODE XREF: IconList::setIconSize(int)+38j
.text$mn:000002A1                 mov     esp, ebp
.text$mn:000002A3                 pop     ebp
.text$mn:000002A4                 retn    4
.text$mn:000002A4 ?setIconSize@IconList@@QBEXH@Z endp
.text$mn:000002A4
.text$mn:000002A4 ; ---------------------------------------------------------------------------
.text$mn:000002A7                 align 10h
.text$mn:000002B0
.text$mn:000002B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000002B0
.text$mn:000002B0 ; Attributes: bp-based frame
.text$mn:000002B0
.text$mn:000002B0 ; void __thiscall ToolBarIcons::init(ToolBarIcons *this, struct ToolBarButtonUnit *, int)
.text$mn:000002B0                 public ?init@ToolBarIcons@@QAEXPAUToolBarButtonUnit@@H@Z
.text$mn:000002B0 ?init@ToolBarIcons@@QAEXPAUToolBarButtonUnit@@H@Z proc near
.text$mn:000002B0
.text$mn:000002B0 var_8           = dword ptr -8
.text$mn:000002B0 var_4           = dword ptr -4
.text$mn:000002B0 arg_0           = dword ptr  8
.text$mn:000002B0 arg_4           = dword ptr  0Ch
.text$mn:000002B0
.text$mn:000002B0                 push    ebp
.text$mn:000002B1                 mov     ebp, esp
.text$mn:000002B3                 sub     esp, 8
.text$mn:000002B6                 mov     [ebp+var_8], ecx
.text$mn:000002B9                 mov     [ebp+var_4], 0
.text$mn:000002C0                 jmp     short loc_2CB
.text$mn:000002C2 ; ---------------------------------------------------------------------------
.text$mn:000002C2
.text$mn:000002C2 loc_2C2:                                ; CODE XREF: ToolBarIcons::init(ToolBarButtonUnit *,int)+36j
.text$mn:000002C2                 mov     eax, [ebp+var_4]
.text$mn:000002C5                 add     eax, 1
.text$mn:000002C8                 mov     [ebp+var_4], eax
.text$mn:000002CB
.text$mn:000002CB loc_2CB:                                ; CODE XREF: ToolBarIcons::init(ToolBarButtonUnit *,int)+10j
.text$mn:000002CB                 mov     ecx, [ebp+var_4]
.text$mn:000002CE                 cmp     ecx, [ebp+arg_4]
.text$mn:000002D1                 jge     short loc_2E8
.text$mn:000002D3                 imul    edx, [ebp+var_4], 14h
.text$mn:000002D7                 add     edx, [ebp+arg_0]
.text$mn:000002DA                 push    edx
.text$mn:000002DB                 mov     ecx, [ebp+var_8]
.text$mn:000002DE                 add     ecx, 10h
.text$mn:000002E1                 call    ?push_back@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXABUToolBarButtonUnit@@@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)
.text$mn:000002E6                 jmp     short loc_2C2
.text$mn:000002E8 ; ---------------------------------------------------------------------------
.text$mn:000002E8
.text$mn:000002E8 loc_2E8:                                ; CODE XREF: ToolBarIcons::init(ToolBarButtonUnit *,int)+21j
.text$mn:000002E8                 mov     eax, [ebp+var_8]
.text$mn:000002EB                 mov     ecx, [ebp+arg_4]
.text$mn:000002EE                 mov     [eax+0D4h], ecx
.text$mn:000002F4                 mov     esp, ebp
.text$mn:000002F6                 pop     ebp
.text$mn:000002F7                 retn    8
.text$mn:000002F7 ?init@ToolBarIcons@@QAEXPAUToolBarButtonUnit@@H@Z endp
.text$mn:000002F7
.text$mn:000002F7 ; ---------------------------------------------------------------------------
.text$mn:000002FA                 align 10h
.text$mn:00000300
.text$mn:00000300 ; =============== S U B R O U T I N E =======================================
.text$mn:00000300
.text$mn:00000300 ; Attributes: bp-based frame
.text$mn:00000300
.text$mn:00000300 ; void __thiscall ToolBarIcons::create(ToolBarIcons *this, HINSTANCE, int)
.text$mn:00000300                 public ?create@ToolBarIcons@@QAEXPAUHINSTANCE__@@H@Z
.text$mn:00000300 ?create@ToolBarIcons@@QAEXPAUHINSTANCE__@@H@Z proc near
.text$mn:00000300
.text$mn:00000300 var_40          = byte ptr -40h
.text$mn:00000300 var_2C          = byte ptr -2Ch
.text$mn:00000300 var_18          = byte ptr -18h
.text$mn:00000300 var_4           = dword ptr -4
.text$mn:00000300 arg_0           = dword ptr  8
.text$mn:00000300 arg_4           = dword ptr  0Ch
.text$mn:00000300
.text$mn:00000300                 push    ebp
.text$mn:00000301                 mov     ebp, esp
.text$mn:00000303                 sub     esp, 40h
.text$mn:00000306                 mov     [ebp+var_4], ecx
.text$mn:00000309                 lea     ecx, [ebp+var_18]
.text$mn:0000030C                 call    ??0IconList@@QAE@XZ ; IconList::IconList(void)
.text$mn:00000311                 push    eax
.text$mn:00000312                 mov     ecx, [ebp+var_4]
.text$mn:00000315                 call    ?push_back@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEX$$QAVIconList@@@Z ; std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)
.text$mn:0000031A                 lea     ecx, [ebp+var_2C]
.text$mn:0000031D                 call    ??0IconList@@QAE@XZ ; IconList::IconList(void)
.text$mn:00000322                 push    eax
.text$mn:00000323                 mov     ecx, [ebp+var_4]
.text$mn:00000326                 call    ?push_back@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEX$$QAVIconList@@@Z ; std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)
.text$mn:0000032B                 lea     ecx, [ebp+var_40]
.text$mn:0000032E                 call    ??0IconList@@QAE@XZ ; IconList::IconList(void)
.text$mn:00000333                 push    eax
.text$mn:00000334                 mov     ecx, [ebp+var_4]
.text$mn:00000337                 call    ?push_back@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEX$$QAVIconList@@@Z ; std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)
.text$mn:0000033C                 mov     eax, [ebp+arg_4]
.text$mn:0000033F                 push    eax             ; int
.text$mn:00000340                 mov     ecx, [ebp+arg_0]
.text$mn:00000343                 push    ecx             ; HINSTANCE
.text$mn:00000344                 push    0
.text$mn:00000346                 mov     ecx, [ebp+var_4]
.text$mn:00000349                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:0000034E                 mov     ecx, eax        ; this
.text$mn:00000350                 call    ?create@IconList@@QAEXPAUHINSTANCE__@@H@Z ; IconList::create(HINSTANCE__ *,int)
.text$mn:00000355                 mov     edx, [ebp+arg_4]
.text$mn:00000358                 push    edx             ; int
.text$mn:00000359                 mov     eax, [ebp+arg_0]
.text$mn:0000035C                 push    eax             ; HINSTANCE
.text$mn:0000035D                 push    1
.text$mn:0000035F                 mov     ecx, [ebp+var_4]
.text$mn:00000362                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:00000367                 mov     ecx, eax        ; this
.text$mn:00000369                 call    ?create@IconList@@QAEXPAUHINSTANCE__@@H@Z ; IconList::create(HINSTANCE__ *,int)
.text$mn:0000036E                 mov     ecx, [ebp+arg_4]
.text$mn:00000371                 push    ecx             ; int
.text$mn:00000372                 mov     edx, [ebp+arg_0]
.text$mn:00000375                 push    edx             ; HINSTANCE
.text$mn:00000376                 push    2
.text$mn:00000378                 mov     ecx, [ebp+var_4]
.text$mn:0000037B                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:00000380                 mov     ecx, eax        ; this
.text$mn:00000382                 call    ?create@IconList@@QAEXPAUHINSTANCE__@@H@Z ; IconList::create(HINSTANCE__ *,int)
.text$mn:00000387                 mov     eax, [ebp+arg_4]
.text$mn:0000038A                 push    eax             ; int
.text$mn:0000038B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000038E                 call    ?reInit@ToolBarIcons@@QAEXH@Z ; ToolBarIcons::reInit(int)
.text$mn:00000393                 mov     esp, ebp
.text$mn:00000395                 pop     ebp
.text$mn:00000396                 retn    8
.text$mn:00000396 ?create@ToolBarIcons@@QAEXPAUHINSTANCE__@@H@Z endp
.text$mn:00000396
.text$mn:00000396 ; ---------------------------------------------------------------------------
.text$mn:00000399                 align 10h
.text$mn:000003A0
.text$mn:000003A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000003A0
.text$mn:000003A0 ; Attributes: bp-based frame
.text$mn:000003A0
.text$mn:000003A0 ; void __thiscall ToolBarIcons::destroy(ToolBarIcons *__hidden this)
.text$mn:000003A0                 public ?destroy@ToolBarIcons@@QAEXXZ
.text$mn:000003A0 ?destroy@ToolBarIcons@@QAEXXZ proc near
.text$mn:000003A0
.text$mn:000003A0 var_4           = dword ptr -4
.text$mn:000003A0
.text$mn:000003A0                 push    ebp
.text$mn:000003A1                 mov     ebp, esp
.text$mn:000003A3                 push    ecx
.text$mn:000003A4                 mov     [ebp+var_4], ecx
.text$mn:000003A7                 push    0
.text$mn:000003A9                 mov     ecx, [ebp+var_4]
.text$mn:000003AC                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:000003B1                 mov     ecx, eax        ; this
.text$mn:000003B3                 call    ?destroy@IconList@@QAEXXZ ; IconList::destroy(void)
.text$mn:000003B8                 push    1
.text$mn:000003BA                 mov     ecx, [ebp+var_4]
.text$mn:000003BD                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:000003C2                 mov     ecx, eax        ; this
.text$mn:000003C4                 call    ?destroy@IconList@@QAEXXZ ; IconList::destroy(void)
.text$mn:000003C9                 push    2
.text$mn:000003CB                 mov     ecx, [ebp+var_4]
.text$mn:000003CE                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:000003D3                 mov     ecx, eax        ; this
.text$mn:000003D5                 call    ?destroy@IconList@@QAEXXZ ; IconList::destroy(void)
.text$mn:000003DA                 mov     esp, ebp
.text$mn:000003DC                 pop     ebp
.text$mn:000003DD                 retn
.text$mn:000003DD ?destroy@ToolBarIcons@@QAEXXZ endp
.text$mn:000003DD
.text$mn:000003DD ; ---------------------------------------------------------------------------
.text$mn:000003DE                 align 10h
.text$mn:000003E0
.text$mn:000003E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000003E0
.text$mn:000003E0 ; Attributes: bp-based frame
.text$mn:000003E0
.text$mn:000003E0 ; void __thiscall ToolBarIcons::reInit(ToolBarIcons *this, int)
.text$mn:000003E0                 public ?reInit@ToolBarIcons@@QAEXH@Z
.text$mn:000003E0 ?reInit@ToolBarIcons@@QAEXH@Z proc near ; CODE XREF: ToolBarIcons::create(HINSTANCE__ *,int)+8Ep
.text$mn:000003E0
.text$mn:000003E0 var_C           = dword ptr -0Ch
.text$mn:000003E0 var_8           = dword ptr -8
.text$mn:000003E0 var_4           = dword ptr -4
.text$mn:000003E0 cy              = dword ptr  8
.text$mn:000003E0
.text$mn:000003E0                 push    ebp
.text$mn:000003E1                 mov     ebp, esp
.text$mn:000003E3                 sub     esp, 0Ch
.text$mn:000003E6                 mov     [ebp+var_4], ecx
.text$mn:000003E9                 mov     eax, [ebp+cy]
.text$mn:000003EC                 push    eax             ; cy
.text$mn:000003ED                 mov     ecx, [ebp+cy]
.text$mn:000003F0                 push    ecx             ; cx
.text$mn:000003F1                 mov     ecx, [ebp+var_4] ; this
.text$mn:000003F4                 call    ?getDefaultLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ ; ToolBarIcons::getDefaultLst(void)
.text$mn:000003F9                 push    eax             ; himl
.text$mn:000003FA                 call    dword ptr ds:__imp__ImageList_SetIconSize@12 ; ImageList_SetIconSize(x,x,x)
.text$mn:00000400                 mov     edx, [ebp+cy]
.text$mn:00000403                 push    edx             ; cy
.text$mn:00000404                 mov     eax, [ebp+cy]
.text$mn:00000407                 push    eax             ; cx
.text$mn:00000408                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000040B                 call    ?getHotLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ ; ToolBarIcons::getHotLst(void)
.text$mn:00000410                 push    eax             ; himl
.text$mn:00000411                 call    dword ptr ds:__imp__ImageList_SetIconSize@12 ; ImageList_SetIconSize(x,x,x)
.text$mn:00000417                 mov     ecx, [ebp+cy]
.text$mn:0000041A                 push    ecx             ; cy
.text$mn:0000041B                 mov     edx, [ebp+cy]
.text$mn:0000041E                 push    edx             ; cx
.text$mn:0000041F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00000422                 call    ?getDisableLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ ; ToolBarIcons::getDisableLst(void)
.text$mn:00000427                 push    eax             ; himl
.text$mn:00000428                 call    dword ptr ds:__imp__ImageList_SetIconSize@12 ; ImageList_SetIconSize(x,x,x)
.text$mn:0000042E                 mov     [ebp+var_8], 0
.text$mn:00000435                 mov     ecx, [ebp+var_4]
.text$mn:00000438                 add     ecx, 10h
.text$mn:0000043B                 call    ?size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::size(void)
.text$mn:00000440                 mov     [ebp+var_C], eax
.text$mn:00000443                 jmp     short loc_44E
.text$mn:00000445 ; ---------------------------------------------------------------------------
.text$mn:00000445
.text$mn:00000445 loc_445:                                ; CODE XREF: ToolBarIcons::reInit(int):loc_4DBj
.text$mn:00000445                 mov     eax, [ebp+var_8]
.text$mn:00000448                 add     eax, 1
.text$mn:0000044B                 mov     [ebp+var_8], eax
.text$mn:0000044E
.text$mn:0000044E loc_44E:                                ; CODE XREF: ToolBarIcons::reInit(int)+63j
.text$mn:0000044E                 mov     ecx, [ebp+var_8]
.text$mn:00000451                 cmp     ecx, [ebp+var_C]
.text$mn:00000454                 jnb     loc_4E0
.text$mn:0000045A                 mov     edx, [ebp+var_8]
.text$mn:0000045D                 push    edx
.text$mn:0000045E                 mov     ecx, [ebp+var_4]
.text$mn:00000461                 add     ecx, 10h
.text$mn:00000464                 call    ??A?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEAAUToolBarButtonUnit@@I@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)
.text$mn:00000469                 cmp     dword ptr [eax+4], 0FFFFFFFFh
.text$mn:0000046D                 jz      short loc_4DB
.text$mn:0000046F                 mov     eax, [ebp+var_8]
.text$mn:00000472                 push    eax
.text$mn:00000473                 mov     ecx, [ebp+var_4]
.text$mn:00000476                 add     ecx, 10h
.text$mn:00000479                 call    ??A?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEAAUToolBarButtonUnit@@I@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)
.text$mn:0000047E                 mov     ecx, [eax+4]
.text$mn:00000481                 push    ecx             ; int
.text$mn:00000482                 push    0
.text$mn:00000484                 mov     ecx, [ebp+var_4]
.text$mn:00000487                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:0000048C                 mov     ecx, eax        ; this
.text$mn:0000048E                 call    ?addIcon@IconList@@QBEXH@Z ; IconList::addIcon(int)
.text$mn:00000493                 mov     edx, [ebp+var_8]
.text$mn:00000496                 push    edx
.text$mn:00000497                 mov     ecx, [ebp+var_4]
.text$mn:0000049A                 add     ecx, 10h
.text$mn:0000049D                 call    ??A?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEAAUToolBarButtonUnit@@I@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)
.text$mn:000004A2                 mov     eax, [eax+8]
.text$mn:000004A5                 push    eax             ; int
.text$mn:000004A6                 push    1
.text$mn:000004A8                 mov     ecx, [ebp+var_4]
.text$mn:000004AB                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:000004B0                 mov     ecx, eax        ; this
.text$mn:000004B2                 call    ?addIcon@IconList@@QBEXH@Z ; IconList::addIcon(int)
.text$mn:000004B7                 mov     ecx, [ebp+var_8]
.text$mn:000004BA                 push    ecx
.text$mn:000004BB                 mov     ecx, [ebp+var_4]
.text$mn:000004BE                 add     ecx, 10h
.text$mn:000004C1                 call    ??A?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEAAUToolBarButtonUnit@@I@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)
.text$mn:000004C6                 mov     edx, [eax+0Ch]
.text$mn:000004C9                 push    edx             ; int
.text$mn:000004CA                 push    2
.text$mn:000004CC                 mov     ecx, [ebp+var_4]
.text$mn:000004CF                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:000004D4                 mov     ecx, eax        ; this
.text$mn:000004D6                 call    ?addIcon@IconList@@QBEXH@Z ; IconList::addIcon(int)
.text$mn:000004DB
.text$mn:000004DB loc_4DB:                                ; CODE XREF: ToolBarIcons::reInit(int)+8Dj
.text$mn:000004DB                 jmp     loc_445
.text$mn:000004E0 ; ---------------------------------------------------------------------------
.text$mn:000004E0
.text$mn:000004E0 loc_4E0:                                ; CODE XREF: ToolBarIcons::reInit(int)+74j
.text$mn:000004E0                 mov     esp, ebp
.text$mn:000004E2                 pop     ebp
.text$mn:000004E3                 retn    4
.text$mn:000004E3 ?reInit@ToolBarIcons@@QAEXH@Z endp
.text$mn:000004E3
.text$mn:000004E3 ; ---------------------------------------------------------------------------
.text$mn:000004E6                 align 4
.text$mn:000004E6 _text$mn        ends
.text$mn:000004E6
.text$mn:000004E8 ; ===========================================================================
.text$mn:000004E8
.text$mn:000004E8 ; Segment type: Pure code
.text$mn:000004E8 ; Segment permissions: Read/Execute
.text$mn:000004E8 _text$mn        segment para public 'CODE' use32
.text$mn:000004E8                 assume cs:_text$mn
.text$mn:000004E8                 ;org 4E8h
.text$mn:000004E8 ; COMDAT (pick any)
.text$mn:000004E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000004E8
.text$mn:000004E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000004E8
.text$mn:000004E8 ; Attributes: bp-based frame
.text$mn:000004E8
.text$mn:000004E8 ; struct ToolBarButtonUnit * __cdecl std::_Allocate<struct ToolBarButtonUnit>(unsigned int, struct ToolBarButtonUnit *)
.text$mn:000004E8                 public ??$_Allocate@UToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@IPAU1@@Z
.text$mn:000004E8 ??$_Allocate@UToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@IPAU1@@Z proc near
.text$mn:000004E8                                         ; CODE XREF: std::allocator<ToolBarButtonUnit>::allocate(uint)+Dp
.text$mn:000004E8
.text$mn:000004E8 var_4           = dword ptr -4
.text$mn:000004E8 arg_0           = dword ptr  8
.text$mn:000004E8
.text$mn:000004E8                 push    ebp
.text$mn:000004E9                 mov     ebp, esp
.text$mn:000004EB                 push    ecx
.text$mn:000004EC                 mov     [ebp+var_4], 0
.text$mn:000004F3                 cmp     [ebp+arg_0], 0
.text$mn:000004F7                 jnz     short loc_4FB
.text$mn:000004F9                 jmp     short loc_51F
.text$mn:000004FB ; ---------------------------------------------------------------------------
.text$mn:000004FB
.text$mn:000004FB loc_4FB:                                ; CODE XREF: std::_Allocate<ToolBarButtonUnit>(uint,ToolBarButtonUnit *)+Fj
.text$mn:000004FB                 cmp     [ebp+arg_0], 0CCCCCCCh
.text$mn:00000502                 ja      short loc_51A
.text$mn:00000504                 imul    eax, [ebp+arg_0], 14h
.text$mn:00000508                 push    eax             ; unsigned int
.text$mn:00000509                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000050E                 add     esp, 4
.text$mn:00000511                 mov     [ebp+var_4], eax
.text$mn:00000514                 cmp     [ebp+var_4], 0
.text$mn:00000518                 jnz     short loc_51F
.text$mn:0000051A
.text$mn:0000051A loc_51A:                                ; CODE XREF: std::_Allocate<ToolBarButtonUnit>(uint,ToolBarButtonUnit *)+1Aj
.text$mn:0000051A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000051F
.text$mn:0000051F loc_51F:                                ; CODE XREF: std::_Allocate<ToolBarButtonUnit>(uint,ToolBarButtonUnit *)+11j
.text$mn:0000051F                                         ; std::_Allocate<ToolBarButtonUnit>(uint,ToolBarButtonUnit *)+30j
.text$mn:0000051F                 mov     eax, [ebp+var_4]
.text$mn:00000522                 mov     esp, ebp
.text$mn:00000524                 pop     ebp
.text$mn:00000525                 retn
.text$mn:00000525 ??$_Allocate@UToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@IPAU1@@Z endp
.text$mn:00000525
.text$mn:00000525 ; ---------------------------------------------------------------------------
.text$mn:00000526                 align 4
.text$mn:00000526 _text$mn        ends
.text$mn:00000526
.text$mn:00000528 ; ===========================================================================
.text$mn:00000528
.text$mn:00000528 ; Segment type: Pure code
.text$mn:00000528 ; Segment permissions: Read/Execute
.text$mn:00000528 _text$mn        segment para public 'CODE' use32
.text$mn:00000528                 assume cs:_text$mn
.text$mn:00000528                 ;org 528h
.text$mn:00000528 ; COMDAT (pick any)
.text$mn:00000528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000528
.text$mn:00000528 ; =============== S U B R O U T I N E =======================================
.text$mn:00000528
.text$mn:00000528 ; Attributes: bp-based frame
.text$mn:00000528
.text$mn:00000528 ; class IconList * __cdecl std::_Allocate<class IconList>(unsigned int, class IconList *)
.text$mn:00000528                 public ??$_Allocate@VIconList@@@std@@YAPAVIconList@@IPAV1@@Z
.text$mn:00000528 ??$_Allocate@VIconList@@@std@@YAPAVIconList@@IPAV1@@Z proc near
.text$mn:00000528                                         ; CODE XREF: std::allocator<IconList>::allocate(uint)+Dp
.text$mn:00000528
.text$mn:00000528 var_4           = dword ptr -4
.text$mn:00000528 arg_0           = dword ptr  8
.text$mn:00000528
.text$mn:00000528                 push    ebp
.text$mn:00000529                 mov     ebp, esp
.text$mn:0000052B                 push    ecx
.text$mn:0000052C                 mov     [ebp+var_4], 0
.text$mn:00000533                 cmp     [ebp+arg_0], 0
.text$mn:00000537                 jnz     short loc_53B
.text$mn:00000539                 jmp     short loc_55F
.text$mn:0000053B ; ---------------------------------------------------------------------------
.text$mn:0000053B
.text$mn:0000053B loc_53B:                                ; CODE XREF: std::_Allocate<IconList>(uint,IconList *)+Fj
.text$mn:0000053B                 cmp     [ebp+arg_0], 0CCCCCCCh
.text$mn:00000542                 ja      short loc_55A
.text$mn:00000544                 imul    eax, [ebp+arg_0], 14h
.text$mn:00000548                 push    eax             ; unsigned int
.text$mn:00000549                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000054E                 add     esp, 4
.text$mn:00000551                 mov     [ebp+var_4], eax
.text$mn:00000554                 cmp     [ebp+var_4], 0
.text$mn:00000558                 jnz     short loc_55F
.text$mn:0000055A
.text$mn:0000055A loc_55A:                                ; CODE XREF: std::_Allocate<IconList>(uint,IconList *)+1Aj
.text$mn:0000055A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000055F
.text$mn:0000055F loc_55F:                                ; CODE XREF: std::_Allocate<IconList>(uint,IconList *)+11j
.text$mn:0000055F                                         ; std::_Allocate<IconList>(uint,IconList *)+30j
.text$mn:0000055F                 mov     eax, [ebp+var_4]
.text$mn:00000562                 mov     esp, ebp
.text$mn:00000564                 pop     ebp
.text$mn:00000565                 retn
.text$mn:00000565 ??$_Allocate@VIconList@@@std@@YAPAVIconList@@IPAV1@@Z endp
.text$mn:00000565
.text$mn:00000565 ; ---------------------------------------------------------------------------
.text$mn:00000566                 align 4
.text$mn:00000566 _text$mn        ends
.text$mn:00000566
.text$mn:00000568 ; ===========================================================================
.text$mn:00000568
.text$mn:00000568 ; Segment type: Pure code
.text$mn:00000568 ; Segment permissions: Read/Execute
.text$mn:00000568 _text$mn        segment para public 'CODE' use32
.text$mn:00000568                 assume cs:_text$mn
.text$mn:00000568                 ;org 568h
.text$mn:00000568 ; COMDAT (pick any)
.text$mn:00000568                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000568
.text$mn:00000568 ; =============== S U B R O U T I N E =======================================
.text$mn:00000568
.text$mn:00000568 ; Attributes: bp-based frame
.text$mn:00000568
.text$mn:00000568 ; int __cdecl std::_Debug_pointer<ToolBarButtonUnit>(int, wchar_t *, unsigned int)
.text$mn:00000568                 public ??$_Debug_pointer@UToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@PB_WI@Z
.text$mn:00000568 ??$_Debug_pointer@UToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@PB_WI@Z proc near
.text$mn:00000568                                         ; CODE XREF: std::_Debug_range2<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00000568                                         ; std::_Debug_range2<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00000568
.text$mn:00000568 arg_0           = dword ptr  8
.text$mn:00000568 arg_4           = dword ptr  0Ch
.text$mn:00000568 arg_8           = dword ptr  10h
.text$mn:00000568
.text$mn:00000568                 push    ebp
.text$mn:00000569                 mov     ebp, esp
.text$mn:0000056B                 cmp     [ebp+arg_0], 0
.text$mn:0000056F                 jnz     short loc_586
.text$mn:00000571                 mov     eax, [ebp+arg_8]
.text$mn:00000574                 push    eax             ; unsigned int
.text$mn:00000575                 mov     ecx, [ebp+arg_4]
.text$mn:00000578                 push    ecx             ; wchar_t *
.text$mn:00000579                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000057E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00000583                 add     esp, 0Ch
.text$mn:00000586
.text$mn:00000586 loc_586:                                ; CODE XREF: std::_Debug_pointer<ToolBarButtonUnit>(ToolBarButtonUnit *,wchar_t const *,uint)+7j
.text$mn:00000586                 pop     ebp
.text$mn:00000587                 retn
.text$mn:00000587 ??$_Debug_pointer@UToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@PB_WI@Z endp
.text$mn:00000587
.text$mn:00000587 _text$mn        ends
.text$mn:00000587
.text$mn:00000588 ; ===========================================================================
.text$mn:00000588
.text$mn:00000588 ; Segment type: Pure code
.text$mn:00000588 ; Segment permissions: Read/Execute
.text$mn:00000588 _text$mn        segment para public 'CODE' use32
.text$mn:00000588                 assume cs:_text$mn
.text$mn:00000588                 ;org 588h
.text$mn:00000588 ; COMDAT (pick any)
.text$mn:00000588                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000588
.text$mn:00000588 ; =============== S U B R O U T I N E =======================================
.text$mn:00000588
.text$mn:00000588 ; Attributes: bp-based frame
.text$mn:00000588
.text$mn:00000588 ; int __cdecl std::_Debug_pointer<IconList>(int, wchar_t *, unsigned int)
.text$mn:00000588                 public ??$_Debug_pointer@VIconList@@@std@@YAXPAVIconList@@PB_WI@Z
.text$mn:00000588 ??$_Debug_pointer@VIconList@@@std@@YAXPAVIconList@@PB_WI@Z proc near
.text$mn:00000588                                         ; CODE XREF: std::_Debug_range2<IconList *>(IconList *,IconList *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:00000588                                         ; std::_Debug_range2<IconList *>(IconList *,IconList *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:00000588
.text$mn:00000588 arg_0           = dword ptr  8
.text$mn:00000588 arg_4           = dword ptr  0Ch
.text$mn:00000588 arg_8           = dword ptr  10h
.text$mn:00000588
.text$mn:00000588                 push    ebp
.text$mn:00000589                 mov     ebp, esp
.text$mn:0000058B                 cmp     [ebp+arg_0], 0
.text$mn:0000058F                 jnz     short loc_5A6
.text$mn:00000591                 mov     eax, [ebp+arg_8]
.text$mn:00000594                 push    eax             ; unsigned int
.text$mn:00000595                 mov     ecx, [ebp+arg_4]
.text$mn:00000598                 push    ecx             ; wchar_t *
.text$mn:00000599                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:0000059E                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000005A3                 add     esp, 0Ch
.text$mn:000005A6
.text$mn:000005A6 loc_5A6:                                ; CODE XREF: std::_Debug_pointer<IconList>(IconList *,wchar_t const *,uint)+7j
.text$mn:000005A6                 pop     ebp
.text$mn:000005A7                 retn
.text$mn:000005A7 ??$_Debug_pointer@VIconList@@@std@@YAXPAVIconList@@PB_WI@Z endp
.text$mn:000005A7
.text$mn:000005A7 _text$mn        ends
.text$mn:000005A7
.text$mn:000005A8 ; ===========================================================================
.text$mn:000005A8
.text$mn:000005A8 ; Segment type: Pure code
.text$mn:000005A8 ; Segment permissions: Read/Execute
.text$mn:000005A8 _text$mn        segment para public 'CODE' use32
.text$mn:000005A8                 assume cs:_text$mn
.text$mn:000005A8                 ;org 5A8h
.text$mn:000005A8 ; COMDAT (pick any)
.text$mn:000005A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000005A8
.text$mn:000005A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000005A8
.text$mn:000005A8 ; Attributes: bp-based frame
.text$mn:000005A8
.text$mn:000005A8 ; int __cdecl std::_Debug_range2<ToolBarButtonUnit *>(int, int, wchar_t *, unsigned int)
.text$mn:000005A8                 public ??$_Debug_range2@PAUToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000005A8 ??$_Debug_range2@PAUToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000005A8                                         ; CODE XREF: std::_Debug_range<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint)+2Ap
.text$mn:000005A8
.text$mn:000005A8 arg_0           = dword ptr  8
.text$mn:000005A8 arg_4           = dword ptr  0Ch
.text$mn:000005A8 arg_8           = dword ptr  10h
.text$mn:000005A8 arg_C           = dword ptr  14h
.text$mn:000005A8
.text$mn:000005A8                 push    ebp
.text$mn:000005A9                 mov     ebp, esp
.text$mn:000005AB                 mov     eax, [ebp+arg_0]
.text$mn:000005AE                 cmp     eax, [ebp+arg_4]
.text$mn:000005B1                 jz      short loc_5F8
.text$mn:000005B3                 mov     ecx, [ebp+arg_C]
.text$mn:000005B6                 push    ecx             ; unsigned int
.text$mn:000005B7                 mov     edx, [ebp+arg_8]
.text$mn:000005BA                 push    edx             ; wchar_t *
.text$mn:000005BB                 mov     eax, [ebp+arg_0]
.text$mn:000005BE                 push    eax             ; int
.text$mn:000005BF                 call    ??$_Debug_pointer@UToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@PB_WI@Z ; std::_Debug_pointer<ToolBarButtonUnit>(ToolBarButtonUnit *,wchar_t const *,uint)
.text$mn:000005C4                 add     esp, 0Ch
.text$mn:000005C7                 mov     ecx, [ebp+arg_C]
.text$mn:000005CA                 push    ecx             ; unsigned int
.text$mn:000005CB                 mov     edx, [ebp+arg_8]
.text$mn:000005CE                 push    edx             ; wchar_t *
.text$mn:000005CF                 mov     eax, [ebp+arg_4]
.text$mn:000005D2                 push    eax             ; int
.text$mn:000005D3                 call    ??$_Debug_pointer@UToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@PB_WI@Z ; std::_Debug_pointer<ToolBarButtonUnit>(ToolBarButtonUnit *,wchar_t const *,uint)
.text$mn:000005D8                 add     esp, 0Ch
.text$mn:000005DB                 mov     ecx, [ebp+arg_4]
.text$mn:000005DE                 cmp     ecx, [ebp+arg_0]
.text$mn:000005E1                 jnb     short loc_5F8
.text$mn:000005E3                 mov     edx, [ebp+arg_C]
.text$mn:000005E6                 push    edx             ; unsigned int
.text$mn:000005E7                 mov     eax, [ebp+arg_8]
.text$mn:000005EA                 push    eax             ; wchar_t *
.text$mn:000005EB                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:000005F0                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000005F5                 add     esp, 0Ch
.text$mn:000005F8
.text$mn:000005F8 loc_5F8:                                ; CODE XREF: std::_Debug_range2<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:000005F8                                         ; std::_Debug_range2<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:000005F8                 pop     ebp
.text$mn:000005F9                 retn
.text$mn:000005F9 ??$_Debug_range2@PAUToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:000005F9
.text$mn:000005F9 ; ---------------------------------------------------------------------------
.text$mn:000005FA                 align 4
.text$mn:000005FA _text$mn        ends
.text$mn:000005FA
.text$mn:000005FC ; ===========================================================================
.text$mn:000005FC
.text$mn:000005FC ; Segment type: Pure code
.text$mn:000005FC ; Segment permissions: Read/Execute
.text$mn:000005FC _text$mn        segment para public 'CODE' use32
.text$mn:000005FC                 assume cs:_text$mn
.text$mn:000005FC                 ;org 5FCh
.text$mn:000005FC ; COMDAT (pick any)
.text$mn:000005FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000005FC
.text$mn:000005FC ; =============== S U B R O U T I N E =======================================
.text$mn:000005FC
.text$mn:000005FC ; Attributes: bp-based frame
.text$mn:000005FC
.text$mn:000005FC ; int __cdecl std::_Debug_range2<IconList *>(int, int, wchar_t *, unsigned int)
.text$mn:000005FC                 public ??$_Debug_range2@PAVIconList@@@std@@YAXPAVIconList@@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000005FC ??$_Debug_range2@PAVIconList@@@std@@YAXPAVIconList@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000005FC                                         ; CODE XREF: std::_Debug_range<IconList *>(IconList *,IconList *,wchar_t const *,uint)+2Ap
.text$mn:000005FC
.text$mn:000005FC arg_0           = dword ptr  8
.text$mn:000005FC arg_4           = dword ptr  0Ch
.text$mn:000005FC arg_8           = dword ptr  10h
.text$mn:000005FC arg_C           = dword ptr  14h
.text$mn:000005FC
.text$mn:000005FC                 push    ebp
.text$mn:000005FD                 mov     ebp, esp
.text$mn:000005FF                 mov     eax, [ebp+arg_0]
.text$mn:00000602                 cmp     eax, [ebp+arg_4]
.text$mn:00000605                 jz      short loc_64C
.text$mn:00000607                 mov     ecx, [ebp+arg_C]
.text$mn:0000060A                 push    ecx             ; unsigned int
.text$mn:0000060B                 mov     edx, [ebp+arg_8]
.text$mn:0000060E                 push    edx             ; wchar_t *
.text$mn:0000060F                 mov     eax, [ebp+arg_0]
.text$mn:00000612                 push    eax             ; int
.text$mn:00000613                 call    ??$_Debug_pointer@VIconList@@@std@@YAXPAVIconList@@PB_WI@Z ; std::_Debug_pointer<IconList>(IconList *,wchar_t const *,uint)
.text$mn:00000618                 add     esp, 0Ch
.text$mn:0000061B                 mov     ecx, [ebp+arg_C]
.text$mn:0000061E                 push    ecx             ; unsigned int
.text$mn:0000061F                 mov     edx, [ebp+arg_8]
.text$mn:00000622                 push    edx             ; wchar_t *
.text$mn:00000623                 mov     eax, [ebp+arg_4]
.text$mn:00000626                 push    eax             ; int
.text$mn:00000627                 call    ??$_Debug_pointer@VIconList@@@std@@YAXPAVIconList@@PB_WI@Z ; std::_Debug_pointer<IconList>(IconList *,wchar_t const *,uint)
.text$mn:0000062C                 add     esp, 0Ch
.text$mn:0000062F                 mov     ecx, [ebp+arg_4]
.text$mn:00000632                 cmp     ecx, [ebp+arg_0]
.text$mn:00000635                 jnb     short loc_64C
.text$mn:00000637                 mov     edx, [ebp+arg_C]
.text$mn:0000063A                 push    edx             ; unsigned int
.text$mn:0000063B                 mov     eax, [ebp+arg_8]
.text$mn:0000063E                 push    eax             ; wchar_t *
.text$mn:0000063F                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00000644                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00000649                 add     esp, 0Ch
.text$mn:0000064C
.text$mn:0000064C loc_64C:                                ; CODE XREF: std::_Debug_range2<IconList *>(IconList *,IconList *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:0000064C                                         ; std::_Debug_range2<IconList *>(IconList *,IconList *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:0000064C                 pop     ebp
.text$mn:0000064D                 retn
.text$mn:0000064D ??$_Debug_range2@PAVIconList@@@std@@YAXPAVIconList@@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:0000064D
.text$mn:0000064D ; ---------------------------------------------------------------------------
.text$mn:0000064E                 align 10h
.text$mn:0000064E _text$mn        ends
.text$mn:0000064E
.text$mn:00000650 ; ===========================================================================
.text$mn:00000650
.text$mn:00000650 ; Segment type: Pure code
.text$mn:00000650 ; Segment permissions: Read/Execute
.text$mn:00000650 _text$mn        segment para public 'CODE' use32
.text$mn:00000650                 assume cs:_text$mn
.text$mn:00000650                 ;org 650h
.text$mn:00000650 ; COMDAT (pick any)
.text$mn:00000650                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000650
.text$mn:00000650 ; =============== S U B R O U T I N E =======================================
.text$mn:00000650
.text$mn:00000650 ; Attributes: bp-based frame
.text$mn:00000650
.text$mn:00000650 ; int __cdecl std::_Debug_range<ToolBarButtonUnit *>(int, int, wchar_t *, unsigned int)
.text$mn:00000650                 public ??$_Debug_range@PAUToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@0PB_WI@Z
.text$mn:00000650 ??$_Debug_range@PAUToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@0PB_WI@Z proc near
.text$mn:00000650                                         ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00000650
.text$mn:00000650 var_1           = byte ptr -1
.text$mn:00000650 arg_0           = dword ptr  8
.text$mn:00000650 arg_4           = dword ptr  0Ch
.text$mn:00000650 arg_8           = dword ptr  10h
.text$mn:00000650 arg_C           = dword ptr  14h
.text$mn:00000650
.text$mn:00000650                 push    ebp
.text$mn:00000651                 mov     ebp, esp
.text$mn:00000653                 push    ecx
.text$mn:00000654                 lea     eax, [ebp+arg_0]
.text$mn:00000657                 push    eax
.text$mn:00000658                 lea     ecx, [ebp+var_1]
.text$mn:0000065B                 push    ecx
.text$mn:0000065C                 call    ??$_Iter_cat@PAUToolBarButtonUnit@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUToolBarButtonUnit@@@Z ; std::_Iter_cat<ToolBarButtonUnit *>(ToolBarButtonUnit * const &)
.text$mn:00000661                 add     esp, 8
.text$mn:00000664                 mov     dl, [eax]
.text$mn:00000666                 movzx   eax, dl
.text$mn:00000669                 push    eax
.text$mn:0000066A                 mov     ecx, [ebp+arg_C]
.text$mn:0000066D                 push    ecx             ; unsigned int
.text$mn:0000066E                 mov     edx, [ebp+arg_8]
.text$mn:00000671                 push    edx             ; wchar_t *
.text$mn:00000672                 mov     eax, [ebp+arg_4]
.text$mn:00000675                 push    eax             ; int
.text$mn:00000676                 mov     ecx, [ebp+arg_0]
.text$mn:00000679                 push    ecx             ; int
.text$mn:0000067A                 call    ??$_Debug_range2@PAUToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:0000067F                 add     esp, 14h
.text$mn:00000682                 mov     esp, ebp
.text$mn:00000684                 pop     ebp
.text$mn:00000685                 retn
.text$mn:00000685 ??$_Debug_range@PAUToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@0PB_WI@Z endp
.text$mn:00000685
.text$mn:00000685 ; ---------------------------------------------------------------------------
.text$mn:00000686                 align 4
.text$mn:00000686 _text$mn        ends
.text$mn:00000686
.text$mn:00000688 ; ===========================================================================
.text$mn:00000688
.text$mn:00000688 ; Segment type: Pure code
.text$mn:00000688 ; Segment permissions: Read/Execute
.text$mn:00000688 _text$mn        segment para public 'CODE' use32
.text$mn:00000688                 assume cs:_text$mn
.text$mn:00000688                 ;org 688h
.text$mn:00000688 ; COMDAT (pick any)
.text$mn:00000688                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000688
.text$mn:00000688 ; =============== S U B R O U T I N E =======================================
.text$mn:00000688
.text$mn:00000688 ; Attributes: bp-based frame
.text$mn:00000688
.text$mn:00000688 ; int __cdecl std::_Debug_range<IconList *>(int, int, wchar_t *, unsigned int)
.text$mn:00000688                 public ??$_Debug_range@PAVIconList@@@std@@YAXPAVIconList@@0PB_WI@Z
.text$mn:00000688 ??$_Debug_range@PAVIconList@@@std@@YAXPAVIconList@@0PB_WI@Z proc near
.text$mn:00000688                                         ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:00000688
.text$mn:00000688 var_1           = byte ptr -1
.text$mn:00000688 arg_0           = dword ptr  8
.text$mn:00000688 arg_4           = dword ptr  0Ch
.text$mn:00000688 arg_8           = dword ptr  10h
.text$mn:00000688 arg_C           = dword ptr  14h
.text$mn:00000688
.text$mn:00000688                 push    ebp
.text$mn:00000689                 mov     ebp, esp
.text$mn:0000068B                 push    ecx
.text$mn:0000068C                 lea     eax, [ebp+arg_0]
.text$mn:0000068F                 push    eax
.text$mn:00000690                 lea     ecx, [ebp+var_1]
.text$mn:00000693                 push    ecx
.text$mn:00000694                 call    ??$_Iter_cat@PAVIconList@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVIconList@@@Z ; std::_Iter_cat<IconList *>(IconList * const &)
.text$mn:00000699                 add     esp, 8
.text$mn:0000069C                 mov     dl, [eax]
.text$mn:0000069E                 movzx   eax, dl
.text$mn:000006A1                 push    eax
.text$mn:000006A2                 mov     ecx, [ebp+arg_C]
.text$mn:000006A5                 push    ecx             ; unsigned int
.text$mn:000006A6                 mov     edx, [ebp+arg_8]
.text$mn:000006A9                 push    edx             ; wchar_t *
.text$mn:000006AA                 mov     eax, [ebp+arg_4]
.text$mn:000006AD                 push    eax             ; int
.text$mn:000006AE                 mov     ecx, [ebp+arg_0]
.text$mn:000006B1                 push    ecx             ; int
.text$mn:000006B2                 call    ??$_Debug_range2@PAVIconList@@@std@@YAXPAVIconList@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<IconList *>(IconList *,IconList *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:000006B7                 add     esp, 14h
.text$mn:000006BA                 mov     esp, ebp
.text$mn:000006BC                 pop     ebp
.text$mn:000006BD                 retn
.text$mn:000006BD ??$_Debug_range@PAVIconList@@@std@@YAXPAVIconList@@0PB_WI@Z endp
.text$mn:000006BD
.text$mn:000006BD ; ---------------------------------------------------------------------------
.text$mn:000006BE                 align 10h
.text$mn:000006BE _text$mn        ends
.text$mn:000006BE
.text$mn:000006C0 ; ===========================================================================
.text$mn:000006C0
.text$mn:000006C0 ; Segment type: Pure code
.text$mn:000006C0 ; Segment permissions: Read/Execute
.text$mn:000006C0 _text$mn        segment para public 'CODE' use32
.text$mn:000006C0                 assume cs:_text$mn
.text$mn:000006C0                 ;org 6C0h
.text$mn:000006C0 ; COMDAT (pick any)
.text$mn:000006C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000006C0
.text$mn:000006C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000006C0
.text$mn:000006C0 ; Attributes: bp-based frame
.text$mn:000006C0
.text$mn:000006C0 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>>>(struct ToolBarButtonUnit *, struct ToolBarButtonUnit *, struct std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>> &)
.text$mn:000006C0                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAXPAUToolBarButtonUnit@@0AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z
.text$mn:000006C0 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAXPAUToolBarButtonUnit@@0AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z proc near
.text$mn:000006C0                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Destroy(ToolBarButtonUnit *,ToolBarButtonUnit *)+21p
.text$mn:000006C0
.text$mn:000006C0 var_1           = byte ptr -1
.text$mn:000006C0 arg_0           = dword ptr  8
.text$mn:000006C0 arg_4           = dword ptr  0Ch
.text$mn:000006C0 arg_8           = dword ptr  10h
.text$mn:000006C0
.text$mn:000006C0                 push    ebp
.text$mn:000006C1                 mov     ebp, esp
.text$mn:000006C3                 push    ecx
.text$mn:000006C4                 mov     eax, [ebp+arg_4]
.text$mn:000006C7                 push    eax
.text$mn:000006C8                 mov     ecx, [ebp+arg_0]
.text$mn:000006CB                 push    ecx
.text$mn:000006CC                 call    ??$_Ptr_cat@UToolBarButtonUnit@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUToolBarButtonUnit@@0@Z ; std::_Ptr_cat<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *)
.text$mn:000006D1                 add     esp, 8
.text$mn:000006D4                 mov     [ebp+var_1], al
.text$mn:000006D7                 movzx   edx, [ebp+var_1]
.text$mn:000006DB                 push    edx
.text$mn:000006DC                 mov     eax, [ebp+arg_8]
.text$mn:000006DF                 push    eax
.text$mn:000006E0                 mov     ecx, [ebp+arg_4]
.text$mn:000006E3                 push    ecx
.text$mn:000006E4                 mov     edx, [ebp+arg_0]
.text$mn:000006E7                 push    edx
.text$mn:000006E8                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAXPAUToolBarButtonUnit@@0AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000006ED                 add     esp, 10h
.text$mn:000006F0                 mov     esp, ebp
.text$mn:000006F2                 pop     ebp
.text$mn:000006F3                 retn
.text$mn:000006F3 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAXPAUToolBarButtonUnit@@0AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z endp
.text$mn:000006F3
.text$mn:000006F3 _text$mn        ends
.text$mn:000006F3
.text$mn:000006F4 ; ===========================================================================
.text$mn:000006F4
.text$mn:000006F4 ; Segment type: Pure code
.text$mn:000006F4 ; Segment permissions: Read/Execute
.text$mn:000006F4 _text$mn        segment para public 'CODE' use32
.text$mn:000006F4                 assume cs:_text$mn
.text$mn:000006F4                 ;org 6F4h
.text$mn:000006F4 ; COMDAT (pick any)
.text$mn:000006F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000006F4
.text$mn:000006F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000006F4
.text$mn:000006F4 ; Attributes: bp-based frame
.text$mn:000006F4
.text$mn:000006F4 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>>>(struct ToolBarButtonUnit *, struct ToolBarButtonUnit *, struct std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:000006F4                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAXPAUToolBarButtonUnit@@0AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000006F4 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAXPAUToolBarButtonUnit@@0AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000006F4                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+28p
.text$mn:000006F4
.text$mn:000006F4 arg_0           = dword ptr  8
.text$mn:000006F4 arg_4           = dword ptr  0Ch
.text$mn:000006F4 arg_8           = dword ptr  10h
.text$mn:000006F4
.text$mn:000006F4                 push    ebp
.text$mn:000006F5                 mov     ebp, esp
.text$mn:000006F7                 jmp     short loc_702
.text$mn:000006F9 ; ---------------------------------------------------------------------------
.text$mn:000006F9
.text$mn:000006F9 loc_6F9:                                ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:000006F9                 mov     eax, [ebp+arg_0]
.text$mn:000006FC                 add     eax, 14h
.text$mn:000006FF                 mov     [ebp+arg_0], eax
.text$mn:00000702
.text$mn:00000702 loc_702:                                ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00000702                 mov     ecx, [ebp+arg_0]
.text$mn:00000705                 cmp     ecx, [ebp+arg_4]
.text$mn:00000708                 jz      short loc_718
.text$mn:0000070A                 mov     edx, [ebp+arg_0]
.text$mn:0000070D                 push    edx
.text$mn:0000070E                 mov     ecx, [ebp+arg_8]
.text$mn:00000711                 call    ??$destroy@UToolBarButtonUnit@@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@@Z ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::destroy<ToolBarButtonUnit>(ToolBarButtonUnit *)
.text$mn:00000716                 jmp     short loc_6F9
.text$mn:00000718 ; ---------------------------------------------------------------------------
.text$mn:00000718
.text$mn:00000718 loc_718:                                ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00000718                 pop     ebp
.text$mn:00000719                 retn
.text$mn:00000719 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAXPAUToolBarButtonUnit@@0AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00000719
.text$mn:00000719 ; ---------------------------------------------------------------------------
.text$mn:0000071A                 align 4
.text$mn:0000071A _text$mn        ends
.text$mn:0000071A
.text$mn:0000071C ; ===========================================================================
.text$mn:0000071C
.text$mn:0000071C ; Segment type: Pure code
.text$mn:0000071C ; Segment permissions: Read/Execute
.text$mn:0000071C _text$mn        segment para public 'CODE' use32
.text$mn:0000071C                 assume cs:_text$mn
.text$mn:0000071C                 ;org 71Ch
.text$mn:0000071C ; COMDAT (pick any)
.text$mn:0000071C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000071C
.text$mn:0000071C ; =============== S U B R O U T I N E =======================================
.text$mn:0000071C
.text$mn:0000071C ; Attributes: bp-based frame
.text$mn:0000071C
.text$mn:0000071C ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class IconList>>>(class IconList *, class IconList *, struct std::_Wrap_alloc<class std::allocator<class IconList>> &)
.text$mn:0000071C                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAXPAVIconList@@0AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z
.text$mn:0000071C ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAXPAVIconList@@0AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z proc near
.text$mn:0000071C                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Destroy(IconList *,IconList *)+21p
.text$mn:0000071C
.text$mn:0000071C var_1           = byte ptr -1
.text$mn:0000071C arg_0           = dword ptr  8
.text$mn:0000071C arg_4           = dword ptr  0Ch
.text$mn:0000071C arg_8           = dword ptr  10h
.text$mn:0000071C
.text$mn:0000071C                 push    ebp
.text$mn:0000071D                 mov     ebp, esp
.text$mn:0000071F                 push    ecx
.text$mn:00000720                 mov     eax, [ebp+arg_4]
.text$mn:00000723                 push    eax
.text$mn:00000724                 mov     ecx, [ebp+arg_0]
.text$mn:00000727                 push    ecx
.text$mn:00000728                 call    ??$_Ptr_cat@VIconList@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVIconList@@0@Z ; std::_Ptr_cat<IconList,IconList>(IconList *,IconList *)
.text$mn:0000072D                 add     esp, 8
.text$mn:00000730                 mov     [ebp+var_1], al
.text$mn:00000733                 movzx   edx, [ebp+var_1]
.text$mn:00000737                 push    edx
.text$mn:00000738                 mov     eax, [ebp+arg_8]
.text$mn:0000073B                 push    eax
.text$mn:0000073C                 mov     ecx, [ebp+arg_4]
.text$mn:0000073F                 push    ecx
.text$mn:00000740                 mov     edx, [ebp+arg_0]
.text$mn:00000743                 push    edx
.text$mn:00000744                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAXPAVIconList@@0AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00000749                 add     esp, 10h
.text$mn:0000074C                 mov     esp, ebp
.text$mn:0000074E                 pop     ebp
.text$mn:0000074F                 retn
.text$mn:0000074F ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAXPAVIconList@@0AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z endp
.text$mn:0000074F
.text$mn:0000074F _text$mn        ends
.text$mn:0000074F
.text$mn:00000750 ; ===========================================================================
.text$mn:00000750
.text$mn:00000750 ; Segment type: Pure code
.text$mn:00000750 ; Segment permissions: Read/Execute
.text$mn:00000750 _text$mn        segment para public 'CODE' use32
.text$mn:00000750                 assume cs:_text$mn
.text$mn:00000750                 ;org 750h
.text$mn:00000750 ; COMDAT (pick any)
.text$mn:00000750                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000750
.text$mn:00000750 ; =============== S U B R O U T I N E =======================================
.text$mn:00000750
.text$mn:00000750 ; Attributes: bp-based frame
.text$mn:00000750
.text$mn:00000750 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class IconList>>>(class IconList *, class IconList *, struct std::_Wrap_alloc<class std::allocator<class IconList>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:00000750                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAXPAVIconList@@0AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00000750 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAXPAVIconList@@0AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00000750                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+28p
.text$mn:00000750
.text$mn:00000750 arg_0           = dword ptr  8
.text$mn:00000750 arg_4           = dword ptr  0Ch
.text$mn:00000750 arg_8           = dword ptr  10h
.text$mn:00000750
.text$mn:00000750                 push    ebp
.text$mn:00000751                 mov     ebp, esp
.text$mn:00000753                 jmp     short loc_75E
.text$mn:00000755 ; ---------------------------------------------------------------------------
.text$mn:00000755
.text$mn:00000755 loc_755:                                ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00000755                 mov     eax, [ebp+arg_0]
.text$mn:00000758                 add     eax, 14h
.text$mn:0000075B                 mov     [ebp+arg_0], eax
.text$mn:0000075E
.text$mn:0000075E loc_75E:                                ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:0000075E                 mov     ecx, [ebp+arg_0]
.text$mn:00000761                 cmp     ecx, [ebp+arg_4]
.text$mn:00000764                 jz      short loc_774
.text$mn:00000766                 mov     edx, [ebp+arg_0]
.text$mn:00000769                 push    edx
.text$mn:0000076A                 mov     ecx, [ebp+arg_8]
.text$mn:0000076D                 call    ??$destroy@VIconList@@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@@Z ; std::_Wrap_alloc<std::allocator<IconList>>::destroy<IconList>(IconList *)
.text$mn:00000772                 jmp     short loc_755
.text$mn:00000774 ; ---------------------------------------------------------------------------
.text$mn:00000774
.text$mn:00000774 loc_774:                                ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00000774                 pop     ebp
.text$mn:00000775                 retn
.text$mn:00000775 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAXPAVIconList@@0AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00000775
.text$mn:00000775 ; ---------------------------------------------------------------------------
.text$mn:00000776                 align 4
.text$mn:00000776 _text$mn        ends
.text$mn:00000776
.text$mn:00000778 ; ===========================================================================
.text$mn:00000778
.text$mn:00000778 ; Segment type: Pure code
.text$mn:00000778 ; Segment permissions: Read/Execute
.text$mn:00000778 _text$mn        segment para public 'CODE' use32
.text$mn:00000778                 assume cs:_text$mn
.text$mn:00000778                 ;org 778h
.text$mn:00000778 ; COMDAT (pick any)
.text$mn:00000778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000778
.text$mn:00000778 ; =============== S U B R O U T I N E =======================================
.text$mn:00000778
.text$mn:00000778 ; Attributes: bp-based frame
.text$mn:00000778
.text$mn:00000778 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct ToolBarButtonUnit *>(struct ToolBarButtonUnit * const &)
.text$mn:00000778                 public ??$_Iter_cat@PAUToolBarButtonUnit@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUToolBarButtonUnit@@@Z
.text$mn:00000778 ??$_Iter_cat@PAUToolBarButtonUnit@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUToolBarButtonUnit@@@Z proc near
.text$mn:00000778                                         ; CODE XREF: std::_Debug_range<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint)+Cp
.text$mn:00000778
.text$mn:00000778 var_1           = byte ptr -1
.text$mn:00000778 arg_0           = dword ptr  8
.text$mn:00000778
.text$mn:00000778                 push    ebp
.text$mn:00000779                 mov     ebp, esp
.text$mn:0000077B                 push    ecx
.text$mn:0000077C                 mov     eax, [ebp+arg_0]
.text$mn:0000077F                 mov     cl, [ebp+var_1]
.text$mn:00000782                 mov     [eax], cl
.text$mn:00000784                 mov     eax, [ebp+arg_0]
.text$mn:00000787                 mov     esp, ebp
.text$mn:00000789                 pop     ebp
.text$mn:0000078A                 retn
.text$mn:0000078A ??$_Iter_cat@PAUToolBarButtonUnit@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUToolBarButtonUnit@@@Z endp
.text$mn:0000078A
.text$mn:0000078A ; ---------------------------------------------------------------------------
.text$mn:0000078B                 align 4
.text$mn:0000078B _text$mn        ends
.text$mn:0000078B
.text$mn:0000078C ; ===========================================================================
.text$mn:0000078C
.text$mn:0000078C ; Segment type: Pure code
.text$mn:0000078C ; Segment permissions: Read/Execute
.text$mn:0000078C _text$mn        segment para public 'CODE' use32
.text$mn:0000078C                 assume cs:_text$mn
.text$mn:0000078C                 ;org 78Ch
.text$mn:0000078C ; COMDAT (pick any)
.text$mn:0000078C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000078C
.text$mn:0000078C ; =============== S U B R O U T I N E =======================================
.text$mn:0000078C
.text$mn:0000078C ; Attributes: bp-based frame
.text$mn:0000078C
.text$mn:0000078C ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class IconList *>(class IconList * const &)
.text$mn:0000078C                 public ??$_Iter_cat@PAVIconList@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVIconList@@@Z
.text$mn:0000078C ??$_Iter_cat@PAVIconList@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVIconList@@@Z proc near
.text$mn:0000078C                                         ; CODE XREF: std::_Debug_range<IconList *>(IconList *,IconList *,wchar_t const *,uint)+Cp
.text$mn:0000078C
.text$mn:0000078C var_1           = byte ptr -1
.text$mn:0000078C arg_0           = dword ptr  8
.text$mn:0000078C
.text$mn:0000078C                 push    ebp
.text$mn:0000078D                 mov     ebp, esp
.text$mn:0000078F                 push    ecx
.text$mn:00000790                 mov     eax, [ebp+arg_0]
.text$mn:00000793                 mov     cl, [ebp+var_1]
.text$mn:00000796                 mov     [eax], cl
.text$mn:00000798                 mov     eax, [ebp+arg_0]
.text$mn:0000079B                 mov     esp, ebp
.text$mn:0000079D                 pop     ebp
.text$mn:0000079E                 retn
.text$mn:0000079E ??$_Iter_cat@PAVIconList@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVIconList@@@Z endp
.text$mn:0000079E
.text$mn:0000079E ; ---------------------------------------------------------------------------
.text$mn:0000079F                 align 10h
.text$mn:0000079F _text$mn        ends
.text$mn:0000079F
.text$mn:000007A0 ; ===========================================================================
.text$mn:000007A0
.text$mn:000007A0 ; Segment type: Pure code
.text$mn:000007A0 ; Segment permissions: Read/Execute
.text$mn:000007A0 _text$mn        segment para public 'CODE' use32
.text$mn:000007A0                 assume cs:_text$mn
.text$mn:000007A0                 ;org 7A0h
.text$mn:000007A0 ; COMDAT (pick any)
.text$mn:000007A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000007A0
.text$mn:000007A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000007A0
.text$mn:000007A0 ; Attributes: bp-based frame
.text$mn:000007A0
.text$mn:000007A0 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct ToolBarButtonUnit, struct ToolBarButtonUnit>(struct ToolBarButtonUnit *, struct ToolBarButtonUnit *)
.text$mn:000007A0                 public ??$_Ptr_cat@UToolBarButtonUnit@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUToolBarButtonUnit@@0@Z
.text$mn:000007A0 ??$_Ptr_cat@UToolBarButtonUnit@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUToolBarButtonUnit@@0@Z proc near
.text$mn:000007A0                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+Cp
.text$mn:000007A0                                         ; std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+Cp
.text$mn:000007A0
.text$mn:000007A0 var_1           = byte ptr -1
.text$mn:000007A0
.text$mn:000007A0                 push    ebp
.text$mn:000007A1                 mov     ebp, esp
.text$mn:000007A3                 push    ecx
.text$mn:000007A4                 mov     al, [ebp+var_1]
.text$mn:000007A7                 mov     esp, ebp
.text$mn:000007A9                 pop     ebp
.text$mn:000007AA                 retn
.text$mn:000007AA ??$_Ptr_cat@UToolBarButtonUnit@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUToolBarButtonUnit@@0@Z endp
.text$mn:000007AA
.text$mn:000007AA ; ---------------------------------------------------------------------------
.text$mn:000007AB                 align 4
.text$mn:000007AB _text$mn        ends
.text$mn:000007AB
.text$mn:000007AC ; ===========================================================================
.text$mn:000007AC
.text$mn:000007AC ; Segment type: Pure code
.text$mn:000007AC ; Segment permissions: Read/Execute
.text$mn:000007AC _text$mn        segment para public 'CODE' use32
.text$mn:000007AC                 assume cs:_text$mn
.text$mn:000007AC                 ;org 7ACh
.text$mn:000007AC ; COMDAT (pick any)
.text$mn:000007AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000007AC
.text$mn:000007AC ; =============== S U B R O U T I N E =======================================
.text$mn:000007AC
.text$mn:000007AC ; Attributes: bp-based frame
.text$mn:000007AC
.text$mn:000007AC ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class IconList, class IconList>(class IconList *, class IconList *)
.text$mn:000007AC                 public ??$_Ptr_cat@VIconList@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVIconList@@0@Z
.text$mn:000007AC ??$_Ptr_cat@VIconList@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVIconList@@0@Z proc near
.text$mn:000007AC                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+Cp
.text$mn:000007AC                                         ; std::_Uninit_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+Cp
.text$mn:000007AC
.text$mn:000007AC var_1           = byte ptr -1
.text$mn:000007AC
.text$mn:000007AC                 push    ebp
.text$mn:000007AD                 mov     ebp, esp
.text$mn:000007AF                 push    ecx
.text$mn:000007B0                 mov     al, [ebp+var_1]
.text$mn:000007B3                 mov     esp, ebp
.text$mn:000007B5                 pop     ebp
.text$mn:000007B6                 retn
.text$mn:000007B6 ??$_Ptr_cat@VIconList@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVIconList@@0@Z endp
.text$mn:000007B6
.text$mn:000007B6 ; ---------------------------------------------------------------------------
.text$mn:000007B7                 align 4
.text$mn:000007B7 _text$mn        ends
.text$mn:000007B7
.text$mn:000007B8 ; ===========================================================================
.text$mn:000007B8
.text$mn:000007B8 ; Segment type: Pure code
.text$mn:000007B8 ; Segment permissions: Read/Execute
.text$mn:000007B8 _text$mn        segment para public 'CODE' use32
.text$mn:000007B8                 assume cs:_text$mn
.text$mn:000007B8                 ;org 7B8h
.text$mn:000007B8 ; COMDAT (pick any)
.text$mn:000007B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000007B8
.text$mn:000007B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000007B8
.text$mn:000007B8 ; Attributes: bp-based frame
.text$mn:000007B8
.text$mn:000007B8 ; struct ToolBarButtonUnit * & __cdecl std::_Rechecked<struct ToolBarButtonUnit *, struct ToolBarButtonUnit *>(struct ToolBarButtonUnit * &, struct ToolBarButtonUnit *)
.text$mn:000007B8                 public ??$_Rechecked@PAUToolBarButtonUnit@@PAU1@@std@@YAAAPAUToolBarButtonUnit@@AAPAU1@PAU1@@Z
.text$mn:000007B8 ??$_Rechecked@PAUToolBarButtonUnit@@PAU1@@std@@YAAAPAUToolBarButtonUnit@@AAPAU1@PAU1@@Z proc near
.text$mn:000007B8                                         ; CODE XREF: std::_Uninitialized_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+3Bp
.text$mn:000007B8
.text$mn:000007B8 arg_0           = dword ptr  8
.text$mn:000007B8 arg_4           = dword ptr  0Ch
.text$mn:000007B8
.text$mn:000007B8                 push    ebp
.text$mn:000007B9                 mov     ebp, esp
.text$mn:000007BB                 mov     eax, [ebp+arg_0]
.text$mn:000007BE                 mov     ecx, [ebp+arg_4]
.text$mn:000007C1                 mov     [eax], ecx
.text$mn:000007C3                 mov     eax, [ebp+arg_0]
.text$mn:000007C6                 pop     ebp
.text$mn:000007C7                 retn
.text$mn:000007C7 ??$_Rechecked@PAUToolBarButtonUnit@@PAU1@@std@@YAAAPAUToolBarButtonUnit@@AAPAU1@PAU1@@Z endp
.text$mn:000007C7
.text$mn:000007C7 _text$mn        ends
.text$mn:000007C7
.text$mn:000007C8 ; ===========================================================================
.text$mn:000007C8
.text$mn:000007C8 ; Segment type: Pure code
.text$mn:000007C8 ; Segment permissions: Read/Execute
.text$mn:000007C8 _text$mn        segment para public 'CODE' use32
.text$mn:000007C8                 assume cs:_text$mn
.text$mn:000007C8                 ;org 7C8h
.text$mn:000007C8 ; COMDAT (pick any)
.text$mn:000007C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000007C8
.text$mn:000007C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000007C8
.text$mn:000007C8 ; Attributes: bp-based frame
.text$mn:000007C8
.text$mn:000007C8 ; class IconList * & __cdecl std::_Rechecked<class IconList *, class IconList *>(class IconList * &, class IconList *)
.text$mn:000007C8                 public ??$_Rechecked@PAVIconList@@PAV1@@std@@YAAAPAVIconList@@AAPAV1@PAV1@@Z
.text$mn:000007C8 ??$_Rechecked@PAVIconList@@PAV1@@std@@YAAAPAVIconList@@AAPAV1@PAV1@@Z proc near
.text$mn:000007C8                                         ; CODE XREF: std::_Uninitialized_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+3Bp
.text$mn:000007C8
.text$mn:000007C8 arg_0           = dword ptr  8
.text$mn:000007C8 arg_4           = dword ptr  0Ch
.text$mn:000007C8
.text$mn:000007C8                 push    ebp
.text$mn:000007C9                 mov     ebp, esp
.text$mn:000007CB                 mov     eax, [ebp+arg_0]
.text$mn:000007CE                 mov     ecx, [ebp+arg_4]
.text$mn:000007D1                 mov     [eax], ecx
.text$mn:000007D3                 mov     eax, [ebp+arg_0]
.text$mn:000007D6                 pop     ebp
.text$mn:000007D7                 retn
.text$mn:000007D7 ??$_Rechecked@PAVIconList@@PAV1@@std@@YAAAPAVIconList@@AAPAV1@PAV1@@Z endp
.text$mn:000007D7
.text$mn:000007D7 _text$mn        ends
.text$mn:000007D7
.text$mn:000007D8 ; ===========================================================================
.text$mn:000007D8
.text$mn:000007D8 ; Segment type: Pure code
.text$mn:000007D8 ; Segment permissions: Read/Execute
.text$mn:000007D8 _text$mn        segment para public 'CODE' use32
.text$mn:000007D8                 assume cs:_text$mn
.text$mn:000007D8                 ;org 7D8h
.text$mn:000007D8 ; COMDAT (pick any)
.text$mn:000007D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000007D8
.text$mn:000007D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000007D8
.text$mn:000007D8 ; Attributes: bp-based frame
.text$mn:000007D8
.text$mn:000007D8 ; protected: struct ToolBarButtonUnit * __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Umove<struct ToolBarButtonUnit *>(struct ToolBarButtonUnit *, struct ToolBarButtonUnit *, struct ToolBarButtonUnit *)
.text$mn:000007D8                 public ??$_Umove@PAUToolBarButtonUnit@@@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEPAUToolBarButtonUnit@@PAU2@00@Z
.text$mn:000007D8 ??$_Umove@PAUToolBarButtonUnit@@@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEPAUToolBarButtonUnit@@PAU2@00@Z proc near
.text$mn:000007D8                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+65p
.text$mn:000007D8
.text$mn:000007D8 var_8           = dword ptr -8
.text$mn:000007D8 var_1           = byte ptr -1
.text$mn:000007D8 arg_0           = dword ptr  8
.text$mn:000007D8 arg_4           = dword ptr  0Ch
.text$mn:000007D8 arg_8           = dword ptr  10h
.text$mn:000007D8
.text$mn:000007D8                 push    ebp
.text$mn:000007D9                 mov     ebp, esp
.text$mn:000007DB                 sub     esp, 8
.text$mn:000007DE                 mov     [ebp+var_8], ecx
.text$mn:000007E1                 lea     eax, [ebp+var_1]
.text$mn:000007E4                 push    eax
.text$mn:000007E5                 mov     ecx, [ebp+var_8]
.text$mn:000007E8                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)
.text$mn:000007ED                 lea     ecx, [ebp+var_1]
.text$mn:000007F0                 push    ecx
.text$mn:000007F1                 mov     edx, [ebp+arg_8]
.text$mn:000007F4                 push    edx
.text$mn:000007F5                 mov     eax, [ebp+arg_4]
.text$mn:000007F8                 push    eax
.text$mn:000007F9                 mov     ecx, [ebp+arg_0]
.text$mn:000007FC                 push    ecx
.text$mn:000007FD                 call    ??$_Uninitialized_move@PAUToolBarButtonUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z ; std::_Uninitialized_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)
.text$mn:00000802                 add     esp, 10h
.text$mn:00000805                 mov     esp, ebp
.text$mn:00000807                 pop     ebp
.text$mn:00000808                 retn    0Ch
.text$mn:00000808 ??$_Umove@PAUToolBarButtonUnit@@@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEPAUToolBarButtonUnit@@PAU2@00@Z endp
.text$mn:00000808
.text$mn:00000808 ; ---------------------------------------------------------------------------
.text$mn:0000080B                 align 4
.text$mn:0000080B _text$mn        ends
.text$mn:0000080B
.text$mn:0000080C ; ===========================================================================
.text$mn:0000080C
.text$mn:0000080C ; Segment type: Pure code
.text$mn:0000080C ; Segment permissions: Read/Execute
.text$mn:0000080C _text$mn        segment para public 'CODE' use32
.text$mn:0000080C                 assume cs:_text$mn
.text$mn:0000080C                 ;org 80Ch
.text$mn:0000080C ; COMDAT (pick any)
.text$mn:0000080C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000080C
.text$mn:0000080C ; =============== S U B R O U T I N E =======================================
.text$mn:0000080C
.text$mn:0000080C ; Attributes: bp-based frame
.text$mn:0000080C
.text$mn:0000080C ; protected: class IconList * __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Umove<class IconList *>(class IconList *, class IconList *, class IconList *)
.text$mn:0000080C                 public ??$_Umove@PAVIconList@@@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEPAVIconList@@PAV2@00@Z
.text$mn:0000080C ??$_Umove@PAVIconList@@@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEPAVIconList@@PAV2@00@Z proc near
.text$mn:0000080C                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+65p
.text$mn:0000080C
.text$mn:0000080C var_8           = dword ptr -8
.text$mn:0000080C var_1           = byte ptr -1
.text$mn:0000080C arg_0           = dword ptr  8
.text$mn:0000080C arg_4           = dword ptr  0Ch
.text$mn:0000080C arg_8           = dword ptr  10h
.text$mn:0000080C
.text$mn:0000080C                 push    ebp
.text$mn:0000080D                 mov     ebp, esp
.text$mn:0000080F                 sub     esp, 8
.text$mn:00000812                 mov     [ebp+var_8], ecx
.text$mn:00000815                 lea     eax, [ebp+var_1]
.text$mn:00000818                 push    eax
.text$mn:00000819                 mov     ecx, [ebp+var_8]
.text$mn:0000081C                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)
.text$mn:00000821                 lea     ecx, [ebp+var_1]
.text$mn:00000824                 push    ecx
.text$mn:00000825                 mov     edx, [ebp+arg_8]
.text$mn:00000828                 push    edx
.text$mn:00000829                 mov     eax, [ebp+arg_4]
.text$mn:0000082C                 push    eax
.text$mn:0000082D                 mov     ecx, [ebp+arg_0]
.text$mn:00000830                 push    ecx
.text$mn:00000831                 call    ??$_Uninitialized_move@PAVIconList@@PAV1@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z ; std::_Uninitialized_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)
.text$mn:00000836                 add     esp, 10h
.text$mn:00000839                 mov     esp, ebp
.text$mn:0000083B                 pop     ebp
.text$mn:0000083C                 retn    0Ch
.text$mn:0000083C ??$_Umove@PAVIconList@@@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEPAVIconList@@PAV2@00@Z endp
.text$mn:0000083C
.text$mn:0000083C ; ---------------------------------------------------------------------------
.text$mn:0000083F                 align 10h
.text$mn:0000083F _text$mn        ends
.text$mn:0000083F
.text$mn:00000840 ; ===========================================================================
.text$mn:00000840
.text$mn:00000840 ; Segment type: Pure code
.text$mn:00000840 ; Segment permissions: Read/Execute
.text$mn:00000840 _text$mn        segment para public 'CODE' use32
.text$mn:00000840                 assume cs:_text$mn
.text$mn:00000840                 ;org 840h
.text$mn:00000840 ; COMDAT (pick any)
.text$mn:00000840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000840
.text$mn:00000840 ; =============== S U B R O U T I N E =======================================
.text$mn:00000840
.text$mn:00000840 ; Attributes: bp-based frame
.text$mn:00000840
.text$mn:00000840 ; struct ToolBarButtonUnit * __cdecl std::_Unchecked<struct ToolBarButtonUnit *>(struct ToolBarButtonUnit *)
.text$mn:00000840                 public ??$_Unchecked@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z
.text$mn:00000840 ??$_Unchecked@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z proc near
.text$mn:00000840                                         ; CODE XREF: std::_Uninitialized_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+Bp
.text$mn:00000840                                         ; std::_Uninitialized_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+18p ...
.text$mn:00000840
.text$mn:00000840 arg_0           = dword ptr  8
.text$mn:00000840
.text$mn:00000840                 push    ebp
.text$mn:00000841                 mov     ebp, esp
.text$mn:00000843                 mov     eax, [ebp+arg_0]
.text$mn:00000846                 pop     ebp
.text$mn:00000847                 retn
.text$mn:00000847 ??$_Unchecked@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z endp
.text$mn:00000847
.text$mn:00000847 _text$mn        ends
.text$mn:00000847
.text$mn:00000848 ; ===========================================================================
.text$mn:00000848
.text$mn:00000848 ; Segment type: Pure code
.text$mn:00000848 ; Segment permissions: Read/Execute
.text$mn:00000848 _text$mn        segment para public 'CODE' use32
.text$mn:00000848                 assume cs:_text$mn
.text$mn:00000848                 ;org 848h
.text$mn:00000848 ; COMDAT (pick any)
.text$mn:00000848                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000848
.text$mn:00000848 ; =============== S U B R O U T I N E =======================================
.text$mn:00000848
.text$mn:00000848 ; Attributes: bp-based frame
.text$mn:00000848
.text$mn:00000848 ; class IconList * __cdecl std::_Unchecked<class IconList *>(class IconList *)
.text$mn:00000848                 public ??$_Unchecked@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z
.text$mn:00000848 ??$_Unchecked@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z proc near
.text$mn:00000848                                         ; CODE XREF: std::_Uninitialized_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+Bp
.text$mn:00000848                                         ; std::_Uninitialized_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+18p ...
.text$mn:00000848
.text$mn:00000848 arg_0           = dword ptr  8
.text$mn:00000848
.text$mn:00000848                 push    ebp
.text$mn:00000849                 mov     ebp, esp
.text$mn:0000084B                 mov     eax, [ebp+arg_0]
.text$mn:0000084E                 pop     ebp
.text$mn:0000084F                 retn
.text$mn:0000084F ??$_Unchecked@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z endp
.text$mn:0000084F
.text$mn:0000084F _text$mn        ends
.text$mn:0000084F
.text$mn:00000850 ; ===========================================================================
.text$mn:00000850
.text$mn:00000850 ; Segment type: Pure code
.text$mn:00000850 ; Segment permissions: Read/Execute
.text$mn:00000850 _text$mn        segment para public 'CODE' use32
.text$mn:00000850                 assume cs:_text$mn
.text$mn:00000850                 ;org 850h
.text$mn:00000850 ; COMDAT (pick any)
.text$mn:00000850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000850
.text$mn:00000850 ; =============== S U B R O U T I N E =======================================
.text$mn:00000850
.text$mn:00000850 ; Attributes: bp-based frame
.text$mn:00000850
.text$mn:00000850 ; int __cdecl std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(int, int, void *, int)
.text$mn:00000850                 public ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z
.text$mn:00000850 ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z proc near
.text$mn:00000850                                         ; CODE XREF: std::_Uninitialized_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+2Ep
.text$mn:00000850
.text$mn:00000850 var_1           = byte ptr -1
.text$mn:00000850 arg_0           = dword ptr  8
.text$mn:00000850 arg_4           = dword ptr  0Ch
.text$mn:00000850 arg_8           = dword ptr  10h
.text$mn:00000850 arg_C           = dword ptr  14h
.text$mn:00000850
.text$mn:00000850                 push    ebp
.text$mn:00000851                 mov     ebp, esp
.text$mn:00000853                 push    ecx
.text$mn:00000854                 mov     eax, [ebp+arg_8]
.text$mn:00000857                 push    eax
.text$mn:00000858                 mov     ecx, [ebp+arg_0]
.text$mn:0000085B                 push    ecx
.text$mn:0000085C                 call    ??$_Ptr_cat@UToolBarButtonUnit@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUToolBarButtonUnit@@0@Z ; std::_Ptr_cat<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *)
.text$mn:00000861                 add     esp, 8
.text$mn:00000864                 mov     [ebp+var_1], al
.text$mn:00000867                 movzx   edx, [ebp+var_1]
.text$mn:0000086B                 push    edx
.text$mn:0000086C                 mov     eax, [ebp+arg_0]
.text$mn:0000086F                 push    eax
.text$mn:00000870                 call    ??$_Val_type@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z ; std::_Val_type<ToolBarButtonUnit *>(ToolBarButtonUnit *)
.text$mn:00000875                 add     esp, 4
.text$mn:00000878                 push    eax
.text$mn:00000879                 mov     ecx, [ebp+arg_C]
.text$mn:0000087C                 push    ecx             ; int
.text$mn:0000087D                 mov     edx, [ebp+arg_8]
.text$mn:00000880                 push    edx             ; void *
.text$mn:00000881                 mov     eax, [ebp+arg_4]
.text$mn:00000884                 push    eax             ; int
.text$mn:00000885                 mov     ecx, [ebp+arg_0]
.text$mn:00000888                 push    ecx             ; int
.text$mn:00000889                 call    ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:0000088E                 add     esp, 18h
.text$mn:00000891                 mov     esp, ebp
.text$mn:00000893                 pop     ebp
.text$mn:00000894                 retn
.text$mn:00000894 ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z endp
.text$mn:00000894
.text$mn:00000894 ; ---------------------------------------------------------------------------
.text$mn:00000895                 align 4
.text$mn:00000895 _text$mn        ends
.text$mn:00000895
.text$mn:00000898 ; ===========================================================================
.text$mn:00000898
.text$mn:00000898 ; Segment type: Pure code
.text$mn:00000898 ; Segment permissions: Read/Execute
.text$mn:00000898 _text$mn        segment para public 'CODE' use32
.text$mn:00000898                 assume cs:_text$mn
.text$mn:00000898                 ;org 898h
.text$mn:00000898 ; COMDAT (pick any)
.text$mn:00000898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000898
.text$mn:00000898 ; =============== S U B R O U T I N E =======================================
.text$mn:00000898
.text$mn:00000898 ; Attributes: bp-based frame
.text$mn:00000898
.text$mn:00000898 ; int __cdecl std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(int, int, void *, int)
.text$mn:00000898                 public ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00000898 ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00000898                                         ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+39p
.text$mn:00000898
.text$mn:00000898 var_14          = dword ptr -14h
.text$mn:00000898 var_10          = dword ptr -10h
.text$mn:00000898 var_C           = dword ptr -0Ch
.text$mn:00000898 var_4           = dword ptr -4
.text$mn:00000898 arg_0           = dword ptr  8
.text$mn:00000898 arg_4           = dword ptr  0Ch
.text$mn:00000898 arg_8           = dword ptr  10h
.text$mn:00000898 arg_C           = dword ptr  14h
.text$mn:00000898
.text$mn:00000898 ; FUNCTION CHUNK AT .text$mn:0000095F SIZE 00000009 BYTES
.text$mn:00000898 ; FUNCTION CHUNK AT .text$mn:0000096F SIZE 00000015 BYTES
.text$mn:00000898
.text$mn:00000898                 push    ebp
.text$mn:00000899                 mov     ebp, esp
.text$mn:0000089B                 push    0FFFFFFFFh
.text$mn:0000089D                 push    offset __ehhandler$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000008A2                 mov     eax, large fs:0
.text$mn:000008A8                 push    eax
.text$mn:000008A9                 push    ecx
.text$mn:000008AA                 push    ecx
.text$mn:000008AB                 push    ebx
.text$mn:000008AC                 push    esi
.text$mn:000008AD                 push    edi
.text$mn:000008AE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000008B3                 xor     eax, ebp
.text$mn:000008B5                 push    eax
.text$mn:000008B6                 lea     eax, [ebp+var_C]
.text$mn:000008B9                 mov     large fs:0, eax
.text$mn:000008BF                 mov     [ebp+var_10], esp
.text$mn:000008C2                 push    1B6h            ; unsigned int
.text$mn:000008C7                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000008CC                 mov     eax, [ebp+arg_4]
.text$mn:000008CF                 push    eax             ; int
.text$mn:000008D0                 mov     ecx, [ebp+arg_0]
.text$mn:000008D3                 push    ecx             ; int
.text$mn:000008D4                 call    ??$_Debug_range@PAUToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@0PB_WI@Z ; std::_Debug_range<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint)
.text$mn:000008D9                 add     esp, 10h
.text$mn:000008DC                 push    1B7h            ; unsigned int
.text$mn:000008E1                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000008E6                 mov     edx, [ebp+arg_8]
.text$mn:000008E9                 push    edx             ; int
.text$mn:000008EA                 call    ??$_Debug_pointer@UToolBarButtonUnit@@@std@@YAXPAUToolBarButtonUnit@@PB_WI@Z ; std::_Debug_pointer<ToolBarButtonUnit>(ToolBarButtonUnit *,wchar_t const *,uint)
.text$mn:000008EF                 add     esp, 0Ch
.text$mn:000008F2                 mov     eax, [ebp+arg_8]
.text$mn:000008F5                 mov     [ebp+var_14], eax
.text$mn:000008F8                 mov     [ebp+var_4], 0
.text$mn:000008FF                 jmp     short loc_913
.text$mn:00000901 ; ---------------------------------------------------------------------------
.text$mn:00000901
.text$mn:00000901 loc_901:                                ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00000901                 mov     ecx, [ebp+arg_8]
.text$mn:00000904                 add     ecx, 14h
.text$mn:00000907                 mov     [ebp+arg_8], ecx
.text$mn:0000090A                 mov     edx, [ebp+arg_0]
.text$mn:0000090D                 add     edx, 14h
.text$mn:00000910                 mov     [ebp+arg_0], edx
.text$mn:00000913
.text$mn:00000913 loc_913:                                ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00000913                 mov     eax, [ebp+arg_0]
.text$mn:00000916                 cmp     eax, [ebp+arg_4]
.text$mn:00000919                 jz      short loc_92D
.text$mn:0000091B                 mov     ecx, [ebp+arg_0]
.text$mn:0000091E                 push    ecx             ; int
.text$mn:0000091F                 mov     edx, [ebp+arg_8]
.text$mn:00000922                 push    edx             ; void *
.text$mn:00000923                 mov     ecx, [ebp+arg_C]
.text$mn:00000926                 call    ??$construct@UToolBarButtonUnit@@U1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)
.text$mn:0000092B                 jmp     short loc_901
.text$mn:0000092D ; ---------------------------------------------------------------------------
.text$mn:0000092D
.text$mn:0000092D loc_92D:                                ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:0000092D                 jmp     short loc_95F
.text$mn:0000092D ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:0000092D
.text$mn:0000092F
.text$mn:0000092F ; =============== S U B R O U T I N E =======================================
.text$mn:0000092F
.text$mn:0000092F ; Attributes: noreturn
.text$mn:0000092F
.text$mn:0000092F __catch$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:0000092F                                         ; DATA XREF: .xdata$x:000023E8o
.text$mn:0000092F                 jmp     short loc_93A
.text$mn:00000931 ; ---------------------------------------------------------------------------
.text$mn:00000931
.text$mn:00000931 loc_931:                                ; CODE XREF: __catch$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00000931                 mov     eax, [ebp-14h]
.text$mn:00000934                 add     eax, 14h
.text$mn:00000937                 mov     [ebp-14h], eax
.text$mn:0000093A
.text$mn:0000093A loc_93A:                                ; CODE XREF: __catch$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:0000093A                 mov     ecx, [ebp-14h]
.text$mn:0000093D                 cmp     ecx, [ebp+10h]
.text$mn:00000940                 jz      short loc_950
.text$mn:00000942                 mov     edx, [ebp-14h]
.text$mn:00000945                 push    edx
.text$mn:00000946                 mov     ecx, [ebp+14h]
.text$mn:00000949                 call    ??$destroy@UToolBarButtonUnit@@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@@Z ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::destroy<ToolBarButtonUnit>(ToolBarButtonUnit *)
.text$mn:0000094E                 jmp     short loc_931
.text$mn:00000950 ; ---------------------------------------------------------------------------
.text$mn:00000950
.text$mn:00000950 loc_950:                                ; CODE XREF: __catch$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00000950                 push    0
.text$mn:00000952                 push    0
.text$mn:00000954                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00000954 __catch$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00000954
.text$mn:00000959 ; ---------------------------------------------------------------------------
.text$mn:00000959                 mov     eax, offset $LN13_0
.text$mn:0000095E                 retn
.text$mn:0000095F ; ---------------------------------------------------------------------------
.text$mn:0000095F ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000095F
.text$mn:0000095F loc_95F:                                ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag):loc_92Dj
.text$mn:0000095F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000966                 jmp     short loc_96F
.text$mn:00000966 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00000968
.text$mn:00000968 ; =============== S U B R O U T I N E =======================================
.text$mn:00000968
.text$mn:00000968
.text$mn:00000968 $LN13_0         proc near               ; DATA XREF: .text$mn:00000959o
.text$mn:00000968                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00000968 $LN13_0         endp ; sp-analysis failed
.text$mn:00000968
.text$mn:0000096F ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:0000096F
.text$mn:0000096F loc_96F:                                ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:0000096F                 mov     eax, [ebp+arg_8]
.text$mn:00000972                 mov     ecx, [ebp+var_C]
.text$mn:00000975                 mov     large fs:0, ecx
.text$mn:0000097C                 pop     ecx
.text$mn:0000097D                 pop     edi
.text$mn:0000097E                 pop     esi
.text$mn:0000097F                 pop     ebx
.text$mn:00000980                 mov     esp, ebp
.text$mn:00000982                 pop     ebp
.text$mn:00000983                 retn
.text$mn:00000983 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00000983 _text$mn        ends
.text$mn:00000983
.text$x:00000984 ; ===========================================================================
.text$x:00000984
.text$x:00000984 ; Segment type: Pure code
.text$x:00000984 ; Segment permissions: Read/Execute
.text$x:00000984 _text$x         segment para public 'CODE' use32
.text$x:00000984                 assume cs:_text$x
.text$x:00000984                 ;org 984h
.text$x:00000984 ; COMDAT (pick associative to section at 898)
.text$x:00000984                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000984
.text$x:00000984 ; =============== S U B R O U T I N E =======================================
.text$x:00000984
.text$x:00000984
.text$x:00000984 __ehhandler$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00000984                                         ; DATA XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00000984
.text$x:00000984 arg_4           = dword ptr  8
.text$x:00000984
.text$x:00000984                 mov     edx, [esp+arg_4]
.text$x:00000988                 lea     eax, [edx+0Ch]
.text$x:0000098B                 mov     ecx, [edx-18h]
.text$x:0000098E                 xor     ecx, eax
.text$x:00000990                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000995                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:0000099A                 jmp     ___CxxFrameHandler3
.text$x:0000099A __ehhandler$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:0000099A
.text$x:0000099A ; ---------------------------------------------------------------------------
.text$x:0000099F                 align 10h
.text$x:0000099F _text$x         ends
.text$x:0000099F
.text$mn:000009A0 ; ===========================================================================
.text$mn:000009A0
.text$mn:000009A0 ; Segment type: Pure code
.text$mn:000009A0 ; Segment permissions: Read/Execute
.text$mn:000009A0 _text$mn        segment para public 'CODE' use32
.text$mn:000009A0                 assume cs:_text$mn
.text$mn:000009A0                 ;org 9A0h
.text$mn:000009A0 ; COMDAT (pick any)
.text$mn:000009A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000009A0
.text$mn:000009A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000009A0
.text$mn:000009A0 ; Attributes: bp-based frame
.text$mn:000009A0
.text$mn:000009A0 ; int __cdecl std::_Uninit_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(int, int, void *, int)
.text$mn:000009A0                 public ??$_Uninit_move@PAVIconList@@PAV1@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z
.text$mn:000009A0 ??$_Uninit_move@PAVIconList@@PAV1@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z proc near
.text$mn:000009A0                                         ; CODE XREF: std::_Uninitialized_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+2Ep
.text$mn:000009A0
.text$mn:000009A0 var_1           = byte ptr -1
.text$mn:000009A0 arg_0           = dword ptr  8
.text$mn:000009A0 arg_4           = dword ptr  0Ch
.text$mn:000009A0 arg_8           = dword ptr  10h
.text$mn:000009A0 arg_C           = dword ptr  14h
.text$mn:000009A0
.text$mn:000009A0                 push    ebp
.text$mn:000009A1                 mov     ebp, esp
.text$mn:000009A3                 push    ecx
.text$mn:000009A4                 mov     eax, [ebp+arg_8]
.text$mn:000009A7                 push    eax
.text$mn:000009A8                 mov     ecx, [ebp+arg_0]
.text$mn:000009AB                 push    ecx
.text$mn:000009AC                 call    ??$_Ptr_cat@VIconList@@V1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAVIconList@@0@Z ; std::_Ptr_cat<IconList,IconList>(IconList *,IconList *)
.text$mn:000009B1                 add     esp, 8
.text$mn:000009B4                 mov     [ebp+var_1], al
.text$mn:000009B7                 movzx   edx, [ebp+var_1]
.text$mn:000009BB                 push    edx
.text$mn:000009BC                 mov     eax, [ebp+arg_0]
.text$mn:000009BF                 push    eax
.text$mn:000009C0                 call    ??$_Val_type@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z ; std::_Val_type<IconList *>(IconList *)
.text$mn:000009C5                 add     esp, 4
.text$mn:000009C8                 push    eax
.text$mn:000009C9                 mov     ecx, [ebp+arg_C]
.text$mn:000009CC                 push    ecx             ; int
.text$mn:000009CD                 mov     edx, [ebp+arg_8]
.text$mn:000009D0                 push    edx             ; void *
.text$mn:000009D1                 mov     eax, [ebp+arg_4]
.text$mn:000009D4                 push    eax             ; int
.text$mn:000009D5                 mov     ecx, [ebp+arg_0]
.text$mn:000009D8                 push    ecx             ; int
.text$mn:000009D9                 call    ??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000009DE                 add     esp, 18h
.text$mn:000009E1                 mov     esp, ebp
.text$mn:000009E3                 pop     ebp
.text$mn:000009E4                 retn
.text$mn:000009E4 ??$_Uninit_move@PAVIconList@@PAV1@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z endp
.text$mn:000009E4
.text$mn:000009E4 ; ---------------------------------------------------------------------------
.text$mn:000009E5                 align 4
.text$mn:000009E5 _text$mn        ends
.text$mn:000009E5
.text$mn:000009E8 ; ===========================================================================
.text$mn:000009E8
.text$mn:000009E8 ; Segment type: Pure code
.text$mn:000009E8 ; Segment permissions: Read/Execute
.text$mn:000009E8 _text$mn        segment para public 'CODE' use32
.text$mn:000009E8                 assume cs:_text$mn
.text$mn:000009E8                 ;org 9E8h
.text$mn:000009E8 ; COMDAT (pick any)
.text$mn:000009E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000009E8
.text$mn:000009E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000009E8
.text$mn:000009E8 ; Attributes: bp-based frame
.text$mn:000009E8
.text$mn:000009E8 ; int __cdecl std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(int, int, void *, int)
.text$mn:000009E8                 public ??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000009E8 ??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000009E8                                         ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+39p
.text$mn:000009E8
.text$mn:000009E8 var_14          = dword ptr -14h
.text$mn:000009E8 var_10          = dword ptr -10h
.text$mn:000009E8 var_C           = dword ptr -0Ch
.text$mn:000009E8 var_4           = dword ptr -4
.text$mn:000009E8 arg_0           = dword ptr  8
.text$mn:000009E8 arg_4           = dword ptr  0Ch
.text$mn:000009E8 arg_8           = dword ptr  10h
.text$mn:000009E8 arg_C           = dword ptr  14h
.text$mn:000009E8
.text$mn:000009E8 ; FUNCTION CHUNK AT .text$mn:00000AAF SIZE 00000009 BYTES
.text$mn:000009E8 ; FUNCTION CHUNK AT .text$mn:00000ABF SIZE 00000015 BYTES
.text$mn:000009E8
.text$mn:000009E8                 push    ebp
.text$mn:000009E9                 mov     ebp, esp
.text$mn:000009EB                 push    0FFFFFFFFh
.text$mn:000009ED                 push    offset __ehhandler$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000009F2                 mov     eax, large fs:0
.text$mn:000009F8                 push    eax
.text$mn:000009F9                 push    ecx
.text$mn:000009FA                 push    ecx
.text$mn:000009FB                 push    ebx
.text$mn:000009FC                 push    esi
.text$mn:000009FD                 push    edi
.text$mn:000009FE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000A03                 xor     eax, ebp
.text$mn:00000A05                 push    eax
.text$mn:00000A06                 lea     eax, [ebp+var_C]
.text$mn:00000A09                 mov     large fs:0, eax
.text$mn:00000A0F                 mov     [ebp+var_10], esp
.text$mn:00000A12                 push    1B6h            ; unsigned int
.text$mn:00000A17                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00000A1C                 mov     eax, [ebp+arg_4]
.text$mn:00000A1F                 push    eax             ; int
.text$mn:00000A20                 mov     ecx, [ebp+arg_0]
.text$mn:00000A23                 push    ecx             ; int
.text$mn:00000A24                 call    ??$_Debug_range@PAVIconList@@@std@@YAXPAVIconList@@0PB_WI@Z ; std::_Debug_range<IconList *>(IconList *,IconList *,wchar_t const *,uint)
.text$mn:00000A29                 add     esp, 10h
.text$mn:00000A2C                 push    1B7h            ; unsigned int
.text$mn:00000A31                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00000A36                 mov     edx, [ebp+arg_8]
.text$mn:00000A39                 push    edx             ; int
.text$mn:00000A3A                 call    ??$_Debug_pointer@VIconList@@@std@@YAXPAVIconList@@PB_WI@Z ; std::_Debug_pointer<IconList>(IconList *,wchar_t const *,uint)
.text$mn:00000A3F                 add     esp, 0Ch
.text$mn:00000A42                 mov     eax, [ebp+arg_8]
.text$mn:00000A45                 mov     [ebp+var_14], eax
.text$mn:00000A48                 mov     [ebp+var_4], 0
.text$mn:00000A4F                 jmp     short loc_A63
.text$mn:00000A51 ; ---------------------------------------------------------------------------
.text$mn:00000A51
.text$mn:00000A51 loc_A51:                                ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00000A51                 mov     ecx, [ebp+arg_8]
.text$mn:00000A54                 add     ecx, 14h
.text$mn:00000A57                 mov     [ebp+arg_8], ecx
.text$mn:00000A5A                 mov     edx, [ebp+arg_0]
.text$mn:00000A5D                 add     edx, 14h
.text$mn:00000A60                 mov     [ebp+arg_0], edx
.text$mn:00000A63
.text$mn:00000A63 loc_A63:                                ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00000A63                 mov     eax, [ebp+arg_0]
.text$mn:00000A66                 cmp     eax, [ebp+arg_4]
.text$mn:00000A69                 jz      short loc_A7D
.text$mn:00000A6B                 mov     ecx, [ebp+arg_0]
.text$mn:00000A6E                 push    ecx             ; int
.text$mn:00000A6F                 mov     edx, [ebp+arg_8]
.text$mn:00000A72                 push    edx             ; void *
.text$mn:00000A73                 mov     ecx, [ebp+arg_C]
.text$mn:00000A76                 call    ??$construct@VIconList@@V1@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<IconList>>::construct<IconList,IconList>(IconList *,IconList &&)
.text$mn:00000A7B                 jmp     short loc_A51
.text$mn:00000A7D ; ---------------------------------------------------------------------------
.text$mn:00000A7D
.text$mn:00000A7D loc_A7D:                                ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00000A7D                 jmp     short loc_AAF
.text$mn:00000A7D ??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00000A7D
.text$mn:00000A7F
.text$mn:00000A7F ; =============== S U B R O U T I N E =======================================
.text$mn:00000A7F
.text$mn:00000A7F ; Attributes: noreturn
.text$mn:00000A7F
.text$mn:00000A7F __catch$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:00000A7F                                         ; DATA XREF: .xdata$x:00002390o
.text$mn:00000A7F                 jmp     short loc_A8A
.text$mn:00000A81 ; ---------------------------------------------------------------------------
.text$mn:00000A81
.text$mn:00000A81 loc_A81:                                ; CODE XREF: __catch$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00000A81                 mov     eax, [ebp-14h]
.text$mn:00000A84                 add     eax, 14h
.text$mn:00000A87                 mov     [ebp-14h], eax
.text$mn:00000A8A
.text$mn:00000A8A loc_A8A:                                ; CODE XREF: __catch$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:00000A8A                 mov     ecx, [ebp-14h]
.text$mn:00000A8D                 cmp     ecx, [ebp+10h]
.text$mn:00000A90                 jz      short loc_AA0
.text$mn:00000A92                 mov     edx, [ebp-14h]
.text$mn:00000A95                 push    edx
.text$mn:00000A96                 mov     ecx, [ebp+14h]
.text$mn:00000A99                 call    ??$destroy@VIconList@@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@@Z ; std::_Wrap_alloc<std::allocator<IconList>>::destroy<IconList>(IconList *)
.text$mn:00000A9E                 jmp     short loc_A81
.text$mn:00000AA0 ; ---------------------------------------------------------------------------
.text$mn:00000AA0
.text$mn:00000AA0 loc_AA0:                                ; CODE XREF: __catch$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00000AA0                 push    0
.text$mn:00000AA2                 push    0
.text$mn:00000AA4                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00000AA4 __catch$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00000AA4
.text$mn:00000AA9 ; ---------------------------------------------------------------------------
.text$mn:00000AA9                 mov     eax, offset $LN13
.text$mn:00000AAE                 retn
.text$mn:00000AAF ; ---------------------------------------------------------------------------
.text$mn:00000AAF ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00000AAF
.text$mn:00000AAF loc_AAF:                                ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag):loc_A7Dj
.text$mn:00000AAF                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000AB6                 jmp     short loc_ABF
.text$mn:00000AB6 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00000AB8
.text$mn:00000AB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000AB8
.text$mn:00000AB8
.text$mn:00000AB8 $LN13           proc near               ; DATA XREF: .text$mn:00000AA9o
.text$mn:00000AB8                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00000AB8 $LN13           endp ; sp-analysis failed
.text$mn:00000AB8
.text$mn:00000ABF ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00000ABF
.text$mn:00000ABF loc_ABF:                                ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:00000ABF                 mov     eax, [ebp+arg_8]
.text$mn:00000AC2                 mov     ecx, [ebp+var_C]
.text$mn:00000AC5                 mov     large fs:0, ecx
.text$mn:00000ACC                 pop     ecx
.text$mn:00000ACD                 pop     edi
.text$mn:00000ACE                 pop     esi
.text$mn:00000ACF                 pop     ebx
.text$mn:00000AD0                 mov     esp, ebp
.text$mn:00000AD2                 pop     ebp
.text$mn:00000AD3                 retn
.text$mn:00000AD3 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00000AD3 _text$mn        ends
.text$mn:00000AD3
.text$x:00000AD4 ; ===========================================================================
.text$x:00000AD4
.text$x:00000AD4 ; Segment type: Pure code
.text$x:00000AD4 ; Segment permissions: Read/Execute
.text$x:00000AD4 _text$x         segment para public 'CODE' use32
.text$x:00000AD4                 assume cs:_text$x
.text$x:00000AD4                 ;org 0AD4h
.text$x:00000AD4 ; COMDAT (pick associative to section at 9E8)
.text$x:00000AD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000AD4
.text$x:00000AD4 ; =============== S U B R O U T I N E =======================================
.text$x:00000AD4
.text$x:00000AD4
.text$x:00000AD4 __ehhandler$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00000AD4                                         ; DATA XREF: std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00000AD4
.text$x:00000AD4 arg_4           = dword ptr  8
.text$x:00000AD4
.text$x:00000AD4                 mov     edx, [esp+arg_4]
.text$x:00000AD8                 lea     eax, [edx+0Ch]
.text$x:00000ADB                 mov     ecx, [edx-18h]
.text$x:00000ADE                 xor     ecx, eax
.text$x:00000AE0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000AE5                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:00000AEA                 jmp     ___CxxFrameHandler3
.text$x:00000AEA __ehhandler$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:00000AEA
.text$x:00000AEA ; ---------------------------------------------------------------------------
.text$x:00000AEF                 align 10h
.text$x:00000AEF _text$x         ends
.text$x:00000AEF
.text$mn:00000AF0 ; ===========================================================================
.text$mn:00000AF0
.text$mn:00000AF0 ; Segment type: Pure code
.text$mn:00000AF0 ; Segment permissions: Read/Execute
.text$mn:00000AF0 _text$mn        segment para public 'CODE' use32
.text$mn:00000AF0                 assume cs:_text$mn
.text$mn:00000AF0                 ;org 0AF0h
.text$mn:00000AF0 ; COMDAT (pick any)
.text$mn:00000AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000AF0
.text$mn:00000AF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00000AF0
.text$mn:00000AF0 ; Attributes: bp-based frame
.text$mn:00000AF0
.text$mn:00000AF0 ; struct ToolBarButtonUnit * __cdecl std::_Uninitialized_move<struct ToolBarButtonUnit *, struct ToolBarButtonUnit *, struct std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>>>(struct ToolBarButtonUnit *, struct ToolBarButtonUnit *, struct ToolBarButtonUnit *, struct std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>> &)
.text$mn:00000AF0                 public ??$_Uninitialized_move@PAUToolBarButtonUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z
.text$mn:00000AF0 ??$_Uninitialized_move@PAUToolBarButtonUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z proc near
.text$mn:00000AF0                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Umove<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *)+25p
.text$mn:00000AF0
.text$mn:00000AF0 arg_0           = dword ptr  8
.text$mn:00000AF0 arg_4           = dword ptr  0Ch
.text$mn:00000AF0 arg_8           = dword ptr  10h
.text$mn:00000AF0 arg_C           = dword ptr  14h
.text$mn:00000AF0
.text$mn:00000AF0                 push    ebp
.text$mn:00000AF1                 mov     ebp, esp
.text$mn:00000AF3                 mov     eax, [ebp+arg_C]
.text$mn:00000AF6                 push    eax             ; int
.text$mn:00000AF7                 mov     ecx, [ebp+arg_8]
.text$mn:00000AFA                 push    ecx
.text$mn:00000AFB                 call    ??$_Unchecked@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z ; std::_Unchecked<ToolBarButtonUnit *>(ToolBarButtonUnit *)
.text$mn:00000B00                 add     esp, 4
.text$mn:00000B03                 push    eax             ; void *
.text$mn:00000B04                 mov     edx, [ebp+arg_4]
.text$mn:00000B07                 push    edx
.text$mn:00000B08                 call    ??$_Unchecked@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z ; std::_Unchecked<ToolBarButtonUnit *>(ToolBarButtonUnit *)
.text$mn:00000B0D                 add     esp, 4
.text$mn:00000B10                 push    eax             ; int
.text$mn:00000B11                 mov     eax, [ebp+arg_0]
.text$mn:00000B14                 push    eax
.text$mn:00000B15                 call    ??$_Unchecked@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z ; std::_Unchecked<ToolBarButtonUnit *>(ToolBarButtonUnit *)
.text$mn:00000B1A                 add     esp, 4
.text$mn:00000B1D                 push    eax             ; int
.text$mn:00000B1E                 call    ??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z ; std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)
.text$mn:00000B23                 add     esp, 10h
.text$mn:00000B26                 push    eax
.text$mn:00000B27                 lea     ecx, [ebp+arg_8]
.text$mn:00000B2A                 push    ecx
.text$mn:00000B2B                 call    ??$_Rechecked@PAUToolBarButtonUnit@@PAU1@@std@@YAAAPAUToolBarButtonUnit@@AAPAU1@PAU1@@Z ; std::_Rechecked<ToolBarButtonUnit *,ToolBarButtonUnit *>(ToolBarButtonUnit * &,ToolBarButtonUnit *)
.text$mn:00000B30                 add     esp, 8
.text$mn:00000B33                 mov     eax, [eax]
.text$mn:00000B35                 pop     ebp
.text$mn:00000B36                 retn
.text$mn:00000B36 ??$_Uninitialized_move@PAUToolBarButtonUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z endp
.text$mn:00000B36
.text$mn:00000B36 ; ---------------------------------------------------------------------------
.text$mn:00000B37                 align 4
.text$mn:00000B37 _text$mn        ends
.text$mn:00000B37
.text$mn:00000B38 ; ===========================================================================
.text$mn:00000B38
.text$mn:00000B38 ; Segment type: Pure code
.text$mn:00000B38 ; Segment permissions: Read/Execute
.text$mn:00000B38 _text$mn        segment para public 'CODE' use32
.text$mn:00000B38                 assume cs:_text$mn
.text$mn:00000B38                 ;org 0B38h
.text$mn:00000B38 ; COMDAT (pick any)
.text$mn:00000B38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000B38
.text$mn:00000B38 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B38
.text$mn:00000B38 ; Attributes: bp-based frame
.text$mn:00000B38
.text$mn:00000B38 ; class IconList * __cdecl std::_Uninitialized_move<class IconList *, class IconList *, struct std::_Wrap_alloc<class std::allocator<class IconList>>>(class IconList *, class IconList *, class IconList *, struct std::_Wrap_alloc<class std::allocator<class IconList>> &)
.text$mn:00000B38                 public ??$_Uninitialized_move@PAVIconList@@PAV1@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z
.text$mn:00000B38 ??$_Uninitialized_move@PAVIconList@@PAV1@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z proc near
.text$mn:00000B38                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Umove<IconList *>(IconList *,IconList *,IconList *)+25p
.text$mn:00000B38
.text$mn:00000B38 arg_0           = dword ptr  8
.text$mn:00000B38 arg_4           = dword ptr  0Ch
.text$mn:00000B38 arg_8           = dword ptr  10h
.text$mn:00000B38 arg_C           = dword ptr  14h
.text$mn:00000B38
.text$mn:00000B38                 push    ebp
.text$mn:00000B39                 mov     ebp, esp
.text$mn:00000B3B                 mov     eax, [ebp+arg_C]
.text$mn:00000B3E                 push    eax             ; int
.text$mn:00000B3F                 mov     ecx, [ebp+arg_8]
.text$mn:00000B42                 push    ecx
.text$mn:00000B43                 call    ??$_Unchecked@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z ; std::_Unchecked<IconList *>(IconList *)
.text$mn:00000B48                 add     esp, 4
.text$mn:00000B4B                 push    eax             ; void *
.text$mn:00000B4C                 mov     edx, [ebp+arg_4]
.text$mn:00000B4F                 push    edx
.text$mn:00000B50                 call    ??$_Unchecked@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z ; std::_Unchecked<IconList *>(IconList *)
.text$mn:00000B55                 add     esp, 4
.text$mn:00000B58                 push    eax             ; int
.text$mn:00000B59                 mov     eax, [ebp+arg_0]
.text$mn:00000B5C                 push    eax
.text$mn:00000B5D                 call    ??$_Unchecked@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z ; std::_Unchecked<IconList *>(IconList *)
.text$mn:00000B62                 add     esp, 4
.text$mn:00000B65                 push    eax             ; int
.text$mn:00000B66                 call    ??$_Uninit_move@PAVIconList@@PAV1@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z ; std::_Uninit_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)
.text$mn:00000B6B                 add     esp, 10h
.text$mn:00000B6E                 push    eax
.text$mn:00000B6F                 lea     ecx, [ebp+arg_8]
.text$mn:00000B72                 push    ecx
.text$mn:00000B73                 call    ??$_Rechecked@PAVIconList@@PAV1@@std@@YAAAPAVIconList@@AAPAV1@PAV1@@Z ; std::_Rechecked<IconList *,IconList *>(IconList * &,IconList *)
.text$mn:00000B78                 add     esp, 8
.text$mn:00000B7B                 mov     eax, [eax]
.text$mn:00000B7D                 pop     ebp
.text$mn:00000B7E                 retn
.text$mn:00000B7E ??$_Uninitialized_move@PAVIconList@@PAV1@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z endp
.text$mn:00000B7E
.text$mn:00000B7E ; ---------------------------------------------------------------------------
.text$mn:00000B7F                 align 10h
.text$mn:00000B7F _text$mn        ends
.text$mn:00000B7F
.text$mn:00000B80 ; ===========================================================================
.text$mn:00000B80
.text$mn:00000B80 ; Segment type: Pure code
.text$mn:00000B80 ; Segment permissions: Read/Execute
.text$mn:00000B80 _text$mn        segment para public 'CODE' use32
.text$mn:00000B80                 assume cs:_text$mn
.text$mn:00000B80                 ;org 0B80h
.text$mn:00000B80 ; COMDAT (pick any)
.text$mn:00000B80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000B80
.text$mn:00000B80 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B80
.text$mn:00000B80 ; Attributes: bp-based frame
.text$mn:00000B80
.text$mn:00000B80 ; struct ToolBarButtonUnit * __cdecl std::_Val_type<struct ToolBarButtonUnit *>(struct ToolBarButtonUnit *)
.text$mn:00000B80                 public ??$_Val_type@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z
.text$mn:00000B80 ??$_Val_type@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z proc near
.text$mn:00000B80                                         ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)+20p
.text$mn:00000B80                 push    ebp
.text$mn:00000B81                 mov     ebp, esp
.text$mn:00000B83                 xor     eax, eax
.text$mn:00000B85                 pop     ebp
.text$mn:00000B86                 retn
.text$mn:00000B86 ??$_Val_type@PAUToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@PAU1@@Z endp
.text$mn:00000B86
.text$mn:00000B86 ; ---------------------------------------------------------------------------
.text$mn:00000B87                 align 4
.text$mn:00000B87 _text$mn        ends
.text$mn:00000B87
.text$mn:00000B88 ; ===========================================================================
.text$mn:00000B88
.text$mn:00000B88 ; Segment type: Pure code
.text$mn:00000B88 ; Segment permissions: Read/Execute
.text$mn:00000B88 _text$mn        segment para public 'CODE' use32
.text$mn:00000B88                 assume cs:_text$mn
.text$mn:00000B88                 ;org 0B88h
.text$mn:00000B88 ; COMDAT (pick any)
.text$mn:00000B88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000B88
.text$mn:00000B88 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B88
.text$mn:00000B88 ; Attributes: bp-based frame
.text$mn:00000B88
.text$mn:00000B88 ; class IconList * __cdecl std::_Val_type<class IconList *>(class IconList *)
.text$mn:00000B88                 public ??$_Val_type@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z
.text$mn:00000B88 ??$_Val_type@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z proc near
.text$mn:00000B88                                         ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)+20p
.text$mn:00000B88                 push    ebp
.text$mn:00000B89                 mov     ebp, esp
.text$mn:00000B8B                 xor     eax, eax
.text$mn:00000B8D                 pop     ebp
.text$mn:00000B8E                 retn
.text$mn:00000B8E ??$_Val_type@PAVIconList@@@std@@YAPAVIconList@@PAV1@@Z endp
.text$mn:00000B8E
.text$mn:00000B8E ; ---------------------------------------------------------------------------
.text$mn:00000B8F                 align 10h
.text$mn:00000B8F _text$mn        ends
.text$mn:00000B8F
.text$mn:00000B90 ; ===========================================================================
.text$mn:00000B90
.text$mn:00000B90 ; Segment type: Pure code
.text$mn:00000B90 ; Segment permissions: Read/Execute
.text$mn:00000B90 _text$mn        segment para public 'CODE' use32
.text$mn:00000B90                 assume cs:_text$mn
.text$mn:00000B90                 ;org 0B90h
.text$mn:00000B90 ; COMDAT (pick any)
.text$mn:00000B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000B90
.text$mn:00000B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B90
.text$mn:00000B90 ; Attributes: bp-based frame
.text$mn:00000B90
.text$mn:00000B90 ; struct ToolBarButtonUnit const * __cdecl std::addressof<struct ToolBarButtonUnit const>(struct ToolBarButtonUnit const &)
.text$mn:00000B90                 public ??$addressof@$$CBUToolBarButtonUnit@@@std@@YAPBUToolBarButtonUnit@@ABU1@@Z
.text$mn:00000B90 ??$addressof@$$CBUToolBarButtonUnit@@@std@@YAPBUToolBarButtonUnit@@ABU1@@Z proc near
.text$mn:00000B90                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+Dp
.text$mn:00000B90                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+2Dp
.text$mn:00000B90
.text$mn:00000B90 arg_0           = dword ptr  8
.text$mn:00000B90
.text$mn:00000B90                 push    ebp
.text$mn:00000B91                 mov     ebp, esp
.text$mn:00000B93                 mov     eax, [ebp+arg_0]
.text$mn:00000B96                 pop     ebp
.text$mn:00000B97                 retn
.text$mn:00000B97 ??$addressof@$$CBUToolBarButtonUnit@@@std@@YAPBUToolBarButtonUnit@@ABU1@@Z endp
.text$mn:00000B97
.text$mn:00000B97 _text$mn        ends
.text$mn:00000B97
.text$mn:00000B98 ; ===========================================================================
.text$mn:00000B98
.text$mn:00000B98 ; Segment type: Pure code
.text$mn:00000B98 ; Segment permissions: Read/Execute
.text$mn:00000B98 _text$mn        segment para public 'CODE' use32
.text$mn:00000B98                 assume cs:_text$mn
.text$mn:00000B98                 ;org 0B98h
.text$mn:00000B98 ; COMDAT (pick any)
.text$mn:00000B98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000B98
.text$mn:00000B98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000B98
.text$mn:00000B98 ; Attributes: bp-based frame
.text$mn:00000B98
.text$mn:00000B98 ; class IconList * __cdecl std::addressof<class IconList>(class IconList &)
.text$mn:00000B98                 public ??$addressof@VIconList@@@std@@YAPAVIconList@@AAV1@@Z
.text$mn:00000B98 ??$addressof@VIconList@@@std@@YAPAVIconList@@AAV1@@Z proc near
.text$mn:00000B98                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+Dp
.text$mn:00000B98                                         ; std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+2Dp
.text$mn:00000B98
.text$mn:00000B98 arg_0           = dword ptr  8
.text$mn:00000B98
.text$mn:00000B98                 push    ebp
.text$mn:00000B99                 mov     ebp, esp
.text$mn:00000B9B                 mov     eax, [ebp+arg_0]
.text$mn:00000B9E                 pop     ebp
.text$mn:00000B9F                 retn
.text$mn:00000B9F ??$addressof@VIconList@@@std@@YAPAVIconList@@AAV1@@Z endp
.text$mn:00000B9F
.text$mn:00000B9F _text$mn        ends
.text$mn:00000B9F
.text$mn:00000BA0 ; ===========================================================================
.text$mn:00000BA0
.text$mn:00000BA0 ; Segment type: Pure code
.text$mn:00000BA0 ; Segment permissions: Read/Execute
.text$mn:00000BA0 _text$mn        segment para public 'CODE' use32
.text$mn:00000BA0                 assume cs:_text$mn
.text$mn:00000BA0                 ;org 0BA0h
.text$mn:00000BA0 ; COMDAT (pick any)
.text$mn:00000BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000BA0
.text$mn:00000BA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00000BA0
.text$mn:00000BA0 ; Attributes: bp-based frame
.text$mn:00000BA0
.text$mn:00000BA0 ; int __stdcall std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(void *, int)
.text$mn:00000BA0                 public ??$construct@UToolBarButtonUnit@@AAU1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z
.text$mn:00000BA0 ??$construct@UToolBarButtonUnit@@AAU1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z proc near
.text$mn:00000BA0                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+94p
.text$mn:00000BA0
.text$mn:00000BA0 var_4           = dword ptr -4
.text$mn:00000BA0 arg_0           = dword ptr  8
.text$mn:00000BA0 arg_4           = dword ptr  0Ch
.text$mn:00000BA0
.text$mn:00000BA0                 push    ebp
.text$mn:00000BA1                 mov     ebp, esp
.text$mn:00000BA3                 push    ecx
.text$mn:00000BA4                 mov     [ebp+var_4], ecx
.text$mn:00000BA7                 mov     eax, [ebp+arg_4]
.text$mn:00000BAA                 push    eax
.text$mn:00000BAB                 call    ??$forward@AAUToolBarButtonUnit@@@std@@YAAAUToolBarButtonUnit@@AAU1@@Z ; std::forward<ToolBarButtonUnit &>(ToolBarButtonUnit &)
.text$mn:00000BB0                 add     esp, 4
.text$mn:00000BB3                 push    eax             ; int
.text$mn:00000BB4                 mov     ecx, [ebp+arg_0]
.text$mn:00000BB7                 push    ecx             ; void *
.text$mn:00000BB8                 mov     edx, [ebp+var_4]
.text$mn:00000BBB                 push    edx             ; int
.text$mn:00000BBC                 call    ??$construct@UToolBarButtonUnit@@AAU1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@AAU3@@Z ; std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *,ToolBarButtonUnit &)
.text$mn:00000BC1                 add     esp, 0Ch
.text$mn:00000BC4                 mov     esp, ebp
.text$mn:00000BC6                 pop     ebp
.text$mn:00000BC7                 retn    8
.text$mn:00000BC7 ??$construct@UToolBarButtonUnit@@AAU1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z endp
.text$mn:00000BC7
.text$mn:00000BC7 ; ---------------------------------------------------------------------------
.text$mn:00000BCA                 align 4
.text$mn:00000BCA _text$mn        ends
.text$mn:00000BCA
.text$mn:00000BCC ; ===========================================================================
.text$mn:00000BCC
.text$mn:00000BCC ; Segment type: Pure code
.text$mn:00000BCC ; Segment permissions: Read/Execute
.text$mn:00000BCC _text$mn        segment para public 'CODE' use32
.text$mn:00000BCC                 assume cs:_text$mn
.text$mn:00000BCC                 ;org 0BCCh
.text$mn:00000BCC ; COMDAT (pick any)
.text$mn:00000BCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000BCC
.text$mn:00000BCC ; =============== S U B R O U T I N E =======================================
.text$mn:00000BCC
.text$mn:00000BCC ; Attributes: bp-based frame
.text$mn:00000BCC
.text$mn:00000BCC ; int __stdcall std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(void *, int)
.text$mn:00000BCC                 public ??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z
.text$mn:00000BCC ??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z proc near
.text$mn:00000BCC                                         ; CODE XREF: std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *,ToolBarButtonUnit &)+17p
.text$mn:00000BCC
.text$mn:00000BCC var_1C          = dword ptr -1Ch
.text$mn:00000BCC var_18          = dword ptr -18h
.text$mn:00000BCC var_14          = dword ptr -14h
.text$mn:00000BCC var_10          = dword ptr -10h
.text$mn:00000BCC var_C           = dword ptr -0Ch
.text$mn:00000BCC var_4           = dword ptr -4
.text$mn:00000BCC arg_0           = dword ptr  8
.text$mn:00000BCC arg_4           = dword ptr  0Ch
.text$mn:00000BCC
.text$mn:00000BCC                 push    ebp
.text$mn:00000BCD                 mov     ebp, esp
.text$mn:00000BCF                 push    0FFFFFFFFh
.text$mn:00000BD1                 push    offset __ehhandler$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z
.text$mn:00000BD6                 mov     eax, large fs:0
.text$mn:00000BDC                 push    eax
.text$mn:00000BDD                 sub     esp, 10h
.text$mn:00000BE0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000BE5                 xor     eax, ebp
.text$mn:00000BE7                 push    eax
.text$mn:00000BE8                 lea     eax, [ebp+var_C]
.text$mn:00000BEB                 mov     large fs:0, eax
.text$mn:00000BF1                 mov     [ebp+var_18], ecx
.text$mn:00000BF4                 mov     eax, [ebp+arg_0]
.text$mn:00000BF7                 push    eax             ; void *
.text$mn:00000BF8                 push    14h             ; unsigned int
.text$mn:00000BFA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00000BFF                 add     esp, 8
.text$mn:00000C02                 mov     [ebp+var_10], eax
.text$mn:00000C05                 mov     [ebp+var_4], 0
.text$mn:00000C0C                 cmp     [ebp+var_10], 0
.text$mn:00000C10                 jz      short loc_C45
.text$mn:00000C12                 mov     ecx, [ebp+arg_4]
.text$mn:00000C15                 push    ecx
.text$mn:00000C16                 call    ??$forward@AAUToolBarButtonUnit@@@std@@YAAAUToolBarButtonUnit@@AAU1@@Z ; std::forward<ToolBarButtonUnit &>(ToolBarButtonUnit &)
.text$mn:00000C1B                 add     esp, 4
.text$mn:00000C1E                 mov     edx, [ebp+var_10]
.text$mn:00000C21                 mov     ecx, [eax]
.text$mn:00000C23                 mov     [edx], ecx
.text$mn:00000C25                 mov     ecx, [eax+4]
.text$mn:00000C28                 mov     [edx+4], ecx
.text$mn:00000C2B                 mov     ecx, [eax+8]
.text$mn:00000C2E                 mov     [edx+8], ecx
.text$mn:00000C31                 mov     ecx, [eax+0Ch]
.text$mn:00000C34                 mov     [edx+0Ch], ecx
.text$mn:00000C37                 mov     eax, [eax+10h]
.text$mn:00000C3A                 mov     [edx+10h], eax
.text$mn:00000C3D                 mov     ecx, [ebp+var_10]
.text$mn:00000C40                 mov     [ebp+var_14], ecx
.text$mn:00000C43                 jmp     short loc_C4C
.text$mn:00000C45 ; ---------------------------------------------------------------------------
.text$mn:00000C45
.text$mn:00000C45 loc_C45:                                ; CODE XREF: std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)+44j
.text$mn:00000C45                 mov     [ebp+var_14], 0
.text$mn:00000C4C
.text$mn:00000C4C loc_C4C:                                ; CODE XREF: std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)+77j
.text$mn:00000C4C                 mov     edx, [ebp+var_14]
.text$mn:00000C4F                 mov     [ebp+var_1C], edx
.text$mn:00000C52                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000C59                 mov     ecx, [ebp+var_C]
.text$mn:00000C5C                 mov     large fs:0, ecx
.text$mn:00000C63                 pop     ecx
.text$mn:00000C64                 mov     esp, ebp
.text$mn:00000C66                 pop     ebp
.text$mn:00000C67                 retn    8
.text$mn:00000C67 ??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z endp
.text$mn:00000C67
.text$mn:00000C67 ; ---------------------------------------------------------------------------
.text$mn:00000C6A                 align 4
.text$mn:00000C6A _text$mn        ends
.text$mn:00000C6A
.text$x:00000C6C ; ===========================================================================
.text$x:00000C6C
.text$x:00000C6C ; Segment type: Pure code
.text$x:00000C6C ; Segment permissions: Read/Execute
.text$x:00000C6C _text$x         segment para public 'CODE' use32
.text$x:00000C6C                 assume cs:_text$x
.text$x:00000C6C                 ;org 0C6Ch
.text$x:00000C6C ; COMDAT (pick associative to section at BCC)
.text$x:00000C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000C6C
.text$x:00000C6C ; =============== S U B R O U T I N E =======================================
.text$x:00000C6C
.text$x:00000C6C
.text$x:00000C6C __unwindfunclet$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z$0 proc near
.text$x:00000C6C                                         ; DATA XREF: .xdata$x:0000235Co
.text$x:00000C6C                 mov     eax, [ebp+8]
.text$x:00000C6F                 push    eax
.text$x:00000C70                 mov     eax, [ebp-10h]
.text$x:00000C73                 push    eax             ; void *
.text$x:00000C74                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00000C79                 add     esp, 8
.text$x:00000C7C                 retn
.text$x:00000C7C __unwindfunclet$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z$0 endp
.text$x:00000C7C
.text$x:00000C7D
.text$x:00000C7D ; =============== S U B R O U T I N E =======================================
.text$x:00000C7D
.text$x:00000C7D
.text$x:00000C7D __ehhandler$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z proc near
.text$x:00000C7D                                         ; DATA XREF: std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)+5o
.text$x:00000C7D
.text$x:00000C7D arg_4           = dword ptr  8
.text$x:00000C7D
.text$x:00000C7D                 mov     edx, [esp+arg_4]
.text$x:00000C81                 lea     eax, [edx+0Ch]
.text$x:00000C84                 mov     ecx, [edx-14h]
.text$x:00000C87                 xor     ecx, eax
.text$x:00000C89                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000C8E                 mov     eax, offset __ehfuncinfo$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z
.text$x:00000C93                 jmp     ___CxxFrameHandler3
.text$x:00000C93 __ehhandler$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z endp
.text$x:00000C93
.text$x:00000C93 _text$x         ends
.text$x:00000C93
.text$mn:00000C98 ; ===========================================================================
.text$mn:00000C98
.text$mn:00000C98 ; Segment type: Pure code
.text$mn:00000C98 ; Segment permissions: Read/Execute
.text$mn:00000C98 _text$mn        segment para public 'CODE' use32
.text$mn:00000C98                 assume cs:_text$mn
.text$mn:00000C98                 ;org 0C98h
.text$mn:00000C98 ; COMDAT (pick any)
.text$mn:00000C98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000C98
.text$mn:00000C98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000C98
.text$mn:00000C98 ; Attributes: bp-based frame
.text$mn:00000C98
.text$mn:00000C98 ; int __cdecl std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(int, void *, int)
.text$mn:00000C98                 public ??$construct@UToolBarButtonUnit@@AAU1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@AAU3@@Z
.text$mn:00000C98 ??$construct@UToolBarButtonUnit@@AAU1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@AAU3@@Z proc near
.text$mn:00000C98                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)+1Cp
.text$mn:00000C98
.text$mn:00000C98 arg_0           = dword ptr  8
.text$mn:00000C98 arg_4           = dword ptr  0Ch
.text$mn:00000C98 arg_8           = dword ptr  10h
.text$mn:00000C98
.text$mn:00000C98                 push    ebp
.text$mn:00000C99                 mov     ebp, esp
.text$mn:00000C9B                 mov     eax, [ebp+arg_8]
.text$mn:00000C9E                 push    eax
.text$mn:00000C9F                 call    ??$forward@AAUToolBarButtonUnit@@@std@@YAAAUToolBarButtonUnit@@AAU1@@Z ; std::forward<ToolBarButtonUnit &>(ToolBarButtonUnit &)
.text$mn:00000CA4                 add     esp, 4
.text$mn:00000CA7                 push    eax             ; int
.text$mn:00000CA8                 mov     ecx, [ebp+arg_4]
.text$mn:00000CAB                 push    ecx             ; void *
.text$mn:00000CAC                 mov     ecx, [ebp+arg_0]
.text$mn:00000CAF                 call    ??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z ; std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)
.text$mn:00000CB4                 pop     ebp
.text$mn:00000CB5                 retn
.text$mn:00000CB5 ??$construct@UToolBarButtonUnit@@AAU1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@AAU3@@Z endp
.text$mn:00000CB5
.text$mn:00000CB5 ; ---------------------------------------------------------------------------
.text$mn:00000CB6                 align 4
.text$mn:00000CB6 _text$mn        ends
.text$mn:00000CB6
.text$mn:00000CB8 ; ===========================================================================
.text$mn:00000CB8
.text$mn:00000CB8 ; Segment type: Pure code
.text$mn:00000CB8 ; Segment permissions: Read/Execute
.text$mn:00000CB8 _text$mn        segment para public 'CODE' use32
.text$mn:00000CB8                 assume cs:_text$mn
.text$mn:00000CB8                 ;org 0CB8h
.text$mn:00000CB8 ; COMDAT (pick any)
.text$mn:00000CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000CB8
.text$mn:00000CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000CB8
.text$mn:00000CB8 ; Attributes: bp-based frame
.text$mn:00000CB8
.text$mn:00000CB8 ; int __stdcall std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit const &>(void *, int)
.text$mn:00000CB8                 public ??$construct@UToolBarButtonUnit@@ABU1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@ABU2@@Z
.text$mn:00000CB8 ??$construct@UToolBarButtonUnit@@ABU1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@ABU2@@Z proc near
.text$mn:00000CB8                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+F1p
.text$mn:00000CB8
.text$mn:00000CB8 var_4           = dword ptr -4
.text$mn:00000CB8 arg_0           = dword ptr  8
.text$mn:00000CB8 arg_4           = dword ptr  0Ch
.text$mn:00000CB8
.text$mn:00000CB8                 push    ebp
.text$mn:00000CB9                 mov     ebp, esp
.text$mn:00000CBB                 push    ecx
.text$mn:00000CBC                 mov     [ebp+var_4], ecx
.text$mn:00000CBF                 mov     eax, [ebp+arg_4]
.text$mn:00000CC2                 push    eax
.text$mn:00000CC3                 call    ??$forward@ABUToolBarButtonUnit@@@std@@YAABUToolBarButtonUnit@@ABU1@@Z ; std::forward<ToolBarButtonUnit const &>(ToolBarButtonUnit const &)
.text$mn:00000CC8                 add     esp, 4
.text$mn:00000CCB                 push    eax             ; int
.text$mn:00000CCC                 mov     ecx, [ebp+arg_0]
.text$mn:00000CCF                 push    ecx             ; void *
.text$mn:00000CD0                 mov     edx, [ebp+var_4]
.text$mn:00000CD3                 push    edx             ; int
.text$mn:00000CD4                 call    ??$construct@UToolBarButtonUnit@@ABU1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@ABU3@@Z ; std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit const &>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *,ToolBarButtonUnit const &)
.text$mn:00000CD9                 add     esp, 0Ch
.text$mn:00000CDC                 mov     esp, ebp
.text$mn:00000CDE                 pop     ebp
.text$mn:00000CDF                 retn    8
.text$mn:00000CDF ??$construct@UToolBarButtonUnit@@ABU1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@ABU2@@Z endp
.text$mn:00000CDF
.text$mn:00000CDF ; ---------------------------------------------------------------------------
.text$mn:00000CE2                 align 4
.text$mn:00000CE2 _text$mn        ends
.text$mn:00000CE2
.text$mn:00000CE4 ; ===========================================================================
.text$mn:00000CE4
.text$mn:00000CE4 ; Segment type: Pure code
.text$mn:00000CE4 ; Segment permissions: Read/Execute
.text$mn:00000CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00000CE4                 assume cs:_text$mn
.text$mn:00000CE4                 ;org 0CE4h
.text$mn:00000CE4 ; COMDAT (pick any)
.text$mn:00000CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000CE4
.text$mn:00000CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00000CE4
.text$mn:00000CE4 ; Attributes: bp-based frame
.text$mn:00000CE4
.text$mn:00000CE4 ; int __cdecl std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit const &>(int, void *, int)
.text$mn:00000CE4                 public ??$construct@UToolBarButtonUnit@@ABU1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@ABU3@@Z
.text$mn:00000CE4 ??$construct@UToolBarButtonUnit@@ABU1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@ABU3@@Z proc near
.text$mn:00000CE4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit const &>(ToolBarButtonUnit *,ToolBarButtonUnit const &)+1Cp
.text$mn:00000CE4
.text$mn:00000CE4 arg_0           = dword ptr  8
.text$mn:00000CE4 arg_4           = dword ptr  0Ch
.text$mn:00000CE4 arg_8           = dword ptr  10h
.text$mn:00000CE4
.text$mn:00000CE4                 push    ebp
.text$mn:00000CE5                 mov     ebp, esp
.text$mn:00000CE7                 mov     eax, [ebp+arg_8]
.text$mn:00000CEA                 push    eax
.text$mn:00000CEB                 call    ??$forward@ABUToolBarButtonUnit@@@std@@YAABUToolBarButtonUnit@@ABU1@@Z ; std::forward<ToolBarButtonUnit const &>(ToolBarButtonUnit const &)
.text$mn:00000CF0                 add     esp, 4
.text$mn:00000CF3                 push    eax             ; int
.text$mn:00000CF4                 mov     ecx, [ebp+arg_4]
.text$mn:00000CF7                 push    ecx             ; void *
.text$mn:00000CF8                 mov     ecx, [ebp+arg_0]
.text$mn:00000CFB                 call    ?construct@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@ABU3@@Z ; std::allocator<ToolBarButtonUnit>::construct(ToolBarButtonUnit *,ToolBarButtonUnit const &)
.text$mn:00000D00                 pop     ebp
.text$mn:00000D01                 retn
.text$mn:00000D01 ??$construct@UToolBarButtonUnit@@ABU1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@ABU3@@Z endp
.text$mn:00000D01
.text$mn:00000D01 ; ---------------------------------------------------------------------------
.text$mn:00000D02                 align 4
.text$mn:00000D02 _text$mn        ends
.text$mn:00000D02
.text$mn:00000D04 ; ===========================================================================
.text$mn:00000D04
.text$mn:00000D04 ; Segment type: Pure code
.text$mn:00000D04 ; Segment permissions: Read/Execute
.text$mn:00000D04 _text$mn        segment para public 'CODE' use32
.text$mn:00000D04                 assume cs:_text$mn
.text$mn:00000D04                 ;org 0D04h
.text$mn:00000D04 ; COMDAT (pick any)
.text$mn:00000D04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000D04
.text$mn:00000D04 ; =============== S U B R O U T I N E =======================================
.text$mn:00000D04
.text$mn:00000D04 ; Attributes: bp-based frame
.text$mn:00000D04
.text$mn:00000D04 ; int __stdcall std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(void *, int)
.text$mn:00000D04                 public ??$construct@UToolBarButtonUnit@@U1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z
.text$mn:00000D04 ??$construct@UToolBarButtonUnit@@U1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z proc near
.text$mn:00000D04                                         ; CODE XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00000D04
.text$mn:00000D04 var_4           = dword ptr -4
.text$mn:00000D04 arg_0           = dword ptr  8
.text$mn:00000D04 arg_4           = dword ptr  0Ch
.text$mn:00000D04
.text$mn:00000D04                 push    ebp
.text$mn:00000D05                 mov     ebp, esp
.text$mn:00000D07                 push    ecx
.text$mn:00000D08                 mov     [ebp+var_4], ecx
.text$mn:00000D0B                 mov     eax, [ebp+arg_4]
.text$mn:00000D0E                 push    eax
.text$mn:00000D0F                 call    ??$forward@UToolBarButtonUnit@@@std@@YA$$QAUToolBarButtonUnit@@AAU1@@Z ; std::forward<ToolBarButtonUnit>(ToolBarButtonUnit &)
.text$mn:00000D14                 add     esp, 4
.text$mn:00000D17                 push    eax             ; int
.text$mn:00000D18                 mov     ecx, [ebp+arg_0]
.text$mn:00000D1B                 push    ecx             ; void *
.text$mn:00000D1C                 mov     edx, [ebp+var_4]
.text$mn:00000D1F                 push    edx             ; int
.text$mn:00000D20                 call    ??$construct@UToolBarButtonUnit@@U1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@$$QAU3@@Z ; std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *,ToolBarButtonUnit &&)
.text$mn:00000D25                 add     esp, 0Ch
.text$mn:00000D28                 mov     esp, ebp
.text$mn:00000D2A                 pop     ebp
.text$mn:00000D2B                 retn    8
.text$mn:00000D2B ??$construct@UToolBarButtonUnit@@U1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z endp
.text$mn:00000D2B
.text$mn:00000D2B ; ---------------------------------------------------------------------------
.text$mn:00000D2E                 align 10h
.text$mn:00000D2E _text$mn        ends
.text$mn:00000D2E
.text$mn:00000D30 ; ===========================================================================
.text$mn:00000D30
.text$mn:00000D30 ; Segment type: Pure code
.text$mn:00000D30 ; Segment permissions: Read/Execute
.text$mn:00000D30 _text$mn        segment para public 'CODE' use32
.text$mn:00000D30                 assume cs:_text$mn
.text$mn:00000D30                 ;org 0D30h
.text$mn:00000D30 ; COMDAT (pick any)
.text$mn:00000D30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000D30
.text$mn:00000D30 ; =============== S U B R O U T I N E =======================================
.text$mn:00000D30
.text$mn:00000D30 ; Attributes: bp-based frame
.text$mn:00000D30
.text$mn:00000D30 ; int __stdcall std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(void *, int)
.text$mn:00000D30                 public ??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z
.text$mn:00000D30 ??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z proc near
.text$mn:00000D30                                         ; CODE XREF: std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *,ToolBarButtonUnit &&)+17p
.text$mn:00000D30
.text$mn:00000D30 var_1C          = dword ptr -1Ch
.text$mn:00000D30 var_18          = dword ptr -18h
.text$mn:00000D30 var_14          = dword ptr -14h
.text$mn:00000D30 var_10          = dword ptr -10h
.text$mn:00000D30 var_C           = dword ptr -0Ch
.text$mn:00000D30 var_4           = dword ptr -4
.text$mn:00000D30 arg_0           = dword ptr  8
.text$mn:00000D30 arg_4           = dword ptr  0Ch
.text$mn:00000D30
.text$mn:00000D30                 push    ebp
.text$mn:00000D31                 mov     ebp, esp
.text$mn:00000D33                 push    0FFFFFFFFh
.text$mn:00000D35                 push    offset __ehhandler$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z
.text$mn:00000D3A                 mov     eax, large fs:0
.text$mn:00000D40                 push    eax
.text$mn:00000D41                 sub     esp, 10h
.text$mn:00000D44                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000D49                 xor     eax, ebp
.text$mn:00000D4B                 push    eax
.text$mn:00000D4C                 lea     eax, [ebp+var_C]
.text$mn:00000D4F                 mov     large fs:0, eax
.text$mn:00000D55                 mov     [ebp+var_18], ecx
.text$mn:00000D58                 mov     eax, [ebp+arg_0]
.text$mn:00000D5B                 push    eax             ; void *
.text$mn:00000D5C                 push    14h             ; unsigned int
.text$mn:00000D5E                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00000D63                 add     esp, 8
.text$mn:00000D66                 mov     [ebp+var_10], eax
.text$mn:00000D69                 mov     [ebp+var_4], 0
.text$mn:00000D70                 cmp     [ebp+var_10], 0
.text$mn:00000D74                 jz      short loc_DA9
.text$mn:00000D76                 mov     ecx, [ebp+arg_4]
.text$mn:00000D79                 push    ecx
.text$mn:00000D7A                 call    ??$forward@UToolBarButtonUnit@@@std@@YA$$QAUToolBarButtonUnit@@AAU1@@Z ; std::forward<ToolBarButtonUnit>(ToolBarButtonUnit &)
.text$mn:00000D7F                 add     esp, 4
.text$mn:00000D82                 mov     edx, [ebp+var_10]
.text$mn:00000D85                 mov     ecx, [eax]
.text$mn:00000D87                 mov     [edx], ecx
.text$mn:00000D89                 mov     ecx, [eax+4]
.text$mn:00000D8C                 mov     [edx+4], ecx
.text$mn:00000D8F                 mov     ecx, [eax+8]
.text$mn:00000D92                 mov     [edx+8], ecx
.text$mn:00000D95                 mov     ecx, [eax+0Ch]
.text$mn:00000D98                 mov     [edx+0Ch], ecx
.text$mn:00000D9B                 mov     eax, [eax+10h]
.text$mn:00000D9E                 mov     [edx+10h], eax
.text$mn:00000DA1                 mov     ecx, [ebp+var_10]
.text$mn:00000DA4                 mov     [ebp+var_14], ecx
.text$mn:00000DA7                 jmp     short loc_DB0
.text$mn:00000DA9 ; ---------------------------------------------------------------------------
.text$mn:00000DA9
.text$mn:00000DA9 loc_DA9:                                ; CODE XREF: std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)+44j
.text$mn:00000DA9                 mov     [ebp+var_14], 0
.text$mn:00000DB0
.text$mn:00000DB0 loc_DB0:                                ; CODE XREF: std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)+77j
.text$mn:00000DB0                 mov     edx, [ebp+var_14]
.text$mn:00000DB3                 mov     [ebp+var_1C], edx
.text$mn:00000DB6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000DBD                 mov     ecx, [ebp+var_C]
.text$mn:00000DC0                 mov     large fs:0, ecx
.text$mn:00000DC7                 pop     ecx
.text$mn:00000DC8                 mov     esp, ebp
.text$mn:00000DCA                 pop     ebp
.text$mn:00000DCB                 retn    8
.text$mn:00000DCB ??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z endp
.text$mn:00000DCB
.text$mn:00000DCB ; ---------------------------------------------------------------------------
.text$mn:00000DCE                 align 10h
.text$mn:00000DCE _text$mn        ends
.text$mn:00000DCE
.text$x:00000DD0 ; ===========================================================================
.text$x:00000DD0
.text$x:00000DD0 ; Segment type: Pure code
.text$x:00000DD0 ; Segment permissions: Read/Execute
.text$x:00000DD0 _text$x         segment para public 'CODE' use32
.text$x:00000DD0                 assume cs:_text$x
.text$x:00000DD0                 ;org 0DD0h
.text$x:00000DD0 ; COMDAT (pick associative to section at D30)
.text$x:00000DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000DD0
.text$x:00000DD0 ; =============== S U B R O U T I N E =======================================
.text$x:00000DD0
.text$x:00000DD0
.text$x:00000DD0 __unwindfunclet$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z$0 proc near
.text$x:00000DD0                                         ; DATA XREF: .xdata$x:00002438o
.text$x:00000DD0                 mov     eax, [ebp+8]
.text$x:00000DD3                 push    eax
.text$x:00000DD4                 mov     eax, [ebp-10h]
.text$x:00000DD7                 push    eax             ; void *
.text$x:00000DD8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00000DDD                 add     esp, 8
.text$x:00000DE0                 retn
.text$x:00000DE0 __unwindfunclet$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z$0 endp
.text$x:00000DE0
.text$x:00000DE1
.text$x:00000DE1 ; =============== S U B R O U T I N E =======================================
.text$x:00000DE1
.text$x:00000DE1
.text$x:00000DE1 __ehhandler$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z proc near
.text$x:00000DE1                                         ; DATA XREF: std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)+5o
.text$x:00000DE1
.text$x:00000DE1 arg_4           = dword ptr  8
.text$x:00000DE1
.text$x:00000DE1                 mov     edx, [esp+arg_4]
.text$x:00000DE5                 lea     eax, [edx+0Ch]
.text$x:00000DE8                 mov     ecx, [edx-14h]
.text$x:00000DEB                 xor     ecx, eax
.text$x:00000DED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000DF2                 mov     eax, offset __ehfuncinfo$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z
.text$x:00000DF7                 jmp     ___CxxFrameHandler3
.text$x:00000DF7 __ehhandler$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z endp
.text$x:00000DF7
.text$x:00000DF7 _text$x         ends
.text$x:00000DF7
.text$mn:00000DFC ; ===========================================================================
.text$mn:00000DFC
.text$mn:00000DFC ; Segment type: Pure code
.text$mn:00000DFC ; Segment permissions: Read/Execute
.text$mn:00000DFC _text$mn        segment para public 'CODE' use32
.text$mn:00000DFC                 assume cs:_text$mn
.text$mn:00000DFC                 ;org 0DFCh
.text$mn:00000DFC ; COMDAT (pick any)
.text$mn:00000DFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000DFC
.text$mn:00000DFC ; =============== S U B R O U T I N E =======================================
.text$mn:00000DFC
.text$mn:00000DFC ; Attributes: bp-based frame
.text$mn:00000DFC
.text$mn:00000DFC ; int __cdecl std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(int, void *, int)
.text$mn:00000DFC                 public ??$construct@UToolBarButtonUnit@@U1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@$$QAU3@@Z
.text$mn:00000DFC ??$construct@UToolBarButtonUnit@@U1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@$$QAU3@@Z proc near
.text$mn:00000DFC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)+1Cp
.text$mn:00000DFC
.text$mn:00000DFC arg_0           = dword ptr  8
.text$mn:00000DFC arg_4           = dword ptr  0Ch
.text$mn:00000DFC arg_8           = dword ptr  10h
.text$mn:00000DFC
.text$mn:00000DFC                 push    ebp
.text$mn:00000DFD                 mov     ebp, esp
.text$mn:00000DFF                 mov     eax, [ebp+arg_8]
.text$mn:00000E02                 push    eax
.text$mn:00000E03                 call    ??$forward@UToolBarButtonUnit@@@std@@YA$$QAUToolBarButtonUnit@@AAU1@@Z ; std::forward<ToolBarButtonUnit>(ToolBarButtonUnit &)
.text$mn:00000E08                 add     esp, 4
.text$mn:00000E0B                 push    eax             ; int
.text$mn:00000E0C                 mov     ecx, [ebp+arg_4]
.text$mn:00000E0F                 push    ecx             ; void *
.text$mn:00000E10                 mov     ecx, [ebp+arg_0]
.text$mn:00000E13                 call    ??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z ; std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)
.text$mn:00000E18                 pop     ebp
.text$mn:00000E19                 retn
.text$mn:00000E19 ??$construct@UToolBarButtonUnit@@U1@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@$$QAU3@@Z endp
.text$mn:00000E19
.text$mn:00000E19 ; ---------------------------------------------------------------------------
.text$mn:00000E1A                 align 4
.text$mn:00000E1A _text$mn        ends
.text$mn:00000E1A
.text$mn:00000E1C ; ===========================================================================
.text$mn:00000E1C
.text$mn:00000E1C ; Segment type: Pure code
.text$mn:00000E1C ; Segment permissions: Read/Execute
.text$mn:00000E1C _text$mn        segment para public 'CODE' use32
.text$mn:00000E1C                 assume cs:_text$mn
.text$mn:00000E1C                 ;org 0E1Ch
.text$mn:00000E1C ; COMDAT (pick any)
.text$mn:00000E1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000E1C
.text$mn:00000E1C ; =============== S U B R O U T I N E =======================================
.text$mn:00000E1C
.text$mn:00000E1C ; Attributes: bp-based frame
.text$mn:00000E1C
.text$mn:00000E1C ; int __stdcall std::_Wrap_alloc<std::allocator<IconList>>::construct<IconList,IconList>(void *, int)
.text$mn:00000E1C                 public ??$construct@VIconList@@V1@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@$$QAV2@@Z
.text$mn:00000E1C ??$construct@VIconList@@V1@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@$$QAV2@@Z proc near
.text$mn:00000E1C                                         ; CODE XREF: std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00000E1C                                         ; std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+9Dp ...
.text$mn:00000E1C
.text$mn:00000E1C var_4           = dword ptr -4
.text$mn:00000E1C arg_0           = dword ptr  8
.text$mn:00000E1C arg_4           = dword ptr  0Ch
.text$mn:00000E1C
.text$mn:00000E1C                 push    ebp
.text$mn:00000E1D                 mov     ebp, esp
.text$mn:00000E1F                 push    ecx
.text$mn:00000E20                 mov     [ebp+var_4], ecx
.text$mn:00000E23                 mov     eax, [ebp+arg_4]
.text$mn:00000E26                 push    eax
.text$mn:00000E27                 call    ??$forward@VIconList@@@std@@YA$$QAVIconList@@AAV1@@Z ; std::forward<IconList>(IconList &)
.text$mn:00000E2C                 add     esp, 4
.text$mn:00000E2F                 push    eax             ; int
.text$mn:00000E30                 mov     ecx, [ebp+arg_0]
.text$mn:00000E33                 push    ecx             ; void *
.text$mn:00000E34                 mov     edx, [ebp+var_4]
.text$mn:00000E37                 push    edx             ; int
.text$mn:00000E38                 call    ??$construct@VIconList@@V1@@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAXAAV?$allocator@VIconList@@@1@PAVIconList@@$$QAV3@@Z ; std::allocator_traits<std::allocator<IconList>>::construct<IconList,IconList>(std::allocator<IconList> &,IconList *,IconList &&)
.text$mn:00000E3D                 add     esp, 0Ch
.text$mn:00000E40                 mov     esp, ebp
.text$mn:00000E42                 pop     ebp
.text$mn:00000E43                 retn    8
.text$mn:00000E43 ??$construct@VIconList@@V1@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@$$QAV2@@Z endp
.text$mn:00000E43
.text$mn:00000E43 ; ---------------------------------------------------------------------------
.text$mn:00000E46                 align 4
.text$mn:00000E46 _text$mn        ends
.text$mn:00000E46
.text$mn:00000E48 ; ===========================================================================
.text$mn:00000E48
.text$mn:00000E48 ; Segment type: Pure code
.text$mn:00000E48 ; Segment permissions: Read/Execute
.text$mn:00000E48 _text$mn        segment para public 'CODE' use32
.text$mn:00000E48                 assume cs:_text$mn
.text$mn:00000E48                 ;org 0E48h
.text$mn:00000E48 ; COMDAT (pick any)
.text$mn:00000E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000E48
.text$mn:00000E48 ; =============== S U B R O U T I N E =======================================
.text$mn:00000E48
.text$mn:00000E48 ; Attributes: bp-based frame
.text$mn:00000E48
.text$mn:00000E48 ; int __stdcall std::allocator<IconList>::construct<IconList,IconList>(void *, int)
.text$mn:00000E48                 public ??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z
.text$mn:00000E48 ??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z proc near
.text$mn:00000E48                                         ; CODE XREF: std::allocator_traits<std::allocator<IconList>>::construct<IconList,IconList>(std::allocator<IconList> &,IconList *,IconList &&)+17p
.text$mn:00000E48
.text$mn:00000E48 var_1C          = dword ptr -1Ch
.text$mn:00000E48 var_18          = dword ptr -18h
.text$mn:00000E48 var_14          = dword ptr -14h
.text$mn:00000E48 var_10          = dword ptr -10h
.text$mn:00000E48 var_C           = dword ptr -0Ch
.text$mn:00000E48 var_4           = dword ptr -4
.text$mn:00000E48 arg_0           = dword ptr  8
.text$mn:00000E48 arg_4           = dword ptr  0Ch
.text$mn:00000E48
.text$mn:00000E48                 push    ebp
.text$mn:00000E49                 mov     ebp, esp
.text$mn:00000E4B                 push    0FFFFFFFFh
.text$mn:00000E4D                 push    offset __ehhandler$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z
.text$mn:00000E52                 mov     eax, large fs:0
.text$mn:00000E58                 push    eax
.text$mn:00000E59                 sub     esp, 10h
.text$mn:00000E5C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000E61                 xor     eax, ebp
.text$mn:00000E63                 push    eax
.text$mn:00000E64                 lea     eax, [ebp+var_C]
.text$mn:00000E67                 mov     large fs:0, eax
.text$mn:00000E6D                 mov     [ebp+var_18], ecx
.text$mn:00000E70                 mov     eax, [ebp+arg_0]
.text$mn:00000E73                 push    eax             ; void *
.text$mn:00000E74                 push    14h             ; unsigned int
.text$mn:00000E76                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00000E7B                 add     esp, 8
.text$mn:00000E7E                 mov     [ebp+var_10], eax
.text$mn:00000E81                 mov     [ebp+var_4], 0
.text$mn:00000E88                 cmp     [ebp+var_10], 0
.text$mn:00000E8C                 jz      short loc_EC1
.text$mn:00000E8E                 mov     ecx, [ebp+arg_4]
.text$mn:00000E91                 push    ecx
.text$mn:00000E92                 call    ??$forward@VIconList@@@std@@YA$$QAVIconList@@AAV1@@Z ; std::forward<IconList>(IconList &)
.text$mn:00000E97                 add     esp, 4
.text$mn:00000E9A                 mov     edx, [ebp+var_10]
.text$mn:00000E9D                 mov     ecx, [eax]
.text$mn:00000E9F                 mov     [edx], ecx
.text$mn:00000EA1                 mov     ecx, [eax+4]
.text$mn:00000EA4                 mov     [edx+4], ecx
.text$mn:00000EA7                 mov     ecx, [eax+8]
.text$mn:00000EAA                 mov     [edx+8], ecx
.text$mn:00000EAD                 mov     ecx, [eax+0Ch]
.text$mn:00000EB0                 mov     [edx+0Ch], ecx
.text$mn:00000EB3                 mov     eax, [eax+10h]
.text$mn:00000EB6                 mov     [edx+10h], eax
.text$mn:00000EB9                 mov     ecx, [ebp+var_10]
.text$mn:00000EBC                 mov     [ebp+var_14], ecx
.text$mn:00000EBF                 jmp     short loc_EC8
.text$mn:00000EC1 ; ---------------------------------------------------------------------------
.text$mn:00000EC1
.text$mn:00000EC1 loc_EC1:                                ; CODE XREF: std::allocator<IconList>::construct<IconList,IconList>(IconList *,IconList &&)+44j
.text$mn:00000EC1                 mov     [ebp+var_14], 0
.text$mn:00000EC8
.text$mn:00000EC8 loc_EC8:                                ; CODE XREF: std::allocator<IconList>::construct<IconList,IconList>(IconList *,IconList &&)+77j
.text$mn:00000EC8                 mov     edx, [ebp+var_14]
.text$mn:00000ECB                 mov     [ebp+var_1C], edx
.text$mn:00000ECE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00000ED5                 mov     ecx, [ebp+var_C]
.text$mn:00000ED8                 mov     large fs:0, ecx
.text$mn:00000EDF                 pop     ecx
.text$mn:00000EE0                 mov     esp, ebp
.text$mn:00000EE2                 pop     ebp
.text$mn:00000EE3                 retn    8
.text$mn:00000EE3 ??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z endp
.text$mn:00000EE3
.text$mn:00000EE3 ; ---------------------------------------------------------------------------
.text$mn:00000EE6                 align 4
.text$mn:00000EE6 _text$mn        ends
.text$mn:00000EE6
.text$x:00000EE8 ; ===========================================================================
.text$x:00000EE8
.text$x:00000EE8 ; Segment type: Pure code
.text$x:00000EE8 ; Segment permissions: Read/Execute
.text$x:00000EE8 _text$x         segment para public 'CODE' use32
.text$x:00000EE8                 assume cs:_text$x
.text$x:00000EE8                 ;org 0EE8h
.text$x:00000EE8 ; COMDAT (pick associative to section at E48)
.text$x:00000EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00000EE8
.text$x:00000EE8 ; =============== S U B R O U T I N E =======================================
.text$x:00000EE8
.text$x:00000EE8
.text$x:00000EE8 __unwindfunclet$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z$0 proc near
.text$x:00000EE8                                         ; DATA XREF: .xdata$x:00002330o
.text$x:00000EE8                 mov     eax, [ebp+8]
.text$x:00000EEB                 push    eax
.text$x:00000EEC                 mov     eax, [ebp-10h]
.text$x:00000EEF                 push    eax             ; void *
.text$x:00000EF0                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00000EF5                 add     esp, 8
.text$x:00000EF8                 retn
.text$x:00000EF8 __unwindfunclet$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z$0 endp
.text$x:00000EF8
.text$x:00000EF9
.text$x:00000EF9 ; =============== S U B R O U T I N E =======================================
.text$x:00000EF9
.text$x:00000EF9
.text$x:00000EF9 __ehhandler$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z proc near
.text$x:00000EF9                                         ; DATA XREF: std::allocator<IconList>::construct<IconList,IconList>(IconList *,IconList &&)+5o
.text$x:00000EF9
.text$x:00000EF9 arg_4           = dword ptr  8
.text$x:00000EF9
.text$x:00000EF9                 mov     edx, [esp+arg_4]
.text$x:00000EFD                 lea     eax, [edx+0Ch]
.text$x:00000F00                 mov     ecx, [edx-14h]
.text$x:00000F03                 xor     ecx, eax
.text$x:00000F05                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00000F0A                 mov     eax, offset __ehfuncinfo$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z
.text$x:00000F0F                 jmp     ___CxxFrameHandler3
.text$x:00000F0F __ehhandler$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z endp
.text$x:00000F0F
.text$x:00000F0F _text$x         ends
.text$x:00000F0F
.text$mn:00000F14 ; ===========================================================================
.text$mn:00000F14
.text$mn:00000F14 ; Segment type: Pure code
.text$mn:00000F14 ; Segment permissions: Read/Execute
.text$mn:00000F14 _text$mn        segment para public 'CODE' use32
.text$mn:00000F14                 assume cs:_text$mn
.text$mn:00000F14                 ;org 0F14h
.text$mn:00000F14 ; COMDAT (pick any)
.text$mn:00000F14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000F14
.text$mn:00000F14 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F14
.text$mn:00000F14 ; Attributes: bp-based frame
.text$mn:00000F14
.text$mn:00000F14 ; int __cdecl std::allocator_traits<std::allocator<IconList>>::construct<IconList,IconList>(int, void *, int)
.text$mn:00000F14                 public ??$construct@VIconList@@V1@@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAXAAV?$allocator@VIconList@@@1@PAVIconList@@$$QAV3@@Z
.text$mn:00000F14 ??$construct@VIconList@@V1@@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAXAAV?$allocator@VIconList@@@1@PAVIconList@@$$QAV3@@Z proc near
.text$mn:00000F14                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<IconList>>::construct<IconList,IconList>(IconList *,IconList &&)+1Cp
.text$mn:00000F14
.text$mn:00000F14 arg_0           = dword ptr  8
.text$mn:00000F14 arg_4           = dword ptr  0Ch
.text$mn:00000F14 arg_8           = dword ptr  10h
.text$mn:00000F14
.text$mn:00000F14                 push    ebp
.text$mn:00000F15                 mov     ebp, esp
.text$mn:00000F17                 mov     eax, [ebp+arg_8]
.text$mn:00000F1A                 push    eax
.text$mn:00000F1B                 call    ??$forward@VIconList@@@std@@YA$$QAVIconList@@AAV1@@Z ; std::forward<IconList>(IconList &)
.text$mn:00000F20                 add     esp, 4
.text$mn:00000F23                 push    eax             ; int
.text$mn:00000F24                 mov     ecx, [ebp+arg_4]
.text$mn:00000F27                 push    ecx             ; void *
.text$mn:00000F28                 mov     ecx, [ebp+arg_0]
.text$mn:00000F2B                 call    ??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z ; std::allocator<IconList>::construct<IconList,IconList>(IconList *,IconList &&)
.text$mn:00000F30                 pop     ebp
.text$mn:00000F31                 retn
.text$mn:00000F31 ??$construct@VIconList@@V1@@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAXAAV?$allocator@VIconList@@@1@PAVIconList@@$$QAV3@@Z endp
.text$mn:00000F31
.text$mn:00000F31 ; ---------------------------------------------------------------------------
.text$mn:00000F32                 align 4
.text$mn:00000F32 _text$mn        ends
.text$mn:00000F32
.text$mn:00000F34 ; ===========================================================================
.text$mn:00000F34
.text$mn:00000F34 ; Segment type: Pure code
.text$mn:00000F34 ; Segment permissions: Read/Execute
.text$mn:00000F34 _text$mn        segment para public 'CODE' use32
.text$mn:00000F34                 assume cs:_text$mn
.text$mn:00000F34                 ;org 0F34h
.text$mn:00000F34 ; COMDAT (pick any)
.text$mn:00000F34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000F34
.text$mn:00000F34 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F34
.text$mn:00000F34 ; Attributes: bp-based frame
.text$mn:00000F34
.text$mn:00000F34 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>>::destroy<struct ToolBarButtonUnit>(struct ToolBarButtonUnit *)
.text$mn:00000F34                 public ??$destroy@UToolBarButtonUnit@@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@@Z
.text$mn:00000F34 ??$destroy@UToolBarButtonUnit@@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@@Z proc near
.text$mn:00000F34                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00000F34                                         ; __catch$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:00000F34
.text$mn:00000F34 var_4           = dword ptr -4
.text$mn:00000F34 arg_0           = dword ptr  8
.text$mn:00000F34
.text$mn:00000F34                 push    ebp
.text$mn:00000F35                 mov     ebp, esp
.text$mn:00000F37                 push    ecx
.text$mn:00000F38                 mov     [ebp+var_4], ecx
.text$mn:00000F3B                 mov     eax, [ebp+arg_0]
.text$mn:00000F3E                 push    eax
.text$mn:00000F3F                 mov     ecx, [ebp+var_4]
.text$mn:00000F42                 push    ecx
.text$mn:00000F43                 call    ??$destroy@UToolBarButtonUnit@@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@@Z ; std::allocator_traits<std::allocator<ToolBarButtonUnit>>::destroy<ToolBarButtonUnit>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *)
.text$mn:00000F48                 add     esp, 8
.text$mn:00000F4B                 mov     esp, ebp
.text$mn:00000F4D                 pop     ebp
.text$mn:00000F4E                 retn    4
.text$mn:00000F4E ??$destroy@UToolBarButtonUnit@@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@@Z endp
.text$mn:00000F4E
.text$mn:00000F4E ; ---------------------------------------------------------------------------
.text$mn:00000F51                 align 4
.text$mn:00000F51 _text$mn        ends
.text$mn:00000F51
.text$mn:00000F54 ; ===========================================================================
.text$mn:00000F54
.text$mn:00000F54 ; Segment type: Pure code
.text$mn:00000F54 ; Segment permissions: Read/Execute
.text$mn:00000F54 _text$mn        segment para public 'CODE' use32
.text$mn:00000F54                 assume cs:_text$mn
.text$mn:00000F54                 ;org 0F54h
.text$mn:00000F54 ; COMDAT (pick any)
.text$mn:00000F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000F54
.text$mn:00000F54 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F54
.text$mn:00000F54 ; Attributes: bp-based frame
.text$mn:00000F54
.text$mn:00000F54 ; public: void __thiscall std::allocator<struct ToolBarButtonUnit>::destroy<struct ToolBarButtonUnit>(struct ToolBarButtonUnit *)
.text$mn:00000F54                 public ??$destroy@UToolBarButtonUnit@@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@@Z
.text$mn:00000F54 ??$destroy@UToolBarButtonUnit@@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@@Z proc near
.text$mn:00000F54                                         ; CODE XREF: std::allocator_traits<std::allocator<ToolBarButtonUnit>>::destroy<ToolBarButtonUnit>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *)+Ap
.text$mn:00000F54
.text$mn:00000F54 var_4           = dword ptr -4
.text$mn:00000F54
.text$mn:00000F54                 push    ebp
.text$mn:00000F55                 mov     ebp, esp
.text$mn:00000F57                 push    ecx
.text$mn:00000F58                 mov     [ebp+var_4], ecx
.text$mn:00000F5B                 mov     esp, ebp
.text$mn:00000F5D                 pop     ebp
.text$mn:00000F5E                 retn    4
.text$mn:00000F5E ??$destroy@UToolBarButtonUnit@@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@@Z endp
.text$mn:00000F5E
.text$mn:00000F5E ; ---------------------------------------------------------------------------
.text$mn:00000F61                 align 4
.text$mn:00000F61 _text$mn        ends
.text$mn:00000F61
.text$mn:00000F64 ; ===========================================================================
.text$mn:00000F64
.text$mn:00000F64 ; Segment type: Pure code
.text$mn:00000F64 ; Segment permissions: Read/Execute
.text$mn:00000F64 _text$mn        segment para public 'CODE' use32
.text$mn:00000F64                 assume cs:_text$mn
.text$mn:00000F64                 ;org 0F64h
.text$mn:00000F64 ; COMDAT (pick any)
.text$mn:00000F64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000F64
.text$mn:00000F64 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F64
.text$mn:00000F64 ; Attributes: bp-based frame
.text$mn:00000F64
.text$mn:00000F64 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct ToolBarButtonUnit>>::destroy<struct ToolBarButtonUnit>(class std::allocator<struct ToolBarButtonUnit> &, struct ToolBarButtonUnit *)
.text$mn:00000F64                 public ??$destroy@UToolBarButtonUnit@@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@@Z
.text$mn:00000F64 ??$destroy@UToolBarButtonUnit@@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@@Z proc near
.text$mn:00000F64                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::destroy<ToolBarButtonUnit>(ToolBarButtonUnit *)+Fp
.text$mn:00000F64
.text$mn:00000F64 arg_0           = dword ptr  8
.text$mn:00000F64 arg_4           = dword ptr  0Ch
.text$mn:00000F64
.text$mn:00000F64                 push    ebp
.text$mn:00000F65                 mov     ebp, esp
.text$mn:00000F67                 mov     eax, [ebp+arg_4]
.text$mn:00000F6A                 push    eax
.text$mn:00000F6B                 mov     ecx, [ebp+arg_0]
.text$mn:00000F6E                 call    ??$destroy@UToolBarButtonUnit@@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@@Z ; std::allocator<ToolBarButtonUnit>::destroy<ToolBarButtonUnit>(ToolBarButtonUnit *)
.text$mn:00000F73                 pop     ebp
.text$mn:00000F74                 retn
.text$mn:00000F74 ??$destroy@UToolBarButtonUnit@@@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAXAAV?$allocator@UToolBarButtonUnit@@@1@PAUToolBarButtonUnit@@@Z endp
.text$mn:00000F74
.text$mn:00000F74 ; ---------------------------------------------------------------------------
.text$mn:00000F75                 align 4
.text$mn:00000F75 _text$mn        ends
.text$mn:00000F75
.text$mn:00000F78 ; ===========================================================================
.text$mn:00000F78
.text$mn:00000F78 ; Segment type: Pure code
.text$mn:00000F78 ; Segment permissions: Read/Execute
.text$mn:00000F78 _text$mn        segment para public 'CODE' use32
.text$mn:00000F78                 assume cs:_text$mn
.text$mn:00000F78                 ;org 0F78h
.text$mn:00000F78 ; COMDAT (pick any)
.text$mn:00000F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000F78
.text$mn:00000F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F78
.text$mn:00000F78 ; Attributes: bp-based frame
.text$mn:00000F78
.text$mn:00000F78 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<class IconList>>::destroy<class IconList>(class IconList *)
.text$mn:00000F78                 public ??$destroy@VIconList@@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@@Z
.text$mn:00000F78 ??$destroy@VIconList@@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@@Z proc near
.text$mn:00000F78                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:00000F78                                         ; __catch$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:00000F78
.text$mn:00000F78 var_4           = dword ptr -4
.text$mn:00000F78 arg_0           = dword ptr  8
.text$mn:00000F78
.text$mn:00000F78                 push    ebp
.text$mn:00000F79                 mov     ebp, esp
.text$mn:00000F7B                 push    ecx
.text$mn:00000F7C                 mov     [ebp+var_4], ecx
.text$mn:00000F7F                 mov     eax, [ebp+arg_0]
.text$mn:00000F82                 push    eax
.text$mn:00000F83                 mov     ecx, [ebp+var_4]
.text$mn:00000F86                 push    ecx
.text$mn:00000F87                 call    ??$destroy@VIconList@@@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAXAAV?$allocator@VIconList@@@1@PAVIconList@@@Z ; std::allocator_traits<std::allocator<IconList>>::destroy<IconList>(std::allocator<IconList> &,IconList *)
.text$mn:00000F8C                 add     esp, 8
.text$mn:00000F8F                 mov     esp, ebp
.text$mn:00000F91                 pop     ebp
.text$mn:00000F92                 retn    4
.text$mn:00000F92 ??$destroy@VIconList@@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@@Z endp
.text$mn:00000F92
.text$mn:00000F92 ; ---------------------------------------------------------------------------
.text$mn:00000F95                 align 4
.text$mn:00000F95 _text$mn        ends
.text$mn:00000F95
.text$mn:00000F98 ; ===========================================================================
.text$mn:00000F98
.text$mn:00000F98 ; Segment type: Pure code
.text$mn:00000F98 ; Segment permissions: Read/Execute
.text$mn:00000F98 _text$mn        segment para public 'CODE' use32
.text$mn:00000F98                 assume cs:_text$mn
.text$mn:00000F98                 ;org 0F98h
.text$mn:00000F98 ; COMDAT (pick any)
.text$mn:00000F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000F98
.text$mn:00000F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00000F98
.text$mn:00000F98 ; Attributes: bp-based frame
.text$mn:00000F98
.text$mn:00000F98 ; public: void __thiscall std::allocator<class IconList>::destroy<class IconList>(class IconList *)
.text$mn:00000F98                 public ??$destroy@VIconList@@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@@Z
.text$mn:00000F98 ??$destroy@VIconList@@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@@Z proc near
.text$mn:00000F98                                         ; CODE XREF: std::allocator_traits<std::allocator<IconList>>::destroy<IconList>(std::allocator<IconList> &,IconList *)+Ap
.text$mn:00000F98
.text$mn:00000F98 var_4           = dword ptr -4
.text$mn:00000F98
.text$mn:00000F98                 push    ebp
.text$mn:00000F99                 mov     ebp, esp
.text$mn:00000F9B                 push    ecx
.text$mn:00000F9C                 mov     [ebp+var_4], ecx
.text$mn:00000F9F                 mov     esp, ebp
.text$mn:00000FA1                 pop     ebp
.text$mn:00000FA2                 retn    4
.text$mn:00000FA2 ??$destroy@VIconList@@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@@Z endp
.text$mn:00000FA2
.text$mn:00000FA2 ; ---------------------------------------------------------------------------
.text$mn:00000FA5                 align 4
.text$mn:00000FA5 _text$mn        ends
.text$mn:00000FA5
.text$mn:00000FA8 ; ===========================================================================
.text$mn:00000FA8
.text$mn:00000FA8 ; Segment type: Pure code
.text$mn:00000FA8 ; Segment permissions: Read/Execute
.text$mn:00000FA8 _text$mn        segment para public 'CODE' use32
.text$mn:00000FA8                 assume cs:_text$mn
.text$mn:00000FA8                 ;org 0FA8h
.text$mn:00000FA8 ; COMDAT (pick any)
.text$mn:00000FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000FA8
.text$mn:00000FA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00000FA8
.text$mn:00000FA8 ; Attributes: bp-based frame
.text$mn:00000FA8
.text$mn:00000FA8 ; public: static void __cdecl std::allocator_traits<class std::allocator<class IconList>>::destroy<class IconList>(class std::allocator<class IconList> &, class IconList *)
.text$mn:00000FA8                 public ??$destroy@VIconList@@@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAXAAV?$allocator@VIconList@@@1@PAVIconList@@@Z
.text$mn:00000FA8 ??$destroy@VIconList@@@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAXAAV?$allocator@VIconList@@@1@PAVIconList@@@Z proc near
.text$mn:00000FA8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<IconList>>::destroy<IconList>(IconList *)+Fp
.text$mn:00000FA8
.text$mn:00000FA8 arg_0           = dword ptr  8
.text$mn:00000FA8 arg_4           = dword ptr  0Ch
.text$mn:00000FA8
.text$mn:00000FA8                 push    ebp
.text$mn:00000FA9                 mov     ebp, esp
.text$mn:00000FAB                 mov     eax, [ebp+arg_4]
.text$mn:00000FAE                 push    eax
.text$mn:00000FAF                 mov     ecx, [ebp+arg_0]
.text$mn:00000FB2                 call    ??$destroy@VIconList@@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@@Z ; std::allocator<IconList>::destroy<IconList>(IconList *)
.text$mn:00000FB7                 pop     ebp
.text$mn:00000FB8                 retn
.text$mn:00000FB8 ??$destroy@VIconList@@@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAXAAV?$allocator@VIconList@@@1@PAVIconList@@@Z endp
.text$mn:00000FB8
.text$mn:00000FB8 ; ---------------------------------------------------------------------------
.text$mn:00000FB9                 align 4
.text$mn:00000FB9 _text$mn        ends
.text$mn:00000FB9
.text$mn:00000FBC ; ===========================================================================
.text$mn:00000FBC
.text$mn:00000FBC ; Segment type: Pure code
.text$mn:00000FBC ; Segment permissions: Read/Execute
.text$mn:00000FBC _text$mn        segment para public 'CODE' use32
.text$mn:00000FBC                 assume cs:_text$mn
.text$mn:00000FBC                 ;org 0FBCh
.text$mn:00000FBC ; COMDAT (pick any)
.text$mn:00000FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000FBC
.text$mn:00000FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00000FBC
.text$mn:00000FBC ; Attributes: bp-based frame
.text$mn:00000FBC
.text$mn:00000FBC ; struct ToolBarButtonUnit & __cdecl std::forward<struct ToolBarButtonUnit &>(struct ToolBarButtonUnit &)
.text$mn:00000FBC                 public ??$forward@AAUToolBarButtonUnit@@@std@@YAAAUToolBarButtonUnit@@AAU1@@Z
.text$mn:00000FBC ??$forward@AAUToolBarButtonUnit@@@std@@YAAAUToolBarButtonUnit@@AAU1@@Z proc near
.text$mn:00000FBC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)+Bp
.text$mn:00000FBC                                         ; std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)+4Ap ...
.text$mn:00000FBC
.text$mn:00000FBC arg_0           = dword ptr  8
.text$mn:00000FBC
.text$mn:00000FBC                 push    ebp
.text$mn:00000FBD                 mov     ebp, esp
.text$mn:00000FBF                 mov     eax, [ebp+arg_0]
.text$mn:00000FC2                 pop     ebp
.text$mn:00000FC3                 retn
.text$mn:00000FC3 ??$forward@AAUToolBarButtonUnit@@@std@@YAAAUToolBarButtonUnit@@AAU1@@Z endp
.text$mn:00000FC3
.text$mn:00000FC3 _text$mn        ends
.text$mn:00000FC3
.text$mn:00000FC4 ; ===========================================================================
.text$mn:00000FC4
.text$mn:00000FC4 ; Segment type: Pure code
.text$mn:00000FC4 ; Segment permissions: Read/Execute
.text$mn:00000FC4 _text$mn        segment para public 'CODE' use32
.text$mn:00000FC4                 assume cs:_text$mn
.text$mn:00000FC4                 ;org 0FC4h
.text$mn:00000FC4 ; COMDAT (pick any)
.text$mn:00000FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000FC4
.text$mn:00000FC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00000FC4
.text$mn:00000FC4 ; Attributes: bp-based frame
.text$mn:00000FC4
.text$mn:00000FC4 ; struct ToolBarButtonUnit const & __cdecl std::forward<struct ToolBarButtonUnit const &>(struct ToolBarButtonUnit const &)
.text$mn:00000FC4                 public ??$forward@ABUToolBarButtonUnit@@@std@@YAABUToolBarButtonUnit@@ABU1@@Z
.text$mn:00000FC4 ??$forward@ABUToolBarButtonUnit@@@std@@YAABUToolBarButtonUnit@@ABU1@@Z proc near
.text$mn:00000FC4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit const &>(ToolBarButtonUnit *,ToolBarButtonUnit const &)+Bp
.text$mn:00000FC4                                         ; std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit const &>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *,ToolBarButtonUnit const &)+7p
.text$mn:00000FC4
.text$mn:00000FC4 arg_0           = dword ptr  8
.text$mn:00000FC4
.text$mn:00000FC4                 push    ebp
.text$mn:00000FC5                 mov     ebp, esp
.text$mn:00000FC7                 mov     eax, [ebp+arg_0]
.text$mn:00000FCA                 pop     ebp
.text$mn:00000FCB                 retn
.text$mn:00000FCB ??$forward@ABUToolBarButtonUnit@@@std@@YAABUToolBarButtonUnit@@ABU1@@Z endp
.text$mn:00000FCB
.text$mn:00000FCB _text$mn        ends
.text$mn:00000FCB
.text$mn:00000FCC ; ===========================================================================
.text$mn:00000FCC
.text$mn:00000FCC ; Segment type: Pure code
.text$mn:00000FCC ; Segment permissions: Read/Execute
.text$mn:00000FCC _text$mn        segment para public 'CODE' use32
.text$mn:00000FCC                 assume cs:_text$mn
.text$mn:00000FCC                 ;org 0FCCh
.text$mn:00000FCC ; COMDAT (pick any)
.text$mn:00000FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000FCC
.text$mn:00000FCC ; =============== S U B R O U T I N E =======================================
.text$mn:00000FCC
.text$mn:00000FCC ; Attributes: bp-based frame
.text$mn:00000FCC
.text$mn:00000FCC ; struct ToolBarButtonUnit && __cdecl std::forward<struct ToolBarButtonUnit>(struct ToolBarButtonUnit &)
.text$mn:00000FCC                 public ??$forward@UToolBarButtonUnit@@@std@@YA$$QAUToolBarButtonUnit@@AAU1@@Z
.text$mn:00000FCC ??$forward@UToolBarButtonUnit@@@std@@YA$$QAUToolBarButtonUnit@@AAU1@@Z proc near
.text$mn:00000FCC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)+Bp
.text$mn:00000FCC                                         ; std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)+4Ap ...
.text$mn:00000FCC
.text$mn:00000FCC arg_0           = dword ptr  8
.text$mn:00000FCC
.text$mn:00000FCC                 push    ebp
.text$mn:00000FCD                 mov     ebp, esp
.text$mn:00000FCF                 mov     eax, [ebp+arg_0]
.text$mn:00000FD2                 pop     ebp
.text$mn:00000FD3                 retn
.text$mn:00000FD3 ??$forward@UToolBarButtonUnit@@@std@@YA$$QAUToolBarButtonUnit@@AAU1@@Z endp
.text$mn:00000FD3
.text$mn:00000FD3 _text$mn        ends
.text$mn:00000FD3
.text$mn:00000FD4 ; ===========================================================================
.text$mn:00000FD4
.text$mn:00000FD4 ; Segment type: Pure code
.text$mn:00000FD4 ; Segment permissions: Read/Execute
.text$mn:00000FD4 _text$mn        segment para public 'CODE' use32
.text$mn:00000FD4                 assume cs:_text$mn
.text$mn:00000FD4                 ;org 0FD4h
.text$mn:00000FD4 ; COMDAT (pick any)
.text$mn:00000FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000FD4
.text$mn:00000FD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00000FD4
.text$mn:00000FD4 ; Attributes: bp-based frame
.text$mn:00000FD4
.text$mn:00000FD4 ; class IconList && __cdecl std::forward<class IconList>(class IconList &)
.text$mn:00000FD4                 public ??$forward@VIconList@@@std@@YA$$QAVIconList@@AAV1@@Z
.text$mn:00000FD4 ??$forward@VIconList@@@std@@YA$$QAVIconList@@AAV1@@Z proc near
.text$mn:00000FD4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<IconList>>::construct<IconList,IconList>(IconList *,IconList &&)+Bp
.text$mn:00000FD4                                         ; std::allocator<IconList>::construct<IconList,IconList>(IconList *,IconList &&)+4Ap ...
.text$mn:00000FD4
.text$mn:00000FD4 arg_0           = dword ptr  8
.text$mn:00000FD4
.text$mn:00000FD4                 push    ebp
.text$mn:00000FD5                 mov     ebp, esp
.text$mn:00000FD7                 mov     eax, [ebp+arg_0]
.text$mn:00000FDA                 pop     ebp
.text$mn:00000FDB                 retn
.text$mn:00000FDB ??$forward@VIconList@@@std@@YA$$QAVIconList@@AAV1@@Z endp
.text$mn:00000FDB
.text$mn:00000FDB _text$mn        ends
.text$mn:00000FDB
.text$mn:00000FDC ; ===========================================================================
.text$mn:00000FDC
.text$mn:00000FDC ; Segment type: Pure code
.text$mn:00000FDC ; Segment permissions: Read/Execute
.text$mn:00000FDC _text$mn        segment para public 'CODE' use32
.text$mn:00000FDC                 assume cs:_text$mn
.text$mn:00000FDC                 ;org 0FDCh
.text$mn:00000FDC ; COMDAT (pick any)
.text$mn:00000FDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000FDC
.text$mn:00000FDC ; =============== S U B R O U T I N E =======================================
.text$mn:00000FDC
.text$mn:00000FDC ; Attributes: bp-based frame
.text$mn:00000FDC
.text$mn:00000FDC ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>>::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>>(void)
.text$mn:00000FDC                 public ??0?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAE@XZ
.text$mn:00000FDC ??0?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAE@XZ proc near
.text$mn:00000FDC                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)+Ap
.text$mn:00000FDC
.text$mn:00000FDC var_4           = dword ptr -4
.text$mn:00000FDC
.text$mn:00000FDC                 push    ebp
.text$mn:00000FDD                 mov     ebp, esp
.text$mn:00000FDF                 push    ecx
.text$mn:00000FE0                 mov     [ebp+var_4], ecx
.text$mn:00000FE3                 mov     ecx, [ebp+var_4]
.text$mn:00000FE6                 call    ??0?$allocator@UToolBarButtonUnit@@@std@@QAE@XZ ; std::allocator<ToolBarButtonUnit>::allocator<ToolBarButtonUnit>(void)
.text$mn:00000FEB                 mov     eax, [ebp+var_4]
.text$mn:00000FEE                 mov     esp, ebp
.text$mn:00000FF0                 pop     ebp
.text$mn:00000FF1                 retn
.text$mn:00000FF1 ??0?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAE@XZ endp
.text$mn:00000FF1
.text$mn:00000FF1 ; ---------------------------------------------------------------------------
.text$mn:00000FF2                 align 4
.text$mn:00000FF2 _text$mn        ends
.text$mn:00000FF2
.text$mn:00000FF4 ; ===========================================================================
.text$mn:00000FF4
.text$mn:00000FF4 ; Segment type: Pure code
.text$mn:00000FF4 ; Segment permissions: Read/Execute
.text$mn:00000FF4 _text$mn        segment para public 'CODE' use32
.text$mn:00000FF4                 assume cs:_text$mn
.text$mn:00000FF4                 ;org 0FF4h
.text$mn:00000FF4 ; COMDAT (pick any)
.text$mn:00000FF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000FF4
.text$mn:00000FF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00000FF4
.text$mn:00000FF4 ; Attributes: bp-based frame
.text$mn:00000FF4
.text$mn:00000FF4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<class IconList>>::_Wrap_alloc<class std::allocator<class IconList>>(void)
.text$mn:00000FF4                 public ??0?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAE@XZ
.text$mn:00000FF4 ??0?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAE@XZ proc near
.text$mn:00000FF4                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)+Ap
.text$mn:00000FF4
.text$mn:00000FF4 var_4           = dword ptr -4
.text$mn:00000FF4
.text$mn:00000FF4                 push    ebp
.text$mn:00000FF5                 mov     ebp, esp
.text$mn:00000FF7                 push    ecx
.text$mn:00000FF8                 mov     [ebp+var_4], ecx
.text$mn:00000FFB                 mov     ecx, [ebp+var_4]
.text$mn:00000FFE                 call    ??0?$allocator@VIconList@@@std@@QAE@XZ ; std::allocator<IconList>::allocator<IconList>(void)
.text$mn:00001003                 mov     eax, [ebp+var_4]
.text$mn:00001006                 mov     esp, ebp
.text$mn:00001008                 pop     ebp
.text$mn:00001009                 retn
.text$mn:00001009 ??0?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAE@XZ endp
.text$mn:00001009
.text$mn:00001009 ; ---------------------------------------------------------------------------
.text$mn:0000100A                 align 4
.text$mn:0000100A _text$mn        ends
.text$mn:0000100A
.text$mn:0000100C ; ===========================================================================
.text$mn:0000100C
.text$mn:0000100C ; Segment type: Pure code
.text$mn:0000100C ; Segment permissions: Read/Execute
.text$mn:0000100C _text$mn        segment para public 'CODE' use32
.text$mn:0000100C                 assume cs:_text$mn
.text$mn:0000100C                 ;org 100Ch
.text$mn:0000100C ; COMDAT (pick any)
.text$mn:0000100C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000100C
.text$mn:0000100C ; =============== S U B R O U T I N E =======================================
.text$mn:0000100C
.text$mn:0000100C ; Attributes: bp-based frame
.text$mn:0000100C
.text$mn:0000100C ; public: __thiscall std::allocator<struct ToolBarButtonUnit>::allocator<struct ToolBarButtonUnit>(void)
.text$mn:0000100C                 public ??0?$allocator@UToolBarButtonUnit@@@std@@QAE@XZ
.text$mn:0000100C ??0?$allocator@UToolBarButtonUnit@@@std@@QAE@XZ proc near
.text$mn:0000100C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>(void)+Ap
.text$mn:0000100C
.text$mn:0000100C var_4           = dword ptr -4
.text$mn:0000100C
.text$mn:0000100C                 push    ebp
.text$mn:0000100D                 mov     ebp, esp
.text$mn:0000100F                 push    ecx
.text$mn:00001010                 mov     [ebp+var_4], ecx
.text$mn:00001013                 mov     eax, [ebp+var_4]
.text$mn:00001016                 mov     esp, ebp
.text$mn:00001018                 pop     ebp
.text$mn:00001019                 retn
.text$mn:00001019 ??0?$allocator@UToolBarButtonUnit@@@std@@QAE@XZ endp
.text$mn:00001019
.text$mn:00001019 ; ---------------------------------------------------------------------------
.text$mn:0000101A                 align 4
.text$mn:0000101A _text$mn        ends
.text$mn:0000101A
.text$mn:0000101C ; ===========================================================================
.text$mn:0000101C
.text$mn:0000101C ; Segment type: Pure code
.text$mn:0000101C ; Segment permissions: Read/Execute
.text$mn:0000101C _text$mn        segment para public 'CODE' use32
.text$mn:0000101C                 assume cs:_text$mn
.text$mn:0000101C                 ;org 101Ch
.text$mn:0000101C ; COMDAT (pick any)
.text$mn:0000101C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000101C
.text$mn:0000101C ; =============== S U B R O U T I N E =======================================
.text$mn:0000101C
.text$mn:0000101C ; Attributes: bp-based frame
.text$mn:0000101C
.text$mn:0000101C ; public: __thiscall std::allocator<class IconList>::allocator<class IconList>(void)
.text$mn:0000101C                 public ??0?$allocator@VIconList@@@std@@QAE@XZ
.text$mn:0000101C ??0?$allocator@VIconList@@@std@@QAE@XZ proc near
.text$mn:0000101C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<IconList>>::_Wrap_alloc<std::allocator<IconList>>(void)+Ap
.text$mn:0000101C
.text$mn:0000101C var_4           = dword ptr -4
.text$mn:0000101C
.text$mn:0000101C                 push    ebp
.text$mn:0000101D                 mov     ebp, esp
.text$mn:0000101F                 push    ecx
.text$mn:00001020                 mov     [ebp+var_4], ecx
.text$mn:00001023                 mov     eax, [ebp+var_4]
.text$mn:00001026                 mov     esp, ebp
.text$mn:00001028                 pop     ebp
.text$mn:00001029                 retn
.text$mn:00001029 ??0?$allocator@VIconList@@@std@@QAE@XZ endp
.text$mn:00001029
.text$mn:00001029 ; ---------------------------------------------------------------------------
.text$mn:0000102A                 align 4
.text$mn:0000102A _text$mn        ends
.text$mn:0000102A
.text$mn:0000102C ; ===========================================================================
.text$mn:0000102C
.text$mn:0000102C ; Segment type: Pure code
.text$mn:0000102C ; Segment permissions: Read/Execute
.text$mn:0000102C _text$mn        segment para public 'CODE' use32
.text$mn:0000102C                 assume cs:_text$mn
.text$mn:0000102C                 ;org 102Ch
.text$mn:0000102C ; COMDAT (pick any)
.text$mn:0000102C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000102C
.text$mn:0000102C ; =============== S U B R O U T I N E =======================================
.text$mn:0000102C
.text$mn:0000102C ; Attributes: bp-based frame
.text$mn:0000102C
.text$mn:0000102C ; public: __thiscall IconList::IconList(void)
.text$mn:0000102C                 public ??0IconList@@QAE@XZ
.text$mn:0000102C ??0IconList@@QAE@XZ proc near           ; CODE XREF: ToolBarIcons::create(HINSTANCE__ *,int)+Cp
.text$mn:0000102C                                         ; ToolBarIcons::create(HINSTANCE__ *,int)+1Dp ...
.text$mn:0000102C
.text$mn:0000102C var_4           = dword ptr -4
.text$mn:0000102C
.text$mn:0000102C                 push    ebp
.text$mn:0000102D                 mov     ebp, esp
.text$mn:0000102F                 push    ecx
.text$mn:00001030                 mov     [ebp+var_4], ecx
.text$mn:00001033                 mov     eax, [ebp+var_4]
.text$mn:00001036                 mov     dword ptr [eax], 0
.text$mn:0000103C                 mov     eax, [ebp+var_4]
.text$mn:0000103F                 mov     esp, ebp
.text$mn:00001041                 pop     ebp
.text$mn:00001042                 retn
.text$mn:00001042 ??0IconList@@QAE@XZ endp
.text$mn:00001042
.text$mn:00001042 ; ---------------------------------------------------------------------------
.text$mn:00001043                 align 4
.text$mn:00001043 _text$mn        ends
.text$mn:00001043
.text$mn:00001044 ; ===========================================================================
.text$mn:00001044
.text$mn:00001044 ; Segment type: Pure code
.text$mn:00001044 ; Segment permissions: Read/Execute
.text$mn:00001044 _text$mn        segment para public 'CODE' use32
.text$mn:00001044                 assume cs:_text$mn
.text$mn:00001044                 ;org 1044h
.text$mn:00001044 ; COMDAT (pick any)
.text$mn:00001044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001044
.text$mn:00001044 ; =============== S U B R O U T I N E =======================================
.text$mn:00001044
.text$mn:00001044 ; Attributes: bp-based frame
.text$mn:00001044
.text$mn:00001044 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const struct std::runtime_error *)
.text$mn:00001044                 public ??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00001044 ??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$mn:00001044                                         ; DATA XREF: .xdata$x:000024C4o
.text$mn:00001044
.text$mn:00001044 var_10          = dword ptr -10h
.text$mn:00001044 var_C           = dword ptr -0Ch
.text$mn:00001044 var_4           = dword ptr -4
.text$mn:00001044 arg_0           = dword ptr  8
.text$mn:00001044
.text$mn:00001044                 push    ebp
.text$mn:00001045                 mov     ebp, esp
.text$mn:00001047                 push    0FFFFFFFFh
.text$mn:00001049                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:0000104E                 mov     eax, large fs:0
.text$mn:00001054                 push    eax
.text$mn:00001055                 push    ecx
.text$mn:00001056                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000105B                 xor     eax, ebp
.text$mn:0000105D                 push    eax
.text$mn:0000105E                 lea     eax, [ebp+var_C]
.text$mn:00001061                 mov     large fs:0, eax
.text$mn:00001067                 mov     [ebp+var_10], ecx
.text$mn:0000106A                 mov     eax, [ebp+arg_0]
.text$mn:0000106D                 push    eax             ; struct std::exception *
.text$mn:0000106E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001071                 call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text$mn:00001076                 mov     [ebp+var_4], 0
.text$mn:0000107D                 mov     ecx, [ebp+var_10]
.text$mn:00001080                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:00001086                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000108D                 mov     eax, [ebp+var_10]
.text$mn:00001090                 mov     ecx, [ebp+var_C]
.text$mn:00001093                 mov     large fs:0, ecx
.text$mn:0000109A                 pop     ecx
.text$mn:0000109B                 mov     esp, ebp
.text$mn:0000109D                 pop     ebp
.text$mn:0000109E                 retn    4
.text$mn:0000109E ??0runtime_error@std@@QAE@ABV01@@Z endp
.text$mn:0000109E
.text$mn:0000109E ; ---------------------------------------------------------------------------
.text$mn:000010A1                 align 4
.text$mn:000010A1 _text$mn        ends
.text$mn:000010A1
.text$x:000010A4 ; ===========================================================================
.text$x:000010A4
.text$x:000010A4 ; Segment type: Pure code
.text$x:000010A4 ; Segment permissions: Read/Execute
.text$x:000010A4 _text$x         segment para public 'CODE' use32
.text$x:000010A4                 assume cs:_text$x
.text$x:000010A4                 ;org 10A4h
.text$x:000010A4 ; COMDAT (pick associative to section at 1044)
.text$x:000010A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000010A4
.text$x:000010A4 ; =============== S U B R O U T I N E =======================================
.text$x:000010A4
.text$x:000010A4
.text$x:000010A4 __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:000010A4                                         ; DATA XREF: .xdata$x:000021FCo
.text$x:000010A4                 mov     ecx, [ebp-10h]  ; this
.text$x:000010A7                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:000010A7 __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 endp
.text$x:000010A7
.text$x:000010AC
.text$x:000010AC ; =============== S U B R O U T I N E =======================================
.text$x:000010AC
.text$x:000010AC
.text$x:000010AC __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$x:000010AC                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+5o
.text$x:000010AC
.text$x:000010AC arg_4           = dword ptr  8
.text$x:000010AC
.text$x:000010AC                 mov     edx, [esp+arg_4]
.text$x:000010B0                 lea     eax, [edx+0Ch]
.text$x:000010B3                 mov     ecx, [edx-8]
.text$x:000010B6                 xor     ecx, eax
.text$x:000010B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000010BD                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
.text$x:000010C2                 jmp     ___CxxFrameHandler3
.text$x:000010C2 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z endp
.text$x:000010C2
.text$x:000010C2 ; ---------------------------------------------------------------------------
.text$x:000010C7                 align 4
.text$x:000010C7 _text$x         ends
.text$x:000010C7
.text$mn:000010C8 ; ===========================================================================
.text$mn:000010C8
.text$mn:000010C8 ; Segment type: Pure code
.text$mn:000010C8 ; Segment permissions: Read/Execute
.text$mn:000010C8 _text$mn        segment para public 'CODE' use32
.text$mn:000010C8                 assume cs:_text$mn
.text$mn:000010C8                 ;org 10C8h
.text$mn:000010C8 ; COMDAT (pick any)
.text$mn:000010C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000010C8
.text$mn:000010C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000010C8
.text$mn:000010C8 ; Attributes: bp-based frame
.text$mn:000010C8
.text$mn:000010C8 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const char *)
.text$mn:000010C8                 public ??0runtime_error@std@@QAE@PBD@Z
.text$mn:000010C8 ??0runtime_error@std@@QAE@PBD@Z proc near
.text$mn:000010C8                                         ; CODE XREF: IconList::create(HINSTANCE__ *,int)+4Ap
.text$mn:000010C8                                         ; IconList::addIcon(int)+2Cp
.text$mn:000010C8
.text$mn:000010C8 var_10          = dword ptr -10h
.text$mn:000010C8 var_C           = dword ptr -0Ch
.text$mn:000010C8 var_4           = dword ptr -4
.text$mn:000010C8 arg_0           = dword ptr  8
.text$mn:000010C8
.text$mn:000010C8                 push    ebp
.text$mn:000010C9                 mov     ebp, esp
.text$mn:000010CB                 push    0FFFFFFFFh
.text$mn:000010CD                 push    offset __ehhandler$??0runtime_error@std@@QAE@PBD@Z
.text$mn:000010D2                 mov     eax, large fs:0
.text$mn:000010D8                 push    eax
.text$mn:000010D9                 push    ecx
.text$mn:000010DA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000010DF                 xor     eax, ebp
.text$mn:000010E1                 push    eax
.text$mn:000010E2                 lea     eax, [ebp+var_C]
.text$mn:000010E5                 mov     large fs:0, eax
.text$mn:000010EB                 mov     [ebp+var_10], ecx
.text$mn:000010EE                 lea     eax, [ebp+arg_0]
.text$mn:000010F1                 push    eax             ; char **
.text$mn:000010F2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000010F5                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:000010FA                 mov     [ebp+var_4], 0
.text$mn:00001101                 mov     ecx, [ebp+var_10]
.text$mn:00001104                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:0000110A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001111                 mov     eax, [ebp+var_10]
.text$mn:00001114                 mov     ecx, [ebp+var_C]
.text$mn:00001117                 mov     large fs:0, ecx
.text$mn:0000111E                 pop     ecx
.text$mn:0000111F                 mov     esp, ebp
.text$mn:00001121                 pop     ebp
.text$mn:00001122                 retn    4
.text$mn:00001122 ??0runtime_error@std@@QAE@PBD@Z endp
.text$mn:00001122
.text$mn:00001122 ; ---------------------------------------------------------------------------
.text$mn:00001125                 align 4
.text$mn:00001125 _text$mn        ends
.text$mn:00001125
.text$x:00001128 ; ===========================================================================
.text$x:00001128
.text$x:00001128 ; Segment type: Pure code
.text$x:00001128 ; Segment permissions: Read/Execute
.text$x:00001128 _text$x         segment para public 'CODE' use32
.text$x:00001128                 assume cs:_text$x
.text$x:00001128                 ;org 1128h
.text$x:00001128 ; COMDAT (pick associative to section at 10C8)
.text$x:00001128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001128
.text$x:00001128 ; =============== S U B R O U T I N E =======================================
.text$x:00001128
.text$x:00001128
.text$x:00001128 __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 proc near
.text$x:00001128                                         ; DATA XREF: .xdata$x:000021A4o
.text$x:00001128                 mov     ecx, [ebp-10h]  ; this
.text$x:0000112B                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000112B __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 endp
.text$x:0000112B
.text$x:00001130
.text$x:00001130 ; =============== S U B R O U T I N E =======================================
.text$x:00001130
.text$x:00001130
.text$x:00001130 __ehhandler$??0runtime_error@std@@QAE@PBD@Z proc near
.text$x:00001130                                         ; DATA XREF: std::runtime_error::runtime_error(char const *)+5o
.text$x:00001130
.text$x:00001130 arg_4           = dword ptr  8
.text$x:00001130
.text$x:00001130                 mov     edx, [esp+arg_4]
.text$x:00001134                 lea     eax, [edx+0Ch]
.text$x:00001137                 mov     ecx, [edx-8]
.text$x:0000113A                 xor     ecx, eax
.text$x:0000113C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001141                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
.text$x:00001146                 jmp     ___CxxFrameHandler3
.text$x:00001146 __ehhandler$??0runtime_error@std@@QAE@PBD@Z endp
.text$x:00001146
.text$x:00001146 ; ---------------------------------------------------------------------------
.text$x:0000114B                 align 4
.text$x:0000114B _text$x         ends
.text$x:0000114B
.text$mn:0000114C ; ===========================================================================
.text$mn:0000114C
.text$mn:0000114C ; Segment type: Pure code
.text$mn:0000114C ; Segment permissions: Read/Execute
.text$mn:0000114C _text$mn        segment para public 'CODE' use32
.text$mn:0000114C                 assume cs:_text$mn
.text$mn:0000114C                 ;org 114Ch
.text$mn:0000114C ; COMDAT (pick any)
.text$mn:0000114C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000114C
.text$mn:0000114C ; =============== S U B R O U T I N E =======================================
.text$mn:0000114C
.text$mn:0000114C ; Attributes: bp-based frame
.text$mn:0000114C
.text$mn:0000114C ; _DWORD __thiscall std::runtime_error::~runtime_error(std::runtime_error *__hidden this)
.text$mn:0000114C                 public ??1runtime_error@std@@UAE@XZ
.text$mn:0000114C ??1runtime_error@std@@UAE@XZ proc near  ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+Ap
.text$mn:0000114C                                         ; DATA XREF: .xdata$x:00002474o
.text$mn:0000114C
.text$mn:0000114C var_10          = dword ptr -10h
.text$mn:0000114C var_C           = dword ptr -0Ch
.text$mn:0000114C var_4           = dword ptr -4
.text$mn:0000114C
.text$mn:0000114C                 push    ebp
.text$mn:0000114D                 mov     ebp, esp
.text$mn:0000114F                 push    0FFFFFFFFh
.text$mn:00001151                 push    offset __ehhandler$??1runtime_error@std@@UAE@XZ
.text$mn:00001156                 mov     eax, large fs:0
.text$mn:0000115C                 push    eax
.text$mn:0000115D                 push    ecx
.text$mn:0000115E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001163                 xor     eax, ebp
.text$mn:00001165                 push    eax
.text$mn:00001166                 lea     eax, [ebp+var_C]
.text$mn:00001169                 mov     large fs:0, eax
.text$mn:0000116F                 mov     [ebp+var_10], ecx
.text$mn:00001172                 mov     [ebp+var_4], 0
.text$mn:00001179                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001180                 mov     ecx, [ebp+var_10] ; this
.text$mn:00001183                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:00001188                 mov     ecx, [ebp+var_C]
.text$mn:0000118B                 mov     large fs:0, ecx
.text$mn:00001192                 pop     ecx
.text$mn:00001193                 mov     esp, ebp
.text$mn:00001195                 pop     ebp
.text$mn:00001196                 retn
.text$mn:00001196 ??1runtime_error@std@@UAE@XZ endp
.text$mn:00001196
.text$mn:00001196 ; ---------------------------------------------------------------------------
.text$mn:00001197                 align 4
.text$mn:00001197 _text$mn        ends
.text$mn:00001197
.text$x:00001198 ; ===========================================================================
.text$x:00001198
.text$x:00001198 ; Segment type: Pure code
.text$x:00001198 ; Segment permissions: Read/Execute
.text$x:00001198 _text$x         segment para public 'CODE' use32
.text$x:00001198                 assume cs:_text$x
.text$x:00001198                 ;org 1198h
.text$x:00001198 ; COMDAT (pick associative to section at 114C)
.text$x:00001198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001198
.text$x:00001198 ; =============== S U B R O U T I N E =======================================
.text$x:00001198
.text$x:00001198
.text$x:00001198 __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 proc near
.text$x:00001198                                         ; DATA XREF: .xdata$x:000021D0o
.text$x:00001198                 mov     ecx, [ebp-10h]  ; this
.text$x:0000119B                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:0000119B __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 endp
.text$x:0000119B
.text$x:000011A0
.text$x:000011A0 ; =============== S U B R O U T I N E =======================================
.text$x:000011A0
.text$x:000011A0
.text$x:000011A0 __ehhandler$??1runtime_error@std@@UAE@XZ proc near
.text$x:000011A0                                         ; DATA XREF: std::runtime_error::~runtime_error(void)+5o
.text$x:000011A0
.text$x:000011A0 arg_4           = dword ptr  8
.text$x:000011A0
.text$x:000011A0                 mov     edx, [esp+arg_4]
.text$x:000011A4                 lea     eax, [edx+0Ch]
.text$x:000011A7                 mov     ecx, [edx-8]
.text$x:000011AA                 xor     ecx, eax
.text$x:000011AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000011B1                 mov     eax, offset __ehfuncinfo$??1runtime_error@std@@UAE@XZ
.text$x:000011B6                 jmp     ___CxxFrameHandler3
.text$x:000011B6 __ehhandler$??1runtime_error@std@@UAE@XZ endp
.text$x:000011B6
.text$x:000011B6 ; ---------------------------------------------------------------------------
.text$x:000011BB                 align 4
.text$x:000011BB _text$x         ends
.text$x:000011BB
.text$mn:000011BC ; ===========================================================================
.text$mn:000011BC
.text$mn:000011BC ; Segment type: Pure code
.text$mn:000011BC ; Segment permissions: Read/Execute
.text$mn:000011BC _text$mn        segment para public 'CODE' use32
.text$mn:000011BC                 assume cs:_text$mn
.text$mn:000011BC                 ;org 11BCh
.text$mn:000011BC ; COMDAT (pick any)
.text$mn:000011BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000011BC
.text$mn:000011BC ; =============== S U B R O U T I N E =======================================
.text$mn:000011BC
.text$mn:000011BC ; Attributes: bp-based frame
.text$mn:000011BC
.text$mn:000011BC ; void *__cdecl operator new(unsigned int, void *)
.text$mn:000011BC                 public ??2@YAPAXIPAX@Z
.text$mn:000011BC ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)+2Ep
.text$mn:000011BC                                         ; std::allocator<ToolBarButtonUnit>::construct<ToolBarButtonUnit,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit &&)+2Ep ...
.text$mn:000011BC
.text$mn:000011BC arg_4           = dword ptr  0Ch
.text$mn:000011BC
.text$mn:000011BC                 push    ebp
.text$mn:000011BD                 mov     ebp, esp
.text$mn:000011BF                 mov     eax, [ebp+arg_4]
.text$mn:000011C2                 pop     ebp
.text$mn:000011C3                 retn
.text$mn:000011C3 ??2@YAPAXIPAX@Z endp
.text$mn:000011C3
.text$mn:000011C3 _text$mn        ends
.text$mn:000011C3
.text$mn:000011C4 ; ===========================================================================
.text$mn:000011C4
.text$mn:000011C4 ; Segment type: Pure code
.text$mn:000011C4 ; Segment permissions: Read/Execute
.text$mn:000011C4 _text$mn        segment para public 'CODE' use32
.text$mn:000011C4                 assume cs:_text$mn
.text$mn:000011C4                 ;org 11C4h
.text$mn:000011C4 ; COMDAT (pick any)
.text$mn:000011C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000011C4
.text$mn:000011C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000011C4
.text$mn:000011C4 ; Attributes: bp-based frame
.text$mn:000011C4
.text$mn:000011C4 ; void __cdecl operator delete(void *)
.text$mn:000011C4                 public ??3@YAXPAX0@Z
.text$mn:000011C4 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z$0+8p
.text$mn:000011C4                                         ; __unwindfunclet$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z$0+8p ...
.text$mn:000011C4                 push    ebp
.text$mn:000011C5                 mov     ebp, esp
.text$mn:000011C7                 pop     ebp
.text$mn:000011C8                 retn
.text$mn:000011C8 ??3@YAXPAX0@Z   endp
.text$mn:000011C8
.text$mn:000011C8 ; ---------------------------------------------------------------------------
.text$mn:000011C9                 align 4
.text$mn:000011C9 _text$mn        ends
.text$mn:000011C9
.text$mn:000011CC ; ===========================================================================
.text$mn:000011CC
.text$mn:000011CC ; Segment type: Pure code
.text$mn:000011CC ; Segment permissions: Read/Execute
.text$mn:000011CC _text$mn        segment para public 'CODE' use32
.text$mn:000011CC                 assume cs:_text$mn
.text$mn:000011CC                 ;org 11CCh
.text$mn:000011CC ; COMDAT (pick any)
.text$mn:000011CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000011CC
.text$mn:000011CC ; =============== S U B R O U T I N E =======================================
.text$mn:000011CC
.text$mn:000011CC ; Attributes: bp-based frame
.text$mn:000011CC
.text$mn:000011CC ; public: struct ToolBarButtonUnit & __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::operator[](unsigned int)
.text$mn:000011CC                 public ??A?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEAAUToolBarButtonUnit@@I@Z
.text$mn:000011CC ??A?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEAAUToolBarButtonUnit@@I@Z proc near
.text$mn:000011CC                                         ; CODE XREF: ToolBarIcons::reInit(int)+84p
.text$mn:000011CC                                         ; ToolBarIcons::reInit(int)+99p ...
.text$mn:000011CC
.text$mn:000011CC var_4           = dword ptr -4
.text$mn:000011CC arg_0           = dword ptr  8
.text$mn:000011CC
.text$mn:000011CC                 push    ebp
.text$mn:000011CD                 mov     ebp, esp
.text$mn:000011CF                 push    ecx
.text$mn:000011D0                 mov     [ebp+var_4], ecx
.text$mn:000011D3                 mov     ecx, [ebp+var_4]
.text$mn:000011D6                 call    ?size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::size(void)
.text$mn:000011DB                 cmp     eax, [ebp+arg_0]
.text$mn:000011DE                 ja      short loc_1248
.text$mn:000011E0                 push    4B1h            ; unsigned int
.text$mn:000011E5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000011EA                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:000011EF                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000011F4                 add     esp, 0Ch
.text$mn:000011F7                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:000011FC                 test    eax, eax
.text$mn:000011FE                 jz      short loc_1204
.text$mn:00001200                 xor     ecx, ecx
.text$mn:00001202                 jnz     short loc_122A
.text$mn:00001204
.text$mn:00001204 loc_1204:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+32j
.text$mn:00001204                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00001209                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000120E                 push    0
.text$mn:00001210                 push    4B2h
.text$mn:00001215                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000121A                 push    2
.text$mn:0000121C                 call    __CrtDbgReportW
.text$mn:00001221                 add     esp, 18h
.text$mn:00001224                 cmp     eax, 1
.text$mn:00001227                 jnz     short loc_122A
.text$mn:00001229                 int     3               ; Trap to Debugger
.text$mn:0000122A
.text$mn:0000122A loc_122A:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+36j
.text$mn:0000122A                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+5Bj
.text$mn:0000122A                 push    0
.text$mn:0000122C                 push    4B2h
.text$mn:00001231                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00001236                 push    offset ??_C@_1MG@CCKBFFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAT?$AAo?$AAo?$AAl?$AAB?$AAa?$AAr?$AAB?$AAu?$AAt?$AAt?$AAo?$AAn@ ; "std::vector<struct ToolBarButtonUnit,cl"...
.text$mn:0000123B                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00001240                 call    __invalid_parameter
.text$mn:00001245                 add     esp, 14h
.text$mn:00001248
.text$mn:00001248 loc_1248:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+12j
.text$mn:00001248                 imul    eax, [ebp+arg_0], 14h
.text$mn:0000124C                 mov     ecx, [ebp+var_4]
.text$mn:0000124F                 add     eax, [ecx+4]
.text$mn:00001252                 mov     esp, ebp
.text$mn:00001254                 pop     ebp
.text$mn:00001255                 retn    4
.text$mn:00001255 ??A?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEAAUToolBarButtonUnit@@I@Z endp
.text$mn:00001255
.text$mn:00001255 _text$mn        ends
.text$mn:00001255
.text$mn:00001258 ; ===========================================================================
.text$mn:00001258
.text$mn:00001258 ; Segment type: Pure code
.text$mn:00001258 ; Segment permissions: Read/Execute
.text$mn:00001258 _text$mn        segment para public 'CODE' use32
.text$mn:00001258                 assume cs:_text$mn
.text$mn:00001258                 ;org 1258h
.text$mn:00001258 ; COMDAT (pick any)
.text$mn:00001258                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001258
.text$mn:00001258 ; =============== S U B R O U T I N E =======================================
.text$mn:00001258
.text$mn:00001258 ; Attributes: bp-based frame
.text$mn:00001258
.text$mn:00001258 ; public: class IconList & __thiscall std::vector<class IconList, class std::allocator<class IconList>>::operator[](unsigned int)
.text$mn:00001258                 public ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z
.text$mn:00001258 ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z proc near
.text$mn:00001258                                         ; CODE XREF: ToolBarIcons::create(HINSTANCE__ *,int)+49p
.text$mn:00001258                                         ; ToolBarIcons::create(HINSTANCE__ *,int)+62p ...
.text$mn:00001258
.text$mn:00001258 var_4           = dword ptr -4
.text$mn:00001258 arg_0           = dword ptr  8
.text$mn:00001258
.text$mn:00001258                 push    ebp
.text$mn:00001259                 mov     ebp, esp
.text$mn:0000125B                 push    ecx
.text$mn:0000125C                 mov     [ebp+var_4], ecx
.text$mn:0000125F                 mov     ecx, [ebp+var_4]
.text$mn:00001262                 call    ?size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::size(void)
.text$mn:00001267                 cmp     eax, [ebp+arg_0]
.text$mn:0000126A                 ja      short loc_12D4
.text$mn:0000126C                 push    4B1h            ; unsigned int
.text$mn:00001271                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00001276                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:0000127B                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00001280                 add     esp, 0Ch
.text$mn:00001283                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00001288                 test    eax, eax
.text$mn:0000128A                 jz      short loc_1290
.text$mn:0000128C                 xor     ecx, ecx
.text$mn:0000128E                 jnz     short loc_12B6
.text$mn:00001290
.text$mn:00001290 loc_1290:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::operator[](uint)+32j
.text$mn:00001290                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00001295                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000129A                 push    0
.text$mn:0000129C                 push    4B2h
.text$mn:000012A1                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000012A6                 push    2
.text$mn:000012A8                 call    __CrtDbgReportW
.text$mn:000012AD                 add     esp, 18h
.text$mn:000012B0                 cmp     eax, 1
.text$mn:000012B3                 jnz     short loc_12B6
.text$mn:000012B5                 int     3               ; Trap to Debugger
.text$mn:000012B6
.text$mn:000012B6 loc_12B6:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::operator[](uint)+36j
.text$mn:000012B6                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+5Bj
.text$mn:000012B6                 push    0
.text$mn:000012B8                 push    4B2h
.text$mn:000012BD                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000012C2                 push    offset ??_C@_1JO@BHIHLBBA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAI?$AAc?$AAo?$AAn?$AAL?$AAi?$AAs?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs@ ; "std::vector<class IconList,class std::a"...
.text$mn:000012C7                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:000012CC                 call    __invalid_parameter
.text$mn:000012D1                 add     esp, 14h
.text$mn:000012D4
.text$mn:000012D4 loc_12D4:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::operator[](uint)+12j
.text$mn:000012D4                 imul    eax, [ebp+arg_0], 14h
.text$mn:000012D8                 mov     ecx, [ebp+var_4]
.text$mn:000012DB                 add     eax, [ecx+4]
.text$mn:000012DE                 mov     esp, ebp
.text$mn:000012E0                 pop     ebp
.text$mn:000012E1                 retn    4
.text$mn:000012E1 ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEAAVIconList@@I@Z endp
.text$mn:000012E1
.text$mn:000012E1 _text$mn        ends
.text$mn:000012E1
.text$mn:000012E4 ; ===========================================================================
.text$mn:000012E4
.text$mn:000012E4 ; Segment type: Pure code
.text$mn:000012E4 ; Segment permissions: Read/Execute
.text$mn:000012E4 _text$mn        segment para public 'CODE' use32
.text$mn:000012E4                 assume cs:_text$mn
.text$mn:000012E4                 ;org 12E4h
.text$mn:000012E4 ; COMDAT (pick any)
.text$mn:000012E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000012E4
.text$mn:000012E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000012E4
.text$mn:000012E4 ; Attributes: bp-based frame
.text$mn:000012E4
.text$mn:000012E4 ; public: class IconList const & __thiscall std::vector<class IconList, class std::allocator<class IconList>>::operator[](unsigned int)const
.text$mn:000012E4                 public ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEABVIconList@@I@Z
.text$mn:000012E4 ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEABVIconList@@I@Z proc near
.text$mn:000012E4                                         ; CODE XREF: IconLists::getImageListHandle(int)+Ep
.text$mn:000012E4
.text$mn:000012E4 var_4           = dword ptr -4
.text$mn:000012E4 arg_0           = dword ptr  8
.text$mn:000012E4
.text$mn:000012E4                 push    ebp
.text$mn:000012E5                 mov     ebp, esp
.text$mn:000012E7                 push    ecx
.text$mn:000012E8                 mov     [ebp+var_4], ecx
.text$mn:000012EB                 mov     ecx, [ebp+var_4]
.text$mn:000012EE                 call    ?size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::size(void)
.text$mn:000012F3                 cmp     eax, [ebp+arg_0]
.text$mn:000012F6                 ja      short loc_1360
.text$mn:000012F8                 push    4A1h            ; unsigned int
.text$mn:000012FD                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00001302                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00001307                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000130C                 add     esp, 0Ch
.text$mn:0000130F                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00001314                 test    eax, eax
.text$mn:00001316                 jz      short loc_131C
.text$mn:00001318                 xor     ecx, ecx
.text$mn:0000131A                 jnz     short loc_1342
.text$mn:0000131C
.text$mn:0000131C loc_131C:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::operator[](uint)+32j
.text$mn:0000131C                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00001321                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00001326                 push    0
.text$mn:00001328                 push    4A2h
.text$mn:0000132D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00001332                 push    2
.text$mn:00001334                 call    __CrtDbgReportW
.text$mn:00001339                 add     esp, 18h
.text$mn:0000133C                 cmp     eax, 1
.text$mn:0000133F                 jnz     short loc_1342
.text$mn:00001341                 int     3               ; Trap to Debugger
.text$mn:00001342
.text$mn:00001342 loc_1342:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::operator[](uint)+36j
.text$mn:00001342                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+5Bj
.text$mn:00001342                 push    0
.text$mn:00001344                 push    4A2h
.text$mn:00001349                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000134E                 push    offset ??_C@_1JO@BHIHLBBA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAI?$AAc?$AAo?$AAn?$AAL?$AAi?$AAs?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs@ ; "std::vector<class IconList,class std::a"...
.text$mn:00001353                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00001358                 call    __invalid_parameter
.text$mn:0000135D                 add     esp, 14h
.text$mn:00001360
.text$mn:00001360 loc_1360:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::operator[](uint)+12j
.text$mn:00001360                 imul    eax, [ebp+arg_0], 14h
.text$mn:00001364                 mov     ecx, [ebp+var_4]
.text$mn:00001367                 add     eax, [ecx+4]
.text$mn:0000136A                 mov     esp, ebp
.text$mn:0000136C                 pop     ebp
.text$mn:0000136D                 retn    4
.text$mn:0000136D ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEABVIconList@@I@Z endp
.text$mn:0000136D
.text$mn:0000136D _text$mn        ends
.text$mn:0000136D
.text$mn:00001370 ; ===========================================================================
.text$mn:00001370
.text$mn:00001370 ; Segment type: Pure code
.text$mn:00001370 ; Segment permissions: Read/Execute
.text$mn:00001370 _text$mn        segment para public 'CODE' use32
.text$mn:00001370                 assume cs:_text$mn
.text$mn:00001370                 ;org 1370h
.text$mn:00001370 ; COMDAT (pick any)
.text$mn:00001370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001370
.text$mn:00001370 ; =============== S U B R O U T I N E =======================================
.text$mn:00001370
.text$mn:00001370 ; Attributes: bp-based frame
.text$mn:00001370
.text$mn:00001370 ; public: virtual void * __thiscall std::runtime_error::`scalar deleting destructor'(unsigned int)
.text$mn:00001370                 public ??_Gruntime_error@std@@UAEPAXI@Z
.text$mn:00001370 ??_Gruntime_error@std@@UAEPAXI@Z proc near
.text$mn:00001370
.text$mn:00001370 var_4           = dword ptr -4
.text$mn:00001370 arg_0           = dword ptr  8
.text$mn:00001370
.text$mn:00001370                 push    ebp
.text$mn:00001371                 mov     ebp, esp
.text$mn:00001373                 push    ecx
.text$mn:00001374                 mov     [ebp+var_4], ecx
.text$mn:00001377                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000137A                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:0000137F                 mov     eax, [ebp+arg_0]
.text$mn:00001382                 and     eax, 1
.text$mn:00001385                 jz      short loc_1393
.text$mn:00001387                 mov     ecx, [ebp+var_4]
.text$mn:0000138A                 push    ecx             ; void *
.text$mn:0000138B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00001390                 add     esp, 4
.text$mn:00001393
.text$mn:00001393 loc_1393:                               ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+15j
.text$mn:00001393                 mov     eax, [ebp+var_4]
.text$mn:00001396                 mov     esp, ebp
.text$mn:00001398                 pop     ebp
.text$mn:00001399                 retn    4
.text$mn:00001399 ??_Gruntime_error@std@@UAEPAXI@Z endp
.text$mn:00001399
.text$mn:00001399 _text$mn        ends
.text$mn:00001399
.text$di:0000139C ; ===========================================================================
.text$di:0000139C
.text$di:0000139C ; Segment type: Pure code
.text$di:0000139C ; Segment permissions: Read/Execute
.text$di:0000139C _text$di        segment para public 'CODE' use32
.text$di:0000139C                 assume cs:_text$di
.text$di:0000139C                 ;org 139Ch
.text$di:0000139C ; COMDAT (pick any)
.text$di:0000139C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000139C
.text$di:0000139C ; =============== S U B R O U T I N E =======================================
.text$di:0000139C
.text$di:0000139C ; Attributes: bp-based frame
.text$di:0000139C
.text$di:0000139C ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:0000139C ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:0000139C
.text$di:0000139C var_1           = byte ptr -1
.text$di:0000139C
.text$di:0000139C                 push    ebp
.text$di:0000139D                 mov     ebp, esp
.text$di:0000139F                 push    ecx
.text$di:000013A0                 xor     eax, eax
.text$di:000013A2                 mov     [ebp+var_1], al
.text$di:000013A5                 mov     esp, ebp
.text$di:000013A7                 pop     ebp
.text$di:000013A8                 retn
.text$di:000013A8 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:000013A8
.text$di:000013A8 ; ---------------------------------------------------------------------------
.text$di:000013A9                 align 4
.text$di:000013A9 _text$di        ends
.text$di:000013A9
.text$di:000013AC ; ===========================================================================
.text$di:000013AC
.text$di:000013AC ; Segment type: Pure code
.text$di:000013AC ; Segment permissions: Read/Execute
.text$di:000013AC _text$di        segment para public 'CODE' use32
.text$di:000013AC                 assume cs:_text$di
.text$di:000013AC                 ;org 13ACh
.text$di:000013AC ; COMDAT (pick any)
.text$di:000013AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000013AC
.text$di:000013AC ; =============== S U B R O U T I N E =======================================
.text$di:000013AC
.text$di:000013AC ; Attributes: bp-based frame
.text$di:000013AC
.text$di:000013AC ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:000013AC ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:000013AC                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:000013AC
.text$di:000013AC var_1           = byte ptr -1
.text$di:000013AC
.text$di:000013AC                 push    ebp
.text$di:000013AD                 mov     ebp, esp
.text$di:000013AF                 push    ecx
.text$di:000013B0                 xor     eax, eax
.text$di:000013B2                 mov     [ebp+var_1], al
.text$di:000013B5                 mov     esp, ebp
.text$di:000013B7                 pop     ebp
.text$di:000013B8                 retn
.text$di:000013B8 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:000013B8
.text$di:000013B8 ; ---------------------------------------------------------------------------
.text$di:000013B9                 align 4
.text$di:000013B9 _text$di        ends
.text$di:000013B9
.text$mn:000013BC ; ===========================================================================
.text$mn:000013BC
.text$mn:000013BC ; Segment type: Pure code
.text$mn:000013BC ; Segment permissions: Read/Execute
.text$mn:000013BC _text$mn        segment para public 'CODE' use32
.text$mn:000013BC                 assume cs:_text$mn
.text$mn:000013BC                 ;org 13BCh
.text$mn:000013BC ; COMDAT (pick any)
.text$mn:000013BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000013BC
.text$mn:000013BC ; =============== S U B R O U T I N E =======================================
.text$mn:000013BC
.text$mn:000013BC ; Attributes: bp-based frame
.text$mn:000013BC
.text$mn:000013BC ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:000013BC                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:000013BC ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:000013BC                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+80p
.text$mn:000013BC                                         ; std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)+80p
.text$mn:000013BC
.text$mn:000013BC var_4           = dword ptr -4
.text$mn:000013BC
.text$mn:000013BC                 push    ebp
.text$mn:000013BD                 mov     ebp, esp
.text$mn:000013BF                 push    ecx
.text$mn:000013C0                 mov     [ebp+var_4], ecx
.text$mn:000013C3                 mov     eax, [ebp+var_4]
.text$mn:000013C6                 mov     dword ptr [eax], 0
.text$mn:000013CC                 mov     esp, ebp
.text$mn:000013CE                 pop     ebp
.text$mn:000013CF                 retn
.text$mn:000013CF ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:000013CF
.text$mn:000013CF _text$mn        ends
.text$mn:000013CF
.text$mn:000013D0 ; ===========================================================================
.text$mn:000013D0
.text$mn:000013D0 ; Segment type: Pure code
.text$mn:000013D0 ; Segment permissions: Read/Execute
.text$mn:000013D0 _text$mn        segment para public 'CODE' use32
.text$mn:000013D0                 assume cs:_text$mn
.text$mn:000013D0                 ;org 13D0h
.text$mn:000013D0 ; COMDAT (pick any)
.text$mn:000013D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000013D0
.text$mn:000013D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000013D0
.text$mn:000013D0 ; Attributes: bp-based frame
.text$mn:000013D0
.text$mn:000013D0 ; protected: void __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Destroy(struct ToolBarButtonUnit *, struct ToolBarButtonUnit *)
.text$mn:000013D0                 public ?_Destroy@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXPAUToolBarButtonUnit@@0@Z
.text$mn:000013D0 ?_Destroy@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXPAUToolBarButtonUnit@@0@Z proc near
.text$mn:000013D0                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+CBp
.text$mn:000013D0
.text$mn:000013D0 var_8           = dword ptr -8
.text$mn:000013D0 var_1           = byte ptr -1
.text$mn:000013D0 arg_0           = dword ptr  8
.text$mn:000013D0 arg_4           = dword ptr  0Ch
.text$mn:000013D0
.text$mn:000013D0                 push    ebp
.text$mn:000013D1                 mov     ebp, esp
.text$mn:000013D3                 sub     esp, 8
.text$mn:000013D6                 mov     [ebp+var_8], ecx
.text$mn:000013D9                 lea     eax, [ebp+var_1]
.text$mn:000013DC                 push    eax
.text$mn:000013DD                 mov     ecx, [ebp+var_8]
.text$mn:000013E0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)
.text$mn:000013E5                 lea     ecx, [ebp+var_1]
.text$mn:000013E8                 push    ecx
.text$mn:000013E9                 mov     edx, [ebp+arg_4]
.text$mn:000013EC                 push    edx
.text$mn:000013ED                 mov     eax, [ebp+arg_0]
.text$mn:000013F0                 push    eax
.text$mn:000013F1                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@YAXPAUToolBarButtonUnit@@0AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>>(ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &)
.text$mn:000013F6                 add     esp, 0Ch
.text$mn:000013F9                 mov     esp, ebp
.text$mn:000013FB                 pop     ebp
.text$mn:000013FC                 retn    8
.text$mn:000013FC ?_Destroy@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXPAUToolBarButtonUnit@@0@Z endp
.text$mn:000013FC
.text$mn:000013FC ; ---------------------------------------------------------------------------
.text$mn:000013FF                 align 10h
.text$mn:000013FF _text$mn        ends
.text$mn:000013FF
.text$mn:00001400 ; ===========================================================================
.text$mn:00001400
.text$mn:00001400 ; Segment type: Pure code
.text$mn:00001400 ; Segment permissions: Read/Execute
.text$mn:00001400 _text$mn        segment para public 'CODE' use32
.text$mn:00001400                 assume cs:_text$mn
.text$mn:00001400                 ;org 1400h
.text$mn:00001400 ; COMDAT (pick any)
.text$mn:00001400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001400
.text$mn:00001400 ; =============== S U B R O U T I N E =======================================
.text$mn:00001400
.text$mn:00001400 ; Attributes: bp-based frame
.text$mn:00001400
.text$mn:00001400 ; protected: void __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Destroy(class IconList *, class IconList *)
.text$mn:00001400                 public ?_Destroy@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXPAVIconList@@0@Z
.text$mn:00001400 ?_Destroy@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXPAVIconList@@0@Z proc near
.text$mn:00001400                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+CBp
.text$mn:00001400
.text$mn:00001400 var_8           = dword ptr -8
.text$mn:00001400 var_1           = byte ptr -1
.text$mn:00001400 arg_0           = dword ptr  8
.text$mn:00001400 arg_4           = dword ptr  0Ch
.text$mn:00001400
.text$mn:00001400                 push    ebp
.text$mn:00001401                 mov     ebp, esp
.text$mn:00001403                 sub     esp, 8
.text$mn:00001406                 mov     [ebp+var_8], ecx
.text$mn:00001409                 lea     eax, [ebp+var_1]
.text$mn:0000140C                 push    eax
.text$mn:0000140D                 mov     ecx, [ebp+var_8]
.text$mn:00001410                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)
.text$mn:00001415                 lea     ecx, [ebp+var_1]
.text$mn:00001418                 push    ecx
.text$mn:00001419                 mov     edx, [ebp+arg_4]
.text$mn:0000141C                 push    edx
.text$mn:0000141D                 mov     eax, [ebp+arg_0]
.text$mn:00001420                 push    eax
.text$mn:00001421                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@@std@@YAXPAVIconList@@0AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<IconList>>>(IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &)
.text$mn:00001426                 add     esp, 0Ch
.text$mn:00001429                 mov     esp, ebp
.text$mn:0000142B                 pop     ebp
.text$mn:0000142C                 retn    8
.text$mn:0000142C ?_Destroy@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXPAVIconList@@0@Z endp
.text$mn:0000142C
.text$mn:0000142C ; ---------------------------------------------------------------------------
.text$mn:0000142F                 align 10h
.text$mn:0000142F _text$mn        ends
.text$mn:0000142F
.text$mn:00001430 ; ===========================================================================
.text$mn:00001430
.text$mn:00001430 ; Segment type: Pure code
.text$mn:00001430 ; Segment permissions: Read/Execute
.text$mn:00001430 _text$mn        segment para public 'CODE' use32
.text$mn:00001430                 assume cs:_text$mn
.text$mn:00001430                 ;org 1430h
.text$mn:00001430 ; COMDAT (pick any)
.text$mn:00001430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001430
.text$mn:00001430 ; =============== S U B R O U T I N E =======================================
.text$mn:00001430
.text$mn:00001430 ; Attributes: bp-based frame
.text$mn:00001430
.text$mn:00001430 ; public: struct std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>>::_Getal(void)const
.text$mn:00001430                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ
.text$mn:00001430 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ proc near
.text$mn:00001430                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Umove<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *)+10p
.text$mn:00001430                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Destroy(ToolBarButtonUnit *,ToolBarButtonUnit *)+10p ...
.text$mn:00001430
.text$mn:00001430 var_4           = dword ptr -4
.text$mn:00001430 arg_0           = dword ptr  8
.text$mn:00001430
.text$mn:00001430                 push    ebp
.text$mn:00001431                 mov     ebp, esp
.text$mn:00001433                 push    ecx
.text$mn:00001434                 mov     [ebp+var_4], ecx
.text$mn:00001437                 mov     ecx, [ebp+arg_0]
.text$mn:0000143A                 call    ??0?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>(void)
.text$mn:0000143F                 mov     eax, [ebp+arg_0]
.text$mn:00001442                 mov     esp, ebp
.text$mn:00001444                 pop     ebp
.text$mn:00001445                 retn    4
.text$mn:00001445 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ endp
.text$mn:00001445
.text$mn:00001445 _text$mn        ends
.text$mn:00001445
.text$mn:00001448 ; ===========================================================================
.text$mn:00001448
.text$mn:00001448 ; Segment type: Pure code
.text$mn:00001448 ; Segment permissions: Read/Execute
.text$mn:00001448 _text$mn        segment para public 'CODE' use32
.text$mn:00001448                 assume cs:_text$mn
.text$mn:00001448                 ;org 1448h
.text$mn:00001448 ; COMDAT (pick any)
.text$mn:00001448                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001448
.text$mn:00001448 ; =============== S U B R O U T I N E =======================================
.text$mn:00001448
.text$mn:00001448 ; Attributes: bp-based frame
.text$mn:00001448
.text$mn:00001448 ; public: struct std::_Wrap_alloc<class std::allocator<class IconList>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class IconList, class std::allocator<class IconList>>>::_Getal(void)const
.text$mn:00001448                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ
.text$mn:00001448 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ proc near
.text$mn:00001448                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Umove<IconList *>(IconList *,IconList *,IconList *)+10p
.text$mn:00001448                                         ; std::vector<IconList,std::allocator<IconList>>::_Destroy(IconList *,IconList *)+10p ...
.text$mn:00001448
.text$mn:00001448 var_4           = dword ptr -4
.text$mn:00001448 arg_0           = dword ptr  8
.text$mn:00001448
.text$mn:00001448                 push    ebp
.text$mn:00001449                 mov     ebp, esp
.text$mn:0000144B                 push    ecx
.text$mn:0000144C                 mov     [ebp+var_4], ecx
.text$mn:0000144F                 mov     ecx, [ebp+arg_0]
.text$mn:00001452                 call    ??0?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<IconList>>::_Wrap_alloc<std::allocator<IconList>>(void)
.text$mn:00001457                 mov     eax, [ebp+arg_0]
.text$mn:0000145A                 mov     esp, ebp
.text$mn:0000145C                 pop     ebp
.text$mn:0000145D                 retn    4
.text$mn:0000145D ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ endp
.text$mn:0000145D
.text$mn:0000145D _text$mn        ends
.text$mn:0000145D
.text$mn:00001460 ; ===========================================================================
.text$mn:00001460
.text$mn:00001460 ; Segment type: Pure code
.text$mn:00001460 ; Segment permissions: Read/Execute
.text$mn:00001460 _text$mn        segment para public 'CODE' use32
.text$mn:00001460                 assume cs:_text$mn
.text$mn:00001460                 ;org 1460h
.text$mn:00001460 ; COMDAT (pick any)
.text$mn:00001460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001460
.text$mn:00001460 ; =============== S U B R O U T I N E =======================================
.text$mn:00001460
.text$mn:00001460 ; Attributes: bp-based frame
.text$mn:00001460
.text$mn:00001460 ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:00001460                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:00001460 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:00001460                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+3Cp
.text$mn:00001460                                         ; std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)+3Cp
.text$mn:00001460
.text$mn:00001460 var_8           = dword ptr -8
.text$mn:00001460 var_4           = dword ptr -4
.text$mn:00001460
.text$mn:00001460                 push    ebp
.text$mn:00001461                 mov     ebp, esp
.text$mn:00001463                 sub     esp, 8
.text$mn:00001466                 mov     [ebp+var_4], ecx
.text$mn:00001469                 mov     eax, [ebp+var_4]
.text$mn:0000146C                 cmp     dword ptr [eax], 0
.text$mn:0000146F                 jnz     short loc_147A
.text$mn:00001471                 mov     [ebp+var_8], 0
.text$mn:00001478                 jmp     short loc_1485
.text$mn:0000147A ; ---------------------------------------------------------------------------
.text$mn:0000147A
.text$mn:0000147A loc_147A:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:0000147A                 mov     ecx, [ebp+var_4]
.text$mn:0000147D                 mov     edx, [ecx]
.text$mn:0000147F                 add     edx, 4
.text$mn:00001482                 mov     [ebp+var_8], edx
.text$mn:00001485
.text$mn:00001485 loc_1485:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:00001485                 mov     eax, [ebp+var_8]
.text$mn:00001488                 mov     esp, ebp
.text$mn:0000148A                 pop     ebp
.text$mn:0000148B                 retn
.text$mn:0000148B ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:0000148B
.text$mn:0000148B _text$mn        ends
.text$mn:0000148B
.text$mn:0000148C ; ===========================================================================
.text$mn:0000148C
.text$mn:0000148C ; Segment type: Pure code
.text$mn:0000148C ; Segment permissions: Read/Execute
.text$mn:0000148C _text$mn        segment para public 'CODE' use32
.text$mn:0000148C                 assume cs:_text$mn
.text$mn:0000148C                 ;org 148Ch
.text$mn:0000148C ; COMDAT (pick any)
.text$mn:0000148C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000148C
.text$mn:0000148C ; =============== S U B R O U T I N E =======================================
.text$mn:0000148C
.text$mn:0000148C ; Attributes: bp-based frame
.text$mn:0000148C
.text$mn:0000148C ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:0000148C                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:0000148C ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:0000148C                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+71p
.text$mn:0000148C                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+8Ap ...
.text$mn:0000148C
.text$mn:0000148C var_4           = dword ptr -4
.text$mn:0000148C
.text$mn:0000148C                 push    ebp
.text$mn:0000148D                 mov     ebp, esp
.text$mn:0000148F                 push    ecx
.text$mn:00001490                 mov     [ebp+var_4], ecx
.text$mn:00001493                 mov     eax, [ebp+var_4]
.text$mn:00001496                 add     eax, 4
.text$mn:00001499                 mov     esp, ebp
.text$mn:0000149B                 pop     ebp
.text$mn:0000149C                 retn
.text$mn:0000149C ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:0000149C
.text$mn:0000149C ; ---------------------------------------------------------------------------
.text$mn:0000149D                 align 10h
.text$mn:0000149D _text$mn        ends
.text$mn:0000149D
.text$mn:000014A0 ; ===========================================================================
.text$mn:000014A0
.text$mn:000014A0 ; Segment type: Pure code
.text$mn:000014A0 ; Segment permissions: Read/Execute
.text$mn:000014A0 _text$mn        segment para public 'CODE' use32
.text$mn:000014A0                 assume cs:_text$mn
.text$mn:000014A0                 ;org 14A0h
.text$mn:000014A0 ; COMDAT (pick any)
.text$mn:000014A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000014A0
.text$mn:000014A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000014A0
.text$mn:000014A0 ; Attributes: bp-based frame
.text$mn:000014A0
.text$mn:000014A0 ; protected: unsigned int __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Grow_to(unsigned int)const
.text$mn:000014A0                 public ?_Grow_to@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEII@Z
.text$mn:000014A0 ?_Grow_to@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEII@Z proc near
.text$mn:000014A0                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)+45p
.text$mn:000014A0
.text$mn:000014A0 var_C           = dword ptr -0Ch
.text$mn:000014A0 var_8           = dword ptr -8
.text$mn:000014A0 var_4           = dword ptr -4
.text$mn:000014A0 arg_0           = dword ptr  8
.text$mn:000014A0
.text$mn:000014A0                 push    ebp
.text$mn:000014A1                 mov     ebp, esp
.text$mn:000014A3                 sub     esp, 0Ch
.text$mn:000014A6                 mov     [ebp+var_8], ecx
.text$mn:000014A9                 mov     ecx, [ebp+var_8]
.text$mn:000014AC                 call    ?capacity@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::capacity(void)
.text$mn:000014B1                 mov     [ebp+var_4], eax
.text$mn:000014B4                 mov     ecx, [ebp+var_8]
.text$mn:000014B7                 call    ?max_size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::max_size(void)
.text$mn:000014BC                 mov     ecx, [ebp+var_4]
.text$mn:000014BF                 shr     ecx, 1
.text$mn:000014C1                 sub     eax, ecx
.text$mn:000014C3                 cmp     eax, [ebp+var_4]
.text$mn:000014C6                 jnb     short loc_14D1
.text$mn:000014C8                 mov     [ebp+var_C], 0
.text$mn:000014CF                 jmp     short loc_14DC
.text$mn:000014D1 ; ---------------------------------------------------------------------------
.text$mn:000014D1
.text$mn:000014D1 loc_14D1:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Grow_to(uint)+26j
.text$mn:000014D1                 mov     edx, [ebp+var_4]
.text$mn:000014D4                 shr     edx, 1
.text$mn:000014D6                 add     edx, [ebp+var_4]
.text$mn:000014D9                 mov     [ebp+var_C], edx
.text$mn:000014DC
.text$mn:000014DC loc_14DC:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Grow_to(uint)+2Fj
.text$mn:000014DC                 mov     eax, [ebp+var_C]
.text$mn:000014DF                 mov     [ebp+var_4], eax
.text$mn:000014E2                 mov     ecx, [ebp+var_4]
.text$mn:000014E5                 cmp     ecx, [ebp+arg_0]
.text$mn:000014E8                 jnb     short loc_14F0
.text$mn:000014EA                 mov     edx, [ebp+arg_0]
.text$mn:000014ED                 mov     [ebp+var_4], edx
.text$mn:000014F0
.text$mn:000014F0 loc_14F0:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Grow_to(uint)+48j
.text$mn:000014F0                 mov     eax, [ebp+var_4]
.text$mn:000014F3                 mov     esp, ebp
.text$mn:000014F5                 pop     ebp
.text$mn:000014F6                 retn    4
.text$mn:000014F6 ?_Grow_to@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEII@Z endp
.text$mn:000014F6
.text$mn:000014F6 ; ---------------------------------------------------------------------------
.text$mn:000014F9                 align 4
.text$mn:000014F9 _text$mn        ends
.text$mn:000014F9
.text$mn:000014FC ; ===========================================================================
.text$mn:000014FC
.text$mn:000014FC ; Segment type: Pure code
.text$mn:000014FC ; Segment permissions: Read/Execute
.text$mn:000014FC _text$mn        segment para public 'CODE' use32
.text$mn:000014FC                 assume cs:_text$mn
.text$mn:000014FC                 ;org 14FCh
.text$mn:000014FC ; COMDAT (pick any)
.text$mn:000014FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000014FC
.text$mn:000014FC ; =============== S U B R O U T I N E =======================================
.text$mn:000014FC
.text$mn:000014FC ; Attributes: bp-based frame
.text$mn:000014FC
.text$mn:000014FC ; protected: unsigned int __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Grow_to(unsigned int)const
.text$mn:000014FC                 public ?_Grow_to@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEII@Z
.text$mn:000014FC ?_Grow_to@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEII@Z proc near
.text$mn:000014FC                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)+45p
.text$mn:000014FC
.text$mn:000014FC var_C           = dword ptr -0Ch
.text$mn:000014FC var_8           = dword ptr -8
.text$mn:000014FC var_4           = dword ptr -4
.text$mn:000014FC arg_0           = dword ptr  8
.text$mn:000014FC
.text$mn:000014FC                 push    ebp
.text$mn:000014FD                 mov     ebp, esp
.text$mn:000014FF                 sub     esp, 0Ch
.text$mn:00001502                 mov     [ebp+var_8], ecx
.text$mn:00001505                 mov     ecx, [ebp+var_8]
.text$mn:00001508                 call    ?capacity@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::capacity(void)
.text$mn:0000150D                 mov     [ebp+var_4], eax
.text$mn:00001510                 mov     ecx, [ebp+var_8]
.text$mn:00001513                 call    ?max_size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::max_size(void)
.text$mn:00001518                 mov     ecx, [ebp+var_4]
.text$mn:0000151B                 shr     ecx, 1
.text$mn:0000151D                 sub     eax, ecx
.text$mn:0000151F                 cmp     eax, [ebp+var_4]
.text$mn:00001522                 jnb     short loc_152D
.text$mn:00001524                 mov     [ebp+var_C], 0
.text$mn:0000152B                 jmp     short loc_1538
.text$mn:0000152D ; ---------------------------------------------------------------------------
.text$mn:0000152D
.text$mn:0000152D loc_152D:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Grow_to(uint)+26j
.text$mn:0000152D                 mov     edx, [ebp+var_4]
.text$mn:00001530                 shr     edx, 1
.text$mn:00001532                 add     edx, [ebp+var_4]
.text$mn:00001535                 mov     [ebp+var_C], edx
.text$mn:00001538
.text$mn:00001538 loc_1538:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Grow_to(uint)+2Fj
.text$mn:00001538                 mov     eax, [ebp+var_C]
.text$mn:0000153B                 mov     [ebp+var_4], eax
.text$mn:0000153E                 mov     ecx, [ebp+var_4]
.text$mn:00001541                 cmp     ecx, [ebp+arg_0]
.text$mn:00001544                 jnb     short loc_154C
.text$mn:00001546                 mov     edx, [ebp+arg_0]
.text$mn:00001549                 mov     [ebp+var_4], edx
.text$mn:0000154C
.text$mn:0000154C loc_154C:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Grow_to(uint)+48j
.text$mn:0000154C                 mov     eax, [ebp+var_4]
.text$mn:0000154F                 mov     esp, ebp
.text$mn:00001551                 pop     ebp
.text$mn:00001552                 retn    4
.text$mn:00001552 ?_Grow_to@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEII@Z endp
.text$mn:00001552
.text$mn:00001552 ; ---------------------------------------------------------------------------
.text$mn:00001555                 align 4
.text$mn:00001555 _text$mn        ends
.text$mn:00001555
.text$mn:00001558 ; ===========================================================================
.text$mn:00001558
.text$mn:00001558 ; Segment type: Pure code
.text$mn:00001558 ; Segment permissions: Read/Execute
.text$mn:00001558 _text$mn        segment para public 'CODE' use32
.text$mn:00001558                 assume cs:_text$mn
.text$mn:00001558                 ;org 1558h
.text$mn:00001558 ; COMDAT (pick any)
.text$mn:00001558                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001558
.text$mn:00001558 ; =============== S U B R O U T I N E =======================================
.text$mn:00001558
.text$mn:00001558 ; Attributes: bp-based frame
.text$mn:00001558
.text$mn:00001558 ; protected: bool __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Inside(struct ToolBarButtonUnit const *)const
.text$mn:00001558                 public ?_Inside@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBE_NPBUToolBarButtonUnit@@@Z
.text$mn:00001558 ?_Inside@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBE_NPBUToolBarButtonUnit@@@Z proc near
.text$mn:00001558                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+19p
.text$mn:00001558
.text$mn:00001558 var_8           = dword ptr -8
.text$mn:00001558 var_4           = dword ptr -4
.text$mn:00001558 arg_0           = dword ptr  8
.text$mn:00001558
.text$mn:00001558                 push    ebp
.text$mn:00001559                 mov     ebp, esp
.text$mn:0000155B                 sub     esp, 8
.text$mn:0000155E                 mov     [ebp+var_4], ecx
.text$mn:00001561                 mov     eax, [ebp+var_4]
.text$mn:00001564                 mov     ecx, [ebp+arg_0]
.text$mn:00001567                 cmp     ecx, [eax+8]
.text$mn:0000156A                 jnb     short loc_1580
.text$mn:0000156C                 mov     edx, [ebp+var_4]
.text$mn:0000156F                 mov     eax, [edx+4]
.text$mn:00001572                 cmp     eax, [ebp+arg_0]
.text$mn:00001575                 ja      short loc_1580
.text$mn:00001577                 mov     [ebp+var_8], 1
.text$mn:0000157E                 jmp     short loc_1587
.text$mn:00001580 ; ---------------------------------------------------------------------------
.text$mn:00001580
.text$mn:00001580 loc_1580:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Inside(ToolBarButtonUnit const *)+12j
.text$mn:00001580                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Inside(ToolBarButtonUnit const *)+1Dj
.text$mn:00001580                 mov     [ebp+var_8], 0
.text$mn:00001587
.text$mn:00001587 loc_1587:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Inside(ToolBarButtonUnit const *)+26j
.text$mn:00001587                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000158A                 mov     esp, ebp
.text$mn:0000158C                 pop     ebp
.text$mn:0000158D                 retn    4
.text$mn:0000158D ?_Inside@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBE_NPBUToolBarButtonUnit@@@Z endp
.text$mn:0000158D
.text$mn:0000158D _text$mn        ends
.text$mn:0000158D
.text$mn:00001590 ; ===========================================================================
.text$mn:00001590
.text$mn:00001590 ; Segment type: Pure code
.text$mn:00001590 ; Segment permissions: Read/Execute
.text$mn:00001590 _text$mn        segment para public 'CODE' use32
.text$mn:00001590                 assume cs:_text$mn
.text$mn:00001590                 ;org 1590h
.text$mn:00001590 ; COMDAT (pick any)
.text$mn:00001590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001590
.text$mn:00001590 ; =============== S U B R O U T I N E =======================================
.text$mn:00001590
.text$mn:00001590 ; Attributes: bp-based frame
.text$mn:00001590
.text$mn:00001590 ; protected: bool __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Inside(class IconList const *)const
.text$mn:00001590                 public ?_Inside@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBE_NPBVIconList@@@Z
.text$mn:00001590 ?_Inside@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBE_NPBVIconList@@@Z proc near
.text$mn:00001590                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+19p
.text$mn:00001590
.text$mn:00001590 var_8           = dword ptr -8
.text$mn:00001590 var_4           = dword ptr -4
.text$mn:00001590 arg_0           = dword ptr  8
.text$mn:00001590
.text$mn:00001590                 push    ebp
.text$mn:00001591                 mov     ebp, esp
.text$mn:00001593                 sub     esp, 8
.text$mn:00001596                 mov     [ebp+var_4], ecx
.text$mn:00001599                 mov     eax, [ebp+var_4]
.text$mn:0000159C                 mov     ecx, [ebp+arg_0]
.text$mn:0000159F                 cmp     ecx, [eax+8]
.text$mn:000015A2                 jnb     short loc_15B8
.text$mn:000015A4                 mov     edx, [ebp+var_4]
.text$mn:000015A7                 mov     eax, [edx+4]
.text$mn:000015AA                 cmp     eax, [ebp+arg_0]
.text$mn:000015AD                 ja      short loc_15B8
.text$mn:000015AF                 mov     [ebp+var_8], 1
.text$mn:000015B6                 jmp     short loc_15BF
.text$mn:000015B8 ; ---------------------------------------------------------------------------
.text$mn:000015B8
.text$mn:000015B8 loc_15B8:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Inside(IconList const *)+12j
.text$mn:000015B8                                         ; std::vector<IconList,std::allocator<IconList>>::_Inside(IconList const *)+1Dj
.text$mn:000015B8                 mov     [ebp+var_8], 0
.text$mn:000015BF
.text$mn:000015BF loc_15BF:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Inside(IconList const *)+26j
.text$mn:000015BF                 mov     al, byte ptr [ebp+var_8]
.text$mn:000015C2                 mov     esp, ebp
.text$mn:000015C4                 pop     ebp
.text$mn:000015C5                 retn    4
.text$mn:000015C5 ?_Inside@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBE_NPBVIconList@@@Z endp
.text$mn:000015C5
.text$mn:000015C5 _text$mn        ends
.text$mn:000015C5
.text$mn:000015C8 ; ===========================================================================
.text$mn:000015C8
.text$mn:000015C8 ; Segment type: Pure code
.text$mn:000015C8 ; Segment permissions: Read/Execute
.text$mn:000015C8 _text$mn        segment para public 'CODE' use32
.text$mn:000015C8                 assume cs:_text$mn
.text$mn:000015C8                 ;org 15C8h
.text$mn:000015C8 ; COMDAT (pick any)
.text$mn:000015C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000015C8
.text$mn:000015C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000015C8
.text$mn:000015C8 ; Attributes: bp-based frame
.text$mn:000015C8
.text$mn:000015C8 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:000015C8                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:000015C8 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:000015C8                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+102p
.text$mn:000015C8                                         ; std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+102p
.text$mn:000015C8
.text$mn:000015C8 var_18          = byte ptr -18h
.text$mn:000015C8 var_14          = dword ptr -14h
.text$mn:000015C8 var_10          = dword ptr -10h
.text$mn:000015C8 var_C           = dword ptr -0Ch
.text$mn:000015C8 var_4           = dword ptr -4
.text$mn:000015C8
.text$mn:000015C8                 push    ebp
.text$mn:000015C9                 mov     ebp, esp
.text$mn:000015CB                 push    0FFFFFFFFh
.text$mn:000015CD                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:000015D2                 mov     eax, large fs:0
.text$mn:000015D8                 push    eax
.text$mn:000015D9                 sub     esp, 0Ch
.text$mn:000015DC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000015E1                 xor     eax, ebp
.text$mn:000015E3                 push    eax
.text$mn:000015E4                 lea     eax, [ebp+var_C]
.text$mn:000015E7                 mov     large fs:0, eax
.text$mn:000015ED                 mov     [ebp+var_14], ecx
.text$mn:000015F0                 mov     eax, [ebp+var_14]
.text$mn:000015F3                 cmp     dword ptr [eax], 0
.text$mn:000015F6                 jz      short loc_1653
.text$mn:000015F8                 push    3               ; int
.text$mn:000015FA                 lea     ecx, [ebp+var_18] ; this
.text$mn:000015FD                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00001602                 mov     [ebp+var_4], 0
.text$mn:00001609                 mov     ecx, [ebp+var_14]
.text$mn:0000160C                 mov     edx, [ecx]
.text$mn:0000160E                 add     edx, 4
.text$mn:00001611                 mov     [ebp+var_10], edx
.text$mn:00001614                 jmp     short loc_1623
.text$mn:00001616 ; ---------------------------------------------------------------------------
.text$mn:00001616
.text$mn:00001616 loc_1616:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00001616                 mov     eax, [ebp+var_10]
.text$mn:00001619                 mov     ecx, [eax]
.text$mn:0000161B                 mov     edx, [ebp+var_10]
.text$mn:0000161E                 mov     eax, [ecx+4]
.text$mn:00001621                 mov     [edx], eax
.text$mn:00001623
.text$mn:00001623 loc_1623:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:00001623                 mov     ecx, [ebp+var_10]
.text$mn:00001626                 cmp     dword ptr [ecx], 0
.text$mn:00001629                 jz      short loc_1638
.text$mn:0000162B                 mov     edx, [ebp+var_10]
.text$mn:0000162E                 mov     eax, [edx]
.text$mn:00001630                 mov     dword ptr [eax], 0
.text$mn:00001636                 jmp     short loc_1616
.text$mn:00001638 ; ---------------------------------------------------------------------------
.text$mn:00001638
.text$mn:00001638 loc_1638:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00001638                 mov     ecx, [ebp+var_14]
.text$mn:0000163B                 mov     edx, [ecx]
.text$mn:0000163D                 mov     dword ptr [edx+4], 0
.text$mn:00001644                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000164B                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000164E                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00001653
.text$mn:00001653 loc_1653:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:00001653                 mov     ecx, [ebp+var_C]
.text$mn:00001656                 mov     large fs:0, ecx
.text$mn:0000165D                 pop     ecx
.text$mn:0000165E                 mov     esp, ebp
.text$mn:00001660                 pop     ebp
.text$mn:00001661                 retn
.text$mn:00001661 ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:00001661
.text$mn:00001661 ; ---------------------------------------------------------------------------
.text$mn:00001662                 align 4
.text$mn:00001662 _text$mn        ends
.text$mn:00001662
.text$x:00001664 ; ===========================================================================
.text$x:00001664
.text$x:00001664 ; Segment type: Pure code
.text$x:00001664 ; Segment permissions: Read/Execute
.text$x:00001664 _text$x         segment para public 'CODE' use32
.text$x:00001664                 assume cs:_text$x
.text$x:00001664                 ;org 1664h
.text$x:00001664 ; COMDAT (pick associative to section at 15C8)
.text$x:00001664                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001664
.text$x:00001664 ; =============== S U B R O U T I N E =======================================
.text$x:00001664
.text$x:00001664
.text$x:00001664 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00001664                                         ; DATA XREF: .xdata$x:00002178o
.text$x:00001664                 lea     ecx, [ebp-18h]  ; this
.text$x:00001667                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00001667 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00001667
.text$x:0000166C
.text$x:0000166C ; =============== S U B R O U T I N E =======================================
.text$x:0000166C
.text$x:0000166C
.text$x:0000166C __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:0000166C                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:0000166C
.text$x:0000166C arg_4           = dword ptr  8
.text$x:0000166C
.text$x:0000166C                 mov     edx, [esp+arg_4]
.text$x:00001670                 lea     eax, [edx+0Ch]
.text$x:00001673                 mov     ecx, [edx-10h]
.text$x:00001676                 xor     ecx, eax
.text$x:00001678                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000167D                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:00001682                 jmp     ___CxxFrameHandler3
.text$x:00001682 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:00001682
.text$x:00001682 ; ---------------------------------------------------------------------------
.text$x:00001687                 align 4
.text$x:00001687 _text$x         ends
.text$x:00001687
.text$mn:00001688 ; ===========================================================================
.text$mn:00001688
.text$mn:00001688 ; Segment type: Pure code
.text$mn:00001688 ; Segment permissions: Read/Execute
.text$mn:00001688 _text$mn        segment para public 'CODE' use32
.text$mn:00001688                 assume cs:_text$mn
.text$mn:00001688                 ;org 1688h
.text$mn:00001688 ; COMDAT (pick any)
.text$mn:00001688                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001688
.text$mn:00001688 ; =============== S U B R O U T I N E =======================================
.text$mn:00001688
.text$mn:00001688 ; Attributes: bp-based frame
.text$mn:00001688
.text$mn:00001688 ; protected: void __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Orphan_range(struct ToolBarButtonUnit *, struct ToolBarButtonUnit *)const
.text$mn:00001688                 public ?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z
.text$mn:00001688 ?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z proc near
.text$mn:00001688                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+6Fp
.text$mn:00001688                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+D3p
.text$mn:00001688
.text$mn:00001688 var_18          = byte ptr -18h
.text$mn:00001688 var_14          = dword ptr -14h
.text$mn:00001688 var_10          = dword ptr -10h
.text$mn:00001688 var_C           = dword ptr -0Ch
.text$mn:00001688 var_4           = dword ptr -4
.text$mn:00001688 arg_0           = dword ptr  8
.text$mn:00001688 arg_4           = dword ptr  0Ch
.text$mn:00001688
.text$mn:00001688                 push    ebp
.text$mn:00001689                 mov     ebp, esp
.text$mn:0000168B                 push    0FFFFFFFFh
.text$mn:0000168D                 push    offset __ehhandler$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z
.text$mn:00001692                 mov     eax, large fs:0
.text$mn:00001698                 push    eax
.text$mn:00001699                 sub     esp, 0Ch
.text$mn:0000169C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000016A1                 xor     eax, ebp
.text$mn:000016A3                 push    eax
.text$mn:000016A4                 lea     eax, [ebp+var_C]
.text$mn:000016A7                 mov     large fs:0, eax
.text$mn:000016AD                 mov     [ebp+var_14], ecx
.text$mn:000016B0                 push    3               ; int
.text$mn:000016B2                 lea     ecx, [ebp+var_18] ; this
.text$mn:000016B5                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000016BA                 mov     [ebp+var_4], 0
.text$mn:000016C1                 mov     ecx, [ebp+var_14] ; this
.text$mn:000016C4                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:000016C9                 mov     [ebp+var_10], eax
.text$mn:000016CC                 cmp     [ebp+var_10], 0
.text$mn:000016D0                 jz      short loc_1720
.text$mn:000016D2
.text$mn:000016D2 loc_16D2:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *):loc_171Ej
.text$mn:000016D2                 mov     eax, [ebp+var_10]
.text$mn:000016D5                 cmp     dword ptr [eax], 0
.text$mn:000016D8                 jz      short loc_1720
.text$mn:000016DA                 mov     ecx, [ebp+var_10]
.text$mn:000016DD                 mov     edx, [ecx]
.text$mn:000016DF                 mov     eax, [edx+8]
.text$mn:000016E2                 cmp     eax, [ebp+arg_0]
.text$mn:000016E5                 jb      short loc_16F4
.text$mn:000016E7                 mov     ecx, [ebp+var_10]
.text$mn:000016EA                 mov     edx, [ecx]
.text$mn:000016EC                 mov     eax, [ebp+arg_4]
.text$mn:000016EF                 cmp     eax, [edx+8]
.text$mn:000016F2                 jnb     short loc_1703
.text$mn:000016F4
.text$mn:000016F4 loc_16F4:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+5Dj
.text$mn:000016F4                 mov     ecx, [ebp+var_10]
.text$mn:000016F7                 mov     ecx, [ecx]      ; this
.text$mn:000016F9                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:000016FE                 mov     [ebp+var_10], eax
.text$mn:00001701                 jmp     short loc_171E
.text$mn:00001703 ; ---------------------------------------------------------------------------
.text$mn:00001703
.text$mn:00001703 loc_1703:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+6Aj
.text$mn:00001703                 mov     edx, [ebp+var_10]
.text$mn:00001706                 mov     ecx, [edx]      ; this
.text$mn:00001708                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000170D                 mov     eax, [ebp+var_10]
.text$mn:00001710                 mov     ecx, [eax]      ; this
.text$mn:00001712                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00001717                 mov     ecx, [ebp+var_10]
.text$mn:0000171A                 mov     edx, [eax]
.text$mn:0000171C                 mov     [ecx], edx
.text$mn:0000171E
.text$mn:0000171E loc_171E:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+79j
.text$mn:0000171E                 jmp     short loc_16D2
.text$mn:00001720 ; ---------------------------------------------------------------------------
.text$mn:00001720
.text$mn:00001720 loc_1720:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+48j
.text$mn:00001720                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+50j
.text$mn:00001720                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001727                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000172A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000172F                 mov     ecx, [ebp+var_C]
.text$mn:00001732                 mov     large fs:0, ecx
.text$mn:00001739                 pop     ecx
.text$mn:0000173A                 mov     esp, ebp
.text$mn:0000173C                 pop     ebp
.text$mn:0000173D                 retn    8
.text$mn:0000173D ?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z endp
.text$mn:0000173D
.text$mn:0000173D _text$mn        ends
.text$mn:0000173D
.text$x:00001740 ; ===========================================================================
.text$x:00001740
.text$x:00001740 ; Segment type: Pure code
.text$x:00001740 ; Segment permissions: Read/Execute
.text$x:00001740 _text$x         segment para public 'CODE' use32
.text$x:00001740                 assume cs:_text$x
.text$x:00001740                 ;org 1740h
.text$x:00001740 ; COMDAT (pick associative to section at 1688)
.text$x:00001740                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001740
.text$x:00001740 ; =============== S U B R O U T I N E =======================================
.text$x:00001740
.text$x:00001740
.text$x:00001740 __unwindfunclet$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z$0 proc near
.text$x:00001740                                         ; DATA XREF: .xdata$x:00002304o
.text$x:00001740                 lea     ecx, [ebp-18h]  ; this
.text$x:00001743                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00001743 __unwindfunclet$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z$0 endp
.text$x:00001743
.text$x:00001748
.text$x:00001748 ; =============== S U B R O U T I N E =======================================
.text$x:00001748
.text$x:00001748
.text$x:00001748 __ehhandler$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z proc near
.text$x:00001748                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+5o
.text$x:00001748
.text$x:00001748 arg_4           = dword ptr  8
.text$x:00001748
.text$x:00001748                 mov     edx, [esp+arg_4]
.text$x:0000174C                 lea     eax, [edx+0Ch]
.text$x:0000174F                 mov     ecx, [edx-10h]
.text$x:00001752                 xor     ecx, eax
.text$x:00001754                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001759                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z
.text$x:0000175E                 jmp     ___CxxFrameHandler3
.text$x:0000175E __ehhandler$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z endp
.text$x:0000175E
.text$x:0000175E ; ---------------------------------------------------------------------------
.text$x:00001763                 align 4
.text$x:00001763 _text$x         ends
.text$x:00001763
.text$mn:00001764 ; ===========================================================================
.text$mn:00001764
.text$mn:00001764 ; Segment type: Pure code
.text$mn:00001764 ; Segment permissions: Read/Execute
.text$mn:00001764 _text$mn        segment para public 'CODE' use32
.text$mn:00001764                 assume cs:_text$mn
.text$mn:00001764                 ;org 1764h
.text$mn:00001764 ; COMDAT (pick any)
.text$mn:00001764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001764
.text$mn:00001764 ; =============== S U B R O U T I N E =======================================
.text$mn:00001764
.text$mn:00001764 ; Attributes: bp-based frame
.text$mn:00001764
.text$mn:00001764 ; protected: void __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Orphan_range(class IconList *, class IconList *)const
.text$mn:00001764                 public ?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z
.text$mn:00001764 ?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z proc near
.text$mn:00001764                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+6Fp
.text$mn:00001764                                         ; std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+DCp
.text$mn:00001764
.text$mn:00001764 var_18          = byte ptr -18h
.text$mn:00001764 var_14          = dword ptr -14h
.text$mn:00001764 var_10          = dword ptr -10h
.text$mn:00001764 var_C           = dword ptr -0Ch
.text$mn:00001764 var_4           = dword ptr -4
.text$mn:00001764 arg_0           = dword ptr  8
.text$mn:00001764 arg_4           = dword ptr  0Ch
.text$mn:00001764
.text$mn:00001764                 push    ebp
.text$mn:00001765                 mov     ebp, esp
.text$mn:00001767                 push    0FFFFFFFFh
.text$mn:00001769                 push    offset __ehhandler$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z
.text$mn:0000176E                 mov     eax, large fs:0
.text$mn:00001774                 push    eax
.text$mn:00001775                 sub     esp, 0Ch
.text$mn:00001778                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000177D                 xor     eax, ebp
.text$mn:0000177F                 push    eax
.text$mn:00001780                 lea     eax, [ebp+var_C]
.text$mn:00001783                 mov     large fs:0, eax
.text$mn:00001789                 mov     [ebp+var_14], ecx
.text$mn:0000178C                 push    3               ; int
.text$mn:0000178E                 lea     ecx, [ebp+var_18] ; this
.text$mn:00001791                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00001796                 mov     [ebp+var_4], 0
.text$mn:0000179D                 mov     ecx, [ebp+var_14] ; this
.text$mn:000017A0                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:000017A5                 mov     [ebp+var_10], eax
.text$mn:000017A8                 cmp     [ebp+var_10], 0
.text$mn:000017AC                 jz      short loc_17FC
.text$mn:000017AE
.text$mn:000017AE loc_17AE:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *):loc_17FAj
.text$mn:000017AE                 mov     eax, [ebp+var_10]
.text$mn:000017B1                 cmp     dword ptr [eax], 0
.text$mn:000017B4                 jz      short loc_17FC
.text$mn:000017B6                 mov     ecx, [ebp+var_10]
.text$mn:000017B9                 mov     edx, [ecx]
.text$mn:000017BB                 mov     eax, [edx+8]
.text$mn:000017BE                 cmp     eax, [ebp+arg_0]
.text$mn:000017C1                 jb      short loc_17D0
.text$mn:000017C3                 mov     ecx, [ebp+var_10]
.text$mn:000017C6                 mov     edx, [ecx]
.text$mn:000017C8                 mov     eax, [ebp+arg_4]
.text$mn:000017CB                 cmp     eax, [edx+8]
.text$mn:000017CE                 jnb     short loc_17DF
.text$mn:000017D0
.text$mn:000017D0 loc_17D0:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)+5Dj
.text$mn:000017D0                 mov     ecx, [ebp+var_10]
.text$mn:000017D3                 mov     ecx, [ecx]      ; this
.text$mn:000017D5                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:000017DA                 mov     [ebp+var_10], eax
.text$mn:000017DD                 jmp     short loc_17FA
.text$mn:000017DF ; ---------------------------------------------------------------------------
.text$mn:000017DF
.text$mn:000017DF loc_17DF:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)+6Aj
.text$mn:000017DF                 mov     edx, [ebp+var_10]
.text$mn:000017E2                 mov     ecx, [edx]      ; this
.text$mn:000017E4                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:000017E9                 mov     eax, [ebp+var_10]
.text$mn:000017EC                 mov     ecx, [eax]      ; this
.text$mn:000017EE                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:000017F3                 mov     ecx, [ebp+var_10]
.text$mn:000017F6                 mov     edx, [eax]
.text$mn:000017F8                 mov     [ecx], edx
.text$mn:000017FA
.text$mn:000017FA loc_17FA:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)+79j
.text$mn:000017FA                 jmp     short loc_17AE
.text$mn:000017FC ; ---------------------------------------------------------------------------
.text$mn:000017FC
.text$mn:000017FC loc_17FC:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)+48j
.text$mn:000017FC                                         ; std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)+50j
.text$mn:000017FC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001803                 lea     ecx, [ebp+var_18] ; this
.text$mn:00001806                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000180B                 mov     ecx, [ebp+var_C]
.text$mn:0000180E                 mov     large fs:0, ecx
.text$mn:00001815                 pop     ecx
.text$mn:00001816                 mov     esp, ebp
.text$mn:00001818                 pop     ebp
.text$mn:00001819                 retn    8
.text$mn:00001819 ?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z endp
.text$mn:00001819
.text$mn:00001819 _text$mn        ends
.text$mn:00001819
.text$x:0000181C ; ===========================================================================
.text$x:0000181C
.text$x:0000181C ; Segment type: Pure code
.text$x:0000181C ; Segment permissions: Read/Execute
.text$x:0000181C _text$x         segment para public 'CODE' use32
.text$x:0000181C                 assume cs:_text$x
.text$x:0000181C                 ;org 181Ch
.text$x:0000181C ; COMDAT (pick associative to section at 1764)
.text$x:0000181C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000181C
.text$x:0000181C ; =============== S U B R O U T I N E =======================================
.text$x:0000181C
.text$x:0000181C
.text$x:0000181C __unwindfunclet$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z$0 proc near
.text$x:0000181C                                         ; DATA XREF: .xdata$x:00002280o
.text$x:0000181C                 lea     ecx, [ebp-18h]  ; this
.text$x:0000181F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000181F __unwindfunclet$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z$0 endp
.text$x:0000181F
.text$x:00001824
.text$x:00001824 ; =============== S U B R O U T I N E =======================================
.text$x:00001824
.text$x:00001824
.text$x:00001824 __ehhandler$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z proc near
.text$x:00001824                                         ; DATA XREF: std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)+5o
.text$x:00001824
.text$x:00001824 arg_4           = dword ptr  8
.text$x:00001824
.text$x:00001824                 mov     edx, [esp+arg_4]
.text$x:00001828                 lea     eax, [edx+0Ch]
.text$x:0000182B                 mov     ecx, [edx-10h]
.text$x:0000182E                 xor     ecx, eax
.text$x:00001830                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001835                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z
.text$x:0000183A                 jmp     ___CxxFrameHandler3
.text$x:0000183A __ehhandler$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z endp
.text$x:0000183A
.text$x:0000183A ; ---------------------------------------------------------------------------
.text$x:0000183F                 align 10h
.text$x:0000183F _text$x         ends
.text$x:0000183F
.text$mn:00001840 ; ===========================================================================
.text$mn:00001840
.text$mn:00001840 ; Segment type: Pure code
.text$mn:00001840 ; Segment permissions: Read/Execute
.text$mn:00001840 _text$mn        segment para public 'CODE' use32
.text$mn:00001840                 assume cs:_text$mn
.text$mn:00001840                 ;org 1840h
.text$mn:00001840 ; COMDAT (pick any)
.text$mn:00001840                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001840
.text$mn:00001840 ; =============== S U B R O U T I N E =======================================
.text$mn:00001840
.text$mn:00001840 ; Attributes: bp-based frame
.text$mn:00001840
.text$mn:00001840 ; protected: void __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Reallocate(unsigned int)
.text$mn:00001840                 public ?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.text$mn:00001840 ?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z proc near
.text$mn:00001840                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)+4Ep
.text$mn:00001840
.text$mn:00001840 var_20          = dword ptr -20h
.text$mn:00001840 var_1C          = dword ptr -1Ch
.text$mn:00001840 var_18          = dword ptr -18h
.text$mn:00001840 var_13          = byte ptr -13h
.text$mn:00001840 var_11          = byte ptr -11h
.text$mn:00001840 var_10          = dword ptr -10h
.text$mn:00001840 var_C           = dword ptr -0Ch
.text$mn:00001840 var_4           = dword ptr -4
.text$mn:00001840 arg_0           = dword ptr  8
.text$mn:00001840
.text$mn:00001840 ; FUNCTION CHUNK AT .text$mn:000018D6 SIZE 00000009 BYTES
.text$mn:00001840 ; FUNCTION CHUNK AT .text$mn:000018E6 SIZE 00000098 BYTES
.text$mn:00001840
.text$mn:00001840                 push    ebp
.text$mn:00001841                 mov     ebp, esp
.text$mn:00001843                 push    0FFFFFFFFh
.text$mn:00001845                 push    offset __ehhandler$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.text$mn:0000184A                 mov     eax, large fs:0
.text$mn:00001850                 push    eax
.text$mn:00001851                 push    ecx
.text$mn:00001852                 sub     esp, 10h
.text$mn:00001855                 push    ebx
.text$mn:00001856                 push    esi
.text$mn:00001857                 push    edi
.text$mn:00001858                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000185D                 xor     eax, ebp
.text$mn:0000185F                 push    eax
.text$mn:00001860                 lea     eax, [ebp+var_C]
.text$mn:00001863                 mov     large fs:0, eax
.text$mn:00001869                 mov     [ebp+var_10], esp
.text$mn:0000186C                 mov     [ebp+var_18], ecx
.text$mn:0000186F                 mov     eax, [ebp+arg_0]
.text$mn:00001872                 push    eax
.text$mn:00001873                 lea     ecx, [ebp+var_11]
.text$mn:00001876                 push    ecx
.text$mn:00001877                 mov     ecx, [ebp+var_18]
.text$mn:0000187A                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)
.text$mn:0000187F                 mov     ecx, eax
.text$mn:00001881                 call    ?allocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEPAUToolBarButtonUnit@@I@Z ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::allocate(uint)
.text$mn:00001886                 mov     [ebp+var_1C], eax
.text$mn:00001889                 mov     [ebp+var_4], 0
.text$mn:00001890                 mov     edx, [ebp+var_1C]
.text$mn:00001893                 push    edx
.text$mn:00001894                 mov     eax, [ebp+var_18]
.text$mn:00001897                 mov     ecx, [eax+8]
.text$mn:0000189A                 push    ecx
.text$mn:0000189B                 mov     edx, [ebp+var_18]
.text$mn:0000189E                 mov     eax, [edx+4]
.text$mn:000018A1                 push    eax
.text$mn:000018A2                 mov     ecx, [ebp+var_18]
.text$mn:000018A5                 call    ??$_Umove@PAUToolBarButtonUnit@@@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEPAUToolBarButtonUnit@@PAU2@00@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Umove<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *)
.text$mn:000018AA                 jmp     short loc_18D6
.text$mn:000018AA ?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z endp
.text$mn:000018AA
.text$mn:000018AC
.text$mn:000018AC ; =============== S U B R O U T I N E =======================================
.text$mn:000018AC
.text$mn:000018AC ; Attributes: noreturn
.text$mn:000018AC
.text$mn:000018AC __catch$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z$0 proc near
.text$mn:000018AC                                         ; DATA XREF: .xdata$x:000022B4o
.text$mn:000018AC                 mov     ecx, [ebp+8]
.text$mn:000018AF                 push    ecx             ; int
.text$mn:000018B0                 mov     edx, [ebp-1Ch]
.text$mn:000018B3                 push    edx             ; void *
.text$mn:000018B4                 lea     eax, [ebp-12h]
.text$mn:000018B7                 push    eax
.text$mn:000018B8                 mov     ecx, [ebp-18h]
.text$mn:000018BB                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)
.text$mn:000018C0                 mov     ecx, eax
.text$mn:000018C2                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@I@Z ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::deallocate(ToolBarButtonUnit *,uint)
.text$mn:000018C7                 push    0
.text$mn:000018C9                 push    0
.text$mn:000018CB                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:000018CB __catch$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z$0 endp
.text$mn:000018CB
.text$mn:000018D0 ; ---------------------------------------------------------------------------
.text$mn:000018D0                 mov     eax, offset $LN8_0
.text$mn:000018D5                 retn
.text$mn:000018D6 ; ---------------------------------------------------------------------------
.text$mn:000018D6 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.text$mn:000018D6
.text$mn:000018D6 loc_18D6:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+6Aj
.text$mn:000018D6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000018DD                 jmp     short loc_18E6
.text$mn:000018DD ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.text$mn:000018DF
.text$mn:000018DF ; =============== S U B R O U T I N E =======================================
.text$mn:000018DF
.text$mn:000018DF
.text$mn:000018DF $LN8_0          proc near               ; DATA XREF: .text$mn:000018D0o
.text$mn:000018DF                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:000018DF $LN8_0          endp ; sp-analysis failed
.text$mn:000018DF
.text$mn:000018E6 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.text$mn:000018E6
.text$mn:000018E6 loc_18E6:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+9Dj
.text$mn:000018E6                 mov     ecx, [ebp+var_18]
.text$mn:000018E9                 call    ?size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::size(void)
.text$mn:000018EE                 mov     [ebp+var_20], eax
.text$mn:000018F1                 mov     ecx, [ebp+var_18]
.text$mn:000018F4                 cmp     dword ptr [ecx+4], 0
.text$mn:000018F8                 jz      short loc_193F
.text$mn:000018FA                 mov     edx, [ebp+var_18]
.text$mn:000018FD                 mov     eax, [edx+8]
.text$mn:00001900                 push    eax
.text$mn:00001901                 mov     ecx, [ebp+var_18]
.text$mn:00001904                 mov     edx, [ecx+4]
.text$mn:00001907                 push    edx
.text$mn:00001908                 mov     ecx, [ebp+var_18]
.text$mn:0000190B                 call    ?_Destroy@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXPAUToolBarButtonUnit@@0@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Destroy(ToolBarButtonUnit *,ToolBarButtonUnit *)
.text$mn:00001910                 mov     eax, [ebp+var_18]
.text$mn:00001913                 mov     ecx, [ebp+var_18]
.text$mn:00001916                 mov     eax, [eax+0Ch]
.text$mn:00001919                 sub     eax, [ecx+4]
.text$mn:0000191C                 cdq
.text$mn:0000191D                 mov     ecx, 14h
.text$mn:00001922                 idiv    ecx
.text$mn:00001924                 push    eax             ; int
.text$mn:00001925                 mov     edx, [ebp+var_18]
.text$mn:00001928                 mov     eax, [edx+4]
.text$mn:0000192B                 push    eax             ; void *
.text$mn:0000192C                 lea     ecx, [ebp+var_13]
.text$mn:0000192F                 push    ecx
.text$mn:00001930                 mov     ecx, [ebp+var_18]
.text$mn:00001933                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)
.text$mn:00001938                 mov     ecx, eax
.text$mn:0000193A                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@I@Z ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::deallocate(ToolBarButtonUnit *,uint)
.text$mn:0000193F
.text$mn:0000193F loc_193F:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+B8j
.text$mn:0000193F                 mov     ecx, [ebp+var_18] ; this
.text$mn:00001942                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00001947                 imul    edx, [ebp+arg_0], 14h
.text$mn:0000194B                 add     edx, [ebp+var_1C]
.text$mn:0000194E                 mov     eax, [ebp+var_18]
.text$mn:00001951                 mov     [eax+0Ch], edx
.text$mn:00001954                 imul    ecx, [ebp+var_20], 14h
.text$mn:00001958                 add     ecx, [ebp+var_1C]
.text$mn:0000195B                 mov     edx, [ebp+var_18]
.text$mn:0000195E                 mov     [edx+8], ecx
.text$mn:00001961                 mov     eax, [ebp+var_18]
.text$mn:00001964                 mov     ecx, [ebp+var_1C]
.text$mn:00001967                 mov     [eax+4], ecx
.text$mn:0000196A                 mov     ecx, [ebp+var_C]
.text$mn:0000196D                 mov     large fs:0, ecx
.text$mn:00001974                 pop     ecx
.text$mn:00001975                 pop     edi
.text$mn:00001976                 pop     esi
.text$mn:00001977                 pop     ebx
.text$mn:00001978                 mov     esp, ebp
.text$mn:0000197A                 pop     ebp
.text$mn:0000197B                 retn    4
.text$mn:0000197B ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.text$mn:0000197B ; ---------------------------------------------------------------------------
.text$mn:0000197E                 align 10h
.text$mn:0000197E _text$mn        ends
.text$mn:0000197E
.text$x:00001980 ; ===========================================================================
.text$x:00001980
.text$x:00001980 ; Segment type: Pure code
.text$x:00001980 ; Segment permissions: Read/Execute
.text$x:00001980 _text$x         segment para public 'CODE' use32
.text$x:00001980                 assume cs:_text$x
.text$x:00001980                 ;org 1980h
.text$x:00001980 ; COMDAT (pick associative to section at 1840)
.text$x:00001980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001980
.text$x:00001980 ; =============== S U B R O U T I N E =======================================
.text$x:00001980
.text$x:00001980
.text$x:00001980 __ehhandler$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z proc near
.text$x:00001980                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+5o
.text$x:00001980
.text$x:00001980 arg_4           = dword ptr  8
.text$x:00001980
.text$x:00001980                 mov     edx, [esp+arg_4]
.text$x:00001984                 lea     eax, [edx+0Ch]
.text$x:00001987                 mov     ecx, [edx-24h]
.text$x:0000198A                 xor     ecx, eax
.text$x:0000198C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001991                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.text$x:00001996                 jmp     ___CxxFrameHandler3
.text$x:00001996 __ehhandler$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z endp
.text$x:00001996
.text$x:00001996 ; ---------------------------------------------------------------------------
.text$x:0000199B                 align 4
.text$x:0000199B _text$x         ends
.text$x:0000199B
.text$mn:0000199C ; ===========================================================================
.text$mn:0000199C
.text$mn:0000199C ; Segment type: Pure code
.text$mn:0000199C ; Segment permissions: Read/Execute
.text$mn:0000199C _text$mn        segment para public 'CODE' use32
.text$mn:0000199C                 assume cs:_text$mn
.text$mn:0000199C                 ;org 199Ch
.text$mn:0000199C ; COMDAT (pick any)
.text$mn:0000199C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000199C
.text$mn:0000199C ; =============== S U B R O U T I N E =======================================
.text$mn:0000199C
.text$mn:0000199C ; Attributes: bp-based frame
.text$mn:0000199C
.text$mn:0000199C ; protected: void __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Reallocate(unsigned int)
.text$mn:0000199C                 public ?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.text$mn:0000199C ?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z proc near
.text$mn:0000199C                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)+4Ep
.text$mn:0000199C
.text$mn:0000199C var_20          = dword ptr -20h
.text$mn:0000199C var_1C          = dword ptr -1Ch
.text$mn:0000199C var_18          = dword ptr -18h
.text$mn:0000199C var_13          = byte ptr -13h
.text$mn:0000199C var_11          = byte ptr -11h
.text$mn:0000199C var_10          = dword ptr -10h
.text$mn:0000199C var_C           = dword ptr -0Ch
.text$mn:0000199C var_4           = dword ptr -4
.text$mn:0000199C arg_0           = dword ptr  8
.text$mn:0000199C
.text$mn:0000199C ; FUNCTION CHUNK AT .text$mn:00001A32 SIZE 00000009 BYTES
.text$mn:0000199C ; FUNCTION CHUNK AT .text$mn:00001A42 SIZE 00000098 BYTES
.text$mn:0000199C
.text$mn:0000199C                 push    ebp
.text$mn:0000199D                 mov     ebp, esp
.text$mn:0000199F                 push    0FFFFFFFFh
.text$mn:000019A1                 push    offset __ehhandler$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.text$mn:000019A6                 mov     eax, large fs:0
.text$mn:000019AC                 push    eax
.text$mn:000019AD                 push    ecx
.text$mn:000019AE                 sub     esp, 10h
.text$mn:000019B1                 push    ebx
.text$mn:000019B2                 push    esi
.text$mn:000019B3                 push    edi
.text$mn:000019B4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000019B9                 xor     eax, ebp
.text$mn:000019BB                 push    eax
.text$mn:000019BC                 lea     eax, [ebp+var_C]
.text$mn:000019BF                 mov     large fs:0, eax
.text$mn:000019C5                 mov     [ebp+var_10], esp
.text$mn:000019C8                 mov     [ebp+var_18], ecx
.text$mn:000019CB                 mov     eax, [ebp+arg_0]
.text$mn:000019CE                 push    eax
.text$mn:000019CF                 lea     ecx, [ebp+var_11]
.text$mn:000019D2                 push    ecx
.text$mn:000019D3                 mov     ecx, [ebp+var_18]
.text$mn:000019D6                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)
.text$mn:000019DB                 mov     ecx, eax
.text$mn:000019DD                 call    ?allocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEPAVIconList@@I@Z ; std::_Wrap_alloc<std::allocator<IconList>>::allocate(uint)
.text$mn:000019E2                 mov     [ebp+var_1C], eax
.text$mn:000019E5                 mov     [ebp+var_4], 0
.text$mn:000019EC                 mov     edx, [ebp+var_1C]
.text$mn:000019EF                 push    edx
.text$mn:000019F0                 mov     eax, [ebp+var_18]
.text$mn:000019F3                 mov     ecx, [eax+8]
.text$mn:000019F6                 push    ecx
.text$mn:000019F7                 mov     edx, [ebp+var_18]
.text$mn:000019FA                 mov     eax, [edx+4]
.text$mn:000019FD                 push    eax
.text$mn:000019FE                 mov     ecx, [ebp+var_18]
.text$mn:00001A01                 call    ??$_Umove@PAVIconList@@@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEPAVIconList@@PAV2@00@Z ; std::vector<IconList,std::allocator<IconList>>::_Umove<IconList *>(IconList *,IconList *,IconList *)
.text$mn:00001A06                 jmp     short loc_1A32
.text$mn:00001A06 ?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z endp
.text$mn:00001A06
.text$mn:00001A08
.text$mn:00001A08 ; =============== S U B R O U T I N E =======================================
.text$mn:00001A08
.text$mn:00001A08 ; Attributes: noreturn
.text$mn:00001A08
.text$mn:00001A08 __catch$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z$0 proc near
.text$mn:00001A08                                         ; DATA XREF: .xdata$x:00002230o
.text$mn:00001A08                 mov     ecx, [ebp+8]
.text$mn:00001A0B                 push    ecx             ; int
.text$mn:00001A0C                 mov     edx, [ebp-1Ch]
.text$mn:00001A0F                 push    edx             ; void *
.text$mn:00001A10                 lea     eax, [ebp-12h]
.text$mn:00001A13                 push    eax
.text$mn:00001A14                 mov     ecx, [ebp-18h]
.text$mn:00001A17                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)
.text$mn:00001A1C                 mov     ecx, eax
.text$mn:00001A1E                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@I@Z ; std::_Wrap_alloc<std::allocator<IconList>>::deallocate(IconList *,uint)
.text$mn:00001A23                 push    0
.text$mn:00001A25                 push    0
.text$mn:00001A27                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00001A27 __catch$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z$0 endp
.text$mn:00001A27
.text$mn:00001A2C ; ---------------------------------------------------------------------------
.text$mn:00001A2C                 mov     eax, offset $LN8
.text$mn:00001A31                 retn
.text$mn:00001A32 ; ---------------------------------------------------------------------------
.text$mn:00001A32 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.text$mn:00001A32
.text$mn:00001A32 loc_1A32:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+6Aj
.text$mn:00001A32                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001A39                 jmp     short loc_1A42
.text$mn:00001A39 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.text$mn:00001A3B
.text$mn:00001A3B ; =============== S U B R O U T I N E =======================================
.text$mn:00001A3B
.text$mn:00001A3B
.text$mn:00001A3B $LN8            proc near               ; DATA XREF: .text$mn:00001A2Co
.text$mn:00001A3B                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00001A3B $LN8            endp ; sp-analysis failed
.text$mn:00001A3B
.text$mn:00001A42 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.text$mn:00001A42
.text$mn:00001A42 loc_1A42:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+9Dj
.text$mn:00001A42                 mov     ecx, [ebp+var_18]
.text$mn:00001A45                 call    ?size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::size(void)
.text$mn:00001A4A                 mov     [ebp+var_20], eax
.text$mn:00001A4D                 mov     ecx, [ebp+var_18]
.text$mn:00001A50                 cmp     dword ptr [ecx+4], 0
.text$mn:00001A54                 jz      short loc_1A9B
.text$mn:00001A56                 mov     edx, [ebp+var_18]
.text$mn:00001A59                 mov     eax, [edx+8]
.text$mn:00001A5C                 push    eax
.text$mn:00001A5D                 mov     ecx, [ebp+var_18]
.text$mn:00001A60                 mov     edx, [ecx+4]
.text$mn:00001A63                 push    edx
.text$mn:00001A64                 mov     ecx, [ebp+var_18]
.text$mn:00001A67                 call    ?_Destroy@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXPAVIconList@@0@Z ; std::vector<IconList,std::allocator<IconList>>::_Destroy(IconList *,IconList *)
.text$mn:00001A6C                 mov     eax, [ebp+var_18]
.text$mn:00001A6F                 mov     ecx, [ebp+var_18]
.text$mn:00001A72                 mov     eax, [eax+0Ch]
.text$mn:00001A75                 sub     eax, [ecx+4]
.text$mn:00001A78                 cdq
.text$mn:00001A79                 mov     ecx, 14h
.text$mn:00001A7E                 idiv    ecx
.text$mn:00001A80                 push    eax             ; int
.text$mn:00001A81                 mov     edx, [ebp+var_18]
.text$mn:00001A84                 mov     eax, [edx+4]
.text$mn:00001A87                 push    eax             ; void *
.text$mn:00001A88                 lea     ecx, [ebp+var_13]
.text$mn:00001A8B                 push    ecx
.text$mn:00001A8C                 mov     ecx, [ebp+var_18]
.text$mn:00001A8F                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)
.text$mn:00001A94                 mov     ecx, eax
.text$mn:00001A96                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@I@Z ; std::_Wrap_alloc<std::allocator<IconList>>::deallocate(IconList *,uint)
.text$mn:00001A9B
.text$mn:00001A9B loc_1A9B:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+B8j
.text$mn:00001A9B                 mov     ecx, [ebp+var_18] ; this
.text$mn:00001A9E                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00001AA3                 imul    edx, [ebp+arg_0], 14h
.text$mn:00001AA7                 add     edx, [ebp+var_1C]
.text$mn:00001AAA                 mov     eax, [ebp+var_18]
.text$mn:00001AAD                 mov     [eax+0Ch], edx
.text$mn:00001AB0                 imul    ecx, [ebp+var_20], 14h
.text$mn:00001AB4                 add     ecx, [ebp+var_1C]
.text$mn:00001AB7                 mov     edx, [ebp+var_18]
.text$mn:00001ABA                 mov     [edx+8], ecx
.text$mn:00001ABD                 mov     eax, [ebp+var_18]
.text$mn:00001AC0                 mov     ecx, [ebp+var_1C]
.text$mn:00001AC3                 mov     [eax+4], ecx
.text$mn:00001AC6                 mov     ecx, [ebp+var_C]
.text$mn:00001AC9                 mov     large fs:0, ecx
.text$mn:00001AD0                 pop     ecx
.text$mn:00001AD1                 pop     edi
.text$mn:00001AD2                 pop     esi
.text$mn:00001AD3                 pop     ebx
.text$mn:00001AD4                 mov     esp, ebp
.text$mn:00001AD6                 pop     ebp
.text$mn:00001AD7                 retn    4
.text$mn:00001AD7 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.text$mn:00001AD7 ; ---------------------------------------------------------------------------
.text$mn:00001ADA                 align 4
.text$mn:00001ADA _text$mn        ends
.text$mn:00001ADA
.text$x:00001ADC ; ===========================================================================
.text$x:00001ADC
.text$x:00001ADC ; Segment type: Pure code
.text$x:00001ADC ; Segment permissions: Read/Execute
.text$x:00001ADC _text$x         segment para public 'CODE' use32
.text$x:00001ADC                 assume cs:_text$x
.text$x:00001ADC                 ;org 1ADCh
.text$x:00001ADC ; COMDAT (pick associative to section at 199C)
.text$x:00001ADC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001ADC
.text$x:00001ADC ; =============== S U B R O U T I N E =======================================
.text$x:00001ADC
.text$x:00001ADC
.text$x:00001ADC __ehhandler$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z proc near
.text$x:00001ADC                                         ; DATA XREF: std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+5o
.text$x:00001ADC
.text$x:00001ADC arg_4           = dword ptr  8
.text$x:00001ADC
.text$x:00001ADC                 mov     edx, [esp+arg_4]
.text$x:00001AE0                 lea     eax, [edx+0Ch]
.text$x:00001AE3                 mov     ecx, [edx-24h]
.text$x:00001AE6                 xor     ecx, eax
.text$x:00001AE8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001AED                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.text$x:00001AF2                 jmp     ___CxxFrameHandler3
.text$x:00001AF2 __ehhandler$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z endp
.text$x:00001AF2
.text$x:00001AF2 ; ---------------------------------------------------------------------------
.text$x:00001AF7                 align 4
.text$x:00001AF7 _text$x         ends
.text$x:00001AF7
.text$mn:00001AF8 ; ===========================================================================
.text$mn:00001AF8
.text$mn:00001AF8 ; Segment type: Pure code
.text$mn:00001AF8 ; Segment permissions: Read/Execute
.text$mn:00001AF8 _text$mn        segment para public 'CODE' use32
.text$mn:00001AF8                 assume cs:_text$mn
.text$mn:00001AF8                 ;org 1AF8h
.text$mn:00001AF8 ; COMDAT (pick any)
.text$mn:00001AF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001AF8
.text$mn:00001AF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001AF8
.text$mn:00001AF8 ; Attributes: bp-based frame
.text$mn:00001AF8
.text$mn:00001AF8 ; protected: void __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Reserve(unsigned int)
.text$mn:00001AF8                 public ?_Reserve@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.text$mn:00001AF8 ?_Reserve@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z proc near
.text$mn:00001AF8                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+59p
.text$mn:00001AF8                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+BDp
.text$mn:00001AF8
.text$mn:00001AF8 var_4           = dword ptr -4
.text$mn:00001AF8 arg_0           = dword ptr  8
.text$mn:00001AF8
.text$mn:00001AF8                 push    ebp
.text$mn:00001AF9                 mov     ebp, esp
.text$mn:00001AFB                 push    ecx
.text$mn:00001AFC                 push    esi
.text$mn:00001AFD                 mov     [ebp+var_4], ecx
.text$mn:00001B00                 mov     ecx, [ebp+var_4]
.text$mn:00001B03                 call    ?_Unused_capacity@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Unused_capacity(void)
.text$mn:00001B08                 cmp     eax, [ebp+arg_0]
.text$mn:00001B0B                 jnb     short loc_1B4B
.text$mn:00001B0D                 mov     ecx, [ebp+var_4]
.text$mn:00001B10                 call    ?max_size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::max_size(void)
.text$mn:00001B15                 mov     esi, eax
.text$mn:00001B17                 mov     ecx, [ebp+var_4]
.text$mn:00001B1A                 call    ?size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::size(void)
.text$mn:00001B1F                 sub     esi, eax
.text$mn:00001B21                 cmp     esi, [ebp+arg_0]
.text$mn:00001B24                 jnb     short loc_1B2E
.text$mn:00001B26                 mov     ecx, [ebp+var_4]
.text$mn:00001B29                 call    ?_Xlen@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Xlen(void)
.text$mn:00001B2E
.text$mn:00001B2E loc_1B2E:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)+2Cj
.text$mn:00001B2E                 mov     ecx, [ebp+var_4]
.text$mn:00001B31                 call    ?size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::size(void)
.text$mn:00001B36                 add     eax, [ebp+arg_0]
.text$mn:00001B39                 push    eax
.text$mn:00001B3A                 mov     ecx, [ebp+var_4]
.text$mn:00001B3D                 call    ?_Grow_to@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEII@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Grow_to(uint)
.text$mn:00001B42                 push    eax
.text$mn:00001B43                 mov     ecx, [ebp+var_4]
.text$mn:00001B46                 call    ?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)
.text$mn:00001B4B
.text$mn:00001B4B loc_1B4B:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)+13j
.text$mn:00001B4B                 pop     esi
.text$mn:00001B4C                 mov     esp, ebp
.text$mn:00001B4E                 pop     ebp
.text$mn:00001B4F                 retn    4
.text$mn:00001B4F ?_Reserve@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z endp
.text$mn:00001B4F
.text$mn:00001B4F ; ---------------------------------------------------------------------------
.text$mn:00001B52                 align 4
.text$mn:00001B52 _text$mn        ends
.text$mn:00001B52
.text$mn:00001B54 ; ===========================================================================
.text$mn:00001B54
.text$mn:00001B54 ; Segment type: Pure code
.text$mn:00001B54 ; Segment permissions: Read/Execute
.text$mn:00001B54 _text$mn        segment para public 'CODE' use32
.text$mn:00001B54                 assume cs:_text$mn
.text$mn:00001B54                 ;org 1B54h
.text$mn:00001B54 ; COMDAT (pick any)
.text$mn:00001B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001B54
.text$mn:00001B54 ; =============== S U B R O U T I N E =======================================
.text$mn:00001B54
.text$mn:00001B54 ; Attributes: bp-based frame
.text$mn:00001B54
.text$mn:00001B54 ; protected: void __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Reserve(unsigned int)
.text$mn:00001B54                 public ?_Reserve@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.text$mn:00001B54 ?_Reserve@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z proc near
.text$mn:00001B54                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+59p
.text$mn:00001B54                                         ; std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+C6p
.text$mn:00001B54
.text$mn:00001B54 var_4           = dword ptr -4
.text$mn:00001B54 arg_0           = dword ptr  8
.text$mn:00001B54
.text$mn:00001B54                 push    ebp
.text$mn:00001B55                 mov     ebp, esp
.text$mn:00001B57                 push    ecx
.text$mn:00001B58                 push    esi
.text$mn:00001B59                 mov     [ebp+var_4], ecx
.text$mn:00001B5C                 mov     ecx, [ebp+var_4]
.text$mn:00001B5F                 call    ?_Unused_capacity@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::_Unused_capacity(void)
.text$mn:00001B64                 cmp     eax, [ebp+arg_0]
.text$mn:00001B67                 jnb     short loc_1BA7
.text$mn:00001B69                 mov     ecx, [ebp+var_4]
.text$mn:00001B6C                 call    ?max_size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::max_size(void)
.text$mn:00001B71                 mov     esi, eax
.text$mn:00001B73                 mov     ecx, [ebp+var_4]
.text$mn:00001B76                 call    ?size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::size(void)
.text$mn:00001B7B                 sub     esi, eax
.text$mn:00001B7D                 cmp     esi, [ebp+arg_0]
.text$mn:00001B80                 jnb     short loc_1B8A
.text$mn:00001B82                 mov     ecx, [ebp+var_4]
.text$mn:00001B85                 call    ?_Xlen@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXXZ ; std::vector<IconList,std::allocator<IconList>>::_Xlen(void)
.text$mn:00001B8A
.text$mn:00001B8A loc_1B8A:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)+2Cj
.text$mn:00001B8A                 mov     ecx, [ebp+var_4]
.text$mn:00001B8D                 call    ?size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::vector<IconList,std::allocator<IconList>>::size(void)
.text$mn:00001B92                 add     eax, [ebp+arg_0]
.text$mn:00001B95                 push    eax
.text$mn:00001B96                 mov     ecx, [ebp+var_4]
.text$mn:00001B99                 call    ?_Grow_to@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEII@Z ; std::vector<IconList,std::allocator<IconList>>::_Grow_to(uint)
.text$mn:00001B9E                 push    eax
.text$mn:00001B9F                 mov     ecx, [ebp+var_4]
.text$mn:00001BA2                 call    ?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z ; std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)
.text$mn:00001BA7
.text$mn:00001BA7 loc_1BA7:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)+13j
.text$mn:00001BA7                 pop     esi
.text$mn:00001BA8                 mov     esp, ebp
.text$mn:00001BAA                 pop     ebp
.text$mn:00001BAB                 retn    4
.text$mn:00001BAB ?_Reserve@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z endp
.text$mn:00001BAB
.text$mn:00001BAB ; ---------------------------------------------------------------------------
.text$mn:00001BAE                 align 10h
.text$mn:00001BAE _text$mn        ends
.text$mn:00001BAE
.text$mn:00001BB0 ; ===========================================================================
.text$mn:00001BB0
.text$mn:00001BB0 ; Segment type: Pure code
.text$mn:00001BB0 ; Segment permissions: Read/Execute
.text$mn:00001BB0 _text$mn        segment para public 'CODE' use32
.text$mn:00001BB0                 assume cs:_text$mn
.text$mn:00001BB0                 ;org 1BB0h
.text$mn:00001BB0 ; COMDAT (pick any)
.text$mn:00001BB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001BB0
.text$mn:00001BB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001BB0
.text$mn:00001BB0 ; Attributes: bp-based frame
.text$mn:00001BB0
.text$mn:00001BB0 ; public: unsigned int __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Unused_capacity(void)const
.text$mn:00001BB0                 public ?_Unused_capacity@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ
.text$mn:00001BB0 ?_Unused_capacity@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ proc near
.text$mn:00001BB0                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)+Bp
.text$mn:00001BB0
.text$mn:00001BB0 var_4           = dword ptr -4
.text$mn:00001BB0
.text$mn:00001BB0                 push    ebp
.text$mn:00001BB1                 mov     ebp, esp
.text$mn:00001BB3                 push    ecx
.text$mn:00001BB4                 mov     [ebp+var_4], ecx
.text$mn:00001BB7                 mov     eax, [ebp+var_4]
.text$mn:00001BBA                 mov     ecx, [ebp+var_4]
.text$mn:00001BBD                 mov     eax, [eax+0Ch]
.text$mn:00001BC0                 sub     eax, [ecx+8]
.text$mn:00001BC3                 cdq
.text$mn:00001BC4                 mov     ecx, 14h
.text$mn:00001BC9                 idiv    ecx
.text$mn:00001BCB                 mov     esp, ebp
.text$mn:00001BCD                 pop     ebp
.text$mn:00001BCE                 retn
.text$mn:00001BCE ?_Unused_capacity@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ endp
.text$mn:00001BCE
.text$mn:00001BCE ; ---------------------------------------------------------------------------
.text$mn:00001BCF                 align 10h
.text$mn:00001BCF _text$mn        ends
.text$mn:00001BCF
.text$mn:00001BD0 ; ===========================================================================
.text$mn:00001BD0
.text$mn:00001BD0 ; Segment type: Pure code
.text$mn:00001BD0 ; Segment permissions: Read/Execute
.text$mn:00001BD0 _text$mn        segment para public 'CODE' use32
.text$mn:00001BD0                 assume cs:_text$mn
.text$mn:00001BD0                 ;org 1BD0h
.text$mn:00001BD0 ; COMDAT (pick any)
.text$mn:00001BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001BD0
.text$mn:00001BD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001BD0
.text$mn:00001BD0 ; Attributes: bp-based frame
.text$mn:00001BD0
.text$mn:00001BD0 ; public: unsigned int __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Unused_capacity(void)const
.text$mn:00001BD0                 public ?_Unused_capacity@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ
.text$mn:00001BD0 ?_Unused_capacity@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ proc near
.text$mn:00001BD0                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)+Bp
.text$mn:00001BD0
.text$mn:00001BD0 var_4           = dword ptr -4
.text$mn:00001BD0
.text$mn:00001BD0                 push    ebp
.text$mn:00001BD1                 mov     ebp, esp
.text$mn:00001BD3                 push    ecx
.text$mn:00001BD4                 mov     [ebp+var_4], ecx
.text$mn:00001BD7                 mov     eax, [ebp+var_4]
.text$mn:00001BDA                 mov     ecx, [ebp+var_4]
.text$mn:00001BDD                 mov     eax, [eax+0Ch]
.text$mn:00001BE0                 sub     eax, [ecx+8]
.text$mn:00001BE3                 cdq
.text$mn:00001BE4                 mov     ecx, 14h
.text$mn:00001BE9                 idiv    ecx
.text$mn:00001BEB                 mov     esp, ebp
.text$mn:00001BED                 pop     ebp
.text$mn:00001BEE                 retn
.text$mn:00001BEE ?_Unused_capacity@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ endp
.text$mn:00001BEE
.text$mn:00001BEE ; ---------------------------------------------------------------------------
.text$mn:00001BEF                 align 10h
.text$mn:00001BEF _text$mn        ends
.text$mn:00001BEF
.text$mn:00001BF0 ; ===========================================================================
.text$mn:00001BF0
.text$mn:00001BF0 ; Segment type: Pure code
.text$mn:00001BF0 ; Segment permissions: Read/Execute
.text$mn:00001BF0 _text$mn        segment para public 'CODE' use32
.text$mn:00001BF0                 assume cs:_text$mn
.text$mn:00001BF0                 ;org 1BF0h
.text$mn:00001BF0 ; COMDAT (pick any)
.text$mn:00001BF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001BF0
.text$mn:00001BF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001BF0
.text$mn:00001BF0 ; Attributes: bp-based frame
.text$mn:00001BF0
.text$mn:00001BF0 ; protected: void __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::_Xlen(void)const
.text$mn:00001BF0                 public ?_Xlen@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXXZ
.text$mn:00001BF0 ?_Xlen@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXXZ proc near
.text$mn:00001BF0                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)+31p
.text$mn:00001BF0
.text$mn:00001BF0 var_4           = dword ptr -4
.text$mn:00001BF0
.text$mn:00001BF0                 push    ebp
.text$mn:00001BF1                 mov     ebp, esp
.text$mn:00001BF3                 push    ecx
.text$mn:00001BF4                 mov     [ebp+var_4], ecx
.text$mn:00001BF7                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:00001BFC                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00001C01                 mov     esp, ebp
.text$mn:00001C03                 pop     ebp
.text$mn:00001C04                 retn
.text$mn:00001C04 ?_Xlen@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXXZ endp
.text$mn:00001C04
.text$mn:00001C04 ; ---------------------------------------------------------------------------
.text$mn:00001C05                 align 4
.text$mn:00001C05 _text$mn        ends
.text$mn:00001C05
.text$mn:00001C08 ; ===========================================================================
.text$mn:00001C08
.text$mn:00001C08 ; Segment type: Pure code
.text$mn:00001C08 ; Segment permissions: Read/Execute
.text$mn:00001C08 _text$mn        segment para public 'CODE' use32
.text$mn:00001C08                 assume cs:_text$mn
.text$mn:00001C08                 ;org 1C08h
.text$mn:00001C08 ; COMDAT (pick any)
.text$mn:00001C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C08
.text$mn:00001C08 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C08
.text$mn:00001C08 ; Attributes: bp-based frame
.text$mn:00001C08
.text$mn:00001C08 ; protected: void __thiscall std::vector<class IconList, class std::allocator<class IconList>>::_Xlen(void)const
.text$mn:00001C08                 public ?_Xlen@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXXZ
.text$mn:00001C08 ?_Xlen@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXXZ proc near
.text$mn:00001C08                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)+31p
.text$mn:00001C08
.text$mn:00001C08 var_4           = dword ptr -4
.text$mn:00001C08
.text$mn:00001C08                 push    ebp
.text$mn:00001C09                 mov     ebp, esp
.text$mn:00001C0B                 push    ecx
.text$mn:00001C0C                 mov     [ebp+var_4], ecx
.text$mn:00001C0F                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:00001C14                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00001C19                 mov     esp, ebp
.text$mn:00001C1B                 pop     ebp
.text$mn:00001C1C                 retn
.text$mn:00001C1C ?_Xlen@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXXZ endp
.text$mn:00001C1C
.text$mn:00001C1C ; ---------------------------------------------------------------------------
.text$mn:00001C1D                 align 10h
.text$mn:00001C1D _text$mn        ends
.text$mn:00001C1D
.text$mn:00001C20 ; ===========================================================================
.text$mn:00001C20
.text$mn:00001C20 ; Segment type: Pure code
.text$mn:00001C20 ; Segment permissions: Read/Execute
.text$mn:00001C20 _text$mn        segment para public 'CODE' use32
.text$mn:00001C20                 assume cs:_text$mn
.text$mn:00001C20                 ;org 1C20h
.text$mn:00001C20 ; COMDAT (pick any)
.text$mn:00001C20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C20
.text$mn:00001C20 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C20
.text$mn:00001C20 ; Attributes: bp-based frame
.text$mn:00001C20
.text$mn:00001C20 ; public: struct ToolBarButtonUnit * __thiscall std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>>::allocate(unsigned int)
.text$mn:00001C20                 public ?allocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEPAUToolBarButtonUnit@@I@Z
.text$mn:00001C20 ?allocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEPAUToolBarButtonUnit@@I@Z proc near
.text$mn:00001C20                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+41p
.text$mn:00001C20
.text$mn:00001C20 var_4           = dword ptr -4
.text$mn:00001C20 arg_0           = dword ptr  8
.text$mn:00001C20
.text$mn:00001C20                 push    ebp
.text$mn:00001C21                 mov     ebp, esp
.text$mn:00001C23                 push    ecx
.text$mn:00001C24                 mov     [ebp+var_4], ecx
.text$mn:00001C27                 mov     eax, [ebp+arg_0]
.text$mn:00001C2A                 push    eax
.text$mn:00001C2B                 mov     ecx, [ebp+var_4]
.text$mn:00001C2E                 call    ?allocate@?$allocator@UToolBarButtonUnit@@@std@@QAEPAUToolBarButtonUnit@@I@Z ; std::allocator<ToolBarButtonUnit>::allocate(uint)
.text$mn:00001C33                 mov     esp, ebp
.text$mn:00001C35                 pop     ebp
.text$mn:00001C36                 retn    4
.text$mn:00001C36 ?allocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEPAUToolBarButtonUnit@@I@Z endp
.text$mn:00001C36
.text$mn:00001C36 ; ---------------------------------------------------------------------------
.text$mn:00001C39                 align 4
.text$mn:00001C39 _text$mn        ends
.text$mn:00001C39
.text$mn:00001C3C ; ===========================================================================
.text$mn:00001C3C
.text$mn:00001C3C ; Segment type: Pure code
.text$mn:00001C3C ; Segment permissions: Read/Execute
.text$mn:00001C3C _text$mn        segment para public 'CODE' use32
.text$mn:00001C3C                 assume cs:_text$mn
.text$mn:00001C3C                 ;org 1C3Ch
.text$mn:00001C3C ; COMDAT (pick any)
.text$mn:00001C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C3C
.text$mn:00001C3C ; =============== S U B R O U T I N E =======================================
.text$mn:00001C3C
.text$mn:00001C3C ; Attributes: bp-based frame
.text$mn:00001C3C
.text$mn:00001C3C ; public: class IconList * __thiscall std::_Wrap_alloc<class std::allocator<class IconList>>::allocate(unsigned int)
.text$mn:00001C3C                 public ?allocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEPAVIconList@@I@Z
.text$mn:00001C3C ?allocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEPAVIconList@@I@Z proc near
.text$mn:00001C3C                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+41p
.text$mn:00001C3C
.text$mn:00001C3C var_4           = dword ptr -4
.text$mn:00001C3C arg_0           = dword ptr  8
.text$mn:00001C3C
.text$mn:00001C3C                 push    ebp
.text$mn:00001C3D                 mov     ebp, esp
.text$mn:00001C3F                 push    ecx
.text$mn:00001C40                 mov     [ebp+var_4], ecx
.text$mn:00001C43                 mov     eax, [ebp+arg_0]
.text$mn:00001C46                 push    eax
.text$mn:00001C47                 mov     ecx, [ebp+var_4]
.text$mn:00001C4A                 call    ?allocate@?$allocator@VIconList@@@std@@QAEPAVIconList@@I@Z ; std::allocator<IconList>::allocate(uint)
.text$mn:00001C4F                 mov     esp, ebp
.text$mn:00001C51                 pop     ebp
.text$mn:00001C52                 retn    4
.text$mn:00001C52 ?allocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEPAVIconList@@I@Z endp
.text$mn:00001C52
.text$mn:00001C52 ; ---------------------------------------------------------------------------
.text$mn:00001C55                 align 4
.text$mn:00001C55 _text$mn        ends
.text$mn:00001C55
.text$mn:00001C58 ; ===========================================================================
.text$mn:00001C58
.text$mn:00001C58 ; Segment type: Pure code
.text$mn:00001C58 ; Segment permissions: Read/Execute
.text$mn:00001C58 _text$mn        segment para public 'CODE' use32
.text$mn:00001C58                 assume cs:_text$mn
.text$mn:00001C58                 ;org 1C58h
.text$mn:00001C58 ; COMDAT (pick any)
.text$mn:00001C58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C58
.text$mn:00001C58 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C58
.text$mn:00001C58 ; Attributes: bp-based frame
.text$mn:00001C58
.text$mn:00001C58 ; public: struct ToolBarButtonUnit * __thiscall std::allocator<struct ToolBarButtonUnit>::allocate(unsigned int)
.text$mn:00001C58                 public ?allocate@?$allocator@UToolBarButtonUnit@@@std@@QAEPAUToolBarButtonUnit@@I@Z
.text$mn:00001C58 ?allocate@?$allocator@UToolBarButtonUnit@@@std@@QAEPAUToolBarButtonUnit@@I@Z proc near
.text$mn:00001C58                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::allocate(uint)+Ep
.text$mn:00001C58
.text$mn:00001C58 var_4           = dword ptr -4
.text$mn:00001C58 arg_0           = dword ptr  8
.text$mn:00001C58
.text$mn:00001C58                 push    ebp
.text$mn:00001C59                 mov     ebp, esp
.text$mn:00001C5B                 push    ecx
.text$mn:00001C5C                 mov     [ebp+var_4], ecx
.text$mn:00001C5F                 push    0
.text$mn:00001C61                 mov     eax, [ebp+arg_0]
.text$mn:00001C64                 push    eax
.text$mn:00001C65                 call    ??$_Allocate@UToolBarButtonUnit@@@std@@YAPAUToolBarButtonUnit@@IPAU1@@Z ; std::_Allocate<ToolBarButtonUnit>(uint,ToolBarButtonUnit *)
.text$mn:00001C6A                 add     esp, 8
.text$mn:00001C6D                 mov     esp, ebp
.text$mn:00001C6F                 pop     ebp
.text$mn:00001C70                 retn    4
.text$mn:00001C70 ?allocate@?$allocator@UToolBarButtonUnit@@@std@@QAEPAUToolBarButtonUnit@@I@Z endp
.text$mn:00001C70
.text$mn:00001C70 ; ---------------------------------------------------------------------------
.text$mn:00001C73                 align 4
.text$mn:00001C73 _text$mn        ends
.text$mn:00001C73
.text$mn:00001C74 ; ===========================================================================
.text$mn:00001C74
.text$mn:00001C74 ; Segment type: Pure code
.text$mn:00001C74 ; Segment permissions: Read/Execute
.text$mn:00001C74 _text$mn        segment para public 'CODE' use32
.text$mn:00001C74                 assume cs:_text$mn
.text$mn:00001C74                 ;org 1C74h
.text$mn:00001C74 ; COMDAT (pick any)
.text$mn:00001C74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C74
.text$mn:00001C74 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C74
.text$mn:00001C74 ; Attributes: bp-based frame
.text$mn:00001C74
.text$mn:00001C74 ; public: class IconList * __thiscall std::allocator<class IconList>::allocate(unsigned int)
.text$mn:00001C74                 public ?allocate@?$allocator@VIconList@@@std@@QAEPAVIconList@@I@Z
.text$mn:00001C74 ?allocate@?$allocator@VIconList@@@std@@QAEPAVIconList@@I@Z proc near
.text$mn:00001C74                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<IconList>>::allocate(uint)+Ep
.text$mn:00001C74
.text$mn:00001C74 var_4           = dword ptr -4
.text$mn:00001C74 arg_0           = dword ptr  8
.text$mn:00001C74
.text$mn:00001C74                 push    ebp
.text$mn:00001C75                 mov     ebp, esp
.text$mn:00001C77                 push    ecx
.text$mn:00001C78                 mov     [ebp+var_4], ecx
.text$mn:00001C7B                 push    0
.text$mn:00001C7D                 mov     eax, [ebp+arg_0]
.text$mn:00001C80                 push    eax
.text$mn:00001C81                 call    ??$_Allocate@VIconList@@@std@@YAPAVIconList@@IPAV1@@Z ; std::_Allocate<IconList>(uint,IconList *)
.text$mn:00001C86                 add     esp, 8
.text$mn:00001C89                 mov     esp, ebp
.text$mn:00001C8B                 pop     ebp
.text$mn:00001C8C                 retn    4
.text$mn:00001C8C ?allocate@?$allocator@VIconList@@@std@@QAEPAVIconList@@I@Z endp
.text$mn:00001C8C
.text$mn:00001C8C ; ---------------------------------------------------------------------------
.text$mn:00001C8F                 align 10h
.text$mn:00001C8F _text$mn        ends
.text$mn:00001C8F
.text$mn:00001C90 ; ===========================================================================
.text$mn:00001C90
.text$mn:00001C90 ; Segment type: Pure code
.text$mn:00001C90 ; Segment permissions: Read/Execute
.text$mn:00001C90 _text$mn        segment para public 'CODE' use32
.text$mn:00001C90                 assume cs:_text$mn
.text$mn:00001C90                 ;org 1C90h
.text$mn:00001C90 ; COMDAT (pick any)
.text$mn:00001C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001C90
.text$mn:00001C90 ; =============== S U B R O U T I N E =======================================
.text$mn:00001C90
.text$mn:00001C90 ; Attributes: bp-based frame
.text$mn:00001C90
.text$mn:00001C90 ; public: unsigned int __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::capacity(void)const
.text$mn:00001C90                 public ?capacity@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ
.text$mn:00001C90 ?capacity@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ proc near
.text$mn:00001C90                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Grow_to(uint)+Cp
.text$mn:00001C90
.text$mn:00001C90 var_4           = dword ptr -4
.text$mn:00001C90
.text$mn:00001C90                 push    ebp
.text$mn:00001C91                 mov     ebp, esp
.text$mn:00001C93                 push    ecx
.text$mn:00001C94                 mov     [ebp+var_4], ecx
.text$mn:00001C97                 mov     eax, [ebp+var_4]
.text$mn:00001C9A                 mov     ecx, [ebp+var_4]
.text$mn:00001C9D                 mov     eax, [eax+0Ch]
.text$mn:00001CA0                 sub     eax, [ecx+4]
.text$mn:00001CA3                 cdq
.text$mn:00001CA4                 mov     ecx, 14h
.text$mn:00001CA9                 idiv    ecx
.text$mn:00001CAB                 mov     esp, ebp
.text$mn:00001CAD                 pop     ebp
.text$mn:00001CAE                 retn
.text$mn:00001CAE ?capacity@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ endp
.text$mn:00001CAE
.text$mn:00001CAE ; ---------------------------------------------------------------------------
.text$mn:00001CAF                 align 10h
.text$mn:00001CAF _text$mn        ends
.text$mn:00001CAF
.text$mn:00001CB0 ; ===========================================================================
.text$mn:00001CB0
.text$mn:00001CB0 ; Segment type: Pure code
.text$mn:00001CB0 ; Segment permissions: Read/Execute
.text$mn:00001CB0 _text$mn        segment para public 'CODE' use32
.text$mn:00001CB0                 assume cs:_text$mn
.text$mn:00001CB0                 ;org 1CB0h
.text$mn:00001CB0 ; COMDAT (pick any)
.text$mn:00001CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001CB0
.text$mn:00001CB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CB0
.text$mn:00001CB0 ; Attributes: bp-based frame
.text$mn:00001CB0
.text$mn:00001CB0 ; public: unsigned int __thiscall std::vector<class IconList, class std::allocator<class IconList>>::capacity(void)const
.text$mn:00001CB0                 public ?capacity@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ
.text$mn:00001CB0 ?capacity@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ proc near
.text$mn:00001CB0                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Grow_to(uint)+Cp
.text$mn:00001CB0
.text$mn:00001CB0 var_4           = dword ptr -4
.text$mn:00001CB0
.text$mn:00001CB0                 push    ebp
.text$mn:00001CB1                 mov     ebp, esp
.text$mn:00001CB3                 push    ecx
.text$mn:00001CB4                 mov     [ebp+var_4], ecx
.text$mn:00001CB7                 mov     eax, [ebp+var_4]
.text$mn:00001CBA                 mov     ecx, [ebp+var_4]
.text$mn:00001CBD                 mov     eax, [eax+0Ch]
.text$mn:00001CC0                 sub     eax, [ecx+4]
.text$mn:00001CC3                 cdq
.text$mn:00001CC4                 mov     ecx, 14h
.text$mn:00001CC9                 idiv    ecx
.text$mn:00001CCB                 mov     esp, ebp
.text$mn:00001CCD                 pop     ebp
.text$mn:00001CCE                 retn
.text$mn:00001CCE ?capacity@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ endp
.text$mn:00001CCE
.text$mn:00001CCE ; ---------------------------------------------------------------------------
.text$mn:00001CCF                 align 10h
.text$mn:00001CCF _text$mn        ends
.text$mn:00001CCF
.text$mn:00001CD0 ; ===========================================================================
.text$mn:00001CD0
.text$mn:00001CD0 ; Segment type: Pure code
.text$mn:00001CD0 ; Segment permissions: Read/Execute
.text$mn:00001CD0 _text$mn        segment para public 'CODE' use32
.text$mn:00001CD0                 assume cs:_text$mn
.text$mn:00001CD0                 ;org 1CD0h
.text$mn:00001CD0 ; COMDAT (pick any)
.text$mn:00001CD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001CD0
.text$mn:00001CD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001CD0
.text$mn:00001CD0 ; Attributes: bp-based frame
.text$mn:00001CD0
.text$mn:00001CD0 ; int __stdcall std::allocator<ToolBarButtonUnit>::construct(void *, int)
.text$mn:00001CD0                 public ?construct@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@ABU3@@Z
.text$mn:00001CD0 ?construct@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@ABU3@@Z proc near
.text$mn:00001CD0                                         ; CODE XREF: std::allocator_traits<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit const &>(std::allocator<ToolBarButtonUnit> &,ToolBarButtonUnit *,ToolBarButtonUnit const &)+17p
.text$mn:00001CD0
.text$mn:00001CD0 var_C           = dword ptr -0Ch
.text$mn:00001CD0 var_8           = dword ptr -8
.text$mn:00001CD0 var_4           = dword ptr -4
.text$mn:00001CD0 arg_0           = dword ptr  8
.text$mn:00001CD0 arg_4           = dword ptr  0Ch
.text$mn:00001CD0
.text$mn:00001CD0                 push    ebp
.text$mn:00001CD1                 mov     ebp, esp
.text$mn:00001CD3                 sub     esp, 0Ch
.text$mn:00001CD6                 mov     [ebp+var_C], ecx
.text$mn:00001CD9                 mov     eax, [ebp+arg_0]
.text$mn:00001CDC                 push    eax             ; void *
.text$mn:00001CDD                 push    14h             ; unsigned int
.text$mn:00001CDF                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00001CE4                 add     esp, 8
.text$mn:00001CE7                 mov     [ebp+var_4], eax
.text$mn:00001CEA                 cmp     [ebp+var_4], 0
.text$mn:00001CEE                 jz      short loc_1D1A
.text$mn:00001CF0                 mov     ecx, [ebp+arg_4]
.text$mn:00001CF3                 mov     edx, [ebp+var_4]
.text$mn:00001CF6                 mov     eax, [ecx]
.text$mn:00001CF8                 mov     [edx], eax
.text$mn:00001CFA                 mov     eax, [ecx+4]
.text$mn:00001CFD                 mov     [edx+4], eax
.text$mn:00001D00                 mov     eax, [ecx+8]
.text$mn:00001D03                 mov     [edx+8], eax
.text$mn:00001D06                 mov     eax, [ecx+0Ch]
.text$mn:00001D09                 mov     [edx+0Ch], eax
.text$mn:00001D0C                 mov     ecx, [ecx+10h]
.text$mn:00001D0F                 mov     [edx+10h], ecx
.text$mn:00001D12                 mov     edx, [ebp+var_4]
.text$mn:00001D15                 mov     [ebp+var_8], edx
.text$mn:00001D18                 jmp     short loc_1D21
.text$mn:00001D1A ; ---------------------------------------------------------------------------
.text$mn:00001D1A
.text$mn:00001D1A loc_1D1A:                               ; CODE XREF: std::allocator<ToolBarButtonUnit>::construct(ToolBarButtonUnit *,ToolBarButtonUnit const &)+1Ej
.text$mn:00001D1A                 mov     [ebp+var_8], 0
.text$mn:00001D21
.text$mn:00001D21 loc_1D21:                               ; CODE XREF: std::allocator<ToolBarButtonUnit>::construct(ToolBarButtonUnit *,ToolBarButtonUnit const &)+48j
.text$mn:00001D21                 mov     esp, ebp
.text$mn:00001D23                 pop     ebp
.text$mn:00001D24                 retn    8
.text$mn:00001D24 ?construct@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@ABU3@@Z endp
.text$mn:00001D24
.text$mn:00001D24 ; ---------------------------------------------------------------------------
.text$mn:00001D27                 align 4
.text$mn:00001D27 _text$mn        ends
.text$mn:00001D27
.text$mn:00001D28 ; ===========================================================================
.text$mn:00001D28
.text$mn:00001D28 ; Segment type: Pure code
.text$mn:00001D28 ; Segment permissions: Read/Execute
.text$mn:00001D28 _text$mn        segment para public 'CODE' use32
.text$mn:00001D28                 assume cs:_text$mn
.text$mn:00001D28                 ;org 1D28h
.text$mn:00001D28 ; COMDAT (pick any)
.text$mn:00001D28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D28
.text$mn:00001D28 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D28
.text$mn:00001D28 ; Attributes: bp-based frame
.text$mn:00001D28
.text$mn:00001D28 ; int __stdcall std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::deallocate(void *, int)
.text$mn:00001D28                 public ?deallocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@I@Z
.text$mn:00001D28 ?deallocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@I@Z proc near
.text$mn:00001D28                                         ; CODE XREF: __catch$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z$0+16p
.text$mn:00001D28                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reallocate(uint)+FAp
.text$mn:00001D28
.text$mn:00001D28 var_4           = dword ptr -4
.text$mn:00001D28 arg_0           = dword ptr  8
.text$mn:00001D28 arg_4           = dword ptr  0Ch
.text$mn:00001D28
.text$mn:00001D28                 push    ebp
.text$mn:00001D29                 mov     ebp, esp
.text$mn:00001D2B                 push    ecx
.text$mn:00001D2C                 mov     [ebp+var_4], ecx
.text$mn:00001D2F                 mov     eax, [ebp+arg_4]
.text$mn:00001D32                 push    eax             ; int
.text$mn:00001D33                 mov     ecx, [ebp+arg_0]
.text$mn:00001D36                 push    ecx             ; void *
.text$mn:00001D37                 mov     ecx, [ebp+var_4]
.text$mn:00001D3A                 call    ?deallocate@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@I@Z ; std::allocator<ToolBarButtonUnit>::deallocate(ToolBarButtonUnit *,uint)
.text$mn:00001D3F                 mov     esp, ebp
.text$mn:00001D41                 pop     ebp
.text$mn:00001D42                 retn    8
.text$mn:00001D42 ?deallocate@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@I@Z endp
.text$mn:00001D42
.text$mn:00001D42 ; ---------------------------------------------------------------------------
.text$mn:00001D45                 align 4
.text$mn:00001D45 _text$mn        ends
.text$mn:00001D45
.text$mn:00001D48 ; ===========================================================================
.text$mn:00001D48
.text$mn:00001D48 ; Segment type: Pure code
.text$mn:00001D48 ; Segment permissions: Read/Execute
.text$mn:00001D48 _text$mn        segment para public 'CODE' use32
.text$mn:00001D48                 assume cs:_text$mn
.text$mn:00001D48                 ;org 1D48h
.text$mn:00001D48 ; COMDAT (pick any)
.text$mn:00001D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D48
.text$mn:00001D48 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D48
.text$mn:00001D48 ; Attributes: bp-based frame
.text$mn:00001D48
.text$mn:00001D48 ; int __stdcall std::_Wrap_alloc<std::allocator<IconList>>::deallocate(void *, int)
.text$mn:00001D48                 public ?deallocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@I@Z
.text$mn:00001D48 ?deallocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@I@Z proc near
.text$mn:00001D48                                         ; CODE XREF: __catch$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z$0+16p
.text$mn:00001D48                                         ; std::vector<IconList,std::allocator<IconList>>::_Reallocate(uint)+FAp
.text$mn:00001D48
.text$mn:00001D48 var_4           = dword ptr -4
.text$mn:00001D48 arg_0           = dword ptr  8
.text$mn:00001D48 arg_4           = dword ptr  0Ch
.text$mn:00001D48
.text$mn:00001D48                 push    ebp
.text$mn:00001D49                 mov     ebp, esp
.text$mn:00001D4B                 push    ecx
.text$mn:00001D4C                 mov     [ebp+var_4], ecx
.text$mn:00001D4F                 mov     eax, [ebp+arg_4]
.text$mn:00001D52                 push    eax             ; int
.text$mn:00001D53                 mov     ecx, [ebp+arg_0]
.text$mn:00001D56                 push    ecx             ; void *
.text$mn:00001D57                 mov     ecx, [ebp+var_4]
.text$mn:00001D5A                 call    ?deallocate@?$allocator@VIconList@@@std@@QAEXPAVIconList@@I@Z ; std::allocator<IconList>::deallocate(IconList *,uint)
.text$mn:00001D5F                 mov     esp, ebp
.text$mn:00001D61                 pop     ebp
.text$mn:00001D62                 retn    8
.text$mn:00001D62 ?deallocate@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@I@Z endp
.text$mn:00001D62
.text$mn:00001D62 ; ---------------------------------------------------------------------------
.text$mn:00001D65                 align 4
.text$mn:00001D65 _text$mn        ends
.text$mn:00001D65
.text$mn:00001D68 ; ===========================================================================
.text$mn:00001D68
.text$mn:00001D68 ; Segment type: Pure code
.text$mn:00001D68 ; Segment permissions: Read/Execute
.text$mn:00001D68 _text$mn        segment para public 'CODE' use32
.text$mn:00001D68                 assume cs:_text$mn
.text$mn:00001D68                 ;org 1D68h
.text$mn:00001D68 ; COMDAT (pick any)
.text$mn:00001D68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D68
.text$mn:00001D68 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D68
.text$mn:00001D68 ; Attributes: bp-based frame
.text$mn:00001D68
.text$mn:00001D68 ; int __stdcall std::allocator<ToolBarButtonUnit>::deallocate(void *, int)
.text$mn:00001D68                 public ?deallocate@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@I@Z
.text$mn:00001D68 ?deallocate@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@I@Z proc near
.text$mn:00001D68                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::deallocate(ToolBarButtonUnit *,uint)+12p
.text$mn:00001D68
.text$mn:00001D68 var_4           = dword ptr -4
.text$mn:00001D68 arg_0           = dword ptr  8
.text$mn:00001D68
.text$mn:00001D68                 push    ebp
.text$mn:00001D69                 mov     ebp, esp
.text$mn:00001D6B                 push    ecx
.text$mn:00001D6C                 mov     [ebp+var_4], ecx
.text$mn:00001D6F                 mov     eax, [ebp+arg_0]
.text$mn:00001D72                 push    eax             ; void *
.text$mn:00001D73                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00001D78                 add     esp, 4
.text$mn:00001D7B                 mov     esp, ebp
.text$mn:00001D7D                 pop     ebp
.text$mn:00001D7E                 retn    8
.text$mn:00001D7E ?deallocate@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@I@Z endp
.text$mn:00001D7E
.text$mn:00001D7E ; ---------------------------------------------------------------------------
.text$mn:00001D81                 align 4
.text$mn:00001D81 _text$mn        ends
.text$mn:00001D81
.text$mn:00001D84 ; ===========================================================================
.text$mn:00001D84
.text$mn:00001D84 ; Segment type: Pure code
.text$mn:00001D84 ; Segment permissions: Read/Execute
.text$mn:00001D84 _text$mn        segment para public 'CODE' use32
.text$mn:00001D84                 assume cs:_text$mn
.text$mn:00001D84                 ;org 1D84h
.text$mn:00001D84 ; COMDAT (pick any)
.text$mn:00001D84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001D84
.text$mn:00001D84 ; =============== S U B R O U T I N E =======================================
.text$mn:00001D84
.text$mn:00001D84 ; Attributes: bp-based frame
.text$mn:00001D84
.text$mn:00001D84 ; int __stdcall std::allocator<IconList>::deallocate(void *, int)
.text$mn:00001D84                 public ?deallocate@?$allocator@VIconList@@@std@@QAEXPAVIconList@@I@Z
.text$mn:00001D84 ?deallocate@?$allocator@VIconList@@@std@@QAEXPAVIconList@@I@Z proc near
.text$mn:00001D84                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<IconList>>::deallocate(IconList *,uint)+12p
.text$mn:00001D84
.text$mn:00001D84 var_4           = dword ptr -4
.text$mn:00001D84 arg_0           = dword ptr  8
.text$mn:00001D84
.text$mn:00001D84                 push    ebp
.text$mn:00001D85                 mov     ebp, esp
.text$mn:00001D87                 push    ecx
.text$mn:00001D88                 mov     [ebp+var_4], ecx
.text$mn:00001D8B                 mov     eax, [ebp+arg_0]
.text$mn:00001D8E                 push    eax             ; void *
.text$mn:00001D8F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00001D94                 add     esp, 4
.text$mn:00001D97                 mov     esp, ebp
.text$mn:00001D99                 pop     ebp
.text$mn:00001D9A                 retn    8
.text$mn:00001D9A ?deallocate@?$allocator@VIconList@@@std@@QAEXPAVIconList@@I@Z endp
.text$mn:00001D9A
.text$mn:00001D9A ; ---------------------------------------------------------------------------
.text$mn:00001D9D                 align 10h
.text$mn:00001D9D _text$mn        ends
.text$mn:00001D9D
.text$mn:00001DA0 ; ===========================================================================
.text$mn:00001DA0
.text$mn:00001DA0 ; Segment type: Pure code
.text$mn:00001DA0 ; Segment permissions: Read/Execute
.text$mn:00001DA0 _text$mn        segment para public 'CODE' use32
.text$mn:00001DA0                 assume cs:_text$mn
.text$mn:00001DA0                 ;org 1DA0h
.text$mn:00001DA0 ; COMDAT (pick any)
.text$mn:00001DA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DA0
.text$mn:00001DA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DA0
.text$mn:00001DA0 ; Attributes: bp-based frame
.text$mn:00001DA0
.text$mn:00001DA0 ; void __thiscall IconList::destroy(IconList *__hidden this)
.text$mn:00001DA0                 public ?destroy@IconList@@QAEXXZ
.text$mn:00001DA0 ?destroy@IconList@@QAEXXZ proc near     ; CODE XREF: ToolBarIcons::destroy(void)+13p
.text$mn:00001DA0                                         ; ToolBarIcons::destroy(void)+24p ...
.text$mn:00001DA0
.text$mn:00001DA0 var_4           = dword ptr -4
.text$mn:00001DA0
.text$mn:00001DA0                 push    ebp
.text$mn:00001DA1                 mov     ebp, esp
.text$mn:00001DA3                 push    ecx
.text$mn:00001DA4                 mov     [ebp+var_4], ecx
.text$mn:00001DA7                 mov     eax, [ebp+var_4]
.text$mn:00001DAA                 mov     ecx, [eax]
.text$mn:00001DAC                 push    ecx             ; himl
.text$mn:00001DAD                 call    dword ptr ds:__imp__ImageList_Destroy@4 ; ImageList_Destroy(x)
.text$mn:00001DB3                 mov     esp, ebp
.text$mn:00001DB5                 pop     ebp
.text$mn:00001DB6                 retn
.text$mn:00001DB6 ?destroy@IconList@@QAEXXZ endp
.text$mn:00001DB6
.text$mn:00001DB6 ; ---------------------------------------------------------------------------
.text$mn:00001DB7                 align 4
.text$mn:00001DB7 _text$mn        ends
.text$mn:00001DB7
.text$mn:00001DB8 ; ===========================================================================
.text$mn:00001DB8
.text$mn:00001DB8 ; Segment type: Pure code
.text$mn:00001DB8 ; Segment permissions: Read/Execute
.text$mn:00001DB8 _text$mn        segment para public 'CODE' use32
.text$mn:00001DB8                 assume cs:_text$mn
.text$mn:00001DB8                 ;org 1DB8h
.text$mn:00001DB8 ; COMDAT (pick any)
.text$mn:00001DB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DB8
.text$mn:00001DB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DB8
.text$mn:00001DB8 ; Attributes: bp-based frame
.text$mn:00001DB8
.text$mn:00001DB8 ; struct _IMAGELIST *__thiscall ToolBarIcons::getDefaultLst(ToolBarIcons *__hidden this)
.text$mn:00001DB8                 public ?getDefaultLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ
.text$mn:00001DB8 ?getDefaultLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ proc near
.text$mn:00001DB8                                         ; CODE XREF: ToolBarIcons::reInit(int)+14p
.text$mn:00001DB8
.text$mn:00001DB8 var_4           = dword ptr -4
.text$mn:00001DB8
.text$mn:00001DB8                 push    ebp
.text$mn:00001DB9                 mov     ebp, esp
.text$mn:00001DBB                 push    ecx
.text$mn:00001DBC                 mov     [ebp+var_4], ecx
.text$mn:00001DBF                 push    0               ; int
.text$mn:00001DC1                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001DC4                 call    ?getImageListHandle@IconLists@@QBEPAU_IMAGELIST@@H@Z ; IconLists::getImageListHandle(int)
.text$mn:00001DC9                 mov     esp, ebp
.text$mn:00001DCB                 pop     ebp
.text$mn:00001DCC                 retn
.text$mn:00001DCC ?getDefaultLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ endp
.text$mn:00001DCC
.text$mn:00001DCC ; ---------------------------------------------------------------------------
.text$mn:00001DCD                 align 10h
.text$mn:00001DCD _text$mn        ends
.text$mn:00001DCD
.text$mn:00001DD0 ; ===========================================================================
.text$mn:00001DD0
.text$mn:00001DD0 ; Segment type: Pure code
.text$mn:00001DD0 ; Segment permissions: Read/Execute
.text$mn:00001DD0 _text$mn        segment para public 'CODE' use32
.text$mn:00001DD0                 assume cs:_text$mn
.text$mn:00001DD0                 ;org 1DD0h
.text$mn:00001DD0 ; COMDAT (pick any)
.text$mn:00001DD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DD0
.text$mn:00001DD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DD0
.text$mn:00001DD0 ; Attributes: bp-based frame
.text$mn:00001DD0
.text$mn:00001DD0 ; struct _IMAGELIST *__thiscall ToolBarIcons::getDisableLst(ToolBarIcons *__hidden this)
.text$mn:00001DD0                 public ?getDisableLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ
.text$mn:00001DD0 ?getDisableLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ proc near
.text$mn:00001DD0                                         ; CODE XREF: ToolBarIcons::reInit(int)+42p
.text$mn:00001DD0
.text$mn:00001DD0 var_4           = dword ptr -4
.text$mn:00001DD0
.text$mn:00001DD0                 push    ebp
.text$mn:00001DD1                 mov     ebp, esp
.text$mn:00001DD3                 push    ecx
.text$mn:00001DD4                 mov     [ebp+var_4], ecx
.text$mn:00001DD7                 push    2               ; int
.text$mn:00001DD9                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001DDC                 call    ?getImageListHandle@IconLists@@QBEPAU_IMAGELIST@@H@Z ; IconLists::getImageListHandle(int)
.text$mn:00001DE1                 mov     esp, ebp
.text$mn:00001DE3                 pop     ebp
.text$mn:00001DE4                 retn
.text$mn:00001DE4 ?getDisableLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ endp
.text$mn:00001DE4
.text$mn:00001DE4 ; ---------------------------------------------------------------------------
.text$mn:00001DE5                 align 4
.text$mn:00001DE5 _text$mn        ends
.text$mn:00001DE5
.text$mn:00001DE8 ; ===========================================================================
.text$mn:00001DE8
.text$mn:00001DE8 ; Segment type: Pure code
.text$mn:00001DE8 ; Segment permissions: Read/Execute
.text$mn:00001DE8 _text$mn        segment para public 'CODE' use32
.text$mn:00001DE8                 assume cs:_text$mn
.text$mn:00001DE8                 ;org 1DE8h
.text$mn:00001DE8 ; COMDAT (pick any)
.text$mn:00001DE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DE8
.text$mn:00001DE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DE8
.text$mn:00001DE8 ; Attributes: bp-based frame
.text$mn:00001DE8
.text$mn:00001DE8 ; struct _IMAGELIST *__thiscall IconList::getHandle(IconList *__hidden this)
.text$mn:00001DE8                 public ?getHandle@IconList@@QBEPAU_IMAGELIST@@XZ
.text$mn:00001DE8 ?getHandle@IconList@@QBEPAU_IMAGELIST@@XZ proc near
.text$mn:00001DE8                                         ; CODE XREF: IconLists::getImageListHandle(int)+15p
.text$mn:00001DE8
.text$mn:00001DE8 var_4           = dword ptr -4
.text$mn:00001DE8
.text$mn:00001DE8                 push    ebp
.text$mn:00001DE9                 mov     ebp, esp
.text$mn:00001DEB                 push    ecx
.text$mn:00001DEC                 mov     [ebp+var_4], ecx
.text$mn:00001DEF                 mov     eax, [ebp+var_4]
.text$mn:00001DF2                 mov     eax, [eax]
.text$mn:00001DF4                 mov     esp, ebp
.text$mn:00001DF6                 pop     ebp
.text$mn:00001DF7                 retn
.text$mn:00001DF7 ?getHandle@IconList@@QBEPAU_IMAGELIST@@XZ endp
.text$mn:00001DF7
.text$mn:00001DF7 _text$mn        ends
.text$mn:00001DF7
.text$mn:00001DF8 ; ===========================================================================
.text$mn:00001DF8
.text$mn:00001DF8 ; Segment type: Pure code
.text$mn:00001DF8 ; Segment permissions: Read/Execute
.text$mn:00001DF8 _text$mn        segment para public 'CODE' use32
.text$mn:00001DF8                 assume cs:_text$mn
.text$mn:00001DF8                 ;org 1DF8h
.text$mn:00001DF8 ; COMDAT (pick any)
.text$mn:00001DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001DF8
.text$mn:00001DF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00001DF8
.text$mn:00001DF8 ; Attributes: bp-based frame
.text$mn:00001DF8
.text$mn:00001DF8 ; struct _IMAGELIST *__thiscall ToolBarIcons::getHotLst(ToolBarIcons *__hidden this)
.text$mn:00001DF8                 public ?getHotLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ
.text$mn:00001DF8 ?getHotLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ proc near
.text$mn:00001DF8                                         ; CODE XREF: ToolBarIcons::reInit(int)+2Bp
.text$mn:00001DF8
.text$mn:00001DF8 var_4           = dword ptr -4
.text$mn:00001DF8
.text$mn:00001DF8                 push    ebp
.text$mn:00001DF9                 mov     ebp, esp
.text$mn:00001DFB                 push    ecx
.text$mn:00001DFC                 mov     [ebp+var_4], ecx
.text$mn:00001DFF                 push    1               ; int
.text$mn:00001E01                 mov     ecx, [ebp+var_4] ; this
.text$mn:00001E04                 call    ?getImageListHandle@IconLists@@QBEPAU_IMAGELIST@@H@Z ; IconLists::getImageListHandle(int)
.text$mn:00001E09                 mov     esp, ebp
.text$mn:00001E0B                 pop     ebp
.text$mn:00001E0C                 retn
.text$mn:00001E0C ?getHotLst@ToolBarIcons@@QBEPAU_IMAGELIST@@XZ endp
.text$mn:00001E0C
.text$mn:00001E0C ; ---------------------------------------------------------------------------
.text$mn:00001E0D                 align 10h
.text$mn:00001E0D _text$mn        ends
.text$mn:00001E0D
.text$mn:00001E10 ; ===========================================================================
.text$mn:00001E10
.text$mn:00001E10 ; Segment type: Pure code
.text$mn:00001E10 ; Segment permissions: Read/Execute
.text$mn:00001E10 _text$mn        segment para public 'CODE' use32
.text$mn:00001E10                 assume cs:_text$mn
.text$mn:00001E10                 ;org 1E10h
.text$mn:00001E10 ; COMDAT (pick any)
.text$mn:00001E10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E10
.text$mn:00001E10 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E10
.text$mn:00001E10 ; Attributes: bp-based frame
.text$mn:00001E10
.text$mn:00001E10 ; struct _IMAGELIST *__thiscall IconLists::getImageListHandle(IconLists *this, int)
.text$mn:00001E10                 public ?getImageListHandle@IconLists@@QBEPAU_IMAGELIST@@H@Z
.text$mn:00001E10 ?getImageListHandle@IconLists@@QBEPAU_IMAGELIST@@H@Z proc near
.text$mn:00001E10                                         ; CODE XREF: ToolBarIcons::getDefaultLst(void)+Cp
.text$mn:00001E10                                         ; ToolBarIcons::getDisableLst(void)+Cp ...
.text$mn:00001E10
.text$mn:00001E10 var_4           = dword ptr -4
.text$mn:00001E10 arg_0           = dword ptr  8
.text$mn:00001E10
.text$mn:00001E10                 push    ebp
.text$mn:00001E11                 mov     ebp, esp
.text$mn:00001E13                 push    ecx
.text$mn:00001E14                 mov     [ebp+var_4], ecx
.text$mn:00001E17                 mov     eax, [ebp+arg_0]
.text$mn:00001E1A                 push    eax
.text$mn:00001E1B                 mov     ecx, [ebp+var_4]
.text$mn:00001E1E                 call    ??A?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEABVIconList@@I@Z ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)
.text$mn:00001E23                 mov     ecx, eax        ; this
.text$mn:00001E25                 call    ?getHandle@IconList@@QBEPAU_IMAGELIST@@XZ ; IconList::getHandle(void)
.text$mn:00001E2A                 mov     esp, ebp
.text$mn:00001E2C                 pop     ebp
.text$mn:00001E2D                 retn    4
.text$mn:00001E2D ?getImageListHandle@IconLists@@QBEPAU_IMAGELIST@@H@Z endp
.text$mn:00001E2D
.text$mn:00001E2D _text$mn        ends
.text$mn:00001E2D
.text$mn:00001E30 ; ===========================================================================
.text$mn:00001E30
.text$mn:00001E30 ; Segment type: Pure code
.text$mn:00001E30 ; Segment permissions: Read/Execute
.text$mn:00001E30 _text$mn        segment para public 'CODE' use32
.text$mn:00001E30                 assume cs:_text$mn
.text$mn:00001E30                 ;org 1E30h
.text$mn:00001E30 ; COMDAT (pick any)
.text$mn:00001E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E30
.text$mn:00001E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E30
.text$mn:00001E30 ; Attributes: bp-based frame
.text$mn:00001E30
.text$mn:00001E30 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct ToolBarButtonUnit>>::max_size(void)const
.text$mn:00001E30                 public ?max_size@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ
.text$mn:00001E30 ?max_size@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ proc near
.text$mn:00001E30                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::max_size(void)+17p
.text$mn:00001E30
.text$mn:00001E30 var_4           = dword ptr -4
.text$mn:00001E30
.text$mn:00001E30                 push    ebp
.text$mn:00001E31                 mov     ebp, esp
.text$mn:00001E33                 push    ecx
.text$mn:00001E34                 mov     [ebp+var_4], ecx
.text$mn:00001E37                 mov     eax, [ebp+var_4]
.text$mn:00001E3A                 push    eax
.text$mn:00001E3B                 call    ?max_size@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAIABV?$allocator@UToolBarButtonUnit@@@2@@Z ; std::allocator_traits<std::allocator<ToolBarButtonUnit>>::max_size(std::allocator<ToolBarButtonUnit> const &)
.text$mn:00001E40                 add     esp, 4
.text$mn:00001E43                 mov     esp, ebp
.text$mn:00001E45                 pop     ebp
.text$mn:00001E46                 retn
.text$mn:00001E46 ?max_size@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ endp
.text$mn:00001E46
.text$mn:00001E46 ; ---------------------------------------------------------------------------
.text$mn:00001E47                 align 4
.text$mn:00001E47 _text$mn        ends
.text$mn:00001E47
.text$mn:00001E48 ; ===========================================================================
.text$mn:00001E48
.text$mn:00001E48 ; Segment type: Pure code
.text$mn:00001E48 ; Segment permissions: Read/Execute
.text$mn:00001E48 _text$mn        segment para public 'CODE' use32
.text$mn:00001E48                 assume cs:_text$mn
.text$mn:00001E48                 ;org 1E48h
.text$mn:00001E48 ; COMDAT (pick any)
.text$mn:00001E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E48
.text$mn:00001E48 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E48
.text$mn:00001E48 ; Attributes: bp-based frame
.text$mn:00001E48
.text$mn:00001E48 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<class IconList>>::max_size(void)const
.text$mn:00001E48                 public ?max_size@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QBEIXZ
.text$mn:00001E48 ?max_size@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QBEIXZ proc near
.text$mn:00001E48                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::max_size(void)+17p
.text$mn:00001E48
.text$mn:00001E48 var_4           = dword ptr -4
.text$mn:00001E48
.text$mn:00001E48                 push    ebp
.text$mn:00001E49                 mov     ebp, esp
.text$mn:00001E4B                 push    ecx
.text$mn:00001E4C                 mov     [ebp+var_4], ecx
.text$mn:00001E4F                 mov     eax, [ebp+var_4]
.text$mn:00001E52                 push    eax
.text$mn:00001E53                 call    ?max_size@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAIABV?$allocator@VIconList@@@2@@Z ; std::allocator_traits<std::allocator<IconList>>::max_size(std::allocator<IconList> const &)
.text$mn:00001E58                 add     esp, 4
.text$mn:00001E5B                 mov     esp, ebp
.text$mn:00001E5D                 pop     ebp
.text$mn:00001E5E                 retn
.text$mn:00001E5E ?max_size@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QBEIXZ endp
.text$mn:00001E5E
.text$mn:00001E5E ; ---------------------------------------------------------------------------
.text$mn:00001E5F                 align 10h
.text$mn:00001E5F _text$mn        ends
.text$mn:00001E5F
.text$mn:00001E60 ; ===========================================================================
.text$mn:00001E60
.text$mn:00001E60 ; Segment type: Pure code
.text$mn:00001E60 ; Segment permissions: Read/Execute
.text$mn:00001E60 _text$mn        segment para public 'CODE' use32
.text$mn:00001E60                 assume cs:_text$mn
.text$mn:00001E60                 ;org 1E60h
.text$mn:00001E60 ; COMDAT (pick any)
.text$mn:00001E60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E60
.text$mn:00001E60 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E60
.text$mn:00001E60 ; Attributes: bp-based frame
.text$mn:00001E60
.text$mn:00001E60 ; public: unsigned int __thiscall std::allocator<struct ToolBarButtonUnit>::max_size(void)const
.text$mn:00001E60                 public ?max_size@?$allocator@UToolBarButtonUnit@@@std@@QBEIXZ
.text$mn:00001E60 ?max_size@?$allocator@UToolBarButtonUnit@@@std@@QBEIXZ proc near
.text$mn:00001E60                                         ; CODE XREF: std::allocator_traits<std::allocator<ToolBarButtonUnit>>::max_size(std::allocator<ToolBarButtonUnit> const &)+6p
.text$mn:00001E60
.text$mn:00001E60 var_4           = dword ptr -4
.text$mn:00001E60
.text$mn:00001E60                 push    ebp
.text$mn:00001E61                 mov     ebp, esp
.text$mn:00001E63                 push    ecx
.text$mn:00001E64                 mov     [ebp+var_4], ecx
.text$mn:00001E67                 mov     eax, 0CCCCCCCh
.text$mn:00001E6C                 mov     esp, ebp
.text$mn:00001E6E                 pop     ebp
.text$mn:00001E6F                 retn
.text$mn:00001E6F ?max_size@?$allocator@UToolBarButtonUnit@@@std@@QBEIXZ endp
.text$mn:00001E6F
.text$mn:00001E6F _text$mn        ends
.text$mn:00001E6F
.text$mn:00001E70 ; ===========================================================================
.text$mn:00001E70
.text$mn:00001E70 ; Segment type: Pure code
.text$mn:00001E70 ; Segment permissions: Read/Execute
.text$mn:00001E70 _text$mn        segment para public 'CODE' use32
.text$mn:00001E70                 assume cs:_text$mn
.text$mn:00001E70                 ;org 1E70h
.text$mn:00001E70 ; COMDAT (pick any)
.text$mn:00001E70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E70
.text$mn:00001E70 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E70
.text$mn:00001E70 ; Attributes: bp-based frame
.text$mn:00001E70
.text$mn:00001E70 ; public: unsigned int __thiscall std::allocator<class IconList>::max_size(void)const
.text$mn:00001E70                 public ?max_size@?$allocator@VIconList@@@std@@QBEIXZ
.text$mn:00001E70 ?max_size@?$allocator@VIconList@@@std@@QBEIXZ proc near
.text$mn:00001E70                                         ; CODE XREF: std::allocator_traits<std::allocator<IconList>>::max_size(std::allocator<IconList> const &)+6p
.text$mn:00001E70
.text$mn:00001E70 var_4           = dword ptr -4
.text$mn:00001E70
.text$mn:00001E70                 push    ebp
.text$mn:00001E71                 mov     ebp, esp
.text$mn:00001E73                 push    ecx
.text$mn:00001E74                 mov     [ebp+var_4], ecx
.text$mn:00001E77                 mov     eax, 0CCCCCCCh
.text$mn:00001E7C                 mov     esp, ebp
.text$mn:00001E7E                 pop     ebp
.text$mn:00001E7F                 retn
.text$mn:00001E7F ?max_size@?$allocator@VIconList@@@std@@QBEIXZ endp
.text$mn:00001E7F
.text$mn:00001E7F _text$mn        ends
.text$mn:00001E7F
.text$mn:00001E80 ; ===========================================================================
.text$mn:00001E80
.text$mn:00001E80 ; Segment type: Pure code
.text$mn:00001E80 ; Segment permissions: Read/Execute
.text$mn:00001E80 _text$mn        segment para public 'CODE' use32
.text$mn:00001E80                 assume cs:_text$mn
.text$mn:00001E80                 ;org 1E80h
.text$mn:00001E80 ; COMDAT (pick any)
.text$mn:00001E80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E80
.text$mn:00001E80 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E80
.text$mn:00001E80 ; Attributes: bp-based frame
.text$mn:00001E80
.text$mn:00001E80 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct ToolBarButtonUnit>>::max_size(class std::allocator<struct ToolBarButtonUnit> const &)
.text$mn:00001E80                 public ?max_size@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAIABV?$allocator@UToolBarButtonUnit@@@2@@Z
.text$mn:00001E80 ?max_size@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAIABV?$allocator@UToolBarButtonUnit@@@2@@Z proc near
.text$mn:00001E80                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::max_size(void)+Bp
.text$mn:00001E80
.text$mn:00001E80 arg_0           = dword ptr  8
.text$mn:00001E80
.text$mn:00001E80                 push    ebp
.text$mn:00001E81                 mov     ebp, esp
.text$mn:00001E83                 mov     ecx, [ebp+arg_0]
.text$mn:00001E86                 call    ?max_size@?$allocator@UToolBarButtonUnit@@@std@@QBEIXZ ; std::allocator<ToolBarButtonUnit>::max_size(void)
.text$mn:00001E8B                 pop     ebp
.text$mn:00001E8C                 retn
.text$mn:00001E8C ?max_size@?$allocator_traits@V?$allocator@UToolBarButtonUnit@@@std@@@std@@SAIABV?$allocator@UToolBarButtonUnit@@@2@@Z endp
.text$mn:00001E8C
.text$mn:00001E8C ; ---------------------------------------------------------------------------
.text$mn:00001E8D                 align 10h
.text$mn:00001E8D _text$mn        ends
.text$mn:00001E8D
.text$mn:00001E90 ; ===========================================================================
.text$mn:00001E90
.text$mn:00001E90 ; Segment type: Pure code
.text$mn:00001E90 ; Segment permissions: Read/Execute
.text$mn:00001E90 _text$mn        segment para public 'CODE' use32
.text$mn:00001E90                 assume cs:_text$mn
.text$mn:00001E90                 ;org 1E90h
.text$mn:00001E90 ; COMDAT (pick any)
.text$mn:00001E90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001E90
.text$mn:00001E90 ; =============== S U B R O U T I N E =======================================
.text$mn:00001E90
.text$mn:00001E90 ; Attributes: bp-based frame
.text$mn:00001E90
.text$mn:00001E90 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<class IconList>>::max_size(class std::allocator<class IconList> const &)
.text$mn:00001E90                 public ?max_size@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAIABV?$allocator@VIconList@@@2@@Z
.text$mn:00001E90 ?max_size@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAIABV?$allocator@VIconList@@@2@@Z proc near
.text$mn:00001E90                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<IconList>>::max_size(void)+Bp
.text$mn:00001E90
.text$mn:00001E90 arg_0           = dword ptr  8
.text$mn:00001E90
.text$mn:00001E90                 push    ebp
.text$mn:00001E91                 mov     ebp, esp
.text$mn:00001E93                 mov     ecx, [ebp+arg_0]
.text$mn:00001E96                 call    ?max_size@?$allocator@VIconList@@@std@@QBEIXZ ; std::allocator<IconList>::max_size(void)
.text$mn:00001E9B                 pop     ebp
.text$mn:00001E9C                 retn
.text$mn:00001E9C ?max_size@?$allocator_traits@V?$allocator@VIconList@@@std@@@std@@SAIABV?$allocator@VIconList@@@2@@Z endp
.text$mn:00001E9C
.text$mn:00001E9C ; ---------------------------------------------------------------------------
.text$mn:00001E9D                 align 10h
.text$mn:00001E9D _text$mn        ends
.text$mn:00001E9D
.text$mn:00001EA0 ; ===========================================================================
.text$mn:00001EA0
.text$mn:00001EA0 ; Segment type: Pure code
.text$mn:00001EA0 ; Segment permissions: Read/Execute
.text$mn:00001EA0 _text$mn        segment para public 'CODE' use32
.text$mn:00001EA0                 assume cs:_text$mn
.text$mn:00001EA0                 ;org 1EA0h
.text$mn:00001EA0 ; COMDAT (pick any)
.text$mn:00001EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EA0
.text$mn:00001EA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EA0
.text$mn:00001EA0 ; Attributes: bp-based frame
.text$mn:00001EA0
.text$mn:00001EA0 ; public: unsigned int __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::max_size(void)const
.text$mn:00001EA0                 public ?max_size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ
.text$mn:00001EA0 ?max_size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ proc near
.text$mn:00001EA0                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Grow_to(uint)+17p
.text$mn:00001EA0                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)+18p
.text$mn:00001EA0
.text$mn:00001EA0 var_8           = dword ptr -8
.text$mn:00001EA0 var_1           = byte ptr -1
.text$mn:00001EA0
.text$mn:00001EA0                 push    ebp
.text$mn:00001EA1                 mov     ebp, esp
.text$mn:00001EA3                 sub     esp, 8
.text$mn:00001EA6                 mov     [ebp+var_8], ecx
.text$mn:00001EA9                 lea     eax, [ebp+var_1]
.text$mn:00001EAC                 push    eax
.text$mn:00001EAD                 mov     ecx, [ebp+var_8]
.text$mn:00001EB0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)
.text$mn:00001EB5                 mov     ecx, eax
.text$mn:00001EB7                 call    ?max_size@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::max_size(void)
.text$mn:00001EBC                 mov     esp, ebp
.text$mn:00001EBE                 pop     ebp
.text$mn:00001EBF                 retn
.text$mn:00001EBF ?max_size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ endp
.text$mn:00001EBF
.text$mn:00001EBF _text$mn        ends
.text$mn:00001EBF
.text$mn:00001EC0 ; ===========================================================================
.text$mn:00001EC0
.text$mn:00001EC0 ; Segment type: Pure code
.text$mn:00001EC0 ; Segment permissions: Read/Execute
.text$mn:00001EC0 _text$mn        segment para public 'CODE' use32
.text$mn:00001EC0                 assume cs:_text$mn
.text$mn:00001EC0                 ;org 1EC0h
.text$mn:00001EC0 ; COMDAT (pick any)
.text$mn:00001EC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EC0
.text$mn:00001EC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EC0
.text$mn:00001EC0 ; Attributes: bp-based frame
.text$mn:00001EC0
.text$mn:00001EC0 ; public: unsigned int __thiscall std::vector<class IconList, class std::allocator<class IconList>>::max_size(void)const
.text$mn:00001EC0                 public ?max_size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ
.text$mn:00001EC0 ?max_size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ proc near
.text$mn:00001EC0                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::_Grow_to(uint)+17p
.text$mn:00001EC0                                         ; std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)+18p
.text$mn:00001EC0
.text$mn:00001EC0 var_8           = dword ptr -8
.text$mn:00001EC0 var_1           = byte ptr -1
.text$mn:00001EC0
.text$mn:00001EC0                 push    ebp
.text$mn:00001EC1                 mov     ebp, esp
.text$mn:00001EC3                 sub     esp, 8
.text$mn:00001EC6                 mov     [ebp+var_8], ecx
.text$mn:00001EC9                 lea     eax, [ebp+var_1]
.text$mn:00001ECC                 push    eax
.text$mn:00001ECD                 mov     ecx, [ebp+var_8]
.text$mn:00001ED0                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)
.text$mn:00001ED5                 mov     ecx, eax
.text$mn:00001ED7                 call    ?max_size@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<IconList>>::max_size(void)
.text$mn:00001EDC                 mov     esp, ebp
.text$mn:00001EDE                 pop     ebp
.text$mn:00001EDF                 retn
.text$mn:00001EDF ?max_size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ endp
.text$mn:00001EDF
.text$mn:00001EDF _text$mn        ends
.text$mn:00001EDF
.text$mn:00001EE0 ; ===========================================================================
.text$mn:00001EE0
.text$mn:00001EE0 ; Segment type: Pure code
.text$mn:00001EE0 ; Segment permissions: Read/Execute
.text$mn:00001EE0 _text$mn        segment para public 'CODE' use32
.text$mn:00001EE0                 assume cs:_text$mn
.text$mn:00001EE0                 ;org 1EE0h
.text$mn:00001EE0 ; COMDAT (pick any)
.text$mn:00001EE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EE0
.text$mn:00001EE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EE0
.text$mn:00001EE0 ; Attributes: bp-based frame
.text$mn:00001EE0
.text$mn:00001EE0 ; public: void __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::push_back(struct ToolBarButtonUnit const &)
.text$mn:00001EE0                 public ?push_back@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXABUToolBarButtonUnit@@@Z
.text$mn:00001EE0 ?push_back@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXABUToolBarButtonUnit@@@Z proc near
.text$mn:00001EE0                                         ; CODE XREF: ToolBarIcons::init(ToolBarButtonUnit *,int)+31p
.text$mn:00001EE0
.text$mn:00001EE0 var_C           = dword ptr -0Ch
.text$mn:00001EE0 var_8           = dword ptr -8
.text$mn:00001EE0 var_2           = byte ptr -2
.text$mn:00001EE0 var_1           = byte ptr -1
.text$mn:00001EE0 arg_0           = dword ptr  8
.text$mn:00001EE0
.text$mn:00001EE0                 push    ebp
.text$mn:00001EE1                 mov     ebp, esp
.text$mn:00001EE3                 sub     esp, 0Ch
.text$mn:00001EE6                 mov     [ebp+var_8], ecx
.text$mn:00001EE9                 mov     eax, [ebp+arg_0]
.text$mn:00001EEC                 push    eax
.text$mn:00001EED                 call    ??$addressof@$$CBUToolBarButtonUnit@@@std@@YAPBUToolBarButtonUnit@@ABU1@@Z ; std::addressof<ToolBarButtonUnit const>(ToolBarButtonUnit const &)
.text$mn:00001EF2                 add     esp, 4
.text$mn:00001EF5                 push    eax
.text$mn:00001EF6                 mov     ecx, [ebp+var_8]
.text$mn:00001EF9                 call    ?_Inside@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBE_NPBUToolBarButtonUnit@@@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Inside(ToolBarButtonUnit const *)
.text$mn:00001EFE                 movzx   ecx, al
.text$mn:00001F01                 test    ecx, ecx
.text$mn:00001F03                 jz      loc_1F8A
.text$mn:00001F09                 mov     edx, [ebp+arg_0]
.text$mn:00001F0C                 push    edx
.text$mn:00001F0D                 call    ??$addressof@$$CBUToolBarButtonUnit@@@std@@YAPBUToolBarButtonUnit@@ABU1@@Z ; std::addressof<ToolBarButtonUnit const>(ToolBarButtonUnit const &)
.text$mn:00001F12                 add     esp, 4
.text$mn:00001F15                 mov     ecx, [ebp+var_8]
.text$mn:00001F18                 sub     eax, [ecx+4]
.text$mn:00001F1B                 cdq
.text$mn:00001F1C                 mov     ecx, 14h
.text$mn:00001F21                 idiv    ecx
.text$mn:00001F23                 mov     [ebp+var_C], eax
.text$mn:00001F26                 mov     edx, [ebp+var_8]
.text$mn:00001F29                 mov     eax, [ebp+var_8]
.text$mn:00001F2C                 mov     ecx, [edx+8]
.text$mn:00001F2F                 cmp     ecx, [eax+0Ch]
.text$mn:00001F32                 jnz     short loc_1F3E
.text$mn:00001F34                 push    1
.text$mn:00001F36                 mov     ecx, [ebp+var_8]
.text$mn:00001F39                 call    ?_Reserve@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)
.text$mn:00001F3E
.text$mn:00001F3E loc_1F3E:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+52j
.text$mn:00001F3E                 mov     edx, [ebp+var_8]
.text$mn:00001F41                 mov     eax, [edx+8]
.text$mn:00001F44                 push    eax
.text$mn:00001F45                 mov     ecx, [ebp+var_8]
.text$mn:00001F48                 mov     edx, [ecx+8]
.text$mn:00001F4B                 push    edx
.text$mn:00001F4C                 mov     ecx, [ebp+var_8]
.text$mn:00001F4F                 call    ?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)
.text$mn:00001F54                 imul    eax, [ebp+var_C], 14h
.text$mn:00001F58                 mov     ecx, [ebp+var_8]
.text$mn:00001F5B                 add     eax, [ecx+4]
.text$mn:00001F5E                 push    eax             ; int
.text$mn:00001F5F                 mov     edx, [ebp+var_8]
.text$mn:00001F62                 mov     eax, [edx+8]
.text$mn:00001F65                 push    eax             ; void *
.text$mn:00001F66                 lea     ecx, [ebp+var_1]
.text$mn:00001F69                 push    ecx
.text$mn:00001F6A                 mov     ecx, [ebp+var_8]
.text$mn:00001F6D                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)
.text$mn:00001F72                 mov     ecx, eax
.text$mn:00001F74                 call    ??$construct@UToolBarButtonUnit@@AAU1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit &>(ToolBarButtonUnit *,ToolBarButtonUnit &)
.text$mn:00001F79                 mov     edx, [ebp+var_8]
.text$mn:00001F7C                 mov     eax, [edx+8]
.text$mn:00001F7F                 add     eax, 14h
.text$mn:00001F82                 mov     ecx, [ebp+var_8]
.text$mn:00001F85                 mov     [ecx+8], eax
.text$mn:00001F88                 jmp     short loc_1FE5
.text$mn:00001F8A ; ---------------------------------------------------------------------------
.text$mn:00001F8A
.text$mn:00001F8A loc_1F8A:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+23j
.text$mn:00001F8A                 mov     edx, [ebp+var_8]
.text$mn:00001F8D                 mov     eax, [ebp+var_8]
.text$mn:00001F90                 mov     ecx, [edx+8]
.text$mn:00001F93                 cmp     ecx, [eax+0Ch]
.text$mn:00001F96                 jnz     short loc_1FA2
.text$mn:00001F98                 push    1
.text$mn:00001F9A                 mov     ecx, [ebp+var_8]
.text$mn:00001F9D                 call    ?_Reserve@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Reserve(uint)
.text$mn:00001FA2
.text$mn:00001FA2 loc_1FA2:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+B6j
.text$mn:00001FA2                 mov     edx, [ebp+var_8]
.text$mn:00001FA5                 mov     eax, [edx+8]
.text$mn:00001FA8                 push    eax
.text$mn:00001FA9                 mov     ecx, [ebp+var_8]
.text$mn:00001FAC                 mov     edx, [ecx+8]
.text$mn:00001FAF                 push    edx
.text$mn:00001FB0                 mov     ecx, [ebp+var_8]
.text$mn:00001FB3                 call    ?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)
.text$mn:00001FB8                 mov     eax, [ebp+arg_0]
.text$mn:00001FBB                 push    eax             ; int
.text$mn:00001FBC                 mov     ecx, [ebp+var_8]
.text$mn:00001FBF                 mov     edx, [ecx+8]
.text$mn:00001FC2                 push    edx             ; void *
.text$mn:00001FC3                 lea     eax, [ebp+var_2]
.text$mn:00001FC6                 push    eax
.text$mn:00001FC7                 mov     ecx, [ebp+var_8]
.text$mn:00001FCA                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>>::_Getal(void)
.text$mn:00001FCF                 mov     ecx, eax
.text$mn:00001FD1                 call    ??$construct@UToolBarButtonUnit@@ABU1@@?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXPAUToolBarButtonUnit@@ABU2@@Z ; std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>>::construct<ToolBarButtonUnit,ToolBarButtonUnit const &>(ToolBarButtonUnit *,ToolBarButtonUnit const &)
.text$mn:00001FD6                 mov     ecx, [ebp+var_8]
.text$mn:00001FD9                 mov     edx, [ecx+8]
.text$mn:00001FDC                 add     edx, 14h
.text$mn:00001FDF                 mov     eax, [ebp+var_8]
.text$mn:00001FE2                 mov     [eax+8], edx
.text$mn:00001FE5
.text$mn:00001FE5 loc_1FE5:                               ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::push_back(ToolBarButtonUnit const &)+A8j
.text$mn:00001FE5                 mov     esp, ebp
.text$mn:00001FE7                 pop     ebp
.text$mn:00001FE8                 retn    4
.text$mn:00001FE8 ?push_back@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QAEXABUToolBarButtonUnit@@@Z endp
.text$mn:00001FE8
.text$mn:00001FE8 ; ---------------------------------------------------------------------------
.text$mn:00001FEB                 align 4
.text$mn:00001FEB _text$mn        ends
.text$mn:00001FEB
.text$mn:00001FEC ; ===========================================================================
.text$mn:00001FEC
.text$mn:00001FEC ; Segment type: Pure code
.text$mn:00001FEC ; Segment permissions: Read/Execute
.text$mn:00001FEC _text$mn        segment para public 'CODE' use32
.text$mn:00001FEC                 assume cs:_text$mn
.text$mn:00001FEC                 ;org 1FECh
.text$mn:00001FEC ; COMDAT (pick any)
.text$mn:00001FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001FEC
.text$mn:00001FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00001FEC
.text$mn:00001FEC ; Attributes: bp-based frame
.text$mn:00001FEC
.text$mn:00001FEC ; public: void __thiscall std::vector<class IconList, class std::allocator<class IconList>>::push_back(class IconList &&)
.text$mn:00001FEC                 public ?push_back@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEX$$QAVIconList@@@Z
.text$mn:00001FEC ?push_back@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEX$$QAVIconList@@@Z proc near
.text$mn:00001FEC                                         ; CODE XREF: ToolBarIcons::create(HINSTANCE__ *,int)+15p
.text$mn:00001FEC                                         ; ToolBarIcons::create(HINSTANCE__ *,int)+26p ...
.text$mn:00001FEC
.text$mn:00001FEC var_C           = dword ptr -0Ch
.text$mn:00001FEC var_8           = dword ptr -8
.text$mn:00001FEC var_2           = byte ptr -2
.text$mn:00001FEC var_1           = byte ptr -1
.text$mn:00001FEC arg_0           = dword ptr  8
.text$mn:00001FEC
.text$mn:00001FEC                 push    ebp
.text$mn:00001FED                 mov     ebp, esp
.text$mn:00001FEF                 sub     esp, 0Ch
.text$mn:00001FF2                 mov     [ebp+var_8], ecx
.text$mn:00001FF5                 mov     eax, [ebp+arg_0]
.text$mn:00001FF8                 push    eax
.text$mn:00001FF9                 call    ??$addressof@VIconList@@@std@@YAPAVIconList@@AAV1@@Z ; std::addressof<IconList>(IconList &)
.text$mn:00001FFE                 add     esp, 4
.text$mn:00002001                 push    eax
.text$mn:00002002                 mov     ecx, [ebp+var_8]
.text$mn:00002005                 call    ?_Inside@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBE_NPBVIconList@@@Z ; std::vector<IconList,std::allocator<IconList>>::_Inside(IconList const *)
.text$mn:0000200A                 movzx   ecx, al
.text$mn:0000200D                 test    ecx, ecx
.text$mn:0000200F                 jz      loc_209F
.text$mn:00002015                 mov     edx, [ebp+arg_0]
.text$mn:00002018                 push    edx
.text$mn:00002019                 call    ??$addressof@VIconList@@@std@@YAPAVIconList@@AAV1@@Z ; std::addressof<IconList>(IconList &)
.text$mn:0000201E                 add     esp, 4
.text$mn:00002021                 mov     ecx, [ebp+var_8]
.text$mn:00002024                 sub     eax, [ecx+4]
.text$mn:00002027                 cdq
.text$mn:00002028                 mov     ecx, 14h
.text$mn:0000202D                 idiv    ecx
.text$mn:0000202F                 mov     [ebp+var_C], eax
.text$mn:00002032                 mov     edx, [ebp+var_8]
.text$mn:00002035                 mov     eax, [ebp+var_8]
.text$mn:00002038                 mov     ecx, [edx+8]
.text$mn:0000203B                 cmp     ecx, [eax+0Ch]
.text$mn:0000203E                 jnz     short loc_204A
.text$mn:00002040                 push    1
.text$mn:00002042                 mov     ecx, [ebp+var_8]
.text$mn:00002045                 call    ?_Reserve@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z ; std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)
.text$mn:0000204A
.text$mn:0000204A loc_204A:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+52j
.text$mn:0000204A                 mov     edx, [ebp+var_8]
.text$mn:0000204D                 mov     eax, [edx+8]
.text$mn:00002050                 push    eax
.text$mn:00002051                 mov     ecx, [ebp+var_8]
.text$mn:00002054                 mov     edx, [ecx+8]
.text$mn:00002057                 push    edx
.text$mn:00002058                 mov     ecx, [ebp+var_8]
.text$mn:0000205B                 call    ?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z ; std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)
.text$mn:00002060                 imul    eax, [ebp+var_C], 14h
.text$mn:00002064                 mov     ecx, [ebp+var_8]
.text$mn:00002067                 add     eax, [ecx+4]
.text$mn:0000206A                 push    eax
.text$mn:0000206B                 call    ??$forward@VIconList@@@std@@YA$$QAVIconList@@AAV1@@Z ; std::forward<IconList>(IconList &)
.text$mn:00002070                 add     esp, 4
.text$mn:00002073                 push    eax             ; int
.text$mn:00002074                 mov     edx, [ebp+var_8]
.text$mn:00002077                 mov     eax, [edx+8]
.text$mn:0000207A                 push    eax             ; void *
.text$mn:0000207B                 lea     ecx, [ebp+var_1]
.text$mn:0000207E                 push    ecx
.text$mn:0000207F                 mov     ecx, [ebp+var_8]
.text$mn:00002082                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)
.text$mn:00002087                 mov     ecx, eax
.text$mn:00002089                 call    ??$construct@VIconList@@V1@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<IconList>>::construct<IconList,IconList>(IconList *,IconList &&)
.text$mn:0000208E                 mov     edx, [ebp+var_8]
.text$mn:00002091                 mov     eax, [edx+8]
.text$mn:00002094                 add     eax, 14h
.text$mn:00002097                 mov     ecx, [ebp+var_8]
.text$mn:0000209A                 mov     [ecx+8], eax
.text$mn:0000209D                 jmp     short loc_2103
.text$mn:0000209F ; ---------------------------------------------------------------------------
.text$mn:0000209F
.text$mn:0000209F loc_209F:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+23j
.text$mn:0000209F                 mov     edx, [ebp+var_8]
.text$mn:000020A2                 mov     eax, [ebp+var_8]
.text$mn:000020A5                 mov     ecx, [edx+8]
.text$mn:000020A8                 cmp     ecx, [eax+0Ch]
.text$mn:000020AB                 jnz     short loc_20B7
.text$mn:000020AD                 push    1
.text$mn:000020AF                 mov     ecx, [ebp+var_8]
.text$mn:000020B2                 call    ?_Reserve@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z ; std::vector<IconList,std::allocator<IconList>>::_Reserve(uint)
.text$mn:000020B7
.text$mn:000020B7 loc_20B7:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+BFj
.text$mn:000020B7                 mov     edx, [ebp+var_8]
.text$mn:000020BA                 mov     eax, [edx+8]
.text$mn:000020BD                 push    eax
.text$mn:000020BE                 mov     ecx, [ebp+var_8]
.text$mn:000020C1                 mov     edx, [ecx+8]
.text$mn:000020C4                 push    edx
.text$mn:000020C5                 mov     ecx, [ebp+var_8]
.text$mn:000020C8                 call    ?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z ; std::vector<IconList,std::allocator<IconList>>::_Orphan_range(IconList *,IconList *)
.text$mn:000020CD                 mov     eax, [ebp+arg_0]
.text$mn:000020D0                 push    eax
.text$mn:000020D1                 call    ??$forward@VIconList@@@std@@YA$$QAVIconList@@AAV1@@Z ; std::forward<IconList>(IconList &)
.text$mn:000020D6                 add     esp, 4
.text$mn:000020D9                 push    eax             ; int
.text$mn:000020DA                 mov     ecx, [ebp+var_8]
.text$mn:000020DD                 mov     edx, [ecx+8]
.text$mn:000020E0                 push    edx             ; void *
.text$mn:000020E1                 lea     eax, [ebp+var_2]
.text$mn:000020E4                 push    eax
.text$mn:000020E5                 mov     ecx, [ebp+var_8]
.text$mn:000020E8                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VIconList@@V?$allocator@VIconList@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<IconList,std::allocator<IconList>>>::_Getal(void)
.text$mn:000020ED                 mov     ecx, eax
.text$mn:000020EF                 call    ??$construct@VIconList@@V1@@?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@std@@QAEXPAVIconList@@$$QAV2@@Z ; std::_Wrap_alloc<std::allocator<IconList>>::construct<IconList,IconList>(IconList *,IconList &&)
.text$mn:000020F4                 mov     ecx, [ebp+var_8]
.text$mn:000020F7                 mov     edx, [ecx+8]
.text$mn:000020FA                 add     edx, 14h
.text$mn:000020FD                 mov     eax, [ebp+var_8]
.text$mn:00002100                 mov     [eax+8], edx
.text$mn:00002103
.text$mn:00002103 loc_2103:                               ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::push_back(IconList &&)+B1j
.text$mn:00002103                 mov     esp, ebp
.text$mn:00002105                 pop     ebp
.text$mn:00002106                 retn    4
.text$mn:00002106 ?push_back@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QAEX$$QAVIconList@@@Z endp
.text$mn:00002106
.text$mn:00002106 ; ---------------------------------------------------------------------------
.text$mn:00002109                 align 4
.text$mn:00002109 _text$mn        ends
.text$mn:00002109
.text$mn:0000210C ; ===========================================================================
.text$mn:0000210C
.text$mn:0000210C ; Segment type: Pure code
.text$mn:0000210C ; Segment permissions: Read/Execute
.text$mn:0000210C _text$mn        segment para public 'CODE' use32
.text$mn:0000210C                 assume cs:_text$mn
.text$mn:0000210C                 ;org 210Ch
.text$mn:0000210C ; COMDAT (pick any)
.text$mn:0000210C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000210C
.text$mn:0000210C ; =============== S U B R O U T I N E =======================================
.text$mn:0000210C
.text$mn:0000210C ; Attributes: bp-based frame
.text$mn:0000210C
.text$mn:0000210C ; public: unsigned int __thiscall std::vector<struct ToolBarButtonUnit, class std::allocator<struct ToolBarButtonUnit>>::size(void)const
.text$mn:0000210C                 public ?size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ
.text$mn:0000210C ?size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ proc near
.text$mn:0000210C                                         ; CODE XREF: ToolBarIcons::reInit(int)+5Bp
.text$mn:0000210C                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+Ap ...
.text$mn:0000210C
.text$mn:0000210C var_4           = dword ptr -4
.text$mn:0000210C
.text$mn:0000210C                 push    ebp
.text$mn:0000210D                 mov     ebp, esp
.text$mn:0000210F                 push    ecx
.text$mn:00002110                 mov     [ebp+var_4], ecx
.text$mn:00002113                 mov     eax, [ebp+var_4]
.text$mn:00002116                 mov     ecx, [ebp+var_4]
.text$mn:00002119                 mov     eax, [eax+8]
.text$mn:0000211C                 sub     eax, [ecx+4]
.text$mn:0000211F                 cdq
.text$mn:00002120                 mov     ecx, 14h
.text$mn:00002125                 idiv    ecx
.text$mn:00002127                 mov     esp, ebp
.text$mn:00002129                 pop     ebp
.text$mn:0000212A                 retn
.text$mn:0000212A ?size@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@QBEIXZ endp
.text$mn:0000212A
.text$mn:0000212A ; ---------------------------------------------------------------------------
.text$mn:0000212B                 align 4
.text$mn:0000212B _text$mn        ends
.text$mn:0000212B
.text$mn:0000212C ; ===========================================================================
.text$mn:0000212C
.text$mn:0000212C ; Segment type: Pure code
.text$mn:0000212C ; Segment permissions: Read/Execute
.text$mn:0000212C _text$mn        segment para public 'CODE' use32
.text$mn:0000212C                 assume cs:_text$mn
.text$mn:0000212C                 ;org 212Ch
.text$mn:0000212C ; COMDAT (pick any)
.text$mn:0000212C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000212C
.text$mn:0000212C ; =============== S U B R O U T I N E =======================================
.text$mn:0000212C
.text$mn:0000212C ; Attributes: bp-based frame
.text$mn:0000212C
.text$mn:0000212C ; public: unsigned int __thiscall std::vector<class IconList, class std::allocator<class IconList>>::size(void)const
.text$mn:0000212C                 public ?size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ
.text$mn:0000212C ?size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ proc near
.text$mn:0000212C                                         ; CODE XREF: std::vector<IconList,std::allocator<IconList>>::operator[](uint)+Ap
.text$mn:0000212C                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+Ap ...
.text$mn:0000212C
.text$mn:0000212C var_4           = dword ptr -4
.text$mn:0000212C
.text$mn:0000212C                 push    ebp
.text$mn:0000212D                 mov     ebp, esp
.text$mn:0000212F                 push    ecx
.text$mn:00002130                 mov     [ebp+var_4], ecx
.text$mn:00002133                 mov     eax, [ebp+var_4]
.text$mn:00002136                 mov     ecx, [ebp+var_4]
.text$mn:00002139                 mov     eax, [eax+8]
.text$mn:0000213C                 sub     eax, [ecx+4]
.text$mn:0000213F                 cdq
.text$mn:00002140                 mov     ecx, 14h
.text$mn:00002145                 idiv    ecx
.text$mn:00002147                 mov     esp, ebp
.text$mn:00002149                 pop     ebp
.text$mn:0000214A                 retn
.text$mn:0000214A ?size@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@QBEIXZ endp
.text$mn:0000214A
.text$mn:0000214A ; ---------------------------------------------------------------------------
.text$mn:0000214B                 align 4
.text$mn:0000214B _text$mn        ends
.text$mn:0000214B
.text$mn:0000214C ; ===========================================================================
.text$mn:0000214C
.text$mn:0000214C ; Segment type: Pure code
.text$mn:0000214C ; Segment permissions: Read/Execute
.text$mn:0000214C _text$mn        segment para public 'CODE' use32
.text$mn:0000214C                 assume cs:_text$mn
.text$mn:0000214C                 ;org 214Ch
.text$mn:0000214C ; COMDAT (pick any)
.text$mn:0000214C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000214C
.text$mn:0000214C ; =============== S U B R O U T I N E =======================================
.text$mn:0000214C
.text$mn:0000214C ; Attributes: bp-based frame
.text$mn:0000214C
.text$mn:0000214C                 public _hypot
.text$mn:0000214C _hypot          proc near
.text$mn:0000214C
.text$mn:0000214C var_10          = qword ptr -10h
.text$mn:0000214C var_8           = qword ptr -8
.text$mn:0000214C arg_0           = qword ptr  8
.text$mn:0000214C arg_8           = qword ptr  10h
.text$mn:0000214C
.text$mn:0000214C                 push    ebp
.text$mn:0000214D                 mov     ebp, esp
.text$mn:0000214F                 sub     esp, 8
.text$mn:00002152                 movsd   xmm0, [ebp+arg_8]
.text$mn:00002157                 movsd   [esp+8+var_8], xmm0
.text$mn:0000215C                 sub     esp, 8
.text$mn:0000215F                 movsd   xmm0, [ebp+arg_0]
.text$mn:00002164                 movsd   [esp+10h+var_10], xmm0
.text$mn:00002169                 call    __hypot
.text$mn:0000216E                 add     esp, 10h
.text$mn:00002171                 pop     ebp
.text$mn:00002172                 retn
.text$mn:00002172 _hypot          endp
.text$mn:00002172
.text$mn:00002172 ; ---------------------------------------------------------------------------
.text$mn:00002173                 align 4
.text$mn:00002173 _text$mn        ends
.text$mn:00002173
.xdata$x:00002174 ; ===========================================================================
.xdata$x:00002174
.xdata$x:00002174 ; Segment type: Pure data
.xdata$x:00002174 ; Segment permissions: Read
.xdata$x:00002174 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002174                 assume cs:_xdata$x
.xdata$x:00002174                 ;org 2174h
.xdata$x:00002174 ; COMDAT (pick associative to section at 15C8)
.xdata$x:00002174 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:00002174                                         ; DATA XREF: .xdata$x:00002184o
.xdata$x:00002175                 db 0FFh
.xdata$x:00002176                 db 0FFh
.xdata$x:00002177                 db 0FFh
.xdata$x:00002178                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:0000217C __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:0000217C                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:0000217D                 db    5
.xdata$x:0000217E                 db  93h ; ô
.xdata$x:0000217F                 db  19h
.xdata$x:00002180                 db    1
.xdata$x:00002181                 db    0
.xdata$x:00002182                 db    0
.xdata$x:00002183                 db    0
.xdata$x:00002184                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:00002188                 align 20h
.xdata$x:00002188 _xdata$x        ends
.xdata$x:00002188
.xdata$x:000021A0 ; ===========================================================================
.xdata$x:000021A0
.xdata$x:000021A0 ; Segment type: Pure data
.xdata$x:000021A0 ; Segment permissions: Read
.xdata$x:000021A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000021A0                 assume cs:_xdata$x
.xdata$x:000021A0                 ;org 21A0h
.xdata$x:000021A0 ; COMDAT (pick associative to section at 10C8)
.xdata$x:000021A0 __unwindtable$??0runtime_error@std@@QAE@PBD@Z db 0FFh
.xdata$x:000021A0                                         ; DATA XREF: .xdata$x:000021B0o
.xdata$x:000021A1                 db 0FFh
.xdata$x:000021A2                 db 0FFh
.xdata$x:000021A3                 db 0FFh
.xdata$x:000021A4                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0
.xdata$x:000021A8 __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z db  22h ; "
.xdata$x:000021A8                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@PBD@Z+11o
.xdata$x:000021A9                 db    5
.xdata$x:000021AA                 db  93h ; ô
.xdata$x:000021AB                 db  19h
.xdata$x:000021AC                 db    1
.xdata$x:000021AD                 db    0
.xdata$x:000021AE                 db    0
.xdata$x:000021AF                 db    0
.xdata$x:000021B0                 dd offset __unwindtable$??0runtime_error@std@@QAE@PBD@Z
.xdata$x:000021B4                 db    0
.xdata$x:000021B5                 db    0
.xdata$x:000021B6                 db    0
.xdata$x:000021B7                 db    0
.xdata$x:000021B8                 db    0
.xdata$x:000021B9                 db    0
.xdata$x:000021BA                 db    0
.xdata$x:000021BB                 db    0
.xdata$x:000021BC                 db    0
.xdata$x:000021BD                 db    0
.xdata$x:000021BE                 db    0
.xdata$x:000021BF                 db    0
.xdata$x:000021C0                 db    0
.xdata$x:000021C1                 db    0
.xdata$x:000021C2                 db    0
.xdata$x:000021C3                 db    0
.xdata$x:000021C4                 db    0
.xdata$x:000021C5                 db    0
.xdata$x:000021C6                 db    0
.xdata$x:000021C7                 db    0
.xdata$x:000021C8                 db    0
.xdata$x:000021C9                 db    0
.xdata$x:000021CA                 db    0
.xdata$x:000021CB                 db    0
.xdata$x:000021CB _xdata$x        ends
.xdata$x:000021CB
.xdata$x:000021CC ; ===========================================================================
.xdata$x:000021CC
.xdata$x:000021CC ; Segment type: Pure data
.xdata$x:000021CC ; Segment permissions: Read
.xdata$x:000021CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000021CC                 assume cs:_xdata$x
.xdata$x:000021CC                 ;org 21CCh
.xdata$x:000021CC ; COMDAT (pick associative to section at 114C)
.xdata$x:000021CC __unwindtable$??1runtime_error@std@@UAE@XZ db 0FFh
.xdata$x:000021CC                                         ; DATA XREF: .xdata$x:000021DCo
.xdata$x:000021CD                 db 0FFh
.xdata$x:000021CE                 db 0FFh
.xdata$x:000021CF                 db 0FFh
.xdata$x:000021D0                 dd offset __unwindfunclet$??1runtime_error@std@@UAE@XZ$0
.xdata$x:000021D4 __ehfuncinfo$??1runtime_error@std@@UAE@XZ db  22h ; "
.xdata$x:000021D4                                         ; DATA XREF: __ehhandler$??1runtime_error@std@@UAE@XZ+11o
.xdata$x:000021D5                 db    5
.xdata$x:000021D6                 db  93h ; ô
.xdata$x:000021D7                 db  19h
.xdata$x:000021D8                 db    1
.xdata$x:000021D9                 db    0
.xdata$x:000021DA                 db    0
.xdata$x:000021DB                 db    0
.xdata$x:000021DC                 dd offset __unwindtable$??1runtime_error@std@@UAE@XZ
.xdata$x:000021E0                 db    0
.xdata$x:000021E1                 db    0
.xdata$x:000021E2                 db    0
.xdata$x:000021E3                 db    0
.xdata$x:000021E4                 db    0
.xdata$x:000021E5                 db    0
.xdata$x:000021E6                 db    0
.xdata$x:000021E7                 db    0
.xdata$x:000021E8                 db    0
.xdata$x:000021E9                 db    0
.xdata$x:000021EA                 db    0
.xdata$x:000021EB                 db    0
.xdata$x:000021EC                 db    0
.xdata$x:000021ED                 db    0
.xdata$x:000021EE                 db    0
.xdata$x:000021EF                 db    0
.xdata$x:000021F0                 db    0
.xdata$x:000021F1                 db    0
.xdata$x:000021F2                 db    0
.xdata$x:000021F3                 db    0
.xdata$x:000021F4                 db    0
.xdata$x:000021F5                 db    0
.xdata$x:000021F6                 db    0
.xdata$x:000021F7                 db    0
.xdata$x:000021F7 _xdata$x        ends
.xdata$x:000021F7
.xdata$x:000021F8 ; ===========================================================================
.xdata$x:000021F8
.xdata$x:000021F8 ; Segment type: Pure data
.xdata$x:000021F8 ; Segment permissions: Read
.xdata$x:000021F8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000021F8                 assume cs:_xdata$x
.xdata$x:000021F8                 ;org 21F8h
.xdata$x:000021F8 ; COMDAT (pick associative to section at 1044)
.xdata$x:000021F8 __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:000021F8                                         ; DATA XREF: .xdata$x:00002208o
.xdata$x:000021F9                 db 0FFh
.xdata$x:000021FA                 db 0FFh
.xdata$x:000021FB                 db 0FFh
.xdata$x:000021FC                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
.xdata$x:00002200 __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00002200                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z+11o
.xdata$x:00002201                 db    5
.xdata$x:00002202                 db  93h ; ô
.xdata$x:00002203                 db  19h
.xdata$x:00002204                 db    1
.xdata$x:00002205                 db    0
.xdata$x:00002206                 db    0
.xdata$x:00002207                 db    0
.xdata$x:00002208                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
.xdata$x:0000220C                 db    0
.xdata$x:0000220D                 db    0
.xdata$x:0000220E                 db    0
.xdata$x:0000220F                 db    0
.xdata$x:00002210                 db    0
.xdata$x:00002211                 db    0
.xdata$x:00002212                 db    0
.xdata$x:00002213                 db    0
.xdata$x:00002214                 db    0
.xdata$x:00002215                 db    0
.xdata$x:00002216                 db    0
.xdata$x:00002217                 db    0
.xdata$x:00002218                 db    0
.xdata$x:00002219                 db    0
.xdata$x:0000221A                 db    0
.xdata$x:0000221B                 db    0
.xdata$x:0000221C                 db    0
.xdata$x:0000221D                 db    0
.xdata$x:0000221E                 db    0
.xdata$x:0000221F                 db    0
.xdata$x:00002220                 db    0
.xdata$x:00002221                 db    0
.xdata$x:00002222                 db    0
.xdata$x:00002223                 db    0
.xdata$x:00002223 _xdata$x        ends
.xdata$x:00002223
.xdata$x:00002224 ; ===========================================================================
.xdata$x:00002224
.xdata$x:00002224 ; Segment type: Pure data
.xdata$x:00002224 ; Segment permissions: Read
.xdata$x:00002224 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002224                 assume cs:_xdata$x
.xdata$x:00002224                 ;org 2224h
.xdata$x:00002224 ; COMDAT (pick associative to section at 199C)
.xdata$x:00002224 __catchsym$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:00002224                                         ; DATA XREF: .xdata$x:00002254o
.xdata$x:00002225                 db    0
.xdata$x:00002226                 db    0
.xdata$x:00002227                 db    0
.xdata$x:00002228                 db    0
.xdata$x:00002229                 db    0
.xdata$x:0000222A                 db    0
.xdata$x:0000222B                 db    0
.xdata$x:0000222C                 db    0
.xdata$x:0000222D                 db    0
.xdata$x:0000222E                 db    0
.xdata$x:0000222F                 db    0
.xdata$x:00002230                 dd offset __catch$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z$0
.xdata$x:00002234 __unwindtable$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:00002234                                         ; DATA XREF: .xdata$x:00002260o
.xdata$x:00002235                 db 0FFh
.xdata$x:00002236                 db 0FFh
.xdata$x:00002237                 db 0FFh
.xdata$x:00002238                 db    0
.xdata$x:00002239                 db    0
.xdata$x:0000223A                 db    0
.xdata$x:0000223B                 db    0
.xdata$x:0000223C                 db 0FFh
.xdata$x:0000223D                 db 0FFh
.xdata$x:0000223E                 db 0FFh
.xdata$x:0000223F                 db 0FFh
.xdata$x:00002240                 db    0
.xdata$x:00002241                 db    0
.xdata$x:00002242                 db    0
.xdata$x:00002243                 db    0
.xdata$x:00002244 __tryblocktable$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z db    0
.xdata$x:00002244                                         ; DATA XREF: .xdata$x:00002268o
.xdata$x:00002245                 db    0
.xdata$x:00002246                 db    0
.xdata$x:00002247                 db    0
.xdata$x:00002248                 db    0
.xdata$x:00002249                 db    0
.xdata$x:0000224A                 db    0
.xdata$x:0000224B                 db    0
.xdata$x:0000224C                 db    1
.xdata$x:0000224D                 db    0
.xdata$x:0000224E                 db    0
.xdata$x:0000224F                 db    0
.xdata$x:00002250                 db    1
.xdata$x:00002251                 db    0
.xdata$x:00002252                 db    0
.xdata$x:00002253                 db    0
.xdata$x:00002254                 dd offset __catchsym$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z$2
.xdata$x:00002258 __ehfuncinfo$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:00002258                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z+11o
.xdata$x:00002259                 db    5
.xdata$x:0000225A                 db  93h ; ô
.xdata$x:0000225B                 db  19h
.xdata$x:0000225C                 db    2
.xdata$x:0000225D                 db    0
.xdata$x:0000225E                 db    0
.xdata$x:0000225F                 db    0
.xdata$x:00002260                 dd offset __unwindtable$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.xdata$x:00002264                 db    1
.xdata$x:00002265                 db    0
.xdata$x:00002266                 db    0
.xdata$x:00002267                 db    0
.xdata$x:00002268                 dd offset __tryblocktable$?_Reallocate@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IAEXI@Z
.xdata$x:0000226C                 db    0
.xdata$x:0000226D                 db    0
.xdata$x:0000226E                 db    0
.xdata$x:0000226F                 db    0
.xdata$x:00002270                 db    0
.xdata$x:00002271                 db    0
.xdata$x:00002272                 db    0
.xdata$x:00002273                 db    0
.xdata$x:00002274                 db    0
.xdata$x:00002275                 db    0
.xdata$x:00002276                 db    0
.xdata$x:00002277                 db    0
.xdata$x:00002278                 db    0
.xdata$x:00002279                 db    0
.xdata$x:0000227A                 db    0
.xdata$x:0000227B                 db    0
.xdata$x:0000227B _xdata$x        ends
.xdata$x:0000227B
.xdata$x:0000227C ; ===========================================================================
.xdata$x:0000227C
.xdata$x:0000227C ; Segment type: Pure data
.xdata$x:0000227C ; Segment permissions: Read
.xdata$x:0000227C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000227C                 assume cs:_xdata$x
.xdata$x:0000227C                 ;org 227Ch
.xdata$x:0000227C ; COMDAT (pick associative to section at 1764)
.xdata$x:0000227C __unwindtable$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z db 0FFh
.xdata$x:0000227C                                         ; DATA XREF: .xdata$x:0000228Co
.xdata$x:0000227D                 db 0FFh
.xdata$x:0000227E                 db 0FFh
.xdata$x:0000227F                 db 0FFh
.xdata$x:00002280                 dd offset __unwindfunclet$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z$0
.xdata$x:00002284 __ehfuncinfo$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z db  22h ; "
.xdata$x:00002284                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z+11o
.xdata$x:00002285                 db    5
.xdata$x:00002286                 db  93h ; ô
.xdata$x:00002287                 db  19h
.xdata$x:00002288                 db    1
.xdata$x:00002289                 db    0
.xdata$x:0000228A                 db    0
.xdata$x:0000228B                 db    0
.xdata$x:0000228C                 dd offset __unwindtable$?_Orphan_range@?$vector@VIconList@@V?$allocator@VIconList@@@std@@@std@@IBEXPAVIconList@@0@Z
.xdata$x:00002290                 db    0
.xdata$x:00002291                 db    0
.xdata$x:00002292                 db    0
.xdata$x:00002293                 db    0
.xdata$x:00002294                 db    0
.xdata$x:00002295                 db    0
.xdata$x:00002296                 db    0
.xdata$x:00002297                 db    0
.xdata$x:00002298                 db    0
.xdata$x:00002299                 db    0
.xdata$x:0000229A                 db    0
.xdata$x:0000229B                 db    0
.xdata$x:0000229C                 db    0
.xdata$x:0000229D                 db    0
.xdata$x:0000229E                 db    0
.xdata$x:0000229F                 db    0
.xdata$x:000022A0                 db    0
.xdata$x:000022A1                 db    0
.xdata$x:000022A2                 db    0
.xdata$x:000022A3                 db    0
.xdata$x:000022A4                 db    0
.xdata$x:000022A5                 db    0
.xdata$x:000022A6                 db    0
.xdata$x:000022A7                 db    0
.xdata$x:000022A7 _xdata$x        ends
.xdata$x:000022A7
.xdata$x:000022A8 ; ===========================================================================
.xdata$x:000022A8
.xdata$x:000022A8 ; Segment type: Pure data
.xdata$x:000022A8 ; Segment permissions: Read
.xdata$x:000022A8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000022A8                 assume cs:_xdata$x
.xdata$x:000022A8                 ;org 22A8h
.xdata$x:000022A8 ; COMDAT (pick associative to section at 1840)
.xdata$x:000022A8 __catchsym$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z$2 db    0
.xdata$x:000022A8                                         ; DATA XREF: .xdata$x:000022D8o
.xdata$x:000022A9                 db    0
.xdata$x:000022AA                 db    0
.xdata$x:000022AB                 db    0
.xdata$x:000022AC                 db    0
.xdata$x:000022AD                 db    0
.xdata$x:000022AE                 db    0
.xdata$x:000022AF                 db    0
.xdata$x:000022B0                 db    0
.xdata$x:000022B1                 db    0
.xdata$x:000022B2                 db    0
.xdata$x:000022B3                 db    0
.xdata$x:000022B4                 dd offset __catch$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z$0
.xdata$x:000022B8 __unwindtable$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z db 0FFh
.xdata$x:000022B8                                         ; DATA XREF: .xdata$x:000022E4o
.xdata$x:000022B9                 db 0FFh
.xdata$x:000022BA                 db 0FFh
.xdata$x:000022BB                 db 0FFh
.xdata$x:000022BC                 db    0
.xdata$x:000022BD                 db    0
.xdata$x:000022BE                 db    0
.xdata$x:000022BF                 db    0
.xdata$x:000022C0                 db 0FFh
.xdata$x:000022C1                 db 0FFh
.xdata$x:000022C2                 db 0FFh
.xdata$x:000022C3                 db 0FFh
.xdata$x:000022C4                 db    0
.xdata$x:000022C5                 db    0
.xdata$x:000022C6                 db    0
.xdata$x:000022C7                 db    0
.xdata$x:000022C8 __tryblocktable$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z db    0
.xdata$x:000022C8                                         ; DATA XREF: .xdata$x:000022ECo
.xdata$x:000022C9                 db    0
.xdata$x:000022CA                 db    0
.xdata$x:000022CB                 db    0
.xdata$x:000022CC                 db    0
.xdata$x:000022CD                 db    0
.xdata$x:000022CE                 db    0
.xdata$x:000022CF                 db    0
.xdata$x:000022D0                 db    1
.xdata$x:000022D1                 db    0
.xdata$x:000022D2                 db    0
.xdata$x:000022D3                 db    0
.xdata$x:000022D4                 db    1
.xdata$x:000022D5                 db    0
.xdata$x:000022D6                 db    0
.xdata$x:000022D7                 db    0
.xdata$x:000022D8                 dd offset __catchsym$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z$2
.xdata$x:000022DC __ehfuncinfo$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z db  22h ; "
.xdata$x:000022DC                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z+11o
.xdata$x:000022DD                 db    5
.xdata$x:000022DE                 db  93h ; ô
.xdata$x:000022DF                 db  19h
.xdata$x:000022E0                 db    2
.xdata$x:000022E1                 db    0
.xdata$x:000022E2                 db    0
.xdata$x:000022E3                 db    0
.xdata$x:000022E4                 dd offset __unwindtable$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.xdata$x:000022E8                 db    1
.xdata$x:000022E9                 db    0
.xdata$x:000022EA                 db    0
.xdata$x:000022EB                 db    0
.xdata$x:000022EC                 dd offset __tryblocktable$?_Reallocate@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IAEXI@Z
.xdata$x:000022F0                 align 20h
.xdata$x:000022F0 _xdata$x        ends
.xdata$x:000022F0
.xdata$x:00002300 ; ===========================================================================
.xdata$x:00002300
.xdata$x:00002300 ; Segment type: Pure data
.xdata$x:00002300 ; Segment permissions: Read
.xdata$x:00002300 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002300                 assume cs:_xdata$x
.xdata$x:00002300                 ;org 2300h
.xdata$x:00002300 ; COMDAT (pick associative to section at 1688)
.xdata$x:00002300 __unwindtable$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z db 0FFh
.xdata$x:00002300                                         ; DATA XREF: .xdata$x:00002310o
.xdata$x:00002301                 db 0FFh
.xdata$x:00002302                 db 0FFh
.xdata$x:00002303                 db 0FFh
.xdata$x:00002304                 dd offset __unwindfunclet$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z$0
.xdata$x:00002308 __ehfuncinfo$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z db  22h ; "
.xdata$x:00002308                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z+11o
.xdata$x:00002309                 db    5
.xdata$x:0000230A                 db  93h ; ô
.xdata$x:0000230B                 db  19h
.xdata$x:0000230C                 db    1
.xdata$x:0000230D                 db    0
.xdata$x:0000230E                 db    0
.xdata$x:0000230F                 db    0
.xdata$x:00002310                 dd offset __unwindtable$?_Orphan_range@?$vector@UToolBarButtonUnit@@V?$allocator@UToolBarButtonUnit@@@std@@@std@@IBEXPAUToolBarButtonUnit@@0@Z
.xdata$x:00002314                 db    0
.xdata$x:00002315                 db    0
.xdata$x:00002316                 db    0
.xdata$x:00002317                 db    0
.xdata$x:00002318                 db    0
.xdata$x:00002319                 db    0
.xdata$x:0000231A                 db    0
.xdata$x:0000231B                 db    0
.xdata$x:0000231C                 db    0
.xdata$x:0000231D                 db    0
.xdata$x:0000231E                 db    0
.xdata$x:0000231F                 db    0
.xdata$x:00002320                 db    0
.xdata$x:00002321                 db    0
.xdata$x:00002322                 db    0
.xdata$x:00002323                 db    0
.xdata$x:00002324                 db    0
.xdata$x:00002325                 db    0
.xdata$x:00002326                 db    0
.xdata$x:00002327                 db    0
.xdata$x:00002328                 db    0
.xdata$x:00002329                 db    0
.xdata$x:0000232A                 db    0
.xdata$x:0000232B                 db    0
.xdata$x:0000232B _xdata$x        ends
.xdata$x:0000232B
.xdata$x:0000232C ; ===========================================================================
.xdata$x:0000232C
.xdata$x:0000232C ; Segment type: Pure data
.xdata$x:0000232C ; Segment permissions: Read
.xdata$x:0000232C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000232C                 assume cs:_xdata$x
.xdata$x:0000232C                 ;org 232Ch
.xdata$x:0000232C ; COMDAT (pick associative to section at E48)
.xdata$x:0000232C __unwindtable$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z db 0FFh
.xdata$x:0000232C                                         ; DATA XREF: .xdata$x:0000233Co
.xdata$x:0000232D                 db 0FFh
.xdata$x:0000232E                 db 0FFh
.xdata$x:0000232F                 db 0FFh
.xdata$x:00002330                 dd offset __unwindfunclet$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z$0
.xdata$x:00002334 __ehfuncinfo$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z db  22h ; "
.xdata$x:00002334                                         ; DATA XREF: __ehhandler$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z+11o
.xdata$x:00002335                 db    5
.xdata$x:00002336                 db  93h ; ô
.xdata$x:00002337                 db  19h
.xdata$x:00002338                 db    1
.xdata$x:00002339                 db    0
.xdata$x:0000233A                 db    0
.xdata$x:0000233B                 db    0
.xdata$x:0000233C                 dd offset __unwindtable$??$construct@VIconList@@V1@@?$allocator@VIconList@@@std@@QAEXPAVIconList@@$$QAV2@@Z
.xdata$x:00002340                 db    0
.xdata$x:00002341                 db    0
.xdata$x:00002342                 db    0
.xdata$x:00002343                 db    0
.xdata$x:00002344                 db    0
.xdata$x:00002345                 db    0
.xdata$x:00002346                 db    0
.xdata$x:00002347                 db    0
.xdata$x:00002348                 db    0
.xdata$x:00002349                 db    0
.xdata$x:0000234A                 db    0
.xdata$x:0000234B                 db    0
.xdata$x:0000234C                 db    0
.xdata$x:0000234D                 db    0
.xdata$x:0000234E                 db    0
.xdata$x:0000234F                 db    0
.xdata$x:00002350                 db    0
.xdata$x:00002351                 db    0
.xdata$x:00002352                 db    0
.xdata$x:00002353                 db    0
.xdata$x:00002354                 db    0
.xdata$x:00002355                 db    0
.xdata$x:00002356                 db    0
.xdata$x:00002357                 db    0
.xdata$x:00002357 _xdata$x        ends
.xdata$x:00002357
.xdata$x:00002358 ; ===========================================================================
.xdata$x:00002358
.xdata$x:00002358 ; Segment type: Pure data
.xdata$x:00002358 ; Segment permissions: Read
.xdata$x:00002358 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002358                 assume cs:_xdata$x
.xdata$x:00002358                 ;org 2358h
.xdata$x:00002358 ; COMDAT (pick associative to section at BCC)
.xdata$x:00002358 __unwindtable$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z db 0FFh
.xdata$x:00002358                                         ; DATA XREF: .xdata$x:00002368o
.xdata$x:00002359                 db 0FFh
.xdata$x:0000235A                 db 0FFh
.xdata$x:0000235B                 db 0FFh
.xdata$x:0000235C                 dd offset __unwindfunclet$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z$0
.xdata$x:00002360 __ehfuncinfo$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z db  22h ; "
.xdata$x:00002360                                         ; DATA XREF: __ehhandler$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z+11o
.xdata$x:00002361                 db    5
.xdata$x:00002362                 db  93h ; ô
.xdata$x:00002363                 db  19h
.xdata$x:00002364                 db    1
.xdata$x:00002365                 db    0
.xdata$x:00002366                 db    0
.xdata$x:00002367                 db    0
.xdata$x:00002368                 dd offset __unwindtable$??$construct@UToolBarButtonUnit@@AAU1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@AAU2@@Z
.xdata$x:0000236C                 db    0
.xdata$x:0000236D                 db    0
.xdata$x:0000236E                 db    0
.xdata$x:0000236F                 db    0
.xdata$x:00002370                 db    0
.xdata$x:00002371                 db    0
.xdata$x:00002372                 db    0
.xdata$x:00002373                 db    0
.xdata$x:00002374                 db    0
.xdata$x:00002375                 db    0
.xdata$x:00002376                 db    0
.xdata$x:00002377                 db    0
.xdata$x:00002378                 db    0
.xdata$x:00002379                 db    0
.xdata$x:0000237A                 db    0
.xdata$x:0000237B                 db    0
.xdata$x:0000237C                 db    0
.xdata$x:0000237D                 db    0
.xdata$x:0000237E                 db    0
.xdata$x:0000237F                 db    0
.xdata$x:00002380                 db    0
.xdata$x:00002381                 db    0
.xdata$x:00002382                 db    0
.xdata$x:00002383                 db    0
.xdata$x:00002383 _xdata$x        ends
.xdata$x:00002383
.xdata$x:00002384 ; ===========================================================================
.xdata$x:00002384
.xdata$x:00002384 ; Segment type: Pure data
.xdata$x:00002384 ; Segment permissions: Read
.xdata$x:00002384 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002384                 assume cs:_xdata$x
.xdata$x:00002384                 ;org 2384h
.xdata$x:00002384 ; COMDAT (pick associative to section at 9E8)
.xdata$x:00002384 __catchsym$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:00002384                                         ; DATA XREF: .xdata$x:000023B4o
.xdata$x:00002385                 db    0
.xdata$x:00002386                 db    0
.xdata$x:00002387                 db    0
.xdata$x:00002388                 db    0
.xdata$x:00002389                 db    0
.xdata$x:0000238A                 db    0
.xdata$x:0000238B                 db    0
.xdata$x:0000238C                 db    0
.xdata$x:0000238D                 db    0
.xdata$x:0000238E                 db    0
.xdata$x:0000238F                 db    0
.xdata$x:00002390                 dd offset __catch$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:00002394 __unwindtable$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:00002394                                         ; DATA XREF: .xdata$x:000023C0o
.xdata$x:00002395                 db 0FFh
.xdata$x:00002396                 db 0FFh
.xdata$x:00002397                 db 0FFh
.xdata$x:00002398                 db    0
.xdata$x:00002399                 db    0
.xdata$x:0000239A                 db    0
.xdata$x:0000239B                 db    0
.xdata$x:0000239C                 db 0FFh
.xdata$x:0000239D                 db 0FFh
.xdata$x:0000239E                 db 0FFh
.xdata$x:0000239F                 db 0FFh
.xdata$x:000023A0                 db    0
.xdata$x:000023A1                 db    0
.xdata$x:000023A2                 db    0
.xdata$x:000023A3                 db    0
.xdata$x:000023A4 __tryblocktable$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:000023A4                                         ; DATA XREF: .xdata$x:000023C8o
.xdata$x:000023A5                 db    0
.xdata$x:000023A6                 db    0
.xdata$x:000023A7                 db    0
.xdata$x:000023A8                 db    0
.xdata$x:000023A9                 db    0
.xdata$x:000023AA                 db    0
.xdata$x:000023AB                 db    0
.xdata$x:000023AC                 db    1
.xdata$x:000023AD                 db    0
.xdata$x:000023AE                 db    0
.xdata$x:000023AF                 db    0
.xdata$x:000023B0                 db    1
.xdata$x:000023B1                 db    0
.xdata$x:000023B2                 db    0
.xdata$x:000023B3                 db    0
.xdata$x:000023B4                 dd offset __catchsym$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:000023B8 __ehfuncinfo$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:000023B8                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:000023B9                 db    5
.xdata$x:000023BA                 db  93h ; ô
.xdata$x:000023BB                 db  19h
.xdata$x:000023BC                 db    2
.xdata$x:000023BD                 db    0
.xdata$x:000023BE                 db    0
.xdata$x:000023BF                 db    0
.xdata$x:000023C0                 dd offset __unwindtable$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:000023C4                 db    1
.xdata$x:000023C5                 db    0
.xdata$x:000023C6                 db    0
.xdata$x:000023C7                 db    0
.xdata$x:000023C8                 dd offset __tryblocktable$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:000023CC                 db    0
.xdata$x:000023CD                 db    0
.xdata$x:000023CE                 db    0
.xdata$x:000023CF                 db    0
.xdata$x:000023D0                 db    0
.xdata$x:000023D1                 db    0
.xdata$x:000023D2                 db    0
.xdata$x:000023D3                 db    0
.xdata$x:000023D4                 db    0
.xdata$x:000023D5                 db    0
.xdata$x:000023D6                 db    0
.xdata$x:000023D7                 db    0
.xdata$x:000023D8                 db    0
.xdata$x:000023D9                 db    0
.xdata$x:000023DA                 db    0
.xdata$x:000023DB                 db    0
.xdata$x:000023DB _xdata$x        ends
.xdata$x:000023DB
.xdata$x:000023DC ; ===========================================================================
.xdata$x:000023DC
.xdata$x:000023DC ; Segment type: Pure data
.xdata$x:000023DC ; Segment permissions: Read
.xdata$x:000023DC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000023DC                 assume cs:_xdata$x
.xdata$x:000023DC                 ;org 23DCh
.xdata$x:000023DC ; COMDAT (pick associative to section at 898)
.xdata$x:000023DC __catchsym$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:000023DC                                         ; DATA XREF: .xdata$x:0000240Co
.xdata$x:000023DD                 db    0
.xdata$x:000023DE                 db    0
.xdata$x:000023DF                 db    0
.xdata$x:000023E0                 db    0
.xdata$x:000023E1                 db    0
.xdata$x:000023E2                 db    0
.xdata$x:000023E3                 db    0
.xdata$x:000023E4                 db    0
.xdata$x:000023E5                 db    0
.xdata$x:000023E6                 db    0
.xdata$x:000023E7                 db    0
.xdata$x:000023E8                 dd offset __catch$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:000023EC __unwindtable$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:000023EC                                         ; DATA XREF: .xdata$x:00002418o
.xdata$x:000023ED                 db 0FFh
.xdata$x:000023EE                 db 0FFh
.xdata$x:000023EF                 db 0FFh
.xdata$x:000023F0                 db    0
.xdata$x:000023F1                 db    0
.xdata$x:000023F2                 db    0
.xdata$x:000023F3                 db    0
.xdata$x:000023F4                 db 0FFh
.xdata$x:000023F5                 db 0FFh
.xdata$x:000023F6                 db 0FFh
.xdata$x:000023F7                 db 0FFh
.xdata$x:000023F8                 db    0
.xdata$x:000023F9                 db    0
.xdata$x:000023FA                 db    0
.xdata$x:000023FB                 db    0
.xdata$x:000023FC __tryblocktable$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:000023FC                                         ; DATA XREF: .xdata$x:00002420o
.xdata$x:000023FD                 db    0
.xdata$x:000023FE                 db    0
.xdata$x:000023FF                 db    0
.xdata$x:00002400                 db    0
.xdata$x:00002401                 db    0
.xdata$x:00002402                 db    0
.xdata$x:00002403                 db    0
.xdata$x:00002404                 db    1
.xdata$x:00002405                 db    0
.xdata$x:00002406                 db    0
.xdata$x:00002407                 db    0
.xdata$x:00002408                 db    1
.xdata$x:00002409                 db    0
.xdata$x:0000240A                 db    0
.xdata$x:0000240B                 db    0
.xdata$x:0000240C                 dd offset __catchsym$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:00002410 __ehfuncinfo$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:00002410                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:00002411                 db    5
.xdata$x:00002412                 db  93h ; ô
.xdata$x:00002413                 db  19h
.xdata$x:00002414                 db    2
.xdata$x:00002415                 db    0
.xdata$x:00002416                 db    0
.xdata$x:00002417                 db    0
.xdata$x:00002418                 dd offset __unwindtable$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000241C                 db    1
.xdata$x:0000241D                 db    0
.xdata$x:0000241E                 db    0
.xdata$x:0000241F                 db    0
.xdata$x:00002420                 dd offset __tryblocktable$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:00002424                 db    0
.xdata$x:00002425                 db    0
.xdata$x:00002426                 db    0
.xdata$x:00002427                 db    0
.xdata$x:00002428                 db    0
.xdata$x:00002429                 db    0
.xdata$x:0000242A                 db    0
.xdata$x:0000242B                 db    0
.xdata$x:0000242C                 db    0
.xdata$x:0000242D                 db    0
.xdata$x:0000242E                 db    0
.xdata$x:0000242F                 db    0
.xdata$x:00002430                 db    0
.xdata$x:00002431                 db    0
.xdata$x:00002432                 db    0
.xdata$x:00002433                 db    0
.xdata$x:00002433 _xdata$x        ends
.xdata$x:00002433
.xdata$x:00002434 ; ===========================================================================
.xdata$x:00002434
.xdata$x:00002434 ; Segment type: Pure data
.xdata$x:00002434 ; Segment permissions: Read
.xdata$x:00002434 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002434                 assume cs:_xdata$x
.xdata$x:00002434                 ;org 2434h
.xdata$x:00002434 ; COMDAT (pick associative to section at D30)
.xdata$x:00002434 __unwindtable$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z db 0FFh
.xdata$x:00002434                                         ; DATA XREF: .xdata$x:00002444o
.xdata$x:00002435                 db 0FFh
.xdata$x:00002436                 db 0FFh
.xdata$x:00002437                 db 0FFh
.xdata$x:00002438                 dd offset __unwindfunclet$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z$0
.xdata$x:0000243C __ehfuncinfo$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z db  22h ; "
.xdata$x:0000243C                                         ; DATA XREF: __ehhandler$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z+11o
.xdata$x:0000243D                 db    5
.xdata$x:0000243E                 db  93h ; ô
.xdata$x:0000243F                 db  19h
.xdata$x:00002440                 db    1
.xdata$x:00002441                 db    0
.xdata$x:00002442                 db    0
.xdata$x:00002443                 db    0
.xdata$x:00002444                 dd offset __unwindtable$??$construct@UToolBarButtonUnit@@U1@@?$allocator@UToolBarButtonUnit@@@std@@QAEXPAUToolBarButtonUnit@@$$QAU2@@Z
.xdata$x:00002448                 align 20h
.xdata$x:00002448 _xdata$x        ends
.xdata$x:00002448
.bss:00002460 ; ===========================================================================
.bss:00002460
.bss:00002460 ; Segment type: Uninitialized
.bss:00002460 ; Segment permissions: Read/Write
.bss:00002460 _bss            segment byte public 'BSS' use32
.bss:00002460                 assume cs:_bss
.bss:00002460                 ;org 2460h
.bss:00002460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00002460 _allocator_arg  db    ? ;
.bss:00002461 _piecewise_construct db    ? ;
.bss:00002462                 align 4
.bss:00002462 _bss            ends
.bss:00002462
.rdata:00002464 ; ===========================================================================
.rdata:00002464
.rdata:00002464 ; Segment type: Pure data
.rdata:00002464 ; Segment permissions: Read
.rdata:00002464 _rdata          segment dword public 'DATA' use32
.rdata:00002464                 assume cs:_rdata
.rdata:00002464                 ;org 2464h
.rdata:00002464 ; COMDAT (pick largest)
.rdata:00002464                 dd offset ??_R4runtime_error@std@@6B@ ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata:00002468                 public ??_7runtime_error@std@@6B@
.rdata:00002468 ; const std::runtime_error::`vftable'
.rdata:00002468 ??_7runtime_error@std@@6B@ dd offset ??_Eruntime_error@std@@UAEPAXI@Z
.rdata:00002468                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+3Co
.rdata:00002468                                         ; std::runtime_error::runtime_error(char const *)+3Co
.rdata:00002468                                         ; std::runtime_error::`vector deleting destructor'(uint)
.rdata:0000246C                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000246C _rdata          ends
.rdata:0000246C
.xdata$x:00002470 ; ===========================================================================
.xdata$x:00002470
.xdata$x:00002470 ; Segment type: Pure data
.xdata$x:00002470 ; Segment permissions: Read
.xdata$x:00002470 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002470                 assume cs:_xdata$x
.xdata$x:00002470                 ;org 2470h
.xdata$x:00002470 ; COMDAT (pick any)
.xdata$x:00002470                 public __TI2?AVruntime_error@std@@
.xdata$x:00002470 __TI2?AVruntime_error@std@@ db    0     ; DATA XREF: IconList::create(HINSTANCE__ *,int)+4Fo
.xdata$x:00002470                                         ; IconList::addIcon(int)+31o
.xdata$x:00002471                 db    0
.xdata$x:00002472                 db    0
.xdata$x:00002473                 db    0
.xdata$x:00002474                 dd offset ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.xdata$x:00002478                 db    0
.xdata$x:00002479                 db    0
.xdata$x:0000247A                 db    0
.xdata$x:0000247B                 db    0
.xdata$x:0000247C                 dd offset __CTA2?AVruntime_error@std@@
.xdata$x:0000247C _xdata$x        ends
.xdata$x:0000247C
.xdata$x:00002480 ; ===========================================================================
.xdata$x:00002480
.xdata$x:00002480 ; Segment type: Pure data
.xdata$x:00002480 ; Segment permissions: Read
.xdata$x:00002480 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00002480                 assume cs:_xdata$x
.xdata$x:00002480                 ;org 2480h
.xdata$x:00002480 ; COMDAT (pick any)
.xdata$x:00002480                 public __CTA2?AVruntime_error@std@@
.xdata$x:00002480 __CTA2?AVruntime_error@std@@ db    2    ; DATA XREF: .xdata$x:0000247Co
.xdata$x:00002481                 db    0
.xdata$x:00002482                 db    0
.xdata$x:00002483                 db    0
.xdata$x:00002484                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:00002488                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:00002488 _xdata$x        ends
.xdata$x:00002488
.data$r:0000248C ; ===========================================================================
.data$r:0000248C
.data$r:0000248C ; Segment type: Pure data
.data$r:0000248C ; Segment permissions: Read/Write
.data$r:0000248C _data$r         segment dword public 'DATA' use32
.data$r:0000248C                 assume cs:_data$r
.data$r:0000248C                 ;org 248Ch
.data$r:0000248C ; COMDAT (pick any)
.data$r:0000248C                 public ??_R0?AVruntime_error@std@@@8
.data$r:0000248C ; class std::runtime_error `RTTI Type Descriptor'
.data$r:0000248C ??_R0?AVruntime_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000248C                                         ; DATA XREF: .xdata$x:000024B0o
.data$r:0000248C                                         ; .rdata$r:00002914o ...
.data$r:0000248C                                         ; const type_info::`vftable'
.data$r:00002490                 db    0
.data$r:00002491                 db    0
.data$r:00002492                 db    0
.data$r:00002493                 db    0
.data$r:00002494                 db  2Eh ; .
.data$r:00002495                 db  3Fh ; ?
.data$r:00002496                 db  41h ; A
.data$r:00002497                 db  56h ; V
.data$r:00002498                 db  72h ; r
.data$r:00002499                 db  75h ; u
.data$r:0000249A                 db  6Eh ; n
.data$r:0000249B                 db  74h ; t
.data$r:0000249C                 db  69h ; i
.data$r:0000249D                 db  6Dh ; m
.data$r:0000249E                 db  65h ; e
.data$r:0000249F                 db  5Fh ; _
.data$r:000024A0                 db  65h ; e
.data$r:000024A1                 db  72h ; r
.data$r:000024A2                 db  72h ; r
.data$r:000024A3                 db  6Fh ; o
.data$r:000024A4                 db  72h ; r
.data$r:000024A5                 db  40h ; @
.data$r:000024A6                 db  73h ; s
.data$r:000024A7                 db  74h ; t
.data$r:000024A8                 db  64h ; d
.data$r:000024A9                 db  40h ; @
.data$r:000024AA                 db  40h ; @
.data$r:000024AB                 db    0
.data$r:000024AB _data$r         ends
.data$r:000024AB
.xdata$x:000024AC ; ===========================================================================
.xdata$x:000024AC
.xdata$x:000024AC ; Segment type: Pure data
.xdata$x:000024AC ; Segment permissions: Read
.xdata$x:000024AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000024AC                 assume cs:_xdata$x
.xdata$x:000024AC                 ;org 24ACh
.xdata$x:000024AC ; COMDAT (pick any)
.xdata$x:000024AC                 public __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:000024AC __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 db    0
.xdata$x:000024AC                                         ; DATA XREF: .xdata$x:00002484o
.xdata$x:000024AD                 db    0
.xdata$x:000024AE                 db    0
.xdata$x:000024AF                 db    0
.xdata$x:000024B0                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.xdata$x:000024B4                 align 8
.xdata$x:000024B8                 db 0FFh
.xdata$x:000024B9                 db 0FFh
.xdata$x:000024BA                 db 0FFh
.xdata$x:000024BB                 db 0FFh
.xdata$x:000024BC                 db    0
.xdata$x:000024BD                 db    0
.xdata$x:000024BE                 db    0
.xdata$x:000024BF                 db    0
.xdata$x:000024C0                 db  0Ch
.xdata$x:000024C1                 db    0
.xdata$x:000024C2                 db    0
.xdata$x:000024C3                 db    0
.xdata$x:000024C4                 dd offset ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.xdata$x:000024C4 _xdata$x        ends
.xdata$x:000024C4
.data$r:000024C8 ; ===========================================================================
.data$r:000024C8
.data$r:000024C8 ; Segment type: Pure data
.data$r:000024C8 ; Segment permissions: Read/Write
.data$r:000024C8 _data$r         segment dword public 'DATA' use32
.data$r:000024C8                 assume cs:_data$r
.data$r:000024C8                 ;org 24C8h
.data$r:000024C8 ; COMDAT (pick any)
.data$r:000024C8                 public ??_R0?AVexception@std@@@8
.data$r:000024C8 ; class std::exception `RTTI Type Descriptor'
.data$r:000024C8 ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:000024C8                                         ; DATA XREF: .xdata$x:000024E8o
.data$r:000024C8                                         ; .rdata$r:std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:000024C8                                         ; const type_info::`vftable'
.data$r:000024CC                 align 10h
.data$r:000024D0 a_?avexception@ db '.?AVexception@std@@',0
.data$r:000024D0 _data$r         ends
.data$r:000024D0
.xdata$x:000024E4 ; ===========================================================================
.xdata$x:000024E4
.xdata$x:000024E4 ; Segment type: Pure data
.xdata$x:000024E4 ; Segment permissions: Read
.xdata$x:000024E4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000024E4                 assume cs:_xdata$x
.xdata$x:000024E4                 ;org 24E4h
.xdata$x:000024E4 ; COMDAT (pick any)
.xdata$x:000024E4                 public __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:000024E4 __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 db    0
.xdata$x:000024E4                                         ; DATA XREF: .xdata$x:00002488o
.xdata$x:000024E5                 db    0
.xdata$x:000024E6                 db    0
.xdata$x:000024E7                 db    0
.xdata$x:000024E8                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:000024EC                 align 10h
.xdata$x:000024F0                 db 0FFh
.xdata$x:000024F1                 db 0FFh
.xdata$x:000024F2                 db 0FFh
.xdata$x:000024F3                 db 0FFh
.xdata$x:000024F4                 db    0
.xdata$x:000024F5                 db    0
.xdata$x:000024F6                 db    0
.xdata$x:000024F7                 db    0
.xdata$x:000024F8                 db  0Ch
.xdata$x:000024F9                 db    0
.xdata$x:000024FA                 db    0
.xdata$x:000024FB                 db    0
.xdata$x:000024FC                 dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.xdata$x:000024FC _xdata$x        ends
.xdata$x:000024FC
.rdata:00002500 ; ===========================================================================
.rdata:00002500
.rdata:00002500 ; Segment type: Pure data
.rdata:00002500 ; Segment permissions: Read
.rdata:00002500 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00002500 _rdata          segment para public 'DATA' use32
.rdata:00002500                 assume cs:_rdata
.rdata:00002500                 ;org 2500h
.rdata:00002500 ; COMDAT (pick any)
.rdata:00002500                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:00002500 ; wchar_t `string'
.rdata:00002500 ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:00002500                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+19o
.rdata:00002500                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+49o ...
.rdata:00002500                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:00002500                 unicode 0, <clude\vector>,0
.rdata:00002500 _rdata          ends
.rdata:00002500
.rdata:0000258C ; ===========================================================================
.rdata:0000258C
.rdata:0000258C ; Segment type: Pure data
.rdata:0000258C ; Segment permissions: Read
.rdata:0000258C _rdata          segment dword public 'DATA' use32
.rdata:0000258C                 assume cs:_rdata
.rdata:0000258C                 ;org 258Ch
.rdata:0000258C ; COMDAT (pick any)
.rdata:0000258C                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000258C ; wchar_t `string'
.rdata:0000258C ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000258C                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+1Eo
.rdata:0000258C                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+1Eo ...
.rdata:0000258C                 unicode 0, <vector subscript out of range>,0
.rdata:0000258C _rdata          ends
.rdata:0000258C
.rdata:000025C8 ; ===========================================================================
.rdata:000025C8
.rdata:000025C8 ; Segment type: Pure data
.rdata:000025C8 ; Segment permissions: Read
.rdata:000025C8 _rdata          segment dword public 'DATA' use32
.rdata:000025C8                 assume cs:_rdata
.rdata:000025C8                 ;org 25C8h
.rdata:000025C8 ; COMDAT (pick any)
.rdata:000025C8                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:000025C8 ; `string'
.rdata:000025C8 ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:000025C8                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+2Bo
.rdata:000025C8                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+2Bo ...
.rdata:000025C8 _rdata          ends
.rdata:000025C8
.rdata:000025EC ; ===========================================================================
.rdata:000025EC
.rdata:000025EC ; Segment type: Pure data
.rdata:000025EC ; Segment permissions: Read
.rdata:000025EC ; Segment alignment 'qword' can not be represented in assembly
.rdata:000025EC _rdata          segment para public 'DATA' use32
.rdata:000025EC                 assume cs:_rdata
.rdata:000025EC                 ;org 25ECh
.rdata:000025EC ; COMDAT (pick any)
.rdata:000025EC                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:000025EC ; `string'
.rdata:000025EC ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:000025EC                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint):loc_1204o
.rdata:000025EC                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint):loc_1290o ...
.rdata:000025EC                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:00002642                 align 4
.rdata:00002642 _rdata          ends
.rdata:00002642
.rdata:00002644 ; ===========================================================================
.rdata:00002644
.rdata:00002644 ; Segment type: Pure data
.rdata:00002644 ; Segment permissions: Read
.rdata:00002644 _rdata          segment dword public 'DATA' use32
.rdata:00002644                 assume cs:_rdata
.rdata:00002644                 ;org 2644h
.rdata:00002644 ; COMDAT (pick any)
.rdata:00002644                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:00002644 ; `string'
.rdata:00002644 ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:00002644                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+3Do
.rdata:00002644                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+3Do ...
.rdata:00002644                 unicode 0, <%s>,0
.rdata:0000264A                 align 4
.rdata:0000264A _rdata          ends
.rdata:0000264A
.rdata:0000264C ; ===========================================================================
.rdata:0000264C
.rdata:0000264C ; Segment type: Pure data
.rdata:0000264C ; Segment permissions: Read
.rdata:0000264C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000264C _rdata          segment para public 'DATA' use32
.rdata:0000264C                 assume cs:_rdata
.rdata:0000264C                 ;org 264Ch
.rdata:0000264C ; COMDAT (pick any)
.rdata:0000264C                 public ??_C@_1JO@BHIHLBBA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAI?$AAc?$AAo?$AAn?$AAL?$AAi?$AAs?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs@
.rdata:0000264C ; `string'
.rdata:0000264C ??_C@_1JO@BHIHLBBA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAI?$AAc?$AAo?$AAn?$AAL?$AAi?$AAs?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs@:
.rdata:0000264C                                         ; DATA XREF: std::vector<IconList,std::allocator<IconList>>::operator[](uint)+6Ao
.rdata:0000264C                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+6Ao
.rdata:0000264C                 unicode 0, <std::vector>
.rdata:0000264C                 dw 3Ch
.rdata:0000264C                 unicode 0, <class IconList,class std::allocator>
.rdata:0000264C                 dw 3Ch
.rdata:0000264C                 unicode 0, <class IconList>
.rdata:0000264C                 dw 3Eh
.rdata:0000264C                 unicode 0, < >
.rdata:0000264C                 dw 3Eh
.rdata:0000264C                 unicode 0, <::operator []>,0
.rdata:000026EA                 align 4
.rdata:000026EA _rdata          ends
.rdata:000026EA
.rdata:000026EC ; ===========================================================================
.rdata:000026EC
.rdata:000026EC ; Segment type: Pure data
.rdata:000026EC ; Segment permissions: Read
.rdata:000026EC _rdata          segment dword public 'DATA' use32
.rdata:000026EC                 assume cs:_rdata
.rdata:000026EC                 ;org 26ECh
.rdata:000026EC ; COMDAT (pick any)
.rdata:000026EC                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:000026EC ; `string'
.rdata:000026EC ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:000026EC                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+6Fo
.rdata:000026EC                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+6Fo ...
.rdata:000026EC                 unicode 0, <"out of range">,0
.rdata:0000270A                 align 4
.rdata:0000270A _rdata          ends
.rdata:0000270A
.rdata:0000270C ; ===========================================================================
.rdata:0000270C
.rdata:0000270C ; Segment type: Pure data
.rdata:0000270C ; Segment permissions: Read
.rdata:0000270C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000270C _rdata          segment para public 'DATA' use32
.rdata:0000270C                 assume cs:_rdata
.rdata:0000270C                 ;org 270Ch
.rdata:0000270C ; COMDAT (pick any)
.rdata:0000270C                 public ??_C@_1MG@CCKBFFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAT?$AAo?$AAo?$AAl?$AAB?$AAa?$AAr?$AAB?$AAu?$AAt?$AAt?$AAo?$AAn@
.rdata:0000270C ; `string'
.rdata:0000270C ??_C@_1MG@CCKBFFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAT?$AAo?$AAo?$AAl?$AAB?$AAa?$AAr?$AAB?$AAu?$AAt?$AAt?$AAo?$AAn@:
.rdata:0000270C                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+6Ao
.rdata:0000270C                 unicode 0, <std::vector>
.rdata:0000270C                 dw 3Ch
.rdata:0000270C                 unicode 0, <struct ToolBarButtonUnit,class std::allocator>
.rdata:0000270C                 dw 3Ch
.rdata:0000270C                 unicode 0, <struct ToolBarButtonUnit>
.rdata:0000270C                 dw 3Eh
.rdata:0000270C                 unicode 0, < >
.rdata:0000270C                 dw 3Eh
.rdata:0000270C                 unicode 0, <::operator []>,0
.rdata:000027D2                 align 4
.rdata:000027D2 _rdata          ends
.rdata:000027D2
.rdata:000027D4 ; ===========================================================================
.rdata:000027D4
.rdata:000027D4 ; Segment type: Pure data
.rdata:000027D4 ; Segment permissions: Read
.rdata:000027D4 _rdata          segment dword public 'DATA' use32
.rdata:000027D4                 assume cs:_rdata
.rdata:000027D4                 ;org 27D4h
.rdata:000027D4 ; COMDAT (pick any)
.rdata:000027D4                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:000027D4 ; char `string'[]
.rdata:000027D4 ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:000027D4                                         ; DATA XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Xlen(void)+7o
.rdata:000027D4                                         ; std::vector<IconList,std::allocator<IconList>>::_Xlen(void)+7o
.rdata:000027E7                 align 4
.rdata:000027E7 _rdata          ends
.rdata:000027E7
.rdata:000027E8 ; ===========================================================================
.rdata:000027E8
.rdata:000027E8 ; Segment type: Pure data
.rdata:000027E8 ; Segment permissions: Read
.rdata:000027E8 ; Segment alignment 'qword' can not be represented in assembly
.rdata:000027E8 _rdata          segment para public 'DATA' use32
.rdata:000027E8                 assume cs:_rdata
.rdata:000027E8                 ;org 27E8h
.rdata:000027E8 ; COMDAT (pick any)
.rdata:000027E8                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:000027E8 ; wchar_t `string'
.rdata:000027E8 ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:000027E8                                         ; DATA XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+2Fo
.rdata:000027E8                                         ; std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+49o ...
.rdata:000027E8                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:000027E8                 unicode 0, <clude\xmemory>,0
.rdata:00002876                 align 4
.rdata:00002876 _rdata          ends
.rdata:00002876
.rdata:00002878 ; ===========================================================================
.rdata:00002878
.rdata:00002878 ; Segment type: Pure data
.rdata:00002878 ; Segment permissions: Read
.rdata:00002878 _rdata          segment dword public 'DATA' use32
.rdata:00002878                 assume cs:_rdata
.rdata:00002878                 ;org 2878h
.rdata:00002878 ; COMDAT (pick any)
.rdata:00002878                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:00002878 ; wchar_t `string'
.rdata:00002878 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:00002878                                         ; DATA XREF: std::_Debug_pointer<ToolBarButtonUnit>(ToolBarButtonUnit *,wchar_t const *,uint)+11o
.rdata:00002878                                         ; std::_Debug_pointer<IconList>(IconList *,wchar_t const *,uint)+11o
.rdata:00002878                 unicode 0, <invalid null pointer>,0
.rdata:000028A2                 align 4
.rdata:000028A2 _rdata          ends
.rdata:000028A2
.rdata:000028A4 ; ===========================================================================
.rdata:000028A4
.rdata:000028A4 ; Segment type: Pure data
.rdata:000028A4 ; Segment permissions: Read
.rdata:000028A4 _rdata          segment dword public 'DATA' use32
.rdata:000028A4                 assume cs:_rdata
.rdata:000028A4                 ;org 28A4h
.rdata:000028A4 ; COMDAT (pick any)
.rdata:000028A4                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:000028A4 ; wchar_t `string'
.rdata:000028A4 ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:000028A4                                         ; DATA XREF: std::_Debug_range2<ToolBarButtonUnit *>(ToolBarButtonUnit *,ToolBarButtonUnit *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:000028A4                                         ; std::_Debug_range2<IconList *>(IconList *,IconList *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:000028A4                 unicode 0, <invalid iterator range>,0
.rdata:000028D2                 align 4
.rdata:000028D2 _rdata          ends
.rdata:000028D2
.rdata$r:000028D4 ; ===========================================================================
.rdata$r:000028D4
.rdata$r:000028D4 ; Segment type: Pure data
.rdata$r:000028D4 ; Segment permissions: Read
.rdata$r:000028D4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028D4                 assume cs:_rdata$r
.rdata$r:000028D4                 ;org 28D4h
.rdata$r:000028D4 ; COMDAT (pick any)
.rdata$r:000028D4                 public ??_R1A@?0A@EA@exception@std@@8
.rdata$r:000028D4 ; std::exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:000028D4 ??_R1A@?0A@EA@exception@std@@8 dd offset ??_R0?AVexception@std@@@8
.rdata$r:000028D4                                         ; DATA XREF: .rdata$r:std::exception::`RTTI Base Class Array'o
.rdata$r:000028D4                                         ; .rdata$r:00002930o
.rdata$r:000028D4                                         ; std::exception `RTTI Type Descriptor'
.rdata$r:000028D8                 align 10h
.rdata$r:000028E0                 db 0FFh
.rdata$r:000028E1                 db 0FFh
.rdata$r:000028E2                 db 0FFh
.rdata$r:000028E3                 db 0FFh
.rdata$r:000028E4                 db    0
.rdata$r:000028E5                 db    0
.rdata$r:000028E6                 db    0
.rdata$r:000028E7                 db    0
.rdata$r:000028E8                 db  40h ; @
.rdata$r:000028E9                 db    0
.rdata$r:000028EA                 db    0
.rdata$r:000028EB                 db    0
.rdata$r:000028EC                 dd offset ??_R3exception@std@@8 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028EC _rdata$r        ends
.rdata$r:000028EC
.rdata$r:000028F0 ; ===========================================================================
.rdata$r:000028F0
.rdata$r:000028F0 ; Segment type: Pure data
.rdata$r:000028F0 ; Segment permissions: Read
.rdata$r:000028F0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:000028F0                 assume cs:_rdata$r
.rdata$r:000028F0                 ;org 28F0h
.rdata$r:000028F0 ; COMDAT (pick any)
.rdata$r:000028F0                 public ??_R3exception@std@@8
.rdata$r:000028F0 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:000028F0 ??_R3exception@std@@8 db    0           ; DATA XREF: .rdata$r:000028ECo
.rdata$r:000028F1                 db    0
.rdata$r:000028F2                 db    0
.rdata$r:000028F3                 db    0
.rdata$r:000028F4                 db    0
.rdata$r:000028F5                 db    0
.rdata$r:000028F6                 db    0
.rdata$r:000028F7                 db    0
.rdata$r:000028F8                 db    1
.rdata$r:000028F9                 db    0
.rdata$r:000028FA                 db    0
.rdata$r:000028FB                 db    0
.rdata$r:000028FC                 dd offset ??_R2exception@std@@8 ; std::exception::`RTTI Base Class Array'
.rdata$r:000028FC _rdata$r        ends
.rdata$r:000028FC
.rdata$r:00002900 ; ===========================================================================
.rdata$r:00002900
.rdata$r:00002900 ; Segment type: Pure data
.rdata$r:00002900 ; Segment permissions: Read
.rdata$r:00002900 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002900                 assume cs:_rdata$r
.rdata$r:00002900                 ;org 2900h
.rdata$r:00002900 ; COMDAT (pick any)
.rdata$r:00002900                 public ??_R2exception@std@@8
.rdata$r:00002900 ; std::exception::`RTTI Base Class Array'
.rdata$r:00002900 ??_R2exception@std@@8 dd offset ??_R1A@?0A@EA@exception@std@@8
.rdata$r:00002900                                         ; DATA XREF: .rdata$r:000028FCo
.rdata$r:00002900                                         ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002904                 db    0
.rdata$r:00002905                 align 4
.rdata$r:00002905 _rdata$r        ends
.rdata$r:00002905
.rdata$r:00002908 ; ===========================================================================
.rdata$r:00002908
.rdata$r:00002908 ; Segment type: Pure data
.rdata$r:00002908 ; Segment permissions: Read
.rdata$r:00002908 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002908                 assume cs:_rdata$r
.rdata$r:00002908                 ;org 2908h
.rdata$r:00002908 ; COMDAT (pick any)
.rdata$r:00002908                 public ??_R4runtime_error@std@@6B@
.rdata$r:00002908 ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata$r:00002908 ??_R4runtime_error@std@@6B@ db    0     ; DATA XREF: .rdata:00002464o
.rdata$r:00002909                 db    0
.rdata$r:0000290A                 db    0
.rdata$r:0000290B                 db    0
.rdata$r:0000290C                 db    0
.rdata$r:0000290D                 db    0
.rdata$r:0000290E                 db    0
.rdata$r:0000290F                 db    0
.rdata$r:00002910                 db    0
.rdata$r:00002911                 db    0
.rdata$r:00002912                 db    0
.rdata$r:00002913                 db    0
.rdata$r:00002914                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:00002918                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002918 _rdata$r        ends
.rdata$r:00002918
.rdata$r:0000291C ; ===========================================================================
.rdata$r:0000291C
.rdata$r:0000291C ; Segment type: Pure data
.rdata$r:0000291C ; Segment permissions: Read
.rdata$r:0000291C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000291C                 assume cs:_rdata$r
.rdata$r:0000291C                 ;org 291Ch
.rdata$r:0000291C ; COMDAT (pick any)
.rdata$r:0000291C                 public ??_R3runtime_error@std@@8
.rdata$r:0000291C ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000291C ??_R3runtime_error@std@@8 db    0       ; DATA XREF: .rdata$r:00002918o
.rdata$r:0000291C                                         ; .rdata$r:00002950o
.rdata$r:0000291D                 db    0
.rdata$r:0000291E                 db    0
.rdata$r:0000291F                 db    0
.rdata$r:00002920                 db    0
.rdata$r:00002921                 db    0
.rdata$r:00002922                 db    0
.rdata$r:00002923                 db    0
.rdata$r:00002924                 db    2
.rdata$r:00002925                 db    0
.rdata$r:00002926                 db    0
.rdata$r:00002927                 db    0
.rdata$r:00002928                 dd offset ??_R2runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:00002928 _rdata$r        ends
.rdata$r:00002928
.rdata$r:0000292C ; ===========================================================================
.rdata$r:0000292C
.rdata$r:0000292C ; Segment type: Pure data
.rdata$r:0000292C ; Segment permissions: Read
.rdata$r:0000292C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000292C                 assume cs:_rdata$r
.rdata$r:0000292C                 ;org 292Ch
.rdata$r:0000292C ; COMDAT (pick any)
.rdata$r:0000292C                 public ??_R2runtime_error@std@@8
.rdata$r:0000292C ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000292C ??_R2runtime_error@std@@8 dd offset ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000292C                                         ; DATA XREF: .rdata$r:00002928o
.rdata$r:0000292C                                         ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002930                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:00002934                 db    0
.rdata$r:00002935                 align 4
.rdata$r:00002935 _rdata$r        ends
.rdata$r:00002935
.rdata$r:00002938 ; ===========================================================================
.rdata$r:00002938
.rdata$r:00002938 ; Segment type: Pure data
.rdata$r:00002938 ; Segment permissions: Read
.rdata$r:00002938 _rdata$r        segment dword public 'DATA' use32
.rdata$r:00002938                 assume cs:_rdata$r
.rdata$r:00002938                 ;org 2938h
.rdata$r:00002938 ; COMDAT (pick any)
.rdata$r:00002938                 public ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:00002938 ; std::runtime_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:00002938 ??_R1A@?0A@EA@runtime_error@std@@8 dd offset ??_R0?AVruntime_error@std@@@8
.rdata$r:00002938                                         ; DATA XREF: .rdata$r:std::runtime_error::`RTTI Base Class Array'o
.rdata$r:00002938                                         ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000293C                 db    1
.rdata$r:0000293D                 db    0
.rdata$r:0000293E                 db    0
.rdata$r:0000293F                 db    0
.rdata$r:00002940                 db    0
.rdata$r:00002941                 db    0
.rdata$r:00002942                 db    0
.rdata$r:00002943                 db    0
.rdata$r:00002944                 db 0FFh
.rdata$r:00002945                 db 0FFh
.rdata$r:00002946                 db 0FFh
.rdata$r:00002947                 db 0FFh
.rdata$r:00002948                 db    0
.rdata$r:00002949                 db    0
.rdata$r:0000294A                 db    0
.rdata$r:0000294B                 db    0
.rdata$r:0000294C                 db  40h ; @
.rdata$r:0000294D                 db    0
.rdata$r:0000294E                 db    0
.rdata$r:0000294F                 db    0
.rdata$r:00002950                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:00002950 _rdata$r        ends
.rdata$r:00002950
.CRT$XCU:00002954 ; ===========================================================================
.CRT$XCU:00002954
.CRT$XCU:00002954 ; Segment type: Pure data
.CRT$XCU:00002954 ; Segment permissions: Read
.CRT$XCU:00002954 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00002954                 assume cs:_CRT$XCU
.CRT$XCU:00002954                 ;org 2954h
.CRT$XCU:00002954 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:00002958 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:00002958 _CRT$XCU        ends
.CRT$XCU:00002958
UNDEF:00002960 ; ===========================================================================
UNDEF:00002960
UNDEF:00002960 ; Segment type: Externs
UNDEF:00002960 ; UNDEF
UNDEF:00002960 ; void *__cdecl operator new(unsigned int)
UNDEF:00002960                 extrn ??2@YAPAXI@Z:near ; CODE XREF: std::_Allocate<ToolBarButtonUnit>(uint,ToolBarButtonUnit *)+21p
UNDEF:00002960                                         ; std::_Allocate<IconList>(uint,IconList *)+21p
UNDEF:00002964 ; void __cdecl operator delete(void *)
UNDEF:00002964                 extrn ??3@YAXPAX@Z:near ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+1Bp
UNDEF:00002964                                         ; std::allocator<ToolBarButtonUnit>::deallocate(ToolBarButtonUnit *,uint)+Bp ...
UNDEF:00002968                 extrn __invalid_parameter:near
UNDEF:00002968                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+74p
UNDEF:00002968                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+74p ...
UNDEF:0000296C ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000296C                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000296C                                         ; CODE XREF: std::_Container_base12::_Orphan_all(void)+35p
UNDEF:0000296C                                         ; std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Orphan_range(ToolBarButtonUnit *,ToolBarButtonUnit *)+2Dp ...
UNDEF:00002970 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:00002970                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:00002970                                         ; CODE XREF: std::_Container_base12::_Orphan_all(void)+86p
UNDEF:00002970                                         ; __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0+3j ...
UNDEF:00002974                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:00002978 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *)
UNDEF:00002978                 extrn ??0exception@std@@QAE@ABQBD@Z:near
UNDEF:00002978                                         ; CODE XREF: std::runtime_error::runtime_error(char const *)+2Dp
UNDEF:0000297C ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *)
UNDEF:0000297C                 extrn ??0exception@std@@QAE@ABV01@@Z:near
UNDEF:0000297C                                         ; CODE XREF: std::runtime_error::runtime_error(std::runtime_error const &)+2Dp
UNDEF:0000297C                                         ; DATA XREF: .xdata$x:000024FCo
UNDEF:00002980 ; _DWORD __thiscall std::exception::~exception(std::exception *__hidden this)
UNDEF:00002980                 extrn ??1exception@std@@UAE@XZ:near
UNDEF:00002980                                         ; CODE XREF: __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0+3j
UNDEF:00002980                                         ; __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0+3j ...
UNDEF:00002984 ; public: virtual char const * __thiscall std::exception::what(void)const
UNDEF:00002984                 extrn ?what@exception@std@@UBEPBDXZ:near
UNDEF:00002984                                         ; DATA XREF: .rdata:0000246Co
UNDEF:00002988                 extrn __CrtDbgReportW:near
UNDEF:00002988                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::operator[](uint)+50p
UNDEF:00002988                                         ; std::vector<IconList,std::allocator<IconList>>::operator[](uint)+50p ...
UNDEF:0000298C ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000298C                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000298C                                         ; CODE XREF: std::_Debug_pointer<ToolBarButtonUnit>(ToolBarButtonUnit *,wchar_t const *,uint)+16p
UNDEF:0000298C                                         ; std::_Debug_pointer<IconList>(IconList *,wchar_t const *,uint)+16p ...
UNDEF:00002990 ; void __cdecl std::_Xbad_alloc()
UNDEF:00002990                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:00002990                                         ; CODE XREF: std::_Allocate<ToolBarButtonUnit>(uint,ToolBarButtonUnit *):loc_51Ap
UNDEF:00002990                                         ; std::_Allocate<IconList>(uint,IconList *):loc_55Ap
UNDEF:00002994 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:00002994                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:00002994                                         ; CODE XREF: std::vector<ToolBarButtonUnit,std::allocator<ToolBarButtonUnit>>::_Xlen(void)+Cp
UNDEF:00002994                                         ; std::vector<IconList,std::allocator<IconList>>::_Xlen(void)+Cp
UNDEF:00002998 ; public: virtual void * __thiscall std::runtime_error::`vector deleting destructor'(unsigned int)
UNDEF:00002998                 extrn ??_Eruntime_error@std@@UAEPAXI@Z:near ; weak
UNDEF:00002998                                         ; DATA XREF: .rdata:const std::runtime_error::`vftable'o
UNDEF:0000299C ; BOOL __stdcall DeleteObject(HGDIOBJ ho)
UNDEF:0000299C                 extrn __imp__DeleteObject@4:near
UNDEF:0000299C                                         ; CODE XREF: IconList::changeIcon(int,wchar_t const *)+6Cp
UNDEF:0000299C                                         ; DATA XREF: IconList::changeIcon(int,wchar_t const *)+6Cr
UNDEF:000029A0 ; HICON __stdcall LoadIconW(HINSTANCE hInstance, LPCWSTR lpIconName)
UNDEF:000029A0                 extrn __imp__LoadIconW@8:near
UNDEF:000029A0                                         ; CODE XREF: IconList::addIcon(int)+15p
UNDEF:000029A0                                         ; DATA XREF: IconList::addIcon(int)+15r
UNDEF:000029A4 ; BOOL __stdcall DestroyIcon(HICON hIcon)
UNDEF:000029A4                 extrn __imp__DestroyIcon@4:near
UNDEF:000029A4                                         ; CODE XREF: IconList::addIcon(int)+55p
UNDEF:000029A4                                         ; DATA XREF: IconList::addIcon(int)+55r
UNDEF:000029A8 ; HANDLE __stdcall LoadImageW(HINSTANCE hInst, LPCWSTR name, UINT type, int cx, int cy, UINT fuLoad)
UNDEF:000029A8                 extrn __imp__LoadImageW@24:near
UNDEF:000029A8                                         ; CODE XREF: IconList::changeIcon(int,wchar_t const *)+29p
UNDEF:000029A8                                         ; DATA XREF: IconList::changeIcon(int,wchar_t const *)+29r
UNDEF:000029AC ; void __stdcall InitCommonControls()
UNDEF:000029AC                 extrn __imp__InitCommonControls@0:near
UNDEF:000029AC                                         ; CODE XREF: IconList::create(HINSTANCE__ *,int)+9p
UNDEF:000029AC                                         ; DATA XREF: IconList::create(HINSTANCE__ *,int)+9r
UNDEF:000029B0 ; HIMAGELIST __stdcall ImageList_Create(int cx, int cy, UINT flags, int cInitial, int cGrow)
UNDEF:000029B0                 extrn __imp__ImageList_Create@20:near
UNDEF:000029B0                                         ; CODE XREF: IconList::create(HINSTANCE__ *,int)+2Fp
UNDEF:000029B0                                         ; DATA XREF: IconList::create(HINSTANCE__ *,int)+2Fr
UNDEF:000029B4 ; BOOL __stdcall ImageList_Destroy(HIMAGELIST himl)
UNDEF:000029B4                 extrn __imp__ImageList_Destroy@4:near
UNDEF:000029B4                                         ; CODE XREF: IconList::destroy(void)+Dp
UNDEF:000029B4                                         ; DATA XREF: IconList::destroy(void)+Dr
UNDEF:000029B8 ; int __stdcall ImageList_ReplaceIcon(HIMAGELIST himl, int i, HICON hicon)
UNDEF:000029B8                 extrn __imp__ImageList_ReplaceIcon@12:near
UNDEF:000029B8                                         ; CODE XREF: IconList::addIcon(int)+4Bp
UNDEF:000029B8                                         ; IconList::changeIcon(int,wchar_t const *)+4Ap
UNDEF:000029B8                                         ; DATA XREF: ...
UNDEF:000029BC ; int __stdcall ImageList_AddMasked(HIMAGELIST himl, HBITMAP hbmImage, COLORREF crMask)
UNDEF:000029BC                 extrn __imp__ImageList_AddMasked@12:near
UNDEF:000029BC                                         ; CODE XREF: IconList::changeIcon(int,wchar_t const *)+62p
UNDEF:000029BC                                         ; DATA XREF: IconList::changeIcon(int,wchar_t const *)+62r
UNDEF:000029C0 ; BOOL __stdcall ImageList_SetIconSize(HIMAGELIST himl, int cx, int cy)
UNDEF:000029C0                 extrn __imp__ImageList_SetIconSize@12:near
UNDEF:000029C0                                         ; CODE XREF: IconList::setIconSize(int)+17p
UNDEF:000029C0                                         ; ToolBarIcons::reInit(int)+1Ap ...
UNDEF:000029C4 ; __fastcall __security_check_cookie(x)
UNDEF:000029C4                 extrn @__security_check_cookie@4:near
UNDEF:000029C4                                         ; CODE XREF: __ehhandler$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+Cp
UNDEF:000029C4                                         ; __ehhandler$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+Cp ...
UNDEF:000029C8 ; __stdcall _CxxThrowException(x, x)
UNDEF:000029C8                 extrn __CxxThrowException@8:near
UNDEF:000029C8                                         ; CODE XREF: IconList::create(HINSTANCE__ *,int)+58p
UNDEF:000029C8                                         ; IconList::addIcon(int)+3Ap ...
UNDEF:000029CC                 extrn ___CxxFrameHandler3:near
UNDEF:000029CC                                         ; CODE XREF: __ehhandler$??$_Uninit_move@PAUToolBarButtonUnit@@PAU1@V?$allocator@UToolBarButtonUnit@@@std@@U1@@std@@YAPAUToolBarButtonUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UToolBarButtonUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+16j
UNDEF:000029CC                                         ; __ehhandler$??$_Uninit_move@PAVIconList@@PAV1@V?$allocator@VIconList@@@std@@V1@@std@@YAPAVIconList@@PAV1@00AAU?$_Wrap_alloc@V?$allocator@VIconList@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+16j ...
UNDEF:000029D0 ; const type_info::`vftable'
UNDEF:000029D0                 extrn ??_7type_info@@6B@:near
UNDEF:000029D0                                         ; DATA XREF: .data$r:std::runtime_error `RTTI Type Descriptor'o
UNDEF:000029D0                                         ; .data$r:std::exception `RTTI Type Descriptor'o
UNDEF:000029D4                 extrn ___security_cookie:near
UNDEF:000029D4                                         ; DATA XREF: std::_Uninit_move<ToolBarButtonUnit *,ToolBarButtonUnit *,std::allocator<ToolBarButtonUnit>,ToolBarButtonUnit>(ToolBarButtonUnit *,ToolBarButtonUnit *,ToolBarButtonUnit *,std::_Wrap_alloc<std::allocator<ToolBarButtonUnit>> &,ToolBarButtonUnit *,std::_Nonscalar_ptr_iterator_tag)+16r
UNDEF:000029D4                                         ; std::_Uninit_move<IconList *,IconList *,std::allocator<IconList>,IconList>(IconList *,IconList *,IconList *,std::_Wrap_alloc<std::allocator<IconList>> &,IconList *,std::_Nonscalar_ptr_iterator_tag)+16r ...
UNDEF:000029D8                 extrn __fltused:near
UNDEF:000029D8
UNDEF:000029D8
UNDEF:000029D8                 end