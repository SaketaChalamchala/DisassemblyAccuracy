.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : A8B8920748F76101D7A26057E017D367
.rdata:00000000 ; Input CRC32 : B0D7FC36
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\Notepad_plus_Window.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000000 _rdata          segment para public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 $SG145408       db '+',9,'c #72A1E3',0  ; DATA XREF: .data:00000DD4o
.rdata:0000000C $SG145409       db '@',9,'c #C1D6F2',0  ; DATA XREF: .data:00000DD8o
.rdata:00000018 $SG145410       db '#',9,'c #6397E1',0  ; DATA XREF: .data:00000DDCo
.rdata:00000024 $SG145411       db '$',9,'c #5990DD',0  ; DATA XREF: .data:00000DE0o
.rdata:00000030 $SG145412       db '%',9,'c #BBD2F0',0  ; DATA XREF: .data:00000DE4o
.rdata:0000003C $SG145413       db '&',9,'c #7AA6E5',0  ; DATA XREF: .data:00000DE8o
.rdata:00000048 $SG145414       db '*',9,'c #9ABDEA',0  ; DATA XREF: .data:00000DECo
.rdata:00000054 $SG145415       db '=',9,'c #4A87D9',0  ; DATA XREF: .data:00000DF0o
.rdata:00000060 $SG145416       db  2Dh ; -             ; DATA XREF: .data:00000DF4o
.rdata:00000061                 db    9
.rdata:00000062                 db  63h ; c
.rdata:00000063                 db  20h
.rdata:00000064 ; const WCHAR IconName
.rdata:00000064 IconName        dw 4223h                ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+A8o
.rdata:00000064                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+50Co
.rdata:00000066 a1caee          db '1CAEE',0
.rdata:0000006C $SG145417       db ';',9,'c #75A4E3',0  ; DATA XREF: .data:00000DF8o
.rdata:00000078 $SG145418       db '>',9,'c #99BBE9',0  ; DATA XREF: .data:00000DFCo
.rdata:00000084 $SG145419       db ',',9,'c #95B9E8',0  ; DATA XREF: .data:00000E00o
.rdata:00000090 $SG145420       db 27h,9,'c #3A7CD4',0  ; DATA XREF: .data:00000E04o
.rdata:0000009C $SG145421       db ')',9,'c #A9C6EC',0  ; DATA XREF: .data:00000E08o
.rdata:000000A8 $SG145422       db '!',9,'c #71A0E0',0  ; DATA XREF: .data:00000E0Co
.rdata:000000B4 $SG145423       db '~',9,'c #86AFE5',0  ; DATA XREF: .data:00000E10o
.rdata:000000C0 $SG145424       db '{',9,'c #8DB2E6',0  ; DATA XREF: .data:00000E14o
.rdata:000000CC $SG145425       db ']',9,'c #2A72CF',0  ; DATA XREF: .data:00000E18o
.rdata:000000D8 $SG145426       db '^',9,'c #73A0E0',0  ; DATA XREF: .data:00000E1Co
.rdata:000000E4 $SG145427       db '/',9,'c #6B9DE0',0  ; DATA XREF: .data:00000E20o
.rdata:000000F0 $SG145428       db '(',9,'c #95B8E8',0  ; DATA XREF: .data:00000E24o
.rdata:000000FC $SG145429       db '_',9,'c #81ABE3',0  ; DATA XREF: .data:00000E28o
.rdata:00000108 $SG145430       db ':',9,'c #72A1DF',0  ; DATA XREF: .data:00000E2Co
.rdata:00000114 $SG145431       db '<',9,'c #83ADE3',0  ; DATA XREF: .data:00000E30o
.rdata:00000120 $SG145432       db '[',9,'c #1B65C9',0  ; DATA XREF: .data:00000E34o
.rdata:0000012C $SG145433       db '}',9,'c #5F95DC',0  ; DATA XREF: .data:00000E38o
.rdata:00000138 $SG145434       db '|',9,'c #8BB3E5',0  ; DATA XREF: .data:00000E3Co
.rdata:00000144 $SG145435       db '1',9,'c #77A4E0',0  ; DATA XREF: .data:00000E40o
.rdata:00000150 $SG145436       db '2',9,'c #679ADC',0  ; DATA XREF: .data:00000E44o
.rdata:0000015C $SG145437       db '3',9,'c #7AA6E1',0  ; DATA XREF: .data:00000E48o
.rdata:00000168 $SG145438       db '4',9,'c #195CC6',0  ; DATA XREF: .data:00000E4Co
.rdata:00000174 $SG145439       db '5',9,'c #FCFDFE',0  ; DATA XREF: .data:00000E50o
.rdata:00000180 $SG145440       db '6',9,'c #8DB2E4',0  ; DATA XREF: .data:00000E54o
.rdata:0000018C $SG145441       db '7',9,'c #4885D6',0  ; DATA XREF: .data:00000E58o
.rdata:00000198 $SG145442       db '8',9,'c #7CA9E1',0  ; DATA XREF: .data:00000E5Co
.rdata:000001A4 $SG145443       db '9',9,'c #6698DB',0  ; DATA XREF: .data:00000E60o
.rdata:000001B0 $SG145444       db '0',9,'c #71A1DE',0  ; DATA XREF: .data:00000E64o
.rdata:000001BC $SG145445       db 'a',9,'c #1752C0',0  ; DATA XREF: .data:00000E68o
.rdata:000001C8 $SG145446       db 'b',9,'c #88ABE0',0  ; DATA XREF: .data:00000E6Co
.rdata:000001D4 $SG145447       db 'c',9,'c #3D77D0',0  ; DATA XREF: .data:00000E70o
.rdata:000001E0 $SG145448       db 'd',9,'c #6E9FDD',0  ; DATA XREF: .data:00000E74o
.rdata:000001EC $SG145449       db 'e',9,'c #699BDC',0  ; DATA XREF: .data:00000E78o
.rdata:000001F8 $SG145450       db 'f',9,'c #1547BD',0  ; DATA XREF: .data:00000E7Co
.rdata:00000204 $SG145451       db 'g',9,'c #8DA6DE',0  ; DATA XREF: .data:00000E80o
.rdata:00000210 $SG145452       db 'h',9,'c #376BC9',0  ; DATA XREF: .data:00000E84o
.rdata:0000021C $SG145453       db 'i',9,'c #6295DA',0  ; DATA XREF: .data:00000E88o
.rdata:00000228 $SG145454       db 'j',9,'c #1440B9',0  ; DATA XREF: .data:00000E8Co
.rdata:00000234 $SG145455       db 'k',9,'c #8DA0DB',0  ; DATA XREF: .data:00000E90o
.rdata:00000240 $SG145456       db 'l',9,'c #315FC4',0  ; DATA XREF: .data:00000E94o
.rdata:0000024C $SG145457       db 'm',9,'c #1339B7',0  ; DATA XREF: .data:00000E98o
.rdata:00000258 $SG145458       db 'n',9,'c #909FDA',0  ; DATA XREF: .data:00000E9Co
.rdata:00000264 $SG145459       db 'o',9,'c #1233B4',0  ; DATA XREF: .data:00000EA0o
.rdata:00000270 $SG145460       db '         .+ ',0     ; DATA XREF: .data:00000EA4o
.rdata:0000027D ; char _SG169818
.rdata:0000027D $SG169818       db 0                    ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+CD1o
.rdata:0000027E ; CHAR _SG169825[2]
.rdata:0000027E $SG169825       db 2 dup(0)             ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+DA8o
.rdata:00000280 $SG145461       db '        @#$ ',0     ; DATA XREF: .data:00000EA8o
.rdata:0000028D                 align 10h
.rdata:00000290 $SG145462       db '       %&*= L',0    ; DATA XREF: .data:00000EACo
.rdata:0000029E                 align 10h
.rdata:000002A0 $SG145463       db '      -;>,',27h,' ',0 ; DATA XREF: .data:00000EB0o
.rdata:000002AD                 align 10h
.rdata:000002B0 $SG145464       db '     )!>~{] ',0     ; DATA XREF: .data:00000EB4o
.rdata:000002BD                 align 10h
.rdata:000002C0 $SG145465       db '    ^/(_:<[ ',0     ; DATA XREF: .data:00000EB8o
.rdata:000002CD                 align 10h
.rdata:000002D0 $SG145466       db '    (}|1234 ',0     ; DATA XREF: .data:00000EBCo
.rdata:000002DD                 align 10h
.rdata:000002E0 $SG145467       db '    567890a ',0     ; DATA XREF: .data:00000EC0o
.rdata:000002ED                 align 10h
.rdata:000002F0 $SG145468       db '      bcdef ',0     ; DATA XREF: .data:00000EC4o
.rdata:000002FD                 align 10h
.rdata:00000300 $SG145469       db '       ghij ',0     ; DATA XREF: .data:00000EC8o
.rdata:0000030D                 align 10h
.rdata:00000310 $SG145470       db '        klm ',0     ; DATA XREF: .data:00000ECCo
.rdata:0000031D                 align 10h
.rdata:00000320 $SG145471       db '         no ',0     ; DATA XREF: .data:00000ED0o
.rdata:0000032D                 align 10h
.rdata:00000330 $SG145473       db '13 14 54 1',0       ; DATA XREF: .data:_bookmark_xpmo
.rdata:0000033B                 align 4
.rdata:0000033C $SG145474       db ' ',9,'c None',0     ; DATA XREF: .data:00000B9Co
.rdata:00000345                 align 4
.rdata:00000348 $SG145475       db '.',9,'c #545254',0  ; DATA XREF: .data:00000BA0o
.rdata:00000354 $SG145476       db '+',9,'c #3C3E3C',0  ; DATA XREF: .data:00000BA4o
.rdata:00000360 $SG145477       db '@',9,'c #646464',0  ; DATA XREF: .data:00000BA8o
.rdata:0000036C $SG145478       db '#',9,'c #A4A4A4',0  ; DATA XREF: .data:00000BACo
.rdata:00000378 $SG145479       db '$',9,'c #B7B8B7',0  ; DATA XREF: .data:00000BB0o
.rdata:00000384 $SG145480       db '%',9,'c #747284',0  ; DATA XREF: .data:00000BB4o
.rdata:00000390 $SG145481       db '&',9,'c #B4B2C4',0  ; DATA XREF: .data:00000BB8o
.rdata:0000039C $SG145482       db '*',9,'c #DCD7E4',0  ; DATA XREF: .data:00000BBCo
.rdata:000003A8 $SG145483       db '=',9,'c #1C1A1C',0  ; DATA XREF: .data:00000BC0o
.rdata:000003B4 $SG145484       db '-',9,'c #403E58',0  ; DATA XREF: .data:00000BC4o
.rdata:000003C0 $SG145485       db ';',9,'c #5C5A8C',0  ; DATA XREF: .data:00000BC8o
.rdata:000003CC $SG145486       db '>',9,'c #7C7EAC',0  ; DATA XREF: .data:00000BCCo
.rdata:000003D8 $SG145487       db ',',9,'c #7C8EBC',0  ; DATA XREF: .data:00000BD0o
.rdata:000003E4 $SG145488       db 27h,9,'c #242644',0  ; DATA XREF: .data:00000BD4o
.rdata:000003F0 $SG145489       db ')',9,'c #282668',0  ; DATA XREF: .data:00000BD8o
.rdata:000003FC $SG145490       db '!',9,'c #24367C',0  ; DATA XREF: .data:00000BDCo
.rdata:00000408 $SG145491       db '~',9,'c #244A84',0  ; DATA XREF: .data:00000BE0o
.rdata:00000414 $SG145492       db '{',9,'c #2C5098',0  ; DATA XREF: .data:00000BE4o
.rdata:00000420 $SG145493       db ']',9,'c #14162C',0  ; DATA XREF: .data:00000BE8o
.rdata:0000042C $SG145494       db '^',9,'c #142E7C',0  ; DATA XREF: .data:00000BECo
.rdata:00000438 $SG145495       db '/',9,'c #143789',0  ; DATA XREF: .data:00000BF0o
.rdata:00000444 $SG145496       db '(',9,'c #204990',0  ; DATA XREF: .data:00000BF4o
.rdata:00000450 $SG145497       db '_',9,'c #174091',0  ; DATA XREF: .data:00000BF8o
.rdata:0000045C $SG145498       db ':',9,'c #0C0630',0  ; DATA XREF: .data:00000BFCo
.rdata:00000468 $SG145499       db '<',9,'c #24327C',0  ; DATA XREF: .data:00000C00o
.rdata:00000474 $SG145500       db '[',9,'c #2450A0',0  ; DATA XREF: .data:00000C04o
.rdata:00000480 $SG145501       db '}',9,'c #345DB4',0  ; DATA XREF: .data:00000C08o
.rdata:0000048C $SG145502       db '|',9,'c #3C68B8',0  ; DATA XREF: .data:00000C0Co
.rdata:00000498 $SG145503       db '1',9,'c #141244',0  ; DATA XREF: .data:00000C10o
.rdata:000004A4 $SG145504       db '2',9,'c #24428C',0  ; DATA XREF: .data:00000C14o
.rdata:000004B0 $SG145505       db '3',9,'c #3462B9',0  ; DATA XREF: .data:00000C18o
.rdata:000004BC $SG145506       db '4',9,'c #4470C4',0  ; DATA XREF: .data:00000C1Co
.rdata:000004C8 $SG145507       db '5',9,'c #4C7FD6',0  ; DATA XREF: .data:00000C20o
.rdata:000004D4 $SG145508       db '6',9,'c #4472CC',0  ; DATA XREF: .data:00000C24o
.rdata:000004E0 $SG145509       db '7',9,'c #24224C',0  ; DATA XREF: .data:00000C28o
.rdata:000004EC $SG145510       db '8',9,'c #5C8DEC',0  ; DATA XREF: .data:00000C2Co
.rdata:000004F8 $SG145511       db '9',9,'c #5C94F6',0  ; DATA XREF: .data:00000C30o
.rdata:00000504 $SG145512       db '0',9,'c #5482DF',0  ; DATA XREF: .data:00000C34o
.rdata:00000510 $SG145513       db 'a',9,'c #619DF7',0  ; DATA XREF: .data:00000C38o
.rdata:0000051C $SG145514       db 'b',9,'c #6CA6FC',0  ; DATA XREF: .data:00000C3Co
.rdata:00000528 $SG145515       db 'c',9,'c #64A2FC',0  ; DATA XREF: .data:00000C40o
.rdata:00000534 $SG145516       db 'd',9,'c #1C2E5C',0  ; DATA XREF: .data:00000C44o
.rdata:00000540 $SG145517       db 'e',9,'c #6CA2FC',0  ; DATA XREF: .data:00000C48o
.rdata:0000054C $SG145518       db 'f',9,'c #74B2FC',0  ; DATA XREF: .data:00000C4Co
.rdata:00000558 $SG145519       db 'g',9,'c #7CB8FC',0  ; DATA XREF: .data:00000C50o
.rdata:00000564 $SG145520       db 'h',9,'c #1C3264',0  ; DATA XREF: .data:00000C54o
.rdata:00000570 $SG145521       db 'i',9,'c #346AD4',0  ; DATA XREF: .data:00000C58o
.rdata:0000057C $SG145522       db 'j',9,'c #7CBEFC',0  ; DATA XREF: .data:00000C5Co
.rdata:00000588 $SG145523       db 'k',9,'c #3C72DC',0  ; DATA XREF: .data:00000C60o
.rdata:00000594 $SG145524       db 'l',9,'c #243250',0  ; DATA XREF: .data:00000C64o
.rdata:000005A0 $SG145525       db 'm',9,'c #346AB4',0  ; DATA XREF: .data:00000C68o
.rdata:000005AC $SG145526       db 'n',9,'c #3C82DC',0  ; DATA XREF: .data:00000C6Co
.rdata:000005B8 $SG145527       db 'o',9,'c #6C6A6C',0  ; DATA XREF: .data:00000C70o
.rdata:000005C4 $SG145528       db '     .+.     ',0    ; DATA XREF: .data:00000C74o
.rdata:000005D2                 align 4
.rdata:000005D4 $SG145529       db '   @##$##@   ',0    ; DATA XREF: .data:00000C78o
.rdata:000005E2                 align 4
.rdata:000005E4 $SG145530       db '  @%&***&%@  ',0    ; DATA XREF: .data:00000C7Co
.rdata:000005F2                 align 4
.rdata:000005F4 $SG145531       db ' =-;>,,,>;-= ',0    ; DATA XREF: .data:00000C80o
.rdata:00000602                 align 4
.rdata:00000604 $SG145532       db ' ',27h,')!~{{{~!)',27h,' ',0
.rdata:00000604                                         ; DATA XREF: .data:00000C84o
.rdata:00000612                 align 4
.rdata:00000614 $SG145533       db '])^/({{{(_^)]',0    ; DATA XREF: .data:00000C88o
.rdata:00000622                 align 4
.rdata:00000624 $SG145534       db ':<_[}|||}[_<:',0    ; DATA XREF: .data:00000C8Co
.rdata:00000632                 align 4
.rdata:00000634 $SG145535       db '12[3455563[21',0    ; DATA XREF: .data:00000C90o
.rdata:00000642                 align 4
.rdata:00000644 $SG145536       db '7_365899063_7',0    ; DATA XREF: .data:00000C94o
.rdata:00000652                 align 4
.rdata:00000654 $SG145537       db ' /|09abc904/ ',0    ; DATA XREF: .data:00000C98o
.rdata:00000662                 align 4
.rdata:00000664 $SG145538       db ' d}8efgfb83d ',0    ; DATA XREF: .data:00000C9Co
.rdata:00000672                 align 4
.rdata:00000674 $SG145539       db '  hiafjgakh  ',0    ; DATA XREF: .data:00000CA0o
.rdata:00000682                 align 4
.rdata:00000684 $SG145540       db '   l~mnm~l   ',0    ; DATA XREF: .data:00000CA4o
.rdata:00000692                 align 4
.rdata:00000694 $SG145541       db '     o@o     ',0    ; DATA XREF: .data:00000CA8o
.rdata:000006A2                 align 4
.rdata:000006A4 ; char _SG169363[]
.rdata:000006A4 $SG169363       db 'Notepad_plus_Window::init : RegisterClass() function failed',0
.rdata:000006A4                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+11Co
.rdata:000006E0                 public ?_className@Notepad_plus_Window@@0QB_WB
.rdata:000006E0 ; const WCHAR Notepad_plus_Window::_className
.rdata:000006E0 ?_className@Notepad_plus_Window@@0QB_WB:
.rdata:000006E0                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+ECo
.rdata:000006E0                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+1D1o
.rdata:000006E0                 unicode 0, <Notepad++>,0
.rdata:000006F4                 db    0
.rdata:000006F5                 db    0
.rdata:000006F6                 db    0
.rdata:000006F7                 db    0
.rdata:000006F8                 db    0
.rdata:000006F9                 db    0
.rdata:000006FA                 db    0
.rdata:000006FB                 db    0
.rdata:000006FC                 db    0
.rdata:000006FD                 db    0
.rdata:000006FE                 db    0
.rdata:000006FF                 db    0
.rdata:00000700                 db    0
.rdata:00000701                 db    0
.rdata:00000702                 db    0
.rdata:00000703                 db    0
.rdata:00000704                 db    0
.rdata:00000705                 db    0
.rdata:00000706                 db    0
.rdata:00000707                 db    0
.rdata:00000708                 db    0
.rdata:00000709                 db    0
.rdata:0000070A                 db    0
.rdata:0000070B                 db    0
.rdata:0000070C                 db    0
.rdata:0000070D                 db    0
.rdata:0000070E                 db    0
.rdata:0000070F                 db    0
.rdata:00000710                 db    0
.rdata:00000711                 db    0
.rdata:00000712                 db    0
.rdata:00000713                 db    0
.rdata:00000714                 db    0
.rdata:00000715                 db    0
.rdata:00000716                 db    0
.rdata:00000717                 db    0
.rdata:00000718                 db    0
.rdata:00000719                 db    0
.rdata:0000071A                 db    0
.rdata:0000071B                 db    0
.rdata:0000071C                 db    0
.rdata:0000071D                 db    0
.rdata:0000071E                 db    0
.rdata:0000071F                 db    0
.rdata:00000720 ; const WCHAR _SG169369
.rdata:00000720 $SG169369:                              ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+1CCo
.rdata:00000720                 unicode 0, <Notepad++>,0
.rdata:00000734 ; wchar_t _SG169403
.rdata:00000734 $SG169403       dw 0                    ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+507o
.rdata:00000736                 db    0
.rdata:00000737                 db    0
.rdata:00000738 ; char _SG169373[]
.rdata:00000738 $SG169373       db 'Notepad_plus_Window::init : CreateWindowEx() function return null'
.rdata:00000738                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+1FBo
.rdata:00000738                 db 0
.rdata:0000077A                 align 4
.rdata:0000077C ; wchar_t _SG169416
.rdata:0000077C $SG169416:                              ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+5C2o
.rdata:0000077C                 unicode 0, <*.xml>,0
.rdata:00000788 ; wchar_t _SG169423
.rdata:00000788 $SG169423:                              ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+634o
.rdata:00000788                 unicode 0, <localization\>,0
.rdata:000007A4 ; wchar_t _SG169435
.rdata:000007A4 $SG169435:                              ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+7AAo
.rdata:000007A4                 unicode 0, <themes\>,0
.rdata:000007B4 ; wchar_t _SG169444
.rdata:000007B4 $SG169444:                              ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+8D9o
.rdata:000007B4                 unicode 0, <themes\>,0
.rdata:000007C4 ; wchar_t _SG169477
.rdata:000007C4 $SG169477       dw 0                    ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+AEEo
.rdata:000007C6                 db    0
.rdata:000007C7                 db    0
.rdata:000007C8 ; char _SG169484[]
.rdata:000007C8 $SG169484       db 'Anonymous #999',0   ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B9Co
.rdata:000007D7                 align 4
.rdata:000007D8 ; char _SG169819[]
.rdata:000007D8 $SG169819       db 'Anonymous #999',0   ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+CF4o
.rdata:000007E7                 align 4
.rdata:000007E8 ; char _SG169824[]
.rdata:000007E8 $SG169824       db 'Loading time : %.0lf seconds',0
.rdata:000007E8                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D92o
.rdata:00000805                 align 4
.rdata:00000808 $SG145335       db '12 12 56 1',0       ; DATA XREF: .data:_acTop_xpmo
.rdata:00000813                 align 4
.rdata:00000814 $SG145336       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000CB4o
.rdata:00000820 $SG145337       db '.',9,'c #8AB2E9',0  ; DATA XREF: .data:00000CB8o
.rdata:0000082C $SG145338       db '+',9,'c #CCDCF6',0  ; DATA XREF: .data:00000CBCo
.rdata:00000838 $SG145339       db '@',9,'c #80ABEA',0  ; DATA XREF: .data:00000CC0o
.rdata:00000844 $SG145340       db '#',9,'c #7DA9E8',0  ; DATA XREF: .data:00000CC4o
.rdata:00000850 $SG145341       db '$',9,'c #C7DAF3',0  ; DATA XREF: .data:00000CC8o
.rdata:0000085C $SG145342       db '%',9,'c #79A7E6',0  ; DATA XREF: .data:00000CCCo
.rdata:00000868 $SG145343       db '&',9,'c #ADC8EF',0  ; DATA XREF: .data:00000CD0o
.rdata:00000874 $SG145344       db '*',9,'c #87B0E8',0  ; DATA XREF: .data:00000CD4o
.rdata:00000880 $SG145345       db '=',9,'c #BBD2F0',0  ; DATA XREF: .data:00000CD8o
.rdata:0000088C $SG145346       db '-',9,'c #6EA0E2',0  ; DATA XREF: .data:00000CDCo
.rdata:00000898 $SG145347       db ';',9,'c #A8C7EE',0  ; DATA XREF: .data:00000CE0o
.rdata:000008A4 $SG145348       db '>',9,'c #A3C2ED',0  ; DATA XREF: .data:00000CE4o
.rdata:000008B0 $SG145349       db ',',9,'c #75A4E3',0  ; DATA XREF: .data:00000CE8o
.rdata:000008BC $SG145350       db 27h,9,'c #A7C4EB',0  ; DATA XREF: .data:00000CECo
.rdata:000008C8 $SG145351       db ')',9,'c #6297E1',0  ; DATA XREF: .data:00000CF0o
.rdata:000008D4 $SG145352       db '!',9,'c #A1C1EC',0  ; DATA XREF: .data:00000CF4o
.rdata:000008E0 $SG145353       db '~',9,'c #92B7E8',0  ; DATA XREF: .data:00000CF8o
.rdata:000008EC $SG145354       db '{',9,'c #99BBE9',0  ; DATA XREF: .data:00000CFCo
.rdata:000008F8 $SG145355       db ']',9,'c #6197DD',0  ; DATA XREF: .data:00000D00o
.rdata:00000904 $SG145356       db '^',9,'c #96B9E6',0  ; DATA XREF: .data:00000D04o
.rdata:00000910 $SG145357       db '/',9,'c #538EDB',0  ; DATA XREF: .data:00000D08o
.rdata:0000091C $SG145358       db '(',9,'c #99BBEA',0  ; DATA XREF: .data:00000D0Co
.rdata:00000928 $SG145359       db '_',9,'c #80AAE3',0  ; DATA XREF: .data:00000D10o
.rdata:00000934 $SG145360       db ':',9,'c #81ABE3',0  ; DATA XREF: .data:00000D14o
.rdata:00000940 $SG145361       db '<',9,'c #8AB1E4',0  ; DATA XREF: .data:00000D18o
.rdata:0000094C $SG145362       db '[',9,'c #4B88D6',0  ; DATA XREF: .data:00000D1Co
.rdata:00000958 $SG145363       db '}',9,'c #4882D1',0  ; DATA XREF: .data:00000D20o
.rdata:00000964 $SG145364       db '|',9,'c #4384D6',0  ; DATA XREF: .data:00000D24o
.rdata:00000970 $SG145365       db '1',9,'c #90B5E7',0  ; DATA XREF: .data:00000D28o
.rdata:0000097C $SG145366       db '2',9,'c #74A3E0',0  ; DATA XREF: .data:00000D2Co
.rdata:00000988 $SG145367       db '3',9,'c #77A4E0',0  ; DATA XREF: .data:00000D30o
.rdata:00000994 $SG145368       db '4',9,'c #81ABE2',0  ; DATA XREF: .data:00000D34o
.rdata:000009A0 $SG145369       db '5',9,'c #437FD3',0  ; DATA XREF: .data:00000D38o
.rdata:000009AC $SG145370       db '6',9,'c #7FA2DF',0  ; DATA XREF: .data:00000D3Co
.rdata:000009B8 $SG145371       db '7',9,'c #3577D2',0  ; DATA XREF: .data:00000D40o
.rdata:000009C4 $SG145372       db '8',9,'c #87AFE4',0  ; DATA XREF: .data:00000D44o
.rdata:000009D0 $SG145373       db '9',9,'c #72A1DF',0  ; DATA XREF: .data:00000D48o
.rdata:000009DC $SG145374       db '0',9,'c #7CA9E1',0  ; DATA XREF: .data:00000D4Co
.rdata:000009E8 $SG145375       db 'a',9,'c #3F7AD0',0  ; DATA XREF: .data:00000D50o
.rdata:000009F4 $SG145376       db 'b',9,'c #85A4DE',0  ; DATA XREF: .data:00000D54o
.rdata:00000A00 $SG145377       db 'c',9,'c #FBFCFE',0  ; DATA XREF: .data:00000D58o
.rdata:00000A0C $SG145378       db 'd',9,'c #236ECD',0  ; DATA XREF: .data:00000D5Co
.rdata:00000A18 $SG145379       db 'e',9,'c #7EA8E1',0  ; DATA XREF: .data:00000D60o
.rdata:00000A24 $SG145380       db 'f',9,'c #79A6E0',0  ; DATA XREF: .data:00000D64o
.rdata:00000A30 $SG145381       db 'g',9,'c #3D77D0',0  ; DATA XREF: .data:00000D68o
.rdata:00000A3C $SG145382       db 'h',9,'c #87A4DC',0  ; DATA XREF: .data:00000D6Co
.rdata:00000A48 $SG145383       db 'i',9,'c #1A62C9',0  ; DATA XREF: .data:00000D70o
.rdata:00000A54 $SG145384       db 'j',9,'c #75A3DF',0  ; DATA XREF: .data:00000D74o
.rdata:00000A60 $SG145385       db 'k',9,'c #3C74CF',0  ; DATA XREF: .data:00000D78o
.rdata:00000A6C $SG145386       db 'l',9,'c #8DA6DE',0  ; DATA XREF: .data:00000D7Co
.rdata:00000A78 $SG145387       db 'm',9,'c #1859C4',0  ; DATA XREF: .data:00000D80o
.rdata:00000A84 $SG145388       db 'n',9,'c #3B71CC',0  ; DATA XREF: .data:00000D84o
.rdata:00000A90 $SG145389       db 'o',9,'c #8EA5DD',0  ; DATA XREF: .data:00000D88o
.rdata:00000A9C $SG145390       db 'p',9,'c #164EC0',0  ; DATA XREF: .data:00000D8Co
.rdata:00000AA8 $SG145391       db 'q',9,'c #92A7DD',0  ; DATA XREF: .data:00000D90o
.rdata:00000AB4 $SG145392       db '    .+      ',0     ; DATA XREF: .data:00000D94o
.rdata:00000AC1                 align 4
.rdata:00000AC4 $SG145393       db '    @#$     ',0     ; DATA XREF: .data:00000D98o
.rdata:00000AD1                 align 4
.rdata:00000AD4 $SG145394       db '    %&*=    ',0     ; DATA XREF: .data:00000D9Co
.rdata:00000AE1                 align 4
.rdata:00000AE4 $SG145395       db '    -;>,',27h,'   ',0 ; DATA XREF: .data:00000DA0o
.rdata:00000AF1                 align 4
.rdata:00000AF4 $SG145396       db '    )!~{]^  ',0     ; DATA XREF: .data:00000DA4o
.rdata:00000B01                 align 4
.rdata:00000B04 $SG145397       db '    /(_:<[} ',0     ; DATA XREF: .data:00000DA8o
.rdata:00000B11                 align 4
.rdata:00000B14 $SG145398       db '    |123456 ',0     ; DATA XREF: .data:00000DACo
.rdata:00000B21                 align 4
.rdata:00000B24 $SG145399       db '    7890abc ',0     ; DATA XREF: .data:00000DB0o
.rdata:00000B31                 align 4
.rdata:00000B34 $SG145400       db '    defgh   ',0     ; DATA XREF: .data:00000DB4o
.rdata:00000B41                 align 4
.rdata:00000B44 $SG145401       db '    ijkl    ',0     ; DATA XREF: .data:00000DB8o
.rdata:00000B51                 align 4
.rdata:00000B54 $SG145402       db '    mno     ',0     ; DATA XREF: .data:00000DBCo
.rdata:00000B61                 align 4
.rdata:00000B64 $SG145403       db '    pq      ',0     ; DATA XREF: .data:00000DC0o
.rdata:00000B71                 align 4
.rdata:00000B74 $SG145405       db '12 12 54 1',0       ; DATA XREF: .data:_acBottom_xpmo
.rdata:00000B7F                 align 10h
.rdata:00000B80 $SG145406       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00000DCCo
.rdata:00000B8C $SG145407       db '.',9,'c #C4D7F3',0  ; DATA XREF: .data:00000DD0o
.rdata:00000B8C _rdata          ends
.rdata:00000B8C
.data:00000B98 ; ===========================================================================
.data:00000B98
.data:00000B98 ; Segment type: Pure data
.data:00000B98 ; Segment permissions: Read/Write
.data:00000B98 ; Segment alignment 'qword' can not be represented in assembly
.data:00000B98 _data           segment para public 'DATA' use32
.data:00000B98                 assume cs:_data
.data:00000B98                 ;org 0B98h
.data:00000B98 _bookmark_xpm   dd offset $SG145473     ; "13 14 54 1"
.data:00000B9C                 dd offset $SG145474     ; " \tc None"
.data:00000BA0                 dd offset $SG145475     ; ".\tc #545254"
.data:00000BA4                 dd offset $SG145476     ; "+\tc #3C3E3C"
.data:00000BA8                 dd offset $SG145477     ; "@\tc #646464"
.data:00000BAC                 dd offset $SG145478     ; "#\tc #A4A4A4"
.data:00000BB0                 dd offset $SG145479     ; "$\tc #B7B8B7"
.data:00000BB4                 dd offset $SG145480     ; "%\tc #747284"
.data:00000BB8                 dd offset $SG145481     ; "&\tc #B4B2C4"
.data:00000BBC                 dd offset $SG145482     ; "*\tc #DCD7E4"
.data:00000BC0                 dd offset $SG145483     ; "=\tc #1C1A1C"
.data:00000BC4                 dd offset $SG145484     ; "-\tc #403E58"
.data:00000BC8                 dd offset $SG145485     ; ";\tc #5C5A8C"
.data:00000BCC                 dd offset $SG145486     ; ">\tc #7C7EAC"
.data:00000BD0                 dd offset $SG145487     ; ",\tc #7C8EBC"
.data:00000BD4                 dd offset $SG145488     ; "'\tc #242644"
.data:00000BD8                 dd offset $SG145489     ; ")\tc #282668"
.data:00000BDC                 dd offset $SG145490     ; "!\tc #24367C"
.data:00000BE0                 dd offset $SG145491     ; "~\tc #244A84"
.data:00000BE4                 dd offset $SG145492     ; "{\tc #2C5098"
.data:00000BE8                 dd offset $SG145493     ; "]\tc #14162C"
.data:00000BEC                 dd offset $SG145494     ; "^\tc #142E7C"
.data:00000BF0                 dd offset $SG145495     ; "/\tc #143789"
.data:00000BF4                 dd offset $SG145496     ; "(\tc #204990"
.data:00000BF8                 dd offset $SG145497     ; "_\tc #174091"
.data:00000BFC                 dd offset $SG145498     ; ":\tc #0C0630"
.data:00000C00                 dd offset $SG145499     ; "<\tc #24327C"
.data:00000C04                 dd offset $SG145500     ; "[\tc #2450A0"
.data:00000C08                 dd offset $SG145501     ; "}\tc #345DB4"
.data:00000C0C                 dd offset $SG145502     ; "|\tc #3C68B8"
.data:00000C10                 dd offset $SG145503     ; "1\tc #141244"
.data:00000C14                 dd offset $SG145504     ; "2\tc #24428C"
.data:00000C18                 dd offset $SG145505     ; "3\tc #3462B9"
.data:00000C1C                 dd offset $SG145506     ; "4\tc #4470C4"
.data:00000C20                 dd offset $SG145507     ; "5\tc #4C7FD6"
.data:00000C24                 dd offset $SG145508     ; "6\tc #4472CC"
.data:00000C28                 dd offset $SG145509     ; "7\tc #24224C"
.data:00000C2C                 dd offset $SG145510     ; "8\tc #5C8DEC"
.data:00000C30                 dd offset $SG145511     ; "9\tc #5C94F6"
.data:00000C34                 dd offset $SG145512     ; "0\tc #5482DF"
.data:00000C38                 dd offset $SG145513     ; "a\tc #619DF7"
.data:00000C3C                 dd offset $SG145514     ; "b\tc #6CA6FC"
.data:00000C40                 dd offset $SG145515     ; "c\tc #64A2FC"
.data:00000C44                 dd offset $SG145516     ; "d\tc #1C2E5C"
.data:00000C48                 dd offset $SG145517     ; "e\tc #6CA2FC"
.data:00000C4C                 dd offset $SG145518     ; "f\tc #74B2FC"
.data:00000C50                 dd offset $SG145519     ; "g\tc #7CB8FC"
.data:00000C54                 dd offset $SG145520     ; "h\tc #1C3264"
.data:00000C58                 dd offset $SG145521     ; "i\tc #346AD4"
.data:00000C5C                 dd offset $SG145522     ; "j\tc #7CBEFC"
.data:00000C60                 dd offset $SG145523     ; "k\tc #3C72DC"
.data:00000C64                 dd offset $SG145524     ; "l\tc #243250"
.data:00000C68                 dd offset $SG145525     ; "m\tc #346AB4"
.data:00000C6C                 dd offset $SG145526     ; "n\tc #3C82DC"
.data:00000C70                 dd offset $SG145527     ; "o\tc #6C6A6C"
.data:00000C74                 dd offset $SG145528     ; "     .+.     "
.data:00000C78                 dd offset $SG145529     ; "   @##$##@   "
.data:00000C7C                 dd offset $SG145530     ; "  @%&***&%@  "
.data:00000C80                 dd offset $SG145531     ; " =-;>,,,>;-= "
.data:00000C84                 dd offset $SG145532     ; " ')!~{{{~!)' "
.data:00000C88                 dd offset $SG145533     ; "])^/({{{(_^)]"
.data:00000C8C                 dd offset $SG145534     ; ":<_[}|||}[_<:"
.data:00000C90                 dd offset $SG145535     ; "12[3455563[21"
.data:00000C94                 dd offset $SG145536     ; "7_365899063_7"
.data:00000C98                 dd offset $SG145537     ; " /|09abc904/ "
.data:00000C9C                 dd offset $SG145538     ; " d}8efgfb83d "
.data:00000CA0                 dd offset $SG145539     ; "  hiafjgakh  "
.data:00000CA4                 dd offset $SG145540     ; "   l~mnm~l   "
.data:00000CA8                 dd offset $SG145541     ; "     o@o     "
.data:00000CAC                 align 10h
.data:00000CB0 _acTop_xpm      dd offset $SG145335     ; "12 12 56 1"
.data:00000CB4                 dd offset $SG145336     ; " \tc #FFFFFF"
.data:00000CB8                 dd offset $SG145337     ; ".\tc #8AB2E9"
.data:00000CBC                 dd offset $SG145338     ; "+\tc #CCDCF6"
.data:00000CC0                 dd offset $SG145339     ; "@\tc #80ABEA"
.data:00000CC4                 dd offset $SG145340     ; "#\tc #7DA9E8"
.data:00000CC8                 dd offset $SG145341     ; "$\tc #C7DAF3"
.data:00000CCC                 dd offset $SG145342     ; "%\tc #79A7E6"
.data:00000CD0                 dd offset $SG145343     ; "&\tc #ADC8EF"
.data:00000CD4                 dd offset $SG145344     ; "*\tc #87B0E8"
.data:00000CD8                 dd offset $SG145345     ; "=\tc #BBD2F0"
.data:00000CDC                 dd offset $SG145346     ; "-\tc #6EA0E2"
.data:00000CE0                 dd offset $SG145347     ; ";\tc #A8C7EE"
.data:00000CE4                 dd offset $SG145348     ; ">\tc #A3C2ED"
.data:00000CE8                 dd offset $SG145349     ; ",\tc #75A4E3"
.data:00000CEC                 dd offset $SG145350     ; "'\tc #A7C4EB"
.data:00000CF0                 dd offset $SG145351     ; ")\tc #6297E1"
.data:00000CF4                 dd offset $SG145352     ; "!\tc #A1C1EC"
.data:00000CF8                 dd offset $SG145353     ; "~\tc #92B7E8"
.data:00000CFC                 dd offset $SG145354     ; "{\tc #99BBE9"
.data:00000D00                 dd offset $SG145355     ; "]\tc #6197DD"
.data:00000D04                 dd offset $SG145356     ; "^\tc #96B9E6"
.data:00000D08                 dd offset $SG145357     ; "/\tc #538EDB"
.data:00000D0C                 dd offset $SG145358     ; "(\tc #99BBEA"
.data:00000D10                 dd offset $SG145359     ; "_\tc #80AAE3"
.data:00000D14                 dd offset $SG145360     ; ":\tc #81ABE3"
.data:00000D18                 dd offset $SG145361     ; "<\tc #8AB1E4"
.data:00000D1C                 dd offset $SG145362     ; "[\tc #4B88D6"
.data:00000D20                 dd offset $SG145363     ; "}\tc #4882D1"
.data:00000D24                 dd offset $SG145364     ; "|\tc #4384D6"
.data:00000D28                 dd offset $SG145365     ; "1\tc #90B5E7"
.data:00000D2C                 dd offset $SG145366     ; "2\tc #74A3E0"
.data:00000D30                 dd offset $SG145367     ; "3\tc #77A4E0"
.data:00000D34                 dd offset $SG145368     ; "4\tc #81ABE2"
.data:00000D38                 dd offset $SG145369     ; "5\tc #437FD3"
.data:00000D3C                 dd offset $SG145370     ; "6\tc #7FA2DF"
.data:00000D40                 dd offset $SG145371     ; "7\tc #3577D2"
.data:00000D44                 dd offset $SG145372     ; "8\tc #87AFE4"
.data:00000D48                 dd offset $SG145373     ; "9\tc #72A1DF"
.data:00000D4C                 dd offset $SG145374     ; "0\tc #7CA9E1"
.data:00000D50                 dd offset $SG145375     ; "a\tc #3F7AD0"
.data:00000D54                 dd offset $SG145376     ; "b\tc #85A4DE"
.data:00000D58                 dd offset $SG145377     ; "c\tc #FBFCFE"
.data:00000D5C                 dd offset $SG145378     ; "d\tc #236ECD"
.data:00000D60                 dd offset $SG145379     ; "e\tc #7EA8E1"
.data:00000D64                 dd offset $SG145380     ; "f\tc #79A6E0"
.data:00000D68                 dd offset $SG145381     ; "g\tc #3D77D0"
.data:00000D6C                 dd offset $SG145382     ; "h\tc #87A4DC"
.data:00000D70                 dd offset $SG145383     ; "i\tc #1A62C9"
.data:00000D74                 dd offset $SG145384     ; "j\tc #75A3DF"
.data:00000D78                 dd offset $SG145385     ; "k\tc #3C74CF"
.data:00000D7C                 dd offset $SG145386     ; "l\tc #8DA6DE"
.data:00000D80                 dd offset $SG145387     ; "m\tc #1859C4"
.data:00000D84                 dd offset $SG145388     ; "n\tc #3B71CC"
.data:00000D88                 dd offset $SG145389     ; "o\tc #8EA5DD"
.data:00000D8C                 dd offset $SG145390     ; "p\tc #164EC0"
.data:00000D90                 dd offset $SG145391     ; "q\tc #92A7DD"
.data:00000D94                 dd offset $SG145392     ; "    .+      "
.data:00000D98                 dd offset $SG145393     ; "    @#$     "
.data:00000D9C                 dd offset $SG145394     ; "    %&*=    "
.data:00000DA0                 dd offset $SG145395     ; "    -;>,'   "
.data:00000DA4                 dd offset $SG145396     ; "    )!~{]^  "
.data:00000DA8                 dd offset $SG145397     ; "    /(_:<[} "
.data:00000DAC                 dd offset $SG145398     ; "    |123456 "
.data:00000DB0                 dd offset $SG145399     ; "    7890abc "
.data:00000DB4                 dd offset $SG145400     ; "    defgh   "
.data:00000DB8                 dd offset $SG145401     ; "    ijkl    "
.data:00000DBC                 dd offset $SG145402     ; "    mno     "
.data:00000DC0                 dd offset $SG145403     ; "    pq      "
.data:00000DC4                 align 8
.data:00000DC8 _acBottom_xpm   dd offset $SG145405     ; "12 12 54 1"
.data:00000DCC                 dd offset $SG145406     ; " \tc #FFFFFF"
.data:00000DD0                 dd offset $SG145407     ; ".\tc #C4D7F3"
.data:00000DD4                 dd offset $SG145408     ; "+\tc #72A1E3"
.data:00000DD8                 dd offset $SG145409     ; "@\tc #C1D6F2"
.data:00000DDC                 dd offset $SG145410     ; "#\tc #6397E1"
.data:00000DE0                 dd offset $SG145411     ; "$\tc #5990DD"
.data:00000DE4                 dd offset $SG145412     ; "%\tc #BBD2F0"
.data:00000DE8                 dd offset $SG145413     ; "&\tc #7AA6E5"
.data:00000DEC                 dd offset $SG145414     ; "*\tc #9ABDEA"
.data:00000DF0                 dd offset $SG145415     ; "=\tc #4A87D9"
.data:00000DF4                 dd offset $SG145416
.data:00000DF8                 dd offset $SG145417     ; ";\tc #75A4E3"
.data:00000DFC                 dd offset $SG145418     ; ">\tc #99BBE9"
.data:00000E00                 dd offset $SG145419     ; ",\tc #95B9E8"
.data:00000E04                 dd offset $SG145420     ; "'\tc #3A7CD4"
.data:00000E08                 dd offset $SG145421     ; ")\tc #A9C6EC"
.data:00000E0C                 dd offset $SG145422     ; "!\tc #71A0E0"
.data:00000E10                 dd offset $SG145423     ; "~\tc #86AFE5"
.data:00000E14                 dd offset $SG145424     ; "{\tc #8DB2E6"
.data:00000E18                 dd offset $SG145425     ; "]\tc #2A72CF"
.data:00000E1C                 dd offset $SG145426     ; "^\tc #73A0E0"
.data:00000E20                 dd offset $SG145427     ; "/\tc #6B9DE0"
.data:00000E24                 dd offset $SG145428     ; "(\tc #95B8E8"
.data:00000E28                 dd offset $SG145429     ; "_\tc #81ABE3"
.data:00000E2C                 dd offset $SG145430     ; ":\tc #72A1DF"
.data:00000E30                 dd offset $SG145431     ; "<\tc #83ADE3"
.data:00000E34                 dd offset $SG145432     ; "[\tc #1B65C9"
.data:00000E38                 dd offset $SG145433     ; "}\tc #5F95DC"
.data:00000E3C                 dd offset $SG145434     ; "|\tc #8BB3E5"
.data:00000E40                 dd offset $SG145435     ; "1\tc #77A4E0"
.data:00000E44                 dd offset $SG145436     ; "2\tc #679ADC"
.data:00000E48                 dd offset $SG145437     ; "3\tc #7AA6E1"
.data:00000E4C                 dd offset $SG145438     ; "4\tc #195CC6"
.data:00000E50                 dd offset $SG145439     ; "5\tc #FCFDFE"
.data:00000E54                 dd offset $SG145440     ; "6\tc #8DB2E4"
.data:00000E58                 dd offset $SG145441     ; "7\tc #4885D6"
.data:00000E5C                 dd offset $SG145442     ; "8\tc #7CA9E1"
.data:00000E60                 dd offset $SG145443     ; "9\tc #6698DB"
.data:00000E64                 dd offset $SG145444     ; "0\tc #71A1DE"
.data:00000E68                 dd offset $SG145445     ; "a\tc #1752C0"
.data:00000E6C                 dd offset $SG145446     ; "b\tc #88ABE0"
.data:00000E70                 dd offset $SG145447     ; "c\tc #3D77D0"
.data:00000E74                 dd offset $SG145448     ; "d\tc #6E9FDD"
.data:00000E78                 dd offset $SG145449     ; "e\tc #699BDC"
.data:00000E7C                 dd offset $SG145450     ; "f\tc #1547BD"
.data:00000E80                 dd offset $SG145451     ; "g\tc #8DA6DE"
.data:00000E84                 dd offset $SG145452     ; "h\tc #376BC9"
.data:00000E88                 dd offset $SG145453     ; "i\tc #6295DA"
.data:00000E8C                 dd offset $SG145454     ; "j\tc #1440B9"
.data:00000E90                 dd offset $SG145455     ; "k\tc #8DA0DB"
.data:00000E94                 dd offset $SG145456     ; "l\tc #315FC4"
.data:00000E98                 dd offset $SG145457     ; "m\tc #1339B7"
.data:00000E9C                 dd offset $SG145458     ; "n\tc #909FDA"
.data:00000EA0                 dd offset $SG145459     ; "o\tc #1233B4"
.data:00000EA4                 dd offset $SG145460     ; "         .+ "
.data:00000EA8                 dd offset $SG145461     ; "        @#$ "
.data:00000EAC                 dd offset $SG145462     ; "       %&*= L"
.data:00000EB0                 dd offset $SG145463     ; "      -;>,' "
.data:00000EB4                 dd offset $SG145464     ; "     )!>~{] "
.data:00000EB8                 dd offset $SG145465     ; "    ^/(_:<[ "
.data:00000EBC                 dd offset $SG145466     ; "    (}|1234 "
.data:00000EC0                 dd offset $SG145467     ; "    567890a "
.data:00000EC4                 dd offset $SG145468     ; "      bcdef "
.data:00000EC8                 dd offset $SG145469     ; "       ghij "
.data:00000ECC                 dd offset $SG145470     ; "        klm "
.data:00000ED0                 dd offset $SG145471     ; "         no "
.data:00000ED0 _data           ends
.data:00000ED0
.bss:00000ED4 ; ===========================================================================
.bss:00000ED4
.bss:00000ED4 ; Segment type: Uninitialized
.bss:00000ED4 ; Segment permissions: Read/Write
.bss:00000ED4 _bss            segment dword public 'BSS' use32
.bss:00000ED4                 assume cs:_bss
.bss:00000ED4                 ;org 0ED4h
.bss:00000ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:00000ED4                 public ?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A
.bss:00000ED4 ; public: static struct HWND__ * Notepad_plus_Window::gNppHWND
.bss:00000ED4 ?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A dd ?
.bss:00000ED4                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+233w
.bss:00000ED8 __Tuple_alloc   db    ? ;
.bss:00000ED9 ; std::_Ignore ignore
.bss:00000ED9 _ignore         db    ? ;               ; DATA XREF: std::`dynamic initializer for 'ignore''(void)+3o
.bss:00000EDA _allocator_arg  db    ? ;
.bss:00000EDB _piecewise_construct db    ? ;
.bss:00000EDB _bss            ends
.bss:00000EDB
.text$mn:00000EDC ; ===========================================================================
.text$mn:00000EDC
.text$mn:00000EDC ; Segment type: Pure code
.text$mn:00000EDC ; Segment permissions: Read/Execute
.text$mn:00000EDC _text$mn        segment para public 'CODE' use32
.text$mn:00000EDC                 assume cs:_text$mn
.text$mn:00000EDC                 ;org 0EDCh
.text$mn:00000EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00000EDC
.text$mn:00000EDC ; =============== S U B R O U T I N E =======================================
.text$mn:00000EDC
.text$mn:00000EDC ; Attributes: bp-based frame
.text$mn:00000EDC
.text$mn:00000EDC ; double __cdecl static difftime(time_t Time1, time_t Time2)
.text$mn:00000EDC _difftime       proc near               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D74p
.text$mn:00000EDC
.text$mn:00000EDC Time1           = dword ptr  8
.text$mn:00000EDC Time2           = dword ptr  0Ch
.text$mn:00000EDC arg_8           = qword ptr  10h
.text$mn:00000EDC
.text$mn:00000EDC                 push    ebp
.text$mn:00000EDD                 mov     ebp, esp
.text$mn:00000EDF                 mov     eax, dword ptr [ebp+arg_8+4]
.text$mn:00000EE2                 push    eax
.text$mn:00000EE3                 mov     ecx, dword ptr [ebp+arg_8]
.text$mn:00000EE6                 push    ecx             ; Time2
.text$mn:00000EE7                 mov     edx, [ebp+Time2]
.text$mn:00000EEA                 push    edx
.text$mn:00000EEB                 mov     eax, [ebp+Time1]
.text$mn:00000EEE                 push    eax             ; Time1
.text$mn:00000EEF                 call    __difftime64
.text$mn:00000EF4                 add     esp, 10h
.text$mn:00000EF7                 pop     ebp
.text$mn:00000EF8                 retn
.text$mn:00000EF8 _difftime       endp
.text$mn:00000EF8
.text$mn:00000EF8 ; ---------------------------------------------------------------------------
.text$mn:00000EF9                 align 4
.text$mn:00000EFC
.text$mn:00000EFC ; =============== S U B R O U T I N E =======================================
.text$mn:00000EFC
.text$mn:00000EFC ; Attributes: bp-based frame
.text$mn:00000EFC
.text$mn:00000EFC ; time_t __cdecl static time(time_t *Time)
.text$mn:00000EFC _time           proc near               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+4Ap
.text$mn:00000EFC                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D44p
.text$mn:00000EFC
.text$mn:00000EFC Time            = dword ptr  8
.text$mn:00000EFC
.text$mn:00000EFC                 push    ebp
.text$mn:00000EFD                 mov     ebp, esp
.text$mn:00000EFF                 mov     eax, [ebp+Time]
.text$mn:00000F02                 push    eax             ; Time
.text$mn:00000F03                 call    __time64
.text$mn:00000F08                 add     esp, 4
.text$mn:00000F0B                 pop     ebp
.text$mn:00000F0C                 retn
.text$mn:00000F0C _time           endp
.text$mn:00000F0C
.text$mn:00000F0C ; ---------------------------------------------------------------------------
.text$mn:00000F0D                 db 0Fh dup(0CCh)
.text$mn:00000F1C
.text$mn:00000F1C ; =============== S U B R O U T I N E =======================================
.text$mn:00000F1C
.text$mn:00000F1C ; Attributes: bp-based frame
.text$mn:00000F1C
.text$mn:00000F1C ; void __thiscall Notepad_plus_Window::init(Notepad_plus_Window *this, HINSTANCE hInstance, HWND, const wchar_t *, struct CmdLineParams *)
.text$mn:00000F1C                 public ?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z
.text$mn:00000F1C ?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z proc near
.text$mn:00000F1C
.text$mn:00000F1C var_548         = qword ptr -548h
.text$mn:00000F1C var_53C         = dword ptr -53Ch
.text$mn:00000F1C var_538         = dword ptr -538h
.text$mn:00000F1C var_534         = dword ptr -534h
.text$mn:00000F1C var_4E0         = byte ptr -4E0h
.text$mn:00000F1C var_4D4         = byte ptr -4D4h
.text$mn:00000F1C var_4C8         = dword ptr -4C8h
.text$mn:00000F1C var_4C4         = dword ptr -4C4h
.text$mn:00000F1C var_4C0         = dword ptr -4C0h
.text$mn:00000F1C var_4BC         = dword ptr -4BCh
.text$mn:00000F1C var_4B8         = dword ptr -4B8h
.text$mn:00000F1C var_4B4         = dword ptr -4B4h
.text$mn:00000F1C var_4B0         = qword ptr -4B0h
.text$mn:00000F1C var_4A8         = dword ptr -4A8h
.text$mn:00000F1C var_4A4         = dword ptr -4A4h
.text$mn:00000F1C var_4A0         = dword ptr -4A0h
.text$mn:00000F1C var_49C         = dword ptr -49Ch
.text$mn:00000F1C var_498         = dword ptr -498h
.text$mn:00000F1C WndClass        = WNDCLASSW ptr -494h
.text$mn:00000F1C var_46C         = byte ptr -46Ch
.text$mn:00000F1C var_45C         = dword ptr -45Ch
.text$mn:00000F1C var_458         = dword ptr -458h
.text$mn:00000F1C var_454         = dword ptr -454h
.text$mn:00000F1C var_450         = dword ptr -450h
.text$mn:00000F1C var_44C         = dword ptr -44Ch
.text$mn:00000F1C var_448         = dword ptr -448h
.text$mn:00000F1C Time1           = dword ptr -444h
.text$mn:00000F1C Time2           = dword ptr -440h
.text$mn:00000F1C var_43C         = dword ptr -43Ch
.text$mn:00000F1C var_438         = dword ptr -438h
.text$mn:00000F1C var_434         = dword ptr -434h
.text$mn:00000F1C var_430         = dword ptr -430h
.text$mn:00000F1C var_42C         = dword ptr -42Ch
.text$mn:00000F1C var_428         = dword ptr -428h
.text$mn:00000F1C var_424         = dword ptr -424h
.text$mn:00000F1C var_420         = dword ptr -420h
.text$mn:00000F1C var_41C         = qword ptr -41Ch
.text$mn:00000F1C var_414         = dword ptr -414h
.text$mn:00000F1C var_410         = dword ptr -410h
.text$mn:00000F1C var_40C         = dword ptr -40Ch
.text$mn:00000F1C var_408         = dword ptr -408h
.text$mn:00000F1C nCmdShow        = dword ptr -404h
.text$mn:00000F1C var_400         = dword ptr -400h
.text$mn:00000F1C var_3FC         = byte ptr -3FCh
.text$mn:00000F1C var_3EC         = dword ptr -3ECh
.text$mn:00000F1C var_3E8         = dword ptr -3E8h
.text$mn:00000F1C var_3E4         = dword ptr -3E4h
.text$mn:00000F1C var_3E0         = dword ptr -3E0h
.text$mn:00000F1C var_3DC         = dword ptr -3DCh
.text$mn:00000F1C var_3D8         = dword ptr -3D8h
.text$mn:00000F1C var_3D1         = byte ptr -3D1h
.text$mn:00000F1C var_3D0         = dword ptr -3D0h
.text$mn:00000F1C lpParam         = dword ptr -3CCh
.text$mn:00000F1C var_3C8         = byte ptr -3C8h
.text$mn:00000F1C var_3AC         = byte ptr -3ACh
.text$mn:00000F1C var_390         = byte ptr -390h
.text$mn:00000F1C var_374         = byte ptr -374h
.text$mn:00000F1C var_358         = byte ptr -358h
.text$mn:00000F1C var_33C         = byte ptr -33Ch
.text$mn:00000F1C var_320         = byte ptr -320h
.text$mn:00000F1C var_304         = byte ptr -304h
.text$mn:00000F1C var_2E8         = byte ptr -2E8h
.text$mn:00000F1C var_2CC         = byte ptr -2CCh
.text$mn:00000F1C var_2B0         = byte ptr -2B0h
.text$mn:00000F1C var_294         = byte ptr -294h
.text$mn:00000F1C var_278         = byte ptr -278h
.text$mn:00000F1C wndpl           = WINDOWPLACEMENT ptr -25Ch
.text$mn:00000F1C var_230         = byte ptr -230h
.text$mn:00000F1C Text            = byte ptr -214h
.text$mn:00000F1C Dest            = byte ptr -114h
.text$mn:00000F1C var_10          = dword ptr -10h
.text$mn:00000F1C var_C           = dword ptr -0Ch
.text$mn:00000F1C var_4           = dword ptr -4
.text$mn:00000F1C hInstance       = dword ptr  8
.text$mn:00000F1C arg_4           = dword ptr  0Ch
.text$mn:00000F1C arg_8           = dword ptr  10h
.text$mn:00000F1C arg_C           = dword ptr  14h
.text$mn:00000F1C
.text$mn:00000F1C                 push    ebp
.text$mn:00000F1D                 mov     ebp, esp
.text$mn:00000F1F                 push    0FFFFFFFFh
.text$mn:00000F21                 push    offset __ehhandler$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z
.text$mn:00000F26                 mov     eax, large fs:0
.text$mn:00000F2C                 push    eax
.text$mn:00000F2D                 sub     esp, 530h
.text$mn:00000F33                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00000F38                 xor     eax, ebp
.text$mn:00000F3A                 mov     [ebp+var_10], eax
.text$mn:00000F3D                 push    eax
.text$mn:00000F3E                 lea     eax, [ebp+var_C]
.text$mn:00000F41                 mov     large fs:0, eax
.text$mn:00000F47                 mov     [ebp+lpParam], ecx
.text$mn:00000F4D                 xorpd   xmm0, xmm0
.text$mn:00000F51                 movlpd  [ebp+var_41C], xmm0
.text$mn:00000F59                 mov     eax, [ebp+arg_C]
.text$mn:00000F5C                 movzx   ecx, byte ptr [eax+5]
.text$mn:00000F60                 test    ecx, ecx
.text$mn:00000F62                 jz      short loc_F7A
.text$mn:00000F64                 push    0               ; Time
.text$mn:00000F66                 call    _time
.text$mn:00000F6B                 add     esp, 4
.text$mn:00000F6E                 mov     dword ptr [ebp+var_41C], eax
.text$mn:00000F74                 mov     dword ptr [ebp+var_41C+4], edx
.text$mn:00000F7A
.text$mn:00000F7A loc_F7A:                                ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+46j
.text$mn:00000F7A                 mov     edx, [ebp+arg_4]
.text$mn:00000F7D                 push    edx             ; HWND
.text$mn:00000F7E                 mov     eax, [ebp+hInstance]
.text$mn:00000F81                 push    eax             ; HINSTANCE
.text$mn:00000F82                 mov     ecx, [ebp+lpParam] ; this
.text$mn:00000F88                 call    ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z ; Window::init(HINSTANCE__ *,HWND__ *)
.text$mn:00000F8D                 mov     [ebp+WndClass.style], 2008h
.text$mn:00000F97                 mov     [ebp+WndClass.lpfnWndProc], offset ?Notepad_plus_Proc@Notepad_plus_Window@@CGJPAUHWND__@@IIJ@Z ; Notepad_plus_Window::Notepad_plus_Proc(HWND__ *,uint,uint,long)
.text$mn:00000FA1                 mov     [ebp+WndClass.cbClsExtra], 0
.text$mn:00000FAB                 mov     [ebp+WndClass.cbWndExtra], 0
.text$mn:00000FB5                 mov     ecx, [ebp+lpParam]
.text$mn:00000FBB                 mov     edx, [ecx+4]
.text$mn:00000FBE                 mov     [ebp+WndClass.hInstance], edx
.text$mn:00000FC4                 push    offset IconName ; lpIconName
.text$mn:00000FC6                 mov     eax, [ebp+hInstance]
.text$mn:00000FC9                 push    eax             ; hInstance
.text$mn:00000FCA                 call    dword ptr ds:__imp__LoadIconW@8 ; LoadIconW(x,x)
.text$mn:00000FD0                 mov     [ebp+WndClass.hIcon], eax
.text$mn:00000FD6                 push    (offset locret_7EFE+2) ; lpCursorName
.text$mn:00000FDB                 push    0               ; hInstance
.text$mn:00000FDD                 call    dword ptr ds:__imp__LoadCursorW@8 ; LoadCursorW(x,x)
.text$mn:00000FE3                 mov     [ebp+WndClass.hCursor], eax
.text$mn:00000FE9                 push    4               ; nIndex
.text$mn:00000FEB                 call    dword ptr ds:__imp__GetSysColor@4 ; GetSysColor(x)
.text$mn:00000FF1                 push    eax             ; color
.text$mn:00000FF2                 call    dword ptr ds:__imp__CreateSolidBrush@4 ; CreateSolidBrush(x)
.text$mn:00000FF8                 mov     [ebp+WndClass.hbrBackground], eax
.text$mn:00000FFE                 mov     [ebp+WndClass.lpszMenuName], 5DCh
.text$mn:00001008                 mov     [ebp+WndClass.lpszClassName], offset ?_className@Notepad_plus_Window@@0QB_WB ; "Notepad++"
.text$mn:00001012                 mov     ecx, [ebp+lpParam]
.text$mn:00001018                 mov     edx, [ebp+arg_C]
.text$mn:0000101B                 mov     al, [edx+4]
.text$mn:0000101E                 mov     [ecx+551DCh], al
.text$mn:00001024                 lea     ecx, [ebp+WndClass]
.text$mn:0000102A                 push    ecx             ; lpWndClass
.text$mn:0000102B                 call    dword ptr ds:__imp__RegisterClassW@4 ; RegisterClassW(x)
.text$mn:00001031                 movzx   edx, ax
.text$mn:00001034                 test    edx, edx
.text$mn:00001036                 jnz     short loc_1059
.text$mn:00001038                 push    offset $SG169363 ; "Notepad_plus_Window::init : RegisterCla"...
.text$mn:0000103D                 lea     ecx, [ebp+var_4E0] ; this
.text$mn:00001043                 call    ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error(char const *)
.text$mn:00001048                 push    offset __TI2?AVruntime_error@std@@
.text$mn:0000104D                 lea     eax, [ebp+var_4E0]
.text$mn:00001053                 push    eax
.text$mn:00001054                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00001059 ; ---------------------------------------------------------------------------
.text$mn:00001059
.text$mn:00001059 loc_1059:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+11Aj
.text$mn:00001059                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:0000105E                 mov     [ebp+var_3D8], eax
.text$mn:00001064                 mov     ecx, [ebp+var_3D8] ; this
.text$mn:0000106A                 call    ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ ; NppParameters::getNppGUI(void)
.text$mn:0000106F                 mov     [ebp+var_3D0], eax
.text$mn:00001075                 mov     ecx, [ebp+arg_C]
.text$mn:00001078                 movzx   edx, byte ptr [ecx]
.text$mn:0000107B                 test    edx, edx
.text$mn:0000107D                 jz      short loc_1090
.text$mn:0000107F                 mov     ecx, [ebp+lpParam]
.text$mn:00001085                 add     ecx, 54BDCh     ; this
.text$mn:0000108B                 call    ?disable@PluginsManager@@QAEXXZ ; PluginsManager::disable(void)
.text$mn:00001090
.text$mn:00001090 loc_1090:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+161j
.text$mn:00001090                 mov     ecx, [ebp+lpParam]
.text$mn:00001096                 add     ecx, 35Ch       ; this
.text$mn:0000109C                 call    ?isRTL@NativeLangSpeaker@@QBE_NXZ ; NativeLangSpeaker::isRTL(void)
.text$mn:000010A1                 movzx   eax, al
.text$mn:000010A4                 test    eax, eax
.text$mn:000010A6                 jz      short loc_10B4
.text$mn:000010A8                 mov     [ebp+var_414], 400000h
.text$mn:000010B2                 jmp     short loc_10BE
.text$mn:000010B4 ; ---------------------------------------------------------------------------
.text$mn:000010B4
.text$mn:000010B4 loc_10B4:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+18Aj
.text$mn:000010B4                 mov     [ebp+var_414], 0
.text$mn:000010BE
.text$mn:000010BE loc_10BE:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+196j
.text$mn:000010BE                 mov     ecx, [ebp+lpParam]
.text$mn:000010C4                 push    ecx             ; lpParam
.text$mn:000010C5                 mov     edx, [ebp+lpParam]
.text$mn:000010CB                 mov     eax, [edx+4]
.text$mn:000010CE                 push    eax             ; hInstance
.text$mn:000010CF                 push    0               ; hMenu
.text$mn:000010D1                 mov     ecx, [ebp+lpParam]
.text$mn:000010D7                 mov     edx, [ecx+8]
.text$mn:000010DA                 push    edx             ; hWndParent
.text$mn:000010DB                 push    0               ; nHeight
.text$mn:000010DD                 push    0               ; nWidth
.text$mn:000010DF                 push    0               ; Y
.text$mn:000010E1                 push    0               ; X
.text$mn:000010E3                 push    2CF0000h        ; dwStyle
.text$mn:000010E8                 push    offset $SG169369 ; "Notepad++"
.text$mn:000010ED                 push    offset ?_className@Notepad_plus_Window@@0QB_WB ; "Notepad++"
.text$mn:000010F2                 mov     eax, [ebp+var_414]
.text$mn:000010F8                 or      eax, 10h
.text$mn:000010FB                 push    eax             ; dwExStyle
.text$mn:000010FC                 call    dword ptr ds:__imp__CreateWindowExW@48 ; CreateWindowExW(x,x,x,x,x,x,x,x,x,x,x,x)
.text$mn:00001102                 mov     ecx, [ebp+lpParam]
.text$mn:00001108                 mov     [ecx+0Ch], eax
.text$mn:0000110B                 mov     edx, [ebp+lpParam]
.text$mn:00001111                 cmp     dword ptr [edx+0Ch], 0
.text$mn:00001115                 jnz     short loc_1138
.text$mn:00001117                 push    offset $SG169373 ; "Notepad_plus_Window::init : CreateWindo"...
.text$mn:0000111C                 lea     ecx, [ebp+var_4D4] ; this
.text$mn:00001122                 call    ??0runtime_error@std@@QAE@PBD@Z ; std::runtime_error::runtime_error(char const *)
.text$mn:00001127                 push    offset __TI2?AVruntime_error@std@@
.text$mn:0000112C                 lea     eax, [ebp+var_4D4]
.text$mn:00001132                 push    eax
.text$mn:00001133                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00001138 ; ---------------------------------------------------------------------------
.text$mn:00001138
.text$mn:00001138 loc_1138:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+1F9j
.text$mn:00001138                 mov     ecx, [ebp+lpParam]
.text$mn:0000113E                 add     ecx, 10h        ; this
.text$mn:00001141                 call    ?staticCheckMenuAndTB@Notepad_plus@@ABEXXZ ; Notepad_plus::staticCheckMenuAndTB(void)
.text$mn:00001146                 mov     ecx, [ebp+lpParam]
.text$mn:0000114C                 mov     edx, [ecx+0Ch]
.text$mn:0000114F                 mov     ds:?gNppHWND@Notepad_plus_Window@@2PAUHWND__@@A, edx ; HWND__ * Notepad_plus_Window::gNppHWND
.text$mn:00001155                 mov     ecx, [ebp+arg_C] ; this
.text$mn:00001158                 call    ?isPointValid@CmdLineParams@@QAE_NXZ ; CmdLineParams::isPointValid(void)
.text$mn:0000115D                 movzx   eax, al
.text$mn:00001160                 test    eax, eax
.text$mn:00001162                 jz      short loc_119D
.text$mn:00001164                 push    1               ; bRepaint
.text$mn:00001166                 mov     ecx, [ebp+var_3D0]
.text$mn:0000116C                 mov     edx, [ecx+34h]
.text$mn:0000116F                 push    edx             ; nHeight
.text$mn:00001170                 mov     eax, [ebp+var_3D0]
.text$mn:00001176                 mov     ecx, [eax+30h]
.text$mn:00001179                 push    ecx             ; nWidth
.text$mn:0000117A                 mov     edx, [ebp+arg_C]
.text$mn:0000117D                 mov     eax, [edx+14h]
.text$mn:00001180                 push    eax             ; Y
.text$mn:00001181                 mov     ecx, [ebp+arg_C]
.text$mn:00001184                 mov     edx, [ecx+10h]
.text$mn:00001187                 push    edx             ; X
.text$mn:00001188                 mov     eax, [ebp+lpParam]
.text$mn:0000118E                 mov     ecx, [eax+0Ch]
.text$mn:00001191                 push    ecx             ; hWnd
.text$mn:00001192                 call    dword ptr ds:__imp__MoveWindow@24 ; MoveWindow(x,x,x,x,x,x)
.text$mn:00001198                 jmp     loc_128B
.text$mn:0000119D ; ---------------------------------------------------------------------------
.text$mn:0000119D
.text$mn:0000119D loc_119D:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+246j
.text$mn:0000119D                 mov     [ebp+wndpl.length], 2Ch ; ','
.text$mn:000011A7                 mov     [ebp+wndpl.flags], 0
.text$mn:000011B1                 mov     edx, [ebp+lpParam]
.text$mn:000011B7                 movzx   eax, byte ptr [edx+551DCh]
.text$mn:000011BE                 test    eax, eax
.text$mn:000011C0                 jz      short loc_11CE
.text$mn:000011C2                 mov     [ebp+wndpl.showCmd], 0
.text$mn:000011CC                 jmp     short loc_11FE
.text$mn:000011CE ; ---------------------------------------------------------------------------
.text$mn:000011CE
.text$mn:000011CE loc_11CE:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+2A4j
.text$mn:000011CE                 mov     ecx, [ebp+var_3D0]
.text$mn:000011D4                 movzx   edx, byte ptr [ecx+38h]
.text$mn:000011D8                 test    edx, edx
.text$mn:000011DA                 jz      short loc_11E8
.text$mn:000011DC                 mov     [ebp+var_40C], 3
.text$mn:000011E6                 jmp     short loc_11F2
.text$mn:000011E8 ; ---------------------------------------------------------------------------
.text$mn:000011E8
.text$mn:000011E8 loc_11E8:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+2BEj
.text$mn:000011E8                 mov     [ebp+var_40C], 1
.text$mn:000011F2
.text$mn:000011F2 loc_11F2:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+2CAj
.text$mn:000011F2                 mov     eax, [ebp+var_40C]
.text$mn:000011F8                 mov     [ebp+wndpl.showCmd], eax
.text$mn:000011FE
.text$mn:000011FE loc_11FE:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+2B0j
.text$mn:000011FE                 mov     [ebp+wndpl.ptMinPosition.x], 0FFFFFFFFh
.text$mn:00001208                 mov     [ebp+wndpl.ptMinPosition.y], 0FFFFFFFFh
.text$mn:00001212                 mov     [ebp+wndpl.ptMaxPosition.x], 0FFFFFFFFh
.text$mn:0000121C                 mov     [ebp+wndpl.ptMaxPosition.y], 0FFFFFFFFh
.text$mn:00001226                 mov     ecx, [ebp+var_3D0]
.text$mn:0000122C                 mov     edx, [ecx+28h]
.text$mn:0000122F                 mov     [ebp+wndpl.rcNormalPosition.left], edx
.text$mn:00001235                 mov     eax, [ebp+var_3D0]
.text$mn:0000123B                 mov     ecx, [eax+2Ch]
.text$mn:0000123E                 mov     [ebp+wndpl.rcNormalPosition.top], ecx
.text$mn:00001244                 mov     edx, [ebp+var_3D0]
.text$mn:0000124A                 mov     eax, [edx+2Ch]
.text$mn:0000124D                 mov     ecx, [ebp+var_3D0]
.text$mn:00001253                 add     eax, [ecx+34h]
.text$mn:00001256                 mov     [ebp+wndpl.rcNormalPosition.bottom], eax
.text$mn:0000125C                 mov     edx, [ebp+var_3D0]
.text$mn:00001262                 mov     eax, [edx+28h]
.text$mn:00001265                 mov     ecx, [ebp+var_3D0]
.text$mn:0000126B                 add     eax, [ecx+30h]
.text$mn:0000126E                 mov     [ebp+wndpl.rcNormalPosition.right], eax
.text$mn:00001274                 lea     edx, [ebp+wndpl]
.text$mn:0000127A                 push    edx             ; lpwndpl
.text$mn:0000127B                 mov     eax, [ebp+lpParam]
.text$mn:00001281                 mov     ecx, [eax+0Ch]
.text$mn:00001284                 push    ecx             ; hWnd
.text$mn:00001285                 call    dword ptr ds:__imp__SetWindowPlacement@8 ; SetWindowPlacement(x,x)
.text$mn:0000128B
.text$mn:0000128B loc_128B:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+27Cj
.text$mn:0000128B                 mov     edx, [ebp+var_3D0]
.text$mn:00001291                 mov     eax, [edx+8]
.text$mn:00001294                 and     eax, 80h
.text$mn:00001299                 jz      short loc_12B7
.text$mn:0000129B                 push    0               ; lParam
.text$mn:0000129D                 push    0AC0Ch          ; wParam
.text$mn:000012A2                 push    111h            ; Msg
.text$mn:000012A7                 mov     ecx, [ebp+lpParam]
.text$mn:000012AD                 mov     edx, [ecx+0Ch]
.text$mn:000012B0                 push    edx             ; hWnd
.text$mn:000012B1                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000012B7
.text$mn:000012B7 loc_12B7:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+37Dj
.text$mn:000012B7                 mov     eax, [ebp+var_3D0]
.text$mn:000012BD                 movzx   ecx, byte ptr [eax+6]
.text$mn:000012C1                 test    ecx, ecx
.text$mn:000012C3                 jnz     short loc_12D7
.text$mn:000012C5                 push    0               ; hMenu
.text$mn:000012C7                 mov     edx, [ebp+lpParam]
.text$mn:000012CD                 mov     eax, [edx+0Ch]
.text$mn:000012D0                 push    eax             ; hWnd
.text$mn:000012D1                 call    dword ptr ds:__imp__SetMenu@8 ; SetMenu(x,x)
.text$mn:000012D7
.text$mn:000012D7 loc_12D7:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+3A7j
.text$mn:000012D7                 mov     ecx, [ebp+arg_C]
.text$mn:000012DA                 movzx   edx, byte ptr [ecx+3]
.text$mn:000012DE                 test    edx, edx
.text$mn:000012E0                 jnz     short loc_12F3
.text$mn:000012E2                 mov     eax, [ebp+var_3D0]
.text$mn:000012E8                 mov     ecx, [eax+8]
.text$mn:000012EB                 and     ecx, 100h
.text$mn:000012F1                 jz      short loc_1335
.text$mn:000012F3
.text$mn:000012F3 loc_12F3:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+3C4j
.text$mn:000012F3                 mov     edx, [ebp+var_3D0]
.text$mn:000012F9                 mov     eax, [edx+8]
.text$mn:000012FC                 mov     [ebp+var_43C], eax
.text$mn:00001302                 push    1               ; lParam
.text$mn:00001304                 push    0               ; wParam
.text$mn:00001306                 push    81Bh            ; Msg
.text$mn:0000130B                 mov     ecx, [ebp+lpParam]
.text$mn:00001311                 mov     edx, [ecx+0Ch]
.text$mn:00001314                 push    edx             ; hWnd
.text$mn:00001315                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000131B                 mov     eax, [ebp+arg_C]
.text$mn:0000131E                 movzx   ecx, byte ptr [eax+3]
.text$mn:00001322                 test    ecx, ecx
.text$mn:00001324                 jz      short loc_1335
.text$mn:00001326                 mov     edx, [ebp+var_3D0]
.text$mn:0000132C                 mov     eax, [ebp+var_43C]
.text$mn:00001332                 mov     [edx+8], eax
.text$mn:00001335
.text$mn:00001335 loc_1335:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+3D5j
.text$mn:00001335                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+408j
.text$mn:00001335                 mov     ecx, [ebp+arg_C]
.text$mn:00001338                 movzx   edx, byte ptr [ecx+6]
.text$mn:0000133C                 test    edx, edx
.text$mn:0000133E                 jz      short loc_135C
.text$mn:00001340                 push    0               ; lParam
.text$mn:00001342                 push    0AC02h          ; wParam
.text$mn:00001347                 push    111h            ; Msg
.text$mn:0000134C                 mov     eax, [ebp+lpParam]
.text$mn:00001352                 mov     ecx, [eax+0Ch]
.text$mn:00001355                 push    ecx             ; hWnd
.text$mn:00001356                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:0000135C
.text$mn:0000135C loc_135C:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+422j
.text$mn:0000135C                 mov     edx, [ebp+var_3D0]
.text$mn:00001362                 mov     eax, [ebp+arg_C]
.text$mn:00001365                 mov     cl, [eax+2]
.text$mn:00001368                 mov     [edx+3Bh], cl
.text$mn:0000136B                 mov     edx, [ebp+var_3D0]
.text$mn:00001371                 movzx   eax, byte ptr [edx+3Ah]
.text$mn:00001375                 test    eax, eax
.text$mn:00001377                 jz      short loc_1392
.text$mn:00001379                 mov     ecx, [ebp+arg_C]
.text$mn:0000137C                 movzx   edx, byte ptr [ecx+2]
.text$mn:00001380                 test    edx, edx
.text$mn:00001382                 jnz     short loc_1392
.text$mn:00001384                 mov     ecx, [ebp+lpParam]
.text$mn:0000138A                 add     ecx, 10h        ; this
.text$mn:0000138D                 call    ?loadLastSession@Notepad_plus@@QAEXXZ ; Notepad_plus::loadLastSession(void)
.text$mn:00001392
.text$mn:00001392 loc_1392:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+45Bj
.text$mn:00001392                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+466j
.text$mn:00001392                 mov     eax, [ebp+arg_C]
.text$mn:00001395                 movzx   ecx, byte ptr [eax+4]
.text$mn:00001399                 test    ecx, ecx
.text$mn:0000139B                 jnz     short loc_1400
.text$mn:0000139D                 mov     ecx, [ebp+arg_C] ; this
.text$mn:000013A0                 call    ?isPointValid@CmdLineParams@@QAE_NXZ ; CmdLineParams::isPointValid(void)
.text$mn:000013A5                 movzx   edx, al
.text$mn:000013A8                 test    edx, edx
.text$mn:000013AA                 jz      short loc_13C0
.text$mn:000013AC                 push    5               ; nCmdShow
.text$mn:000013AE                 mov     eax, [ebp+lpParam]
.text$mn:000013B4                 mov     ecx, [eax+0Ch]
.text$mn:000013B7                 push    ecx             ; hWnd
.text$mn:000013B8                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000013BE                 jmp     short loc_13FB
.text$mn:000013C0 ; ---------------------------------------------------------------------------
.text$mn:000013C0
.text$mn:000013C0 loc_13C0:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+48Ej
.text$mn:000013C0                 mov     edx, [ebp+var_3D0]
.text$mn:000013C6                 movzx   eax, byte ptr [edx+38h]
.text$mn:000013CA                 test    eax, eax
.text$mn:000013CC                 jz      short loc_13DA
.text$mn:000013CE                 mov     [ebp+nCmdShow], 3
.text$mn:000013D8                 jmp     short loc_13E4
.text$mn:000013DA ; ---------------------------------------------------------------------------
.text$mn:000013DA
.text$mn:000013DA loc_13DA:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+4B0j
.text$mn:000013DA                 mov     [ebp+nCmdShow], 5
.text$mn:000013E4
.text$mn:000013E4 loc_13E4:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+4BCj
.text$mn:000013E4                 mov     ecx, [ebp+nCmdShow]
.text$mn:000013EA                 push    ecx             ; nCmdShow
.text$mn:000013EB                 mov     edx, [ebp+lpParam]
.text$mn:000013F1                 mov     eax, [edx+0Ch]
.text$mn:000013F4                 push    eax             ; hWnd
.text$mn:000013F5                 call    dword ptr ds:__imp__ShowWindow@8 ; ShowWindow(x,x)
.text$mn:000013FB
.text$mn:000013FB loc_13FB:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+4A2j
.text$mn:000013FB                 jmp     loc_14A1
.text$mn:00001400 ; ---------------------------------------------------------------------------
.text$mn:00001400
.text$mn:00001400 loc_1400:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+47Fj
.text$mn:00001400                 push    3B9h            ; unsigned int
.text$mn:00001405                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000140A                 add     esp, 4
.text$mn:0000140D                 mov     [ebp+var_400], eax
.text$mn:00001413                 mov     [ebp+var_4], 0
.text$mn:0000141A                 cmp     [ebp+var_400], 0
.text$mn:00001421                 jz      short loc_145F
.text$mn:00001423                 push    offset $SG169403 ; wchar_t *
.text$mn:00001428                 push    offset IconName ; lpIconName
.text$mn:0000142A                 mov     ecx, [ebp+lpParam]
.text$mn:00001430                 mov     edx, [ecx+4]
.text$mn:00001433                 push    edx             ; hInstance
.text$mn:00001434                 call    dword ptr ds:__imp__LoadIconW@8 ; LoadIconW(x,x)
.text$mn:0000143A                 push    eax             ; HICON
.text$mn:0000143B                 push    105B9h          ; unsigned int
.text$mn:00001440                 push    64h ; 'd'       ; unsigned int
.text$mn:00001442                 mov     eax, [ebp+lpParam]
.text$mn:00001448                 mov     ecx, [eax+0Ch]
.text$mn:0000144B                 push    ecx             ; HWND
.text$mn:0000144C                 mov     ecx, [ebp+var_400] ; this
.text$mn:00001452                 call    ??0trayIconControler@@QAE@PAUHWND__@@IIPAUHICON__@@PA_W@Z ; trayIconControler::trayIconControler(HWND__ *,uint,uint,HICON__ *,wchar_t *)
.text$mn:00001457                 mov     [ebp+var_410], eax
.text$mn:0000145D                 jmp     short loc_1469
.text$mn:0000145F ; ---------------------------------------------------------------------------
.text$mn:0000145F
.text$mn:0000145F loc_145F:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+505j
.text$mn:0000145F                 mov     [ebp+var_410], 0
.text$mn:00001469
.text$mn:00001469 loc_1469:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+541j
.text$mn:00001469                 mov     edx, [ebp+var_410]
.text$mn:0000146F                 mov     [ebp+var_430], edx
.text$mn:00001475                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000147C                 mov     eax, [ebp+lpParam]
.text$mn:00001482                 mov     ecx, [ebp+var_430]
.text$mn:00001488                 mov     [eax+54BA0h], ecx
.text$mn:0000148E                 push    0               ; unsigned __int32
.text$mn:00001490                 mov     edx, [ebp+lpParam]
.text$mn:00001496                 mov     ecx, [edx+54BA0h] ; this
.text$mn:0000149C                 call    ?doTrayIcon@trayIconControler@@QAEHK@Z ; trayIconControler::doTrayIcon(ulong)
.text$mn:000014A1
.text$mn:000014A1 loc_14A1:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *):loc_13FBj
.text$mn:000014A1                 cmp     [ebp+arg_8], 0
.text$mn:000014A5                 jz      short loc_14BD
.text$mn:000014A7                 mov     eax, [ebp+arg_C]
.text$mn:000014AA                 push    eax             ; struct CmdLineParams *
.text$mn:000014AB                 mov     ecx, [ebp+arg_8]
.text$mn:000014AE                 push    ecx             ; wchar_t *
.text$mn:000014AF                 mov     ecx, [ebp+lpParam]
.text$mn:000014B5                 add     ecx, 10h        ; this
.text$mn:000014B8                 call    ?loadCommandlineParams@Notepad_plus@@AAEXPB_WPAUCmdLineParams@@@Z ; Notepad_plus::loadCommandlineParams(wchar_t const *,CmdLineParams *)
.text$mn:000014BD
.text$mn:000014BD loc_14BD:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+589j
.text$mn:000014BD                 lea     ecx, [ebp+var_3FC]
.text$mn:000014C3                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000014C8                 mov     [ebp+var_4], 1
.text$mn:000014CF                 lea     ecx, [ebp+var_46C]
.text$mn:000014D5                 call    ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:000014DA                 mov     byte ptr [ebp+var_4], 2
.text$mn:000014DE                 push    offset $SG169416 ; "*.xml"
.text$mn:000014E3                 lea     ecx, [ebp+var_33C]
.text$mn:000014E9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000014EE                 mov     byte ptr [ebp+var_4], 3
.text$mn:000014F2                 lea     edx, [ebp+var_33C]
.text$mn:000014F8                 push    edx
.text$mn:000014F9                 lea     ecx, [ebp+var_46C]
.text$mn:000014FF                 call    ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00001504                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001508                 lea     ecx, [ebp+var_33C]
.text$mn:0000150E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001513                 lea     eax, [ebp+var_278]
.text$mn:00001519                 push    eax
.text$mn:0000151A                 mov     ecx, [ebp+var_3D8]
.text$mn:00001520                 call    ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; NppParameters::getNppPath(void)
.text$mn:00001525                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001529                 mov     ecx, [ebp+var_3D8] ; this
.text$mn:0000152F                 call    ?getLocalizationSwitcher@NppParameters@@QAEAAVLocalizationSwitcher@@XZ ; NppParameters::getLocalizationSwitcher(void)
.text$mn:00001534                 mov     [ebp+var_45C], eax
.text$mn:0000153A                 lea     ecx, [ebp+var_278]
.text$mn:00001540                 push    ecx
.text$mn:00001541                 lea     ecx, [ebp+var_2B0]
.text$mn:00001547                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000154C                 mov     byte ptr [ebp+var_4], 5
.text$mn:00001550                 push    offset $SG169423 ; "localization\\"
.text$mn:00001555                 lea     ecx, [ebp+var_2E8]
.text$mn:0000155B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001560                 mov     byte ptr [ebp+var_4], 6
.text$mn:00001564                 lea     edx, [ebp+var_2E8]
.text$mn:0000156A                 push    edx
.text$mn:0000156B                 lea     eax, [ebp+var_2B0]
.text$mn:00001571                 push    eax
.text$mn:00001572                 lea     ecx, [ebp+var_374]
.text$mn:00001578                 push    ecx
.text$mn:00001579                 call    ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z ; PathAppendW(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000157E                 add     esp, 0Ch
.text$mn:00001581                 lea     ecx, [ebp+var_374]
.text$mn:00001587                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000158C                 mov     byte ptr [ebp+var_4], 5
.text$mn:00001590                 lea     ecx, [ebp+var_2E8]
.text$mn:00001596                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000159B                 push    0
.text$mn:0000159D                 push    0
.text$mn:0000159F                 lea     edx, [ebp+var_3FC]
.text$mn:000015A5                 push    edx
.text$mn:000015A6                 lea     eax, [ebp+var_46C]
.text$mn:000015AC                 push    eax
.text$mn:000015AD                 lea     ecx, [ebp+var_2B0]
.text$mn:000015B3                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000015B8                 push    eax
.text$mn:000015B9                 mov     ecx, [ebp+lpParam]
.text$mn:000015BF                 add     ecx, 10h
.text$mn:000015C2                 call    ?getMatchedFileNames@Notepad_plus@@AAEXPB_WABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAV23@_N3@Z ; Notepad_plus::getMatchedFileNames(wchar_t const *,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,bool,bool)
.text$mn:000015C7                 mov     [ebp+var_3EC], 0
.text$mn:000015D1                 lea     ecx, [ebp+var_3FC]
.text$mn:000015D7                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:000015DC                 mov     [ebp+var_438], eax
.text$mn:000015E2                 jmp     short loc_15F3
.text$mn:000015E4 ; ---------------------------------------------------------------------------
.text$mn:000015E4
.text$mn:000015E4 loc_15E4:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+734j
.text$mn:000015E4                 mov     ecx, [ebp+var_3EC]
.text$mn:000015EA                 add     ecx, 1
.text$mn:000015ED                 mov     [ebp+var_3EC], ecx
.text$mn:000015F3
.text$mn:000015F3 loc_15F3:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+6C6j
.text$mn:000015F3                 mov     edx, [ebp+var_3EC]
.text$mn:000015F9                 cmp     edx, [ebp+var_438]
.text$mn:000015FF                 jnb     short loc_1652
.text$mn:00001601                 mov     eax, [ebp+var_3EC]
.text$mn:00001607                 push    eax
.text$mn:00001608                 lea     ecx, [ebp+var_3FC]
.text$mn:0000160E                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00001613                 mov     ecx, eax
.text$mn:00001615                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000161A                 sub     esp, 1Ch
.text$mn:0000161D                 mov     ecx, esp
.text$mn:0000161F                 mov     [ebp+var_49C], esp
.text$mn:00001625                 push    eax             ; Str
.text$mn:00001626                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000162B                 mov     [ebp+var_44C], eax
.text$mn:00001631                 mov     ecx, [ebp+var_44C]
.text$mn:00001637                 mov     [ebp+var_4A4], ecx
.text$mn:0000163D                 mov     byte ptr [ebp+var_4], 7
.text$mn:00001641                 mov     byte ptr [ebp+var_4], 5
.text$mn:00001645                 mov     ecx, [ebp+var_45C]
.text$mn:0000164B                 call    ?addLanguageFromXml@LocalizationSwitcher@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; LocalizationSwitcher::addLanguageFromXml(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001650                 jmp     short loc_15E4
.text$mn:00001652 ; ---------------------------------------------------------------------------
.text$mn:00001652
.text$mn:00001652 loc_1652:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+6E3j
.text$mn:00001652                 lea     ecx, [ebp+var_3FC]
.text$mn:00001658                 call    ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::clear(void)
.text$mn:0000165D                 mov     ecx, [ebp+var_3D8] ; this
.text$mn:00001663                 call    ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ ; NppParameters::getThemeSwitcher(void)
.text$mn:00001668                 mov     [ebp+var_3E4], eax
.text$mn:0000166E                 lea     ecx, [ebp+var_230]
.text$mn:00001674                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001679                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000167D                 mov     ecx, [ebp+var_3D8] ; this
.text$mn:00001683                 call    ?getAppDataNppDir@NppParameters@@QBEPB_WXZ ; NppParameters::getAppDataNppDir(void)
.text$mn:00001688                 test    eax, eax
.text$mn:0000168A                 jz      loc_17C8
.text$mn:00001690                 mov     ecx, [ebp+var_3D8] ; this
.text$mn:00001696                 call    ?getAppDataNppDir@NppParameters@@QBEPB_WXZ ; NppParameters::getAppDataNppDir(void)
.text$mn:0000169B                 mov     edx, 2
.text$mn:000016A0                 imul    ecx, edx, 0
.text$mn:000016A3                 movzx   edx, word ptr [eax+ecx]
.text$mn:000016A7                 test    edx, edx
.text$mn:000016A9                 jz      loc_17C8
.text$mn:000016AF                 mov     ecx, [ebp+var_3D8] ; this
.text$mn:000016B5                 call    ?getAppDataNppDir@NppParameters@@QBEPB_WXZ ; NppParameters::getAppDataNppDir(void)
.text$mn:000016BA                 push    eax             ; Str
.text$mn:000016BB                 lea     ecx, [ebp+var_230]
.text$mn:000016C1                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000016C6                 push    offset $SG169435 ; "themes\\"
.text$mn:000016CB                 lea     ecx, [ebp+var_358]
.text$mn:000016D1                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000016D6                 mov     byte ptr [ebp+var_4], 9
.text$mn:000016DA                 lea     eax, [ebp+var_358]
.text$mn:000016E0                 push    eax
.text$mn:000016E1                 lea     ecx, [ebp+var_230]
.text$mn:000016E7                 push    ecx
.text$mn:000016E8                 lea     edx, [ebp+var_390]
.text$mn:000016EE                 push    edx
.text$mn:000016EF                 call    ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z ; PathAppendW(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000016F4                 add     esp, 0Ch
.text$mn:000016F7                 lea     ecx, [ebp+var_390]
.text$mn:000016FD                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001702                 mov     byte ptr [ebp+var_4], 8
.text$mn:00001706                 lea     ecx, [ebp+var_358]
.text$mn:0000170C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001711                 push    0
.text$mn:00001713                 push    0
.text$mn:00001715                 lea     eax, [ebp+var_3FC]
.text$mn:0000171B                 push    eax
.text$mn:0000171C                 lea     ecx, [ebp+var_46C]
.text$mn:00001722                 push    ecx
.text$mn:00001723                 lea     ecx, [ebp+var_230]
.text$mn:00001729                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000172E                 push    eax
.text$mn:0000172F                 mov     ecx, [ebp+lpParam]
.text$mn:00001735                 add     ecx, 10h
.text$mn:00001738                 call    ?getMatchedFileNames@Notepad_plus@@AAEXPB_WABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAV23@_N3@Z ; Notepad_plus::getMatchedFileNames(wchar_t const *,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,bool,bool)
.text$mn:0000173D                 mov     [ebp+var_3E0], 0
.text$mn:00001747                 lea     ecx, [ebp+var_3FC]
.text$mn:0000174D                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00001752                 mov     [ebp+var_448], eax
.text$mn:00001758                 jmp     short loc_1769
.text$mn:0000175A ; ---------------------------------------------------------------------------
.text$mn:0000175A
.text$mn:0000175A loc_175A:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+8AAj
.text$mn:0000175A                 mov     edx, [ebp+var_3E0]
.text$mn:00001760                 add     edx, 1
.text$mn:00001763                 mov     [ebp+var_3E0], edx
.text$mn:00001769
.text$mn:00001769 loc_1769:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+83Cj
.text$mn:00001769                 mov     eax, [ebp+var_3E0]
.text$mn:0000176F                 cmp     eax, [ebp+var_448]
.text$mn:00001775                 jnb     short loc_17C8
.text$mn:00001777                 mov     ecx, [ebp+var_3E0]
.text$mn:0000177D                 push    ecx
.text$mn:0000177E                 lea     ecx, [ebp+var_3FC]
.text$mn:00001784                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:00001789                 mov     ecx, eax
.text$mn:0000178B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001790                 sub     esp, 1Ch
.text$mn:00001793                 mov     ecx, esp
.text$mn:00001795                 mov     [ebp+var_4C4], esp
.text$mn:0000179B                 push    eax             ; Str
.text$mn:0000179C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000017A1                 mov     [ebp+var_42C], eax
.text$mn:000017A7                 mov     edx, [ebp+var_42C]
.text$mn:000017AD                 mov     [ebp+var_498], edx
.text$mn:000017B3                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:000017B7                 mov     byte ptr [ebp+var_4], 8
.text$mn:000017BB                 mov     ecx, [ebp+var_3E4]
.text$mn:000017C1                 call    ?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; ThemeSwitcher::addThemeFromXml(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:000017C6                 jmp     short loc_175A
.text$mn:000017C8 ; ---------------------------------------------------------------------------
.text$mn:000017C8
.text$mn:000017C8 loc_17C8:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+76Ej
.text$mn:000017C8                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+78Dj ...
.text$mn:000017C8                 lea     ecx, [ebp+var_3FC]
.text$mn:000017CE                 call    ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::clear(void)
.text$mn:000017D3                 lea     ecx, [ebp+var_230]
.text$mn:000017D9                 call    ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::clear(void)
.text$mn:000017DE                 lea     ecx, [ebp+var_278]
.text$mn:000017E4                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000017E9                 push    eax             ; Str
.text$mn:000017EA                 lea     ecx, [ebp+var_230]
.text$mn:000017F0                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000017F5                 push    offset $SG169444 ; "themes\\"
.text$mn:000017FA                 lea     ecx, [ebp+var_304]
.text$mn:00001800                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001805                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00001809                 lea     eax, [ebp+var_304]
.text$mn:0000180F                 push    eax
.text$mn:00001810                 lea     ecx, [ebp+var_230]
.text$mn:00001816                 push    ecx
.text$mn:00001817                 lea     edx, [ebp+var_3C8]
.text$mn:0000181D                 push    edx
.text$mn:0000181E                 call    ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z ; PathAppendW(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00001823                 add     esp, 0Ch
.text$mn:00001826                 lea     ecx, [ebp+var_3C8]
.text$mn:0000182C                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001831                 mov     byte ptr [ebp+var_4], 8
.text$mn:00001835                 lea     ecx, [ebp+var_304]
.text$mn:0000183B                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001840                 push    0
.text$mn:00001842                 push    0
.text$mn:00001844                 lea     eax, [ebp+var_3FC]
.text$mn:0000184A                 push    eax
.text$mn:0000184B                 lea     ecx, [ebp+var_46C]
.text$mn:00001851                 push    ecx
.text$mn:00001852                 lea     ecx, [ebp+var_230]
.text$mn:00001858                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000185D                 push    eax
.text$mn:0000185E                 mov     ecx, [ebp+lpParam]
.text$mn:00001864                 add     ecx, 10h
.text$mn:00001867                 call    ?getMatchedFileNames@Notepad_plus@@AAEXPB_WABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAV23@_N3@Z ; Notepad_plus::getMatchedFileNames(wchar_t const *,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &,std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,bool,bool)
.text$mn:0000186C                 mov     [ebp+var_3DC], 0
.text$mn:00001876                 lea     ecx, [ebp+var_3FC]
.text$mn:0000187C                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00001881                 mov     [ebp+var_458], eax
.text$mn:00001887                 jmp     short loc_1898
.text$mn:00001889 ; ---------------------------------------------------------------------------
.text$mn:00001889
.text$mn:00001889 loc_1889:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+A3Aj
.text$mn:00001889                 mov     edx, [ebp+var_3DC]
.text$mn:0000188F                 add     edx, 1
.text$mn:00001892                 mov     [ebp+var_3DC], edx
.text$mn:00001898
.text$mn:00001898 loc_1898:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+96Bj
.text$mn:00001898                 mov     eax, [ebp+var_3DC]
.text$mn:0000189E                 cmp     eax, [ebp+var_458]
.text$mn:000018A4                 jnb     loc_195B
.text$mn:000018AA                 mov     ecx, [ebp+var_3DC]
.text$mn:000018B0                 push    ecx
.text$mn:000018B1                 lea     ecx, [ebp+var_3FC]
.text$mn:000018B7                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:000018BC                 mov     ecx, eax
.text$mn:000018BE                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000018C3                 push    eax
.text$mn:000018C4                 lea     edx, [ebp+var_320]
.text$mn:000018CA                 push    edx
.text$mn:000018CB                 mov     ecx, [ebp+var_3E4]
.text$mn:000018D1                 call    ?getThemeFromXmlFileName@ThemeSwitcher@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; ThemeSwitcher::getThemeFromXmlFileName(wchar_t const *)
.text$mn:000018D6                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:000018DA                 lea     ecx, [ebp+var_320]
.text$mn:000018E0                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000018E5                 push    eax             ; wchar_t *
.text$mn:000018E6                 mov     ecx, [ebp+var_3E4] ; this
.text$mn:000018EC                 call    ?themeNameExists@ThemeSwitcher@@QAE_NPB_W@Z ; ThemeSwitcher::themeNameExists(wchar_t const *)
.text$mn:000018F1                 movzx   eax, al
.text$mn:000018F4                 test    eax, eax
.text$mn:000018F6                 jnz     short loc_1947
.text$mn:000018F8                 mov     ecx, [ebp+var_3DC]
.text$mn:000018FE                 push    ecx
.text$mn:000018FF                 lea     ecx, [ebp+var_3FC]
.text$mn:00001905                 call    ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)
.text$mn:0000190A                 mov     ecx, eax
.text$mn:0000190C                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001911                 sub     esp, 1Ch
.text$mn:00001914                 mov     ecx, esp
.text$mn:00001916                 mov     [ebp+var_4A0], esp
.text$mn:0000191C                 push    eax             ; Str
.text$mn:0000191D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00001922                 mov     [ebp+var_434], eax
.text$mn:00001928                 mov     edx, [ebp+var_434]
.text$mn:0000192E                 mov     [ebp+var_4A8], edx
.text$mn:00001934                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00001938                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:0000193C                 mov     ecx, [ebp+var_3E4]
.text$mn:00001942                 call    ?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; ThemeSwitcher::addThemeFromXml(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)
.text$mn:00001947
.text$mn:00001947 loc_1947:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+9DAj
.text$mn:00001947                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000194B                 lea     ecx, [ebp+var_320]
.text$mn:00001951                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001956                 jmp     loc_1889
.text$mn:0000195B ; ---------------------------------------------------------------------------
.text$mn:0000195B
.text$mn:0000195B loc_195B:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+988j
.text$mn:0000195B                 mov     [ebp+var_3E8], 0
.text$mn:00001965                 mov     ecx, [ebp+lpParam]
.text$mn:0000196B                 add     ecx, 198h
.text$mn:00001971                 call    ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::size(void)
.text$mn:00001976                 mov     [ebp+var_450], eax
.text$mn:0000197C                 jmp     short loc_198D
.text$mn:0000197E ; ---------------------------------------------------------------------------
.text$mn:0000197E
.text$mn:0000197E loc_197E:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+AB1j
.text$mn:0000197E                 mov     eax, [ebp+var_3E8]
.text$mn:00001984                 add     eax, 1
.text$mn:00001987                 mov     [ebp+var_3E8], eax
.text$mn:0000198D
.text$mn:0000198D loc_198D:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+A60j
.text$mn:0000198D                 mov     ecx, [ebp+var_3E8]
.text$mn:00001993                 cmp     ecx, [ebp+var_450]
.text$mn:00001999                 jnb     short loc_19CF
.text$mn:0000199B                 push    0               ; lParam
.text$mn:0000199D                 mov     edx, [ebp+var_3E8]
.text$mn:000019A3                 push    edx
.text$mn:000019A4                 mov     ecx, [ebp+lpParam]
.text$mn:000019AA                 add     ecx, 198h
.text$mn:000019B0                 call    ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ; std::vector<int,std::allocator<int>>::operator[](uint)
.text$mn:000019B5                 mov     eax, [eax]
.text$mn:000019B7                 push    eax             ; wParam
.text$mn:000019B8                 push    111h            ; Msg
.text$mn:000019BD                 mov     ecx, [ebp+lpParam]
.text$mn:000019C3                 mov     edx, [ecx+0Ch]
.text$mn:000019C6                 push    edx             ; hWnd
.text$mn:000019C7                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:000019CD                 jmp     short loc_197E
.text$mn:000019CF ; ---------------------------------------------------------------------------
.text$mn:000019CF
.text$mn:000019CF loc_19CF:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+A7Dj
.text$mn:000019CF                 mov     [ebp+var_534], 3E9h
.text$mn:000019D9                 mov     eax, [ebp+lpParam]
.text$mn:000019DF                 mov     ecx, [eax+0Ch]
.text$mn:000019E2                 mov     [ebp+var_53C], ecx
.text$mn:000019E8                 mov     [ebp+var_538], 0
.text$mn:000019F2                 lea     edx, [ebp+var_53C]
.text$mn:000019F8                 push    edx             ; struct SCNotification *
.text$mn:000019F9                 mov     ecx, [ebp+lpParam]
.text$mn:000019FF                 add     ecx, 54BDCh     ; this
.text$mn:00001A05                 call    ?notify@PluginsManager@@QAEXPBUSCNotification@@@Z ; PluginsManager::notify(SCNotification const *)
.text$mn:00001A0A                 push    offset $SG169477 ; Str
.text$mn:00001A0F                 mov     eax, [ebp+arg_C]
.text$mn:00001A12                 add     eax, 3Ch ; '<'
.text$mn:00001A15                 push    eax             ; int
.text$mn:00001A16                 call    ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00001A1B                 add     esp, 8
.text$mn:00001A1E                 movzx   ecx, al
.text$mn:00001A21                 test    ecx, ecx
.text$mn:00001A23                 jz      loc_1C53
.text$mn:00001A29                 push    104h            ; MaxCount
.text$mn:00001A2E                 mov     ecx, [ebp+arg_C]
.text$mn:00001A31                 add     ecx, 3Ch ; '<'
.text$mn:00001A34                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001A39                 push    eax             ; Source
.text$mn:00001A3A                 lea     edx, [ebp+Dest]
.text$mn:00001A40                 push    edx             ; Dest
.text$mn:00001A41                 call    _wcstombs
.text$mn:00001A46                 add     esp, 0Ch
.text$mn:00001A49                 mov     eax, [ebp+arg_C]
.text$mn:00001A4C                 movzx   ecx, byte ptr [eax+58h]
.text$mn:00001A50                 test    ecx, ecx
.text$mn:00001A52                 jnz     short loc_1A92
.text$mn:00001A54                 lea     edx, [ebp+Dest]
.text$mn:00001A5A                 push    edx             ; char *
.text$mn:00001A5B                 mov     ecx, [ebp+lpParam]
.text$mn:00001A61                 add     ecx, 10h        ; this
.text$mn:00001A64                 call    ?getQuoteIndexFrom@Notepad_plus@@QBEHPBD@Z ; Notepad_plus::getQuoteIndexFrom(char const *)
.text$mn:00001A69                 mov     [ebp+var_408], eax
.text$mn:00001A6F                 cmp     [ebp+var_408], 0FFFFFFFFh
.text$mn:00001A76                 jz      short loc_1A8D
.text$mn:00001A78                 mov     eax, [ebp+var_408]
.text$mn:00001A7E                 push    eax             ; int
.text$mn:00001A7F                 mov     ecx, [ebp+lpParam]
.text$mn:00001A85                 add     ecx, 10h        ; this
.text$mn:00001A88                 call    ?showQuoteFromIndex@Notepad_plus@@QBEXH@Z ; Notepad_plus::showQuoteFromIndex(int)
.text$mn:00001A8D
.text$mn:00001A8D loc_1A8D:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B5Aj
.text$mn:00001A8D                 jmp     loc_1C53
.text$mn:00001A92 ; ---------------------------------------------------------------------------
.text$mn:00001A92
.text$mn:00001A92 loc_1A92:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B36j
.text$mn:00001A92                 mov     ecx, [ebp+arg_C]
.text$mn:00001A95                 movzx   edx, byte ptr [ecx+58h]
.text$mn:00001A99                 cmp     edx, 1
.text$mn:00001A9C                 jnz     short loc_1AE2
.text$mn:00001A9E                 lea     eax, [ebp+Dest]
.text$mn:00001AA4                 push    eax             ; Str
.text$mn:00001AA5                 mov     ecx, [ebp+lpParam]
.text$mn:00001AAB                 add     ecx, 551E0h
.text$mn:00001AB1                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text$mn:00001AB6                 push    0               ; bool
.text$mn:00001AB8                 push    offset $SG169484 ; "Anonymous #999"
.text$mn:00001ABD                 mov     ecx, [ebp+lpParam]
.text$mn:00001AC3                 add     ecx, 551E0h
.text$mn:00001AC9                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00001ACE                 push    eax             ; char *
.text$mn:00001ACF                 mov     ecx, [ebp+lpParam]
.text$mn:00001AD5                 add     ecx, 10h        ; this
.text$mn:00001AD8                 call    ?showQuote@Notepad_plus@@QBEXPBD0_N@Z ; Notepad_plus::showQuote(char const *,char const *,bool)
.text$mn:00001ADD                 jmp     loc_1C53
.text$mn:00001AE2 ; ---------------------------------------------------------------------------
.text$mn:00001AE2
.text$mn:00001AE2 loc_1AE2:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B80j
.text$mn:00001AE2                 mov     ecx, [ebp+arg_C]
.text$mn:00001AE5                 movzx   edx, byte ptr [ecx+58h]
.text$mn:00001AE9                 cmp     edx, 2
.text$mn:00001AEC                 jnz     loc_1C53
.text$mn:00001AF2                 lea     eax, [ebp+Dest]
.text$mn:00001AF8                 push    eax             ; Str
.text$mn:00001AF9                 lea     ecx, [ebp+var_2CC]
.text$mn:00001AFF                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00001B04                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00001B08                 sub     esp, 0Ch
.text$mn:00001B0B                 mov     ecx, esp
.text$mn:00001B0D                 mov     [ebp+var_4B4], esp
.text$mn:00001B13                 push    ecx
.text$mn:00001B14                 lea     ecx, [ebp+var_2CC]
.text$mn:00001B1A                 call    ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::end(void)
.text$mn:00001B1F                 mov     [ebp+var_420], eax
.text$mn:00001B25                 mov     edx, [ebp+var_420]
.text$mn:00001B2B                 mov     [ebp+var_4C0], edx
.text$mn:00001B31                 mov     byte ptr [ebp+var_4], 0Fh
.text$mn:00001B35                 sub     esp, 0Ch
.text$mn:00001B38                 mov     eax, esp
.text$mn:00001B3A                 mov     [ebp+var_4C8], esp
.text$mn:00001B40                 push    eax
.text$mn:00001B41                 lea     ecx, [ebp+var_2CC]
.text$mn:00001B47                 call    ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin(void)
.text$mn:00001B4C                 mov     [ebp+var_454], eax
.text$mn:00001B52                 mov     ecx, [ebp+var_454]
.text$mn:00001B58                 mov     [ebp+var_4BC], ecx
.text$mn:00001B5E                 mov     byte ptr [ebp+var_4], 10h
.text$mn:00001B62                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00001B66                 lea     ecx, [ebp+var_294]
.text$mn:00001B6C                 call    ??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)
.text$mn:00001B71                 mov     [ebp+var_4B8], eax
.text$mn:00001B77                 mov     byte ptr [ebp+var_4], 11h
.text$mn:00001B7B                 lea     ecx, [ebp+var_294]
.text$mn:00001B81                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001B86                 push    eax             ; pszPath
.text$mn:00001B87                 call    dword ptr ds:__imp__PathFileExistsW@4 ; PathFileExistsW(x)
.text$mn:00001B8D                 test    eax, eax
.text$mn:00001B8F                 jz      loc_1C35
.text$mn:00001B95                 lea     ecx, [ebp+var_294]
.text$mn:00001B9B                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00001BA0                 push    eax
.text$mn:00001BA1                 lea     edx, [ebp+var_3AC]
.text$mn:00001BA7                 push    edx
.text$mn:00001BA8                 call    ?getFileContent@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_W@Z ; getFileContent(wchar_t const *)
.text$mn:00001BAD                 add     esp, 8
.text$mn:00001BB0                 mov     [ebp+var_424], eax
.text$mn:00001BB6                 mov     eax, [ebp+var_424]
.text$mn:00001BBC                 mov     [ebp+var_428], eax
.text$mn:00001BC2                 mov     byte ptr [ebp+var_4], 12h
.text$mn:00001BC6                 mov     ecx, [ebp+var_428]
.text$mn:00001BCC                 push    ecx
.text$mn:00001BCD                 mov     ecx, [ebp+lpParam]
.text$mn:00001BD3                 add     ecx, 551E0h
.text$mn:00001BD9                 call    ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:00001BDE                 mov     byte ptr [ebp+var_4], 11h
.text$mn:00001BE2                 lea     ecx, [ebp+var_3AC]
.text$mn:00001BE8                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001BED                 push    offset $SG169818 ; Str
.text$mn:00001BF2                 mov     edx, [ebp+lpParam]
.text$mn:00001BF8                 add     edx, 551E0h
.text$mn:00001BFE                 push    edx             ; int
.text$mn:00001BFF                 call    ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text$mn:00001C04                 add     esp, 8
.text$mn:00001C07                 movzx   eax, al
.text$mn:00001C0A                 test    eax, eax
.text$mn:00001C0C                 jz      short loc_1C35
.text$mn:00001C0E                 push    0               ; bool
.text$mn:00001C10                 push    offset $SG169819 ; "Anonymous #999"
.text$mn:00001C15                 mov     ecx, [ebp+lpParam]
.text$mn:00001C1B                 add     ecx, 551E0h
.text$mn:00001C21                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00001C26                 push    eax             ; char *
.text$mn:00001C27                 mov     ecx, [ebp+lpParam]
.text$mn:00001C2D                 add     ecx, 10h        ; this
.text$mn:00001C30                 call    ?showQuote@Notepad_plus@@QBEXPBD0_N@Z ; Notepad_plus::showQuote(char const *,char const *,bool)
.text$mn:00001C35
.text$mn:00001C35 loc_1C35:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+C73j
.text$mn:00001C35                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+CF0j
.text$mn:00001C35                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:00001C39                 lea     ecx, [ebp+var_294]
.text$mn:00001C3F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001C44                 mov     byte ptr [ebp+var_4], 8
.text$mn:00001C48                 lea     ecx, [ebp+var_2CC]
.text$mn:00001C4E                 call    ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$mn:00001C53
.text$mn:00001C53 loc_1C53:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B07j
.text$mn:00001C53                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *):loc_1A8Dj ...
.text$mn:00001C53                 mov     ecx, [ebp+arg_C]
.text$mn:00001C56                 movzx   edx, byte ptr [ecx+5]
.text$mn:00001C5A                 test    edx, edx
.text$mn:00001C5C                 jz      short loc_1CD8
.text$mn:00001C5E                 push    0               ; Time
.text$mn:00001C60                 call    _time
.text$mn:00001C65                 add     esp, 4
.text$mn:00001C68                 mov     [ebp+Time1], eax
.text$mn:00001C6E                 mov     [ebp+Time2], edx
.text$mn:00001C74                 mov     eax, dword ptr [ebp+var_41C+4]
.text$mn:00001C7A                 push    eax
.text$mn:00001C7B                 mov     ecx, dword ptr [ebp+var_41C]
.text$mn:00001C81                 push    ecx
.text$mn:00001C82                 mov     edx, [ebp+Time2]
.text$mn:00001C88                 push    edx             ; Time2
.text$mn:00001C89                 mov     eax, [ebp+Time1]
.text$mn:00001C8F                 push    eax             ; Time1
.text$mn:00001C90                 call    _difftime
.text$mn:00001C95                 add     esp, 10h
.text$mn:00001C98                 fstp    [ebp+var_4B0]
.text$mn:00001C9E                 sub     esp, 8
.text$mn:00001CA1                 movsd   xmm0, [ebp+var_4B0]
.text$mn:00001CA9                 movsd   [esp+548h+var_548], xmm0
.text$mn:00001CAE                 push    offset $SG169824 ; "Loading time : %.0lf seconds"
.text$mn:00001CB3                 lea     ecx, [ebp+Text]
.text$mn:00001CB9                 push    ecx             ; Dest
.text$mn:00001CBA                 call    _sprintf
.text$mn:00001CBF                 add     esp, 10h
.text$mn:00001CC2                 push    0               ; uType
.text$mn:00001CC4                 push    offset $SG169825 ; lpCaption
.text$mn:00001CC9                 lea     edx, [ebp+Text]
.text$mn:00001CCF                 push    edx             ; lpText
.text$mn:00001CD0                 push    0               ; hWnd
.text$mn:00001CD2                 call    dword ptr ds:__imp__MessageBoxA@16 ; MessageBoxA(x,x,x,x)
.text$mn:00001CD8
.text$mn:00001CD8 loc_1CD8:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D40j
.text$mn:00001CD8                 mov     ecx, [ebp+var_3D0] ; this
.text$mn:00001CDE                 call    ?isSnapshotMode@NppGUI@@QBE_NXZ ; NppGUI::isSnapshotMode(void)
.text$mn:00001CE3                 mov     [ebp+var_3D1], al
.text$mn:00001CE9                 movzx   eax, [ebp+var_3D1]
.text$mn:00001CF0                 test    eax, eax
.text$mn:00001CF2                 jz      short loc_1D10
.text$mn:00001CF4                 mov     ecx, [ebp+lpParam]
.text$mn:00001CFA                 add     ecx, 10h        ; this
.text$mn:00001CFD                 call    ?checkModifiedDocument@Notepad_plus@@AAEXXZ ; Notepad_plus::checkModifiedDocument(void)
.text$mn:00001D02                 mov     ecx, [ebp+lpParam]
.text$mn:00001D08                 add     ecx, 10h        ; this
.text$mn:00001D0B                 call    ?launchDocumentBackupTask@Notepad_plus@@QAEXXZ ; Notepad_plus::launchDocumentBackupTask(void)
.text$mn:00001D10
.text$mn:00001D10 loc_1D10:                               ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+DD6j
.text$mn:00001D10                 mov     byte ptr [ebp+var_4], 5
.text$mn:00001D14                 lea     ecx, [ebp+var_230]
.text$mn:00001D1A                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D1F                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001D23                 lea     ecx, [ebp+var_2B0]
.text$mn:00001D29                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D2E                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001D32                 lea     ecx, [ebp+var_278]
.text$mn:00001D38                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00001D3D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00001D41                 lea     ecx, [ebp+var_46C]
.text$mn:00001D47                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00001D4C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001D53                 lea     ecx, [ebp+var_3FC]
.text$mn:00001D59                 call    ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00001D5E                 mov     ecx, [ebp+var_C]
.text$mn:00001D61                 mov     large fs:0, ecx
.text$mn:00001D68                 pop     ecx
.text$mn:00001D69                 mov     ecx, [ebp+var_10]
.text$mn:00001D6C                 xor     ecx, ebp
.text$mn:00001D6E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00001D73                 mov     esp, ebp
.text$mn:00001D75                 pop     ebp
.text$mn:00001D76                 retn    10h
.text$mn:00001D76 ?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z endp
.text$mn:00001D76
.text$mn:00001D76 ; ---------------------------------------------------------------------------
.text$mn:00001D79                 align 4
.text$mn:00001D7C
.text$mn:00001D7C ; =============== S U B R O U T I N E =======================================
.text$mn:00001D7C
.text$mn:00001D7C ; Attributes: bp-based frame
.text$mn:00001D7C
.text$mn:00001D7C ; bool __thiscall Notepad_plus_Window::isDlgsMsg(Notepad_plus_Window *this, struct tagMSG *)
.text$mn:00001D7C                 public ?isDlgsMsg@Notepad_plus_Window@@QBE_NPAUtagMSG@@@Z
.text$mn:00001D7C ?isDlgsMsg@Notepad_plus_Window@@QBE_NPAUtagMSG@@@Z proc near
.text$mn:00001D7C
.text$mn:00001D7C var_C           = dword ptr -0Ch
.text$mn:00001D7C var_8           = dword ptr -8
.text$mn:00001D7C var_4           = dword ptr -4
.text$mn:00001D7C lpMsg           = dword ptr  8
.text$mn:00001D7C
.text$mn:00001D7C                 push    ebp
.text$mn:00001D7D                 mov     ebp, esp
.text$mn:00001D7F                 sub     esp, 0Ch
.text$mn:00001D82                 mov     [ebp+var_8], ecx
.text$mn:00001D85                 mov     [ebp+var_4], 0
.text$mn:00001D8C                 mov     ecx, [ebp+var_8]
.text$mn:00001D8F                 add     ecx, 54A90h
.text$mn:00001D95                 call    ?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *>>::size(void)
.text$mn:00001D9A                 mov     [ebp+var_C], eax
.text$mn:00001D9D                 jmp     short loc_1DA8
.text$mn:00001D9F ; ---------------------------------------------------------------------------
.text$mn:00001D9F
.text$mn:00001D9F loc_1D9F:                               ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *):loc_1DEEj
.text$mn:00001D9F                 mov     eax, [ebp+var_4]
.text$mn:00001DA2                 add     eax, 1
.text$mn:00001DA5                 mov     [ebp+var_4], eax
.text$mn:00001DA8
.text$mn:00001DA8 loc_1DA8:                               ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+21j
.text$mn:00001DA8                 mov     ecx, [ebp+var_4]
.text$mn:00001DAB                 cmp     ecx, [ebp+var_C]
.text$mn:00001DAE                 jnb     short loc_1DF0
.text$mn:00001DB0                 mov     edx, [ebp+lpMsg]
.text$mn:00001DB3                 push    edx             ; struct tagMSG *
.text$mn:00001DB4                 mov     ecx, [ebp+var_8]
.text$mn:00001DB7                 add     ecx, 10h        ; this
.text$mn:00001DBA                 call    ?processIncrFindAccel@Notepad_plus@@ABEHPAUtagMSG@@@Z ; Notepad_plus::processIncrFindAccel(tagMSG *)
.text$mn:00001DBF                 test    eax, eax
.text$mn:00001DC1                 jz      short loc_1DC7
.text$mn:00001DC3                 mov     al, 1
.text$mn:00001DC5                 jmp     short loc_1DF2
.text$mn:00001DC7 ; ---------------------------------------------------------------------------
.text$mn:00001DC7
.text$mn:00001DC7 loc_1DC7:                               ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+45j
.text$mn:00001DC7                 mov     eax, [ebp+lpMsg]
.text$mn:00001DCA                 push    eax             ; lpMsg
.text$mn:00001DCB                 mov     ecx, [ebp+var_4]
.text$mn:00001DCE                 push    ecx
.text$mn:00001DCF                 mov     ecx, [ebp+var_8]
.text$mn:00001DD2                 add     ecx, 54A90h
.text$mn:00001DD8                 call    ??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEABQAUHWND__@@I@Z ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)
.text$mn:00001DDD                 mov     edx, [eax]
.text$mn:00001DDF                 push    edx             ; hDlg
.text$mn:00001DE0                 call    dword ptr ds:__imp__IsDialogMessageW@8 ; IsDialogMessageW(x,x)
.text$mn:00001DE6                 test    eax, eax
.text$mn:00001DE8                 jz      short loc_1DEE
.text$mn:00001DEA                 mov     al, 1
.text$mn:00001DEC                 jmp     short loc_1DF2
.text$mn:00001DEE ; ---------------------------------------------------------------------------
.text$mn:00001DEE
.text$mn:00001DEE loc_1DEE:                               ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+6Cj
.text$mn:00001DEE                 jmp     short loc_1D9F
.text$mn:00001DF0 ; ---------------------------------------------------------------------------
.text$mn:00001DF0
.text$mn:00001DF0 loc_1DF0:                               ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+32j
.text$mn:00001DF0                 xor     al, al
.text$mn:00001DF2
.text$mn:00001DF2 loc_1DF2:                               ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+49j
.text$mn:00001DF2                                         ; Notepad_plus_Window::isDlgsMsg(tagMSG *)+70j
.text$mn:00001DF2                 mov     esp, ebp
.text$mn:00001DF4                 pop     ebp
.text$mn:00001DF5                 retn    4
.text$mn:00001DF5 ?isDlgsMsg@Notepad_plus_Window@@QBE_NPAUtagMSG@@@Z endp
.text$mn:00001DF5
.text$mn:00001DF5 _text$mn        ends
.text$mn:00001DF5
.text$x:00001DF8 ; ===========================================================================
.text$x:00001DF8
.text$x:00001DF8 ; Segment type: Pure code
.text$x:00001DF8 ; Segment permissions: Read/Execute
.text$x:00001DF8 _text$x         segment para public 'CODE' use32
.text$x:00001DF8                 assume cs:_text$x
.text$x:00001DF8                 ;org 1DF8h
.text$x:00001DF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001DF8
.text$x:00001DF8 ; =============== S U B R O U T I N E =======================================
.text$x:00001DF8
.text$x:00001DF8
.text$x:00001DF8 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$0 proc near
.text$x:00001DF8                                         ; DATA XREF: .xdata$x:00009CA0o
.text$x:00001DF8                 mov     eax, [ebp-400h]
.text$x:00001DFE                 push    eax             ; void *
.text$x:00001DFF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:00001E04                 pop     ecx
.text$x:00001E05                 retn
.text$x:00001E05 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$0 endp
.text$x:00001E05
.text$x:00001E06
.text$x:00001E06 ; =============== S U B R O U T I N E =======================================
.text$x:00001E06
.text$x:00001E06
.text$x:00001E06 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$1 proc near
.text$x:00001E06                                         ; DATA XREF: .xdata$x:00009CA8o
.text$x:00001E06                 lea     ecx, [ebp-3FCh]
.text$x:00001E0C                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00001E0C __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$1 endp
.text$x:00001E0C
.text$x:00001E11
.text$x:00001E11 ; =============== S U B R O U T I N E =======================================
.text$x:00001E11
.text$x:00001E11
.text$x:00001E11 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$2 proc near
.text$x:00001E11                                         ; DATA XREF: .xdata$x:00009CB0o
.text$x:00001E11                 lea     ecx, [ebp-46Ch]
.text$x:00001E17                 jmp     ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00001E17 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$2 endp
.text$x:00001E17
.text$x:00001E1C
.text$x:00001E1C ; =============== S U B R O U T I N E =======================================
.text$x:00001E1C
.text$x:00001E1C
.text$x:00001E1C __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$3 proc near
.text$x:00001E1C                                         ; DATA XREF: .xdata$x:00009CB8o
.text$x:00001E1C                 lea     ecx, [ebp-33Ch]
.text$x:00001E22                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E22 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$3 endp
.text$x:00001E22
.text$x:00001E27
.text$x:00001E27 ; =============== S U B R O U T I N E =======================================
.text$x:00001E27
.text$x:00001E27
.text$x:00001E27 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$4 proc near
.text$x:00001E27                                         ; DATA XREF: .xdata$x:00009CC0o
.text$x:00001E27                 lea     ecx, [ebp-278h]
.text$x:00001E2D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E2D __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$4 endp
.text$x:00001E2D
.text$x:00001E32
.text$x:00001E32 ; =============== S U B R O U T I N E =======================================
.text$x:00001E32
.text$x:00001E32
.text$x:00001E32 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$5 proc near
.text$x:00001E32                                         ; DATA XREF: .xdata$x:00009CC8o
.text$x:00001E32                 lea     ecx, [ebp-2B0h]
.text$x:00001E38                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E38 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$5 endp
.text$x:00001E38
.text$x:00001E3D
.text$x:00001E3D ; =============== S U B R O U T I N E =======================================
.text$x:00001E3D
.text$x:00001E3D
.text$x:00001E3D __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$6 proc near
.text$x:00001E3D                                         ; DATA XREF: .xdata$x:00009CD0o
.text$x:00001E3D                 lea     ecx, [ebp-2E8h]
.text$x:00001E43                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E43 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$6 endp
.text$x:00001E43
.text$x:00001E48
.text$x:00001E48 ; =============== S U B R O U T I N E =======================================
.text$x:00001E48
.text$x:00001E48
.text$x:00001E48 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$8 proc near
.text$x:00001E48                                         ; DATA XREF: .xdata$x:00009CD8o
.text$x:00001E48                 mov     ecx, [ebp-49Ch]
.text$x:00001E4E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E4E __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$8 endp
.text$x:00001E4E
.text$x:00001E53
.text$x:00001E53 ; =============== S U B R O U T I N E =======================================
.text$x:00001E53
.text$x:00001E53
.text$x:00001E53 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$9 proc near
.text$x:00001E53                                         ; DATA XREF: .xdata$x:00009CE0o
.text$x:00001E53                 lea     ecx, [ebp-230h]
.text$x:00001E59                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E59 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$9 endp
.text$x:00001E59
.text$x:00001E5E
.text$x:00001E5E ; =============== S U B R O U T I N E =======================================
.text$x:00001E5E
.text$x:00001E5E
.text$x:00001E5E __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$10 proc near
.text$x:00001E5E                                         ; DATA XREF: .xdata$x:00009CE8o
.text$x:00001E5E                 lea     ecx, [ebp-358h]
.text$x:00001E64                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E64 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$10 endp
.text$x:00001E64
.text$x:00001E69
.text$x:00001E69 ; =============== S U B R O U T I N E =======================================
.text$x:00001E69
.text$x:00001E69
.text$x:00001E69 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$12 proc near
.text$x:00001E69                                         ; DATA XREF: .xdata$x:00009CF0o
.text$x:00001E69                 mov     ecx, [ebp-4C4h]
.text$x:00001E6F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E6F __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$12 endp
.text$x:00001E6F
.text$x:00001E74
.text$x:00001E74 ; =============== S U B R O U T I N E =======================================
.text$x:00001E74
.text$x:00001E74
.text$x:00001E74 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$13 proc near
.text$x:00001E74                                         ; DATA XREF: .xdata$x:00009CF8o
.text$x:00001E74                 lea     ecx, [ebp-304h]
.text$x:00001E7A                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E7A __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$13 endp
.text$x:00001E7A
.text$x:00001E7F
.text$x:00001E7F ; =============== S U B R O U T I N E =======================================
.text$x:00001E7F
.text$x:00001E7F
.text$x:00001E7F __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$15 proc near
.text$x:00001E7F                                         ; DATA XREF: .xdata$x:00009D00o
.text$x:00001E7F                 lea     ecx, [ebp-320h]
.text$x:00001E85                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E85 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$15 endp
.text$x:00001E85
.text$x:00001E8A
.text$x:00001E8A ; =============== S U B R O U T I N E =======================================
.text$x:00001E8A
.text$x:00001E8A
.text$x:00001E8A __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$16 proc near
.text$x:00001E8A                                         ; DATA XREF: .xdata$x:00009D08o
.text$x:00001E8A                 mov     ecx, [ebp-4A0h]
.text$x:00001E90                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001E90 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$16 endp
.text$x:00001E90
.text$x:00001E95
.text$x:00001E95 ; =============== S U B R O U T I N E =======================================
.text$x:00001E95
.text$x:00001E95
.text$x:00001E95 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$17 proc near
.text$x:00001E95                                         ; DATA XREF: .xdata$x:00009D10o
.text$x:00001E95                 lea     ecx, [ebp-2CCh]
.text$x:00001E9B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00001E9B __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$17 endp
.text$x:00001E9B
.text$x:00001EA0
.text$x:00001EA0 ; =============== S U B R O U T I N E =======================================
.text$x:00001EA0
.text$x:00001EA0
.text$x:00001EA0 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$18 proc near
.text$x:00001EA0                                         ; DATA XREF: .xdata$x:00009D18o
.text$x:00001EA0                 mov     ecx, [ebp-4B4h]
.text$x:00001EA6                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00001EA6 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$18 endp
.text$x:00001EA6
.text$x:00001EAB
.text$x:00001EAB ; =============== S U B R O U T I N E =======================================
.text$x:00001EAB
.text$x:00001EAB
.text$x:00001EAB __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$19 proc near
.text$x:00001EAB                                         ; DATA XREF: .xdata$x:00009D20o
.text$x:00001EAB                 mov     ecx, [ebp-4C8h]
.text$x:00001EB1                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00001EB1 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$19 endp
.text$x:00001EB1
.text$x:00001EB6
.text$x:00001EB6 ; =============== S U B R O U T I N E =======================================
.text$x:00001EB6
.text$x:00001EB6
.text$x:00001EB6 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$20 proc near
.text$x:00001EB6                                         ; DATA XREF: .xdata$x:00009D28o
.text$x:00001EB6                 lea     ecx, [ebp-294h]
.text$x:00001EBC                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00001EBC __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$20 endp
.text$x:00001EBC
.text$x:00001EC1
.text$x:00001EC1 ; =============== S U B R O U T I N E =======================================
.text$x:00001EC1
.text$x:00001EC1
.text$x:00001EC1 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$21 proc near
.text$x:00001EC1                                         ; DATA XREF: .xdata$x:00009D30o
.text$x:00001EC1                 lea     ecx, [ebp-3ACh]
.text$x:00001EC7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00001EC7 __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$21 endp
.text$x:00001EC7
.text$x:00001ECC
.text$x:00001ECC ; =============== S U B R O U T I N E =======================================
.text$x:00001ECC
.text$x:00001ECC
.text$x:00001ECC __ehhandler$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z proc near
.text$x:00001ECC                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+5o
.text$x:00001ECC
.text$x:00001ECC arg_4           = dword ptr  8
.text$x:00001ECC
.text$x:00001ECC                 mov     edx, [esp+arg_4]
.text$x:00001ED0                 lea     eax, [edx+0Ch]
.text$x:00001ED3                 mov     ecx, [edx-534h]
.text$x:00001ED9                 xor     ecx, eax
.text$x:00001EDB                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001EE0                 mov     ecx, [edx-4]
.text$x:00001EE3                 xor     ecx, eax
.text$x:00001EE5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00001EEA                 mov     eax, offset __ehfuncinfo$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z
.text$x:00001EEF                 jmp     ___CxxFrameHandler3
.text$x:00001EEF __ehhandler$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z endp
.text$x:00001EEF
.text$x:00001EEF _text$x         ends
.text$x:00001EEF
.text$mn:00001EF4 ; ===========================================================================
.text$mn:00001EF4
.text$mn:00001EF4 ; Segment type: Pure code
.text$mn:00001EF4 ; Segment permissions: Read/Execute
.text$mn:00001EF4 _text$mn        segment para public 'CODE' use32
.text$mn:00001EF4                 assume cs:_text$mn
.text$mn:00001EF4                 ;org 1EF4h
.text$mn:00001EF4 ; COMDAT (pick any)
.text$mn:00001EF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00001EF4
.text$mn:00001EF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00001EF4
.text$mn:00001EF4 ; Attributes: bp-based frame
.text$mn:00001EF4
.text$mn:00001EF4 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>)
.text$mn:00001EF4                 public ??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
.text$mn:00001EF4 ??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z proc near
.text$mn:00001EF4                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+C50p
.text$mn:00001EF4
.text$mn:00001EF4 var_2C          = dword ptr -2Ch
.text$mn:00001EF4 var_28          = dword ptr -28h
.text$mn:00001EF4 var_24          = dword ptr -24h
.text$mn:00001EF4 var_20          = dword ptr -20h
.text$mn:00001EF4 var_1C          = dword ptr -1Ch
.text$mn:00001EF4 var_18          = dword ptr -18h
.text$mn:00001EF4 var_14          = dword ptr -14h
.text$mn:00001EF4 var_F           = byte ptr -0Fh
.text$mn:00001EF4 var_E           = byte ptr -0Eh
.text$mn:00001EF4 var_D           = byte ptr -0Dh
.text$mn:00001EF4 var_C           = dword ptr -0Ch
.text$mn:00001EF4 var_4           = dword ptr -4
.text$mn:00001EF4 arg_0           = byte ptr  8
.text$mn:00001EF4 arg_C           = byte ptr  14h
.text$mn:00001EF4
.text$mn:00001EF4                 push    ebp
.text$mn:00001EF5                 mov     ebp, esp
.text$mn:00001EF7                 push    0FFFFFFFFh
.text$mn:00001EF9                 push    offset __ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
.text$mn:00001EFE                 mov     eax, large fs:0
.text$mn:00001F04                 push    eax
.text$mn:00001F05                 sub     esp, 20h
.text$mn:00001F08                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00001F0D                 xor     eax, ebp
.text$mn:00001F0F                 push    eax
.text$mn:00001F10                 lea     eax, [ebp+var_C]
.text$mn:00001F13                 mov     large fs:0, eax
.text$mn:00001F19                 mov     [ebp+var_14], ecx
.text$mn:00001F1C                 mov     [ebp+var_4], 1
.text$mn:00001F23                 lea     ecx, [ebp+var_E]
.text$mn:00001F26                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00001F2B                 push    eax
.text$mn:00001F2C                 mov     ecx, [ebp+var_14]
.text$mn:00001F2F                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00001F34                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001F38                 push    0
.text$mn:00001F3A                 push    0
.text$mn:00001F3C                 mov     ecx, [ebp+var_14]
.text$mn:00001F3F                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00001F44                 lea     eax, [ebp+arg_0]
.text$mn:00001F47                 push    eax
.text$mn:00001F48                 lea     ecx, [ebp+var_F]
.text$mn:00001F4B                 push    ecx
.text$mn:00001F4C                 call    ??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z ; std::_Iter_cat<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00001F51                 add     esp, 8
.text$mn:00001F54                 mov     dl, [eax]
.text$mn:00001F56                 mov     [ebp+var_D], dl
.text$mn:00001F59                 movzx   eax, [ebp+var_D]
.text$mn:00001F5D                 push    eax
.text$mn:00001F5E                 sub     esp, 0Ch
.text$mn:00001F61                 mov     ecx, esp
.text$mn:00001F63                 mov     [ebp+var_20], esp
.text$mn:00001F66                 lea     edx, [ebp+arg_C]
.text$mn:00001F69                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00001F6A                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00001F6F                 mov     [ebp+var_18], eax
.text$mn:00001F72                 mov     eax, [ebp+var_18]
.text$mn:00001F75                 mov     [ebp+var_24], eax
.text$mn:00001F78                 mov     byte ptr [ebp+var_4], 3
.text$mn:00001F7C                 sub     esp, 0Ch
.text$mn:00001F7F                 mov     ecx, esp
.text$mn:00001F81                 mov     [ebp+var_28], esp
.text$mn:00001F84                 lea     edx, [ebp+arg_0]
.text$mn:00001F87                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00001F88                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00001F8D                 mov     [ebp+var_1C], eax
.text$mn:00001F90                 mov     eax, [ebp+var_1C]
.text$mn:00001F93                 mov     [ebp+var_2C], eax
.text$mn:00001F96                 mov     byte ptr [ebp+var_4], 4
.text$mn:00001F9A                 mov     byte ptr [ebp+var_4], 2
.text$mn:00001F9E                 mov     ecx, [ebp+var_14]
.text$mn:00001FA1                 call    ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)
.text$mn:00001FA6                 mov     byte ptr [ebp+var_4], 0
.text$mn:00001FAA                 lea     ecx, [ebp+arg_0]
.text$mn:00001FAD                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00001FB2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00001FB9                 lea     ecx, [ebp+arg_C]
.text$mn:00001FBC                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00001FC1                 mov     eax, [ebp+var_14]
.text$mn:00001FC4                 mov     ecx, [ebp+var_C]
.text$mn:00001FC7                 mov     large fs:0, ecx
.text$mn:00001FCE                 pop     ecx
.text$mn:00001FCF                 mov     esp, ebp
.text$mn:00001FD1                 pop     ebp
.text$mn:00001FD2                 retn    18h
.text$mn:00001FD2 ??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z endp
.text$mn:00001FD2
.text$mn:00001FD2 ; ---------------------------------------------------------------------------
.text$mn:00001FD5                 align 4
.text$mn:00001FD5 _text$mn        ends
.text$mn:00001FD5
.text$x:00001FD8 ; ===========================================================================
.text$x:00001FD8
.text$x:00001FD8 ; Segment type: Pure code
.text$x:00001FD8 ; Segment permissions: Read/Execute
.text$x:00001FD8 _text$x         segment para public 'CODE' use32
.text$x:00001FD8                 assume cs:_text$x
.text$x:00001FD8                 ;org 1FD8h
.text$x:00001FD8 ; COMDAT (pick associative to section at 1EF4)
.text$x:00001FD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00001FD8
.text$x:00001FD8 ; =============== S U B R O U T I N E =======================================
.text$x:00001FD8
.text$x:00001FD8
.text$x:00001FD8 __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$0 proc near
.text$x:00001FD8                                         ; DATA XREF: .xdata$x:00009F14o
.text$x:00001FD8                 lea     ecx, [ebp+14h]
.text$x:00001FDB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00001FDB __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$0 endp
.text$x:00001FDB
.text$x:00001FE0
.text$x:00001FE0 ; =============== S U B R O U T I N E =======================================
.text$x:00001FE0
.text$x:00001FE0
.text$x:00001FE0 __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$1 proc near
.text$x:00001FE0                                         ; DATA XREF: .xdata$x:00009F1Co
.text$x:00001FE0                 lea     ecx, [ebp+8]
.text$x:00001FE3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00001FE3 __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$1 endp
.text$x:00001FE3
.text$x:00001FE8
.text$x:00001FE8 ; =============== S U B R O U T I N E =======================================
.text$x:00001FE8
.text$x:00001FE8
.text$x:00001FE8 __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$2 proc near
.text$x:00001FE8                                         ; DATA XREF: .xdata$x:00009F24o
.text$x:00001FE8                 mov     ecx, [ebp-14h]
.text$x:00001FEB                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00001FEB __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$2 endp
.text$x:00001FEB
.text$x:00001FF0
.text$x:00001FF0 ; =============== S U B R O U T I N E =======================================
.text$x:00001FF0
.text$x:00001FF0
.text$x:00001FF0 __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$3 proc near
.text$x:00001FF0                                         ; DATA XREF: .xdata$x:00009F2Co
.text$x:00001FF0                 mov     ecx, [ebp-20h]
.text$x:00001FF3                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00001FF3 __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$3 endp
.text$x:00001FF3
.text$x:00001FF8
.text$x:00001FF8 ; =============== S U B R O U T I N E =======================================
.text$x:00001FF8
.text$x:00001FF8
.text$x:00001FF8 __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$4 proc near
.text$x:00001FF8                                         ; DATA XREF: .xdata$x:00009F34o
.text$x:00001FF8                 mov     ecx, [ebp-28h]
.text$x:00001FFB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00001FFB __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$4 endp
.text$x:00001FFB
.text$x:00002000
.text$x:00002000 ; =============== S U B R O U T I N E =======================================
.text$x:00002000
.text$x:00002000
.text$x:00002000 __ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z proc near
.text$x:00002000                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+5o
.text$x:00002000
.text$x:00002000 arg_4           = dword ptr  8
.text$x:00002000
.text$x:00002000                 mov     edx, [esp+arg_4]
.text$x:00002004                 lea     eax, [edx+0Ch]
.text$x:00002007                 mov     ecx, [edx-24h]
.text$x:0000200A                 xor     ecx, eax
.text$x:0000200C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002011                 mov     eax, offset __ehfuncinfo$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
.text$x:00002016                 jmp     ___CxxFrameHandler3
.text$x:00002016 __ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z endp
.text$x:00002016
.text$x:00002016 ; ---------------------------------------------------------------------------
.text$x:0000201B                 align 4
.text$x:0000201B _text$x         ends
.text$x:0000201B
.text$mn:0000201C ; ===========================================================================
.text$mn:0000201C
.text$mn:0000201C ; Segment type: Pure code
.text$mn:0000201C ; Segment permissions: Read/Execute
.text$mn:0000201C _text$mn        segment para public 'CODE' use32
.text$mn:0000201C                 assume cs:_text$mn
.text$mn:0000201C                 ;org 201Ch
.text$mn:0000201C ; COMDAT (pick any)
.text$mn:0000201C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000201C
.text$mn:0000201C ; =============== S U B R O U T I N E =======================================
.text$mn:0000201C
.text$mn:0000201C ; Attributes: bp-based frame
.text$mn:0000201C
.text$mn:0000201C ; public: __thiscall std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:0000201C                 public ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.text$mn:0000201C ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z proc near
.text$mn:0000201C                                         ; CODE XREF: ThemeSwitcher::addThemeFromXml(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5Fp
.text$mn:0000201C
.text$mn:0000201C var_10          = dword ptr -10h
.text$mn:0000201C var_C           = dword ptr -0Ch
.text$mn:0000201C var_4           = dword ptr -4
.text$mn:0000201C arg_0           = dword ptr  8
.text$mn:0000201C arg_4           = dword ptr  0Ch
.text$mn:0000201C
.text$mn:0000201C                 push    ebp
.text$mn:0000201D                 mov     ebp, esp
.text$mn:0000201F                 push    0FFFFFFFFh
.text$mn:00002021                 push    offset __ehhandler$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.text$mn:00002026                 mov     eax, large fs:0
.text$mn:0000202C                 push    eax
.text$mn:0000202D                 push    ecx
.text$mn:0000202E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002033                 xor     eax, ebp
.text$mn:00002035                 push    eax
.text$mn:00002036                 lea     eax, [ebp+var_C]
.text$mn:00002039                 mov     large fs:0, eax
.text$mn:0000203F                 mov     [ebp+var_10], ecx
.text$mn:00002042                 mov     eax, [ebp+arg_0]
.text$mn:00002045                 push    eax
.text$mn:00002046                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000204B                 add     esp, 4
.text$mn:0000204E                 push    eax
.text$mn:0000204F                 mov     ecx, [ebp+var_10]
.text$mn:00002052                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002057                 mov     [ebp+var_4], 0
.text$mn:0000205E                 mov     ecx, [ebp+arg_4]
.text$mn:00002061                 push    ecx
.text$mn:00002062                 call    ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00002067                 add     esp, 4
.text$mn:0000206A                 push    eax
.text$mn:0000206B                 mov     ecx, [ebp+var_10]
.text$mn:0000206E                 add     ecx, 1Ch
.text$mn:00002071                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00002076                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000207A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002081                 mov     eax, [ebp+var_10]
.text$mn:00002084                 mov     ecx, [ebp+var_C]
.text$mn:00002087                 mov     large fs:0, ecx
.text$mn:0000208E                 pop     ecx
.text$mn:0000208F                 mov     esp, ebp
.text$mn:00002091                 pop     ebp
.text$mn:00002092                 retn    8
.text$mn:00002092 ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z endp
.text$mn:00002092
.text$mn:00002092 ; ---------------------------------------------------------------------------
.text$mn:00002095                 align 4
.text$mn:00002095 _text$mn        ends
.text$mn:00002095
.text$x:00002098 ; ===========================================================================
.text$x:00002098
.text$x:00002098 ; Segment type: Pure code
.text$x:00002098 ; Segment permissions: Read/Execute
.text$x:00002098 _text$x         segment para public 'CODE' use32
.text$x:00002098                 assume cs:_text$x
.text$x:00002098                 ;org 2098h
.text$x:00002098 ; COMDAT (pick associative to section at 201C)
.text$x:00002098                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002098
.text$x:00002098 ; =============== S U B R O U T I N E =======================================
.text$x:00002098
.text$x:00002098
.text$x:00002098 __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$0 proc near
.text$x:00002098                                         ; DATA XREF: .xdata$x:00009C1Co
.text$x:00002098                 mov     ecx, [ebp-10h]
.text$x:0000209B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000209B __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$0 endp
.text$x:0000209B
.text$x:000020A0
.text$x:000020A0 ; =============== S U B R O U T I N E =======================================
.text$x:000020A0
.text$x:000020A0
.text$x:000020A0 __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$1 proc near
.text$x:000020A0                                         ; DATA XREF: .xdata$x:00009C24o
.text$x:000020A0                 mov     ecx, [ebp-10h]
.text$x:000020A3                 add     ecx, 1Ch
.text$x:000020A6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000020A6 __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$1 endp
.text$x:000020A6
.text$x:000020AB
.text$x:000020AB ; =============== S U B R O U T I N E =======================================
.text$x:000020AB
.text$x:000020AB
.text$x:000020AB __ehhandler$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z proc near
.text$x:000020AB                                         ; DATA XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+5o
.text$x:000020AB
.text$x:000020AB arg_4           = dword ptr  8
.text$x:000020AB
.text$x:000020AB                 mov     edx, [esp+arg_4]
.text$x:000020AF                 lea     eax, [edx+0Ch]
.text$x:000020B2                 mov     ecx, [edx-8]
.text$x:000020B5                 xor     ecx, eax
.text$x:000020B7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000020BC                 mov     eax, offset __ehfuncinfo$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.text$x:000020C1                 jmp     ___CxxFrameHandler3
.text$x:000020C1 __ehhandler$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z endp
.text$x:000020C1
.text$x:000020C1 ; ---------------------------------------------------------------------------
.text$x:000020C6                 align 4
.text$x:000020C6 _text$x         ends
.text$x:000020C6
.text$mn:000020C8 ; ===========================================================================
.text$mn:000020C8
.text$mn:000020C8 ; Segment type: Pure code
.text$mn:000020C8 ; Segment permissions: Read/Execute
.text$mn:000020C8 _text$mn        segment para public 'CODE' use32
.text$mn:000020C8                 assume cs:_text$mn
.text$mn:000020C8                 ;org 20C8h
.text$mn:000020C8 ; COMDAT (pick any)
.text$mn:000020C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000020C8
.text$mn:000020C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000020C8
.text$mn:000020C8 ; Attributes: bp-based frame
.text$mn:000020C8
.text$mn:000020C8 ; public: __thiscall std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &&)
.text$mn:000020C8                 public ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z
.text$mn:000020C8 ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z proc near
.text$mn:000020C8                                         ; CODE XREF: std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+56p
.text$mn:000020C8
.text$mn:000020C8 var_10          = dword ptr -10h
.text$mn:000020C8 var_C           = dword ptr -0Ch
.text$mn:000020C8 var_4           = dword ptr -4
.text$mn:000020C8 arg_0           = dword ptr  8
.text$mn:000020C8
.text$mn:000020C8                 push    ebp
.text$mn:000020C9                 mov     ebp, esp
.text$mn:000020CB                 push    0FFFFFFFFh
.text$mn:000020CD                 push    offset __ehhandler$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z
.text$mn:000020D2                 mov     eax, large fs:0
.text$mn:000020D8                 push    eax
.text$mn:000020D9                 push    ecx
.text$mn:000020DA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000020DF                 xor     eax, ebp
.text$mn:000020E1                 push    eax
.text$mn:000020E2                 lea     eax, [ebp+var_C]
.text$mn:000020E5                 mov     large fs:0, eax
.text$mn:000020EB                 mov     [ebp+var_10], ecx
.text$mn:000020EE                 mov     eax, [ebp+arg_0]
.text$mn:000020F1                 push    eax
.text$mn:000020F2                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000020F7                 add     esp, 4
.text$mn:000020FA                 push    eax
.text$mn:000020FB                 mov     ecx, [ebp+var_10]
.text$mn:000020FE                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002103                 mov     [ebp+var_4], 0
.text$mn:0000210A                 mov     ecx, [ebp+arg_0]
.text$mn:0000210D                 add     ecx, 1Ch
.text$mn:00002110                 push    ecx
.text$mn:00002111                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00002116                 add     esp, 4
.text$mn:00002119                 push    eax
.text$mn:0000211A                 mov     ecx, [ebp+var_10]
.text$mn:0000211D                 add     ecx, 1Ch
.text$mn:00002120                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002125                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002129                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002130                 mov     eax, [ebp+var_10]
.text$mn:00002133                 mov     ecx, [ebp+var_C]
.text$mn:00002136                 mov     large fs:0, ecx
.text$mn:0000213D                 pop     ecx
.text$mn:0000213E                 mov     esp, ebp
.text$mn:00002140                 pop     ebp
.text$mn:00002141                 retn    4
.text$mn:00002141 ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z endp
.text$mn:00002141
.text$mn:00002141 _text$mn        ends
.text$mn:00002141
.text$x:00002144 ; ===========================================================================
.text$x:00002144
.text$x:00002144 ; Segment type: Pure code
.text$x:00002144 ; Segment permissions: Read/Execute
.text$x:00002144 _text$x         segment para public 'CODE' use32
.text$x:00002144                 assume cs:_text$x
.text$x:00002144                 ;org 2144h
.text$x:00002144 ; COMDAT (pick associative to section at 20C8)
.text$x:00002144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002144
.text$x:00002144 ; =============== S U B R O U T I N E =======================================
.text$x:00002144
.text$x:00002144
.text$x:00002144 __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z$0 proc near
.text$x:00002144                                         ; DATA XREF: .xdata$x:00009BACo
.text$x:00002144                 mov     ecx, [ebp-10h]
.text$x:00002147                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00002147 __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z$0 endp
.text$x:00002147
.text$x:0000214C
.text$x:0000214C ; =============== S U B R O U T I N E =======================================
.text$x:0000214C
.text$x:0000214C
.text$x:0000214C __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z$1 proc near
.text$x:0000214C                                         ; DATA XREF: .xdata$x:00009BB4o
.text$x:0000214C                 mov     ecx, [ebp-10h]
.text$x:0000214F                 add     ecx, 1Ch
.text$x:00002152                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00002152 __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z$1 endp
.text$x:00002152
.text$x:00002157
.text$x:00002157 ; =============== S U B R O U T I N E =======================================
.text$x:00002157
.text$x:00002157
.text$x:00002157 __ehhandler$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z proc near
.text$x:00002157                                         ; DATA XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+5o
.text$x:00002157
.text$x:00002157 arg_4           = dword ptr  8
.text$x:00002157
.text$x:00002157                 mov     edx, [esp+arg_4]
.text$x:0000215B                 lea     eax, [edx+0Ch]
.text$x:0000215E                 mov     ecx, [edx-8]
.text$x:00002161                 xor     ecx, eax
.text$x:00002163                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002168                 mov     eax, offset __ehfuncinfo$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z
.text$x:0000216D                 jmp     ___CxxFrameHandler3
.text$x:0000216D __ehhandler$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z endp
.text$x:0000216D
.text$x:0000216D ; ---------------------------------------------------------------------------
.text$x:00002172                 align 4
.text$x:00002172 _text$x         ends
.text$x:00002172
.text$mn:00002174 ; ===========================================================================
.text$mn:00002174
.text$mn:00002174 ; Segment type: Pure code
.text$mn:00002174 ; Segment permissions: Read/Execute
.text$mn:00002174 _text$mn        segment para public 'CODE' use32
.text$mn:00002174                 assume cs:_text$mn
.text$mn:00002174                 ;org 2174h
.text$mn:00002174 ; COMDAT (pick any)
.text$mn:00002174                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002174
.text$mn:00002174 ; =============== S U B R O U T I N E =======================================
.text$mn:00002174
.text$mn:00002174 ; Attributes: bp-based frame
.text$mn:00002174
.text$mn:00002174 ; bool __cdecl std::operator==<char, char>(class std::allocator<char> const &, class std::allocator<char> const &)
.text$mn:00002174                 public ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z
.text$mn:00002174 ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z proc near
.text$mn:00002174                                         ; CODE XREF: std::operator==<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+1Ep
.text$mn:00002174                 push    ebp
.text$mn:00002175                 mov     ebp, esp
.text$mn:00002177                 mov     al, 1
.text$mn:00002179                 pop     ebp
.text$mn:0000217A                 retn
.text$mn:0000217A ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z endp
.text$mn:0000217A
.text$mn:0000217A ; ---------------------------------------------------------------------------
.text$mn:0000217B                 align 4
.text$mn:0000217B _text$mn        ends
.text$mn:0000217B
.text$mn:0000217C ; ===========================================================================
.text$mn:0000217C
.text$mn:0000217C ; Segment type: Pure code
.text$mn:0000217C ; Segment permissions: Read/Execute
.text$mn:0000217C _text$mn        segment para public 'CODE' use32
.text$mn:0000217C                 assume cs:_text$mn
.text$mn:0000217C                 ;org 217Ch
.text$mn:0000217C ; COMDAT (pick any)
.text$mn:0000217C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000217C
.text$mn:0000217C ; =============== S U B R O U T I N E =======================================
.text$mn:0000217C
.text$mn:0000217C ; Attributes: bp-based frame
.text$mn:0000217C
.text$mn:0000217C ; int __cdecl std::operator==<char,std::char_traits<char>,std::allocator<char>>(int, char *Str)
.text$mn:0000217C                 public ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
.text$mn:0000217C ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z proc near
.text$mn:0000217C                                         ; CODE XREF: std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+Cp
.text$mn:0000217C
.text$mn:0000217C var_4           = dword ptr -4
.text$mn:0000217C arg_0           = dword ptr  8
.text$mn:0000217C Str             = dword ptr  0Ch
.text$mn:0000217C
.text$mn:0000217C                 push    ebp
.text$mn:0000217D                 mov     ebp, esp
.text$mn:0000217F                 push    ecx
.text$mn:00002180                 mov     eax, [ebp+Str]
.text$mn:00002183                 push    eax             ; Str
.text$mn:00002184                 mov     ecx, [ebp+arg_0]
.text$mn:00002187                 call    ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(char const *)
.text$mn:0000218C                 test    eax, eax
.text$mn:0000218E                 jnz     short loc_2199
.text$mn:00002190                 mov     [ebp+var_4], 1
.text$mn:00002197                 jmp     short loc_21A0
.text$mn:00002199 ; ---------------------------------------------------------------------------
.text$mn:00002199
.text$mn:00002199 loc_2199:                               ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+12j
.text$mn:00002199                 mov     [ebp+var_4], 0
.text$mn:000021A0
.text$mn:000021A0 loc_21A0:                               ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+1Bj
.text$mn:000021A0                 mov     al, byte ptr [ebp+var_4]
.text$mn:000021A3                 mov     esp, ebp
.text$mn:000021A5                 pop     ebp
.text$mn:000021A6                 retn
.text$mn:000021A6 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z endp
.text$mn:000021A6
.text$mn:000021A6 ; ---------------------------------------------------------------------------
.text$mn:000021A7                 align 4
.text$mn:000021A7 _text$mn        ends
.text$mn:000021A7
.text$mn:000021A8 ; ===========================================================================
.text$mn:000021A8
.text$mn:000021A8 ; Segment type: Pure code
.text$mn:000021A8 ; Segment permissions: Read/Execute
.text$mn:000021A8 _text$mn        segment para public 'CODE' use32
.text$mn:000021A8                 assume cs:_text$mn
.text$mn:000021A8                 ;org 21A8h
.text$mn:000021A8 ; COMDAT (pick any)
.text$mn:000021A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021A8
.text$mn:000021A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000021A8
.text$mn:000021A8 ; Attributes: bp-based frame
.text$mn:000021A8
.text$mn:000021A8 ; bool __cdecl std::operator==<class std::allocator<char>, class std::allocator<char>>(struct std::_Wrap_alloc<class std::allocator<char>> const &, struct std::_Wrap_alloc<class std::allocator<char>> const &)
.text$mn:000021A8                 public ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
.text$mn:000021A8 ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z proc near
.text$mn:000021A8                                         ; CODE XREF: std::operator!=<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+Cp
.text$mn:000021A8
.text$mn:000021A8 var_2           = byte ptr -2
.text$mn:000021A8 var_1           = byte ptr -1
.text$mn:000021A8 arg_0           = dword ptr  8
.text$mn:000021A8 arg_4           = dword ptr  0Ch
.text$mn:000021A8
.text$mn:000021A8                 push    ebp
.text$mn:000021A9                 mov     ebp, esp
.text$mn:000021AB                 push    ecx
.text$mn:000021AC                 mov     eax, [ebp+arg_4]
.text$mn:000021AF                 push    eax
.text$mn:000021B0                 lea     ecx, [ebp+var_1]
.text$mn:000021B3                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:000021B8                 push    eax
.text$mn:000021B9                 mov     ecx, [ebp+arg_0]
.text$mn:000021BC                 push    ecx
.text$mn:000021BD                 lea     ecx, [ebp+var_2]
.text$mn:000021C0                 call    ??0?$allocator@D@std@@QAE@ABV01@@Z ; std::allocator<char>::allocator<char>(std::allocator<char> const &)
.text$mn:000021C5                 push    eax
.text$mn:000021C6                 call    ??$?8DD@std@@YA_NABV?$allocator@D@0@0@Z ; std::operator==<char,char>(std::allocator<char> const &,std::allocator<char> const &)
.text$mn:000021CB                 add     esp, 8
.text$mn:000021CE                 mov     esp, ebp
.text$mn:000021D0                 pop     ebp
.text$mn:000021D1                 retn
.text$mn:000021D1 ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z endp
.text$mn:000021D1
.text$mn:000021D1 ; ---------------------------------------------------------------------------
.text$mn:000021D2                 align 4
.text$mn:000021D2 _text$mn        ends
.text$mn:000021D2
.text$mn:000021D4 ; ===========================================================================
.text$mn:000021D4
.text$mn:000021D4 ; Segment type: Pure code
.text$mn:000021D4 ; Segment permissions: Read/Execute
.text$mn:000021D4 _text$mn        segment para public 'CODE' use32
.text$mn:000021D4                 assume cs:_text$mn
.text$mn:000021D4                 ;org 21D4h
.text$mn:000021D4 ; COMDAT (pick any)
.text$mn:000021D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000021D4
.text$mn:000021D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000021D4
.text$mn:000021D4 ; Attributes: bp-based frame
.text$mn:000021D4
.text$mn:000021D4 ; int __cdecl std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:000021D4                 public ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:000021D4 ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:000021D4                                         ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Cp
.text$mn:000021D4
.text$mn:000021D4 var_4           = dword ptr -4
.text$mn:000021D4 arg_0           = dword ptr  8
.text$mn:000021D4 Str             = dword ptr  0Ch
.text$mn:000021D4
.text$mn:000021D4                 push    ebp
.text$mn:000021D5                 mov     ebp, esp
.text$mn:000021D7                 push    ecx
.text$mn:000021D8                 mov     eax, [ebp+Str]
.text$mn:000021DB                 push    eax             ; Str
.text$mn:000021DC                 mov     ecx, [ebp+arg_0]
.text$mn:000021DF                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:000021E4                 test    eax, eax
.text$mn:000021E6                 jnz     short loc_21F1
.text$mn:000021E8                 mov     [ebp+var_4], 1
.text$mn:000021EF                 jmp     short loc_21F8
.text$mn:000021F1 ; ---------------------------------------------------------------------------
.text$mn:000021F1
.text$mn:000021F1 loc_21F1:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+12j
.text$mn:000021F1                 mov     [ebp+var_4], 0
.text$mn:000021F8
.text$mn:000021F8 loc_21F8:                               ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+1Bj
.text$mn:000021F8                 mov     al, byte ptr [ebp+var_4]
.text$mn:000021FB                 mov     esp, ebp
.text$mn:000021FD                 pop     ebp
.text$mn:000021FE                 retn
.text$mn:000021FE ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:000021FE
.text$mn:000021FE ; ---------------------------------------------------------------------------
.text$mn:000021FF                 align 10h
.text$mn:000021FF _text$mn        ends
.text$mn:000021FF
.text$mn:00002200 ; ===========================================================================
.text$mn:00002200
.text$mn:00002200 ; Segment type: Pure code
.text$mn:00002200 ; Segment permissions: Read/Execute
.text$mn:00002200 _text$mn        segment para public 'CODE' use32
.text$mn:00002200                 assume cs:_text$mn
.text$mn:00002200                 ;org 2200h
.text$mn:00002200 ; COMDAT (pick any)
.text$mn:00002200                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002200
.text$mn:00002200 ; =============== S U B R O U T I N E =======================================
.text$mn:00002200
.text$mn:00002200 ; Attributes: bp-based frame
.text$mn:00002200
.text$mn:00002200 ; int __cdecl std::operator!=<char,std::char_traits<char>,std::allocator<char>>(int, char *Str)
.text$mn:00002200                 public ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z
.text$mn:00002200 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z proc near
.text$mn:00002200                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+CE3p
.text$mn:00002200
.text$mn:00002200 var_4           = dword ptr -4
.text$mn:00002200 arg_0           = dword ptr  8
.text$mn:00002200 Str             = dword ptr  0Ch
.text$mn:00002200
.text$mn:00002200                 push    ebp
.text$mn:00002201                 mov     ebp, esp
.text$mn:00002203                 push    ecx
.text$mn:00002204                 mov     eax, [ebp+Str]
.text$mn:00002207                 push    eax             ; Str
.text$mn:00002208                 mov     ecx, [ebp+arg_0]
.text$mn:0000220B                 push    ecx             ; int
.text$mn:0000220C                 call    ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text$mn:00002211                 add     esp, 8
.text$mn:00002214                 movzx   edx, al
.text$mn:00002217                 test    edx, edx
.text$mn:00002219                 jnz     short loc_2224
.text$mn:0000221B                 mov     [ebp+var_4], 1
.text$mn:00002222                 jmp     short loc_222B
.text$mn:00002224 ; ---------------------------------------------------------------------------
.text$mn:00002224
.text$mn:00002224 loc_2224:                               ; CODE XREF: std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+19j
.text$mn:00002224                 mov     [ebp+var_4], 0
.text$mn:0000222B
.text$mn:0000222B loc_222B:                               ; CODE XREF: std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+22j
.text$mn:0000222B                 mov     al, byte ptr [ebp+var_4]
.text$mn:0000222E                 mov     esp, ebp
.text$mn:00002230                 pop     ebp
.text$mn:00002231                 retn
.text$mn:00002231 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z endp
.text$mn:00002231
.text$mn:00002231 ; ---------------------------------------------------------------------------
.text$mn:00002232                 align 4
.text$mn:00002232 _text$mn        ends
.text$mn:00002232
.text$mn:00002234 ; ===========================================================================
.text$mn:00002234
.text$mn:00002234 ; Segment type: Pure code
.text$mn:00002234 ; Segment permissions: Read/Execute
.text$mn:00002234 _text$mn        segment para public 'CODE' use32
.text$mn:00002234                 assume cs:_text$mn
.text$mn:00002234                 ;org 2234h
.text$mn:00002234 ; COMDAT (pick any)
.text$mn:00002234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002234
.text$mn:00002234 ; =============== S U B R O U T I N E =======================================
.text$mn:00002234
.text$mn:00002234 ; Attributes: bp-based frame
.text$mn:00002234
.text$mn:00002234 ; bool __cdecl std::operator!=<class std::allocator<char>, class std::allocator<char>>(struct std::_Wrap_alloc<class std::allocator<char>> const &, struct std::_Wrap_alloc<class std::allocator<char>> const &)
.text$mn:00002234                 public ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
.text$mn:00002234 ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z proc near
.text$mn:00002234                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+73p
.text$mn:00002234
.text$mn:00002234 var_4           = dword ptr -4
.text$mn:00002234 arg_0           = dword ptr  8
.text$mn:00002234 arg_4           = dword ptr  0Ch
.text$mn:00002234
.text$mn:00002234                 push    ebp
.text$mn:00002235                 mov     ebp, esp
.text$mn:00002237                 push    ecx
.text$mn:00002238                 mov     eax, [ebp+arg_4]
.text$mn:0000223B                 push    eax
.text$mn:0000223C                 mov     ecx, [ebp+arg_0]
.text$mn:0000223F                 push    ecx
.text$mn:00002240                 call    ??$?8V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator==<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)
.text$mn:00002245                 add     esp, 8
.text$mn:00002248                 movzx   edx, al
.text$mn:0000224B                 test    edx, edx
.text$mn:0000224D                 jnz     short loc_2258
.text$mn:0000224F                 mov     [ebp+var_4], 1
.text$mn:00002256                 jmp     short loc_225F
.text$mn:00002258 ; ---------------------------------------------------------------------------
.text$mn:00002258
.text$mn:00002258 loc_2258:                               ; CODE XREF: std::operator!=<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+19j
.text$mn:00002258                 mov     [ebp+var_4], 0
.text$mn:0000225F
.text$mn:0000225F loc_225F:                               ; CODE XREF: std::operator!=<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+22j
.text$mn:0000225F                 mov     al, byte ptr [ebp+var_4]
.text$mn:00002262                 mov     esp, ebp
.text$mn:00002264                 pop     ebp
.text$mn:00002265                 retn
.text$mn:00002265 ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z endp
.text$mn:00002265
.text$mn:00002265 ; ---------------------------------------------------------------------------
.text$mn:00002266                 align 4
.text$mn:00002266 _text$mn        ends
.text$mn:00002266
.text$mn:00002268 ; ===========================================================================
.text$mn:00002268
.text$mn:00002268 ; Segment type: Pure code
.text$mn:00002268 ; Segment permissions: Read/Execute
.text$mn:00002268 _text$mn        segment para public 'CODE' use32
.text$mn:00002268                 assume cs:_text$mn
.text$mn:00002268                 ;org 2268h
.text$mn:00002268 ; COMDAT (pick any)
.text$mn:00002268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002268
.text$mn:00002268 ; =============== S U B R O U T I N E =======================================
.text$mn:00002268
.text$mn:00002268 ; Attributes: bp-based frame
.text$mn:00002268
.text$mn:00002268 ; int __cdecl std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(int, wchar_t *Str)
.text$mn:00002268                 public ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z
.text$mn:00002268 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z proc near
.text$mn:00002268                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+AFAp
.text$mn:00002268
.text$mn:00002268 var_4           = dword ptr -4
.text$mn:00002268 arg_0           = dword ptr  8
.text$mn:00002268 Str             = dword ptr  0Ch
.text$mn:00002268
.text$mn:00002268                 push    ebp
.text$mn:00002269                 mov     ebp, esp
.text$mn:0000226B                 push    ecx
.text$mn:0000226C                 mov     eax, [ebp+Str]
.text$mn:0000226F                 push    eax             ; Str
.text$mn:00002270                 mov     ecx, [ebp+arg_0]
.text$mn:00002273                 push    ecx             ; int
.text$mn:00002274                 call    ??$?8_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z ; std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)
.text$mn:00002279                 add     esp, 8
.text$mn:0000227C                 movzx   edx, al
.text$mn:0000227F                 test    edx, edx
.text$mn:00002281                 jnz     short loc_228C
.text$mn:00002283                 mov     [ebp+var_4], 1
.text$mn:0000228A                 jmp     short loc_2293
.text$mn:0000228C ; ---------------------------------------------------------------------------
.text$mn:0000228C
.text$mn:0000228C loc_228C:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+19j
.text$mn:0000228C                 mov     [ebp+var_4], 0
.text$mn:00002293
.text$mn:00002293 loc_2293:                               ; CODE XREF: std::operator!=<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+22j
.text$mn:00002293                 mov     al, byte ptr [ebp+var_4]
.text$mn:00002296                 mov     esp, ebp
.text$mn:00002298                 pop     ebp
.text$mn:00002299                 retn
.text$mn:00002299 ??$?9_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_W@Z endp
.text$mn:00002299
.text$mn:00002299 ; ---------------------------------------------------------------------------
.text$mn:0000229A                 align 4
.text$mn:0000229A _text$mn        ends
.text$mn:0000229A
.text$mn:0000229C ; ===========================================================================
.text$mn:0000229C
.text$mn:0000229C ; Segment type: Pure code
.text$mn:0000229C ; Segment permissions: Read/Execute
.text$mn:0000229C _text$mn        segment para public 'CODE' use32
.text$mn:0000229C                 assume cs:_text$mn
.text$mn:0000229C                 ;org 229Ch
.text$mn:0000229C ; COMDAT (pick any)
.text$mn:0000229C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000229C
.text$mn:0000229C ; =============== S U B R O U T I N E =======================================
.text$mn:0000229C
.text$mn:0000229C ; Attributes: bp-based frame
.text$mn:0000229C
.text$mn:0000229C ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:0000229C                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:0000229C ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:0000229C                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:0000229C
.text$mn:0000229C var_4           = dword ptr -4
.text$mn:0000229C arg_0           = dword ptr  8
.text$mn:0000229C
.text$mn:0000229C                 push    ebp
.text$mn:0000229D                 mov     ebp, esp
.text$mn:0000229F                 push    ecx
.text$mn:000022A0                 mov     [ebp+var_4], 0
.text$mn:000022A7                 cmp     [ebp+arg_0], 0
.text$mn:000022AB                 jnz     short loc_22AF
.text$mn:000022AD                 jmp     short loc_22CF
.text$mn:000022AF ; ---------------------------------------------------------------------------
.text$mn:000022AF
.text$mn:000022AF loc_22AF:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:000022AF                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:000022B3                 ja      short loc_22CA
.text$mn:000022B5                 mov     eax, [ebp+arg_0]
.text$mn:000022B8                 push    eax             ; unsigned int
.text$mn:000022B9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000022BE                 add     esp, 4
.text$mn:000022C1                 mov     [ebp+var_4], eax
.text$mn:000022C4                 cmp     [ebp+var_4], 0
.text$mn:000022C8                 jnz     short loc_22CF
.text$mn:000022CA
.text$mn:000022CA loc_22CA:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:000022CA                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000022CF
.text$mn:000022CF loc_22CF:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:000022CF                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:000022CF                 mov     eax, [ebp+var_4]
.text$mn:000022D2                 mov     esp, ebp
.text$mn:000022D4                 pop     ebp
.text$mn:000022D5                 retn
.text$mn:000022D5 ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:000022D5
.text$mn:000022D5 ; ---------------------------------------------------------------------------
.text$mn:000022D6                 align 4
.text$mn:000022D6 _text$mn        ends
.text$mn:000022D6
.text$mn:000022D8 ; ===========================================================================
.text$mn:000022D8
.text$mn:000022D8 ; Segment type: Pure code
.text$mn:000022D8 ; Segment permissions: Read/Execute
.text$mn:000022D8 _text$mn        segment para public 'CODE' use32
.text$mn:000022D8                 assume cs:_text$mn
.text$mn:000022D8                 ;org 22D8h
.text$mn:000022D8 ; COMDAT (pick any)
.text$mn:000022D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000022D8
.text$mn:000022D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000022D8
.text$mn:000022D8 ; Attributes: bp-based frame
.text$mn:000022D8
.text$mn:000022D8 ; struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * __cdecl std::_Allocate<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(unsigned int, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)
.text$mn:000022D8                 public ??$_Allocate@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@IPAU10@@Z
.text$mn:000022D8 ??$_Allocate@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@IPAU10@@Z proc near
.text$mn:000022D8                                         ; CODE XREF: std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)+Dp
.text$mn:000022D8
.text$mn:000022D8 var_4           = dword ptr -4
.text$mn:000022D8 arg_0           = dword ptr  8
.text$mn:000022D8
.text$mn:000022D8                 push    ebp
.text$mn:000022D9                 mov     ebp, esp
.text$mn:000022DB                 push    ecx
.text$mn:000022DC                 mov     [ebp+var_4], 0
.text$mn:000022E3                 cmp     [ebp+arg_0], 0
.text$mn:000022E7                 jnz     short loc_22EB
.text$mn:000022E9                 jmp     short loc_230F
.text$mn:000022EB ; ---------------------------------------------------------------------------
.text$mn:000022EB
.text$mn:000022EB loc_22EB:                               ; CODE XREF: std::_Allocate<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(uint,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+Fj
.text$mn:000022EB                 cmp     [ebp+arg_0], 4924924h
.text$mn:000022F2                 ja      short loc_230A
.text$mn:000022F4                 imul    eax, [ebp+arg_0], 38h
.text$mn:000022F8                 push    eax             ; unsigned int
.text$mn:000022F9                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000022FE                 add     esp, 4
.text$mn:00002301                 mov     [ebp+var_4], eax
.text$mn:00002304                 cmp     [ebp+var_4], 0
.text$mn:00002308                 jnz     short loc_230F
.text$mn:0000230A
.text$mn:0000230A loc_230A:                               ; CODE XREF: std::_Allocate<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(uint,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+1Aj
.text$mn:0000230A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000230F
.text$mn:0000230F loc_230F:                               ; CODE XREF: std::_Allocate<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(uint,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+11j
.text$mn:0000230F                                         ; std::_Allocate<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(uint,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+30j
.text$mn:0000230F                 mov     eax, [ebp+var_4]
.text$mn:00002312                 mov     esp, ebp
.text$mn:00002314                 pop     ebp
.text$mn:00002315                 retn
.text$mn:00002315 ??$_Allocate@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@IPAU10@@Z endp
.text$mn:00002315
.text$mn:00002315 ; ---------------------------------------------------------------------------
.text$mn:00002316                 align 4
.text$mn:00002316 _text$mn        ends
.text$mn:00002316
.text$mn:00002318 ; ===========================================================================
.text$mn:00002318
.text$mn:00002318 ; Segment type: Pure code
.text$mn:00002318 ; Segment permissions: Read/Execute
.text$mn:00002318 _text$mn        segment para public 'CODE' use32
.text$mn:00002318                 assume cs:_text$mn
.text$mn:00002318                 ;org 2318h
.text$mn:00002318 ; COMDAT (pick any)
.text$mn:00002318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002318
.text$mn:00002318 ; =============== S U B R O U T I N E =======================================
.text$mn:00002318
.text$mn:00002318 ; Attributes: bp-based frame
.text$mn:00002318
.text$mn:00002318 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:00002318                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:00002318 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:00002318                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:00002318
.text$mn:00002318 var_4           = dword ptr -4
.text$mn:00002318 arg_0           = dword ptr  8
.text$mn:00002318
.text$mn:00002318                 push    ebp
.text$mn:00002319                 mov     ebp, esp
.text$mn:0000231B                 push    ecx
.text$mn:0000231C                 mov     [ebp+var_4], 0
.text$mn:00002323                 cmp     [ebp+arg_0], 0
.text$mn:00002327                 jnz     short loc_232B
.text$mn:00002329                 jmp     short loc_2351
.text$mn:0000232B ; ---------------------------------------------------------------------------
.text$mn:0000232B
.text$mn:0000232B loc_232B:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:0000232B                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:00002332                 ja      short loc_234C
.text$mn:00002334                 mov     eax, [ebp+arg_0]
.text$mn:00002337                 shl     eax, 3
.text$mn:0000233A                 push    eax             ; unsigned int
.text$mn:0000233B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00002340                 add     esp, 4
.text$mn:00002343                 mov     [ebp+var_4], eax
.text$mn:00002346                 cmp     [ebp+var_4], 0
.text$mn:0000234A                 jnz     short loc_2351
.text$mn:0000234C
.text$mn:0000234C loc_234C:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:0000234C                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00002351
.text$mn:00002351 loc_2351:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00002351                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00002351                 mov     eax, [ebp+var_4]
.text$mn:00002354                 mov     esp, ebp
.text$mn:00002356                 pop     ebp
.text$mn:00002357                 retn
.text$mn:00002357 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:00002357
.text$mn:00002357 _text$mn        ends
.text$mn:00002357
.text$mn:00002358 ; ===========================================================================
.text$mn:00002358
.text$mn:00002358 ; Segment type: Pure code
.text$mn:00002358 ; Segment permissions: Read/Execute
.text$mn:00002358 _text$mn        segment para public 'CODE' use32
.text$mn:00002358                 assume cs:_text$mn
.text$mn:00002358                 ;org 2358h
.text$mn:00002358 ; COMDAT (pick any)
.text$mn:00002358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002358
.text$mn:00002358 ; =============== S U B R O U T I N E =======================================
.text$mn:00002358
.text$mn:00002358 ; Attributes: bp-based frame
.text$mn:00002358
.text$mn:00002358 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Allocate<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00002358                 public ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z
.text$mn:00002358 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z proc near
.text$mn:00002358                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)+Dp
.text$mn:00002358
.text$mn:00002358 var_4           = dword ptr -4
.text$mn:00002358 arg_0           = dword ptr  8
.text$mn:00002358
.text$mn:00002358                 push    ebp
.text$mn:00002359                 mov     ebp, esp
.text$mn:0000235B                 push    ecx
.text$mn:0000235C                 mov     [ebp+var_4], 0
.text$mn:00002363                 cmp     [ebp+arg_0], 0
.text$mn:00002367                 jnz     short loc_236B
.text$mn:00002369                 jmp     short loc_238F
.text$mn:0000236B ; ---------------------------------------------------------------------------
.text$mn:0000236B
.text$mn:0000236B loc_236B:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fj
.text$mn:0000236B                 cmp     [ebp+arg_0], 9249249h
.text$mn:00002372                 ja      short loc_238A
.text$mn:00002374                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:00002378                 push    eax             ; unsigned int
.text$mn:00002379                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:0000237E                 add     esp, 4
.text$mn:00002381                 mov     [ebp+var_4], eax
.text$mn:00002384                 cmp     [ebp+var_4], 0
.text$mn:00002388                 jnz     short loc_238F
.text$mn:0000238A
.text$mn:0000238A loc_238A:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+1Aj
.text$mn:0000238A                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:0000238F
.text$mn:0000238F loc_238F:                               ; CODE XREF: std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+11j
.text$mn:0000238F                                         ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+30j
.text$mn:0000238F                 mov     eax, [ebp+var_4]
.text$mn:00002392                 mov     esp, ebp
.text$mn:00002394                 pop     ebp
.text$mn:00002395                 retn
.text$mn:00002395 ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z endp
.text$mn:00002395
.text$mn:00002395 ; ---------------------------------------------------------------------------
.text$mn:00002396                 align 4
.text$mn:00002396 _text$mn        ends
.text$mn:00002396
.text$mn:00002398 ; ===========================================================================
.text$mn:00002398
.text$mn:00002398 ; Segment type: Pure code
.text$mn:00002398 ; Segment permissions: Read/Execute
.text$mn:00002398 _text$mn        segment para public 'CODE' use32
.text$mn:00002398                 assume cs:_text$mn
.text$mn:00002398                 ;org 2398h
.text$mn:00002398 ; COMDAT (pick any)
.text$mn:00002398                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002398
.text$mn:00002398 ; =============== S U B R O U T I N E =======================================
.text$mn:00002398
.text$mn:00002398 ; Attributes: bp-based frame
.text$mn:00002398
.text$mn:00002398 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00002398                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00002398 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00002398                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00002398
.text$mn:00002398 var_4           = dword ptr -4
.text$mn:00002398 arg_0           = dword ptr  8
.text$mn:00002398
.text$mn:00002398                 push    ebp
.text$mn:00002399                 mov     ebp, esp
.text$mn:0000239B                 push    ecx
.text$mn:0000239C                 mov     [ebp+var_4], 0
.text$mn:000023A3                 cmp     [ebp+arg_0], 0
.text$mn:000023A7                 jnz     short loc_23AB
.text$mn:000023A9                 jmp     short loc_23D0
.text$mn:000023AB ; ---------------------------------------------------------------------------
.text$mn:000023AB
.text$mn:000023AB loc_23AB:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:000023AB                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:000023B2                 ja      short loc_23CB
.text$mn:000023B4                 mov     eax, [ebp+arg_0]
.text$mn:000023B7                 shl     eax, 1
.text$mn:000023B9                 push    eax             ; unsigned int
.text$mn:000023BA                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000023BF                 add     esp, 4
.text$mn:000023C2                 mov     [ebp+var_4], eax
.text$mn:000023C5                 cmp     [ebp+var_4], 0
.text$mn:000023C9                 jnz     short loc_23D0
.text$mn:000023CB
.text$mn:000023CB loc_23CB:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:000023CB                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000023D0
.text$mn:000023D0 loc_23D0:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:000023D0                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:000023D0                 mov     eax, [ebp+var_4]
.text$mn:000023D3                 mov     esp, ebp
.text$mn:000023D5                 pop     ebp
.text$mn:000023D6                 retn
.text$mn:000023D6 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:000023D6
.text$mn:000023D6 ; ---------------------------------------------------------------------------
.text$mn:000023D7                 align 4
.text$mn:000023D7 _text$mn        ends
.text$mn:000023D7
.text$mn:000023D8 ; ===========================================================================
.text$mn:000023D8
.text$mn:000023D8 ; Segment type: Pure code
.text$mn:000023D8 ; Segment permissions: Read/Execute
.text$mn:000023D8 _text$mn        segment para public 'CODE' use32
.text$mn:000023D8                 assume cs:_text$mn
.text$mn:000023D8                 ;org 23D8h
.text$mn:000023D8 ; COMDAT (pick any)
.text$mn:000023D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000023D8
.text$mn:000023D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000023D8
.text$mn:000023D8 ; Attributes: bp-based frame
.text$mn:000023D8
.text$mn:000023D8 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Construct<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, struct std::forward_iterator_tag)
.text$mn:000023D8                 public ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.text$mn:000023D8 ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z proc near
.text$mn:000023D8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+ADp
.text$mn:000023D8
.text$mn:000023D8 var_48          = dword ptr -48h
.text$mn:000023D8 var_44          = dword ptr -44h
.text$mn:000023D8 var_40          = dword ptr -40h
.text$mn:000023D8 var_3C          = dword ptr -3Ch
.text$mn:000023D8 var_38          = dword ptr -38h
.text$mn:000023D8 var_34          = dword ptr -34h
.text$mn:000023D8 var_30          = dword ptr -30h
.text$mn:000023D8 var_2C          = dword ptr -2Ch
.text$mn:000023D8 var_28          = dword ptr -28h
.text$mn:000023D8 var_24          = dword ptr -24h
.text$mn:000023D8 var_20          = dword ptr -20h
.text$mn:000023D8 var_1C          = dword ptr -1Ch
.text$mn:000023D8 var_18          = dword ptr -18h
.text$mn:000023D8 var_14          = dword ptr -14h
.text$mn:000023D8 var_10          = dword ptr -10h
.text$mn:000023D8 var_C           = dword ptr -0Ch
.text$mn:000023D8 var_4           = dword ptr -4
.text$mn:000023D8 arg_0           = byte ptr  8
.text$mn:000023D8 arg_C           = dword ptr  14h
.text$mn:000023D8
.text$mn:000023D8 ; FUNCTION CHUNK AT .text$mn:00002519 SIZE 00000009 BYTES
.text$mn:000023D8 ; FUNCTION CHUNK AT .text$mn:00002529 SIZE 0000002F BYTES
.text$mn:000023D8
.text$mn:000023D8                 push    ebp
.text$mn:000023D9                 mov     ebp, esp
.text$mn:000023DB                 push    0FFFFFFFFh
.text$mn:000023DD                 push    offset __ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.text$mn:000023E2                 mov     eax, large fs:0
.text$mn:000023E8                 push    eax
.text$mn:000023E9                 push    ecx
.text$mn:000023EA                 sub     esp, 38h
.text$mn:000023ED                 push    ebx
.text$mn:000023EE                 push    esi
.text$mn:000023EF                 push    edi
.text$mn:000023F0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000023F5                 xor     eax, ebp
.text$mn:000023F7                 push    eax
.text$mn:000023F8                 lea     eax, [ebp+var_C]
.text$mn:000023FB                 mov     large fs:0, eax
.text$mn:00002401                 mov     [ebp+var_10], esp
.text$mn:00002404                 mov     [ebp+var_14], ecx
.text$mn:00002407                 mov     [ebp+var_4], 1
.text$mn:0000240E                 push    34Bh            ; unsigned int
.text$mn:00002413                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00002418                 sub     esp, 0Ch
.text$mn:0000241B                 mov     ecx, esp
.text$mn:0000241D                 mov     [ebp+var_2C], esp
.text$mn:00002420                 lea     eax, [ebp+arg_C]
.text$mn:00002423                 push    eax             ; int
.text$mn:00002424                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002429                 mov     [ebp+var_1C], eax
.text$mn:0000242C                 mov     ecx, [ebp+var_1C]
.text$mn:0000242F                 mov     [ebp+var_30], ecx
.text$mn:00002432                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002436                 sub     esp, 0Ch
.text$mn:00002439                 mov     ecx, esp
.text$mn:0000243B                 mov     [ebp+var_34], esp
.text$mn:0000243E                 lea     edx, [ebp+arg_0]
.text$mn:00002441                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00002442                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002447                 mov     [ebp+var_20], eax
.text$mn:0000244A                 mov     eax, [ebp+var_20]
.text$mn:0000244D                 mov     [ebp+var_38], eax
.text$mn:00002450                 mov     byte ptr [ebp+var_4], 3
.text$mn:00002454                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002458                 call    ??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z ; std::_Debug_range<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint)
.text$mn:0000245D                 add     esp, 20h
.text$mn:00002460                 mov     [ebp+var_18], 0
.text$mn:00002467                 lea     ecx, [ebp+var_18]
.text$mn:0000246A                 push    ecx
.text$mn:0000246B                 sub     esp, 0Ch
.text$mn:0000246E                 mov     ecx, esp
.text$mn:00002470                 mov     [ebp+var_3C], esp
.text$mn:00002473                 lea     edx, [ebp+arg_C]
.text$mn:00002476                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00002477                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:0000247C                 mov     [ebp+var_24], eax
.text$mn:0000247F                 mov     eax, [ebp+var_24]
.text$mn:00002482                 mov     [ebp+var_40], eax
.text$mn:00002485                 mov     byte ptr [ebp+var_4], 4
.text$mn:00002489                 sub     esp, 0Ch
.text$mn:0000248C                 mov     ecx, esp
.text$mn:0000248E                 mov     [ebp+var_44], esp
.text$mn:00002491                 lea     edx, [ebp+arg_0]
.text$mn:00002494                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00002495                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:0000249A                 mov     [ebp+var_28], eax
.text$mn:0000249D                 mov     eax, [ebp+var_28]
.text$mn:000024A0                 mov     [ebp+var_48], eax
.text$mn:000024A3                 mov     byte ptr [ebp+var_4], 5
.text$mn:000024A7                 mov     byte ptr [ebp+var_4], 1
.text$mn:000024AB                 call    ??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z ; std::_Distance<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &)
.text$mn:000024B0                 add     esp, 1Ch
.text$mn:000024B3                 mov     ecx, [ebp+var_18]
.text$mn:000024B6                 push    ecx
.text$mn:000024B7                 mov     ecx, [ebp+var_14]
.text$mn:000024BA                 call    ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)
.text$mn:000024BF                 mov     byte ptr [ebp+var_4], 6
.text$mn:000024C3                 jmp     short loc_24CD
.text$mn:000024C5 ; ---------------------------------------------------------------------------
.text$mn:000024C5
.text$mn:000024C5 loc_24C5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+122j
.text$mn:000024C5                 lea     ecx, [ebp+arg_0]
.text$mn:000024C8                 call    ??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)
.text$mn:000024CD
.text$mn:000024CD loc_24CD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+EBj
.text$mn:000024CD                 lea     edx, [ebp+arg_C]
.text$mn:000024D0                 push    edx             ; std::_Iterator_base12 *
.text$mn:000024D1                 lea     ecx, [ebp+arg_0]
.text$mn:000024D4                 call    ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator!=(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:000024D9                 movzx   eax, al
.text$mn:000024DC                 test    eax, eax
.text$mn:000024DE                 jz      short loc_24FC
.text$mn:000024E0                 lea     ecx, [ebp+arg_0]
.text$mn:000024E3                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)
.text$mn:000024E8                 movsx   cx, byte ptr [eax]
.text$mn:000024EC                 movzx   edx, cx
.text$mn:000024EF                 push    edx
.text$mn:000024F0                 push    1
.text$mn:000024F2                 mov     ecx, [ebp+var_14]
.text$mn:000024F5                 call    ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)
.text$mn:000024FA                 jmp     short loc_24C5
.text$mn:000024FC ; ---------------------------------------------------------------------------
.text$mn:000024FC
.text$mn:000024FC loc_24FC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+106j
.text$mn:000024FC                 jmp     short loc_2519
.text$mn:000024FC ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z endp
.text$mn:000024FC
.text$mn:000024FE
.text$mn:000024FE ; =============== S U B R O U T I N E =======================================
.text$mn:000024FE
.text$mn:000024FE ; Attributes: noreturn
.text$mn:000024FE
.text$mn:000024FE __catch$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$0 proc near
.text$mn:000024FE                                         ; DATA XREF: .xdata$x:00009FE4o
.text$mn:000024FE                 push    0
.text$mn:00002500                 push    1
.text$mn:00002502                 mov     ecx, [ebp-14h]
.text$mn:00002505                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000250A                 push    0
.text$mn:0000250C                 push    0
.text$mn:0000250E                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:0000250E __catch$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$0 endp
.text$mn:0000250E
.text$mn:00002513 ; ---------------------------------------------------------------------------
.text$mn:00002513                 mov     eax, offset $LN16
.text$mn:00002518                 retn
.text$mn:00002519 ; ---------------------------------------------------------------------------
.text$mn:00002519 ; START OF FUNCTION CHUNK FOR ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.text$mn:00002519
.text$mn:00002519 loc_2519:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag):loc_24FCj
.text$mn:00002519                 mov     [ebp+var_4], 1
.text$mn:00002520                 jmp     short loc_2529
.text$mn:00002520 ; END OF FUNCTION CHUNK FOR ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.text$mn:00002522
.text$mn:00002522 ; =============== S U B R O U T I N E =======================================
.text$mn:00002522
.text$mn:00002522
.text$mn:00002522 $LN16           proc near               ; DATA XREF: .text$mn:00002513o
.text$mn:00002522                 mov     dword ptr [ebp-4], 1
.text$mn:00002522 $LN16           endp ; sp-analysis failed
.text$mn:00002522
.text$mn:00002529 ; START OF FUNCTION CHUNK FOR ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.text$mn:00002529
.text$mn:00002529 loc_2529:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+148j
.text$mn:00002529                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000252D                 lea     ecx, [ebp+arg_0]
.text$mn:00002530                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00002535                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000253C                 lea     ecx, [ebp+arg_C]
.text$mn:0000253F                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00002544                 mov     ecx, [ebp+var_C]
.text$mn:00002547                 mov     large fs:0, ecx
.text$mn:0000254E                 pop     ecx
.text$mn:0000254F                 pop     edi
.text$mn:00002550                 pop     esi
.text$mn:00002551                 pop     ebx
.text$mn:00002552                 mov     esp, ebp
.text$mn:00002554                 pop     ebp
.text$mn:00002555                 retn    1Ch
.text$mn:00002555 ; END OF FUNCTION CHUNK FOR ??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.text$mn:00002555 _text$mn        ends
.text$mn:00002555
.text$x:00002558 ; ===========================================================================
.text$x:00002558
.text$x:00002558 ; Segment type: Pure code
.text$x:00002558 ; Segment permissions: Read/Execute
.text$x:00002558 _text$x         segment para public 'CODE' use32
.text$x:00002558                 assume cs:_text$x
.text$x:00002558                 ;org 2558h
.text$x:00002558 ; COMDAT (pick associative to section at 23D8)
.text$x:00002558                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002558
.text$x:00002558 ; =============== S U B R O U T I N E =======================================
.text$x:00002558
.text$x:00002558
.text$x:00002558 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$2 proc near
.text$x:00002558                                         ; DATA XREF: .xdata$x:0000A024o
.text$x:00002558                 lea     ecx, [ebp+14h]
.text$x:0000255B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:0000255B __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$2 endp
.text$x:0000255B
.text$x:00002560
.text$x:00002560 ; =============== S U B R O U T I N E =======================================
.text$x:00002560
.text$x:00002560
.text$x:00002560 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$3 proc near
.text$x:00002560                                         ; DATA XREF: .xdata$x:0000A02Co
.text$x:00002560                 lea     ecx, [ebp+8]
.text$x:00002563                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002563 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$3 endp
.text$x:00002563
.text$x:00002568
.text$x:00002568 ; =============== S U B R O U T I N E =======================================
.text$x:00002568
.text$x:00002568
.text$x:00002568 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$4 proc near
.text$x:00002568                                         ; DATA XREF: .xdata$x:0000A034o
.text$x:00002568                 mov     ecx, [ebp-2Ch]
.text$x:0000256B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:0000256B __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$4 endp
.text$x:0000256B
.text$x:00002570
.text$x:00002570 ; =============== S U B R O U T I N E =======================================
.text$x:00002570
.text$x:00002570
.text$x:00002570 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$5 proc near
.text$x:00002570                                         ; DATA XREF: .xdata$x:0000A03Co
.text$x:00002570                 mov     ecx, [ebp-34h]
.text$x:00002573                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002573 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$5 endp
.text$x:00002573
.text$x:00002578
.text$x:00002578 ; =============== S U B R O U T I N E =======================================
.text$x:00002578
.text$x:00002578
.text$x:00002578 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$6 proc near
.text$x:00002578                                         ; DATA XREF: .xdata$x:0000A044o
.text$x:00002578                 mov     ecx, [ebp-3Ch]
.text$x:0000257B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:0000257B __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$6 endp
.text$x:0000257B
.text$x:00002580
.text$x:00002580 ; =============== S U B R O U T I N E =======================================
.text$x:00002580
.text$x:00002580
.text$x:00002580 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$7 proc near
.text$x:00002580                                         ; DATA XREF: .xdata$x:0000A04Co
.text$x:00002580                 mov     ecx, [ebp-44h]
.text$x:00002583                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002583 __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$7 endp
.text$x:00002583
.text$x:00002588
.text$x:00002588 ; =============== S U B R O U T I N E =======================================
.text$x:00002588
.text$x:00002588
.text$x:00002588 __ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z proc near
.text$x:00002588                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+5o
.text$x:00002588
.text$x:00002588 arg_4           = dword ptr  8
.text$x:00002588
.text$x:00002588                 mov     edx, [esp+arg_4]
.text$x:0000258C                 lea     eax, [edx+0Ch]
.text$x:0000258F                 mov     ecx, [edx-4Ch]
.text$x:00002592                 xor     ecx, eax
.text$x:00002594                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002599                 mov     eax, offset __ehfuncinfo$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.text$x:0000259E                 jmp     ___CxxFrameHandler3
.text$x:0000259E __ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z endp
.text$x:0000259E
.text$x:0000259E ; ---------------------------------------------------------------------------
.text$x:000025A3                 align 4
.text$x:000025A3 _text$x         ends
.text$x:000025A3
.text$mn:000025A4 ; ===========================================================================
.text$mn:000025A4
.text$mn:000025A4 ; Segment type: Pure code
.text$mn:000025A4 ; Segment permissions: Read/Execute
.text$mn:000025A4 _text$mn        segment para public 'CODE' use32
.text$mn:000025A4                 assume cs:_text$mn
.text$mn:000025A4                 ;org 25A4h
.text$mn:000025A4 ; COMDAT (pick any)
.text$mn:000025A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000025A4
.text$mn:000025A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000025A4
.text$mn:000025A4 ; Attributes: bp-based frame
.text$mn:000025A4
.text$mn:000025A4 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:000025A4                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:000025A4 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:000025A4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:000025A4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp ...
.text$mn:000025A4
.text$mn:000025A4 arg_0           = dword ptr  8
.text$mn:000025A4 arg_4           = dword ptr  0Ch
.text$mn:000025A4 arg_8           = dword ptr  10h
.text$mn:000025A4
.text$mn:000025A4                 push    ebp
.text$mn:000025A5                 mov     ebp, esp
.text$mn:000025A7                 cmp     [ebp+arg_0], 0
.text$mn:000025AB                 jnz     short loc_25C2
.text$mn:000025AD                 mov     eax, [ebp+arg_8]
.text$mn:000025B0                 push    eax             ; unsigned int
.text$mn:000025B1                 mov     ecx, [ebp+arg_4]
.text$mn:000025B4                 push    ecx             ; wchar_t *
.text$mn:000025B5                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000025BA                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000025BF                 add     esp, 0Ch
.text$mn:000025C2
.text$mn:000025C2 loc_25C2:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:000025C2                 pop     ebp
.text$mn:000025C3                 retn
.text$mn:000025C3 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:000025C3
.text$mn:000025C3 _text$mn        ends
.text$mn:000025C3
.text$mn:000025C4 ; ===========================================================================
.text$mn:000025C4
.text$mn:000025C4 ; Segment type: Pure code
.text$mn:000025C4 ; Segment permissions: Read/Execute
.text$mn:000025C4 _text$mn        segment para public 'CODE' use32
.text$mn:000025C4                 assume cs:_text$mn
.text$mn:000025C4                 ;org 25C4h
.text$mn:000025C4 ; COMDAT (pick any)
.text$mn:000025C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000025C4
.text$mn:000025C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000025C4
.text$mn:000025C4 ; Attributes: bp-based frame
.text$mn:000025C4
.text$mn:000025C4 ; int __cdecl std::_Debug_pointer<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(int, wchar_t *, unsigned int)
.text$mn:000025C4                 public ??$_Debug_pointer@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PB_WI@Z
.text$mn:000025C4 ??$_Debug_pointer@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PB_WI@Z proc near
.text$mn:000025C4                                         ; CODE XREF: std::_Debug_range2<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000025C4                                         ; std::_Debug_range2<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:000025C4
.text$mn:000025C4 arg_0           = dword ptr  8
.text$mn:000025C4 arg_4           = dword ptr  0Ch
.text$mn:000025C4 arg_8           = dword ptr  10h
.text$mn:000025C4
.text$mn:000025C4                 push    ebp
.text$mn:000025C5                 mov     ebp, esp
.text$mn:000025C7                 cmp     [ebp+arg_0], 0
.text$mn:000025CB                 jnz     short loc_25E2
.text$mn:000025CD                 mov     eax, [ebp+arg_8]
.text$mn:000025D0                 push    eax             ; unsigned int
.text$mn:000025D1                 mov     ecx, [ebp+arg_4]
.text$mn:000025D4                 push    ecx             ; wchar_t *
.text$mn:000025D5                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000025DA                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000025DF                 add     esp, 0Ch
.text$mn:000025E2
.text$mn:000025E2 loc_25E2:                               ; CODE XREF: std::_Debug_pointer<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)+7j
.text$mn:000025E2                 pop     ebp
.text$mn:000025E3                 retn
.text$mn:000025E3 ??$_Debug_pointer@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PB_WI@Z endp
.text$mn:000025E3
.text$mn:000025E3 _text$mn        ends
.text$mn:000025E3
.text$mn:000025E4 ; ===========================================================================
.text$mn:000025E4
.text$mn:000025E4 ; Segment type: Pure code
.text$mn:000025E4 ; Segment permissions: Read/Execute
.text$mn:000025E4 _text$mn        segment para public 'CODE' use32
.text$mn:000025E4                 assume cs:_text$mn
.text$mn:000025E4                 ;org 25E4h
.text$mn:000025E4 ; COMDAT (pick any)
.text$mn:000025E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000025E4
.text$mn:000025E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000025E4
.text$mn:000025E4 ; Attributes: bp-based frame
.text$mn:000025E4
.text$mn:000025E4 ; void __cdecl std::_Debug_pointer<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>> &, wchar_t const *, unsigned int)
.text$mn:000025E4                 public ??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@PB_WI@Z
.text$mn:000025E4 ??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@PB_WI@Z proc near
.text$mn:000025E4                                         ; CODE XREF: std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint,std::random_access_iterator_tag)+48p
.text$mn:000025E4                                         ; std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint,std::random_access_iterator_tag)+5Cp ...
.text$mn:000025E4                 push    ebp
.text$mn:000025E5                 mov     ebp, esp
.text$mn:000025E7                 pop     ebp
.text$mn:000025E8                 retn
.text$mn:000025E8 ??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@PB_WI@Z endp
.text$mn:000025E8
.text$mn:000025E8 ; ---------------------------------------------------------------------------
.text$mn:000025E9                 align 4
.text$mn:000025E9 _text$mn        ends
.text$mn:000025E9
.text$mn:000025EC ; ===========================================================================
.text$mn:000025EC
.text$mn:000025EC ; Segment type: Pure code
.text$mn:000025EC ; Segment permissions: Read/Execute
.text$mn:000025EC _text$mn        segment para public 'CODE' use32
.text$mn:000025EC                 assume cs:_text$mn
.text$mn:000025EC                 ;org 25ECh
.text$mn:000025EC ; COMDAT (pick any)
.text$mn:000025EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000025EC
.text$mn:000025EC ; =============== S U B R O U T I N E =======================================
.text$mn:000025EC
.text$mn:000025EC ; Attributes: bp-based frame
.text$mn:000025EC
.text$mn:000025EC ; int __cdecl std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, wchar_t *, unsigned int)
.text$mn:000025EC                 public ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z
.text$mn:000025EC ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z proc near
.text$mn:000025EC                                         ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+17p
.text$mn:000025EC                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+2Bp ...
.text$mn:000025EC
.text$mn:000025EC arg_0           = dword ptr  8
.text$mn:000025EC arg_4           = dword ptr  0Ch
.text$mn:000025EC arg_8           = dword ptr  10h
.text$mn:000025EC
.text$mn:000025EC                 push    ebp
.text$mn:000025ED                 mov     ebp, esp
.text$mn:000025EF                 cmp     [ebp+arg_0], 0
.text$mn:000025F3                 jnz     short loc_260A
.text$mn:000025F5                 mov     eax, [ebp+arg_8]
.text$mn:000025F8                 push    eax             ; unsigned int
.text$mn:000025F9                 mov     ecx, [ebp+arg_4]
.text$mn:000025FC                 push    ecx             ; wchar_t *
.text$mn:000025FD                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00002602                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00002607                 add     esp, 0Ch
.text$mn:0000260A
.text$mn:0000260A loc_260A:                               ; CODE XREF: std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+7j
.text$mn:0000260A                 pop     ebp
.text$mn:0000260B                 retn
.text$mn:0000260B ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z endp
.text$mn:0000260B
.text$mn:0000260B _text$mn        ends
.text$mn:0000260B
.text$mn:0000260C ; ===========================================================================
.text$mn:0000260C
.text$mn:0000260C ; Segment type: Pure code
.text$mn:0000260C ; Segment permissions: Read/Execute
.text$mn:0000260C _text$mn        segment para public 'CODE' use32
.text$mn:0000260C                 assume cs:_text$mn
.text$mn:0000260C                 ;org 260Ch
.text$mn:0000260C ; COMDAT (pick any)
.text$mn:0000260C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000260C
.text$mn:0000260C ; =============== S U B R O U T I N E =======================================
.text$mn:0000260C
.text$mn:0000260C ; Attributes: bp-based frame
.text$mn:0000260C
.text$mn:0000260C ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:0000260C                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:0000260C ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:0000260C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+15p
.text$mn:0000260C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+1Bp ...
.text$mn:0000260C
.text$mn:0000260C arg_0           = dword ptr  8
.text$mn:0000260C arg_4           = dword ptr  0Ch
.text$mn:0000260C arg_8           = dword ptr  10h
.text$mn:0000260C
.text$mn:0000260C                 push    ebp
.text$mn:0000260D                 mov     ebp, esp
.text$mn:0000260F                 cmp     [ebp+arg_0], 0
.text$mn:00002613                 jnz     short loc_262A
.text$mn:00002615                 mov     eax, [ebp+arg_8]
.text$mn:00002618                 push    eax             ; unsigned int
.text$mn:00002619                 mov     ecx, [ebp+arg_4]
.text$mn:0000261C                 push    ecx             ; wchar_t *
.text$mn:0000261D                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00002622                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00002627                 add     esp, 0Ch
.text$mn:0000262A
.text$mn:0000262A loc_262A:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:0000262A                 pop     ebp
.text$mn:0000262B                 retn
.text$mn:0000262B ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:0000262B
.text$mn:0000262B _text$mn        ends
.text$mn:0000262B
.text$mn:0000262C ; ===========================================================================
.text$mn:0000262C
.text$mn:0000262C ; Segment type: Pure code
.text$mn:0000262C ; Segment permissions: Read/Execute
.text$mn:0000262C _text$mn        segment para public 'CODE' use32
.text$mn:0000262C                 assume cs:_text$mn
.text$mn:0000262C                 ;org 262Ch
.text$mn:0000262C ; COMDAT (pick any)
.text$mn:0000262C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000262C
.text$mn:0000262C ; =============== S U B R O U T I N E =======================================
.text$mn:0000262C
.text$mn:0000262C ; Attributes: bp-based frame
.text$mn:0000262C
.text$mn:0000262C ; int __cdecl std::_Debug_range2<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(int, int, wchar_t *, unsigned int)
.text$mn:0000262C                 public ??$_Debug_range2@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:0000262C ??$_Debug_range2@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:0000262C                                         ; CODE XREF: std::_Debug_range<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)+2Ap
.text$mn:0000262C
.text$mn:0000262C arg_0           = dword ptr  8
.text$mn:0000262C arg_4           = dword ptr  0Ch
.text$mn:0000262C arg_8           = dword ptr  10h
.text$mn:0000262C arg_C           = dword ptr  14h
.text$mn:0000262C
.text$mn:0000262C                 push    ebp
.text$mn:0000262D                 mov     ebp, esp
.text$mn:0000262F                 mov     eax, [ebp+arg_0]
.text$mn:00002632                 cmp     eax, [ebp+arg_4]
.text$mn:00002635                 jz      short loc_267C
.text$mn:00002637                 mov     ecx, [ebp+arg_C]
.text$mn:0000263A                 push    ecx             ; unsigned int
.text$mn:0000263B                 mov     edx, [ebp+arg_8]
.text$mn:0000263E                 push    edx             ; wchar_t *
.text$mn:0000263F                 mov     eax, [ebp+arg_0]
.text$mn:00002642                 push    eax             ; int
.text$mn:00002643                 call    ??$_Debug_pointer@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PB_WI@Z ; std::_Debug_pointer<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)
.text$mn:00002648                 add     esp, 0Ch
.text$mn:0000264B                 mov     ecx, [ebp+arg_C]
.text$mn:0000264E                 push    ecx             ; unsigned int
.text$mn:0000264F                 mov     edx, [ebp+arg_8]
.text$mn:00002652                 push    edx             ; wchar_t *
.text$mn:00002653                 mov     eax, [ebp+arg_4]
.text$mn:00002656                 push    eax             ; int
.text$mn:00002657                 call    ??$_Debug_pointer@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PB_WI@Z ; std::_Debug_pointer<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)
.text$mn:0000265C                 add     esp, 0Ch
.text$mn:0000265F                 mov     ecx, [ebp+arg_4]
.text$mn:00002662                 cmp     ecx, [ebp+arg_0]
.text$mn:00002665                 jnb     short loc_267C
.text$mn:00002667                 mov     edx, [ebp+arg_C]
.text$mn:0000266A                 push    edx             ; unsigned int
.text$mn:0000266B                 mov     eax, [ebp+arg_8]
.text$mn:0000266E                 push    eax             ; wchar_t *
.text$mn:0000266F                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00002674                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00002679                 add     esp, 0Ch
.text$mn:0000267C
.text$mn:0000267C loc_267C:                               ; CODE XREF: std::_Debug_range2<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:0000267C                                         ; std::_Debug_range2<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:0000267C                 pop     ebp
.text$mn:0000267D                 retn
.text$mn:0000267D ??$_Debug_range2@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:0000267D
.text$mn:0000267D ; ---------------------------------------------------------------------------
.text$mn:0000267E                 align 10h
.text$mn:0000267E _text$mn        ends
.text$mn:0000267E
.text$mn:00002680 ; ===========================================================================
.text$mn:00002680
.text$mn:00002680 ; Segment type: Pure code
.text$mn:00002680 ; Segment permissions: Read/Execute
.text$mn:00002680 _text$mn        segment para public 'CODE' use32
.text$mn:00002680                 assume cs:_text$mn
.text$mn:00002680                 ;org 2680h
.text$mn:00002680 ; COMDAT (pick any)
.text$mn:00002680                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002680
.text$mn:00002680 ; =============== S U B R O U T I N E =======================================
.text$mn:00002680
.text$mn:00002680 ; Attributes: bp-based frame
.text$mn:00002680
.text$mn:00002680 ; int __cdecl std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:00002680                 public ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:00002680 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:00002680                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+2Ap
.text$mn:00002680
.text$mn:00002680 arg_0           = dword ptr  8
.text$mn:00002680 arg_4           = dword ptr  0Ch
.text$mn:00002680 arg_8           = dword ptr  10h
.text$mn:00002680 arg_C           = dword ptr  14h
.text$mn:00002680
.text$mn:00002680                 push    ebp
.text$mn:00002681                 mov     ebp, esp
.text$mn:00002683                 mov     eax, [ebp+arg_0]
.text$mn:00002686                 cmp     eax, [ebp+arg_4]
.text$mn:00002689                 jz      short loc_26D0
.text$mn:0000268B                 mov     ecx, [ebp+arg_C]
.text$mn:0000268E                 push    ecx             ; unsigned int
.text$mn:0000268F                 mov     edx, [ebp+arg_8]
.text$mn:00002692                 push    edx             ; wchar_t *
.text$mn:00002693                 mov     eax, [ebp+arg_0]
.text$mn:00002696                 push    eax             ; int
.text$mn:00002697                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:0000269C                 add     esp, 0Ch
.text$mn:0000269F                 mov     ecx, [ebp+arg_C]
.text$mn:000026A2                 push    ecx             ; unsigned int
.text$mn:000026A3                 mov     edx, [ebp+arg_8]
.text$mn:000026A6                 push    edx             ; wchar_t *
.text$mn:000026A7                 mov     eax, [ebp+arg_4]
.text$mn:000026AA                 push    eax             ; int
.text$mn:000026AB                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:000026B0                 add     esp, 0Ch
.text$mn:000026B3                 mov     ecx, [ebp+arg_4]
.text$mn:000026B6                 cmp     ecx, [ebp+arg_0]
.text$mn:000026B9                 jnb     short loc_26D0
.text$mn:000026BB                 mov     edx, [ebp+arg_C]
.text$mn:000026BE                 push    edx             ; unsigned int
.text$mn:000026BF                 mov     eax, [ebp+arg_8]
.text$mn:000026C2                 push    eax             ; wchar_t *
.text$mn:000026C3                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:000026C8                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000026CD                 add     esp, 0Ch
.text$mn:000026D0
.text$mn:000026D0 loc_26D0:                               ; CODE XREF: std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+9j
.text$mn:000026D0                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+39j
.text$mn:000026D0                 pop     ebp
.text$mn:000026D1                 retn
.text$mn:000026D1 ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:000026D1
.text$mn:000026D1 ; ---------------------------------------------------------------------------
.text$mn:000026D2                 align 4
.text$mn:000026D2 _text$mn        ends
.text$mn:000026D2
.text$mn:000026D4 ; ===========================================================================
.text$mn:000026D4
.text$mn:000026D4 ; Segment type: Pure code
.text$mn:000026D4 ; Segment permissions: Read/Execute
.text$mn:000026D4 _text$mn        segment para public 'CODE' use32
.text$mn:000026D4                 assume cs:_text$mn
.text$mn:000026D4                 ;org 26D4h
.text$mn:000026D4 ; COMDAT (pick any)
.text$mn:000026D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000026D4
.text$mn:000026D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000026D4
.text$mn:000026D4 ; Attributes: bp-based frame
.text$mn:000026D4
.text$mn:000026D4 ; int __cdecl std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(char, int, int, char, int, int, wchar_t *, unsigned int)
.text$mn:000026D4                 public ??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000026D4 ??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000026D4                                         ; CODE XREF: std::_Debug_range<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint)+8Ap
.text$mn:000026D4
.text$mn:000026D4 var_C           = dword ptr -0Ch
.text$mn:000026D4 var_4           = dword ptr -4
.text$mn:000026D4 arg_0           = byte ptr  8
.text$mn:000026D4 arg_C           = byte ptr  14h
.text$mn:000026D4 arg_18          = dword ptr  20h
.text$mn:000026D4 arg_1C          = dword ptr  24h
.text$mn:000026D4
.text$mn:000026D4                 push    ebp
.text$mn:000026D5                 mov     ebp, esp
.text$mn:000026D7                 push    0FFFFFFFFh
.text$mn:000026D9                 push    offset __ehhandler$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$mn:000026DE                 mov     eax, large fs:0
.text$mn:000026E4                 push    eax
.text$mn:000026E5                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000026EA                 xor     eax, ebp
.text$mn:000026EC                 push    eax
.text$mn:000026ED                 lea     eax, [ebp+var_C]
.text$mn:000026F0                 mov     large fs:0, eax
.text$mn:000026F6                 mov     [ebp+var_4], 1
.text$mn:000026FD                 lea     eax, [ebp+arg_C]
.text$mn:00002700                 push    eax             ; std::_Iterator_base12 *
.text$mn:00002701                 lea     ecx, [ebp+arg_0]
.text$mn:00002704                 call    ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator!=(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002709                 movzx   ecx, al
.text$mn:0000270C                 test    ecx, ecx
.text$mn:0000270E                 jz      short loc_2760
.text$mn:00002710                 mov     edx, [ebp+arg_1C]
.text$mn:00002713                 push    edx
.text$mn:00002714                 mov     eax, [ebp+arg_18]
.text$mn:00002717                 push    eax
.text$mn:00002718                 lea     ecx, [ebp+arg_0]
.text$mn:0000271B                 push    ecx
.text$mn:0000271C                 call    ??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> &,wchar_t const *,uint)
.text$mn:00002721                 add     esp, 0Ch
.text$mn:00002724                 mov     edx, [ebp+arg_1C]
.text$mn:00002727                 push    edx
.text$mn:00002728                 mov     eax, [ebp+arg_18]
.text$mn:0000272B                 push    eax
.text$mn:0000272C                 lea     ecx, [ebp+arg_C]
.text$mn:0000272F                 push    ecx
.text$mn:00002730                 call    ??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> &,wchar_t const *,uint)
.text$mn:00002735                 add     esp, 0Ch
.text$mn:00002738                 lea     edx, [ebp+arg_0]
.text$mn:0000273B                 push    edx             ; std::_Iterator_base12 *
.text$mn:0000273C                 lea     ecx, [ebp+arg_C]
.text$mn:0000273F                 call    ??M?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator<(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002744                 movzx   eax, al
.text$mn:00002747                 test    eax, eax
.text$mn:00002749                 jz      short loc_2760
.text$mn:0000274B                 mov     ecx, [ebp+arg_1C]
.text$mn:0000274E                 push    ecx             ; unsigned int
.text$mn:0000274F                 mov     edx, [ebp+arg_18]
.text$mn:00002752                 push    edx             ; wchar_t *
.text$mn:00002753                 push    offset ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "invalid iterator range"
.text$mn:00002758                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000275D                 add     esp, 0Ch
.text$mn:00002760
.text$mn:00002760 loc_2760:                               ; CODE XREF: std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint,std::random_access_iterator_tag)+3Aj
.text$mn:00002760                                         ; std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint,std::random_access_iterator_tag)+75j
.text$mn:00002760                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002764                 lea     ecx, [ebp+arg_0]
.text$mn:00002767                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:0000276C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002773                 lea     ecx, [ebp+arg_C]
.text$mn:00002776                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:0000277B                 mov     ecx, [ebp+var_C]
.text$mn:0000277E                 mov     large fs:0, ecx
.text$mn:00002785                 pop     ecx
.text$mn:00002786                 mov     esp, ebp
.text$mn:00002788                 pop     ebp
.text$mn:00002789                 retn
.text$mn:00002789 ??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00002789
.text$mn:00002789 ; ---------------------------------------------------------------------------
.text$mn:0000278A                 align 4
.text$mn:0000278A _text$mn        ends
.text$mn:0000278A
.text$x:0000278C ; ===========================================================================
.text$x:0000278C
.text$x:0000278C ; Segment type: Pure code
.text$x:0000278C ; Segment permissions: Read/Execute
.text$x:0000278C _text$x         segment para public 'CODE' use32
.text$x:0000278C                 assume cs:_text$x
.text$x:0000278C                 ;org 278Ch
.text$x:0000278C ; COMDAT (pick associative to section at 26D4)
.text$x:0000278C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000278C
.text$x:0000278C ; =============== S U B R O U T I N E =======================================
.text$x:0000278C
.text$x:0000278C
.text$x:0000278C __unwindfunclet$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0 proc near
.text$x:0000278C                                         ; DATA XREF: .xdata$x:0000A19Co
.text$x:0000278C                 lea     ecx, [ebp+14h]
.text$x:0000278F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:0000278F __unwindfunclet$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0 endp
.text$x:0000278F
.text$x:00002794
.text$x:00002794 ; =============== S U B R O U T I N E =======================================
.text$x:00002794
.text$x:00002794
.text$x:00002794 __unwindfunclet$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1 proc near
.text$x:00002794                                         ; DATA XREF: .xdata$x:0000A1A4o
.text$x:00002794                 lea     ecx, [ebp+8]
.text$x:00002797                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002797 __unwindfunclet$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1 endp
.text$x:00002797
.text$x:0000279C
.text$x:0000279C ; =============== S U B R O U T I N E =======================================
.text$x:0000279C
.text$x:0000279C
.text$x:0000279C __ehhandler$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
.text$x:0000279C                                         ; DATA XREF: std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint,std::random_access_iterator_tag)+5o
.text$x:0000279C
.text$x:0000279C arg_4           = dword ptr  8
.text$x:0000279C
.text$x:0000279C                 mov     edx, [esp+arg_4]
.text$x:000027A0                 lea     eax, [edx+0Ch]
.text$x:000027A3                 mov     ecx, [edx-4]
.text$x:000027A6                 xor     ecx, eax
.text$x:000027A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000027AD                 mov     eax, offset __ehfuncinfo$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.text$x:000027B2                 jmp     ___CxxFrameHandler3
.text$x:000027B2 __ehhandler$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z endp
.text$x:000027B2
.text$x:000027B2 ; ---------------------------------------------------------------------------
.text$x:000027B7                 align 4
.text$x:000027B7 _text$x         ends
.text$x:000027B7
.text$mn:000027B8 ; ===========================================================================
.text$mn:000027B8
.text$mn:000027B8 ; Segment type: Pure code
.text$mn:000027B8 ; Segment permissions: Read/Execute
.text$mn:000027B8 _text$mn        segment para public 'CODE' use32
.text$mn:000027B8                 assume cs:_text$mn
.text$mn:000027B8                 ;org 27B8h
.text$mn:000027B8 ; COMDAT (pick any)
.text$mn:000027B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000027B8
.text$mn:000027B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000027B8
.text$mn:000027B8 ; Attributes: bp-based frame
.text$mn:000027B8
.text$mn:000027B8 ; int __cdecl std::_Debug_range<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(int, int, wchar_t *, unsigned int)
.text$mn:000027B8                 public ??$_Debug_range@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0PB_WI@Z
.text$mn:000027B8 ??$_Debug_range@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0PB_WI@Z proc near
.text$mn:000027B8                                         ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.text$mn:000027B8
.text$mn:000027B8 var_1           = byte ptr -1
.text$mn:000027B8 arg_0           = dword ptr  8
.text$mn:000027B8 arg_4           = dword ptr  0Ch
.text$mn:000027B8 arg_8           = dword ptr  10h
.text$mn:000027B8 arg_C           = dword ptr  14h
.text$mn:000027B8
.text$mn:000027B8                 push    ebp
.text$mn:000027B9                 mov     ebp, esp
.text$mn:000027BB                 push    ecx
.text$mn:000027BC                 lea     eax, [ebp+arg_0]
.text$mn:000027BF                 push    eax
.text$mn:000027C0                 lea     ecx, [ebp+var_1]
.text$mn:000027C3                 push    ecx
.text$mn:000027C4                 call    ??$_Iter_cat@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@@Z ; std::_Iter_cat<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> * const &)
.text$mn:000027C9                 add     esp, 8
.text$mn:000027CC                 mov     dl, [eax]
.text$mn:000027CE                 movzx   eax, dl
.text$mn:000027D1                 push    eax
.text$mn:000027D2                 mov     ecx, [ebp+arg_C]
.text$mn:000027D5                 push    ecx             ; unsigned int
.text$mn:000027D6                 mov     edx, [ebp+arg_8]
.text$mn:000027D9                 push    edx             ; wchar_t *
.text$mn:000027DA                 mov     eax, [ebp+arg_4]
.text$mn:000027DD                 push    eax             ; int
.text$mn:000027DE                 mov     ecx, [ebp+arg_0]
.text$mn:000027E1                 push    ecx             ; int
.text$mn:000027E2                 call    ??$_Debug_range2@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:000027E7                 add     esp, 14h
.text$mn:000027EA                 mov     esp, ebp
.text$mn:000027EC                 pop     ebp
.text$mn:000027ED                 retn
.text$mn:000027ED ??$_Debug_range@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0PB_WI@Z endp
.text$mn:000027ED
.text$mn:000027ED ; ---------------------------------------------------------------------------
.text$mn:000027EE                 align 10h
.text$mn:000027EE _text$mn        ends
.text$mn:000027EE
.text$mn:000027F0 ; ===========================================================================
.text$mn:000027F0
.text$mn:000027F0 ; Segment type: Pure code
.text$mn:000027F0 ; Segment permissions: Read/Execute
.text$mn:000027F0 _text$mn        segment para public 'CODE' use32
.text$mn:000027F0                 assume cs:_text$mn
.text$mn:000027F0                 ;org 27F0h
.text$mn:000027F0 ; COMDAT (pick any)
.text$mn:000027F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000027F0
.text$mn:000027F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000027F0
.text$mn:000027F0 ; Attributes: bp-based frame
.text$mn:000027F0
.text$mn:000027F0 ; int __cdecl std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(int, int, wchar_t *, unsigned int)
.text$mn:000027F0                 public ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z
.text$mn:000027F0 ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z proc near
.text$mn:000027F0                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+3Cp
.text$mn:000027F0
.text$mn:000027F0 var_1           = byte ptr -1
.text$mn:000027F0 arg_0           = dword ptr  8
.text$mn:000027F0 arg_4           = dword ptr  0Ch
.text$mn:000027F0 arg_8           = dword ptr  10h
.text$mn:000027F0 arg_C           = dword ptr  14h
.text$mn:000027F0
.text$mn:000027F0                 push    ebp
.text$mn:000027F1                 mov     ebp, esp
.text$mn:000027F3                 push    ecx
.text$mn:000027F4                 lea     eax, [ebp+arg_0]
.text$mn:000027F7                 push    eax
.text$mn:000027F8                 lea     ecx, [ebp+var_1]
.text$mn:000027FB                 push    ecx
.text$mn:000027FC                 call    ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::_Iter_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * const &)
.text$mn:00002801                 add     esp, 8
.text$mn:00002804                 mov     dl, [eax]
.text$mn:00002806                 movzx   eax, dl
.text$mn:00002809                 push    eax
.text$mn:0000280A                 mov     ecx, [ebp+arg_C]
.text$mn:0000280D                 push    ecx             ; unsigned int
.text$mn:0000280E                 mov     edx, [ebp+arg_8]
.text$mn:00002811                 push    edx             ; wchar_t *
.text$mn:00002812                 mov     eax, [ebp+arg_4]
.text$mn:00002815                 push    eax             ; int
.text$mn:00002816                 mov     ecx, [ebp+arg_0]
.text$mn:00002819                 push    ecx             ; int
.text$mn:0000281A                 call    ??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:0000281F                 add     esp, 14h
.text$mn:00002822                 mov     esp, ebp
.text$mn:00002824                 pop     ebp
.text$mn:00002825                 retn
.text$mn:00002825 ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z endp
.text$mn:00002825
.text$mn:00002825 ; ---------------------------------------------------------------------------
.text$mn:00002826                 align 4
.text$mn:00002826 _text$mn        ends
.text$mn:00002826
.text$mn:00002828 ; ===========================================================================
.text$mn:00002828
.text$mn:00002828 ; Segment type: Pure code
.text$mn:00002828 ; Segment permissions: Read/Execute
.text$mn:00002828 _text$mn        segment para public 'CODE' use32
.text$mn:00002828                 assume cs:_text$mn
.text$mn:00002828                 ;org 2828h
.text$mn:00002828 ; COMDAT (pick any)
.text$mn:00002828                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002828
.text$mn:00002828 ; =============== S U B R O U T I N E =======================================
.text$mn:00002828
.text$mn:00002828 ; Attributes: bp-based frame
.text$mn:00002828
.text$mn:00002828 ; int __cdecl std::_Debug_range<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(char, int, int, int, int, int, wchar_t *, unsigned int)
.text$mn:00002828                 public ??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z
.text$mn:00002828 ??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z proc near
.text$mn:00002828                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+80p
.text$mn:00002828
.text$mn:00002828 var_28          = dword ptr -28h
.text$mn:00002828 var_24          = dword ptr -24h
.text$mn:00002828 var_20          = dword ptr -20h
.text$mn:00002828 var_1C          = dword ptr -1Ch
.text$mn:00002828 var_18          = dword ptr -18h
.text$mn:00002828 var_14          = dword ptr -14h
.text$mn:00002828 var_D           = byte ptr -0Dh
.text$mn:00002828 var_C           = dword ptr -0Ch
.text$mn:00002828 var_4           = dword ptr -4
.text$mn:00002828 arg_0           = byte ptr  8
.text$mn:00002828 arg_C           = dword ptr  14h
.text$mn:00002828 arg_18          = dword ptr  20h
.text$mn:00002828 arg_1C          = dword ptr  24h
.text$mn:00002828
.text$mn:00002828                 push    ebp
.text$mn:00002829                 mov     ebp, esp
.text$mn:0000282B                 push    0FFFFFFFFh
.text$mn:0000282D                 push    offset __ehhandler$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z
.text$mn:00002832                 mov     eax, large fs:0
.text$mn:00002838                 push    eax
.text$mn:00002839                 sub     esp, 1Ch
.text$mn:0000283C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002841                 xor     eax, ebp
.text$mn:00002843                 push    eax
.text$mn:00002844                 lea     eax, [ebp+var_C]
.text$mn:00002847                 mov     large fs:0, eax
.text$mn:0000284D                 mov     [ebp+var_4], 1
.text$mn:00002854                 lea     eax, [ebp+arg_0]
.text$mn:00002857                 push    eax
.text$mn:00002858                 lea     ecx, [ebp+var_D]
.text$mn:0000285B                 push    ecx
.text$mn:0000285C                 call    ??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z ; std::_Iter_cat<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002861                 add     esp, 8
.text$mn:00002864                 mov     dl, [eax]
.text$mn:00002866                 movzx   eax, dl
.text$mn:00002869                 push    eax
.text$mn:0000286A                 mov     ecx, [ebp+arg_1C]
.text$mn:0000286D                 push    ecx             ; unsigned int
.text$mn:0000286E                 mov     edx, [ebp+arg_18]
.text$mn:00002871                 push    edx             ; wchar_t *
.text$mn:00002872                 sub     esp, 0Ch
.text$mn:00002875                 mov     ecx, esp
.text$mn:00002877                 mov     [ebp+var_1C], esp
.text$mn:0000287A                 lea     eax, [ebp+arg_C]
.text$mn:0000287D                 push    eax             ; int
.text$mn:0000287E                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002883                 mov     [ebp+var_14], eax
.text$mn:00002886                 mov     ecx, [ebp+var_14]
.text$mn:00002889                 mov     [ebp+var_20], ecx
.text$mn:0000288C                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002890                 sub     esp, 0Ch
.text$mn:00002893                 mov     ecx, esp
.text$mn:00002895                 mov     [ebp+var_24], esp
.text$mn:00002898                 lea     edx, [ebp+arg_0]
.text$mn:0000289B                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000289C                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:000028A1                 mov     [ebp+var_18], eax
.text$mn:000028A4                 mov     eax, [ebp+var_18]
.text$mn:000028A7                 mov     [ebp+var_28], eax
.text$mn:000028AA                 mov     byte ptr [ebp+var_4], 3
.text$mn:000028AE                 mov     byte ptr [ebp+var_4], 1
.text$mn:000028B2                 call    ??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint,std::random_access_iterator_tag)
.text$mn:000028B7                 add     esp, 24h
.text$mn:000028BA                 mov     byte ptr [ebp+var_4], 0
.text$mn:000028BE                 lea     ecx, [ebp+arg_0]
.text$mn:000028C1                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:000028C6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000028CD                 lea     ecx, [ebp+arg_C]
.text$mn:000028D0                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:000028D5                 mov     ecx, [ebp+var_C]
.text$mn:000028D8                 mov     large fs:0, ecx
.text$mn:000028DF                 pop     ecx
.text$mn:000028E0                 mov     esp, ebp
.text$mn:000028E2                 pop     ebp
.text$mn:000028E3                 retn
.text$mn:000028E3 ??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z endp
.text$mn:000028E3
.text$mn:000028E3 _text$mn        ends
.text$mn:000028E3
.text$x:000028E4 ; ===========================================================================
.text$x:000028E4
.text$x:000028E4 ; Segment type: Pure code
.text$x:000028E4 ; Segment permissions: Read/Execute
.text$x:000028E4 _text$x         segment para public 'CODE' use32
.text$x:000028E4                 assume cs:_text$x
.text$x:000028E4                 ;org 28E4h
.text$x:000028E4 ; COMDAT (pick associative to section at 2828)
.text$x:000028E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000028E4
.text$x:000028E4 ; =============== S U B R O U T I N E =======================================
.text$x:000028E4
.text$x:000028E4
.text$x:000028E4 __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$0 proc near
.text$x:000028E4                                         ; DATA XREF: .xdata$x:0000A064o
.text$x:000028E4                 lea     ecx, [ebp+14h]
.text$x:000028E7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:000028E7 __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$0 endp
.text$x:000028E7
.text$x:000028EC
.text$x:000028EC ; =============== S U B R O U T I N E =======================================
.text$x:000028EC
.text$x:000028EC
.text$x:000028EC __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$1 proc near
.text$x:000028EC                                         ; DATA XREF: .xdata$x:0000A06Co
.text$x:000028EC                 lea     ecx, [ebp+8]
.text$x:000028EF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:000028EF __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$1 endp
.text$x:000028EF
.text$x:000028F4
.text$x:000028F4 ; =============== S U B R O U T I N E =======================================
.text$x:000028F4
.text$x:000028F4
.text$x:000028F4 __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$2 proc near
.text$x:000028F4                                         ; DATA XREF: .xdata$x:0000A074o
.text$x:000028F4                 mov     ecx, [ebp-1Ch]
.text$x:000028F7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:000028F7 __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$2 endp
.text$x:000028F7
.text$x:000028FC
.text$x:000028FC ; =============== S U B R O U T I N E =======================================
.text$x:000028FC
.text$x:000028FC
.text$x:000028FC __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$3 proc near
.text$x:000028FC                                         ; DATA XREF: .xdata$x:0000A07Co
.text$x:000028FC                 mov     ecx, [ebp-24h]
.text$x:000028FF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:000028FF __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$3 endp
.text$x:000028FF
.text$x:00002904
.text$x:00002904 ; =============== S U B R O U T I N E =======================================
.text$x:00002904
.text$x:00002904
.text$x:00002904 __ehhandler$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z proc near
.text$x:00002904                                         ; DATA XREF: std::_Debug_range<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint)+5o
.text$x:00002904
.text$x:00002904 arg_4           = dword ptr  8
.text$x:00002904
.text$x:00002904                 mov     edx, [esp+arg_4]
.text$x:00002908                 lea     eax, [edx+0Ch]
.text$x:0000290B                 mov     ecx, [edx-20h]
.text$x:0000290E                 xor     ecx, eax
.text$x:00002910                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002915                 mov     eax, offset __ehfuncinfo$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z
.text$x:0000291A                 jmp     ___CxxFrameHandler3
.text$x:0000291A __ehhandler$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z endp
.text$x:0000291A
.text$x:0000291A ; ---------------------------------------------------------------------------
.text$x:0000291F                 align 10h
.text$x:0000291F _text$x         ends
.text$x:0000291F
.text$mn:00002920 ; ===========================================================================
.text$mn:00002920
.text$mn:00002920 ; Segment type: Pure code
.text$mn:00002920 ; Segment permissions: Read/Execute
.text$mn:00002920 _text$mn        segment para public 'CODE' use32
.text$mn:00002920                 assume cs:_text$mn
.text$mn:00002920                 ;org 2920h
.text$mn:00002920 ; COMDAT (pick any)
.text$mn:00002920                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002920
.text$mn:00002920 ; =============== S U B R O U T I N E =======================================
.text$mn:00002920
.text$mn:00002920 ; Attributes: bp-based frame
.text$mn:00002920
.text$mn:00002920 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> &)
.text$mn:00002920                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z
.text$mn:00002920 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z proc near
.text$mn:00002920                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Destroy(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+21p
.text$mn:00002920
.text$mn:00002920 var_1           = byte ptr -1
.text$mn:00002920 arg_0           = dword ptr  8
.text$mn:00002920 arg_4           = dword ptr  0Ch
.text$mn:00002920 arg_8           = dword ptr  10h
.text$mn:00002920
.text$mn:00002920                 push    ebp
.text$mn:00002921                 mov     ebp, esp
.text$mn:00002923                 push    ecx
.text$mn:00002924                 mov     eax, [ebp+arg_4]
.text$mn:00002927                 push    eax
.text$mn:00002928                 mov     ecx, [ebp+arg_0]
.text$mn:0000292B                 push    ecx
.text$mn:0000292C                 call    ??$_Ptr_cat@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0@Z ; std::_Ptr_cat<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002931                 add     esp, 8
.text$mn:00002934                 mov     [ebp+var_1], al
.text$mn:00002937                 movzx   edx, [ebp+var_1]
.text$mn:0000293B                 push    edx
.text$mn:0000293C                 mov     eax, [ebp+arg_8]
.text$mn:0000293F                 push    eax
.text$mn:00002940                 mov     ecx, [ebp+arg_4]
.text$mn:00002943                 push    ecx
.text$mn:00002944                 mov     edx, [ebp+arg_0]
.text$mn:00002947                 push    edx
.text$mn:00002948                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:0000294D                 add     esp, 10h
.text$mn:00002950                 mov     esp, ebp
.text$mn:00002952                 pop     ebp
.text$mn:00002953                 retn
.text$mn:00002953 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z endp
.text$mn:00002953
.text$mn:00002953 _text$mn        ends
.text$mn:00002953
.text$mn:00002954 ; ===========================================================================
.text$mn:00002954
.text$mn:00002954 ; Segment type: Pure code
.text$mn:00002954 ; Segment permissions: Read/Execute
.text$mn:00002954 _text$mn        segment para public 'CODE' use32
.text$mn:00002954                 assume cs:_text$mn
.text$mn:00002954                 ;org 2954h
.text$mn:00002954 ; COMDAT (pick any)
.text$mn:00002954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002954
.text$mn:00002954 ; =============== S U B R O U T I N E =======================================
.text$mn:00002954
.text$mn:00002954 ; Attributes: bp-based frame
.text$mn:00002954
.text$mn:00002954 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> &, struct std::_Nonscalar
.text$mn:00002954                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002954 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00002954                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &)+28p
.text$mn:00002954
.text$mn:00002954 arg_0           = dword ptr  8
.text$mn:00002954 arg_4           = dword ptr  0Ch
.text$mn:00002954 arg_8           = dword ptr  10h
.text$mn:00002954
.text$mn:00002954                 push    ebp
.text$mn:00002955                 mov     ebp, esp
.text$mn:00002957                 jmp     short loc_2962
.text$mn:00002959 ; ---------------------------------------------------------------------------
.text$mn:00002959
.text$mn:00002959 loc_2959:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:00002959                 mov     eax, [ebp+arg_0]
.text$mn:0000295C                 add     eax, 38h ; '8'
.text$mn:0000295F                 mov     [ebp+arg_0], eax
.text$mn:00002962
.text$mn:00002962 loc_2962:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:00002962                 mov     ecx, [ebp+arg_0]
.text$mn:00002965                 cmp     ecx, [ebp+arg_4]
.text$mn:00002968                 jz      short loc_2978
.text$mn:0000296A                 mov     edx, [ebp+arg_0]
.text$mn:0000296D                 push    edx
.text$mn:0000296E                 mov     ecx, [ebp+arg_8]
.text$mn:00002971                 call    ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::destroy<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002976                 jmp     short loc_2959
.text$mn:00002978 ; ---------------------------------------------------------------------------
.text$mn:00002978
.text$mn:00002978 loc_2978:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:00002978                 pop     ebp
.text$mn:00002979                 retn
.text$mn:00002979 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00002979
.text$mn:00002979 ; ---------------------------------------------------------------------------
.text$mn:0000297A                 align 4
.text$mn:0000297A _text$mn        ends
.text$mn:0000297A
.text$mn:0000297C ; ===========================================================================
.text$mn:0000297C
.text$mn:0000297C ; Segment type: Pure code
.text$mn:0000297C ; Segment permissions: Read/Execute
.text$mn:0000297C _text$mn        segment para public 'CODE' use32
.text$mn:0000297C                 assume cs:_text$mn
.text$mn:0000297C                 ;org 297Ch
.text$mn:0000297C ; COMDAT (pick any)
.text$mn:0000297C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000297C
.text$mn:0000297C ; =============== S U B R O U T I N E =======================================
.text$mn:0000297C
.text$mn:0000297C ; Attributes: bp-based frame
.text$mn:0000297C
.text$mn:0000297C ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:0000297C                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:0000297C ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:0000297C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+21p
.text$mn:0000297C
.text$mn:0000297C var_1           = byte ptr -1
.text$mn:0000297C arg_0           = dword ptr  8
.text$mn:0000297C arg_4           = dword ptr  0Ch
.text$mn:0000297C arg_8           = dword ptr  10h
.text$mn:0000297C
.text$mn:0000297C                 push    ebp
.text$mn:0000297D                 mov     ebp, esp
.text$mn:0000297F                 push    ecx
.text$mn:00002980                 mov     eax, [ebp+arg_4]
.text$mn:00002983                 push    eax
.text$mn:00002984                 mov     ecx, [ebp+arg_0]
.text$mn:00002987                 push    ecx
.text$mn:00002988                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000298D                 add     esp, 8
.text$mn:00002990                 mov     [ebp+var_1], al
.text$mn:00002993                 movzx   edx, [ebp+var_1]
.text$mn:00002997                 push    edx
.text$mn:00002998                 mov     eax, [ebp+arg_8]
.text$mn:0000299B                 push    eax
.text$mn:0000299C                 mov     ecx, [ebp+arg_4]
.text$mn:0000299F                 push    ecx
.text$mn:000029A0                 mov     edx, [ebp+arg_0]
.text$mn:000029A3                 push    edx
.text$mn:000029A4                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)
.text$mn:000029A9                 add     esp, 10h
.text$mn:000029AC                 mov     esp, ebp
.text$mn:000029AE                 pop     ebp
.text$mn:000029AF                 retn
.text$mn:000029AF ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:000029AF
.text$mn:000029AF _text$mn        ends
.text$mn:000029AF
.text$mn:000029B0 ; ===========================================================================
.text$mn:000029B0
.text$mn:000029B0 ; Segment type: Pure code
.text$mn:000029B0 ; Segment permissions: Read/Execute
.text$mn:000029B0 _text$mn        segment para public 'CODE' use32
.text$mn:000029B0                 assume cs:_text$mn
.text$mn:000029B0                 ;org 29B0h
.text$mn:000029B0 ; COMDAT (pick any)
.text$mn:000029B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000029B0
.text$mn:000029B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000029B0
.text$mn:000029B0 ; Attributes: bp-based frame
.text$mn:000029B0
.text$mn:000029B0 ; void __cdecl std::_Destroy_range<struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &, struct std::_Nonscalar_ptr_iterator_tag)
.text$mn:000029B0                 public ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:000029B0 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:000029B0                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+28p
.text$mn:000029B0
.text$mn:000029B0 arg_0           = dword ptr  8
.text$mn:000029B0 arg_4           = dword ptr  0Ch
.text$mn:000029B0 arg_8           = dword ptr  10h
.text$mn:000029B0
.text$mn:000029B0                 push    ebp
.text$mn:000029B1                 mov     ebp, esp
.text$mn:000029B3                 jmp     short loc_29BE
.text$mn:000029B5 ; ---------------------------------------------------------------------------
.text$mn:000029B5
.text$mn:000029B5 loc_29B5:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+22j
.text$mn:000029B5                 mov     eax, [ebp+arg_0]
.text$mn:000029B8                 add     eax, 1Ch
.text$mn:000029BB                 mov     [ebp+arg_0], eax
.text$mn:000029BE
.text$mn:000029BE loc_29BE:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+3j
.text$mn:000029BE                 mov     ecx, [ebp+arg_0]
.text$mn:000029C1                 cmp     ecx, [ebp+arg_4]
.text$mn:000029C4                 jz      short loc_29D4
.text$mn:000029C6                 mov     edx, [ebp+arg_0]
.text$mn:000029C9                 push    edx
.text$mn:000029CA                 mov     ecx, [ebp+arg_8]
.text$mn:000029CD                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000029D2                 jmp     short loc_29B5
.text$mn:000029D4 ; ---------------------------------------------------------------------------
.text$mn:000029D4
.text$mn:000029D4 loc_29D4:                               ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+14j
.text$mn:000029D4                 pop     ebp
.text$mn:000029D5                 retn
.text$mn:000029D5 ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:000029D5
.text$mn:000029D5 ; ---------------------------------------------------------------------------
.text$mn:000029D6                 align 4
.text$mn:000029D6 _text$mn        ends
.text$mn:000029D6
.text$mn:000029D8 ; ===========================================================================
.text$mn:000029D8
.text$mn:000029D8 ; Segment type: Pure code
.text$mn:000029D8 ; Segment permissions: Read/Execute
.text$mn:000029D8 _text$mn        segment para public 'CODE' use32
.text$mn:000029D8                 assume cs:_text$mn
.text$mn:000029D8                 ;org 29D8h
.text$mn:000029D8 ; COMDAT (pick any)
.text$mn:000029D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000029D8
.text$mn:000029D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000029D8
.text$mn:000029D8 ; Attributes: bp-based frame
.text$mn:000029D8
.text$mn:000029D8 ; void __cdecl std::_Distance2<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, unsigned int>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, unsigned int &, struct std::random_access_iterator_tag)
.text$mn:000029D8                 public ??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
.text$mn:000029D8 ??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z proc near
.text$mn:000029D8                                         ; CODE XREF: std::_Distance<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &)+86p
.text$mn:000029D8
.text$mn:000029D8 var_C           = dword ptr -0Ch
.text$mn:000029D8 var_4           = dword ptr -4
.text$mn:000029D8 arg_0           = byte ptr  8
.text$mn:000029D8 arg_C           = byte ptr  14h
.text$mn:000029D8 arg_18          = dword ptr  20h
.text$mn:000029D8
.text$mn:000029D8                 push    ebp
.text$mn:000029D9                 mov     ebp, esp
.text$mn:000029DB                 push    0FFFFFFFFh
.text$mn:000029DD                 push    offset __ehhandler$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
.text$mn:000029E2                 mov     eax, large fs:0
.text$mn:000029E8                 push    eax
.text$mn:000029E9                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000029EE                 xor     eax, ebp
.text$mn:000029F0                 push    eax
.text$mn:000029F1                 lea     eax, [ebp+var_C]
.text$mn:000029F4                 mov     large fs:0, eax
.text$mn:000029FA                 mov     [ebp+var_4], 1
.text$mn:00002A01                 lea     eax, [ebp+arg_C]
.text$mn:00002A04                 push    eax             ; std::_Iterator_base12 *
.text$mn:00002A05                 lea     ecx, [ebp+arg_0]
.text$mn:00002A08                 call    ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator!=(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002A0D                 movzx   ecx, al
.text$mn:00002A10                 test    ecx, ecx
.text$mn:00002A12                 jz      short loc_2A40
.text$mn:00002A14                 push    2E9h
.text$mn:00002A19                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00002A1E                 lea     edx, [ebp+arg_0]
.text$mn:00002A21                 push    edx
.text$mn:00002A22                 call    ??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> &,wchar_t const *,uint)
.text$mn:00002A27                 add     esp, 0Ch
.text$mn:00002A2A                 push    2EAh
.text$mn:00002A2F                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00002A34                 lea     eax, [ebp+arg_C]
.text$mn:00002A37                 push    eax
.text$mn:00002A38                 call    ??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@PB_WI@Z ; std::_Debug_pointer<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> &,wchar_t const *,uint)
.text$mn:00002A3D                 add     esp, 0Ch
.text$mn:00002A40
.text$mn:00002A40 loc_2A40:                               ; CODE XREF: std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &,std::random_access_iterator_tag)+3Aj
.text$mn:00002A40                 lea     ecx, [ebp+arg_0]
.text$mn:00002A43                 push    ecx             ; std::_Iterator_base12 *
.text$mn:00002A44                 lea     ecx, [ebp+arg_C]
.text$mn:00002A47                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002A4C                 mov     edx, [ebp+arg_18]
.text$mn:00002A4F                 add     eax, [edx]
.text$mn:00002A51                 mov     ecx, [ebp+arg_18]
.text$mn:00002A54                 mov     [ecx], eax
.text$mn:00002A56                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002A5A                 lea     ecx, [ebp+arg_0]
.text$mn:00002A5D                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00002A62                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002A69                 lea     ecx, [ebp+arg_C]
.text$mn:00002A6C                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00002A71                 mov     ecx, [ebp+var_C]
.text$mn:00002A74                 mov     large fs:0, ecx
.text$mn:00002A7B                 pop     ecx
.text$mn:00002A7C                 mov     esp, ebp
.text$mn:00002A7E                 pop     ebp
.text$mn:00002A7F                 retn
.text$mn:00002A7F ??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z endp
.text$mn:00002A7F
.text$mn:00002A7F _text$mn        ends
.text$mn:00002A7F
.text$x:00002A80 ; ===========================================================================
.text$x:00002A80
.text$x:00002A80 ; Segment type: Pure code
.text$x:00002A80 ; Segment permissions: Read/Execute
.text$x:00002A80 _text$x         segment para public 'CODE' use32
.text$x:00002A80                 assume cs:_text$x
.text$x:00002A80                 ;org 2A80h
.text$x:00002A80 ; COMDAT (pick associative to section at 29D8)
.text$x:00002A80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002A80
.text$x:00002A80 ; =============== S U B R O U T I N E =======================================
.text$x:00002A80
.text$x:00002A80
.text$x:00002A80 __unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$0 proc near
.text$x:00002A80                                         ; DATA XREF: .xdata$x:0000A1D0o
.text$x:00002A80                 lea     ecx, [ebp+14h]
.text$x:00002A83                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002A83 __unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$0 endp
.text$x:00002A83
.text$x:00002A88
.text$x:00002A88 ; =============== S U B R O U T I N E =======================================
.text$x:00002A88
.text$x:00002A88
.text$x:00002A88 __unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$1 proc near
.text$x:00002A88                                         ; DATA XREF: .xdata$x:0000A1D8o
.text$x:00002A88                 lea     ecx, [ebp+8]
.text$x:00002A8B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002A8B __unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$1 endp
.text$x:00002A8B
.text$x:00002A90
.text$x:00002A90 ; =============== S U B R O U T I N E =======================================
.text$x:00002A90
.text$x:00002A90
.text$x:00002A90 __ehhandler$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z proc near
.text$x:00002A90                                         ; DATA XREF: std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &,std::random_access_iterator_tag)+5o
.text$x:00002A90
.text$x:00002A90 arg_4           = dword ptr  8
.text$x:00002A90
.text$x:00002A90                 mov     edx, [esp+arg_4]
.text$x:00002A94                 lea     eax, [edx+0Ch]
.text$x:00002A97                 mov     ecx, [edx-4]
.text$x:00002A9A                 xor     ecx, eax
.text$x:00002A9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002AA1                 mov     eax, offset __ehfuncinfo$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
.text$x:00002AA6                 jmp     ___CxxFrameHandler3
.text$x:00002AA6 __ehhandler$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z endp
.text$x:00002AA6
.text$x:00002AA6 ; ---------------------------------------------------------------------------
.text$x:00002AAB                 align 4
.text$x:00002AAB _text$x         ends
.text$x:00002AAB
.text$mn:00002AAC ; ===========================================================================
.text$mn:00002AAC
.text$mn:00002AAC ; Segment type: Pure code
.text$mn:00002AAC ; Segment permissions: Read/Execute
.text$mn:00002AAC _text$mn        segment para public 'CODE' use32
.text$mn:00002AAC                 assume cs:_text$mn
.text$mn:00002AAC                 ;org 2AACh
.text$mn:00002AAC ; COMDAT (pick any)
.text$mn:00002AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002AAC
.text$mn:00002AAC ; =============== S U B R O U T I N E =======================================
.text$mn:00002AAC
.text$mn:00002AAC ; Attributes: bp-based frame
.text$mn:00002AAC
.text$mn:00002AAC ; void __cdecl std::_Distance<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, unsigned int>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, unsigned int &)
.text$mn:00002AAC                 public ??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z
.text$mn:00002AAC ??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z proc near
.text$mn:00002AAC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+D3p
.text$mn:00002AAC
.text$mn:00002AAC var_28          = dword ptr -28h
.text$mn:00002AAC var_24          = dword ptr -24h
.text$mn:00002AAC var_20          = dword ptr -20h
.text$mn:00002AAC var_1C          = dword ptr -1Ch
.text$mn:00002AAC var_18          = dword ptr -18h
.text$mn:00002AAC var_14          = dword ptr -14h
.text$mn:00002AAC var_D           = byte ptr -0Dh
.text$mn:00002AAC var_C           = dword ptr -0Ch
.text$mn:00002AAC var_4           = dword ptr -4
.text$mn:00002AAC arg_0           = byte ptr  8
.text$mn:00002AAC arg_C           = byte ptr  14h
.text$mn:00002AAC arg_18          = dword ptr  20h
.text$mn:00002AAC
.text$mn:00002AAC                 push    ebp
.text$mn:00002AAD                 mov     ebp, esp
.text$mn:00002AAF                 push    0FFFFFFFFh
.text$mn:00002AB1                 push    offset __ehhandler$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z
.text$mn:00002AB6                 mov     eax, large fs:0
.text$mn:00002ABC                 push    eax
.text$mn:00002ABD                 sub     esp, 1Ch
.text$mn:00002AC0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002AC5                 xor     eax, ebp
.text$mn:00002AC7                 push    eax
.text$mn:00002AC8                 lea     eax, [ebp+var_C]
.text$mn:00002ACB                 mov     large fs:0, eax
.text$mn:00002AD1                 mov     [ebp+var_4], 1
.text$mn:00002AD8                 lea     eax, [ebp+arg_0]
.text$mn:00002ADB                 push    eax
.text$mn:00002ADC                 lea     ecx, [ebp+var_D]
.text$mn:00002ADF                 push    ecx
.text$mn:00002AE0                 call    ??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z ; std::_Iter_cat<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002AE5                 add     esp, 8
.text$mn:00002AE8                 mov     dl, [eax]
.text$mn:00002AEA                 movzx   eax, dl
.text$mn:00002AED                 push    eax
.text$mn:00002AEE                 mov     ecx, [ebp+arg_18]
.text$mn:00002AF1                 push    ecx
.text$mn:00002AF2                 sub     esp, 0Ch
.text$mn:00002AF5                 mov     ecx, esp
.text$mn:00002AF7                 mov     [ebp+var_1C], esp
.text$mn:00002AFA                 lea     edx, [ebp+arg_C]
.text$mn:00002AFD                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00002AFE                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002B03                 mov     [ebp+var_14], eax
.text$mn:00002B06                 mov     eax, [ebp+var_14]
.text$mn:00002B09                 mov     [ebp+var_20], eax
.text$mn:00002B0C                 mov     byte ptr [ebp+var_4], 2
.text$mn:00002B10                 sub     esp, 0Ch
.text$mn:00002B13                 mov     ecx, esp
.text$mn:00002B15                 mov     [ebp+var_24], esp
.text$mn:00002B18                 lea     edx, [ebp+arg_0]
.text$mn:00002B1B                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00002B1C                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00002B21                 mov     [ebp+var_18], eax
.text$mn:00002B24                 mov     eax, [ebp+var_18]
.text$mn:00002B27                 mov     [ebp+var_28], eax
.text$mn:00002B2A                 mov     byte ptr [ebp+var_4], 3
.text$mn:00002B2E                 mov     byte ptr [ebp+var_4], 1
.text$mn:00002B32                 call    ??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &,std::random_access_iterator_tag)
.text$mn:00002B37                 add     esp, 20h
.text$mn:00002B3A                 mov     byte ptr [ebp+var_4], 0
.text$mn:00002B3E                 lea     ecx, [ebp+arg_0]
.text$mn:00002B41                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00002B46                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002B4D                 lea     ecx, [ebp+arg_C]
.text$mn:00002B50                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00002B55                 mov     ecx, [ebp+var_C]
.text$mn:00002B58                 mov     large fs:0, ecx
.text$mn:00002B5F                 pop     ecx
.text$mn:00002B60                 mov     esp, ebp
.text$mn:00002B62                 pop     ebp
.text$mn:00002B63                 retn
.text$mn:00002B63 ??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z endp
.text$mn:00002B63
.text$mn:00002B63 _text$mn        ends
.text$mn:00002B63
.text$x:00002B64 ; ===========================================================================
.text$x:00002B64
.text$x:00002B64 ; Segment type: Pure code
.text$x:00002B64 ; Segment permissions: Read/Execute
.text$x:00002B64 _text$x         segment para public 'CODE' use32
.text$x:00002B64                 assume cs:_text$x
.text$x:00002B64                 ;org 2B64h
.text$x:00002B64 ; COMDAT (pick associative to section at 2AAC)
.text$x:00002B64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002B64
.text$x:00002B64 ; =============== S U B R O U T I N E =======================================
.text$x:00002B64
.text$x:00002B64
.text$x:00002B64 __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$0 proc near
.text$x:00002B64                                         ; DATA XREF: .xdata$x:0000A0A8o
.text$x:00002B64                 lea     ecx, [ebp+14h]
.text$x:00002B67                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002B67 __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$0 endp
.text$x:00002B67
.text$x:00002B6C
.text$x:00002B6C ; =============== S U B R O U T I N E =======================================
.text$x:00002B6C
.text$x:00002B6C
.text$x:00002B6C __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$1 proc near
.text$x:00002B6C                                         ; DATA XREF: .xdata$x:0000A0B0o
.text$x:00002B6C                 lea     ecx, [ebp+8]
.text$x:00002B6F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002B6F __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$1 endp
.text$x:00002B6F
.text$x:00002B74
.text$x:00002B74 ; =============== S U B R O U T I N E =======================================
.text$x:00002B74
.text$x:00002B74
.text$x:00002B74 __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$2 proc near
.text$x:00002B74                                         ; DATA XREF: .xdata$x:0000A0B8o
.text$x:00002B74                 mov     ecx, [ebp-1Ch]
.text$x:00002B77                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002B77 __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$2 endp
.text$x:00002B77
.text$x:00002B7C
.text$x:00002B7C ; =============== S U B R O U T I N E =======================================
.text$x:00002B7C
.text$x:00002B7C
.text$x:00002B7C __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$3 proc near
.text$x:00002B7C                                         ; DATA XREF: .xdata$x:0000A0C0o
.text$x:00002B7C                 mov     ecx, [ebp-24h]
.text$x:00002B7F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00002B7F __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$3 endp
.text$x:00002B7F
.text$x:00002B84
.text$x:00002B84 ; =============== S U B R O U T I N E =======================================
.text$x:00002B84
.text$x:00002B84
.text$x:00002B84 __ehhandler$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z proc near
.text$x:00002B84                                         ; DATA XREF: std::_Distance<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &)+5o
.text$x:00002B84
.text$x:00002B84 arg_4           = dword ptr  8
.text$x:00002B84
.text$x:00002B84                 mov     edx, [esp+arg_4]
.text$x:00002B88                 lea     eax, [edx+0Ch]
.text$x:00002B8B                 mov     ecx, [edx-20h]
.text$x:00002B8E                 xor     ecx, eax
.text$x:00002B90                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002B95                 mov     eax, offset __ehfuncinfo$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z
.text$x:00002B9A                 jmp     ___CxxFrameHandler3
.text$x:00002B9A __ehhandler$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z endp
.text$x:00002B9A
.text$x:00002B9A ; ---------------------------------------------------------------------------
.text$x:00002B9F                 align 10h
.text$x:00002B9F _text$x         ends
.text$x:00002B9F
.text$mn:00002BA0 ; ===========================================================================
.text$mn:00002BA0
.text$mn:00002BA0 ; Segment type: Pure code
.text$mn:00002BA0 ; Segment permissions: Read/Execute
.text$mn:00002BA0 _text$mn        segment para public 'CODE' use32
.text$mn:00002BA0                 assume cs:_text$mn
.text$mn:00002BA0                 ;org 2BA0h
.text$mn:00002BA0 ; COMDAT (pick any)
.text$mn:00002BA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002BA0
.text$mn:00002BA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BA0
.text$mn:00002BA0 ; Attributes: bp-based frame
.text$mn:00002BA0
.text$mn:00002BA0 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * const &)
.text$mn:00002BA0                 public ??$_Iter_cat@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@@Z
.text$mn:00002BA0 ??$_Iter_cat@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@@Z proc near
.text$mn:00002BA0                                         ; CODE XREF: std::_Debug_range<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)+Cp
.text$mn:00002BA0
.text$mn:00002BA0 var_1           = byte ptr -1
.text$mn:00002BA0 arg_0           = dword ptr  8
.text$mn:00002BA0
.text$mn:00002BA0                 push    ebp
.text$mn:00002BA1                 mov     ebp, esp
.text$mn:00002BA3                 push    ecx
.text$mn:00002BA4                 mov     eax, [ebp+arg_0]
.text$mn:00002BA7                 mov     cl, [ebp+var_1]
.text$mn:00002BAA                 mov     [eax], cl
.text$mn:00002BAC                 mov     eax, [ebp+arg_0]
.text$mn:00002BAF                 mov     esp, ebp
.text$mn:00002BB1                 pop     ebp
.text$mn:00002BB2                 retn
.text$mn:00002BB2 ??$_Iter_cat@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@@Z endp
.text$mn:00002BB2
.text$mn:00002BB2 ; ---------------------------------------------------------------------------
.text$mn:00002BB3                 align 4
.text$mn:00002BB3 _text$mn        ends
.text$mn:00002BB3
.text$mn:00002BB4 ; ===========================================================================
.text$mn:00002BB4
.text$mn:00002BB4 ; Segment type: Pure code
.text$mn:00002BB4 ; Segment permissions: Read/Execute
.text$mn:00002BB4 _text$mn        segment para public 'CODE' use32
.text$mn:00002BB4                 assume cs:_text$mn
.text$mn:00002BB4                 ;org 2BB4h
.text$mn:00002BB4 ; COMDAT (pick any)
.text$mn:00002BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002BB4
.text$mn:00002BB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BB4
.text$mn:00002BB4 ; Attributes: bp-based frame
.text$mn:00002BB4
.text$mn:00002BB4 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * const &)
.text$mn:00002BB4                 public ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
.text$mn:00002BB4 ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z proc near
.text$mn:00002BB4                                         ; CODE XREF: std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)+Cp
.text$mn:00002BB4
.text$mn:00002BB4 var_1           = byte ptr -1
.text$mn:00002BB4 arg_0           = dword ptr  8
.text$mn:00002BB4
.text$mn:00002BB4                 push    ebp
.text$mn:00002BB5                 mov     ebp, esp
.text$mn:00002BB7                 push    ecx
.text$mn:00002BB8                 mov     eax, [ebp+arg_0]
.text$mn:00002BBB                 mov     cl, [ebp+var_1]
.text$mn:00002BBE                 mov     [eax], cl
.text$mn:00002BC0                 mov     eax, [ebp+arg_0]
.text$mn:00002BC3                 mov     esp, ebp
.text$mn:00002BC5                 pop     ebp
.text$mn:00002BC6                 retn
.text$mn:00002BC6 ??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z endp
.text$mn:00002BC6
.text$mn:00002BC6 ; ---------------------------------------------------------------------------
.text$mn:00002BC7                 align 4
.text$mn:00002BC7 _text$mn        ends
.text$mn:00002BC7
.text$mn:00002BC8 ; ===========================================================================
.text$mn:00002BC8
.text$mn:00002BC8 ; Segment type: Pure code
.text$mn:00002BC8 ; Segment permissions: Read/Execute
.text$mn:00002BC8 _text$mn        segment para public 'CODE' use32
.text$mn:00002BC8                 assume cs:_text$mn
.text$mn:00002BC8                 ;org 2BC8h
.text$mn:00002BC8 ; COMDAT (pick any)
.text$mn:00002BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002BC8
.text$mn:00002BC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BC8
.text$mn:00002BC8 ; Attributes: bp-based frame
.text$mn:00002BC8
.text$mn:00002BC8 ; struct std::random_access_iterator_tag __cdecl std::_Iter_cat<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>> const &)
.text$mn:00002BC8                 public ??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z
.text$mn:00002BC8 ??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z proc near
.text$mn:00002BC8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+58p
.text$mn:00002BC8                                         ; std::_Debug_range<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint)+34p ...
.text$mn:00002BC8
.text$mn:00002BC8 var_1           = byte ptr -1
.text$mn:00002BC8 arg_0           = dword ptr  8
.text$mn:00002BC8
.text$mn:00002BC8                 push    ebp
.text$mn:00002BC9                 mov     ebp, esp
.text$mn:00002BCB                 push    ecx
.text$mn:00002BCC                 mov     eax, [ebp+arg_0]
.text$mn:00002BCF                 mov     cl, [ebp+var_1]
.text$mn:00002BD2                 mov     [eax], cl
.text$mn:00002BD4                 mov     eax, [ebp+arg_0]
.text$mn:00002BD7                 mov     esp, ebp
.text$mn:00002BD9                 pop     ebp
.text$mn:00002BDA                 retn
.text$mn:00002BDA ??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z endp
.text$mn:00002BDA
.text$mn:00002BDA ; ---------------------------------------------------------------------------
.text$mn:00002BDB                 align 4
.text$mn:00002BDB _text$mn        ends
.text$mn:00002BDB
.text$mn:00002BDC ; ===========================================================================
.text$mn:00002BDC
.text$mn:00002BDC ; Segment type: Pure code
.text$mn:00002BDC ; Segment permissions: Read/Execute
.text$mn:00002BDC _text$mn        segment para public 'CODE' use32
.text$mn:00002BDC                 assume cs:_text$mn
.text$mn:00002BDC                 ;org 2BDCh
.text$mn:00002BDC ; COMDAT (pick any)
.text$mn:00002BDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002BDC
.text$mn:00002BDC ; =============== S U B R O U T I N E =======================================
.text$mn:00002BDC
.text$mn:00002BDC ; Attributes: bp-based frame
.text$mn:00002BDC
.text$mn:00002BDC ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)
.text$mn:00002BDC                 public ??$_Ptr_cat@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0@Z
.text$mn:00002BDC ??$_Ptr_cat@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0@Z proc near
.text$mn:00002BDC                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &)+Cp
.text$mn:00002BDC                                         ; std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_tra
.text$mn:00002BDC
.text$mn:00002BDC var_1           = byte ptr -1
.text$mn:00002BDC
.text$mn:00002BDC                 push    ebp
.text$mn:00002BDD                 mov     ebp, esp
.text$mn:00002BDF                 push    ecx
.text$mn:00002BE0                 mov     al, [ebp+var_1]
.text$mn:00002BE3                 mov     esp, ebp
.text$mn:00002BE5                 pop     ebp
.text$mn:00002BE6                 retn
.text$mn:00002BE6 ??$_Ptr_cat@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0@Z endp
.text$mn:00002BE6
.text$mn:00002BE6 ; ---------------------------------------------------------------------------
.text$mn:00002BE7                 align 4
.text$mn:00002BE7 _text$mn        ends
.text$mn:00002BE7
.text$mn:00002BE8 ; ===========================================================================
.text$mn:00002BE8
.text$mn:00002BE8 ; Segment type: Pure code
.text$mn:00002BE8 ; Segment permissions: Read/Execute
.text$mn:00002BE8 _text$mn        segment para public 'CODE' use32
.text$mn:00002BE8                 assume cs:_text$mn
.text$mn:00002BE8                 ;org 2BE8h
.text$mn:00002BE8 ; COMDAT (pick any)
.text$mn:00002BE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002BE8
.text$mn:00002BE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BE8
.text$mn:00002BE8 ; Attributes: bp-based frame
.text$mn:00002BE8
.text$mn:00002BE8 ; struct std::_Nonscalar_ptr_iterator_tag __cdecl std::_Ptr_cat<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00002BE8                 public ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z
.text$mn:00002BE8 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z proc near
.text$mn:00002BE8                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00002BE8                                         ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Cp
.text$mn:00002BE8
.text$mn:00002BE8 var_1           = byte ptr -1
.text$mn:00002BE8
.text$mn:00002BE8                 push    ebp
.text$mn:00002BE9                 mov     ebp, esp
.text$mn:00002BEB                 push    ecx
.text$mn:00002BEC                 mov     al, [ebp+var_1]
.text$mn:00002BEF                 mov     esp, ebp
.text$mn:00002BF1                 pop     ebp
.text$mn:00002BF2                 retn
.text$mn:00002BF2 ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z endp
.text$mn:00002BF2
.text$mn:00002BF2 ; ---------------------------------------------------------------------------
.text$mn:00002BF3                 align 4
.text$mn:00002BF3 _text$mn        ends
.text$mn:00002BF3
.text$mn:00002BF4 ; ===========================================================================
.text$mn:00002BF4
.text$mn:00002BF4 ; Segment type: Pure code
.text$mn:00002BF4 ; Segment permissions: Read/Execute
.text$mn:00002BF4 _text$mn        segment para public 'CODE' use32
.text$mn:00002BF4                 assume cs:_text$mn
.text$mn:00002BF4                 ;org 2BF4h
.text$mn:00002BF4 ; COMDAT (pick any)
.text$mn:00002BF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002BF4
.text$mn:00002BF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002BF4
.text$mn:00002BF4 ; Attributes: bp-based frame
.text$mn:00002BF4
.text$mn:00002BF4 ; struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * & __cdecl std::_Rechecked<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * &, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, clas
.text$mn:00002BF4                 public ??$_Rechecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@@std@@YAAAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAPAU10@PAU10@@Z
.text$mn:00002BF4 ??$_Rechecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@@std@@YAAAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAPAU10@PAU10@@Z proc near
.text$mn:00002BF4                                         ; CODE XREF: std::_Uninitialized_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wch
.text$mn:00002BF4
.text$mn:00002BF4 arg_0           = dword ptr  8
.text$mn:00002BF4 arg_4           = dword ptr  0Ch
.text$mn:00002BF4
.text$mn:00002BF4                 push    ebp
.text$mn:00002BF5                 mov     ebp, esp
.text$mn:00002BF7                 mov     eax, [ebp+arg_0]
.text$mn:00002BFA                 mov     ecx, [ebp+arg_4]
.text$mn:00002BFD                 mov     [eax], ecx
.text$mn:00002BFF                 mov     eax, [ebp+arg_0]
.text$mn:00002C02                 pop     ebp
.text$mn:00002C03                 retn
.text$mn:00002C03 ??$_Rechecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@@std@@YAAAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAPAU10@PAU10@@Z endp
.text$mn:00002C03
.text$mn:00002C03 _text$mn        ends
.text$mn:00002C03
.text$mn:00002C04 ; ===========================================================================
.text$mn:00002C04
.text$mn:00002C04 ; Segment type: Pure code
.text$mn:00002C04 ; Segment permissions: Read/Execute
.text$mn:00002C04 _text$mn        segment para public 'CODE' use32
.text$mn:00002C04                 assume cs:_text$mn
.text$mn:00002C04                 ;org 2C04h
.text$mn:00002C04 ; COMDAT (pick any)
.text$mn:00002C04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C04
.text$mn:00002C04 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C04
.text$mn:00002C04 ; Attributes: bp-based frame
.text$mn:00002C04
.text$mn:00002C04 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * & __cdecl std::_Rechecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00002C04                 public ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z
.text$mn:00002C04 ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z proc near
.text$mn:00002C04                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+3Bp
.text$mn:00002C04
.text$mn:00002C04 arg_0           = dword ptr  8
.text$mn:00002C04 arg_4           = dword ptr  0Ch
.text$mn:00002C04
.text$mn:00002C04                 push    ebp
.text$mn:00002C05                 mov     ebp, esp
.text$mn:00002C07                 mov     eax, [ebp+arg_0]
.text$mn:00002C0A                 mov     ecx, [ebp+arg_4]
.text$mn:00002C0D                 mov     [eax], ecx
.text$mn:00002C0F                 mov     eax, [ebp+arg_0]
.text$mn:00002C12                 pop     ebp
.text$mn:00002C13                 retn
.text$mn:00002C13 ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z endp
.text$mn:00002C13
.text$mn:00002C13 _text$mn        ends
.text$mn:00002C13
.text$mn:00002C14 ; ===========================================================================
.text$mn:00002C14
.text$mn:00002C14 ; Segment type: Pure code
.text$mn:00002C14 ; Segment permissions: Read/Execute
.text$mn:00002C14 _text$mn        segment para public 'CODE' use32
.text$mn:00002C14                 assume cs:_text$mn
.text$mn:00002C14                 ;org 2C14h
.text$mn:00002C14 ; COMDAT (pick any)
.text$mn:00002C14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C14
.text$mn:00002C14 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C14
.text$mn:00002C14 ; Attributes: bp-based frame
.text$mn:00002C14
.text$mn:00002C14 ; protected: struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Umove<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, clas
.text$mn:00002C14                 public ??$_Umove@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@PAU21@00@Z
.text$mn:00002C14 ??$_Umove@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@PAU21@00@Z proc near
.text$mn:00002C14                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+65p
.text$mn:00002C14
.text$mn:00002C14 var_8           = dword ptr -8
.text$mn:00002C14 var_1           = byte ptr -1
.text$mn:00002C14 arg_0           = dword ptr  8
.text$mn:00002C14 arg_4           = dword ptr  0Ch
.text$mn:00002C14 arg_8           = dword ptr  10h
.text$mn:00002C14
.text$mn:00002C14                 push    ebp
.text$mn:00002C15                 mov     ebp, esp
.text$mn:00002C17                 sub     esp, 8
.text$mn:00002C1A                 mov     [ebp+var_8], ecx
.text$mn:00002C1D                 lea     eax, [ebp+var_1]
.text$mn:00002C20                 push    eax
.text$mn:00002C21                 mov     ecx, [ebp+var_8]
.text$mn:00002C24                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)
.text$mn:00002C29                 lea     ecx, [ebp+var_1]
.text$mn:00002C2C                 push    ecx
.text$mn:00002C2D                 mov     edx, [ebp+arg_8]
.text$mn:00002C30                 push    edx
.text$mn:00002C31                 mov     eax, [ebp+arg_4]
.text$mn:00002C34                 push    eax
.text$mn:00002C35                 mov     ecx, [ebp+arg_0]
.text$mn:00002C38                 push    ecx
.text$mn:00002C39                 call    ??$_Uninitialized_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &)
.text$mn:00002C3E                 add     esp, 10h
.text$mn:00002C41                 mov     esp, ebp
.text$mn:00002C43                 pop     ebp
.text$mn:00002C44                 retn    0Ch
.text$mn:00002C44 ??$_Umove@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@PAU21@00@Z endp
.text$mn:00002C44
.text$mn:00002C44 ; ---------------------------------------------------------------------------
.text$mn:00002C47                 align 4
.text$mn:00002C47 _text$mn        ends
.text$mn:00002C47
.text$mn:00002C48 ; ===========================================================================
.text$mn:00002C48
.text$mn:00002C48 ; Segment type: Pure code
.text$mn:00002C48 ; Segment permissions: Read/Execute
.text$mn:00002C48 _text$mn        segment para public 'CODE' use32
.text$mn:00002C48                 assume cs:_text$mn
.text$mn:00002C48                 ;org 2C48h
.text$mn:00002C48 ; COMDAT (pick any)
.text$mn:00002C48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C48
.text$mn:00002C48 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C48
.text$mn:00002C48 ; Attributes: bp-based frame
.text$mn:00002C48
.text$mn:00002C48 ; protected: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Umove<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00002C48                 public ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z
.text$mn:00002C48 ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z proc near
.text$mn:00002C48                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+65p
.text$mn:00002C48
.text$mn:00002C48 var_8           = dword ptr -8
.text$mn:00002C48 var_1           = byte ptr -1
.text$mn:00002C48 arg_0           = dword ptr  8
.text$mn:00002C48 arg_4           = dword ptr  0Ch
.text$mn:00002C48 arg_8           = dword ptr  10h
.text$mn:00002C48
.text$mn:00002C48                 push    ebp
.text$mn:00002C49                 mov     ebp, esp
.text$mn:00002C4B                 sub     esp, 8
.text$mn:00002C4E                 mov     [ebp+var_8], ecx
.text$mn:00002C51                 lea     eax, [ebp+var_1]
.text$mn:00002C54                 push    eax
.text$mn:00002C55                 mov     ecx, [ebp+var_8]
.text$mn:00002C58                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00002C5D                 lea     ecx, [ebp+var_1]
.text$mn:00002C60                 push    ecx
.text$mn:00002C61                 mov     edx, [ebp+arg_8]
.text$mn:00002C64                 push    edx
.text$mn:00002C65                 mov     eax, [ebp+arg_4]
.text$mn:00002C68                 push    eax
.text$mn:00002C69                 mov     ecx, [ebp+arg_0]
.text$mn:00002C6C                 push    ecx
.text$mn:00002C6D                 call    ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00002C72                 add     esp, 10h
.text$mn:00002C75                 mov     esp, ebp
.text$mn:00002C77                 pop     ebp
.text$mn:00002C78                 retn    0Ch
.text$mn:00002C78 ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z endp
.text$mn:00002C78
.text$mn:00002C78 ; ---------------------------------------------------------------------------
.text$mn:00002C7B                 align 4
.text$mn:00002C7B _text$mn        ends
.text$mn:00002C7B
.text$mn:00002C7C ; ===========================================================================
.text$mn:00002C7C
.text$mn:00002C7C ; Segment type: Pure code
.text$mn:00002C7C ; Segment permissions: Read/Execute
.text$mn:00002C7C _text$mn        segment para public 'CODE' use32
.text$mn:00002C7C                 assume cs:_text$mn
.text$mn:00002C7C                 ;org 2C7Ch
.text$mn:00002C7C ; COMDAT (pick any)
.text$mn:00002C7C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C7C
.text$mn:00002C7C ; =============== S U B R O U T I N E =======================================
.text$mn:00002C7C
.text$mn:00002C7C ; Attributes: bp-based frame
.text$mn:00002C7C
.text$mn:00002C7C ; struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * __cdecl std::_Unchecked<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)
.text$mn:00002C7C                 public ??$_Unchecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z
.text$mn:00002C7C ??$_Unchecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z proc near
.text$mn:00002C7C                                         ; CODE XREF: std::_Uninitialized_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wch
.text$mn:00002C7C                                         ; std::_Uninitialized_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::c ...
.text$mn:00002C7C
.text$mn:00002C7C arg_0           = dword ptr  8
.text$mn:00002C7C
.text$mn:00002C7C                 push    ebp
.text$mn:00002C7D                 mov     ebp, esp
.text$mn:00002C7F                 mov     eax, [ebp+arg_0]
.text$mn:00002C82                 pop     ebp
.text$mn:00002C83                 retn
.text$mn:00002C83 ??$_Unchecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z endp
.text$mn:00002C83
.text$mn:00002C83 _text$mn        ends
.text$mn:00002C83
.text$mn:00002C84 ; ===========================================================================
.text$mn:00002C84
.text$mn:00002C84 ; Segment type: Pure code
.text$mn:00002C84 ; Segment permissions: Read/Execute
.text$mn:00002C84 _text$mn        segment para public 'CODE' use32
.text$mn:00002C84                 assume cs:_text$mn
.text$mn:00002C84                 ;org 2C84h
.text$mn:00002C84 ; COMDAT (pick any)
.text$mn:00002C84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C84
.text$mn:00002C84 ; =============== S U B R O U T I N E =======================================
.text$mn:00002C84
.text$mn:00002C84 ; Attributes: bp-based frame
.text$mn:00002C84
.text$mn:00002C84 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Unchecked<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00002C84                 public ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00002C84 ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00002C84                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+Bp
.text$mn:00002C84                                         ; std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+18p ...
.text$mn:00002C84
.text$mn:00002C84 arg_0           = dword ptr  8
.text$mn:00002C84
.text$mn:00002C84                 push    ebp
.text$mn:00002C85                 mov     ebp, esp
.text$mn:00002C87                 mov     eax, [ebp+arg_0]
.text$mn:00002C8A                 pop     ebp
.text$mn:00002C8B                 retn
.text$mn:00002C8B ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00002C8B
.text$mn:00002C8B _text$mn        ends
.text$mn:00002C8B
.text$mn:00002C8C ; ===========================================================================
.text$mn:00002C8C
.text$mn:00002C8C ; Segment type: Pure code
.text$mn:00002C8C ; Segment permissions: Read/Execute
.text$mn:00002C8C _text$mn        segment para public 'CODE' use32
.text$mn:00002C8C                 assume cs:_text$mn
.text$mn:00002C8C                 ;org 2C8Ch
.text$mn:00002C8C ; COMDAT (pick any)
.text$mn:00002C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002C8C
.text$mn:00002C8C ; =============== S U B R O U T I N E =======================================
.text$mn:00002C8C
.text$mn:00002C8C ; Attributes: bp-based frame
.text$mn:00002C8C
.text$mn:00002C8C ; int __cdecl std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(int, int, void *, int)
.text$mn:00002C8C                 public ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z
.text$mn:00002C8C ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z proc near
.text$mn:00002C8C                                         ; CODE XREF: std::_Uninitialized_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wch
.text$mn:00002C8C
.text$mn:00002C8C var_1           = byte ptr -1
.text$mn:00002C8C arg_0           = dword ptr  8
.text$mn:00002C8C arg_4           = dword ptr  0Ch
.text$mn:00002C8C arg_8           = dword ptr  10h
.text$mn:00002C8C arg_C           = dword ptr  14h
.text$mn:00002C8C
.text$mn:00002C8C                 push    ebp
.text$mn:00002C8D                 mov     ebp, esp
.text$mn:00002C8F                 push    ecx
.text$mn:00002C90                 mov     eax, [ebp+arg_8]
.text$mn:00002C93                 push    eax
.text$mn:00002C94                 mov     ecx, [ebp+arg_0]
.text$mn:00002C97                 push    ecx
.text$mn:00002C98                 call    ??$_Ptr_cat@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0@Z ; std::_Ptr_cat<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002C9D                 add     esp, 8
.text$mn:00002CA0                 mov     [ebp+var_1], al
.text$mn:00002CA3                 movzx   edx, [ebp+var_1]
.text$mn:00002CA7                 push    edx
.text$mn:00002CA8                 mov     eax, [ebp+arg_0]
.text$mn:00002CAB                 push    eax
.text$mn:00002CAC                 call    ??$_Val_type@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z ; std::_Val_type<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002CB1                 add     esp, 4
.text$mn:00002CB4                 push    eax
.text$mn:00002CB5                 mov     ecx, [ebp+arg_C]
.text$mn:00002CB8                 push    ecx             ; int
.text$mn:00002CB9                 mov     edx, [ebp+arg_8]
.text$mn:00002CBC                 push    edx             ; void *
.text$mn:00002CBD                 mov     eax, [ebp+arg_4]
.text$mn:00002CC0                 push    eax             ; int
.text$mn:00002CC1                 mov     ecx, [ebp+arg_0]
.text$mn:00002CC4                 push    ecx             ; int
.text$mn:00002CC5                 call    ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00002CCA                 add     esp, 18h
.text$mn:00002CCD                 mov     esp, ebp
.text$mn:00002CCF                 pop     ebp
.text$mn:00002CD0                 retn
.text$mn:00002CD0 ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z endp
.text$mn:00002CD0
.text$mn:00002CD0 ; ---------------------------------------------------------------------------
.text$mn:00002CD1                 align 4
.text$mn:00002CD1 _text$mn        ends
.text$mn:00002CD1
.text$mn:00002CD4 ; ===========================================================================
.text$mn:00002CD4
.text$mn:00002CD4 ; Segment type: Pure code
.text$mn:00002CD4 ; Segment permissions: Read/Execute
.text$mn:00002CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00002CD4                 assume cs:_text$mn
.text$mn:00002CD4                 ;org 2CD4h
.text$mn:00002CD4 ; COMDAT (pick any)
.text$mn:00002CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002CD4
.text$mn:00002CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002CD4
.text$mn:00002CD4 ; Attributes: bp-based frame
.text$mn:00002CD4
.text$mn:00002CD4 ; int __cdecl std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(int, int, void *, int)
.text$mn:00002CD4                 public ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002CD4 ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00002CD4                                         ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,st
.text$mn:00002CD4
.text$mn:00002CD4 var_14          = dword ptr -14h
.text$mn:00002CD4 var_10          = dword ptr -10h
.text$mn:00002CD4 var_C           = dword ptr -0Ch
.text$mn:00002CD4 var_4           = dword ptr -4
.text$mn:00002CD4 arg_0           = dword ptr  8
.text$mn:00002CD4 arg_4           = dword ptr  0Ch
.text$mn:00002CD4 arg_8           = dword ptr  10h
.text$mn:00002CD4 arg_C           = dword ptr  14h
.text$mn:00002CD4
.text$mn:00002CD4 ; FUNCTION CHUNK AT .text$mn:00002D9B SIZE 00000009 BYTES
.text$mn:00002CD4 ; FUNCTION CHUNK AT .text$mn:00002DAB SIZE 00000015 BYTES
.text$mn:00002CD4
.text$mn:00002CD4                 push    ebp
.text$mn:00002CD5                 mov     ebp, esp
.text$mn:00002CD7                 push    0FFFFFFFFh
.text$mn:00002CD9                 push    offset __ehhandler$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002CDE                 mov     eax, large fs:0
.text$mn:00002CE4                 push    eax
.text$mn:00002CE5                 push    ecx
.text$mn:00002CE6                 push    ecx
.text$mn:00002CE7                 push    ebx
.text$mn:00002CE8                 push    esi
.text$mn:00002CE9                 push    edi
.text$mn:00002CEA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002CEF                 xor     eax, ebp
.text$mn:00002CF1                 push    eax
.text$mn:00002CF2                 lea     eax, [ebp+var_C]
.text$mn:00002CF5                 mov     large fs:0, eax
.text$mn:00002CFB                 mov     [ebp+var_10], esp
.text$mn:00002CFE                 push    1B6h            ; unsigned int
.text$mn:00002D03                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00002D08                 mov     eax, [ebp+arg_4]
.text$mn:00002D0B                 push    eax             ; int
.text$mn:00002D0C                 mov     ecx, [ebp+arg_0]
.text$mn:00002D0F                 push    ecx             ; int
.text$mn:00002D10                 call    ??$_Debug_range@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0PB_WI@Z ; std::_Debug_range<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)
.text$mn:00002D15                 add     esp, 10h
.text$mn:00002D18                 push    1B7h            ; unsigned int
.text$mn:00002D1D                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00002D22                 mov     edx, [ebp+arg_8]
.text$mn:00002D25                 push    edx             ; int
.text$mn:00002D26                 call    ??$_Debug_pointer@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PB_WI@Z ; std::_Debug_pointer<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)
.text$mn:00002D2B                 add     esp, 0Ch
.text$mn:00002D2E                 mov     eax, [ebp+arg_8]
.text$mn:00002D31                 mov     [ebp+var_14], eax
.text$mn:00002D34                 mov     [ebp+var_4], 0
.text$mn:00002D3B                 jmp     short loc_2D4F
.text$mn:00002D3D ; ---------------------------------------------------------------------------
.text$mn:00002D3D
.text$mn:00002D3D loc_2D3D:                               ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.text$mn:00002D3D                 mov     ecx, [ebp+arg_8]
.text$mn:00002D40                 add     ecx, 38h ; '8'
.text$mn:00002D43                 mov     [ebp+arg_8], ecx
.text$mn:00002D46                 mov     edx, [ebp+arg_0]
.text$mn:00002D49                 add     edx, 38h ; '8'
.text$mn:00002D4C                 mov     [ebp+arg_0], edx
.text$mn:00002D4F
.text$mn:00002D4F loc_2D4F:                               ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.text$mn:00002D4F                 mov     eax, [ebp+arg_0]
.text$mn:00002D52                 cmp     eax, [ebp+arg_4]
.text$mn:00002D55                 jz      short loc_2D69
.text$mn:00002D57                 mov     ecx, [ebp+arg_0]
.text$mn:00002D5A                 push    ecx             ; int
.text$mn:00002D5B                 mov     edx, [ebp+arg_8]
.text$mn:00002D5E                 push    edx             ; void *
.text$mn:00002D5F                 mov     ecx, [ebp+arg_C]
.text$mn:00002D62                 call    ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)
.text$mn:00002D67                 jmp     short loc_2D3D
.text$mn:00002D69 ; ---------------------------------------------------------------------------
.text$mn:00002D69
.text$mn:00002D69 loc_2D69:                               ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.text$mn:00002D69                 jmp     short loc_2D9B
.text$mn:00002D69 ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00002D69
.text$mn:00002D6B
.text$mn:00002D6B ; =============== S U B R O U T I N E =======================================
.text$mn:00002D6B
.text$mn:00002D6B ; Attributes: noreturn
.text$mn:00002D6B
.text$mn:00002D6B __catch$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:00002D6B                                         ; DATA XREF: .xdata$x:0000A264o
.text$mn:00002D6B                 jmp     short loc_2D76
.text$mn:00002D6D ; ---------------------------------------------------------------------------
.text$mn:00002D6D
.text$mn:00002D6D loc_2D6D:                               ; CODE XREF: __catch$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00002D6D                 mov     eax, [ebp-14h]
.text$mn:00002D70                 add     eax, 38h ; '8'
.text$mn:00002D73                 mov     [ebp-14h], eax
.text$mn:00002D76
.text$mn:00002D76 loc_2D76:                               ; CODE XREF: __catch$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:00002D76                 mov     ecx, [ebp-14h]
.text$mn:00002D79                 cmp     ecx, [ebp+10h]
.text$mn:00002D7C                 jz      short loc_2D8C
.text$mn:00002D7E                 mov     edx, [ebp-14h]
.text$mn:00002D81                 push    edx
.text$mn:00002D82                 mov     ecx, [ebp+14h]
.text$mn:00002D85                 call    ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::destroy<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002D8A                 jmp     short loc_2D6D
.text$mn:00002D8C ; ---------------------------------------------------------------------------
.text$mn:00002D8C
.text$mn:00002D8C loc_2D8C:                               ; CODE XREF: __catch$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00002D8C                 push    0
.text$mn:00002D8E                 push    0
.text$mn:00002D90                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00002D90 __catch$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00002D90
.text$mn:00002D95 ; ---------------------------------------------------------------------------
.text$mn:00002D95                 mov     eax, offset $LN13_0
.text$mn:00002D9A                 retn
.text$mn:00002D9B ; ---------------------------------------------------------------------------
.text$mn:00002D9B ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002D9B
.text$mn:00002D9B loc_2D9B:                               ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.text$mn:00002D9B                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002DA2                 jmp     short loc_2DAB
.text$mn:00002DA2 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002DA4
.text$mn:00002DA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002DA4
.text$mn:00002DA4
.text$mn:00002DA4 $LN13_0         proc near               ; DATA XREF: .text$mn:00002D95o
.text$mn:00002DA4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00002DA4 $LN13_0         endp ; sp-analysis failed
.text$mn:00002DA4
.text$mn:00002DAB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002DAB
.text$mn:00002DAB loc_2DAB:                               ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.text$mn:00002DAB                 mov     eax, [ebp+arg_8]
.text$mn:00002DAE                 mov     ecx, [ebp+var_C]
.text$mn:00002DB1                 mov     large fs:0, ecx
.text$mn:00002DB8                 pop     ecx
.text$mn:00002DB9                 pop     edi
.text$mn:00002DBA                 pop     esi
.text$mn:00002DBB                 pop     ebx
.text$mn:00002DBC                 mov     esp, ebp
.text$mn:00002DBE                 pop     ebp
.text$mn:00002DBF                 retn
.text$mn:00002DBF ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002DBF _text$mn        ends
.text$mn:00002DBF
.text$x:00002DC0 ; ===========================================================================
.text$x:00002DC0
.text$x:00002DC0 ; Segment type: Pure code
.text$x:00002DC0 ; Segment permissions: Read/Execute
.text$x:00002DC0 _text$x         segment para public 'CODE' use32
.text$x:00002DC0                 assume cs:_text$x
.text$x:00002DC0                 ;org 2DC0h
.text$x:00002DC0 ; COMDAT (pick associative to section at 2CD4)
.text$x:00002DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002DC0
.text$x:00002DC0 ; =============== S U B R O U T I N E =======================================
.text$x:00002DC0
.text$x:00002DC0
.text$x:00002DC0 __ehhandler$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00002DC0                                         ; DATA XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.text$x:00002DC0
.text$x:00002DC0 arg_4           = dword ptr  8
.text$x:00002DC0
.text$x:00002DC0                 mov     edx, [esp+arg_4]
.text$x:00002DC4                 lea     eax, [edx+0Ch]
.text$x:00002DC7                 mov     ecx, [edx-18h]
.text$x:00002DCA                 xor     ecx, eax
.text$x:00002DCC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002DD1                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:00002DD6                 jmp     ___CxxFrameHandler3
.text$x:00002DD6 __ehhandler$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:00002DD6
.text$x:00002DD6 ; ---------------------------------------------------------------------------
.text$x:00002DDB                 align 4
.text$x:00002DDB _text$x         ends
.text$x:00002DDB
.text$mn:00002DDC ; ===========================================================================
.text$mn:00002DDC
.text$mn:00002DDC ; Segment type: Pure code
.text$mn:00002DDC ; Segment permissions: Read/Execute
.text$mn:00002DDC _text$mn        segment para public 'CODE' use32
.text$mn:00002DDC                 assume cs:_text$mn
.text$mn:00002DDC                 ;org 2DDCh
.text$mn:00002DDC ; COMDAT (pick any)
.text$mn:00002DDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002DDC
.text$mn:00002DDC ; =============== S U B R O U T I N E =======================================
.text$mn:00002DDC
.text$mn:00002DDC ; Attributes: bp-based frame
.text$mn:00002DDC
.text$mn:00002DDC ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(int, int, void *, int)
.text$mn:00002DDC                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00002DDC ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00002DDC                                         ; CODE XREF: std::_Uninitialized_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+2Ep
.text$mn:00002DDC
.text$mn:00002DDC var_1           = byte ptr -1
.text$mn:00002DDC arg_0           = dword ptr  8
.text$mn:00002DDC arg_4           = dword ptr  0Ch
.text$mn:00002DDC arg_8           = dword ptr  10h
.text$mn:00002DDC arg_C           = dword ptr  14h
.text$mn:00002DDC
.text$mn:00002DDC                 push    ebp
.text$mn:00002DDD                 mov     ebp, esp
.text$mn:00002DDF                 push    ecx
.text$mn:00002DE0                 mov     eax, [ebp+arg_8]
.text$mn:00002DE3                 push    eax
.text$mn:00002DE4                 mov     ecx, [ebp+arg_0]
.text$mn:00002DE7                 push    ecx
.text$mn:00002DE8                 call    ??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z ; std::_Ptr_cat<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00002DED                 add     esp, 8
.text$mn:00002DF0                 mov     [ebp+var_1], al
.text$mn:00002DF3                 movzx   edx, [ebp+var_1]
.text$mn:00002DF7                 push    edx
.text$mn:00002DF8                 mov     eax, [ebp+arg_0]
.text$mn:00002DFB                 push    eax
.text$mn:00002DFC                 call    ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Val_type<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00002E01                 add     esp, 4
.text$mn:00002E04                 push    eax
.text$mn:00002E05                 mov     ecx, [ebp+arg_C]
.text$mn:00002E08                 push    ecx             ; int
.text$mn:00002E09                 mov     edx, [ebp+arg_8]
.text$mn:00002E0C                 push    edx             ; void *
.text$mn:00002E0D                 mov     eax, [ebp+arg_4]
.text$mn:00002E10                 push    eax             ; int
.text$mn:00002E11                 mov     ecx, [ebp+arg_0]
.text$mn:00002E14                 push    ecx             ; int
.text$mn:00002E15                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)
.text$mn:00002E1A                 add     esp, 18h
.text$mn:00002E1D                 mov     esp, ebp
.text$mn:00002E1F                 pop     ebp
.text$mn:00002E20                 retn
.text$mn:00002E20 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00002E20
.text$mn:00002E20 ; ---------------------------------------------------------------------------
.text$mn:00002E21                 align 4
.text$mn:00002E21 _text$mn        ends
.text$mn:00002E21
.text$mn:00002E24 ; ===========================================================================
.text$mn:00002E24
.text$mn:00002E24 ; Segment type: Pure code
.text$mn:00002E24 ; Segment permissions: Read/Execute
.text$mn:00002E24 _text$mn        segment para public 'CODE' use32
.text$mn:00002E24                 assume cs:_text$mn
.text$mn:00002E24                 ;org 2E24h
.text$mn:00002E24 ; COMDAT (pick any)
.text$mn:00002E24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002E24
.text$mn:00002E24 ; =============== S U B R O U T I N E =======================================
.text$mn:00002E24
.text$mn:00002E24 ; Attributes: bp-based frame
.text$mn:00002E24
.text$mn:00002E24 ; int __cdecl std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, int, void *, int)
.text$mn:00002E24                 public ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002E24 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$mn:00002E24                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+39p
.text$mn:00002E24
.text$mn:00002E24 var_14          = dword ptr -14h
.text$mn:00002E24 var_10          = dword ptr -10h
.text$mn:00002E24 var_C           = dword ptr -0Ch
.text$mn:00002E24 var_4           = dword ptr -4
.text$mn:00002E24 arg_0           = dword ptr  8
.text$mn:00002E24 arg_4           = dword ptr  0Ch
.text$mn:00002E24 arg_8           = dword ptr  10h
.text$mn:00002E24 arg_C           = dword ptr  14h
.text$mn:00002E24
.text$mn:00002E24 ; FUNCTION CHUNK AT .text$mn:00002EEB SIZE 00000009 BYTES
.text$mn:00002E24 ; FUNCTION CHUNK AT .text$mn:00002EFB SIZE 00000015 BYTES
.text$mn:00002E24
.text$mn:00002E24                 push    ebp
.text$mn:00002E25                 mov     ebp, esp
.text$mn:00002E27                 push    0FFFFFFFFh
.text$mn:00002E29                 push    offset __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002E2E                 mov     eax, large fs:0
.text$mn:00002E34                 push    eax
.text$mn:00002E35                 push    ecx
.text$mn:00002E36                 push    ecx
.text$mn:00002E37                 push    ebx
.text$mn:00002E38                 push    esi
.text$mn:00002E39                 push    edi
.text$mn:00002E3A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002E3F                 xor     eax, ebp
.text$mn:00002E41                 push    eax
.text$mn:00002E42                 lea     eax, [ebp+var_C]
.text$mn:00002E45                 mov     large fs:0, eax
.text$mn:00002E4B                 mov     [ebp+var_10], esp
.text$mn:00002E4E                 push    1B6h            ; unsigned int
.text$mn:00002E53                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00002E58                 mov     eax, [ebp+arg_4]
.text$mn:00002E5B                 push    eax             ; int
.text$mn:00002E5C                 mov     ecx, [ebp+arg_0]
.text$mn:00002E5F                 push    ecx             ; int
.text$mn:00002E60                 call    ??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z ; std::_Debug_range<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00002E65                 add     esp, 10h
.text$mn:00002E68                 push    1B7h            ; unsigned int
.text$mn:00002E6D                 push    offset ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00002E72                 mov     edx, [ebp+arg_8]
.text$mn:00002E75                 push    edx             ; int
.text$mn:00002E76                 call    ??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z ; std::_Debug_pointer<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint)
.text$mn:00002E7B                 add     esp, 0Ch
.text$mn:00002E7E                 mov     eax, [ebp+arg_8]
.text$mn:00002E81                 mov     [ebp+var_14], eax
.text$mn:00002E84                 mov     [ebp+var_4], 0
.text$mn:00002E8B                 jmp     short loc_2E9F
.text$mn:00002E8D ; ---------------------------------------------------------------------------
.text$mn:00002E8D
.text$mn:00002E8D loc_2E8D:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+93j
.text$mn:00002E8D                 mov     ecx, [ebp+arg_8]
.text$mn:00002E90                 add     ecx, 1Ch
.text$mn:00002E93                 mov     [ebp+arg_8], ecx
.text$mn:00002E96                 mov     edx, [ebp+arg_0]
.text$mn:00002E99                 add     edx, 1Ch
.text$mn:00002E9C                 mov     [ebp+arg_0], edx
.text$mn:00002E9F
.text$mn:00002E9F loc_2E9F:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+67j
.text$mn:00002E9F                 mov     eax, [ebp+arg_0]
.text$mn:00002EA2                 cmp     eax, [ebp+arg_4]
.text$mn:00002EA5                 jz      short loc_2EB9
.text$mn:00002EA7                 mov     ecx, [ebp+arg_0]
.text$mn:00002EAA                 push    ecx             ; int
.text$mn:00002EAB                 mov     edx, [ebp+arg_8]
.text$mn:00002EAE                 push    edx             ; void *
.text$mn:00002EAF                 mov     ecx, [ebp+arg_C]
.text$mn:00002EB2                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00002EB7                 jmp     short loc_2E8D
.text$mn:00002EB9 ; ---------------------------------------------------------------------------
.text$mn:00002EB9
.text$mn:00002EB9 loc_2EB9:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+81j
.text$mn:00002EB9                 jmp     short loc_2EEB
.text$mn:00002EB9 ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$mn:00002EB9
.text$mn:00002EBB
.text$mn:00002EBB ; =============== S U B R O U T I N E =======================================
.text$mn:00002EBB
.text$mn:00002EBB ; Attributes: noreturn
.text$mn:00002EBB
.text$mn:00002EBB __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
.text$mn:00002EBB                                         ; DATA XREF: .xdata$x:0000A20Co
.text$mn:00002EBB                 jmp     short loc_2EC6
.text$mn:00002EBD ; ---------------------------------------------------------------------------
.text$mn:00002EBD
.text$mn:00002EBD loc_2EBD:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Fj
.text$mn:00002EBD                 mov     eax, [ebp-14h]
.text$mn:00002EC0                 add     eax, 1Ch
.text$mn:00002EC3                 mov     [ebp-14h], eax
.text$mn:00002EC6
.text$mn:00002EC6 loc_2EC6:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0j
.text$mn:00002EC6                 mov     ecx, [ebp-14h]
.text$mn:00002EC9                 cmp     ecx, [ebp+10h]
.text$mn:00002ECC                 jz      short loc_2EDC
.text$mn:00002ECE                 mov     edx, [ebp-14h]
.text$mn:00002ED1                 push    edx
.text$mn:00002ED2                 mov     ecx, [ebp+14h]
.text$mn:00002ED5                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00002EDA                 jmp     short loc_2EBD
.text$mn:00002EDC ; ---------------------------------------------------------------------------
.text$mn:00002EDC
.text$mn:00002EDC loc_2EDC:                               ; CODE XREF: __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+11j
.text$mn:00002EDC                 push    0
.text$mn:00002EDE                 push    0
.text$mn:00002EE0                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00002EE0 __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0 endp
.text$mn:00002EE0
.text$mn:00002EE5 ; ---------------------------------------------------------------------------
.text$mn:00002EE5                 mov     eax, offset $LN13
.text$mn:00002EEA                 retn
.text$mn:00002EEB ; ---------------------------------------------------------------------------
.text$mn:00002EEB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002EEB
.text$mn:00002EEB loc_2EEB:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag):loc_2EB9j
.text$mn:00002EEB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00002EF2                 jmp     short loc_2EFB
.text$mn:00002EF2 ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002EF4
.text$mn:00002EF4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002EF4
.text$mn:00002EF4
.text$mn:00002EF4 $LN13           proc near               ; DATA XREF: .text$mn:00002EE5o
.text$mn:00002EF4                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00002EF4 $LN13           endp ; sp-analysis failed
.text$mn:00002EF4
.text$mn:00002EFB ; START OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002EFB
.text$mn:00002EFB loc_2EFB:                               ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+CEj
.text$mn:00002EFB                 mov     eax, [ebp+arg_8]
.text$mn:00002EFE                 mov     ecx, [ebp+var_C]
.text$mn:00002F01                 mov     large fs:0, ecx
.text$mn:00002F08                 pop     ecx
.text$mn:00002F09                 pop     edi
.text$mn:00002F0A                 pop     esi
.text$mn:00002F0B                 pop     ebx
.text$mn:00002F0C                 mov     esp, ebp
.text$mn:00002F0E                 pop     ebp
.text$mn:00002F0F                 retn
.text$mn:00002F0F ; END OF FUNCTION CHUNK FOR ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$mn:00002F0F _text$mn        ends
.text$mn:00002F0F
.text$x:00002F10 ; ===========================================================================
.text$x:00002F10
.text$x:00002F10 ; Segment type: Pure code
.text$x:00002F10 ; Segment permissions: Read/Execute
.text$x:00002F10 _text$x         segment para public 'CODE' use32
.text$x:00002F10                 assume cs:_text$x
.text$x:00002F10                 ;org 2F10h
.text$x:00002F10 ; COMDAT (pick associative to section at 2E24)
.text$x:00002F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00002F10
.text$x:00002F10 ; =============== S U B R O U T I N E =======================================
.text$x:00002F10
.text$x:00002F10
.text$x:00002F10 __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z proc near
.text$x:00002F10                                         ; DATA XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+5o
.text$x:00002F10
.text$x:00002F10 arg_4           = dword ptr  8
.text$x:00002F10
.text$x:00002F10                 mov     edx, [esp+arg_4]
.text$x:00002F14                 lea     eax, [edx+0Ch]
.text$x:00002F17                 mov     ecx, [edx-18h]
.text$x:00002F1A                 xor     ecx, eax
.text$x:00002F1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00002F21                 mov     eax, offset __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.text$x:00002F26                 jmp     ___CxxFrameHandler3
.text$x:00002F26 __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z endp
.text$x:00002F26
.text$x:00002F26 ; ---------------------------------------------------------------------------
.text$x:00002F2B                 align 4
.text$x:00002F2B _text$x         ends
.text$x:00002F2B
.text$mn:00002F2C ; ===========================================================================
.text$mn:00002F2C
.text$mn:00002F2C ; Segment type: Pure code
.text$mn:00002F2C ; Segment permissions: Read/Execute
.text$mn:00002F2C _text$mn        segment para public 'CODE' use32
.text$mn:00002F2C                 assume cs:_text$mn
.text$mn:00002F2C                 ;org 2F2Ch
.text$mn:00002F2C ; COMDAT (pick any)
.text$mn:00002F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002F2C
.text$mn:00002F2C ; =============== S U B R O U T I N E =======================================
.text$mn:00002F2C
.text$mn:00002F2C ; Attributes: bp-based frame
.text$mn:00002F2C
.text$mn:00002F2C ; struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * __cdecl std::_Uninitialized_move<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_tra
.text$mn:00002F2C                 public ??$_Uninitialized_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z
.text$mn:00002F2C ??$_Uninitialized_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z proc near
.text$mn:00002F2C                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Umove<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wc
.text$mn:00002F2C
.text$mn:00002F2C arg_0           = dword ptr  8
.text$mn:00002F2C arg_4           = dword ptr  0Ch
.text$mn:00002F2C arg_8           = dword ptr  10h
.text$mn:00002F2C arg_C           = dword ptr  14h
.text$mn:00002F2C
.text$mn:00002F2C                 push    ebp
.text$mn:00002F2D                 mov     ebp, esp
.text$mn:00002F2F                 mov     eax, [ebp+arg_C]
.text$mn:00002F32                 push    eax             ; int
.text$mn:00002F33                 mov     ecx, [ebp+arg_8]
.text$mn:00002F36                 push    ecx
.text$mn:00002F37                 call    ??$_Unchecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z ; std::_Unchecked<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002F3C                 add     esp, 4
.text$mn:00002F3F                 push    eax             ; void *
.text$mn:00002F40                 mov     edx, [ebp+arg_4]
.text$mn:00002F43                 push    edx
.text$mn:00002F44                 call    ??$_Unchecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z ; std::_Unchecked<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002F49                 add     esp, 4
.text$mn:00002F4C                 push    eax             ; int
.text$mn:00002F4D                 mov     eax, [ebp+arg_0]
.text$mn:00002F50                 push    eax
.text$mn:00002F51                 call    ??$_Unchecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z ; std::_Unchecked<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002F56                 add     esp, 4
.text$mn:00002F59                 push    eax             ; int
.text$mn:00002F5A                 call    ??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z ; std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &)
.text$mn:00002F5F                 add     esp, 10h
.text$mn:00002F62                 push    eax
.text$mn:00002F63                 lea     ecx, [ebp+arg_8]
.text$mn:00002F66                 push    ecx
.text$mn:00002F67                 call    ??$_Rechecked@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@@std@@YAAAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAPAU10@PAU10@@Z ; std::_Rechecked<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> * &,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00002F6C                 add     esp, 8
.text$mn:00002F6F                 mov     eax, [eax]
.text$mn:00002F71                 pop     ebp
.text$mn:00002F72                 retn
.text$mn:00002F72 ??$_Uninitialized_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z endp
.text$mn:00002F72
.text$mn:00002F72 ; ---------------------------------------------------------------------------
.text$mn:00002F73                 align 4
.text$mn:00002F73 _text$mn        ends
.text$mn:00002F73
.text$mn:00002F74 ; ===========================================================================
.text$mn:00002F74
.text$mn:00002F74 ; Segment type: Pure code
.text$mn:00002F74 ; Segment permissions: Read/Execute
.text$mn:00002F74 _text$mn        segment para public 'CODE' use32
.text$mn:00002F74                 assume cs:_text$mn
.text$mn:00002F74                 ;org 2F74h
.text$mn:00002F74 ; COMDAT (pick any)
.text$mn:00002F74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002F74
.text$mn:00002F74 ; =============== S U B R O U T I N E =======================================
.text$mn:00002F74
.text$mn:00002F74 ; Attributes: bp-based frame
.text$mn:00002F74
.text$mn:00002F74 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Uninitialized_move<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &)
.text$mn:00002F74                 public ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z
.text$mn:00002F74 ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z proc near
.text$mn:00002F74                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+25p
.text$mn:00002F74
.text$mn:00002F74 arg_0           = dword ptr  8
.text$mn:00002F74 arg_4           = dword ptr  0Ch
.text$mn:00002F74 arg_8           = dword ptr  10h
.text$mn:00002F74 arg_C           = dword ptr  14h
.text$mn:00002F74
.text$mn:00002F74                 push    ebp
.text$mn:00002F75                 mov     ebp, esp
.text$mn:00002F77                 mov     eax, [ebp+arg_C]
.text$mn:00002F7A                 push    eax             ; int
.text$mn:00002F7B                 mov     ecx, [ebp+arg_8]
.text$mn:00002F7E                 push    ecx
.text$mn:00002F7F                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00002F84                 add     esp, 4
.text$mn:00002F87                 push    eax             ; void *
.text$mn:00002F88                 mov     edx, [ebp+arg_4]
.text$mn:00002F8B                 push    edx
.text$mn:00002F8C                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00002F91                 add     esp, 4
.text$mn:00002F94                 push    eax             ; int
.text$mn:00002F95                 mov     eax, [ebp+arg_0]
.text$mn:00002F98                 push    eax
.text$mn:00002F99                 call    ??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z ; std::_Unchecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00002F9E                 add     esp, 4
.text$mn:00002FA1                 push    eax             ; int
.text$mn:00002FA2                 call    ??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:00002FA7                 add     esp, 10h
.text$mn:00002FAA                 push    eax
.text$mn:00002FAB                 lea     ecx, [ebp+arg_8]
.text$mn:00002FAE                 push    ecx
.text$mn:00002FAF                 call    ??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> * &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00002FB4                 add     esp, 8
.text$mn:00002FB7                 mov     eax, [eax]
.text$mn:00002FB9                 pop     ebp
.text$mn:00002FBA                 retn
.text$mn:00002FBA ??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z endp
.text$mn:00002FBA
.text$mn:00002FBA ; ---------------------------------------------------------------------------
.text$mn:00002FBB                 align 4
.text$mn:00002FBB _text$mn        ends
.text$mn:00002FBB
.text$mn:00002FBC ; ===========================================================================
.text$mn:00002FBC
.text$mn:00002FBC ; Segment type: Pure code
.text$mn:00002FBC ; Segment permissions: Read/Execute
.text$mn:00002FBC _text$mn        segment para public 'CODE' use32
.text$mn:00002FBC                 assume cs:_text$mn
.text$mn:00002FBC                 ;org 2FBCh
.text$mn:00002FBC ; COMDAT (pick any)
.text$mn:00002FBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002FBC
.text$mn:00002FBC ; =============== S U B R O U T I N E =======================================
.text$mn:00002FBC
.text$mn:00002FBC ; Attributes: bp-based frame
.text$mn:00002FBC
.text$mn:00002FBC ; struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * __cdecl std::_Val_type<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)
.text$mn:00002FBC                 public ??$_Val_type@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z
.text$mn:00002FBC ??$_Val_type@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z proc near
.text$mn:00002FBC                                         ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,st
.text$mn:00002FBC                 push    ebp
.text$mn:00002FBD                 mov     ebp, esp
.text$mn:00002FBF                 xor     eax, eax
.text$mn:00002FC1                 pop     ebp
.text$mn:00002FC2                 retn
.text$mn:00002FC2 ??$_Val_type@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@@Z endp
.text$mn:00002FC2
.text$mn:00002FC2 ; ---------------------------------------------------------------------------
.text$mn:00002FC3                 align 4
.text$mn:00002FC3 _text$mn        ends
.text$mn:00002FC3
.text$mn:00002FC4 ; ===========================================================================
.text$mn:00002FC4
.text$mn:00002FC4 ; Segment type: Pure code
.text$mn:00002FC4 ; Segment permissions: Read/Execute
.text$mn:00002FC4 _text$mn        segment para public 'CODE' use32
.text$mn:00002FC4                 assume cs:_text$mn
.text$mn:00002FC4                 ;org 2FC4h
.text$mn:00002FC4 ; COMDAT (pick any)
.text$mn:00002FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002FC4
.text$mn:00002FC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002FC4
.text$mn:00002FC4 ; Attributes: bp-based frame
.text$mn:00002FC4
.text$mn:00002FC4 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::_Val_type<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00002FC4                 public ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z
.text$mn:00002FC4 ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z proc near
.text$mn:00002FC4                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)+20p
.text$mn:00002FC4                 push    ebp
.text$mn:00002FC5                 mov     ebp, esp
.text$mn:00002FC7                 xor     eax, eax
.text$mn:00002FC9                 pop     ebp
.text$mn:00002FCA                 retn
.text$mn:00002FCA ??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z endp
.text$mn:00002FCA
.text$mn:00002FCA ; ---------------------------------------------------------------------------
.text$mn:00002FCB                 align 4
.text$mn:00002FCB _text$mn        ends
.text$mn:00002FCB
.text$mn:00002FCC ; ===========================================================================
.text$mn:00002FCC
.text$mn:00002FCC ; Segment type: Pure code
.text$mn:00002FCC ; Segment permissions: Read/Execute
.text$mn:00002FCC _text$mn        segment para public 'CODE' use32
.text$mn:00002FCC                 assume cs:_text$mn
.text$mn:00002FCC                 ;org 2FCCh
.text$mn:00002FCC ; COMDAT (pick any)
.text$mn:00002FCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002FCC
.text$mn:00002FCC ; =============== S U B R O U T I N E =======================================
.text$mn:00002FCC
.text$mn:00002FCC ; Attributes: bp-based frame
.text$mn:00002FCC
.text$mn:00002FCC ; char * __cdecl std::addressof<char>(char &)
.text$mn:00002FCC                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:00002FCC ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:00002FCC                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:00002FCC                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:00002FCC
.text$mn:00002FCC arg_0           = dword ptr  8
.text$mn:00002FCC
.text$mn:00002FCC                 push    ebp
.text$mn:00002FCD                 mov     ebp, esp
.text$mn:00002FCF                 mov     eax, [ebp+arg_0]
.text$mn:00002FD2                 pop     ebp
.text$mn:00002FD3                 retn
.text$mn:00002FD3 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:00002FD3
.text$mn:00002FD3 _text$mn        ends
.text$mn:00002FD3
.text$mn:00002FD4 ; ===========================================================================
.text$mn:00002FD4
.text$mn:00002FD4 ; Segment type: Pure code
.text$mn:00002FD4 ; Segment permissions: Read/Execute
.text$mn:00002FD4 _text$mn        segment para public 'CODE' use32
.text$mn:00002FD4                 assume cs:_text$mn
.text$mn:00002FD4                 ;org 2FD4h
.text$mn:00002FD4 ; COMDAT (pick any)
.text$mn:00002FD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002FD4
.text$mn:00002FD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002FD4
.text$mn:00002FD4 ; Attributes: bp-based frame
.text$mn:00002FD4
.text$mn:00002FD4 ; struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * __cdecl std::addressof<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &)
.text$mn:00002FD4                 public ??$addressof@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z
.text$mn:00002FD4 ??$addressof@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z proc near
.text$mn:00002FD4                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+Dp
.text$mn:00002FD4                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+2Dp
.text$mn:00002FD4
.text$mn:00002FD4 arg_0           = dword ptr  8
.text$mn:00002FD4
.text$mn:00002FD4                 push    ebp
.text$mn:00002FD5                 mov     ebp, esp
.text$mn:00002FD7                 mov     eax, [ebp+arg_0]
.text$mn:00002FDA                 pop     ebp
.text$mn:00002FDB                 retn
.text$mn:00002FDB ??$addressof@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z endp
.text$mn:00002FDB
.text$mn:00002FDB _text$mn        ends
.text$mn:00002FDB
.text$mn:00002FDC ; ===========================================================================
.text$mn:00002FDC
.text$mn:00002FDC ; Segment type: Pure code
.text$mn:00002FDC ; Segment permissions: Read/Execute
.text$mn:00002FDC _text$mn        segment para public 'CODE' use32
.text$mn:00002FDC                 assume cs:_text$mn
.text$mn:00002FDC                 ;org 2FDCh
.text$mn:00002FDC ; COMDAT (pick any)
.text$mn:00002FDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002FDC
.text$mn:00002FDC ; =============== S U B R O U T I N E =======================================
.text$mn:00002FDC
.text$mn:00002FDC ; Attributes: bp-based frame
.text$mn:00002FDC
.text$mn:00002FDC ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __cdecl std::addressof<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00002FDC                 public ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00002FDC ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00002FDC                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+Dp
.text$mn:00002FDC                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Dp
.text$mn:00002FDC
.text$mn:00002FDC arg_0           = dword ptr  8
.text$mn:00002FDC
.text$mn:00002FDC                 push    ebp
.text$mn:00002FDD                 mov     ebp, esp
.text$mn:00002FDF                 mov     eax, [ebp+arg_0]
.text$mn:00002FE2                 pop     ebp
.text$mn:00002FE3                 retn
.text$mn:00002FE3 ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00002FE3
.text$mn:00002FE3 _text$mn        ends
.text$mn:00002FE3
.text$mn:00002FE4 ; ===========================================================================
.text$mn:00002FE4
.text$mn:00002FE4 ; Segment type: Pure code
.text$mn:00002FE4 ; Segment permissions: Read/Execute
.text$mn:00002FE4 _text$mn        segment para public 'CODE' use32
.text$mn:00002FE4                 assume cs:_text$mn
.text$mn:00002FE4                 ;org 2FE4h
.text$mn:00002FE4 ; COMDAT (pick any)
.text$mn:00002FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002FE4
.text$mn:00002FE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00002FE4
.text$mn:00002FE4 ; Attributes: bp-based frame
.text$mn:00002FE4
.text$mn:00002FE4 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:00002FE4                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:00002FE4 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:00002FE4                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:00002FE4                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:00002FE4
.text$mn:00002FE4 arg_0           = dword ptr  8
.text$mn:00002FE4
.text$mn:00002FE4                 push    ebp
.text$mn:00002FE5                 mov     ebp, esp
.text$mn:00002FE7                 mov     eax, [ebp+arg_0]
.text$mn:00002FEA                 pop     ebp
.text$mn:00002FEB                 retn
.text$mn:00002FEB ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:00002FEB
.text$mn:00002FEB _text$mn        ends
.text$mn:00002FEB
.text$mn:00002FEC ; ===========================================================================
.text$mn:00002FEC
.text$mn:00002FEC ; Segment type: Pure code
.text$mn:00002FEC ; Segment permissions: Read/Execute
.text$mn:00002FEC _text$mn        segment para public 'CODE' use32
.text$mn:00002FEC                 assume cs:_text$mn
.text$mn:00002FEC                 ;org 2FECh
.text$mn:00002FEC ; COMDAT (pick any)
.text$mn:00002FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002FEC
.text$mn:00002FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00002FEC
.text$mn:00002FEC ; Attributes: bp-based frame
.text$mn:00002FEC
.text$mn:00002FEC ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>)
.text$mn:00002FEC                 public ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
.text$mn:00002FEC ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z proc near
.text$mn:00002FEC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+CBp
.text$mn:00002FEC
.text$mn:00002FEC var_70          = byte ptr -70h
.text$mn:00002FEC var_64          = byte ptr -64h
.text$mn:00002FEC var_58          = dword ptr -58h
.text$mn:00002FEC var_54          = dword ptr -54h
.text$mn:00002FEC var_50          = dword ptr -50h
.text$mn:00002FEC var_4C          = dword ptr -4Ch
.text$mn:00002FEC var_48          = dword ptr -48h
.text$mn:00002FEC var_44          = dword ptr -44h
.text$mn:00002FEC var_40          = dword ptr -40h
.text$mn:00002FEC var_3C          = dword ptr -3Ch
.text$mn:00002FEC var_38          = dword ptr -38h
.text$mn:00002FEC var_34          = dword ptr -34h
.text$mn:00002FEC var_30          = dword ptr -30h
.text$mn:00002FEC var_2C          = dword ptr -2Ch
.text$mn:00002FEC var_28          = dword ptr -28h
.text$mn:00002FEC var_24          = dword ptr -24h
.text$mn:00002FEC var_20          = dword ptr -20h
.text$mn:00002FEC var_1C          = dword ptr -1Ch
.text$mn:00002FEC var_18          = dword ptr -18h
.text$mn:00002FEC var_14          = dword ptr -14h
.text$mn:00002FEC var_10          = dword ptr -10h
.text$mn:00002FEC var_C           = dword ptr -0Ch
.text$mn:00002FEC var_4           = dword ptr -4
.text$mn:00002FEC arg_0           = byte ptr  8
.text$mn:00002FEC arg_C           = byte ptr  14h
.text$mn:00002FEC
.text$mn:00002FEC                 push    ebp
.text$mn:00002FED                 mov     ebp, esp
.text$mn:00002FEF                 push    0FFFFFFFFh
.text$mn:00002FF1                 push    offset __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
.text$mn:00002FF6                 mov     eax, large fs:0
.text$mn:00002FFC                 push    eax
.text$mn:00002FFD                 sub     esp, 64h
.text$mn:00003000                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003005                 xor     eax, ebp
.text$mn:00003007                 push    eax
.text$mn:00003008                 lea     eax, [ebp+var_C]
.text$mn:0000300B                 mov     large fs:0, eax
.text$mn:00003011                 mov     [ebp+var_10], ecx
.text$mn:00003014                 mov     [ebp+var_4], 1
.text$mn:0000301B                 sub     esp, 0Ch
.text$mn:0000301E                 mov     ecx, esp
.text$mn:00003020                 mov     [ebp+var_3C], esp
.text$mn:00003023                 lea     eax, [ebp+arg_C]
.text$mn:00003026                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00003027                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:0000302C                 mov     [ebp+var_14], eax
.text$mn:0000302F                 mov     ecx, [ebp+var_14]
.text$mn:00003032                 mov     [ebp+var_40], ecx
.text$mn:00003035                 mov     byte ptr [ebp+var_4], 2
.text$mn:00003039                 sub     esp, 0Ch
.text$mn:0000303C                 mov     ecx, esp
.text$mn:0000303E                 mov     [ebp+var_44], esp
.text$mn:00003041                 lea     edx, [ebp+arg_0]
.text$mn:00003044                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00003045                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:0000304A                 mov     [ebp+var_18], eax
.text$mn:0000304D                 mov     eax, [ebp+var_18]
.text$mn:00003050                 mov     [ebp+var_48], eax
.text$mn:00003053                 mov     byte ptr [ebp+var_4], 3
.text$mn:00003057                 lea     ecx, [ebp+var_70]
.text$mn:0000305A                 push    ecx
.text$mn:0000305B                 mov     ecx, [ebp+var_10]
.text$mn:0000305E                 call    ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::end(void)
.text$mn:00003063                 mov     [ebp+var_1C], eax
.text$mn:00003066                 mov     edx, [ebp+var_1C]
.text$mn:00003069                 mov     [ebp+var_20], edx
.text$mn:0000306C                 mov     byte ptr [ebp+var_4], 4
.text$mn:00003070                 sub     esp, 0Ch
.text$mn:00003073                 mov     ecx, esp
.text$mn:00003075                 mov     [ebp+var_4C], esp
.text$mn:00003078                 mov     eax, [ebp+var_20]
.text$mn:0000307B                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000307C                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00003081                 mov     [ebp+var_24], eax
.text$mn:00003084                 mov     ecx, [ebp+var_24]
.text$mn:00003087                 mov     [ebp+var_50], ecx
.text$mn:0000308A                 mov     byte ptr [ebp+var_4], 5
.text$mn:0000308E                 lea     edx, [ebp+var_64]
.text$mn:00003091                 push    edx
.text$mn:00003092                 mov     ecx, [ebp+var_10]
.text$mn:00003095                 call    ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin(void)
.text$mn:0000309A                 mov     [ebp+var_28], eax
.text$mn:0000309D                 mov     eax, [ebp+var_28]
.text$mn:000030A0                 mov     [ebp+var_2C], eax
.text$mn:000030A3                 mov     byte ptr [ebp+var_4], 6
.text$mn:000030A7                 sub     esp, 0Ch
.text$mn:000030AA                 mov     ecx, esp
.text$mn:000030AC                 mov     [ebp+var_54], esp
.text$mn:000030AF                 mov     edx, [ebp+var_2C]
.text$mn:000030B2                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000030B3                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:000030B8                 mov     [ebp+var_30], eax
.text$mn:000030BB                 mov     eax, [ebp+var_30]
.text$mn:000030BE                 mov     [ebp+var_58], eax
.text$mn:000030C1                 mov     byte ptr [ebp+var_4], 7
.text$mn:000030C5                 mov     byte ptr [ebp+var_4], 9
.text$mn:000030C9                 mov     ecx, [ebp+var_10]
.text$mn:000030CC                 call    ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)
.text$mn:000030D1                 mov     [ebp+var_34], eax
.text$mn:000030D4                 mov     ecx, [ebp+var_34]
.text$mn:000030D7                 mov     [ebp+var_38], ecx
.text$mn:000030DA                 mov     byte ptr [ebp+var_4], 8
.text$mn:000030DE                 lea     ecx, [ebp+var_64]
.text$mn:000030E1                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:000030E6                 mov     byte ptr [ebp+var_4], 1
.text$mn:000030EA                 lea     ecx, [ebp+var_70]
.text$mn:000030ED                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:000030F2                 mov     byte ptr [ebp+var_4], 0
.text$mn:000030F6                 lea     ecx, [ebp+arg_0]
.text$mn:000030F9                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:000030FE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003105                 lea     ecx, [ebp+arg_C]
.text$mn:00003108                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:0000310D                 mov     eax, [ebp+var_38]
.text$mn:00003110                 mov     ecx, [ebp+var_C]
.text$mn:00003113                 mov     large fs:0, ecx
.text$mn:0000311A                 pop     ecx
.text$mn:0000311B                 mov     esp, ebp
.text$mn:0000311D                 pop     ebp
.text$mn:0000311E                 retn    18h
.text$mn:0000311E ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z endp
.text$mn:0000311E
.text$mn:0000311E ; ---------------------------------------------------------------------------
.text$mn:00003121                 align 4
.text$mn:00003121 _text$mn        ends
.text$mn:00003121
.text$x:00003124 ; ===========================================================================
.text$x:00003124
.text$x:00003124 ; Segment type: Pure code
.text$x:00003124 ; Segment permissions: Read/Execute
.text$x:00003124 _text$x         segment para public 'CODE' use32
.text$x:00003124                 assume cs:_text$x
.text$x:00003124                 ;org 3124h
.text$x:00003124 ; COMDAT (pick associative to section at 2FEC)
.text$x:00003124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003124
.text$x:00003124 ; =============== S U B R O U T I N E =======================================
.text$x:00003124
.text$x:00003124
.text$x:00003124 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$0 proc near
.text$x:00003124                                         ; DATA XREF: .xdata$x:00009F60o
.text$x:00003124                 lea     ecx, [ebp+14h]
.text$x:00003127                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00003127 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$0 endp
.text$x:00003127
.text$x:0000312C
.text$x:0000312C ; =============== S U B R O U T I N E =======================================
.text$x:0000312C
.text$x:0000312C
.text$x:0000312C __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$1 proc near
.text$x:0000312C                                         ; DATA XREF: .xdata$x:00009F68o
.text$x:0000312C                 lea     ecx, [ebp+8]
.text$x:0000312F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:0000312F __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$1 endp
.text$x:0000312F
.text$x:00003134
.text$x:00003134 ; =============== S U B R O U T I N E =======================================
.text$x:00003134
.text$x:00003134
.text$x:00003134 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$2 proc near
.text$x:00003134                                         ; DATA XREF: .xdata$x:00009F70o
.text$x:00003134                 mov     ecx, [ebp-3Ch]
.text$x:00003137                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00003137 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$2 endp
.text$x:00003137
.text$x:0000313C
.text$x:0000313C ; =============== S U B R O U T I N E =======================================
.text$x:0000313C
.text$x:0000313C
.text$x:0000313C __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$3 proc near
.text$x:0000313C                                         ; DATA XREF: .xdata$x:00009F78o
.text$x:0000313C                 mov     ecx, [ebp-44h]
.text$x:0000313F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:0000313F __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$3 endp
.text$x:0000313F
.text$x:00003144
.text$x:00003144 ; =============== S U B R O U T I N E =======================================
.text$x:00003144
.text$x:00003144
.text$x:00003144 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$4 proc near
.text$x:00003144                                         ; DATA XREF: .xdata$x:00009F80o
.text$x:00003144                                         ; .xdata$x:00009FA0o
.text$x:00003144                 lea     ecx, [ebp-70h]
.text$x:00003147                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00003147 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$4 endp
.text$x:00003147
.text$x:0000314C
.text$x:0000314C ; =============== S U B R O U T I N E =======================================
.text$x:0000314C
.text$x:0000314C
.text$x:0000314C __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$5 proc near
.text$x:0000314C                                         ; DATA XREF: .xdata$x:00009F88o
.text$x:0000314C                 mov     ecx, [ebp-4Ch]
.text$x:0000314F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:0000314F __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$5 endp
.text$x:0000314F
.text$x:00003154
.text$x:00003154 ; =============== S U B R O U T I N E =======================================
.text$x:00003154
.text$x:00003154
.text$x:00003154 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$6 proc near
.text$x:00003154                                         ; DATA XREF: .xdata$x:00009F90o
.text$x:00003154                                         ; .xdata$x:00009FA8o
.text$x:00003154                 lea     ecx, [ebp-64h]
.text$x:00003157                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00003157 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$6 endp
.text$x:00003157
.text$x:0000315C
.text$x:0000315C ; =============== S U B R O U T I N E =======================================
.text$x:0000315C
.text$x:0000315C
.text$x:0000315C __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$7 proc near
.text$x:0000315C                                         ; DATA XREF: .xdata$x:00009F98o
.text$x:0000315C                 mov     ecx, [ebp-54h]
.text$x:0000315F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:0000315F __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$7 endp
.text$x:0000315F
.text$x:00003164
.text$x:00003164 ; =============== S U B R O U T I N E =======================================
.text$x:00003164
.text$x:00003164
.text$x:00003164 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z proc near
.text$x:00003164                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+5o
.text$x:00003164
.text$x:00003164 arg_4           = dword ptr  8
.text$x:00003164
.text$x:00003164                 mov     edx, [esp+arg_4]
.text$x:00003168                 lea     eax, [edx+0Ch]
.text$x:0000316B                 mov     ecx, [edx-68h]
.text$x:0000316E                 xor     ecx, eax
.text$x:00003170                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003175                 mov     eax, offset __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
.text$x:0000317A                 jmp     ___CxxFrameHandler3
.text$x:0000317A __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z endp
.text$x:0000317A
.text$x:0000317A ; ---------------------------------------------------------------------------
.text$x:0000317F                 align 10h
.text$x:0000317F _text$x         ends
.text$x:0000317F
.text$mn:00003180 ; ===========================================================================
.text$mn:00003180
.text$mn:00003180 ; Segment type: Pure code
.text$mn:00003180 ; Segment permissions: Read/Execute
.text$mn:00003180 _text$mn        segment para public 'CODE' use32
.text$mn:00003180                 assume cs:_text$mn
.text$mn:00003180                 ;org 3180h
.text$mn:00003180 ; COMDAT (pick any)
.text$mn:00003180                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003180
.text$mn:00003180 ; =============== S U B R O U T I N E =======================================
.text$mn:00003180
.text$mn:00003180 ; Attributes: bp-based frame
.text$mn:00003180
.text$mn:00003180 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00003180                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00003180 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00003180                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+50p
.text$mn:00003180                                         ; $LN19+4Bp
.text$mn:00003180
.text$mn:00003180 var_4           = dword ptr -4
.text$mn:00003180 arg_0           = dword ptr  8
.text$mn:00003180 arg_4           = dword ptr  0Ch
.text$mn:00003180
.text$mn:00003180                 push    ebp
.text$mn:00003181                 mov     ebp, esp
.text$mn:00003183                 push    ecx
.text$mn:00003184                 mov     [ebp+var_4], ecx
.text$mn:00003187                 mov     eax, [ebp+arg_4]
.text$mn:0000318A                 push    eax
.text$mn:0000318B                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00003190                 add     esp, 4
.text$mn:00003193                 push    eax             ; int
.text$mn:00003194                 mov     ecx, [ebp+arg_0]
.text$mn:00003197                 push    ecx             ; void *
.text$mn:00003198                 mov     edx, [ebp+var_4]
.text$mn:0000319B                 push    edx             ; int
.text$mn:0000319C                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:000031A1                 add     esp, 0Ch
.text$mn:000031A4                 mov     esp, ebp
.text$mn:000031A6                 pop     ebp
.text$mn:000031A7                 retn    8
.text$mn:000031A7 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:000031A7
.text$mn:000031A7 ; ---------------------------------------------------------------------------
.text$mn:000031AA                 align 4
.text$mn:000031AA _text$mn        ends
.text$mn:000031AA
.text$mn:000031AC ; ===========================================================================
.text$mn:000031AC
.text$mn:000031AC ; Segment type: Pure code
.text$mn:000031AC ; Segment permissions: Read/Execute
.text$mn:000031AC _text$mn        segment para public 'CODE' use32
.text$mn:000031AC                 assume cs:_text$mn
.text$mn:000031AC                 ;org 31ACh
.text$mn:000031AC ; COMDAT (pick any)
.text$mn:000031AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000031AC
.text$mn:000031AC ; =============== S U B R O U T I N E =======================================
.text$mn:000031AC
.text$mn:000031AC ; Attributes: bp-based frame
.text$mn:000031AC
.text$mn:000031AC ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:000031AC                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:000031AC ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:000031AC                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:000031AC
.text$mn:000031AC var_1C          = dword ptr -1Ch
.text$mn:000031AC var_18          = dword ptr -18h
.text$mn:000031AC var_14          = dword ptr -14h
.text$mn:000031AC var_10          = dword ptr -10h
.text$mn:000031AC var_C           = dword ptr -0Ch
.text$mn:000031AC var_4           = dword ptr -4
.text$mn:000031AC arg_0           = dword ptr  8
.text$mn:000031AC arg_4           = dword ptr  0Ch
.text$mn:000031AC
.text$mn:000031AC                 push    ebp
.text$mn:000031AD                 mov     ebp, esp
.text$mn:000031AF                 push    0FFFFFFFFh
.text$mn:000031B1                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:000031B6                 mov     eax, large fs:0
.text$mn:000031BC                 push    eax
.text$mn:000031BD                 sub     esp, 10h
.text$mn:000031C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000031C5                 xor     eax, ebp
.text$mn:000031C7                 push    eax
.text$mn:000031C8                 lea     eax, [ebp+var_C]
.text$mn:000031CB                 mov     large fs:0, eax
.text$mn:000031D1                 mov     [ebp+var_18], ecx
.text$mn:000031D4                 mov     eax, [ebp+arg_0]
.text$mn:000031D7                 push    eax             ; void *
.text$mn:000031D8                 push    4               ; unsigned int
.text$mn:000031DA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000031DF                 add     esp, 8
.text$mn:000031E2                 mov     [ebp+var_10], eax
.text$mn:000031E5                 mov     [ebp+var_4], 0
.text$mn:000031EC                 cmp     [ebp+var_10], 0
.text$mn:000031F0                 jz      short loc_320D
.text$mn:000031F2                 mov     ecx, [ebp+arg_4]
.text$mn:000031F5                 push    ecx
.text$mn:000031F6                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:000031FB                 add     esp, 4
.text$mn:000031FE                 mov     edx, [ebp+var_10]
.text$mn:00003201                 mov     eax, [eax]
.text$mn:00003203                 mov     [edx], eax
.text$mn:00003205                 mov     ecx, [ebp+var_10]
.text$mn:00003208                 mov     [ebp+var_14], ecx
.text$mn:0000320B                 jmp     short loc_3214
.text$mn:0000320D ; ---------------------------------------------------------------------------
.text$mn:0000320D
.text$mn:0000320D loc_320D:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:0000320D                 mov     [ebp+var_14], 0
.text$mn:00003214
.text$mn:00003214 loc_3214:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:00003214                 mov     edx, [ebp+var_14]
.text$mn:00003217                 mov     [ebp+var_1C], edx
.text$mn:0000321A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003221                 mov     ecx, [ebp+var_C]
.text$mn:00003224                 mov     large fs:0, ecx
.text$mn:0000322B                 pop     ecx
.text$mn:0000322C                 mov     esp, ebp
.text$mn:0000322E                 pop     ebp
.text$mn:0000322F                 retn    8
.text$mn:0000322F ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:0000322F
.text$mn:0000322F ; ---------------------------------------------------------------------------
.text$mn:00003232                 align 4
.text$mn:00003232 _text$mn        ends
.text$mn:00003232
.text$x:00003234 ; ===========================================================================
.text$x:00003234
.text$x:00003234 ; Segment type: Pure code
.text$x:00003234 ; Segment permissions: Read/Execute
.text$x:00003234 _text$x         segment para public 'CODE' use32
.text$x:00003234                 assume cs:_text$x
.text$x:00003234                 ;org 3234h
.text$x:00003234 ; COMDAT (pick associative to section at 31AC)
.text$x:00003234                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003234
.text$x:00003234 ; =============== S U B R O U T I N E =======================================
.text$x:00003234
.text$x:00003234
.text$x:00003234 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00003234                                         ; DATA XREF: .xdata$x:0000A144o
.text$x:00003234                 mov     eax, [ebp+8]
.text$x:00003237                 push    eax
.text$x:00003238                 mov     eax, [ebp-10h]
.text$x:0000323B                 push    eax             ; void *
.text$x:0000323C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003241                 add     esp, 8
.text$x:00003244                 retn
.text$x:00003244 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00003244
.text$x:00003245
.text$x:00003245 ; =============== S U B R O U T I N E =======================================
.text$x:00003245
.text$x:00003245
.text$x:00003245 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00003245                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00003245
.text$x:00003245 arg_4           = dword ptr  8
.text$x:00003245
.text$x:00003245                 mov     edx, [esp+arg_4]
.text$x:00003249                 lea     eax, [edx+0Ch]
.text$x:0000324C                 mov     ecx, [edx-14h]
.text$x:0000324F                 xor     ecx, eax
.text$x:00003251                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003256                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:0000325B                 jmp     ___CxxFrameHandler3
.text$x:0000325B __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:0000325B
.text$x:0000325B _text$x         ends
.text$x:0000325B
.text$mn:00003260 ; ===========================================================================
.text$mn:00003260
.text$mn:00003260 ; Segment type: Pure code
.text$mn:00003260 ; Segment permissions: Read/Execute
.text$mn:00003260 _text$mn        segment para public 'CODE' use32
.text$mn:00003260                 assume cs:_text$mn
.text$mn:00003260                 ;org 3260h
.text$mn:00003260 ; COMDAT (pick any)
.text$mn:00003260                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003260
.text$mn:00003260 ; =============== S U B R O U T I N E =======================================
.text$mn:00003260
.text$mn:00003260 ; Attributes: bp-based frame
.text$mn:00003260
.text$mn:00003260 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00003260                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00003260 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00003260                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00003260
.text$mn:00003260 arg_0           = dword ptr  8
.text$mn:00003260 arg_4           = dword ptr  0Ch
.text$mn:00003260 arg_8           = dword ptr  10h
.text$mn:00003260
.text$mn:00003260                 push    ebp
.text$mn:00003261                 mov     ebp, esp
.text$mn:00003263                 mov     eax, [ebp+arg_8]
.text$mn:00003266                 push    eax
.text$mn:00003267                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:0000326C                 add     esp, 4
.text$mn:0000326F                 push    eax             ; int
.text$mn:00003270                 mov     ecx, [ebp+arg_4]
.text$mn:00003273                 push    ecx             ; void *
.text$mn:00003274                 mov     ecx, [ebp+arg_0]
.text$mn:00003277                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:0000327C                 pop     ebp
.text$mn:0000327D                 retn
.text$mn:0000327D ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:0000327D
.text$mn:0000327D ; ---------------------------------------------------------------------------
.text$mn:0000327E                 align 10h
.text$mn:0000327E _text$mn        ends
.text$mn:0000327E
.text$mn:00003280 ; ===========================================================================
.text$mn:00003280
.text$mn:00003280 ; Segment type: Pure code
.text$mn:00003280 ; Segment permissions: Read/Execute
.text$mn:00003280 _text$mn        segment para public 'CODE' use32
.text$mn:00003280                 assume cs:_text$mn
.text$mn:00003280                 ;org 3280h
.text$mn:00003280 ; COMDAT (pick any)
.text$mn:00003280                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003280
.text$mn:00003280 ; =============== S U B R O U T I N E =======================================
.text$mn:00003280
.text$mn:00003280 ; Attributes: bp-based frame
.text$mn:00003280
.text$mn:00003280 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00003280                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00003280 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00003280                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:00003280                                         ; $LN19_0+4Bp
.text$mn:00003280
.text$mn:00003280 var_4           = dword ptr -4
.text$mn:00003280 arg_0           = dword ptr  8
.text$mn:00003280 arg_4           = dword ptr  0Ch
.text$mn:00003280
.text$mn:00003280                 push    ebp
.text$mn:00003281                 mov     ebp, esp
.text$mn:00003283                 push    ecx
.text$mn:00003284                 mov     [ebp+var_4], ecx
.text$mn:00003287                 mov     eax, [ebp+arg_4]
.text$mn:0000328A                 push    eax
.text$mn:0000328B                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00003290                 add     esp, 4
.text$mn:00003293                 push    eax             ; int
.text$mn:00003294                 mov     ecx, [ebp+arg_0]
.text$mn:00003297                 push    ecx             ; void *
.text$mn:00003298                 mov     edx, [ebp+var_4]
.text$mn:0000329B                 push    edx             ; int
.text$mn:0000329C                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:000032A1                 add     esp, 0Ch
.text$mn:000032A4                 mov     esp, ebp
.text$mn:000032A6                 pop     ebp
.text$mn:000032A7                 retn    8
.text$mn:000032A7 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:000032A7
.text$mn:000032A7 ; ---------------------------------------------------------------------------
.text$mn:000032AA                 align 4
.text$mn:000032AA _text$mn        ends
.text$mn:000032AA
.text$mn:000032AC ; ===========================================================================
.text$mn:000032AC
.text$mn:000032AC ; Segment type: Pure code
.text$mn:000032AC ; Segment permissions: Read/Execute
.text$mn:000032AC _text$mn        segment para public 'CODE' use32
.text$mn:000032AC                 assume cs:_text$mn
.text$mn:000032AC                 ;org 32ACh
.text$mn:000032AC ; COMDAT (pick any)
.text$mn:000032AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000032AC
.text$mn:000032AC ; =============== S U B R O U T I N E =======================================
.text$mn:000032AC
.text$mn:000032AC ; Attributes: bp-based frame
.text$mn:000032AC
.text$mn:000032AC ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:000032AC                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:000032AC ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:000032AC                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:000032AC
.text$mn:000032AC var_1C          = dword ptr -1Ch
.text$mn:000032AC var_18          = dword ptr -18h
.text$mn:000032AC var_14          = dword ptr -14h
.text$mn:000032AC var_10          = dword ptr -10h
.text$mn:000032AC var_C           = dword ptr -0Ch
.text$mn:000032AC var_4           = dword ptr -4
.text$mn:000032AC arg_0           = dword ptr  8
.text$mn:000032AC arg_4           = dword ptr  0Ch
.text$mn:000032AC
.text$mn:000032AC                 push    ebp
.text$mn:000032AD                 mov     ebp, esp
.text$mn:000032AF                 push    0FFFFFFFFh
.text$mn:000032B1                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:000032B6                 mov     eax, large fs:0
.text$mn:000032BC                 push    eax
.text$mn:000032BD                 sub     esp, 10h
.text$mn:000032C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000032C5                 xor     eax, ebp
.text$mn:000032C7                 push    eax
.text$mn:000032C8                 lea     eax, [ebp+var_C]
.text$mn:000032CB                 mov     large fs:0, eax
.text$mn:000032D1                 mov     [ebp+var_18], ecx
.text$mn:000032D4                 mov     eax, [ebp+arg_0]
.text$mn:000032D7                 push    eax             ; void *
.text$mn:000032D8                 push    4               ; unsigned int
.text$mn:000032DA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000032DF                 add     esp, 8
.text$mn:000032E2                 mov     [ebp+var_10], eax
.text$mn:000032E5                 mov     [ebp+var_4], 0
.text$mn:000032EC                 cmp     [ebp+var_10], 0
.text$mn:000032F0                 jz      short loc_330D
.text$mn:000032F2                 mov     ecx, [ebp+arg_4]
.text$mn:000032F5                 push    ecx
.text$mn:000032F6                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000032FB                 add     esp, 4
.text$mn:000032FE                 mov     edx, [ebp+var_10]
.text$mn:00003301                 mov     eax, [eax]
.text$mn:00003303                 mov     [edx], eax
.text$mn:00003305                 mov     ecx, [ebp+var_10]
.text$mn:00003308                 mov     [ebp+var_14], ecx
.text$mn:0000330B                 jmp     short loc_3314
.text$mn:0000330D ; ---------------------------------------------------------------------------
.text$mn:0000330D
.text$mn:0000330D loc_330D:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:0000330D                 mov     [ebp+var_14], 0
.text$mn:00003314
.text$mn:00003314 loc_3314:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00003314                 mov     edx, [ebp+var_14]
.text$mn:00003317                 mov     [ebp+var_1C], edx
.text$mn:0000331A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003321                 mov     ecx, [ebp+var_C]
.text$mn:00003324                 mov     large fs:0, ecx
.text$mn:0000332B                 pop     ecx
.text$mn:0000332C                 mov     esp, ebp
.text$mn:0000332E                 pop     ebp
.text$mn:0000332F                 retn    8
.text$mn:0000332F ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:0000332F
.text$mn:0000332F ; ---------------------------------------------------------------------------
.text$mn:00003332                 align 4
.text$mn:00003332 _text$mn        ends
.text$mn:00003332
.text$x:00003334 ; ===========================================================================
.text$x:00003334
.text$x:00003334 ; Segment type: Pure code
.text$x:00003334 ; Segment permissions: Read/Execute
.text$x:00003334 _text$x         segment para public 'CODE' use32
.text$x:00003334                 assume cs:_text$x
.text$x:00003334                 ;org 3334h
.text$x:00003334 ; COMDAT (pick associative to section at 32AC)
.text$x:00003334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003334
.text$x:00003334 ; =============== S U B R O U T I N E =======================================
.text$x:00003334
.text$x:00003334
.text$x:00003334 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00003334                                         ; DATA XREF: .xdata$x:0000A170o
.text$x:00003334                 mov     eax, [ebp+8]
.text$x:00003337                 push    eax
.text$x:00003338                 mov     eax, [ebp-10h]
.text$x:0000333B                 push    eax             ; void *
.text$x:0000333C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003341                 add     esp, 8
.text$x:00003344                 retn
.text$x:00003344 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00003344
.text$x:00003345
.text$x:00003345 ; =============== S U B R O U T I N E =======================================
.text$x:00003345
.text$x:00003345
.text$x:00003345 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00003345                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00003345
.text$x:00003345 arg_4           = dword ptr  8
.text$x:00003345
.text$x:00003345                 mov     edx, [esp+arg_4]
.text$x:00003349                 lea     eax, [edx+0Ch]
.text$x:0000334C                 mov     ecx, [edx-14h]
.text$x:0000334F                 xor     ecx, eax
.text$x:00003351                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003356                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:0000335B                 jmp     ___CxxFrameHandler3
.text$x:0000335B __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:0000335B
.text$x:0000335B _text$x         ends
.text$x:0000335B
.text$mn:00003360 ; ===========================================================================
.text$mn:00003360
.text$mn:00003360 ; Segment type: Pure code
.text$mn:00003360 ; Segment permissions: Read/Execute
.text$mn:00003360 _text$mn        segment para public 'CODE' use32
.text$mn:00003360                 assume cs:_text$mn
.text$mn:00003360                 ;org 3360h
.text$mn:00003360 ; COMDAT (pick any)
.text$mn:00003360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003360
.text$mn:00003360 ; =============== S U B R O U T I N E =======================================
.text$mn:00003360
.text$mn:00003360 ; Attributes: bp-based frame
.text$mn:00003360
.text$mn:00003360 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:00003360                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:00003360 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:00003360                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:00003360
.text$mn:00003360 arg_0           = dword ptr  8
.text$mn:00003360 arg_4           = dword ptr  0Ch
.text$mn:00003360 arg_8           = dword ptr  10h
.text$mn:00003360
.text$mn:00003360                 push    ebp
.text$mn:00003361                 mov     ebp, esp
.text$mn:00003363                 mov     eax, [ebp+arg_8]
.text$mn:00003366                 push    eax
.text$mn:00003367                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:0000336C                 add     esp, 4
.text$mn:0000336F                 push    eax             ; int
.text$mn:00003370                 mov     ecx, [ebp+arg_4]
.text$mn:00003373                 push    ecx             ; void *
.text$mn:00003374                 mov     ecx, [ebp+arg_0]
.text$mn:00003377                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:0000337C                 pop     ebp
.text$mn:0000337D                 retn
.text$mn:0000337D ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:0000337D
.text$mn:0000337D ; ---------------------------------------------------------------------------
.text$mn:0000337E                 align 10h
.text$mn:0000337E _text$mn        ends
.text$mn:0000337E
.text$mn:00003380 ; ===========================================================================
.text$mn:00003380
.text$mn:00003380 ; Segment type: Pure code
.text$mn:00003380 ; Segment permissions: Read/Execute
.text$mn:00003380 _text$mn        segment para public 'CODE' use32
.text$mn:00003380                 assume cs:_text$mn
.text$mn:00003380                 ;org 3380h
.text$mn:00003380 ; COMDAT (pick any)
.text$mn:00003380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003380
.text$mn:00003380 ; =============== S U B R O U T I N E =======================================
.text$mn:00003380
.text$mn:00003380 ; Attributes: bp-based frame
.text$mn:00003380
.text$mn:00003380 ; int __stdcall std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void *, int)
.text$mn:00003380                 public ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z
.text$mn:00003380 ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z proc near
.text$mn:00003380                                         ; CODE XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.text$mn:00003380                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+9Dp ...
.text$mn:00003380
.text$mn:00003380 var_4           = dword ptr -4
.text$mn:00003380 arg_0           = dword ptr  8
.text$mn:00003380 arg_4           = dword ptr  0Ch
.text$mn:00003380
.text$mn:00003380                 push    ebp
.text$mn:00003381                 mov     ebp, esp
.text$mn:00003383                 push    ecx
.text$mn:00003384                 mov     [ebp+var_4], ecx
.text$mn:00003387                 mov     eax, [ebp+arg_4]
.text$mn:0000338A                 push    eax
.text$mn:0000338B                 call    ??$forward@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &)
.text$mn:00003390                 add     esp, 4
.text$mn:00003393                 push    eax             ; int
.text$mn:00003394                 mov     ecx, [ebp+arg_0]
.text$mn:00003397                 push    ecx             ; void *
.text$mn:00003398                 mov     edx, [ebp+var_4]
.text$mn:0000339B                 push    edx             ; int
.text$mn:0000339C                 call    ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@1@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)
.text$mn:000033A1                 add     esp, 0Ch
.text$mn:000033A4                 mov     esp, ebp
.text$mn:000033A6                 pop     ebp
.text$mn:000033A7                 retn    8
.text$mn:000033A7 ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z endp
.text$mn:000033A7
.text$mn:000033A7 ; ---------------------------------------------------------------------------
.text$mn:000033AA                 align 4
.text$mn:000033AA _text$mn        ends
.text$mn:000033AA
.text$mn:000033AC ; ===========================================================================
.text$mn:000033AC
.text$mn:000033AC ; Segment type: Pure code
.text$mn:000033AC ; Segment permissions: Read/Execute
.text$mn:000033AC _text$mn        segment para public 'CODE' use32
.text$mn:000033AC                 assume cs:_text$mn
.text$mn:000033AC                 ;org 33ACh
.text$mn:000033AC ; COMDAT (pick any)
.text$mn:000033AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000033AC
.text$mn:000033AC ; =============== S U B R O U T I N E =======================================
.text$mn:000033AC
.text$mn:000033AC ; Attributes: bp-based frame
.text$mn:000033AC
.text$mn:000033AC ; int __stdcall std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void *, int)
.text$mn:000033AC                 public ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z
.text$mn:000033AC ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z proc near
.text$mn:000033AC                                         ; CODE XREF: std::allocator_traits<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<
.text$mn:000033AC
.text$mn:000033AC var_1C          = dword ptr -1Ch
.text$mn:000033AC var_18          = dword ptr -18h
.text$mn:000033AC var_14          = dword ptr -14h
.text$mn:000033AC var_10          = dword ptr -10h
.text$mn:000033AC var_C           = dword ptr -0Ch
.text$mn:000033AC var_4           = dword ptr -4
.text$mn:000033AC arg_0           = dword ptr  8
.text$mn:000033AC arg_4           = dword ptr  0Ch
.text$mn:000033AC
.text$mn:000033AC                 push    ebp
.text$mn:000033AD                 mov     ebp, esp
.text$mn:000033AF                 push    0FFFFFFFFh
.text$mn:000033B1                 push    offset __ehhandler$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z
.text$mn:000033B6                 mov     eax, large fs:0
.text$mn:000033BC                 push    eax
.text$mn:000033BD                 sub     esp, 10h
.text$mn:000033C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000033C5                 xor     eax, ebp
.text$mn:000033C7                 push    eax
.text$mn:000033C8                 lea     eax, [ebp+var_C]
.text$mn:000033CB                 mov     large fs:0, eax
.text$mn:000033D1                 mov     [ebp+var_18], ecx
.text$mn:000033D4                 mov     eax, [ebp+arg_0]
.text$mn:000033D7                 push    eax             ; void *
.text$mn:000033D8                 push    38h ; '8'       ; unsigned int
.text$mn:000033DA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000033DF                 add     esp, 8
.text$mn:000033E2                 mov     [ebp+var_10], eax
.text$mn:000033E5                 mov     [ebp+var_4], 0
.text$mn:000033EC                 cmp     [ebp+var_10], 0
.text$mn:000033F0                 jz      short loc_340C
.text$mn:000033F2                 mov     ecx, [ebp+arg_4]
.text$mn:000033F5                 push    ecx
.text$mn:000033F6                 call    ??$forward@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &)
.text$mn:000033FB                 add     esp, 4
.text$mn:000033FE                 push    eax
.text$mn:000033FF                 mov     ecx, [ebp+var_10]
.text$mn:00003402                 call    ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)
.text$mn:00003407                 mov     [ebp+var_14], eax
.text$mn:0000340A                 jmp     short loc_3413
.text$mn:0000340C ; ---------------------------------------------------------------------------
.text$mn:0000340C
.text$mn:0000340C loc_340C:                               ; CODE XREF: std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+44j
.text$mn:0000340C                 mov     [ebp+var_14], 0
.text$mn:00003413
.text$mn:00003413 loc_3413:                               ; CODE XREF: std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+5Ej
.text$mn:00003413                 mov     edx, [ebp+var_14]
.text$mn:00003416                 mov     [ebp+var_1C], edx
.text$mn:00003419                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003420                 mov     ecx, [ebp+var_C]
.text$mn:00003423                 mov     large fs:0, ecx
.text$mn:0000342A                 pop     ecx
.text$mn:0000342B                 mov     esp, ebp
.text$mn:0000342D                 pop     ebp
.text$mn:0000342E                 retn    8
.text$mn:0000342E ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z endp
.text$mn:0000342E
.text$mn:0000342E ; ---------------------------------------------------------------------------
.text$mn:00003431                 align 4
.text$mn:00003431 _text$mn        ends
.text$mn:00003431
.text$x:00003434 ; ===========================================================================
.text$x:00003434
.text$x:00003434 ; Segment type: Pure code
.text$x:00003434 ; Segment permissions: Read/Execute
.text$x:00003434 _text$x         segment para public 'CODE' use32
.text$x:00003434                 assume cs:_text$x
.text$x:00003434                 ;org 3434h
.text$x:00003434 ; COMDAT (pick associative to section at 33AC)
.text$x:00003434                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003434
.text$x:00003434 ; =============== S U B R O U T I N E =======================================
.text$x:00003434
.text$x:00003434
.text$x:00003434 __unwindfunclet$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z$0 proc near
.text$x:00003434                                         ; DATA XREF: .xdata$x:0000A118o
.text$x:00003434                 mov     eax, [ebp+8]
.text$x:00003437                 push    eax
.text$x:00003438                 mov     eax, [ebp-10h]
.text$x:0000343B                 push    eax             ; void *
.text$x:0000343C                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003441                 add     esp, 8
.text$x:00003444                 retn
.text$x:00003444 __unwindfunclet$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z$0 endp
.text$x:00003444
.text$x:00003445
.text$x:00003445 ; =============== S U B R O U T I N E =======================================
.text$x:00003445
.text$x:00003445
.text$x:00003445 __ehhandler$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z proc near
.text$x:00003445                                         ; DATA XREF: std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+5o
.text$x:00003445
.text$x:00003445 arg_4           = dword ptr  8
.text$x:00003445
.text$x:00003445                 mov     edx, [esp+arg_4]
.text$x:00003449                 lea     eax, [edx+0Ch]
.text$x:0000344C                 mov     ecx, [edx-14h]
.text$x:0000344F                 xor     ecx, eax
.text$x:00003451                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003456                 mov     eax, offset __ehfuncinfo$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z
.text$x:0000345B                 jmp     ___CxxFrameHandler3
.text$x:0000345B __ehhandler$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z endp
.text$x:0000345B
.text$x:0000345B _text$x         ends
.text$x:0000345B
.text$mn:00003460 ; ===========================================================================
.text$mn:00003460
.text$mn:00003460 ; Segment type: Pure code
.text$mn:00003460 ; Segment permissions: Read/Execute
.text$mn:00003460 _text$mn        segment para public 'CODE' use32
.text$mn:00003460                 assume cs:_text$mn
.text$mn:00003460                 ;org 3460h
.text$mn:00003460 ; COMDAT (pick any)
.text$mn:00003460                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003460
.text$mn:00003460 ; =============== S U B R O U T I N E =======================================
.text$mn:00003460
.text$mn:00003460 ; Attributes: bp-based frame
.text$mn:00003460
.text$mn:00003460 ; int __cdecl std::allocator_traits<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(int, void *, int)
.text$mn:00003460                 public ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@1@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU31@@Z
.text$mn:00003460 ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@1@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU31@@Z proc near
.text$mn:00003460                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+1Cp
.text$mn:00003460
.text$mn:00003460 arg_0           = dword ptr  8
.text$mn:00003460 arg_4           = dword ptr  0Ch
.text$mn:00003460 arg_8           = dword ptr  10h
.text$mn:00003460
.text$mn:00003460                 push    ebp
.text$mn:00003461                 mov     ebp, esp
.text$mn:00003463                 mov     eax, [ebp+arg_8]
.text$mn:00003466                 push    eax
.text$mn:00003467                 call    ??$forward@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &)
.text$mn:0000346C                 add     esp, 4
.text$mn:0000346F                 push    eax             ; int
.text$mn:00003470                 mov     ecx, [ebp+arg_4]
.text$mn:00003473                 push    ecx             ; void *
.text$mn:00003474                 mov     ecx, [ebp+arg_0]
.text$mn:00003477                 call    ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z ; std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)
.text$mn:0000347C                 pop     ebp
.text$mn:0000347D                 retn
.text$mn:0000347D ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@1@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU31@@Z endp
.text$mn:0000347D
.text$mn:0000347D ; ---------------------------------------------------------------------------
.text$mn:0000347E                 align 10h
.text$mn:0000347E _text$mn        ends
.text$mn:0000347E
.text$mn:00003480 ; ===========================================================================
.text$mn:00003480
.text$mn:00003480 ; Segment type: Pure code
.text$mn:00003480 ; Segment permissions: Read/Execute
.text$mn:00003480 _text$mn        segment para public 'CODE' use32
.text$mn:00003480                 assume cs:_text$mn
.text$mn:00003480                 ;org 3480h
.text$mn:00003480 ; COMDAT (pick any)
.text$mn:00003480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003480
.text$mn:00003480 ; =============== S U B R O U T I N E =======================================
.text$mn:00003480
.text$mn:00003480 ; Attributes: bp-based frame
.text$mn:00003480
.text$mn:00003480 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00003480                 public ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00003480 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00003480                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+32p
.text$mn:00003480
.text$mn:00003480 var_4           = dword ptr -4
.text$mn:00003480 arg_0           = dword ptr  8
.text$mn:00003480 arg_4           = dword ptr  0Ch
.text$mn:00003480
.text$mn:00003480                 push    ebp
.text$mn:00003481                 mov     ebp, esp
.text$mn:00003483                 push    ecx
.text$mn:00003484                 mov     [ebp+var_4], ecx
.text$mn:00003487                 mov     eax, [ebp+arg_4]
.text$mn:0000348A                 push    eax
.text$mn:0000348B                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00003490                 add     esp, 4
.text$mn:00003493                 push    eax             ; int
.text$mn:00003494                 mov     ecx, [ebp+arg_0]
.text$mn:00003497                 push    ecx             ; void *
.text$mn:00003498                 mov     edx, [ebp+var_4]
.text$mn:0000349B                 push    edx             ; int
.text$mn:0000349C                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000034A1                 add     esp, 0Ch
.text$mn:000034A4                 mov     esp, ebp
.text$mn:000034A6                 pop     ebp
.text$mn:000034A7                 retn    8
.text$mn:000034A7 ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:000034A7
.text$mn:000034A7 ; ---------------------------------------------------------------------------
.text$mn:000034AA                 align 4
.text$mn:000034AA _text$mn        ends
.text$mn:000034AA
.text$mn:000034AC ; ===========================================================================
.text$mn:000034AC
.text$mn:000034AC ; Segment type: Pure code
.text$mn:000034AC ; Segment permissions: Read/Execute
.text$mn:000034AC _text$mn        segment para public 'CODE' use32
.text$mn:000034AC                 assume cs:_text$mn
.text$mn:000034AC                 ;org 34ACh
.text$mn:000034AC ; COMDAT (pick any)
.text$mn:000034AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000034AC
.text$mn:000034AC ; =============== S U B R O U T I N E =======================================
.text$mn:000034AC
.text$mn:000034AC ; Attributes: bp-based frame
.text$mn:000034AC
.text$mn:000034AC ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:000034AC                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:000034AC ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:000034AC                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *,std::_Container_proxy &&)+17p
.text$mn:000034AC                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p ...
.text$mn:000034AC
.text$mn:000034AC var_1C          = dword ptr -1Ch
.text$mn:000034AC var_18          = dword ptr -18h
.text$mn:000034AC var_14          = dword ptr -14h
.text$mn:000034AC var_10          = dword ptr -10h
.text$mn:000034AC var_C           = dword ptr -0Ch
.text$mn:000034AC var_4           = dword ptr -4
.text$mn:000034AC arg_0           = dword ptr  8
.text$mn:000034AC arg_4           = dword ptr  0Ch
.text$mn:000034AC
.text$mn:000034AC                 push    ebp
.text$mn:000034AD                 mov     ebp, esp
.text$mn:000034AF                 push    0FFFFFFFFh
.text$mn:000034B1                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:000034B6                 mov     eax, large fs:0
.text$mn:000034BC                 push    eax
.text$mn:000034BD                 sub     esp, 10h
.text$mn:000034C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000034C5                 xor     eax, ebp
.text$mn:000034C7                 push    eax
.text$mn:000034C8                 lea     eax, [ebp+var_C]
.text$mn:000034CB                 mov     large fs:0, eax
.text$mn:000034D1                 mov     [ebp+var_18], ecx
.text$mn:000034D4                 mov     eax, [ebp+arg_0]
.text$mn:000034D7                 push    eax             ; void *
.text$mn:000034D8                 push    8               ; unsigned int
.text$mn:000034DA                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000034DF                 add     esp, 8
.text$mn:000034E2                 mov     [ebp+var_10], eax
.text$mn:000034E5                 mov     [ebp+var_4], 0
.text$mn:000034EC                 cmp     [ebp+var_10], 0
.text$mn:000034F0                 jz      short loc_3513
.text$mn:000034F2                 mov     ecx, [ebp+arg_4]
.text$mn:000034F5                 push    ecx
.text$mn:000034F6                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:000034FB                 add     esp, 4
.text$mn:000034FE                 mov     edx, [eax]
.text$mn:00003500                 mov     eax, [eax+4]
.text$mn:00003503                 mov     ecx, [ebp+var_10]
.text$mn:00003506                 mov     [ecx], edx
.text$mn:00003508                 mov     [ecx+4], eax
.text$mn:0000350B                 mov     edx, [ebp+var_10]
.text$mn:0000350E                 mov     [ebp+var_14], edx
.text$mn:00003511                 jmp     short loc_351A
.text$mn:00003513 ; ---------------------------------------------------------------------------
.text$mn:00003513
.text$mn:00003513 loc_3513:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00003513                 mov     [ebp+var_14], 0
.text$mn:0000351A
.text$mn:0000351A loc_351A:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:0000351A                 mov     eax, [ebp+var_14]
.text$mn:0000351D                 mov     [ebp+var_1C], eax
.text$mn:00003520                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003527                 mov     ecx, [ebp+var_C]
.text$mn:0000352A                 mov     large fs:0, ecx
.text$mn:00003531                 pop     ecx
.text$mn:00003532                 mov     esp, ebp
.text$mn:00003534                 pop     ebp
.text$mn:00003535                 retn    8
.text$mn:00003535 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00003535
.text$mn:00003535 _text$mn        ends
.text$mn:00003535
.text$x:00003538 ; ===========================================================================
.text$x:00003538
.text$x:00003538 ; Segment type: Pure code
.text$x:00003538 ; Segment permissions: Read/Execute
.text$x:00003538 _text$x         segment para public 'CODE' use32
.text$x:00003538                 assume cs:_text$x
.text$x:00003538                 ;org 3538h
.text$x:00003538 ; COMDAT (pick associative to section at 34AC)
.text$x:00003538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003538
.text$x:00003538 ; =============== S U B R O U T I N E =======================================
.text$x:00003538
.text$x:00003538
.text$x:00003538 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00003538                                         ; DATA XREF: .xdata$x:00009FB0o
.text$x:00003538                 mov     eax, [ebp+8]
.text$x:0000353B                 push    eax
.text$x:0000353C                 mov     eax, [ebp-10h]
.text$x:0000353F                 push    eax             ; void *
.text$x:00003540                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003545                 add     esp, 8
.text$x:00003548                 retn
.text$x:00003548 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00003548
.text$x:00003549
.text$x:00003549 ; =============== S U B R O U T I N E =======================================
.text$x:00003549
.text$x:00003549
.text$x:00003549 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00003549                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00003549
.text$x:00003549 arg_4           = dword ptr  8
.text$x:00003549
.text$x:00003549                 mov     edx, [esp+arg_4]
.text$x:0000354D                 lea     eax, [edx+0Ch]
.text$x:00003550                 mov     ecx, [edx-14h]
.text$x:00003553                 xor     ecx, eax
.text$x:00003555                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000355A                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:0000355F                 jmp     ___CxxFrameHandler3
.text$x:0000355F __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:0000355F
.text$x:0000355F _text$x         ends
.text$x:0000355F
.text$mn:00003564 ; ===========================================================================
.text$mn:00003564
.text$mn:00003564 ; Segment type: Pure code
.text$mn:00003564 ; Segment permissions: Read/Execute
.text$mn:00003564 _text$mn        segment para public 'CODE' use32
.text$mn:00003564                 assume cs:_text$mn
.text$mn:00003564                 ;org 3564h
.text$mn:00003564 ; COMDAT (pick any)
.text$mn:00003564                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003564
.text$mn:00003564 ; =============== S U B R O U T I N E =======================================
.text$mn:00003564
.text$mn:00003564 ; Attributes: bp-based frame
.text$mn:00003564
.text$mn:00003564 ; int __cdecl std::allocator_traits<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(int, void *, int)
.text$mn:00003564                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
.text$mn:00003564 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
.text$mn:00003564                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+1Cp
.text$mn:00003564
.text$mn:00003564 arg_0           = dword ptr  8
.text$mn:00003564 arg_4           = dword ptr  0Ch
.text$mn:00003564 arg_8           = dword ptr  10h
.text$mn:00003564
.text$mn:00003564                 push    ebp
.text$mn:00003565                 mov     ebp, esp
.text$mn:00003567                 mov     eax, [ebp+arg_8]
.text$mn:0000356A                 push    eax
.text$mn:0000356B                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00003570                 add     esp, 4
.text$mn:00003573                 push    eax             ; int
.text$mn:00003574                 mov     ecx, [ebp+arg_4]
.text$mn:00003577                 push    ecx             ; void *
.text$mn:00003578                 mov     ecx, [ebp+arg_0]
.text$mn:0000357B                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00003580                 pop     ebp
.text$mn:00003581                 retn
.text$mn:00003581 ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z endp
.text$mn:00003581
.text$mn:00003581 ; ---------------------------------------------------------------------------
.text$mn:00003582                 align 4
.text$mn:00003582 _text$mn        ends
.text$mn:00003582
.text$mn:00003584 ; ===========================================================================
.text$mn:00003584
.text$mn:00003584 ; Segment type: Pure code
.text$mn:00003584 ; Segment permissions: Read/Execute
.text$mn:00003584 _text$mn        segment para public 'CODE' use32
.text$mn:00003584                 assume cs:_text$mn
.text$mn:00003584                 ;org 3584h
.text$mn:00003584 ; COMDAT (pick any)
.text$mn:00003584                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003584
.text$mn:00003584 ; =============== S U B R O U T I N E =======================================
.text$mn:00003584
.text$mn:00003584 ; Attributes: bp-based frame
.text$mn:00003584
.text$mn:00003584 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:00003584                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:00003584 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:00003584                                         ; CODE XREF: std::_Uninit_move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Nonscalar_ptr_iterator_tag)+8Ep
.text$mn:00003584                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+9Dp ...
.text$mn:00003584
.text$mn:00003584 var_4           = dword ptr -4
.text$mn:00003584 arg_0           = dword ptr  8
.text$mn:00003584 arg_4           = dword ptr  0Ch
.text$mn:00003584
.text$mn:00003584                 push    ebp
.text$mn:00003585                 mov     ebp, esp
.text$mn:00003587                 push    ecx
.text$mn:00003588                 mov     [ebp+var_4], ecx
.text$mn:0000358B                 mov     eax, [ebp+arg_4]
.text$mn:0000358E                 push    eax
.text$mn:0000358F                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00003594                 add     esp, 4
.text$mn:00003597                 push    eax             ; int
.text$mn:00003598                 mov     ecx, [ebp+arg_0]
.text$mn:0000359B                 push    ecx             ; void *
.text$mn:0000359C                 mov     edx, [ebp+var_4]
.text$mn:0000359F                 push    edx             ; int
.text$mn:000035A0                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000035A5                 add     esp, 0Ch
.text$mn:000035A8                 mov     esp, ebp
.text$mn:000035AA                 pop     ebp
.text$mn:000035AB                 retn    8
.text$mn:000035AB ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:000035AB
.text$mn:000035AB ; ---------------------------------------------------------------------------
.text$mn:000035AE                 align 10h
.text$mn:000035AE _text$mn        ends
.text$mn:000035AE
.text$mn:000035B0 ; ===========================================================================
.text$mn:000035B0
.text$mn:000035B0 ; Segment type: Pure code
.text$mn:000035B0 ; Segment permissions: Read/Execute
.text$mn:000035B0 _text$mn        segment para public 'CODE' use32
.text$mn:000035B0                 assume cs:_text$mn
.text$mn:000035B0                 ;org 35B0h
.text$mn:000035B0 ; COMDAT (pick any)
.text$mn:000035B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000035B0
.text$mn:000035B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000035B0
.text$mn:000035B0 ; Attributes: bp-based frame
.text$mn:000035B0
.text$mn:000035B0 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void *, int)
.text$mn:000035B0                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:000035B0 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$mn:000035B0                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+17p
.text$mn:000035B0
.text$mn:000035B0 var_1C          = dword ptr -1Ch
.text$mn:000035B0 var_18          = dword ptr -18h
.text$mn:000035B0 var_14          = dword ptr -14h
.text$mn:000035B0 var_10          = dword ptr -10h
.text$mn:000035B0 var_C           = dword ptr -0Ch
.text$mn:000035B0 var_4           = dword ptr -4
.text$mn:000035B0 arg_0           = dword ptr  8
.text$mn:000035B0 arg_4           = dword ptr  0Ch
.text$mn:000035B0
.text$mn:000035B0                 push    ebp
.text$mn:000035B1                 mov     ebp, esp
.text$mn:000035B3                 push    0FFFFFFFFh
.text$mn:000035B5                 push    offset __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$mn:000035BA                 mov     eax, large fs:0
.text$mn:000035C0                 push    eax
.text$mn:000035C1                 sub     esp, 10h
.text$mn:000035C4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000035C9                 xor     eax, ebp
.text$mn:000035CB                 push    eax
.text$mn:000035CC                 lea     eax, [ebp+var_C]
.text$mn:000035CF                 mov     large fs:0, eax
.text$mn:000035D5                 mov     [ebp+var_18], ecx
.text$mn:000035D8                 mov     eax, [ebp+arg_0]
.text$mn:000035DB                 push    eax             ; void *
.text$mn:000035DC                 push    1Ch             ; unsigned int
.text$mn:000035DE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000035E3                 add     esp, 8
.text$mn:000035E6                 mov     [ebp+var_10], eax
.text$mn:000035E9                 mov     [ebp+var_4], 0
.text$mn:000035F0                 cmp     [ebp+var_10], 0
.text$mn:000035F4                 jz      short loc_3610
.text$mn:000035F6                 mov     ecx, [ebp+arg_4]
.text$mn:000035F9                 push    ecx
.text$mn:000035FA                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000035FF                 add     esp, 4
.text$mn:00003602                 push    eax
.text$mn:00003603                 mov     ecx, [ebp+var_10]
.text$mn:00003606                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000360B                 mov     [ebp+var_14], eax
.text$mn:0000360E                 jmp     short loc_3617
.text$mn:00003610 ; ---------------------------------------------------------------------------
.text$mn:00003610
.text$mn:00003610 loc_3610:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+44j
.text$mn:00003610                 mov     [ebp+var_14], 0
.text$mn:00003617
.text$mn:00003617 loc_3617:                               ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5Ej
.text$mn:00003617                 mov     edx, [ebp+var_14]
.text$mn:0000361A                 mov     [ebp+var_1C], edx
.text$mn:0000361D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003624                 mov     ecx, [ebp+var_C]
.text$mn:00003627                 mov     large fs:0, ecx
.text$mn:0000362E                 pop     ecx
.text$mn:0000362F                 mov     esp, ebp
.text$mn:00003631                 pop     ebp
.text$mn:00003632                 retn    8
.text$mn:00003632 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$mn:00003632
.text$mn:00003632 ; ---------------------------------------------------------------------------
.text$mn:00003635                 align 4
.text$mn:00003635 _text$mn        ends
.text$mn:00003635
.text$x:00003638 ; ===========================================================================
.text$x:00003638
.text$x:00003638 ; Segment type: Pure code
.text$x:00003638 ; Segment permissions: Read/Execute
.text$x:00003638 _text$x         segment para public 'CODE' use32
.text$x:00003638                 assume cs:_text$x
.text$x:00003638                 ;org 3638h
.text$x:00003638 ; COMDAT (pick associative to section at 35B0)
.text$x:00003638                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003638
.text$x:00003638 ; =============== S U B R O U T I N E =======================================
.text$x:00003638
.text$x:00003638
.text$x:00003638 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 proc near
.text$x:00003638                                         ; DATA XREF: .xdata$x:0000A0ECo
.text$x:00003638                 mov     eax, [ebp+8]
.text$x:0000363B                 push    eax
.text$x:0000363C                 mov     eax, [ebp-10h]
.text$x:0000363F                 push    eax             ; void *
.text$x:00003640                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00003645                 add     esp, 8
.text$x:00003648                 retn
.text$x:00003648 __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 endp
.text$x:00003648
.text$x:00003649
.text$x:00003649 ; =============== S U B R O U T I N E =======================================
.text$x:00003649
.text$x:00003649
.text$x:00003649 __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z proc near
.text$x:00003649                                         ; DATA XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00003649
.text$x:00003649 arg_4           = dword ptr  8
.text$x:00003649
.text$x:00003649                 mov     edx, [esp+arg_4]
.text$x:0000364D                 lea     eax, [edx+0Ch]
.text$x:00003650                 mov     ecx, [edx-14h]
.text$x:00003653                 xor     ecx, eax
.text$x:00003655                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000365A                 mov     eax, offset __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.text$x:0000365F                 jmp     ___CxxFrameHandler3
.text$x:0000365F __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z endp
.text$x:0000365F
.text$x:0000365F _text$x         ends
.text$x:0000365F
.text$mn:00003664 ; ===========================================================================
.text$mn:00003664
.text$mn:00003664 ; Segment type: Pure code
.text$mn:00003664 ; Segment permissions: Read/Execute
.text$mn:00003664 _text$mn        segment para public 'CODE' use32
.text$mn:00003664                 assume cs:_text$mn
.text$mn:00003664                 ;org 3664h
.text$mn:00003664 ; COMDAT (pick any)
.text$mn:00003664                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003664
.text$mn:00003664 ; =============== S U B R O U T I N E =======================================
.text$mn:00003664
.text$mn:00003664 ; Attributes: bp-based frame
.text$mn:00003664
.text$mn:00003664 ; int __cdecl std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(int, void *, int)
.text$mn:00003664                 public ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z
.text$mn:00003664 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z proc near
.text$mn:00003664                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+1Cp
.text$mn:00003664
.text$mn:00003664 arg_0           = dword ptr  8
.text$mn:00003664 arg_4           = dword ptr  0Ch
.text$mn:00003664 arg_8           = dword ptr  10h
.text$mn:00003664
.text$mn:00003664                 push    ebp
.text$mn:00003665                 mov     ebp, esp
.text$mn:00003667                 mov     eax, [ebp+arg_8]
.text$mn:0000366A                 push    eax
.text$mn:0000366B                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00003670                 add     esp, 4
.text$mn:00003673                 push    eax             ; int
.text$mn:00003674                 mov     ecx, [ebp+arg_4]
.text$mn:00003677                 push    ecx             ; void *
.text$mn:00003678                 mov     ecx, [ebp+arg_0]
.text$mn:0000367B                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00003680                 pop     ebp
.text$mn:00003681                 retn
.text$mn:00003681 ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z endp
.text$mn:00003681
.text$mn:00003681 ; ---------------------------------------------------------------------------
.text$mn:00003682                 align 4
.text$mn:00003682 _text$mn        ends
.text$mn:00003682
.text$mn:00003684 ; ===========================================================================
.text$mn:00003684
.text$mn:00003684 ; Segment type: Pure code
.text$mn:00003684 ; Segment permissions: Read/Execute
.text$mn:00003684 _text$mn        segment para public 'CODE' use32
.text$mn:00003684                 assume cs:_text$mn
.text$mn:00003684                 ;org 3684h
.text$mn:00003684 ; COMDAT (pick any)
.text$mn:00003684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003684
.text$mn:00003684 ; =============== S U B R O U T I N E =======================================
.text$mn:00003684
.text$mn:00003684 ; Attributes: bp-based frame
.text$mn:00003684
.text$mn:00003684 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00003684                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00003684 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00003684                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00003684
.text$mn:00003684 var_4           = dword ptr -4
.text$mn:00003684 arg_0           = dword ptr  8
.text$mn:00003684
.text$mn:00003684                 push    ebp
.text$mn:00003685                 mov     ebp, esp
.text$mn:00003687                 push    ecx
.text$mn:00003688                 mov     [ebp+var_4], ecx
.text$mn:0000368B                 mov     eax, [ebp+arg_0]
.text$mn:0000368E                 push    eax
.text$mn:0000368F                 mov     ecx, [ebp+var_4]
.text$mn:00003692                 push    ecx
.text$mn:00003693                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00003698                 add     esp, 8
.text$mn:0000369B                 mov     esp, ebp
.text$mn:0000369D                 pop     ebp
.text$mn:0000369E                 retn    4
.text$mn:0000369E ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:0000369E
.text$mn:0000369E ; ---------------------------------------------------------------------------
.text$mn:000036A1                 align 4
.text$mn:000036A1 _text$mn        ends
.text$mn:000036A1
.text$mn:000036A4 ; ===========================================================================
.text$mn:000036A4
.text$mn:000036A4 ; Segment type: Pure code
.text$mn:000036A4 ; Segment permissions: Read/Execute
.text$mn:000036A4 _text$mn        segment para public 'CODE' use32
.text$mn:000036A4                 assume cs:_text$mn
.text$mn:000036A4                 ;org 36A4h
.text$mn:000036A4 ; COMDAT (pick any)
.text$mn:000036A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036A4
.text$mn:000036A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000036A4
.text$mn:000036A4 ; Attributes: bp-based frame
.text$mn:000036A4
.text$mn:000036A4 ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:000036A4                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:000036A4 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:000036A4                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:000036A4
.text$mn:000036A4 var_4           = dword ptr -4
.text$mn:000036A4
.text$mn:000036A4                 push    ebp
.text$mn:000036A5                 mov     ebp, esp
.text$mn:000036A7                 push    ecx
.text$mn:000036A8                 mov     [ebp+var_4], ecx
.text$mn:000036AB                 mov     esp, ebp
.text$mn:000036AD                 pop     ebp
.text$mn:000036AE                 retn    4
.text$mn:000036AE ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:000036AE
.text$mn:000036AE ; ---------------------------------------------------------------------------
.text$mn:000036B1                 align 4
.text$mn:000036B1 _text$mn        ends
.text$mn:000036B1
.text$mn:000036B4 ; ===========================================================================
.text$mn:000036B4
.text$mn:000036B4 ; Segment type: Pure code
.text$mn:000036B4 ; Segment permissions: Read/Execute
.text$mn:000036B4 _text$mn        segment para public 'CODE' use32
.text$mn:000036B4                 assume cs:_text$mn
.text$mn:000036B4                 ;org 36B4h
.text$mn:000036B4 ; COMDAT (pick any)
.text$mn:000036B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036B4
.text$mn:000036B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000036B4
.text$mn:000036B4 ; Attributes: bp-based frame
.text$mn:000036B4
.text$mn:000036B4 ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:000036B4                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:000036B4 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:000036B4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:000036B4
.text$mn:000036B4 arg_0           = dword ptr  8
.text$mn:000036B4 arg_4           = dword ptr  0Ch
.text$mn:000036B4
.text$mn:000036B4                 push    ebp
.text$mn:000036B5                 mov     ebp, esp
.text$mn:000036B7                 mov     eax, [ebp+arg_4]
.text$mn:000036BA                 push    eax
.text$mn:000036BB                 mov     ecx, [ebp+arg_0]
.text$mn:000036BE                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:000036C3                 pop     ebp
.text$mn:000036C4                 retn
.text$mn:000036C4 ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:000036C4
.text$mn:000036C4 ; ---------------------------------------------------------------------------
.text$mn:000036C5                 align 4
.text$mn:000036C5 _text$mn        ends
.text$mn:000036C5
.text$mn:000036C8 ; ===========================================================================
.text$mn:000036C8
.text$mn:000036C8 ; Segment type: Pure code
.text$mn:000036C8 ; Segment permissions: Read/Execute
.text$mn:000036C8 _text$mn        segment para public 'CODE' use32
.text$mn:000036C8                 assume cs:_text$mn
.text$mn:000036C8                 ;org 36C8h
.text$mn:000036C8 ; COMDAT (pick any)
.text$mn:000036C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036C8
.text$mn:000036C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000036C8
.text$mn:000036C8 ; Attributes: bp-based frame
.text$mn:000036C8
.text$mn:000036C8 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000036C8                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:000036C8 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:000036C8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:000036C8
.text$mn:000036C8 var_4           = dword ptr -4
.text$mn:000036C8 arg_0           = dword ptr  8
.text$mn:000036C8
.text$mn:000036C8                 push    ebp
.text$mn:000036C9                 mov     ebp, esp
.text$mn:000036CB                 push    ecx
.text$mn:000036CC                 mov     [ebp+var_4], ecx
.text$mn:000036CF                 mov     eax, [ebp+arg_0]
.text$mn:000036D2                 push    eax
.text$mn:000036D3                 mov     ecx, [ebp+var_4]
.text$mn:000036D6                 push    ecx
.text$mn:000036D7                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:000036DC                 add     esp, 8
.text$mn:000036DF                 mov     esp, ebp
.text$mn:000036E1                 pop     ebp
.text$mn:000036E2                 retn    4
.text$mn:000036E2 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:000036E2
.text$mn:000036E2 ; ---------------------------------------------------------------------------
.text$mn:000036E5                 align 4
.text$mn:000036E5 _text$mn        ends
.text$mn:000036E5
.text$mn:000036E8 ; ===========================================================================
.text$mn:000036E8
.text$mn:000036E8 ; Segment type: Pure code
.text$mn:000036E8 ; Segment permissions: Read/Execute
.text$mn:000036E8 _text$mn        segment para public 'CODE' use32
.text$mn:000036E8                 assume cs:_text$mn
.text$mn:000036E8                 ;org 36E8h
.text$mn:000036E8 ; COMDAT (pick any)
.text$mn:000036E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036E8
.text$mn:000036E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000036E8
.text$mn:000036E8 ; Attributes: bp-based frame
.text$mn:000036E8
.text$mn:000036E8 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:000036E8                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:000036E8 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:000036E8                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:000036E8
.text$mn:000036E8 var_4           = dword ptr -4
.text$mn:000036E8
.text$mn:000036E8                 push    ebp
.text$mn:000036E9                 mov     ebp, esp
.text$mn:000036EB                 push    ecx
.text$mn:000036EC                 mov     [ebp+var_4], ecx
.text$mn:000036EF                 mov     esp, ebp
.text$mn:000036F1                 pop     ebp
.text$mn:000036F2                 retn    4
.text$mn:000036F2 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:000036F2
.text$mn:000036F2 ; ---------------------------------------------------------------------------
.text$mn:000036F5                 align 4
.text$mn:000036F5 _text$mn        ends
.text$mn:000036F5
.text$mn:000036F8 ; ===========================================================================
.text$mn:000036F8
.text$mn:000036F8 ; Segment type: Pure code
.text$mn:000036F8 ; Segment permissions: Read/Execute
.text$mn:000036F8 _text$mn        segment para public 'CODE' use32
.text$mn:000036F8                 assume cs:_text$mn
.text$mn:000036F8                 ;org 36F8h
.text$mn:000036F8 ; COMDAT (pick any)
.text$mn:000036F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000036F8
.text$mn:000036F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000036F8
.text$mn:000036F8 ; Attributes: bp-based frame
.text$mn:000036F8
.text$mn:000036F8 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:000036F8                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:000036F8 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:000036F8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:000036F8
.text$mn:000036F8 arg_0           = dword ptr  8
.text$mn:000036F8 arg_4           = dword ptr  0Ch
.text$mn:000036F8
.text$mn:000036F8                 push    ebp
.text$mn:000036F9                 mov     ebp, esp
.text$mn:000036FB                 mov     eax, [ebp+arg_4]
.text$mn:000036FE                 push    eax
.text$mn:000036FF                 mov     ecx, [ebp+arg_0]
.text$mn:00003702                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00003707                 pop     ebp
.text$mn:00003708                 retn
.text$mn:00003708 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00003708
.text$mn:00003708 ; ---------------------------------------------------------------------------
.text$mn:00003709                 align 4
.text$mn:00003709 _text$mn        ends
.text$mn:00003709
.text$mn:0000370C ; ===========================================================================
.text$mn:0000370C
.text$mn:0000370C ; Segment type: Pure code
.text$mn:0000370C ; Segment permissions: Read/Execute
.text$mn:0000370C _text$mn        segment para public 'CODE' use32
.text$mn:0000370C                 assume cs:_text$mn
.text$mn:0000370C                 ;org 370Ch
.text$mn:0000370C ; COMDAT (pick any)
.text$mn:0000370C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000370C
.text$mn:0000370C ; =============== S U B R O U T I N E =======================================
.text$mn:0000370C
.text$mn:0000370C ; Attributes: bp-based frame
.text$mn:0000370C
.text$mn:0000370C ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::destroy<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)
.text$mn:0000370C                 public ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z
.text$mn:0000370C ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z proc near
.text$mn:0000370C                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:0000370C                                         ; __catch$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:0000370C
.text$mn:0000370C var_4           = dword ptr -4
.text$mn:0000370C arg_0           = dword ptr  8
.text$mn:0000370C
.text$mn:0000370C                 push    ebp
.text$mn:0000370D                 mov     ebp, esp
.text$mn:0000370F                 push    ecx
.text$mn:00003710                 mov     [ebp+var_4], ecx
.text$mn:00003713                 mov     eax, [ebp+arg_0]
.text$mn:00003716                 push    eax
.text$mn:00003717                 mov     ecx, [ebp+var_4]
.text$mn:0000371A                 push    ecx
.text$mn:0000371B                 call    ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@1@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z ; std::allocator_traits<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::destroy<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00003720                 add     esp, 8
.text$mn:00003723                 mov     esp, ebp
.text$mn:00003725                 pop     ebp
.text$mn:00003726                 retn    4
.text$mn:00003726 ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z endp
.text$mn:00003726
.text$mn:00003726 ; ---------------------------------------------------------------------------
.text$mn:00003729                 align 4
.text$mn:00003729 _text$mn        ends
.text$mn:00003729
.text$mn:0000372C ; ===========================================================================
.text$mn:0000372C
.text$mn:0000372C ; Segment type: Pure code
.text$mn:0000372C ; Segment permissions: Read/Execute
.text$mn:0000372C _text$mn        segment para public 'CODE' use32
.text$mn:0000372C                 assume cs:_text$mn
.text$mn:0000372C                 ;org 372Ch
.text$mn:0000372C ; COMDAT (pick any)
.text$mn:0000372C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000372C
.text$mn:0000372C ; =============== S U B R O U T I N E =======================================
.text$mn:0000372C
.text$mn:0000372C ; Attributes: bp-based frame
.text$mn:0000372C
.text$mn:0000372C ; public: void __thiscall std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)
.text$mn:0000372C                 public ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z
.text$mn:0000372C ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z proc near
.text$mn:0000372C                                         ; CODE XREF: std::allocator_traits<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::destroy<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+Ap
.text$mn:0000372C
.text$mn:0000372C var_4           = dword ptr -4
.text$mn:0000372C arg_0           = dword ptr  8
.text$mn:0000372C
.text$mn:0000372C                 push    ebp
.text$mn:0000372D                 mov     ebp, esp
.text$mn:0000372F                 push    ecx
.text$mn:00003730                 mov     [ebp+var_4], ecx
.text$mn:00003733                 push    0
.text$mn:00003735                 mov     ecx, [ebp+arg_0]
.text$mn:00003738                 call    ??_G?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAEPAXI@Z ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::`scalar deleting destructor'(uint)
.text$mn:0000373D                 mov     esp, ebp
.text$mn:0000373F                 pop     ebp
.text$mn:00003740                 retn    4
.text$mn:00003740 ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z endp
.text$mn:00003740
.text$mn:00003740 ; ---------------------------------------------------------------------------
.text$mn:00003743                 align 4
.text$mn:00003743 _text$mn        ends
.text$mn:00003743
.text$mn:00003744 ; ===========================================================================
.text$mn:00003744
.text$mn:00003744 ; Segment type: Pure code
.text$mn:00003744 ; Segment permissions: Read/Execute
.text$mn:00003744 _text$mn        segment para public 'CODE' use32
.text$mn:00003744                 assume cs:_text$mn
.text$mn:00003744                 ;org 3744h
.text$mn:00003744 ; COMDAT (pick any)
.text$mn:00003744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003744
.text$mn:00003744 ; =============== S U B R O U T I N E =======================================
.text$mn:00003744
.text$mn:00003744 ; Attributes: bp-based frame
.text$mn:00003744
.text$mn:00003744 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::destroy<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)
.text$mn:00003744                 public ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@1@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z
.text$mn:00003744 ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@1@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z proc near
.text$mn:00003744                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::destroy<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+Fp
.text$mn:00003744
.text$mn:00003744 arg_0           = dword ptr  8
.text$mn:00003744 arg_4           = dword ptr  0Ch
.text$mn:00003744
.text$mn:00003744                 push    ebp
.text$mn:00003745                 mov     ebp, esp
.text$mn:00003747                 mov     eax, [ebp+arg_4]
.text$mn:0000374A                 push    eax
.text$mn:0000374B                 mov     ecx, [ebp+arg_0]
.text$mn:0000374E                 call    ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z ; std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00003753                 pop     ebp
.text$mn:00003754                 retn
.text$mn:00003754 ??$destroy@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAXAAV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@1@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@@Z endp
.text$mn:00003754
.text$mn:00003754 ; ---------------------------------------------------------------------------
.text$mn:00003755                 align 4
.text$mn:00003755 _text$mn        ends
.text$mn:00003755
.text$mn:00003758 ; ===========================================================================
.text$mn:00003758
.text$mn:00003758 ; Segment type: Pure code
.text$mn:00003758 ; Segment permissions: Read/Execute
.text$mn:00003758 _text$mn        segment para public 'CODE' use32
.text$mn:00003758                 assume cs:_text$mn
.text$mn:00003758                 ;org 3758h
.text$mn:00003758 ; COMDAT (pick any)
.text$mn:00003758                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003758
.text$mn:00003758 ; =============== S U B R O U T I N E =======================================
.text$mn:00003758
.text$mn:00003758 ; Attributes: bp-based frame
.text$mn:00003758
.text$mn:00003758 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00003758                 public ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00003758 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00003758                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+22p
.text$mn:00003758
.text$mn:00003758 var_4           = dword ptr -4
.text$mn:00003758 arg_0           = dword ptr  8
.text$mn:00003758
.text$mn:00003758                 push    ebp
.text$mn:00003759                 mov     ebp, esp
.text$mn:0000375B                 push    ecx
.text$mn:0000375C                 mov     [ebp+var_4], ecx
.text$mn:0000375F                 mov     eax, [ebp+arg_0]
.text$mn:00003762                 push    eax
.text$mn:00003763                 mov     ecx, [ebp+var_4]
.text$mn:00003766                 push    ecx
.text$mn:00003767                 call    ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)
.text$mn:0000376C                 add     esp, 8
.text$mn:0000376F                 mov     esp, ebp
.text$mn:00003771                 pop     ebp
.text$mn:00003772                 retn    4
.text$mn:00003772 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00003772
.text$mn:00003772 ; ---------------------------------------------------------------------------
.text$mn:00003775                 align 4
.text$mn:00003775 _text$mn        ends
.text$mn:00003775
.text$mn:00003778 ; ===========================================================================
.text$mn:00003778
.text$mn:00003778 ; Segment type: Pure code
.text$mn:00003778 ; Segment permissions: Read/Execute
.text$mn:00003778 _text$mn        segment para public 'CODE' use32
.text$mn:00003778                 assume cs:_text$mn
.text$mn:00003778                 ;org 3778h
.text$mn:00003778 ; COMDAT (pick any)
.text$mn:00003778                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003778
.text$mn:00003778 ; =============== S U B R O U T I N E =======================================
.text$mn:00003778
.text$mn:00003778 ; Attributes: bp-based frame
.text$mn:00003778
.text$mn:00003778 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00003778                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00003778 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00003778                                         ; CODE XREF: std::allocator_traits<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::allocator<std::_Container_proxy> &,std::_Container_proxy *)+Ap
.text$mn:00003778                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p ...
.text$mn:00003778
.text$mn:00003778 var_4           = dword ptr -4
.text$mn:00003778
.text$mn:00003778                 push    ebp
.text$mn:00003779                 mov     ebp, esp
.text$mn:0000377B                 push    ecx
.text$mn:0000377C                 mov     [ebp+var_4], ecx
.text$mn:0000377F                 mov     esp, ebp
.text$mn:00003781                 pop     ebp
.text$mn:00003782                 retn    4
.text$mn:00003782 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00003782
.text$mn:00003782 ; ---------------------------------------------------------------------------
.text$mn:00003785                 align 4
.text$mn:00003785 _text$mn        ends
.text$mn:00003785
.text$mn:00003788 ; ===========================================================================
.text$mn:00003788
.text$mn:00003788 ; Segment type: Pure code
.text$mn:00003788 ; Segment permissions: Read/Execute
.text$mn:00003788 _text$mn        segment para public 'CODE' use32
.text$mn:00003788                 assume cs:_text$mn
.text$mn:00003788                 ;org 3788h
.text$mn:00003788 ; COMDAT (pick any)
.text$mn:00003788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003788
.text$mn:00003788 ; =============== S U B R O U T I N E =======================================
.text$mn:00003788
.text$mn:00003788 ; Attributes: bp-based frame
.text$mn:00003788
.text$mn:00003788 ; public: static void __cdecl std::allocator_traits<class std::allocator<struct std::_Container_proxy>>::destroy<struct std::_Container_proxy>(class std::allocator<struct std::_Container_proxy> &, struct std::_Container_proxy *)
.text$mn:00003788                 public ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
.text$mn:00003788 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
.text$mn:00003788                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)+Fp
.text$mn:00003788
.text$mn:00003788 arg_0           = dword ptr  8
.text$mn:00003788 arg_4           = dword ptr  0Ch
.text$mn:00003788
.text$mn:00003788                 push    ebp
.text$mn:00003789                 mov     ebp, esp
.text$mn:0000378B                 mov     eax, [ebp+arg_4]
.text$mn:0000378E                 push    eax
.text$mn:0000378F                 mov     ecx, [ebp+arg_0]
.text$mn:00003792                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00003797                 pop     ebp
.text$mn:00003798                 retn
.text$mn:00003798 ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z endp
.text$mn:00003798
.text$mn:00003798 ; ---------------------------------------------------------------------------
.text$mn:00003799                 align 4
.text$mn:00003799 _text$mn        ends
.text$mn:00003799
.text$mn:0000379C ; ===========================================================================
.text$mn:0000379C
.text$mn:0000379C ; Segment type: Pure code
.text$mn:0000379C ; Segment permissions: Read/Execute
.text$mn:0000379C _text$mn        segment para public 'CODE' use32
.text$mn:0000379C                 assume cs:_text$mn
.text$mn:0000379C                 ;org 379Ch
.text$mn:0000379C ; COMDAT (pick any)
.text$mn:0000379C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000379C
.text$mn:0000379C ; =============== S U B R O U T I N E =======================================
.text$mn:0000379C
.text$mn:0000379C ; Attributes: bp-based frame
.text$mn:0000379C
.text$mn:0000379C ; public: void __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:0000379C                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:0000379C ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:0000379C                                         ; CODE XREF: std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &,std::_Nonscalar_ptr_iterator_tag)+1Dp
.text$mn:0000379C                                         ; __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0+1Ap
.text$mn:0000379C
.text$mn:0000379C var_4           = dword ptr -4
.text$mn:0000379C arg_0           = dword ptr  8
.text$mn:0000379C
.text$mn:0000379C                 push    ebp
.text$mn:0000379D                 mov     ebp, esp
.text$mn:0000379F                 push    ecx
.text$mn:000037A0                 mov     [ebp+var_4], ecx
.text$mn:000037A3                 mov     eax, [ebp+arg_0]
.text$mn:000037A6                 push    eax
.text$mn:000037A7                 mov     ecx, [ebp+var_4]
.text$mn:000037AA                 push    ecx
.text$mn:000037AB                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000037B0                 add     esp, 8
.text$mn:000037B3                 mov     esp, ebp
.text$mn:000037B5                 pop     ebp
.text$mn:000037B6                 retn    4
.text$mn:000037B6 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:000037B6
.text$mn:000037B6 ; ---------------------------------------------------------------------------
.text$mn:000037B9                 align 4
.text$mn:000037B9 _text$mn        ends
.text$mn:000037B9
.text$mn:000037BC ; ===========================================================================
.text$mn:000037BC
.text$mn:000037BC ; Segment type: Pure code
.text$mn:000037BC ; Segment permissions: Read/Execute
.text$mn:000037BC _text$mn        segment para public 'CODE' use32
.text$mn:000037BC                 assume cs:_text$mn
.text$mn:000037BC                 ;org 37BCh
.text$mn:000037BC ; COMDAT (pick any)
.text$mn:000037BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037BC
.text$mn:000037BC ; =============== S U B R O U T I N E =======================================
.text$mn:000037BC
.text$mn:000037BC ; Attributes: bp-based frame
.text$mn:000037BC
.text$mn:000037BC ; public: void __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000037BC                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:000037BC ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:000037BC                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Ap
.text$mn:000037BC
.text$mn:000037BC var_4           = dword ptr -4
.text$mn:000037BC arg_0           = dword ptr  8
.text$mn:000037BC
.text$mn:000037BC                 push    ebp
.text$mn:000037BD                 mov     ebp, esp
.text$mn:000037BF                 push    ecx
.text$mn:000037C0                 mov     [ebp+var_4], ecx
.text$mn:000037C3                 push    0
.text$mn:000037C5                 mov     ecx, [ebp+arg_0]
.text$mn:000037C8                 call    ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)
.text$mn:000037CD                 mov     esp, ebp
.text$mn:000037CF                 pop     ebp
.text$mn:000037D0                 retn    4
.text$mn:000037D0 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:000037D0
.text$mn:000037D0 ; ---------------------------------------------------------------------------
.text$mn:000037D3                 align 4
.text$mn:000037D3 _text$mn        ends
.text$mn:000037D3
.text$mn:000037D4 ; ===========================================================================
.text$mn:000037D4
.text$mn:000037D4 ; Segment type: Pure code
.text$mn:000037D4 ; Segment permissions: Read/Execute
.text$mn:000037D4 _text$mn        segment para public 'CODE' use32
.text$mn:000037D4                 assume cs:_text$mn
.text$mn:000037D4                 ;org 37D4h
.text$mn:000037D4 ; COMDAT (pick any)
.text$mn:000037D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037D4
.text$mn:000037D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000037D4
.text$mn:000037D4 ; Attributes: bp-based frame
.text$mn:000037D4
.text$mn:000037D4 ; public: static void __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::destroy<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:000037D4                 public ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z
.text$mn:000037D4 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z proc near
.text$mn:000037D4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Fp
.text$mn:000037D4
.text$mn:000037D4 arg_0           = dword ptr  8
.text$mn:000037D4 arg_4           = dword ptr  0Ch
.text$mn:000037D4
.text$mn:000037D4                 push    ebp
.text$mn:000037D5                 mov     ebp, esp
.text$mn:000037D7                 mov     eax, [ebp+arg_4]
.text$mn:000037DA                 push    eax
.text$mn:000037DB                 mov     ecx, [ebp+arg_0]
.text$mn:000037DE                 call    ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000037E3                 pop     ebp
.text$mn:000037E4                 retn
.text$mn:000037E4 ??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z endp
.text$mn:000037E4
.text$mn:000037E4 ; ---------------------------------------------------------------------------
.text$mn:000037E5                 align 4
.text$mn:000037E5 _text$mn        ends
.text$mn:000037E5
.text$mn:000037E8 ; ===========================================================================
.text$mn:000037E8
.text$mn:000037E8 ; Segment type: Pure code
.text$mn:000037E8 ; Segment permissions: Read/Execute
.text$mn:000037E8 _text$mn        segment para public 'CODE' use32
.text$mn:000037E8                 assume cs:_text$mn
.text$mn:000037E8                 ;org 37E8h
.text$mn:000037E8 ; COMDAT (pick any)
.text$mn:000037E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037E8
.text$mn:000037E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000037E8
.text$mn:000037E8 ; Attributes: bp-based frame
.text$mn:000037E8
.text$mn:000037E8 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:000037E8                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:000037E8 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:000037E8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:000037E8                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:000037E8
.text$mn:000037E8 arg_0           = dword ptr  8
.text$mn:000037E8
.text$mn:000037E8                 push    ebp
.text$mn:000037E9                 mov     ebp, esp
.text$mn:000037EB                 mov     eax, [ebp+arg_0]
.text$mn:000037EE                 pop     ebp
.text$mn:000037EF                 retn
.text$mn:000037EF ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:000037EF
.text$mn:000037EF _text$mn        ends
.text$mn:000037EF
.text$mn:000037F0 ; ===========================================================================
.text$mn:000037F0
.text$mn:000037F0 ; Segment type: Pure code
.text$mn:000037F0 ; Segment permissions: Read/Execute
.text$mn:000037F0 _text$mn        segment para public 'CODE' use32
.text$mn:000037F0                 assume cs:_text$mn
.text$mn:000037F0                 ;org 37F0h
.text$mn:000037F0 ; COMDAT (pick any)
.text$mn:000037F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037F0
.text$mn:000037F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000037F0
.text$mn:000037F0 ; Attributes: bp-based frame
.text$mn:000037F0
.text$mn:000037F0 ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:000037F0                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:000037F0 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:000037F0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:000037F0                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:000037F0
.text$mn:000037F0 arg_0           = dword ptr  8
.text$mn:000037F0
.text$mn:000037F0                 push    ebp
.text$mn:000037F1                 mov     ebp, esp
.text$mn:000037F3                 mov     eax, [ebp+arg_0]
.text$mn:000037F6                 pop     ebp
.text$mn:000037F7                 retn
.text$mn:000037F7 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:000037F7
.text$mn:000037F7 _text$mn        ends
.text$mn:000037F7
.text$mn:000037F8 ; ===========================================================================
.text$mn:000037F8
.text$mn:000037F8 ; Segment type: Pure code
.text$mn:000037F8 ; Segment permissions: Read/Execute
.text$mn:000037F8 _text$mn        segment para public 'CODE' use32
.text$mn:000037F8                 assume cs:_text$mn
.text$mn:000037F8                 ;org 37F8h
.text$mn:000037F8 ; COMDAT (pick any)
.text$mn:000037F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000037F8
.text$mn:000037F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000037F8
.text$mn:000037F8 ; Attributes: bp-based frame
.text$mn:000037F8
.text$mn:000037F8 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:000037F8                 public ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:000037F8 ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:000037F8                                         ; CODE XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+46p
.text$mn:000037F8
.text$mn:000037F8 arg_0           = dword ptr  8
.text$mn:000037F8
.text$mn:000037F8                 push    ebp
.text$mn:000037F9                 mov     ebp, esp
.text$mn:000037FB                 mov     eax, [ebp+arg_0]
.text$mn:000037FE                 pop     ebp
.text$mn:000037FF                 retn
.text$mn:000037FF ??$forward@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:000037FF
.text$mn:000037FF _text$mn        ends
.text$mn:000037FF
.text$mn:00003800 ; ===========================================================================
.text$mn:00003800
.text$mn:00003800 ; Segment type: Pure code
.text$mn:00003800 ; Segment permissions: Read/Execute
.text$mn:00003800 _text$mn        segment para public 'CODE' use32
.text$mn:00003800                 assume cs:_text$mn
.text$mn:00003800                 ;org 3800h
.text$mn:00003800 ; COMDAT (pick any)
.text$mn:00003800                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003800
.text$mn:00003800 ; =============== S U B R O U T I N E =======================================
.text$mn:00003800
.text$mn:00003800 ; Attributes: bp-based frame
.text$mn:00003800
.text$mn:00003800 ; struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> && __cdecl std::forward<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &)
.text$mn:00003800                 public ??$forward@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z
.text$mn:00003800 ??$forward@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z proc near
.text$mn:00003800                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+Bp
.text$mn:00003800                                         ; std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+4Ap ...
.text$mn:00003800
.text$mn:00003800 arg_0           = dword ptr  8
.text$mn:00003800
.text$mn:00003800                 push    ebp
.text$mn:00003801                 mov     ebp, esp
.text$mn:00003803                 mov     eax, [ebp+arg_0]
.text$mn:00003806                 pop     ebp
.text$mn:00003807                 retn
.text$mn:00003807 ??$forward@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z endp
.text$mn:00003807
.text$mn:00003807 _text$mn        ends
.text$mn:00003807
.text$mn:00003808 ; ===========================================================================
.text$mn:00003808
.text$mn:00003808 ; Segment type: Pure code
.text$mn:00003808 ; Segment permissions: Read/Execute
.text$mn:00003808 _text$mn        segment para public 'CODE' use32
.text$mn:00003808                 assume cs:_text$mn
.text$mn:00003808                 ;org 3808h
.text$mn:00003808 ; COMDAT (pick any)
.text$mn:00003808                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003808
.text$mn:00003808 ; =============== S U B R O U T I N E =======================================
.text$mn:00003808
.text$mn:00003808 ; Attributes: bp-based frame
.text$mn:00003808
.text$mn:00003808 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00003808                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00003808 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00003808                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+Bp
.text$mn:00003808                                         ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap ...
.text$mn:00003808
.text$mn:00003808 arg_0           = dword ptr  8
.text$mn:00003808
.text$mn:00003808                 push    ebp
.text$mn:00003809                 mov     ebp, esp
.text$mn:0000380B                 mov     eax, [ebp+arg_0]
.text$mn:0000380E                 pop     ebp
.text$mn:0000380F                 retn
.text$mn:0000380F ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:0000380F
.text$mn:0000380F _text$mn        ends
.text$mn:0000380F
.text$mn:00003810 ; ===========================================================================
.text$mn:00003810
.text$mn:00003810 ; Segment type: Pure code
.text$mn:00003810 ; Segment permissions: Read/Execute
.text$mn:00003810 _text$mn        segment para public 'CODE' use32
.text$mn:00003810                 assume cs:_text$mn
.text$mn:00003810                 ;org 3810h
.text$mn:00003810 ; COMDAT (pick any)
.text$mn:00003810                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003810
.text$mn:00003810 ; =============== S U B R O U T I N E =======================================
.text$mn:00003810
.text$mn:00003810 ; Attributes: bp-based frame
.text$mn:00003810
.text$mn:00003810 ; class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> && __cdecl std::forward<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &)
.text$mn:00003810                 public ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
.text$mn:00003810 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z proc near
.text$mn:00003810                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+D6p
.text$mn:00003810
.text$mn:00003810 arg_0           = dword ptr  8
.text$mn:00003810
.text$mn:00003810                 push    ebp
.text$mn:00003811                 mov     ebp, esp
.text$mn:00003813                 mov     eax, [ebp+arg_0]
.text$mn:00003816                 pop     ebp
.text$mn:00003817                 retn
.text$mn:00003817 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z endp
.text$mn:00003817
.text$mn:00003817 _text$mn        ends
.text$mn:00003817
.text$mn:00003818 ; ===========================================================================
.text$mn:00003818
.text$mn:00003818 ; Segment type: Pure code
.text$mn:00003818 ; Segment permissions: Read/Execute
.text$mn:00003818 _text$mn        segment para public 'CODE' use32
.text$mn:00003818                 assume cs:_text$mn
.text$mn:00003818                 ;org 3818h
.text$mn:00003818 ; COMDAT (pick any)
.text$mn:00003818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003818
.text$mn:00003818 ; =============== S U B R O U T I N E =======================================
.text$mn:00003818
.text$mn:00003818 ; Attributes: bp-based frame
.text$mn:00003818
.text$mn:00003818 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00003818                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00003818 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00003818                                         ; CODE XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2Ap
.text$mn:00003818                                         ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+2Ap ...
.text$mn:00003818
.text$mn:00003818 arg_0           = dword ptr  8
.text$mn:00003818
.text$mn:00003818                 push    ebp
.text$mn:00003819                 mov     ebp, esp
.text$mn:0000381B                 mov     eax, [ebp+arg_0]
.text$mn:0000381E                 pop     ebp
.text$mn:0000381F                 retn
.text$mn:0000381F ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:0000381F
.text$mn:0000381F _text$mn        ends
.text$mn:0000381F
.text$mn:00003820 ; ===========================================================================
.text$mn:00003820
.text$mn:00003820 ; Segment type: Pure code
.text$mn:00003820 ; Segment permissions: Read/Execute
.text$mn:00003820 _text$mn        segment para public 'CODE' use32
.text$mn:00003820                 assume cs:_text$mn
.text$mn:00003820                 ;org 3820h
.text$mn:00003820 ; COMDAT (pick any)
.text$mn:00003820                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003820
.text$mn:00003820 ; =============== S U B R O U T I N E =======================================
.text$mn:00003820
.text$mn:00003820 ; Attributes: bp-based frame
.text$mn:00003820
.text$mn:00003820 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00003820                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00003820 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00003820                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+2Dp
.text$mn:00003820
.text$mn:00003820 var_10          = dword ptr -10h
.text$mn:00003820 var_C           = dword ptr -0Ch
.text$mn:00003820 var_4           = dword ptr -4
.text$mn:00003820 arg_0           = dword ptr  8
.text$mn:00003820
.text$mn:00003820                 push    ebp
.text$mn:00003821                 mov     ebp, esp
.text$mn:00003823                 push    0FFFFFFFFh
.text$mn:00003825                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:0000382A                 mov     eax, large fs:0
.text$mn:00003830                 push    eax
.text$mn:00003831                 push    ecx
.text$mn:00003832                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003837                 xor     eax, ebp
.text$mn:00003839                 push    eax
.text$mn:0000383A                 lea     eax, [ebp+var_C]
.text$mn:0000383D                 mov     large fs:0, eax
.text$mn:00003843                 mov     [ebp+var_10], ecx
.text$mn:00003846                 mov     eax, [ebp+arg_0]
.text$mn:00003849                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:0000384A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000384D                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:00003852                 mov     [ebp+var_4], 0
.text$mn:00003859                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003860                 mov     eax, [ebp+var_10]
.text$mn:00003863                 mov     ecx, [ebp+var_C]
.text$mn:00003866                 mov     large fs:0, ecx
.text$mn:0000386D                 pop     ecx
.text$mn:0000386E                 mov     esp, ebp
.text$mn:00003870                 pop     ebp
.text$mn:00003871                 retn    4
.text$mn:00003871 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00003871
.text$mn:00003871 _text$mn        ends
.text$mn:00003871
.text$x:00003874 ; ===========================================================================
.text$x:00003874
.text$x:00003874 ; Segment type: Pure code
.text$x:00003874 ; Segment permissions: Read/Execute
.text$x:00003874 _text$x         segment para public 'CODE' use32
.text$x:00003874                 assume cs:_text$x
.text$x:00003874                 ;org 3874h
.text$x:00003874 ; COMDAT (pick associative to section at 3820)
.text$x:00003874                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003874
.text$x:00003874 ; =============== S U B R O U T I N E =======================================
.text$x:00003874
.text$x:00003874
.text$x:00003874 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:00003874                                         ; DATA XREF: .xdata$x:00009D90o
.text$x:00003874                 mov     ecx, [ebp-10h]  ; this
.text$x:00003877                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00003877 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:00003877
.text$x:0000387C
.text$x:0000387C ; =============== S U B R O U T I N E =======================================
.text$x:0000387C
.text$x:0000387C
.text$x:0000387C __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:0000387C                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12> const &)+5o
.text$x:0000387C
.text$x:0000387C arg_4           = dword ptr  8
.text$x:0000387C
.text$x:0000387C                 mov     edx, [esp+arg_4]
.text$x:00003880                 lea     eax, [edx+0Ch]
.text$x:00003883                 mov     ecx, [edx-8]
.text$x:00003886                 xor     ecx, eax
.text$x:00003888                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000388D                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:00003892                 jmp     ___CxxFrameHandler3
.text$x:00003892 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:00003892
.text$x:00003892 ; ---------------------------------------------------------------------------
.text$x:00003897                 align 4
.text$x:00003897 _text$x         ends
.text$x:00003897
.text$mn:00003898 ; ===========================================================================
.text$mn:00003898
.text$mn:00003898 ; Segment type: Pure code
.text$mn:00003898 ; Segment permissions: Read/Execute
.text$mn:00003898 _text$mn        segment para public 'CODE' use32
.text$mn:00003898                 assume cs:_text$mn
.text$mn:00003898                 ;org 3898h
.text$mn:00003898 ; COMDAT (pick any)
.text$mn:00003898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003898
.text$mn:00003898 ; =============== S U B R O U T I N E =======================================
.text$mn:00003898
.text$mn:00003898 ; Attributes: bp-based frame
.text$mn:00003898
.text$mn:00003898 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, char, int, char const *, char const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, char, int, char const *, char const &, struct std::_Iterator_base12>(void)
.text$mn:00003898                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00003898 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00003898                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(char const *,std::_Container_base12 const *)+29p
.text$mn:00003898
.text$mn:00003898 var_10          = dword ptr -10h
.text$mn:00003898 var_C           = dword ptr -0Ch
.text$mn:00003898 var_4           = dword ptr -4
.text$mn:00003898
.text$mn:00003898                 push    ebp
.text$mn:00003899                 mov     ebp, esp
.text$mn:0000389B                 push    0FFFFFFFFh
.text$mn:0000389D                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:000038A2                 mov     eax, large fs:0
.text$mn:000038A8                 push    eax
.text$mn:000038A9                 push    ecx
.text$mn:000038AA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000038AF                 xor     eax, ebp
.text$mn:000038B1                 push    eax
.text$mn:000038B2                 lea     eax, [ebp+var_C]
.text$mn:000038B5                 mov     large fs:0, eax
.text$mn:000038BB                 mov     [ebp+var_10], ecx
.text$mn:000038BE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000038C1                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:000038C6                 mov     [ebp+var_4], 0
.text$mn:000038CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000038D4                 mov     eax, [ebp+var_10]
.text$mn:000038D7                 mov     ecx, [ebp+var_C]
.text$mn:000038DA                 mov     large fs:0, ecx
.text$mn:000038E1                 pop     ecx
.text$mn:000038E2                 mov     esp, ebp
.text$mn:000038E4                 pop     ebp
.text$mn:000038E5                 retn
.text$mn:000038E5 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:000038E5
.text$mn:000038E5 ; ---------------------------------------------------------------------------
.text$mn:000038E6                 align 4
.text$mn:000038E6 _text$mn        ends
.text$mn:000038E6
.text$x:000038E8 ; ===========================================================================
.text$x:000038E8
.text$x:000038E8 ; Segment type: Pure code
.text$x:000038E8 ; Segment permissions: Read/Execute
.text$x:000038E8 _text$x         segment para public 'CODE' use32
.text$x:000038E8                 assume cs:_text$x
.text$x:000038E8                 ;org 38E8h
.text$x:000038E8 ; COMDAT (pick associative to section at 3898)
.text$x:000038E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000038E8
.text$x:000038E8 ; =============== S U B R O U T I N E =======================================
.text$x:000038E8
.text$x:000038E8
.text$x:000038E8 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:000038E8                                         ; DATA XREF: .xdata$x:00009D38o
.text$x:000038E8                 mov     ecx, [ebp-10h]  ; this
.text$x:000038EB                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:000038EB __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:000038EB
.text$x:000038F0
.text$x:000038F0 ; =============== S U B R O U T I N E =======================================
.text$x:000038F0
.text$x:000038F0
.text$x:000038F0 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:000038F0                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(void)+5o
.text$x:000038F0
.text$x:000038F0 arg_4           = dword ptr  8
.text$x:000038F0
.text$x:000038F0                 mov     edx, [esp+arg_4]
.text$x:000038F4                 lea     eax, [edx+0Ch]
.text$x:000038F7                 mov     ecx, [edx-8]
.text$x:000038FA                 xor     ecx, eax
.text$x:000038FC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003901                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00003906                 jmp     ___CxxFrameHandler3
.text$x:00003906 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00003906
.text$x:00003906 ; ---------------------------------------------------------------------------
.text$x:0000390B                 align 4
.text$x:0000390B _text$x         ends
.text$x:0000390B
.text$mn:0000390C ; ===========================================================================
.text$mn:0000390C
.text$mn:0000390C ; Segment type: Pure code
.text$mn:0000390C ; Segment permissions: Read/Execute
.text$mn:0000390C _text$mn        segment para public 'CODE' use32
.text$mn:0000390C                 assume cs:_text$mn
.text$mn:0000390C                 ;org 390Ch
.text$mn:0000390C ; COMDAT (pick any)
.text$mn:0000390C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000390C
.text$mn:0000390C ; =============== S U B R O U T I N E =======================================
.text$mn:0000390C
.text$mn:0000390C ; Attributes: bp-based frame
.text$mn:0000390C
.text$mn:0000390C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:0000390C                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:0000390C ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:0000390C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:0000390C
.text$mn:0000390C var_10          = dword ptr -10h
.text$mn:0000390C var_C           = dword ptr -0Ch
.text$mn:0000390C var_4           = dword ptr -4
.text$mn:0000390C
.text$mn:0000390C                 push    ebp
.text$mn:0000390D                 mov     ebp, esp
.text$mn:0000390F                 push    0FFFFFFFFh
.text$mn:00003911                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00003916                 mov     eax, large fs:0
.text$mn:0000391C                 push    eax
.text$mn:0000391D                 push    ecx
.text$mn:0000391E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003923                 xor     eax, ebp
.text$mn:00003925                 push    eax
.text$mn:00003926                 lea     eax, [ebp+var_C]
.text$mn:00003929                 mov     large fs:0, eax
.text$mn:0000392F                 mov     [ebp+var_10], ecx
.text$mn:00003932                 mov     ecx, [ebp+var_10]
.text$mn:00003935                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:0000393A                 mov     [ebp+var_4], 0
.text$mn:00003941                 mov     ecx, [ebp+var_10]
.text$mn:00003944                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00003949                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003950                 mov     eax, [ebp+var_10]
.text$mn:00003953                 mov     ecx, [ebp+var_C]
.text$mn:00003956                 mov     large fs:0, ecx
.text$mn:0000395D                 pop     ecx
.text$mn:0000395E                 mov     esp, ebp
.text$mn:00003960                 pop     ebp
.text$mn:00003961                 retn    4
.text$mn:00003961 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00003961
.text$mn:00003961 _text$mn        ends
.text$mn:00003961
.text$x:00003964 ; ===========================================================================
.text$x:00003964
.text$x:00003964 ; Segment type: Pure code
.text$x:00003964 ; Segment permissions: Read/Execute
.text$x:00003964 _text$x         segment para public 'CODE' use32
.text$x:00003964                 assume cs:_text$x
.text$x:00003964                 ;org 3964h
.text$x:00003964 ; COMDAT (pick associative to section at 390C)
.text$x:00003964                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003964
.text$x:00003964 ; =============== S U B R O U T I N E =======================================
.text$x:00003964
.text$x:00003964
.text$x:00003964 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00003964                                         ; DATA XREF: .xdata$x:000092B0o
.text$x:00003964                 mov     ecx, [ebp-10h]
.text$x:00003967                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00003967 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:00003967
.text$x:0000396C
.text$x:0000396C ; =============== S U B R O U T I N E =======================================
.text$x:0000396C
.text$x:0000396C
.text$x:0000396C __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:0000396C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:0000396C
.text$x:0000396C arg_4           = dword ptr  8
.text$x:0000396C
.text$x:0000396C                 mov     edx, [esp+arg_4]
.text$x:00003970                 lea     eax, [edx+0Ch]
.text$x:00003973                 mov     ecx, [edx-8]
.text$x:00003976                 xor     ecx, eax
.text$x:00003978                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000397D                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:00003982                 jmp     ___CxxFrameHandler3
.text$x:00003982 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:00003982
.text$x:00003982 ; ---------------------------------------------------------------------------
.text$x:00003987                 align 4
.text$x:00003987 _text$x         ends
.text$x:00003987
.text$mn:00003988 ; ===========================================================================
.text$mn:00003988
.text$mn:00003988 ; Segment type: Pure code
.text$mn:00003988 ; Segment permissions: Read/Execute
.text$mn:00003988 _text$mn        segment para public 'CODE' use32
.text$mn:00003988                 assume cs:_text$mn
.text$mn:00003988                 ;org 3988h
.text$mn:00003988 ; COMDAT (pick any)
.text$mn:00003988                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003988
.text$mn:00003988 ; =============== S U B R O U T I N E =======================================
.text$mn:00003988
.text$mn:00003988 ; Attributes: bp-based frame
.text$mn:00003988
.text$mn:00003988 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:00003988                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00003988 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00003988                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+3Bp
.text$mn:00003988                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+38p ...
.text$mn:00003988
.text$mn:00003988 var_10          = dword ptr -10h
.text$mn:00003988 var_C           = dword ptr -0Ch
.text$mn:00003988 var_4           = dword ptr -4
.text$mn:00003988
.text$mn:00003988                 push    ebp
.text$mn:00003989                 mov     ebp, esp
.text$mn:0000398B                 push    0FFFFFFFFh
.text$mn:0000398D                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00003992                 mov     eax, large fs:0
.text$mn:00003998                 push    eax
.text$mn:00003999                 push    ecx
.text$mn:0000399A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000399F                 xor     eax, ebp
.text$mn:000039A1                 push    eax
.text$mn:000039A2                 lea     eax, [ebp+var_C]
.text$mn:000039A5                 mov     large fs:0, eax
.text$mn:000039AB                 mov     [ebp+var_10], ecx
.text$mn:000039AE                 mov     ecx, [ebp+var_10]
.text$mn:000039B1                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:000039B6                 mov     [ebp+var_4], 0
.text$mn:000039BD                 mov     ecx, [ebp+var_10]
.text$mn:000039C0                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000039C5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000039CC                 mov     eax, [ebp+var_10]
.text$mn:000039CF                 mov     ecx, [ebp+var_C]
.text$mn:000039D2                 mov     large fs:0, ecx
.text$mn:000039D9                 pop     ecx
.text$mn:000039DA                 mov     esp, ebp
.text$mn:000039DC                 pop     ebp
.text$mn:000039DD                 retn    4
.text$mn:000039DD ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:000039DD
.text$mn:000039DD _text$mn        ends
.text$mn:000039DD
.text$x:000039E0 ; ===========================================================================
.text$x:000039E0
.text$x:000039E0 ; Segment type: Pure code
.text$x:000039E0 ; Segment permissions: Read/Execute
.text$x:000039E0 _text$x         segment para public 'CODE' use32
.text$x:000039E0                 assume cs:_text$x
.text$x:000039E0                 ;org 39E0h
.text$x:000039E0 ; COMDAT (pick associative to section at 3988)
.text$x:000039E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000039E0
.text$x:000039E0 ; =============== S U B R O U T I N E =======================================
.text$x:000039E0
.text$x:000039E0
.text$x:000039E0 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:000039E0                                         ; DATA XREF: .xdata$x:000097A8o
.text$x:000039E0                 mov     ecx, [ebp-10h]
.text$x:000039E3                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:000039E3 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:000039E3
.text$x:000039E8
.text$x:000039E8 ; =============== S U B R O U T I N E =======================================
.text$x:000039E8
.text$x:000039E8
.text$x:000039E8 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:000039E8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:000039E8
.text$x:000039E8 arg_4           = dword ptr  8
.text$x:000039E8
.text$x:000039E8                 mov     edx, [esp+arg_4]
.text$x:000039EC                 lea     eax, [edx+0Ch]
.text$x:000039EF                 mov     ecx, [edx-8]
.text$x:000039F2                 xor     ecx, eax
.text$x:000039F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000039F9                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:000039FE                 jmp     ___CxxFrameHandler3
.text$x:000039FE __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:000039FE
.text$x:000039FE ; ---------------------------------------------------------------------------
.text$x:00003A03                 align 4
.text$x:00003A03 _text$x         ends
.text$x:00003A03
.text$mn:00003A04 ; ===========================================================================
.text$mn:00003A04
.text$mn:00003A04 ; Segment type: Pure code
.text$mn:00003A04 ; Segment permissions: Read/Execute
.text$mn:00003A04 _text$mn        segment para public 'CODE' use32
.text$mn:00003A04                 assume cs:_text$mn
.text$mn:00003A04                 ;org 3A04h
.text$mn:00003A04 ; COMDAT (pick any)
.text$mn:00003A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A04
.text$mn:00003A04 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A04
.text$mn:00003A04 ; Attributes: bp-based frame
.text$mn:00003A04
.text$mn:00003A04 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(struct std::_Iterator_base12 *)
.text$mn:00003A04                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00003A04 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00003A04                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+90p
.text$mn:00003A04                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+C7p ...
.text$mn:00003A04
.text$mn:00003A04 var_10          = dword ptr -10h
.text$mn:00003A04 var_C           = dword ptr -0Ch
.text$mn:00003A04 var_4           = dword ptr -4
.text$mn:00003A04 arg_0           = dword ptr  8
.text$mn:00003A04
.text$mn:00003A04                 push    ebp
.text$mn:00003A05                 mov     ebp, esp
.text$mn:00003A07                 push    0FFFFFFFFh
.text$mn:00003A09                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00003A0E                 mov     eax, large fs:0
.text$mn:00003A14                 push    eax
.text$mn:00003A15                 push    ecx
.text$mn:00003A16                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003A1B                 xor     eax, ebp
.text$mn:00003A1D                 push    eax
.text$mn:00003A1E                 lea     eax, [ebp+var_C]
.text$mn:00003A21                 mov     large fs:0, eax
.text$mn:00003A27                 mov     [ebp+var_10], ecx
.text$mn:00003A2A                 mov     eax, [ebp+arg_0]
.text$mn:00003A2D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00003A2E                 mov     ecx, [ebp+var_10]
.text$mn:00003A31                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12> const &)
.text$mn:00003A36                 mov     [ebp+var_4], 0
.text$mn:00003A3D                 mov     ecx, [ebp+var_10]
.text$mn:00003A40                 mov     edx, [ebp+arg_0]
.text$mn:00003A43                 mov     eax, [edx+8]
.text$mn:00003A46                 mov     [ecx+8], eax
.text$mn:00003A49                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003A50                 mov     eax, [ebp+var_10]
.text$mn:00003A53                 mov     ecx, [ebp+var_C]
.text$mn:00003A56                 mov     large fs:0, ecx
.text$mn:00003A5D                 pop     ecx
.text$mn:00003A5E                 mov     esp, ebp
.text$mn:00003A60                 pop     ebp
.text$mn:00003A61                 retn    4
.text$mn:00003A61 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00003A61
.text$mn:00003A61 _text$mn        ends
.text$mn:00003A61
.text$x:00003A64 ; ===========================================================================
.text$x:00003A64
.text$x:00003A64 ; Segment type: Pure code
.text$x:00003A64 ; Segment permissions: Read/Execute
.text$x:00003A64 _text$x         segment para public 'CODE' use32
.text$x:00003A64                 assume cs:_text$x
.text$x:00003A64                 ;org 3A64h
.text$x:00003A64 ; COMDAT (pick associative to section at 3A04)
.text$x:00003A64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003A64
.text$x:00003A64 ; =============== S U B R O U T I N E =======================================
.text$x:00003A64
.text$x:00003A64
.text$x:00003A64 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00003A64                                         ; DATA XREF: .xdata$x:00009E14o
.text$x:00003A64                 mov     ecx, [ebp-10h]
.text$x:00003A67                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(void)
.text$x:00003A67 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00003A67
.text$x:00003A6C
.text$x:00003A6C ; =============== S U B R O U T I N E =======================================
.text$x:00003A6C
.text$x:00003A6C
.text$x:00003A6C __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00003A6C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+5o
.text$x:00003A6C
.text$x:00003A6C arg_4           = dword ptr  8
.text$x:00003A6C
.text$x:00003A6C                 mov     edx, [esp+arg_4]
.text$x:00003A70                 lea     eax, [edx+0Ch]
.text$x:00003A73                 mov     ecx, [edx-8]
.text$x:00003A76                 xor     ecx, eax
.text$x:00003A78                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003A7D                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00003A82                 jmp     ___CxxFrameHandler3
.text$x:00003A82 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00003A82
.text$x:00003A82 ; ---------------------------------------------------------------------------
.text$x:00003A87                 align 4
.text$x:00003A87 _text$x         ends
.text$x:00003A87
.text$mn:00003A88 ; ===========================================================================
.text$mn:00003A88
.text$mn:00003A88 ; Segment type: Pure code
.text$mn:00003A88 ; Segment permissions: Read/Execute
.text$mn:00003A88 _text$mn        segment para public 'CODE' use32
.text$mn:00003A88                 assume cs:_text$mn
.text$mn:00003A88                 ;org 3A88h
.text$mn:00003A88 ; COMDAT (pick any)
.text$mn:00003A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003A88
.text$mn:00003A88 ; =============== S U B R O U T I N E =======================================
.text$mn:00003A88
.text$mn:00003A88 ; Attributes: bp-based frame
.text$mn:00003A88
.text$mn:00003A88 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(int, struct std::_Container_base12 *)
.text$mn:00003A88                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
.text$mn:00003A88 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z proc near
.text$mn:00003A88                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(char *,std::_Container_base12 const *)+31p
.text$mn:00003A88
.text$mn:00003A88 var_10          = dword ptr -10h
.text$mn:00003A88 var_C           = dword ptr -0Ch
.text$mn:00003A88 var_4           = dword ptr -4
.text$mn:00003A88 arg_0           = dword ptr  8
.text$mn:00003A88 arg_4           = dword ptr  0Ch
.text$mn:00003A88
.text$mn:00003A88                 push    ebp
.text$mn:00003A89                 mov     ebp, esp
.text$mn:00003A8B                 push    0FFFFFFFFh
.text$mn:00003A8D                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
.text$mn:00003A92                 mov     eax, large fs:0
.text$mn:00003A98                 push    eax
.text$mn:00003A99                 push    ecx
.text$mn:00003A9A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003A9F                 xor     eax, ebp
.text$mn:00003AA1                 push    eax
.text$mn:00003AA2                 lea     eax, [ebp+var_C]
.text$mn:00003AA5                 mov     large fs:0, eax
.text$mn:00003AAB                 mov     [ebp+var_10], ecx
.text$mn:00003AAE                 mov     ecx, [ebp+var_10]
.text$mn:00003AB1                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(void)
.text$mn:00003AB6                 mov     [ebp+var_4], 0
.text$mn:00003ABD                 mov     eax, [ebp+arg_4]
.text$mn:00003AC0                 push    eax             ; struct std::_Container_base12 *
.text$mn:00003AC1                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003AC4                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00003AC9                 mov     ecx, [ebp+var_10]
.text$mn:00003ACC                 mov     edx, [ebp+arg_0]
.text$mn:00003ACF                 mov     [ecx+8], edx
.text$mn:00003AD2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003AD9                 mov     eax, [ebp+var_10]
.text$mn:00003ADC                 mov     ecx, [ebp+var_C]
.text$mn:00003ADF                 mov     large fs:0, ecx
.text$mn:00003AE6                 pop     ecx
.text$mn:00003AE7                 mov     esp, ebp
.text$mn:00003AE9                 pop     ebp
.text$mn:00003AEA                 retn    8
.text$mn:00003AEA ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z endp
.text$mn:00003AEA
.text$mn:00003AEA ; ---------------------------------------------------------------------------
.text$mn:00003AED                 align 10h
.text$mn:00003AED _text$mn        ends
.text$mn:00003AED
.text$x:00003AF0 ; ===========================================================================
.text$x:00003AF0
.text$x:00003AF0 ; Segment type: Pure code
.text$x:00003AF0 ; Segment permissions: Read/Execute
.text$x:00003AF0 _text$x         segment para public 'CODE' use32
.text$x:00003AF0                 assume cs:_text$x
.text$x:00003AF0                 ;org 3AF0h
.text$x:00003AF0 ; COMDAT (pick associative to section at 3A88)
.text$x:00003AF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003AF0
.text$x:00003AF0 ; =============== S U B R O U T I N E =======================================
.text$x:00003AF0
.text$x:00003AF0
.text$x:00003AF0 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z$0 proc near
.text$x:00003AF0                                         ; DATA XREF: .xdata$x:00009DBCo
.text$x:00003AF0                 mov     ecx, [ebp-10h]
.text$x:00003AF3                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(void)
.text$x:00003AF3 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z$0 endp
.text$x:00003AF3
.text$x:00003AF8
.text$x:00003AF8 ; =============== S U B R O U T I N E =======================================
.text$x:00003AF8
.text$x:00003AF8
.text$x:00003AF8 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z proc near
.text$x:00003AF8                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(char const *,std::_Container_base12 const *)+5o
.text$x:00003AF8
.text$x:00003AF8 arg_4           = dword ptr  8
.text$x:00003AF8
.text$x:00003AF8                 mov     edx, [esp+arg_4]
.text$x:00003AFC                 lea     eax, [edx+0Ch]
.text$x:00003AFF                 mov     ecx, [edx-8]
.text$x:00003B02                 xor     ecx, eax
.text$x:00003B04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B09                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
.text$x:00003B0E                 jmp     ___CxxFrameHandler3
.text$x:00003B0E __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z endp
.text$x:00003B0E
.text$x:00003B0E ; ---------------------------------------------------------------------------
.text$x:00003B13                 align 4
.text$x:00003B13 _text$x         ends
.text$x:00003B13
.text$mn:00003B14 ; ===========================================================================
.text$mn:00003B14
.text$mn:00003B14 ; Segment type: Pure code
.text$mn:00003B14 ; Segment permissions: Read/Execute
.text$mn:00003B14 _text$mn        segment para public 'CODE' use32
.text$mn:00003B14                 assume cs:_text$mn
.text$mn:00003B14                 ;org 3B14h
.text$mn:00003B14 ; COMDAT (pick any)
.text$mn:00003B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B14
.text$mn:00003B14 ; =============== S U B R O U T I N E =======================================
.text$mn:00003B14
.text$mn:00003B14 ; Attributes: bp-based frame
.text$mn:00003B14
.text$mn:00003B14 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(struct std::_Iterator_base12 *)
.text$mn:00003B14                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00003B14 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00003B14                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+76p
.text$mn:00003B14                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+94p ...
.text$mn:00003B14
.text$mn:00003B14 var_10          = dword ptr -10h
.text$mn:00003B14 var_C           = dword ptr -0Ch
.text$mn:00003B14 var_4           = dword ptr -4
.text$mn:00003B14 arg_0           = dword ptr  8
.text$mn:00003B14
.text$mn:00003B14                 push    ebp
.text$mn:00003B15                 mov     ebp, esp
.text$mn:00003B17                 push    0FFFFFFFFh
.text$mn:00003B19                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00003B1E                 mov     eax, large fs:0
.text$mn:00003B24                 push    eax
.text$mn:00003B25                 push    ecx
.text$mn:00003B26                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003B2B                 xor     eax, ebp
.text$mn:00003B2D                 push    eax
.text$mn:00003B2E                 lea     eax, [ebp+var_C]
.text$mn:00003B31                 mov     large fs:0, eax
.text$mn:00003B37                 mov     [ebp+var_10], ecx
.text$mn:00003B3A                 mov     eax, [ebp+arg_0]
.text$mn:00003B3D                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00003B3E                 mov     ecx, [ebp+var_10]
.text$mn:00003B41                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00003B46                 mov     [ebp+var_4], 0
.text$mn:00003B4D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003B54                 mov     eax, [ebp+var_10]
.text$mn:00003B57                 mov     ecx, [ebp+var_C]
.text$mn:00003B5A                 mov     large fs:0, ecx
.text$mn:00003B61                 pop     ecx
.text$mn:00003B62                 mov     esp, ebp
.text$mn:00003B64                 pop     ebp
.text$mn:00003B65                 retn    4
.text$mn:00003B65 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00003B65
.text$mn:00003B65 _text$mn        ends
.text$mn:00003B65
.text$x:00003B68 ; ===========================================================================
.text$x:00003B68
.text$x:00003B68 ; Segment type: Pure code
.text$x:00003B68 ; Segment permissions: Read/Execute
.text$x:00003B68 _text$x         segment para public 'CODE' use32
.text$x:00003B68                 assume cs:_text$x
.text$x:00003B68                 ;org 3B68h
.text$x:00003B68 ; COMDAT (pick associative to section at 3B14)
.text$x:00003B68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003B68
.text$x:00003B68 ; =============== S U B R O U T I N E =======================================
.text$x:00003B68
.text$x:00003B68
.text$x:00003B68 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00003B68                                         ; DATA XREF: .xdata$x:00009EC4o
.text$x:00003B68                 mov     ecx, [ebp-10h]
.text$x:00003B6B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00003B6B __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00003B6B
.text$x:00003B70
.text$x:00003B70 ; =============== S U B R O U T I N E =======================================
.text$x:00003B70
.text$x:00003B70
.text$x:00003B70 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00003B70                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>> const &)+5o
.text$x:00003B70
.text$x:00003B70 arg_4           = dword ptr  8
.text$x:00003B70
.text$x:00003B70                 mov     edx, [esp+arg_4]
.text$x:00003B74                 lea     eax, [edx+0Ch]
.text$x:00003B77                 mov     ecx, [edx-8]
.text$x:00003B7A                 xor     ecx, eax
.text$x:00003B7C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003B81                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00003B86                 jmp     ___CxxFrameHandler3
.text$x:00003B86 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00003B86
.text$x:00003B86 ; ---------------------------------------------------------------------------
.text$x:00003B8B                 align 4
.text$x:00003B8B _text$x         ends
.text$x:00003B8B
.text$mn:00003B8C ; ===========================================================================
.text$mn:00003B8C
.text$mn:00003B8C ; Segment type: Pure code
.text$mn:00003B8C ; Segment permissions: Read/Execute
.text$mn:00003B8C _text$mn        segment para public 'CODE' use32
.text$mn:00003B8C                 assume cs:_text$mn
.text$mn:00003B8C                 ;org 3B8Ch
.text$mn:00003B8C ; COMDAT (pick any)
.text$mn:00003B8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003B8C
.text$mn:00003B8C ; =============== S U B R O U T I N E =======================================
.text$mn:00003B8C
.text$mn:00003B8C ; Attributes: bp-based frame
.text$mn:00003B8C
.text$mn:00003B8C ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(int, struct std::_Container_base12 *)
.text$mn:00003B8C                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
.text$mn:00003B8C ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z proc near
.text$mn:00003B8C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin(void)+3Fp
.text$mn:00003B8C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::end(void)+45p
.text$mn:00003B8C
.text$mn:00003B8C var_10          = dword ptr -10h
.text$mn:00003B8C var_C           = dword ptr -0Ch
.text$mn:00003B8C var_4           = dword ptr -4
.text$mn:00003B8C arg_0           = dword ptr  8
.text$mn:00003B8C arg_4           = dword ptr  0Ch
.text$mn:00003B8C
.text$mn:00003B8C                 push    ebp
.text$mn:00003B8D                 mov     ebp, esp
.text$mn:00003B8F                 push    0FFFFFFFFh
.text$mn:00003B91                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
.text$mn:00003B96                 mov     eax, large fs:0
.text$mn:00003B9C                 push    eax
.text$mn:00003B9D                 push    ecx
.text$mn:00003B9E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003BA3                 xor     eax, ebp
.text$mn:00003BA5                 push    eax
.text$mn:00003BA6                 lea     eax, [ebp+var_C]
.text$mn:00003BA9                 mov     large fs:0, eax
.text$mn:00003BAF                 mov     [ebp+var_10], ecx
.text$mn:00003BB2                 mov     eax, [ebp+arg_4]
.text$mn:00003BB5                 push    eax             ; struct std::_Container_base12 *
.text$mn:00003BB6                 mov     ecx, [ebp+arg_0]
.text$mn:00003BB9                 push    ecx             ; int
.text$mn:00003BBA                 mov     ecx, [ebp+var_10]
.text$mn:00003BBD                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(char const *,std::_Container_base12 const *)
.text$mn:00003BC2                 mov     [ebp+var_4], 0
.text$mn:00003BC9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003BD0                 mov     eax, [ebp+var_10]
.text$mn:00003BD3                 mov     ecx, [ebp+var_C]
.text$mn:00003BD6                 mov     large fs:0, ecx
.text$mn:00003BDD                 pop     ecx
.text$mn:00003BDE                 mov     esp, ebp
.text$mn:00003BE0                 pop     ebp
.text$mn:00003BE1                 retn    8
.text$mn:00003BE1 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z endp
.text$mn:00003BE1
.text$mn:00003BE1 _text$mn        ends
.text$mn:00003BE1
.text$x:00003BE4 ; ===========================================================================
.text$x:00003BE4
.text$x:00003BE4 ; Segment type: Pure code
.text$x:00003BE4 ; Segment permissions: Read/Execute
.text$x:00003BE4 _text$x         segment para public 'CODE' use32
.text$x:00003BE4                 assume cs:_text$x
.text$x:00003BE4                 ;org 3BE4h
.text$x:00003BE4 ; COMDAT (pick associative to section at 3B8C)
.text$x:00003BE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003BE4
.text$x:00003BE4 ; =============== S U B R O U T I N E =======================================
.text$x:00003BE4
.text$x:00003BE4
.text$x:00003BE4 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z$0 proc near
.text$x:00003BE4                                         ; DATA XREF: .xdata$x:00009E40o
.text$x:00003BE4                 mov     ecx, [ebp-10h]
.text$x:00003BE7                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00003BE7 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z$0 endp
.text$x:00003BE7
.text$x:00003BEC
.text$x:00003BEC ; =============== S U B R O U T I N E =======================================
.text$x:00003BEC
.text$x:00003BEC
.text$x:00003BEC __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z proc near
.text$x:00003BEC                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(char *,std::_Container_base12 const *)+5o
.text$x:00003BEC
.text$x:00003BEC arg_4           = dword ptr  8
.text$x:00003BEC
.text$x:00003BEC                 mov     edx, [esp+arg_4]
.text$x:00003BF0                 lea     eax, [edx+0Ch]
.text$x:00003BF3                 mov     ecx, [edx-8]
.text$x:00003BF6                 xor     ecx, eax
.text$x:00003BF8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003BFD                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
.text$x:00003C02                 jmp     ___CxxFrameHandler3
.text$x:00003C02 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z endp
.text$x:00003C02
.text$x:00003C02 ; ---------------------------------------------------------------------------
.text$x:00003C07                 align 4
.text$x:00003C07 _text$x         ends
.text$x:00003C07
.text$mn:00003C08 ; ===========================================================================
.text$mn:00003C08
.text$mn:00003C08 ; Segment type: Pure code
.text$mn:00003C08 ; Segment permissions: Read/Execute
.text$mn:00003C08 _text$mn        segment para public 'CODE' use32
.text$mn:00003C08                 assume cs:_text$mn
.text$mn:00003C08                 ;org 3C08h
.text$mn:00003C08 ; COMDAT (pick any)
.text$mn:00003C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C08
.text$mn:00003C08 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C08
.text$mn:00003C08 ; Attributes: bp-based frame
.text$mn:00003C08
.text$mn:00003C08 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00003C08                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00003C08 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00003C08                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:00003C08
.text$mn:00003C08 var_10          = dword ptr -10h
.text$mn:00003C08 var_C           = dword ptr -0Ch
.text$mn:00003C08 var_4           = dword ptr -4
.text$mn:00003C08
.text$mn:00003C08                 push    ebp
.text$mn:00003C09                 mov     ebp, esp
.text$mn:00003C0B                 push    0FFFFFFFFh
.text$mn:00003C0D                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00003C12                 mov     eax, large fs:0
.text$mn:00003C18                 push    eax
.text$mn:00003C19                 push    ecx
.text$mn:00003C1A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003C1F                 xor     eax, ebp
.text$mn:00003C21                 push    eax
.text$mn:00003C22                 lea     eax, [ebp+var_C]
.text$mn:00003C25                 mov     large fs:0, eax
.text$mn:00003C2B                 mov     [ebp+var_10], ecx
.text$mn:00003C2E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003C31                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00003C36                 mov     [ebp+var_4], 0
.text$mn:00003C3D                 mov     eax, [ebp+var_10]
.text$mn:00003C40                 mov     dword ptr [eax+14h], 0
.text$mn:00003C47                 mov     ecx, [ebp+var_10]
.text$mn:00003C4A                 mov     dword ptr [ecx+18h], 0
.text$mn:00003C51                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003C58                 mov     eax, [ebp+var_10]
.text$mn:00003C5B                 mov     ecx, [ebp+var_C]
.text$mn:00003C5E                 mov     large fs:0, ecx
.text$mn:00003C65                 pop     ecx
.text$mn:00003C66                 mov     esp, ebp
.text$mn:00003C68                 pop     ebp
.text$mn:00003C69                 retn
.text$mn:00003C69 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:00003C69
.text$mn:00003C69 ; ---------------------------------------------------------------------------
.text$mn:00003C6A                 align 4
.text$mn:00003C6A _text$mn        ends
.text$mn:00003C6A
.text$x:00003C6C ; ===========================================================================
.text$x:00003C6C
.text$x:00003C6C ; Segment type: Pure code
.text$x:00003C6C ; Segment permissions: Read/Execute
.text$x:00003C6C _text$x         segment para public 'CODE' use32
.text$x:00003C6C                 assume cs:_text$x
.text$x:00003C6C                 ;org 3C6Ch
.text$x:00003C6C ; COMDAT (pick associative to section at 3C08)
.text$x:00003C6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003C6C
.text$x:00003C6C ; =============== S U B R O U T I N E =======================================
.text$x:00003C6C
.text$x:00003C6C
.text$x:00003C6C __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00003C6C                                         ; DATA XREF: .xdata$x:00009258o
.text$x:00003C6C                 mov     ecx, [ebp-10h]  ; this
.text$x:00003C6F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00003C6F __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00003C6F
.text$x:00003C74
.text$x:00003C74 ; =============== S U B R O U T I N E =======================================
.text$x:00003C74
.text$x:00003C74
.text$x:00003C74 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00003C74                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00003C74
.text$x:00003C74 arg_4           = dword ptr  8
.text$x:00003C74
.text$x:00003C74                 mov     edx, [esp+arg_4]
.text$x:00003C78                 lea     eax, [edx+0Ch]
.text$x:00003C7B                 mov     ecx, [edx-8]
.text$x:00003C7E                 xor     ecx, eax
.text$x:00003C80                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003C85                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:00003C8A                 jmp     ___CxxFrameHandler3
.text$x:00003C8A __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:00003C8A
.text$x:00003C8A ; ---------------------------------------------------------------------------
.text$x:00003C8F                 align 10h
.text$x:00003C8F _text$x         ends
.text$x:00003C8F
.text$mn:00003C90 ; ===========================================================================
.text$mn:00003C90
.text$mn:00003C90 ; Segment type: Pure code
.text$mn:00003C90 ; Segment permissions: Read/Execute
.text$mn:00003C90 _text$mn        segment para public 'CODE' use32
.text$mn:00003C90                 assume cs:_text$mn
.text$mn:00003C90                 ;org 3C90h
.text$mn:00003C90 ; COMDAT (pick any)
.text$mn:00003C90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003C90
.text$mn:00003C90 ; =============== S U B R O U T I N E =======================================
.text$mn:00003C90
.text$mn:00003C90 ; Attributes: bp-based frame
.text$mn:00003C90
.text$mn:00003C90 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00003C90                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00003C90 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00003C90                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:00003C90
.text$mn:00003C90 var_10          = dword ptr -10h
.text$mn:00003C90 var_C           = dword ptr -0Ch
.text$mn:00003C90 var_4           = dword ptr -4
.text$mn:00003C90
.text$mn:00003C90                 push    ebp
.text$mn:00003C91                 mov     ebp, esp
.text$mn:00003C93                 push    0FFFFFFFFh
.text$mn:00003C95                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00003C9A                 mov     eax, large fs:0
.text$mn:00003CA0                 push    eax
.text$mn:00003CA1                 push    ecx
.text$mn:00003CA2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003CA7                 xor     eax, ebp
.text$mn:00003CA9                 push    eax
.text$mn:00003CAA                 lea     eax, [ebp+var_C]
.text$mn:00003CAD                 mov     large fs:0, eax
.text$mn:00003CB3                 mov     [ebp+var_10], ecx
.text$mn:00003CB6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003CB9                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00003CBE                 mov     [ebp+var_4], 0
.text$mn:00003CC5                 mov     eax, [ebp+var_10]
.text$mn:00003CC8                 mov     dword ptr [eax+14h], 0
.text$mn:00003CCF                 mov     ecx, [ebp+var_10]
.text$mn:00003CD2                 mov     dword ptr [ecx+18h], 0
.text$mn:00003CD9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003CE0                 mov     eax, [ebp+var_10]
.text$mn:00003CE3                 mov     ecx, [ebp+var_C]
.text$mn:00003CE6                 mov     large fs:0, ecx
.text$mn:00003CED                 pop     ecx
.text$mn:00003CEE                 mov     esp, ebp
.text$mn:00003CF0                 pop     ebp
.text$mn:00003CF1                 retn
.text$mn:00003CF1 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00003CF1
.text$mn:00003CF1 ; ---------------------------------------------------------------------------
.text$mn:00003CF2                 align 4
.text$mn:00003CF2 _text$mn        ends
.text$mn:00003CF2
.text$x:00003CF4 ; ===========================================================================
.text$x:00003CF4
.text$x:00003CF4 ; Segment type: Pure code
.text$x:00003CF4 ; Segment permissions: Read/Execute
.text$x:00003CF4 _text$x         segment para public 'CODE' use32
.text$x:00003CF4                 assume cs:_text$x
.text$x:00003CF4                 ;org 3CF4h
.text$x:00003CF4 ; COMDAT (pick associative to section at 3C90)
.text$x:00003CF4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003CF4
.text$x:00003CF4 ; =============== S U B R O U T I N E =======================================
.text$x:00003CF4
.text$x:00003CF4
.text$x:00003CF4 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00003CF4                                         ; DATA XREF: .xdata$x:00009750o
.text$x:00003CF4                 mov     ecx, [ebp-10h]  ; this
.text$x:00003CF7                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00003CF7 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00003CF7
.text$x:00003CFC
.text$x:00003CFC ; =============== S U B R O U T I N E =======================================
.text$x:00003CFC
.text$x:00003CFC
.text$x:00003CFC __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00003CFC                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00003CFC
.text$x:00003CFC arg_4           = dword ptr  8
.text$x:00003CFC
.text$x:00003CFC                 mov     edx, [esp+arg_4]
.text$x:00003D00                 lea     eax, [edx+0Ch]
.text$x:00003D03                 mov     ecx, [edx-8]
.text$x:00003D06                 xor     ecx, eax
.text$x:00003D08                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D0D                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00003D12                 jmp     ___CxxFrameHandler3
.text$x:00003D12 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00003D12
.text$x:00003D12 ; ---------------------------------------------------------------------------
.text$x:00003D17                 align 4
.text$x:00003D17 _text$x         ends
.text$x:00003D17
.text$mn:00003D18 ; ===========================================================================
.text$mn:00003D18
.text$mn:00003D18 ; Segment type: Pure code
.text$mn:00003D18 ; Segment permissions: Read/Execute
.text$mn:00003D18 _text$mn        segment para public 'CODE' use32
.text$mn:00003D18                 assume cs:_text$mn
.text$mn:00003D18                 ;org 3D18h
.text$mn:00003D18 ; COMDAT (pick any)
.text$mn:00003D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D18
.text$mn:00003D18 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D18
.text$mn:00003D18 ; Attributes: bp-based frame
.text$mn:00003D18
.text$mn:00003D18 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:00003D18                 public ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00003D18 ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$mn:00003D18                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+34p
.text$mn:00003D18
.text$mn:00003D18 var_10          = dword ptr -10h
.text$mn:00003D18 var_C           = dword ptr -0Ch
.text$mn:00003D18 var_4           = dword ptr -4
.text$mn:00003D18
.text$mn:00003D18                 push    ebp
.text$mn:00003D19                 mov     ebp, esp
.text$mn:00003D1B                 push    0FFFFFFFFh
.text$mn:00003D1D                 push    offset __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$mn:00003D22                 mov     eax, large fs:0
.text$mn:00003D28                 push    eax
.text$mn:00003D29                 push    ecx
.text$mn:00003D2A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003D2F                 xor     eax, ebp
.text$mn:00003D31                 push    eax
.text$mn:00003D32                 lea     eax, [ebp+var_C]
.text$mn:00003D35                 mov     large fs:0, eax
.text$mn:00003D3B                 mov     [ebp+var_10], ecx
.text$mn:00003D3E                 mov     ecx, [ebp+var_10]
.text$mn:00003D41                 call    ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00003D46                 mov     [ebp+var_4], 0
.text$mn:00003D4D                 mov     ecx, [ebp+var_10]
.text$mn:00003D50                 call    ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:00003D55                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003D5C                 mov     eax, [ebp+var_10]
.text$mn:00003D5F                 mov     ecx, [ebp+var_C]
.text$mn:00003D62                 mov     large fs:0, ecx
.text$mn:00003D69                 pop     ecx
.text$mn:00003D6A                 mov     esp, ebp
.text$mn:00003D6C                 pop     ebp
.text$mn:00003D6D                 retn    4
.text$mn:00003D6D ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$mn:00003D6D
.text$mn:00003D6D _text$mn        ends
.text$mn:00003D6D
.text$x:00003D70 ; ===========================================================================
.text$x:00003D70
.text$x:00003D70 ; Segment type: Pure code
.text$x:00003D70 ; Segment permissions: Read/Execute
.text$x:00003D70 _text$x         segment para public 'CODE' use32
.text$x:00003D70                 assume cs:_text$x
.text$x:00003D70                 ;org 3D70h
.text$x:00003D70 ; COMDAT (pick associative to section at 3D18)
.text$x:00003D70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003D70
.text$x:00003D70 ; =============== S U B R O U T I N E =======================================
.text$x:00003D70
.text$x:00003D70
.text$x:00003D70 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 proc near
.text$x:00003D70                                         ; DATA XREF: .xdata$x:000099C0o
.text$x:00003D70                 mov     ecx, [ebp-10h]
.text$x:00003D73                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:00003D73 __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 endp
.text$x:00003D73
.text$x:00003D78
.text$x:00003D78 ; =============== S U B R O U T I N E =======================================
.text$x:00003D78
.text$x:00003D78
.text$x:00003D78 __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z proc near
.text$x:00003D78                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+5o
.text$x:00003D78
.text$x:00003D78 arg_4           = dword ptr  8
.text$x:00003D78
.text$x:00003D78                 mov     edx, [esp+arg_4]
.text$x:00003D7C                 lea     eax, [edx+0Ch]
.text$x:00003D7F                 mov     ecx, [edx-8]
.text$x:00003D82                 xor     ecx, eax
.text$x:00003D84                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003D89                 mov     eax, offset __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.text$x:00003D8E                 jmp     ___CxxFrameHandler3
.text$x:00003D8E __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z endp
.text$x:00003D8E
.text$x:00003D8E ; ---------------------------------------------------------------------------
.text$x:00003D93                 align 4
.text$x:00003D93 _text$x         ends
.text$x:00003D93
.text$mn:00003D94 ; ===========================================================================
.text$mn:00003D94
.text$mn:00003D94 ; Segment type: Pure code
.text$mn:00003D94 ; Segment permissions: Read/Execute
.text$mn:00003D94 _text$mn        segment para public 'CODE' use32
.text$mn:00003D94                 assume cs:_text$mn
.text$mn:00003D94                 ;org 3D94h
.text$mn:00003D94 ; COMDAT (pick any)
.text$mn:00003D94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003D94
.text$mn:00003D94 ; =============== S U B R O U T I N E =======================================
.text$mn:00003D94
.text$mn:00003D94 ; Attributes: bp-based frame
.text$mn:00003D94
.text$mn:00003D94 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00003D94                 public ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00003D94 ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00003D94                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+29p
.text$mn:00003D94
.text$mn:00003D94 var_10          = dword ptr -10h
.text$mn:00003D94 var_C           = dword ptr -0Ch
.text$mn:00003D94 var_4           = dword ptr -4
.text$mn:00003D94
.text$mn:00003D94                 push    ebp
.text$mn:00003D95                 mov     ebp, esp
.text$mn:00003D97                 push    0FFFFFFFFh
.text$mn:00003D99                 push    offset __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00003D9E                 mov     eax, large fs:0
.text$mn:00003DA4                 push    eax
.text$mn:00003DA5                 push    ecx
.text$mn:00003DA6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003DAB                 xor     eax, ebp
.text$mn:00003DAD                 push    eax
.text$mn:00003DAE                 lea     eax, [ebp+var_C]
.text$mn:00003DB1                 mov     large fs:0, eax
.text$mn:00003DB7                 mov     [ebp+var_10], ecx
.text$mn:00003DBA                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003DBD                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00003DC2                 mov     [ebp+var_4], 0
.text$mn:00003DC9                 mov     eax, [ebp+var_10]
.text$mn:00003DCC                 mov     dword ptr [eax+4], 0
.text$mn:00003DD3                 mov     ecx, [ebp+var_10]
.text$mn:00003DD6                 mov     dword ptr [ecx+8], 0
.text$mn:00003DDD                 mov     edx, [ebp+var_10]
.text$mn:00003DE0                 mov     dword ptr [edx+0Ch], 0
.text$mn:00003DE7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003DEE                 mov     eax, [ebp+var_10]
.text$mn:00003DF1                 mov     ecx, [ebp+var_C]
.text$mn:00003DF4                 mov     large fs:0, ecx
.text$mn:00003DFB                 pop     ecx
.text$mn:00003DFC                 mov     esp, ebp
.text$mn:00003DFE                 pop     ebp
.text$mn:00003DFF                 retn
.text$mn:00003DFF ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00003DFF
.text$mn:00003DFF _text$mn        ends
.text$mn:00003DFF
.text$x:00003E00 ; ===========================================================================
.text$x:00003E00
.text$x:00003E00 ; Segment type: Pure code
.text$x:00003E00 ; Segment permissions: Read/Execute
.text$x:00003E00 _text$x         segment para public 'CODE' use32
.text$x:00003E00                 assume cs:_text$x
.text$x:00003E00                 ;org 3E00h
.text$x:00003E00 ; COMDAT (pick associative to section at 3D94)
.text$x:00003E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003E00
.text$x:00003E00 ; =============== S U B R O U T I N E =======================================
.text$x:00003E00
.text$x:00003E00
.text$x:00003E00 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00003E00                                         ; DATA XREF: .xdata$x:00009968o
.text$x:00003E00                 mov     ecx, [ebp-10h]  ; this
.text$x:00003E03                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00003E03 __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00003E03
.text$x:00003E08
.text$x:00003E08 ; =============== S U B R O U T I N E =======================================
.text$x:00003E08
.text$x:00003E08
.text$x:00003E08 __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00003E08                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00003E08
.text$x:00003E08 arg_4           = dword ptr  8
.text$x:00003E08
.text$x:00003E08                 mov     edx, [esp+arg_4]
.text$x:00003E0C                 lea     eax, [edx+0Ch]
.text$x:00003E0F                 mov     ecx, [edx-8]
.text$x:00003E12                 xor     ecx, eax
.text$x:00003E14                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003E19                 mov     eax, offset __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:00003E1E                 jmp     ___CxxFrameHandler3
.text$x:00003E1E __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:00003E1E
.text$x:00003E1E ; ---------------------------------------------------------------------------
.text$x:00003E23                 align 4
.text$x:00003E23 _text$x         ends
.text$x:00003E23
.text$mn:00003E24 ; ===========================================================================
.text$mn:00003E24
.text$mn:00003E24 ; Segment type: Pure code
.text$mn:00003E24 ; Segment permissions: Read/Execute
.text$mn:00003E24 _text$mn        segment para public 'CODE' use32
.text$mn:00003E24                 assume cs:_text$mn
.text$mn:00003E24                 ;org 3E24h
.text$mn:00003E24 ; COMDAT (pick any)
.text$mn:00003E24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E24
.text$mn:00003E24 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E24
.text$mn:00003E24 ; Attributes: bp-based frame
.text$mn:00003E24
.text$mn:00003E24 ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:00003E24                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:00003E24 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:00003E24                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:00003E24
.text$mn:00003E24 var_4           = dword ptr -4
.text$mn:00003E24
.text$mn:00003E24                 push    ebp
.text$mn:00003E25                 mov     ebp, esp
.text$mn:00003E27                 push    ecx
.text$mn:00003E28                 mov     [ebp+var_4], ecx
.text$mn:00003E2B                 mov     ecx, [ebp+var_4]
.text$mn:00003E2E                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00003E33                 mov     eax, [ebp+var_4]
.text$mn:00003E36                 mov     esp, ebp
.text$mn:00003E38                 pop     ebp
.text$mn:00003E39                 retn
.text$mn:00003E39 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:00003E39
.text$mn:00003E39 ; ---------------------------------------------------------------------------
.text$mn:00003E3A                 align 4
.text$mn:00003E3A _text$mn        ends
.text$mn:00003E3A
.text$mn:00003E3C ; ===========================================================================
.text$mn:00003E3C
.text$mn:00003E3C ; Segment type: Pure code
.text$mn:00003E3C ; Segment permissions: Read/Execute
.text$mn:00003E3C _text$mn        segment para public 'CODE' use32
.text$mn:00003E3C                 assume cs:_text$mn
.text$mn:00003E3C                 ;org 3E3Ch
.text$mn:00003E3C ; COMDAT (pick any)
.text$mn:00003E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E3C
.text$mn:00003E3C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E3C
.text$mn:00003E3C ; Attributes: bp-based frame
.text$mn:00003E3C
.text$mn:00003E3C ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:00003E3C                 public ??0?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAE@XZ
.text$mn:00003E3C ??0?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00003E3C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)+Ap
.text$mn:00003E3C
.text$mn:00003E3C var_4           = dword ptr -4
.text$mn:00003E3C
.text$mn:00003E3C                 push    ebp
.text$mn:00003E3D                 mov     ebp, esp
.text$mn:00003E3F                 push    ecx
.text$mn:00003E40                 mov     [ebp+var_4], ecx
.text$mn:00003E43                 mov     ecx, [ebp+var_4]
.text$mn:00003E46                 call    ??0?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAE@XZ ; std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:00003E4B                 mov     eax, [ebp+var_4]
.text$mn:00003E4E                 mov     esp, ebp
.text$mn:00003E50                 pop     ebp
.text$mn:00003E51                 retn
.text$mn:00003E51 ??0?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00003E51
.text$mn:00003E51 ; ---------------------------------------------------------------------------
.text$mn:00003E52                 align 4
.text$mn:00003E52 _text$mn        ends
.text$mn:00003E52
.text$mn:00003E54 ; ===========================================================================
.text$mn:00003E54
.text$mn:00003E54 ; Segment type: Pure code
.text$mn:00003E54 ; Segment permissions: Read/Execute
.text$mn:00003E54 _text$mn        segment para public 'CODE' use32
.text$mn:00003E54                 assume cs:_text$mn
.text$mn:00003E54                 ;org 3E54h
.text$mn:00003E54 ; COMDAT (pick any)
.text$mn:00003E54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E54
.text$mn:00003E54 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E54
.text$mn:00003E54 ; Attributes: bp-based frame
.text$mn:00003E54
.text$mn:00003E54 ; public: __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>(void)
.text$mn:00003E54                 public ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
.text$mn:00003E54 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00003E54                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+Cp
.text$mn:00003E54                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+Cp
.text$mn:00003E54
.text$mn:00003E54 var_4           = dword ptr -4
.text$mn:00003E54
.text$mn:00003E54                 push    ebp
.text$mn:00003E55                 mov     ebp, esp
.text$mn:00003E57                 push    ecx
.text$mn:00003E58                 mov     [ebp+var_4], ecx
.text$mn:00003E5B                 mov     ecx, [ebp+var_4]
.text$mn:00003E5E                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00003E63                 mov     eax, [ebp+var_4]
.text$mn:00003E66                 mov     esp, ebp
.text$mn:00003E68                 pop     ebp
.text$mn:00003E69                 retn
.text$mn:00003E69 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ endp
.text$mn:00003E69
.text$mn:00003E69 ; ---------------------------------------------------------------------------
.text$mn:00003E6A                 align 4
.text$mn:00003E6A _text$mn        ends
.text$mn:00003E6A
.text$mn:00003E6C ; ===========================================================================
.text$mn:00003E6C
.text$mn:00003E6C ; Segment type: Pure code
.text$mn:00003E6C ; Segment permissions: Read/Execute
.text$mn:00003E6C _text$mn        segment para public 'CODE' use32
.text$mn:00003E6C                 assume cs:_text$mn
.text$mn:00003E6C                 ;org 3E6Ch
.text$mn:00003E6C ; COMDAT (pick any)
.text$mn:00003E6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E6C
.text$mn:00003E6C ; =============== S U B R O U T I N E =======================================
.text$mn:00003E6C
.text$mn:00003E6C ; Attributes: bp-based frame
.text$mn:00003E6C
.text$mn:00003E6C ; public: __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00003E6C                 public ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:00003E6C ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00003E6C                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)+Ap
.text$mn:00003E6C
.text$mn:00003E6C var_4           = dword ptr -4
.text$mn:00003E6C
.text$mn:00003E6C                 push    ebp
.text$mn:00003E6D                 mov     ebp, esp
.text$mn:00003E6F                 push    ecx
.text$mn:00003E70                 mov     [ebp+var_4], ecx
.text$mn:00003E73                 mov     ecx, [ebp+var_4]
.text$mn:00003E76                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:00003E7B                 mov     eax, [ebp+var_4]
.text$mn:00003E7E                 mov     esp, ebp
.text$mn:00003E80                 pop     ebp
.text$mn:00003E81                 retn
.text$mn:00003E81 ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00003E81
.text$mn:00003E81 ; ---------------------------------------------------------------------------
.text$mn:00003E82                 align 4
.text$mn:00003E82 _text$mn        ends
.text$mn:00003E82
.text$mn:00003E84 ; ===========================================================================
.text$mn:00003E84
.text$mn:00003E84 ; Segment type: Pure code
.text$mn:00003E84 ; Segment permissions: Read/Execute
.text$mn:00003E84 _text$mn        segment para public 'CODE' use32
.text$mn:00003E84                 assume cs:_text$mn
.text$mn:00003E84                 ;org 3E84h
.text$mn:00003E84 ; COMDAT (pick any)
.text$mn:00003E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003E84
.text$mn:00003E84 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E84
.text$mn:00003E84 ; Attributes: bp-based frame
.text$mn:00003E84
.text$mn:00003E84 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:00003E84                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00003E84 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00003E84                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:00003E84
.text$mn:00003E84 var_4           = dword ptr -4
.text$mn:00003E84 arg_0           = dword ptr  8
.text$mn:00003E84
.text$mn:00003E84                 push    ebp
.text$mn:00003E85                 mov     ebp, esp
.text$mn:00003E87                 push    ecx
.text$mn:00003E88                 mov     [ebp+var_4], ecx
.text$mn:00003E8B                 mov     eax, [ebp+arg_0]
.text$mn:00003E8E                 push    eax
.text$mn:00003E8F                 mov     ecx, [ebp+var_4]
.text$mn:00003E92                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00003E97                 mov     eax, [ebp+var_4]
.text$mn:00003E9A                 mov     esp, ebp
.text$mn:00003E9C                 pop     ebp
.text$mn:00003E9D                 retn    4
.text$mn:00003E9D ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00003E9D
.text$mn:00003E9D _text$mn        ends
.text$mn:00003E9D
.text$mn:00003EA0 ; ===========================================================================
.text$mn:00003EA0
.text$mn:00003EA0 ; Segment type: Pure code
.text$mn:00003EA0 ; Segment permissions: Read/Execute
.text$mn:00003EA0 _text$mn        segment para public 'CODE' use32
.text$mn:00003EA0                 assume cs:_text$mn
.text$mn:00003EA0                 ;org 3EA0h
.text$mn:00003EA0 ; COMDAT (pick any)
.text$mn:00003EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EA0
.text$mn:00003EA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EA0
.text$mn:00003EA0 ; Attributes: bp-based frame
.text$mn:00003EA0
.text$mn:00003EA0 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:00003EA0                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:00003EA0 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:00003EA0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:00003EA0
.text$mn:00003EA0 var_4           = dword ptr -4
.text$mn:00003EA0
.text$mn:00003EA0                 push    ebp
.text$mn:00003EA1                 mov     ebp, esp
.text$mn:00003EA3                 push    ecx
.text$mn:00003EA4                 mov     [ebp+var_4], ecx
.text$mn:00003EA7                 mov     ecx, [ebp+var_4]
.text$mn:00003EAA                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00003EAF                 mov     eax, [ebp+var_4]
.text$mn:00003EB2                 mov     esp, ebp
.text$mn:00003EB4                 pop     ebp
.text$mn:00003EB5                 retn
.text$mn:00003EB5 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00003EB5
.text$mn:00003EB5 ; ---------------------------------------------------------------------------
.text$mn:00003EB6                 align 4
.text$mn:00003EB6 _text$mn        ends
.text$mn:00003EB6
.text$mn:00003EB8 ; ===========================================================================
.text$mn:00003EB8
.text$mn:00003EB8 ; Segment type: Pure code
.text$mn:00003EB8 ; Segment permissions: Read/Execute
.text$mn:00003EB8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EB8                 assume cs:_text$mn
.text$mn:00003EB8                 ;org 3EB8h
.text$mn:00003EB8 ; COMDAT (pick any)
.text$mn:00003EB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EB8
.text$mn:00003EB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EB8
.text$mn:00003EB8 ; Attributes: bp-based frame
.text$mn:00003EB8
.text$mn:00003EB8 ; public: __thiscall std::allocator<char>::allocator<char>(class std::allocator<char> const &)
.text$mn:00003EB8                 public ??0?$allocator@D@std@@QAE@ABV01@@Z
.text$mn:00003EB8 ??0?$allocator@D@std@@QAE@ABV01@@Z proc near
.text$mn:00003EB8                                         ; CODE XREF: std::operator==<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+Bp
.text$mn:00003EB8                                         ; std::operator==<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)+18p
.text$mn:00003EB8
.text$mn:00003EB8 var_4           = dword ptr -4
.text$mn:00003EB8
.text$mn:00003EB8                 push    ebp
.text$mn:00003EB9                 mov     ebp, esp
.text$mn:00003EBB                 push    ecx
.text$mn:00003EBC                 mov     [ebp+var_4], ecx
.text$mn:00003EBF                 mov     eax, [ebp+var_4]
.text$mn:00003EC2                 mov     esp, ebp
.text$mn:00003EC4                 pop     ebp
.text$mn:00003EC5                 retn    4
.text$mn:00003EC5 ??0?$allocator@D@std@@QAE@ABV01@@Z endp
.text$mn:00003EC5
.text$mn:00003EC5 _text$mn        ends
.text$mn:00003EC5
.text$mn:00003EC8 ; ===========================================================================
.text$mn:00003EC8
.text$mn:00003EC8 ; Segment type: Pure code
.text$mn:00003EC8 ; Segment permissions: Read/Execute
.text$mn:00003EC8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EC8                 assume cs:_text$mn
.text$mn:00003EC8                 ;org 3EC8h
.text$mn:00003EC8 ; COMDAT (pick any)
.text$mn:00003EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EC8
.text$mn:00003EC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EC8
.text$mn:00003EC8 ; Attributes: bp-based frame
.text$mn:00003EC8
.text$mn:00003EC8 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00003EC8                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00003EC8 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00003EC8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00003EC8
.text$mn:00003EC8 var_4           = dword ptr -4
.text$mn:00003EC8
.text$mn:00003EC8                 push    ebp
.text$mn:00003EC9                 mov     ebp, esp
.text$mn:00003ECB                 push    ecx
.text$mn:00003ECC                 mov     [ebp+var_4], ecx
.text$mn:00003ECF                 mov     eax, [ebp+var_4]
.text$mn:00003ED2                 mov     esp, ebp
.text$mn:00003ED4                 pop     ebp
.text$mn:00003ED5                 retn
.text$mn:00003ED5 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00003ED5
.text$mn:00003ED5 ; ---------------------------------------------------------------------------
.text$mn:00003ED6                 align 4
.text$mn:00003ED6 _text$mn        ends
.text$mn:00003ED6
.text$mn:00003ED8 ; ===========================================================================
.text$mn:00003ED8
.text$mn:00003ED8 ; Segment type: Pure code
.text$mn:00003ED8 ; Segment permissions: Read/Execute
.text$mn:00003ED8 _text$mn        segment para public 'CODE' use32
.text$mn:00003ED8                 assume cs:_text$mn
.text$mn:00003ED8                 ;org 3ED8h
.text$mn:00003ED8 ; COMDAT (pick any)
.text$mn:00003ED8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003ED8
.text$mn:00003ED8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003ED8
.text$mn:00003ED8 ; Attributes: bp-based frame
.text$mn:00003ED8
.text$mn:00003ED8 ; public: __thiscall std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00003ED8                 public ??0?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAE@XZ
.text$mn:00003ED8 ??0?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAE@XZ proc near
.text$mn:00003ED8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+Ap
.text$mn:00003ED8
.text$mn:00003ED8 var_4           = dword ptr -4
.text$mn:00003ED8
.text$mn:00003ED8                 push    ebp
.text$mn:00003ED9                 mov     ebp, esp
.text$mn:00003EDB                 push    ecx
.text$mn:00003EDC                 mov     [ebp+var_4], ecx
.text$mn:00003EDF                 mov     eax, [ebp+var_4]
.text$mn:00003EE2                 mov     esp, ebp
.text$mn:00003EE4                 pop     ebp
.text$mn:00003EE5                 retn
.text$mn:00003EE5 ??0?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAE@XZ endp
.text$mn:00003EE5
.text$mn:00003EE5 ; ---------------------------------------------------------------------------
.text$mn:00003EE6                 align 4
.text$mn:00003EE6 _text$mn        ends
.text$mn:00003EE6
.text$mn:00003EE8 ; ===========================================================================
.text$mn:00003EE8
.text$mn:00003EE8 ; Segment type: Pure code
.text$mn:00003EE8 ; Segment permissions: Read/Execute
.text$mn:00003EE8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EE8                 assume cs:_text$mn
.text$mn:00003EE8                 ;org 3EE8h
.text$mn:00003EE8 ; COMDAT (pick any)
.text$mn:00003EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EE8
.text$mn:00003EE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EE8
.text$mn:00003EE8 ; Attributes: bp-based frame
.text$mn:00003EE8
.text$mn:00003EE8 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00003EE8                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00003EE8 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00003EE8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)+Ap
.text$mn:00003EE8                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00003EE8
.text$mn:00003EE8 var_4           = dword ptr -4
.text$mn:00003EE8
.text$mn:00003EE8                 push    ebp
.text$mn:00003EE9                 mov     ebp, esp
.text$mn:00003EEB                 push    ecx
.text$mn:00003EEC                 mov     [ebp+var_4], ecx
.text$mn:00003EEF                 mov     eax, [ebp+var_4]
.text$mn:00003EF2                 mov     esp, ebp
.text$mn:00003EF4                 pop     ebp
.text$mn:00003EF5                 retn
.text$mn:00003EF5 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00003EF5
.text$mn:00003EF5 ; ---------------------------------------------------------------------------
.text$mn:00003EF6                 align 4
.text$mn:00003EF6 _text$mn        ends
.text$mn:00003EF6
.text$mn:00003EF8 ; ===========================================================================
.text$mn:00003EF8
.text$mn:00003EF8 ; Segment type: Pure code
.text$mn:00003EF8 ; Segment permissions: Read/Execute
.text$mn:00003EF8 _text$mn        segment para public 'CODE' use32
.text$mn:00003EF8                 assume cs:_text$mn
.text$mn:00003EF8                 ;org 3EF8h
.text$mn:00003EF8 ; COMDAT (pick any)
.text$mn:00003EF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003EF8
.text$mn:00003EF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00003EF8
.text$mn:00003EF8 ; Attributes: bp-based frame
.text$mn:00003EF8
.text$mn:00003EF8 ; public: __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(void)
.text$mn:00003EF8                 public ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
.text$mn:00003EF8 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ proc near
.text$mn:00003EF8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+Ap
.text$mn:00003EF8                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+2Bp
.text$mn:00003EF8
.text$mn:00003EF8 var_4           = dword ptr -4
.text$mn:00003EF8
.text$mn:00003EF8                 push    ebp
.text$mn:00003EF9                 mov     ebp, esp
.text$mn:00003EFB                 push    ecx
.text$mn:00003EFC                 mov     [ebp+var_4], ecx
.text$mn:00003EFF                 mov     eax, [ebp+var_4]
.text$mn:00003F02                 mov     esp, ebp
.text$mn:00003F04                 pop     ebp
.text$mn:00003F05                 retn
.text$mn:00003F05 ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ endp
.text$mn:00003F05
.text$mn:00003F05 ; ---------------------------------------------------------------------------
.text$mn:00003F06                 align 4
.text$mn:00003F06 _text$mn        ends
.text$mn:00003F06
.text$mn:00003F08 ; ===========================================================================
.text$mn:00003F08
.text$mn:00003F08 ; Segment type: Pure code
.text$mn:00003F08 ; Segment permissions: Read/Execute
.text$mn:00003F08 _text$mn        segment para public 'CODE' use32
.text$mn:00003F08                 assume cs:_text$mn
.text$mn:00003F08                 ;org 3F08h
.text$mn:00003F08 ; COMDAT (pick any)
.text$mn:00003F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F08
.text$mn:00003F08 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F08
.text$mn:00003F08 ; Attributes: bp-based frame
.text$mn:00003F08
.text$mn:00003F08 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:00003F08                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:00003F08 ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:00003F08                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)+Ep
.text$mn:00003F08                                         ; std::allocator<wchar_t>::select_on_container_copy_construction(void)+Ep
.text$mn:00003F08
.text$mn:00003F08 var_4           = dword ptr -4
.text$mn:00003F08
.text$mn:00003F08                 push    ebp
.text$mn:00003F09                 mov     ebp, esp
.text$mn:00003F0B                 push    ecx
.text$mn:00003F0C                 mov     [ebp+var_4], ecx
.text$mn:00003F0F                 mov     eax, [ebp+var_4]
.text$mn:00003F12                 mov     esp, ebp
.text$mn:00003F14                 pop     ebp
.text$mn:00003F15                 retn    4
.text$mn:00003F15 ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:00003F15
.text$mn:00003F15 _text$mn        ends
.text$mn:00003F15
.text$mn:00003F18 ; ===========================================================================
.text$mn:00003F18
.text$mn:00003F18 ; Segment type: Pure code
.text$mn:00003F18 ; Segment permissions: Read/Execute
.text$mn:00003F18 _text$mn        segment para public 'CODE' use32
.text$mn:00003F18                 assume cs:_text$mn
.text$mn:00003F18                 ;org 3F18h
.text$mn:00003F18 ; COMDAT (pick any)
.text$mn:00003F18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F18
.text$mn:00003F18 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F18
.text$mn:00003F18 ; Attributes: bp-based frame
.text$mn:00003F18
.text$mn:00003F18 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00003F18                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:00003F18 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+32p
.text$mn:00003F18                                         ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap ...
.text$mn:00003F18
.text$mn:00003F18 var_4           = dword ptr -4
.text$mn:00003F18
.text$mn:00003F18                 push    ebp
.text$mn:00003F19                 mov     ebp, esp
.text$mn:00003F1B                 push    ecx
.text$mn:00003F1C                 mov     [ebp+var_4], ecx
.text$mn:00003F1F                 mov     eax, [ebp+var_4]
.text$mn:00003F22                 mov     esp, ebp
.text$mn:00003F24                 pop     ebp
.text$mn:00003F25                 retn
.text$mn:00003F25 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:00003F25
.text$mn:00003F25 ; ---------------------------------------------------------------------------
.text$mn:00003F26                 align 4
.text$mn:00003F26 _text$mn        ends
.text$mn:00003F26
.text$mn:00003F28 ; ===========================================================================
.text$mn:00003F28
.text$mn:00003F28 ; Segment type: Pure code
.text$mn:00003F28 ; Segment permissions: Read/Execute
.text$mn:00003F28 _text$mn        segment para public 'CODE' use32
.text$mn:00003F28                 assume cs:_text$mn
.text$mn:00003F28                 ;org 3F28h
.text$mn:00003F28 ; COMDAT (pick any)
.text$mn:00003F28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003F28
.text$mn:00003F28 ; =============== S U B R O U T I N E =======================================
.text$mn:00003F28
.text$mn:00003F28 ; Attributes: bp-based frame
.text$mn:00003F28
.text$mn:00003F28 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:00003F28                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00003F28 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:00003F28                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+BE3p
.text$mn:00003F28                                         ; std::_Generic_error_category::message(int)+5Ap ...
.text$mn:00003F28
.text$mn:00003F28 var_14          = dword ptr -14h
.text$mn:00003F28 var_D           = byte ptr -0Dh
.text$mn:00003F28 var_C           = dword ptr -0Ch
.text$mn:00003F28 var_4           = dword ptr -4
.text$mn:00003F28 Str             = dword ptr  8
.text$mn:00003F28
.text$mn:00003F28                 push    ebp
.text$mn:00003F29                 mov     ebp, esp
.text$mn:00003F2B                 push    0FFFFFFFFh
.text$mn:00003F2D                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00003F32                 mov     eax, large fs:0
.text$mn:00003F38                 push    eax
.text$mn:00003F39                 sub     esp, 8
.text$mn:00003F3C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003F41                 xor     eax, ebp
.text$mn:00003F43                 push    eax
.text$mn:00003F44                 lea     eax, [ebp+var_C]
.text$mn:00003F47                 mov     large fs:0, eax
.text$mn:00003F4D                 mov     [ebp+var_14], ecx
.text$mn:00003F50                 lea     ecx, [ebp+var_D]
.text$mn:00003F53                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00003F58                 push    eax
.text$mn:00003F59                 mov     ecx, [ebp+var_14]
.text$mn:00003F5C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00003F61                 mov     [ebp+var_4], 0
.text$mn:00003F68                 push    0               ; Size
.text$mn:00003F6A                 push    0               ; char
.text$mn:00003F6C                 mov     ecx, [ebp+var_14]
.text$mn:00003F6F                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00003F74                 mov     eax, [ebp+Str]
.text$mn:00003F77                 push    eax             ; Str
.text$mn:00003F78                 mov     ecx, [ebp+var_14]
.text$mn:00003F7B                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00003F80                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00003F87                 mov     eax, [ebp+var_14]
.text$mn:00003F8A                 mov     ecx, [ebp+var_C]
.text$mn:00003F8D                 mov     large fs:0, ecx
.text$mn:00003F94                 pop     ecx
.text$mn:00003F95                 mov     esp, ebp
.text$mn:00003F97                 pop     ebp
.text$mn:00003F98                 retn    4
.text$mn:00003F98 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:00003F98
.text$mn:00003F98 ; ---------------------------------------------------------------------------
.text$mn:00003F9B                 align 4
.text$mn:00003F9B _text$mn        ends
.text$mn:00003F9B
.text$x:00003F9C ; ===========================================================================
.text$x:00003F9C
.text$x:00003F9C ; Segment type: Pure code
.text$x:00003F9C ; Segment permissions: Read/Execute
.text$x:00003F9C _text$x         segment para public 'CODE' use32
.text$x:00003F9C                 assume cs:_text$x
.text$x:00003F9C                 ;org 3F9Ch
.text$x:00003F9C ; COMDAT (pick associative to section at 3F28)
.text$x:00003F9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00003F9C
.text$x:00003F9C ; =============== S U B R O U T I N E =======================================
.text$x:00003F9C
.text$x:00003F9C
.text$x:00003F9C __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:00003F9C                                         ; DATA XREF: .xdata$x:00009308o
.text$x:00003F9C                 mov     ecx, [ebp-14h]
.text$x:00003F9F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00003F9F __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:00003F9F
.text$x:00003FA4
.text$x:00003FA4 ; =============== S U B R O U T I N E =======================================
.text$x:00003FA4
.text$x:00003FA4
.text$x:00003FA4 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:00003FA4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:00003FA4
.text$x:00003FA4 arg_4           = dword ptr  8
.text$x:00003FA4
.text$x:00003FA4                 mov     edx, [esp+arg_4]
.text$x:00003FA8                 lea     eax, [edx+0Ch]
.text$x:00003FAB                 mov     ecx, [edx-0Ch]
.text$x:00003FAE                 xor     ecx, eax
.text$x:00003FB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00003FB5                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:00003FBA                 jmp     ___CxxFrameHandler3
.text$x:00003FBA __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:00003FBA
.text$x:00003FBA ; ---------------------------------------------------------------------------
.text$x:00003FBF                 align 10h
.text$x:00003FBF _text$x         ends
.text$x:00003FBF
.text$mn:00003FC0 ; ===========================================================================
.text$mn:00003FC0
.text$mn:00003FC0 ; Segment type: Pure code
.text$mn:00003FC0 ; Segment permissions: Read/Execute
.text$mn:00003FC0 _text$mn        segment para public 'CODE' use32
.text$mn:00003FC0                 assume cs:_text$mn
.text$mn:00003FC0                 ;org 3FC0h
.text$mn:00003FC0 ; COMDAT (pick any)
.text$mn:00003FC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00003FC0
.text$mn:00003FC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00003FC0
.text$mn:00003FC0 ; Attributes: bp-based frame
.text$mn:00003FC0
.text$mn:00003FC0 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00003FC0                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00003FC0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$mn:00003FC0                                         ; CODE XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+36p
.text$mn:00003FC0                                         ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+36p ...
.text$mn:00003FC0
.text$mn:00003FC0 var_14          = dword ptr -14h
.text$mn:00003FC0 var_D           = byte ptr -0Dh
.text$mn:00003FC0 var_C           = dword ptr -0Ch
.text$mn:00003FC0 var_4           = dword ptr -4
.text$mn:00003FC0 arg_0           = dword ptr  8
.text$mn:00003FC0
.text$mn:00003FC0                 push    ebp
.text$mn:00003FC1                 mov     ebp, esp
.text$mn:00003FC3                 push    0FFFFFFFFh
.text$mn:00003FC5                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$mn:00003FCA                 mov     eax, large fs:0
.text$mn:00003FD0                 push    eax
.text$mn:00003FD1                 sub     esp, 8
.text$mn:00003FD4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00003FD9                 xor     eax, ebp
.text$mn:00003FDB                 push    eax
.text$mn:00003FDC                 lea     eax, [ebp+var_C]
.text$mn:00003FDF                 mov     large fs:0, eax
.text$mn:00003FE5                 mov     [ebp+var_14], ecx
.text$mn:00003FE8                 lea     eax, [ebp+var_D]
.text$mn:00003FEB                 push    eax
.text$mn:00003FEC                 mov     ecx, [ebp+arg_0]
.text$mn:00003FEF                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00003FF4                 push    eax
.text$mn:00003FF5                 mov     ecx, [ebp+var_14]
.text$mn:00003FF8                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00003FFD                 mov     [ebp+var_4], 0
.text$mn:00004004                 push    0
.text$mn:00004006                 push    0
.text$mn:00004008                 mov     ecx, [ebp+var_14]
.text$mn:0000400B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004010                 mov     ecx, [ebp+arg_0]
.text$mn:00004013                 push    ecx
.text$mn:00004014                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00004019                 add     esp, 4
.text$mn:0000401C                 push    eax
.text$mn:0000401D                 mov     ecx, [ebp+var_14]
.text$mn:00004020                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00004025                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000402C                 mov     eax, [ebp+var_14]
.text$mn:0000402F                 mov     ecx, [ebp+var_C]
.text$mn:00004032                 mov     large fs:0, ecx
.text$mn:00004039                 pop     ecx
.text$mn:0000403A                 mov     esp, ebp
.text$mn:0000403C                 pop     ebp
.text$mn:0000403D                 retn    4
.text$mn:0000403D ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$mn:0000403D
.text$mn:0000403D _text$mn        ends
.text$mn:0000403D
.text$x:00004040 ; ===========================================================================
.text$x:00004040
.text$x:00004040 ; Segment type: Pure code
.text$x:00004040 ; Segment permissions: Read/Execute
.text$x:00004040 _text$x         segment para public 'CODE' use32
.text$x:00004040                 assume cs:_text$x
.text$x:00004040                 ;org 4040h
.text$x:00004040 ; COMDAT (pick associative to section at 3FC0)
.text$x:00004040                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004040
.text$x:00004040 ; =============== S U B R O U T I N E =======================================
.text$x:00004040
.text$x:00004040
.text$x:00004040 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 proc near
.text$x:00004040                                         ; DATA XREF: .xdata$x:00009884o
.text$x:00004040                 mov     ecx, [ebp-14h]
.text$x:00004043                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00004043 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 endp
.text$x:00004043
.text$x:00004048
.text$x:00004048 ; =============== S U B R O U T I N E =======================================
.text$x:00004048
.text$x:00004048
.text$x:00004048 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z proc near
.text$x:00004048                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00004048
.text$x:00004048 arg_4           = dword ptr  8
.text$x:00004048
.text$x:00004048                 mov     edx, [esp+arg_4]
.text$x:0000404C                 lea     eax, [edx+0Ch]
.text$x:0000404F                 mov     ecx, [edx-0Ch]
.text$x:00004052                 xor     ecx, eax
.text$x:00004054                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004059                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.text$x:0000405E                 jmp     ___CxxFrameHandler3
.text$x:0000405E __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z endp
.text$x:0000405E
.text$x:0000405E ; ---------------------------------------------------------------------------
.text$x:00004063                 align 4
.text$x:00004063 _text$x         ends
.text$x:00004063
.text$mn:00004064 ; ===========================================================================
.text$mn:00004064
.text$mn:00004064 ; Segment type: Pure code
.text$mn:00004064 ; Segment permissions: Read/Execute
.text$mn:00004064 _text$mn        segment para public 'CODE' use32
.text$mn:00004064                 assume cs:_text$mn
.text$mn:00004064                 ;org 4064h
.text$mn:00004064 ; COMDAT (pick any)
.text$mn:00004064                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004064
.text$mn:00004064 ; =============== S U B R O U T I N E =======================================
.text$mn:00004064
.text$mn:00004064 ; Attributes: bp-based frame
.text$mn:00004064
.text$mn:00004064 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00004064                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:00004064 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:00004064                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+62Bp
.text$mn:00004064                                         ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+55p ...
.text$mn:00004064
.text$mn:00004064 var_14          = dword ptr -14h
.text$mn:00004064 var_E           = byte ptr -0Eh
.text$mn:00004064 var_D           = byte ptr -0Dh
.text$mn:00004064 var_C           = dword ptr -0Ch
.text$mn:00004064 var_4           = dword ptr -4
.text$mn:00004064 arg_0           = dword ptr  8
.text$mn:00004064
.text$mn:00004064                 push    ebp
.text$mn:00004065                 mov     ebp, esp
.text$mn:00004067                 push    0FFFFFFFFh
.text$mn:00004069                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:0000406E                 mov     eax, large fs:0
.text$mn:00004074                 push    eax
.text$mn:00004075                 sub     esp, 8
.text$mn:00004078                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000407D                 xor     eax, ebp
.text$mn:0000407F                 push    eax
.text$mn:00004080                 lea     eax, [ebp+var_C]
.text$mn:00004083                 mov     large fs:0, eax
.text$mn:00004089                 mov     [ebp+var_14], ecx
.text$mn:0000408C                 lea     eax, [ebp+var_D]
.text$mn:0000408F                 push    eax
.text$mn:00004090                 lea     ecx, [ebp+var_E]
.text$mn:00004093                 push    ecx
.text$mn:00004094                 mov     ecx, [ebp+arg_0]
.text$mn:00004097                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000409C                 mov     ecx, eax
.text$mn:0000409E                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:000040A3                 push    eax
.text$mn:000040A4                 mov     ecx, [ebp+var_14]
.text$mn:000040A7                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000040AC                 mov     [ebp+var_4], 0
.text$mn:000040B3                 push    0
.text$mn:000040B5                 push    0
.text$mn:000040B7                 mov     ecx, [ebp+var_14]
.text$mn:000040BA                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000040BF                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:000040C5                 push    edx
.text$mn:000040C6                 push    0
.text$mn:000040C8                 mov     eax, [ebp+arg_0]
.text$mn:000040CB                 push    eax
.text$mn:000040CC                 mov     ecx, [ebp+var_14]
.text$mn:000040CF                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000040D4                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000040DB                 mov     eax, [ebp+var_14]
.text$mn:000040DE                 mov     ecx, [ebp+var_C]
.text$mn:000040E1                 mov     large fs:0, ecx
.text$mn:000040E8                 pop     ecx
.text$mn:000040E9                 mov     esp, ebp
.text$mn:000040EB                 pop     ebp
.text$mn:000040EC                 retn    4
.text$mn:000040EC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:000040EC
.text$mn:000040EC ; ---------------------------------------------------------------------------
.text$mn:000040EF                 align 10h
.text$mn:000040EF _text$mn        ends
.text$mn:000040EF
.text$x:000040F0 ; ===========================================================================
.text$x:000040F0
.text$x:000040F0 ; Segment type: Pure code
.text$x:000040F0 ; Segment permissions: Read/Execute
.text$x:000040F0 _text$x         segment para public 'CODE' use32
.text$x:000040F0                 assume cs:_text$x
.text$x:000040F0                 ;org 40F0h
.text$x:000040F0 ; COMDAT (pick associative to section at 4064)
.text$x:000040F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000040F0
.text$x:000040F0 ; =============== S U B R O U T I N E =======================================
.text$x:000040F0
.text$x:000040F0
.text$x:000040F0 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:000040F0                                         ; DATA XREF: .xdata$x:00009800o
.text$x:000040F0                 mov     ecx, [ebp-14h]
.text$x:000040F3                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:000040F3 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:000040F3
.text$x:000040F8
.text$x:000040F8 ; =============== S U B R O U T I N E =======================================
.text$x:000040F8
.text$x:000040F8
.text$x:000040F8 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:000040F8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:000040F8
.text$x:000040F8 arg_4           = dword ptr  8
.text$x:000040F8
.text$x:000040F8                 mov     edx, [esp+arg_4]
.text$x:000040FC                 lea     eax, [edx+0Ch]
.text$x:000040FF                 mov     ecx, [edx-0Ch]
.text$x:00004102                 xor     ecx, eax
.text$x:00004104                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004109                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:0000410E                 jmp     ___CxxFrameHandler3
.text$x:0000410E __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:0000410E
.text$x:0000410E ; ---------------------------------------------------------------------------
.text$x:00004113                 align 4
.text$x:00004113 _text$x         ends
.text$x:00004113
.text$mn:00004114 ; ===========================================================================
.text$mn:00004114
.text$mn:00004114 ; Segment type: Pure code
.text$mn:00004114 ; Segment permissions: Read/Execute
.text$mn:00004114 _text$mn        segment para public 'CODE' use32
.text$mn:00004114                 assume cs:_text$mn
.text$mn:00004114                 ;org 4114h
.text$mn:00004114 ; COMDAT (pick any)
.text$mn:00004114                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004114
.text$mn:00004114 ; =============== S U B R O U T I N E =======================================
.text$mn:00004114
.text$mn:00004114 ; Attributes: bp-based frame
.text$mn:00004114
.text$mn:00004114 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00004114                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00004114 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00004114                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+5CDp
.text$mn:00004114                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+63Fp ...
.text$mn:00004114
.text$mn:00004114 var_14          = dword ptr -14h
.text$mn:00004114 var_D           = byte ptr -0Dh
.text$mn:00004114 var_C           = dword ptr -0Ch
.text$mn:00004114 var_4           = dword ptr -4
.text$mn:00004114 Str             = dword ptr  8
.text$mn:00004114
.text$mn:00004114                 push    ebp
.text$mn:00004115                 mov     ebp, esp
.text$mn:00004117                 push    0FFFFFFFFh
.text$mn:00004119                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:0000411E                 mov     eax, large fs:0
.text$mn:00004124                 push    eax
.text$mn:00004125                 sub     esp, 8
.text$mn:00004128                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000412D                 xor     eax, ebp
.text$mn:0000412F                 push    eax
.text$mn:00004130                 lea     eax, [ebp+var_C]
.text$mn:00004133                 mov     large fs:0, eax
.text$mn:00004139                 mov     [ebp+var_14], ecx
.text$mn:0000413C                 lea     ecx, [ebp+var_D]
.text$mn:0000413F                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00004144                 push    eax
.text$mn:00004145                 mov     ecx, [ebp+var_14]
.text$mn:00004148                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:0000414D                 mov     [ebp+var_4], 0
.text$mn:00004154                 push    0
.text$mn:00004156                 push    0
.text$mn:00004158                 mov     ecx, [ebp+var_14]
.text$mn:0000415B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004160                 mov     eax, [ebp+Str]
.text$mn:00004163                 push    eax             ; Str
.text$mn:00004164                 mov     ecx, [ebp+var_14]
.text$mn:00004167                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:0000416C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004173                 mov     eax, [ebp+var_14]
.text$mn:00004176                 mov     ecx, [ebp+var_C]
.text$mn:00004179                 mov     large fs:0, ecx
.text$mn:00004180                 pop     ecx
.text$mn:00004181                 mov     esp, ebp
.text$mn:00004183                 pop     ebp
.text$mn:00004184                 retn    4
.text$mn:00004184 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:00004184
.text$mn:00004184 ; ---------------------------------------------------------------------------
.text$mn:00004187                 align 4
.text$mn:00004187 _text$mn        ends
.text$mn:00004187
.text$x:00004188 ; ===========================================================================
.text$x:00004188
.text$x:00004188 ; Segment type: Pure code
.text$x:00004188 ; Segment permissions: Read/Execute
.text$x:00004188 _text$x         segment para public 'CODE' use32
.text$x:00004188                 assume cs:_text$x
.text$x:00004188                 ;org 4188h
.text$x:00004188 ; COMDAT (pick associative to section at 4114)
.text$x:00004188                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004188
.text$x:00004188 ; =============== S U B R O U T I N E =======================================
.text$x:00004188
.text$x:00004188
.text$x:00004188 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:00004188                                         ; DATA XREF: .xdata$x:00009858o
.text$x:00004188                 mov     ecx, [ebp-14h]
.text$x:0000418B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000418B __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:0000418B
.text$x:00004190
.text$x:00004190 ; =============== S U B R O U T I N E =======================================
.text$x:00004190
.text$x:00004190
.text$x:00004190 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:00004190                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:00004190
.text$x:00004190 arg_4           = dword ptr  8
.text$x:00004190
.text$x:00004190                 mov     edx, [esp+arg_4]
.text$x:00004194                 lea     eax, [edx+0Ch]
.text$x:00004197                 mov     ecx, [edx-0Ch]
.text$x:0000419A                 xor     ecx, eax
.text$x:0000419C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000041A1                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:000041A6                 jmp     ___CxxFrameHandler3
.text$x:000041A6 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:000041A6
.text$x:000041A6 ; ---------------------------------------------------------------------------
.text$x:000041AB                 align 4
.text$x:000041AB _text$x         ends
.text$x:000041AB
.text$mn:000041AC ; ===========================================================================
.text$mn:000041AC
.text$mn:000041AC ; Segment type: Pure code
.text$mn:000041AC ; Segment permissions: Read/Execute
.text$mn:000041AC _text$mn        segment para public 'CODE' use32
.text$mn:000041AC                 assume cs:_text$mn
.text$mn:000041AC                 ;org 41ACh
.text$mn:000041AC ; COMDAT (pick any)
.text$mn:000041AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000041AC
.text$mn:000041AC ; =============== S U B R O U T I N E =======================================
.text$mn:000041AC
.text$mn:000041AC ; Attributes: bp-based frame
.text$mn:000041AC
.text$mn:000041AC ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:000041AC                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000041AC ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:000041AC                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+758p
.text$mn:000041AC
.text$mn:000041AC var_14          = dword ptr -14h
.text$mn:000041AC var_D           = byte ptr -0Dh
.text$mn:000041AC var_C           = dword ptr -0Ch
.text$mn:000041AC var_4           = dword ptr -4
.text$mn:000041AC
.text$mn:000041AC                 push    ebp
.text$mn:000041AD                 mov     ebp, esp
.text$mn:000041AF                 push    0FFFFFFFFh
.text$mn:000041B1                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:000041B6                 mov     eax, large fs:0
.text$mn:000041BC                 push    eax
.text$mn:000041BD                 sub     esp, 8
.text$mn:000041C0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000041C5                 xor     eax, ebp
.text$mn:000041C7                 push    eax
.text$mn:000041C8                 lea     eax, [ebp+var_C]
.text$mn:000041CB                 mov     large fs:0, eax
.text$mn:000041D1                 mov     [ebp+var_14], ecx
.text$mn:000041D4                 lea     ecx, [ebp+var_D]
.text$mn:000041D7                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000041DC                 push    eax
.text$mn:000041DD                 mov     ecx, [ebp+var_14]
.text$mn:000041E0                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000041E5                 mov     [ebp+var_4], 0
.text$mn:000041EC                 push    0
.text$mn:000041EE                 push    0
.text$mn:000041F0                 mov     ecx, [ebp+var_14]
.text$mn:000041F3                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000041F8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000041FF                 mov     eax, [ebp+var_14]
.text$mn:00004202                 mov     ecx, [ebp+var_C]
.text$mn:00004205                 mov     large fs:0, ecx
.text$mn:0000420C                 pop     ecx
.text$mn:0000420D                 mov     esp, ebp
.text$mn:0000420F                 pop     ebp
.text$mn:00004210                 retn
.text$mn:00004210 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00004210
.text$mn:00004210 ; ---------------------------------------------------------------------------
.text$mn:00004211                 align 4
.text$mn:00004211 _text$mn        ends
.text$mn:00004211
.text$x:00004214 ; ===========================================================================
.text$x:00004214
.text$x:00004214 ; Segment type: Pure code
.text$x:00004214 ; Segment permissions: Read/Execute
.text$x:00004214 _text$x         segment para public 'CODE' use32
.text$x:00004214                 assume cs:_text$x
.text$x:00004214                 ;org 4214h
.text$x:00004214 ; COMDAT (pick associative to section at 41AC)
.text$x:00004214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004214
.text$x:00004214 ; =============== S U B R O U T I N E =======================================
.text$x:00004214
.text$x:00004214
.text$x:00004214 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00004214                                         ; DATA XREF: .xdata$x:0000982Co
.text$x:00004214                 mov     ecx, [ebp-14h]
.text$x:00004217                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00004217 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00004217
.text$x:0000421C
.text$x:0000421C ; =============== S U B R O U T I N E =======================================
.text$x:0000421C
.text$x:0000421C
.text$x:0000421C __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:0000421C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:0000421C
.text$x:0000421C arg_4           = dword ptr  8
.text$x:0000421C
.text$x:0000421C                 mov     edx, [esp+arg_4]
.text$x:00004220                 lea     eax, [edx+0Ch]
.text$x:00004223                 mov     ecx, [edx-0Ch]
.text$x:00004226                 xor     ecx, eax
.text$x:00004228                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000422D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00004232                 jmp     ___CxxFrameHandler3
.text$x:00004232 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00004232
.text$x:00004232 ; ---------------------------------------------------------------------------
.text$x:00004237                 align 4
.text$x:00004237 _text$x         ends
.text$x:00004237
.text$mn:00004238 ; ===========================================================================
.text$mn:00004238
.text$mn:00004238 ; Segment type: Pure code
.text$mn:00004238 ; Segment permissions: Read/Execute
.text$mn:00004238 _text$mn        segment para public 'CODE' use32
.text$mn:00004238                 assume cs:_text$mn
.text$mn:00004238                 ;org 4238h
.text$mn:00004238 ; COMDAT (pick any)
.text$mn:00004238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004238
.text$mn:00004238 ; =============== S U B R O U T I N E =======================================
.text$mn:00004238
.text$mn:00004238 ; Attributes: bp-based frame
.text$mn:00004238
.text$mn:00004238 ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00004238                 public ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00004238 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:00004238                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+5A7p
.text$mn:00004238                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+5B9p
.text$mn:00004238
.text$mn:00004238 var_14          = dword ptr -14h
.text$mn:00004238 var_D           = byte ptr -0Dh
.text$mn:00004238 var_C           = dword ptr -0Ch
.text$mn:00004238 var_4           = dword ptr -4
.text$mn:00004238
.text$mn:00004238                 push    ebp
.text$mn:00004239                 mov     ebp, esp
.text$mn:0000423B                 push    0FFFFFFFFh
.text$mn:0000423D                 push    offset __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00004242                 mov     eax, large fs:0
.text$mn:00004248                 push    eax
.text$mn:00004249                 sub     esp, 8
.text$mn:0000424C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004251                 xor     eax, ebp
.text$mn:00004253                 push    eax
.text$mn:00004254                 lea     eax, [ebp+var_C]
.text$mn:00004257                 mov     large fs:0, eax
.text$mn:0000425D                 mov     [ebp+var_14], ecx
.text$mn:00004260                 lea     ecx, [ebp+var_D]
.text$mn:00004263                 call    ??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:00004268                 push    eax
.text$mn:00004269                 mov     ecx, [ebp+var_14]
.text$mn:0000426C                 call    ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:00004271                 mov     [ebp+var_4], 0
.text$mn:00004278                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000427F                 mov     eax, [ebp+var_14]
.text$mn:00004282                 mov     ecx, [ebp+var_C]
.text$mn:00004285                 mov     large fs:0, ecx
.text$mn:0000428C                 pop     ecx
.text$mn:0000428D                 mov     esp, ebp
.text$mn:0000428F                 pop     ebp
.text$mn:00004290                 retn
.text$mn:00004290 ??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:00004290
.text$mn:00004290 ; ---------------------------------------------------------------------------
.text$mn:00004291                 align 4
.text$mn:00004291 _text$mn        ends
.text$mn:00004291
.text$x:00004294 ; ===========================================================================
.text$x:00004294
.text$x:00004294 ; Segment type: Pure code
.text$x:00004294 ; Segment permissions: Read/Execute
.text$x:00004294 _text$x         segment para public 'CODE' use32
.text$x:00004294                 assume cs:_text$x
.text$x:00004294                 ;org 4294h
.text$x:00004294 ; COMDAT (pick associative to section at 4238)
.text$x:00004294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004294
.text$x:00004294 ; =============== S U B R O U T I N E =======================================
.text$x:00004294
.text$x:00004294
.text$x:00004294 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00004294                                         ; DATA XREF: .xdata$x:00009A18o
.text$x:00004294                 mov     ecx, [ebp-14h]
.text$x:00004297                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004297 __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:00004297
.text$x:0000429C
.text$x:0000429C ; =============== S U B R O U T I N E =======================================
.text$x:0000429C
.text$x:0000429C
.text$x:0000429C __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:0000429C                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:0000429C
.text$x:0000429C arg_4           = dword ptr  8
.text$x:0000429C
.text$x:0000429C                 mov     edx, [esp+arg_4]
.text$x:000042A0                 lea     eax, [edx+0Ch]
.text$x:000042A3                 mov     ecx, [edx-0Ch]
.text$x:000042A6                 xor     ecx, eax
.text$x:000042A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000042AD                 mov     eax, offset __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:000042B2                 jmp     ___CxxFrameHandler3
.text$x:000042B2 __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:000042B2
.text$x:000042B2 ; ---------------------------------------------------------------------------
.text$x:000042B7                 align 4
.text$x:000042B7 _text$x         ends
.text$x:000042B7
.text$mn:000042B8 ; ===========================================================================
.text$mn:000042B8
.text$mn:000042B8 ; Segment type: Pure code
.text$mn:000042B8 ; Segment permissions: Read/Execute
.text$mn:000042B8 _text$mn        segment para public 'CODE' use32
.text$mn:000042B8                 assume cs:_text$mn
.text$mn:000042B8                 ;org 42B8h
.text$mn:000042B8 ; COMDAT (pick any)
.text$mn:000042B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042B8
.text$mn:000042B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000042B8
.text$mn:000042B8 ; Attributes: bp-based frame
.text$mn:000042B8
.text$mn:000042B8 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000042B8                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:000042B8 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:000042B8                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:000042B8                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p ...
.text$mn:000042B8
.text$mn:000042B8 var_4           = dword ptr -4
.text$mn:000042B8
.text$mn:000042B8                 push    ebp
.text$mn:000042B9                 mov     ebp, esp
.text$mn:000042BB                 push    ecx
.text$mn:000042BC                 mov     [ebp+var_4], ecx
.text$mn:000042BF                 mov     eax, [ebp+var_4]
.text$mn:000042C2                 mov     dword ptr [eax], 0
.text$mn:000042C8                 mov     eax, [ebp+var_4]
.text$mn:000042CB                 mov     esp, ebp
.text$mn:000042CD                 pop     ebp
.text$mn:000042CE                 retn
.text$mn:000042CE ??0_Container_base12@std@@QAE@XZ endp
.text$mn:000042CE
.text$mn:000042CE ; ---------------------------------------------------------------------------
.text$mn:000042CF                 align 10h
.text$mn:000042CF _text$mn        ends
.text$mn:000042CF
.text$mn:000042D0 ; ===========================================================================
.text$mn:000042D0
.text$mn:000042D0 ; Segment type: Pure code
.text$mn:000042D0 ; Segment permissions: Read/Execute
.text$mn:000042D0 _text$mn        segment para public 'CODE' use32
.text$mn:000042D0                 assume cs:_text$mn
.text$mn:000042D0                 ;org 42D0h
.text$mn:000042D0 ; COMDAT (pick any)
.text$mn:000042D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042D0
.text$mn:000042D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000042D0
.text$mn:000042D0 ; Attributes: bp-based frame
.text$mn:000042D0
.text$mn:000042D0 ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:000042D0                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:000042D0 ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:000042D0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:000042D0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p ...
.text$mn:000042D0
.text$mn:000042D0 var_4           = dword ptr -4
.text$mn:000042D0
.text$mn:000042D0                 push    ebp
.text$mn:000042D1                 mov     ebp, esp
.text$mn:000042D3                 push    ecx
.text$mn:000042D4                 mov     [ebp+var_4], ecx
.text$mn:000042D7                 mov     eax, [ebp+var_4]
.text$mn:000042DA                 mov     dword ptr [eax], 0
.text$mn:000042E0                 mov     ecx, [ebp+var_4]
.text$mn:000042E3                 mov     dword ptr [ecx+4], 0
.text$mn:000042EA                 mov     eax, [ebp+var_4]
.text$mn:000042ED                 mov     esp, ebp
.text$mn:000042EF                 pop     ebp
.text$mn:000042F0                 retn
.text$mn:000042F0 ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:000042F0
.text$mn:000042F0 ; ---------------------------------------------------------------------------
.text$mn:000042F1                 align 4
.text$mn:000042F1 _text$mn        ends
.text$mn:000042F1
.text$mn:000042F4 ; ===========================================================================
.text$mn:000042F4
.text$mn:000042F4 ; Segment type: Pure code
.text$mn:000042F4 ; Segment permissions: Read/Execute
.text$mn:000042F4 _text$mn        segment para public 'CODE' use32
.text$mn:000042F4                 assume cs:_text$mn
.text$mn:000042F4                 ;org 42F4h
.text$mn:000042F4 ; COMDAT (pick any)
.text$mn:000042F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000042F4
.text$mn:000042F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000042F4
.text$mn:000042F4 ; Attributes: bp-based frame
.text$mn:000042F4
.text$mn:000042F4 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000042F4                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:000042F4 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:000042F4                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:000042F4                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:000042F4
.text$mn:000042F4 var_10          = dword ptr -10h
.text$mn:000042F4 var_C           = dword ptr -0Ch
.text$mn:000042F4 var_4           = dword ptr -4
.text$mn:000042F4
.text$mn:000042F4                 push    ebp
.text$mn:000042F5                 mov     ebp, esp
.text$mn:000042F7                 push    0FFFFFFFFh
.text$mn:000042F9                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:000042FE                 mov     eax, large fs:0
.text$mn:00004304                 push    eax
.text$mn:00004305                 push    ecx
.text$mn:00004306                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000430B                 xor     eax, ebp
.text$mn:0000430D                 push    eax
.text$mn:0000430E                 lea     eax, [ebp+var_C]
.text$mn:00004311                 mov     large fs:0, eax
.text$mn:00004317                 mov     [ebp+var_10], ecx
.text$mn:0000431A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000431D                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:00004322                 mov     [ebp+var_4], 0
.text$mn:00004329                 mov     eax, [ebp+var_10]
.text$mn:0000432C                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:00004332                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004339                 mov     eax, [ebp+var_10]
.text$mn:0000433C                 mov     ecx, [ebp+var_C]
.text$mn:0000433F                 mov     large fs:0, ecx
.text$mn:00004346                 pop     ecx
.text$mn:00004347                 mov     esp, ebp
.text$mn:00004349                 pop     ebp
.text$mn:0000434A                 retn
.text$mn:0000434A ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:0000434A
.text$mn:0000434A ; ---------------------------------------------------------------------------
.text$mn:0000434B                 align 4
.text$mn:0000434B _text$mn        ends
.text$mn:0000434B
.text$x:0000434C ; ===========================================================================
.text$x:0000434C
.text$x:0000434C ; Segment type: Pure code
.text$x:0000434C ; Segment permissions: Read/Execute
.text$x:0000434C _text$x         segment para public 'CODE' use32
.text$x:0000434C                 assume cs:_text$x
.text$x:0000434C                 ;org 434Ch
.text$x:0000434C ; COMDAT (pick associative to section at 42F4)
.text$x:0000434C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000434C
.text$x:0000434C ; =============== S U B R O U T I N E =======================================
.text$x:0000434C
.text$x:0000434C
.text$x:0000434C __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:0000434C                                         ; DATA XREF: .xdata$x:000095C4o
.text$x:0000434C                 mov     ecx, [ebp-10h]  ; this
.text$x:0000434F                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:0000434F __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:0000434F
.text$x:00004354
.text$x:00004354 ; =============== S U B R O U T I N E =======================================
.text$x:00004354
.text$x:00004354
.text$x:00004354 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00004354                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00004354
.text$x:00004354 arg_4           = dword ptr  8
.text$x:00004354
.text$x:00004354                 mov     edx, [esp+arg_4]
.text$x:00004358                 lea     eax, [edx+0Ch]
.text$x:0000435B                 mov     ecx, [edx-8]
.text$x:0000435E                 xor     ecx, eax
.text$x:00004360                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004365                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:0000436A                 jmp     ___CxxFrameHandler3
.text$x:0000436A __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:0000436A
.text$x:0000436A ; ---------------------------------------------------------------------------
.text$x:0000436F                 align 10h
.text$x:0000436F _text$x         ends
.text$x:0000436F
.text$mn:00004370 ; ===========================================================================
.text$mn:00004370
.text$mn:00004370 ; Segment type: Pure code
.text$mn:00004370 ; Segment permissions: Read/Execute
.text$mn:00004370 _text$mn        segment para public 'CODE' use32
.text$mn:00004370                 assume cs:_text$mn
.text$mn:00004370                 ;org 4370h
.text$mn:00004370 ; COMDAT (pick any)
.text$mn:00004370                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004370
.text$mn:00004370 ; =============== S U B R O U T I N E =======================================
.text$mn:00004370
.text$mn:00004370 ; Attributes: bp-based frame
.text$mn:00004370
.text$mn:00004370 ; _DWORD __thiscall std::_Ignore::_Ignore(std::_Ignore *__hidden this)
.text$mn:00004370                 public ??0_Ignore@std@@QAE@XZ
.text$mn:00004370 ??0_Ignore@std@@QAE@XZ proc near        ; CODE XREF: std::`dynamic initializer for 'ignore''(void)+8p
.text$mn:00004370
.text$mn:00004370 var_4           = dword ptr -4
.text$mn:00004370
.text$mn:00004370                 push    ebp
.text$mn:00004371                 mov     ebp, esp
.text$mn:00004373                 push    ecx
.text$mn:00004374                 mov     [ebp+var_4], ecx
.text$mn:00004377                 mov     eax, [ebp+var_4]
.text$mn:0000437A                 mov     esp, ebp
.text$mn:0000437C                 pop     ebp
.text$mn:0000437D                 retn
.text$mn:0000437D ??0_Ignore@std@@QAE@XZ endp
.text$mn:0000437D
.text$mn:0000437D ; ---------------------------------------------------------------------------
.text$mn:0000437E                 align 10h
.text$mn:0000437E _text$mn        ends
.text$mn:0000437E
.text$mn:00004380 ; ===========================================================================
.text$mn:00004380
.text$mn:00004380 ; Segment type: Pure code
.text$mn:00004380 ; Segment permissions: Read/Execute
.text$mn:00004380 _text$mn        segment para public 'CODE' use32
.text$mn:00004380                 assume cs:_text$mn
.text$mn:00004380                 ;org 4380h
.text$mn:00004380 ; COMDAT (pick any)
.text$mn:00004380                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004380
.text$mn:00004380 ; =============== S U B R O U T I N E =======================================
.text$mn:00004380
.text$mn:00004380 ; Attributes: bp-based frame
.text$mn:00004380
.text$mn:00004380 ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00004380                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00004380 ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:00004380                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00004380
.text$mn:00004380 var_10          = dword ptr -10h
.text$mn:00004380 var_C           = dword ptr -0Ch
.text$mn:00004380 var_4           = dword ptr -4
.text$mn:00004380
.text$mn:00004380                 push    ebp
.text$mn:00004381                 mov     ebp, esp
.text$mn:00004383                 push    0FFFFFFFFh
.text$mn:00004385                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:0000438A                 mov     eax, large fs:0
.text$mn:00004390                 push    eax
.text$mn:00004391                 push    ecx
.text$mn:00004392                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004397                 xor     eax, ebp
.text$mn:00004399                 push    eax
.text$mn:0000439A                 lea     eax, [ebp+var_C]
.text$mn:0000439D                 mov     large fs:0, eax
.text$mn:000043A3                 mov     [ebp+var_10], ecx
.text$mn:000043A6                 mov     ecx, [ebp+var_10] ; this
.text$mn:000043A9                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:000043AE                 mov     [ebp+var_4], 0
.text$mn:000043B5                 mov     eax, [ebp+var_10]
.text$mn:000043B8                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:000043BE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000043C5                 mov     eax, [ebp+var_10]
.text$mn:000043C8                 mov     ecx, [ebp+var_C]
.text$mn:000043CB                 mov     large fs:0, ecx
.text$mn:000043D2                 pop     ecx
.text$mn:000043D3                 mov     esp, ebp
.text$mn:000043D5                 pop     ebp
.text$mn:000043D6                 retn
.text$mn:000043D6 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:000043D6
.text$mn:000043D6 ; ---------------------------------------------------------------------------
.text$mn:000043D7                 align 4
.text$mn:000043D7 _text$mn        ends
.text$mn:000043D7
.text$x:000043D8 ; ===========================================================================
.text$x:000043D8
.text$x:000043D8 ; Segment type: Pure code
.text$x:000043D8 ; Segment permissions: Read/Execute
.text$x:000043D8 _text$x         segment para public 'CODE' use32
.text$x:000043D8                 assume cs:_text$x
.text$x:000043D8                 ;org 43D8h
.text$x:000043D8 ; COMDAT (pick associative to section at 4380)
.text$x:000043D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000043D8
.text$x:000043D8 ; =============== S U B R O U T I N E =======================================
.text$x:000043D8
.text$x:000043D8
.text$x:000043D8 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:000043D8                                         ; DATA XREF: .xdata$x:00009648o
.text$x:000043D8                 mov     ecx, [ebp-10h]  ; this
.text$x:000043DB                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000043DB __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:000043DB
.text$x:000043E0
.text$x:000043E0 ; =============== S U B R O U T I N E =======================================
.text$x:000043E0
.text$x:000043E0
.text$x:000043E0 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:000043E0                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:000043E0
.text$x:000043E0 arg_4           = dword ptr  8
.text$x:000043E0
.text$x:000043E0                 mov     edx, [esp+arg_4]
.text$x:000043E4                 lea     eax, [edx+0Ch]
.text$x:000043E7                 mov     ecx, [edx-8]
.text$x:000043EA                 xor     ecx, eax
.text$x:000043EC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000043F1                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:000043F6                 jmp     ___CxxFrameHandler3
.text$x:000043F6 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:000043F6
.text$x:000043F6 ; ---------------------------------------------------------------------------
.text$x:000043FB                 align 4
.text$x:000043FB _text$x         ends
.text$x:000043FB
.text$mn:000043FC ; ===========================================================================
.text$mn:000043FC
.text$mn:000043FC ; Segment type: Pure code
.text$mn:000043FC ; Segment permissions: Read/Execute
.text$mn:000043FC _text$mn        segment para public 'CODE' use32
.text$mn:000043FC                 assume cs:_text$mn
.text$mn:000043FC                 ;org 43FCh
.text$mn:000043FC ; COMDAT (pick any)
.text$mn:000043FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000043FC
.text$mn:000043FC ; =============== S U B R O U T I N E =======================================
.text$mn:000043FC
.text$mn:000043FC ; Attributes: bp-based frame
.text$mn:000043FC
.text$mn:000043FC ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:000043FC                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:000043FC ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:000043FC                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12> const &)+2Dp
.text$mn:000043FC
.text$mn:000043FC var_4           = dword ptr -4
.text$mn:000043FC arg_0           = dword ptr  8
.text$mn:000043FC
.text$mn:000043FC                 push    ebp
.text$mn:000043FD                 mov     ebp, esp
.text$mn:000043FF                 push    ecx
.text$mn:00004400                 mov     [ebp+var_4], ecx
.text$mn:00004403                 mov     eax, [ebp+var_4]
.text$mn:00004406                 mov     dword ptr [eax], 0
.text$mn:0000440C                 mov     ecx, [ebp+var_4]
.text$mn:0000440F                 mov     dword ptr [ecx+4], 0
.text$mn:00004416                 mov     edx, [ebp+arg_0]
.text$mn:00004419                 push    edx
.text$mn:0000441A                 mov     ecx, [ebp+var_4]
.text$mn:0000441D                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:00004422                 mov     eax, [ebp+var_4]
.text$mn:00004425                 mov     esp, ebp
.text$mn:00004427                 pop     ebp
.text$mn:00004428                 retn    4
.text$mn:00004428 ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:00004428
.text$mn:00004428 ; ---------------------------------------------------------------------------
.text$mn:0000442B                 align 4
.text$mn:0000442B _text$mn        ends
.text$mn:0000442B
.text$mn:0000442C ; ===========================================================================
.text$mn:0000442C
.text$mn:0000442C ; Segment type: Pure code
.text$mn:0000442C ; Segment permissions: Read/Execute
.text$mn:0000442C _text$mn        segment para public 'CODE' use32
.text$mn:0000442C                 assume cs:_text$mn
.text$mn:0000442C                 ;org 442Ch
.text$mn:0000442C ; COMDAT (pick any)
.text$mn:0000442C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000442C
.text$mn:0000442C ; =============== S U B R O U T I N E =======================================
.text$mn:0000442C
.text$mn:0000442C ; Attributes: bp-based frame
.text$mn:0000442C
.text$mn:0000442C ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:0000442C                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:0000442C ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:0000442C                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(void)+29p
.text$mn:0000442C
.text$mn:0000442C var_4           = dword ptr -4
.text$mn:0000442C
.text$mn:0000442C                 push    ebp
.text$mn:0000442D                 mov     ebp, esp
.text$mn:0000442F                 push    ecx
.text$mn:00004430                 mov     [ebp+var_4], ecx
.text$mn:00004433                 mov     eax, [ebp+var_4]
.text$mn:00004436                 mov     dword ptr [eax], 0
.text$mn:0000443C                 mov     ecx, [ebp+var_4]
.text$mn:0000443F                 mov     dword ptr [ecx+4], 0
.text$mn:00004446                 mov     eax, [ebp+var_4]
.text$mn:00004449                 mov     esp, ebp
.text$mn:0000444B                 pop     ebp
.text$mn:0000444C                 retn
.text$mn:0000444C ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:0000444C
.text$mn:0000444C ; ---------------------------------------------------------------------------
.text$mn:0000444D                 align 10h
.text$mn:0000444D _text$mn        ends
.text$mn:0000444D
.text$mn:00004450 ; ===========================================================================
.text$mn:00004450
.text$mn:00004450 ; Segment type: Pure code
.text$mn:00004450 ; Segment permissions: Read/Execute
.text$mn:00004450 _text$mn        segment para public 'CODE' use32
.text$mn:00004450                 assume cs:_text$mn
.text$mn:00004450                 ;org 4450h
.text$mn:00004450 ; COMDAT (pick any)
.text$mn:00004450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004450
.text$mn:00004450 ; =============== S U B R O U T I N E =======================================
.text$mn:00004450
.text$mn:00004450 ; Attributes: bp-based frame
.text$mn:00004450
.text$mn:00004450 ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00004450                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:00004450 ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:00004450                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00004450
.text$mn:00004450 var_10          = dword ptr -10h
.text$mn:00004450 var_C           = dword ptr -0Ch
.text$mn:00004450 var_4           = dword ptr -4
.text$mn:00004450
.text$mn:00004450                 push    ebp
.text$mn:00004451                 mov     ebp, esp
.text$mn:00004453                 push    0FFFFFFFFh
.text$mn:00004455                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:0000445A                 mov     eax, large fs:0
.text$mn:00004460                 push    eax
.text$mn:00004461                 push    ecx
.text$mn:00004462                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004467                 xor     eax, ebp
.text$mn:00004469                 push    eax
.text$mn:0000446A                 lea     eax, [ebp+var_C]
.text$mn:0000446D                 mov     large fs:0, eax
.text$mn:00004473                 mov     [ebp+var_10], ecx
.text$mn:00004476                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004479                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:0000447E                 mov     [ebp+var_4], 0
.text$mn:00004485                 mov     eax, [ebp+var_10]
.text$mn:00004488                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:0000448E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004495                 mov     eax, [ebp+var_10]
.text$mn:00004498                 mov     ecx, [ebp+var_C]
.text$mn:0000449B                 mov     large fs:0, ecx
.text$mn:000044A2                 pop     ecx
.text$mn:000044A3                 mov     esp, ebp
.text$mn:000044A5                 pop     ebp
.text$mn:000044A6                 retn
.text$mn:000044A6 ??0_System_error_category@std@@QAE@XZ endp
.text$mn:000044A6
.text$mn:000044A6 ; ---------------------------------------------------------------------------
.text$mn:000044A7                 align 4
.text$mn:000044A7 _text$mn        ends
.text$mn:000044A7
.text$x:000044A8 ; ===========================================================================
.text$x:000044A8
.text$x:000044A8 ; Segment type: Pure code
.text$x:000044A8 ; Segment permissions: Read/Execute
.text$x:000044A8 _text$x         segment para public 'CODE' use32
.text$x:000044A8                 assume cs:_text$x
.text$x:000044A8                 ;org 44A8h
.text$x:000044A8 ; COMDAT (pick associative to section at 4450)
.text$x:000044A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000044A8
.text$x:000044A8 ; =============== S U B R O U T I N E =======================================
.text$x:000044A8
.text$x:000044A8
.text$x:000044A8 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:000044A8                                         ; DATA XREF: .xdata$x:000096CCo
.text$x:000044A8                 mov     ecx, [ebp-10h]  ; this
.text$x:000044AB                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000044AB __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:000044AB
.text$x:000044B0
.text$x:000044B0 ; =============== S U B R O U T I N E =======================================
.text$x:000044B0
.text$x:000044B0
.text$x:000044B0 __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:000044B0                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:000044B0
.text$x:000044B0 arg_4           = dword ptr  8
.text$x:000044B0
.text$x:000044B0                 mov     edx, [esp+arg_4]
.text$x:000044B4                 lea     eax, [edx+0Ch]
.text$x:000044B7                 mov     ecx, [edx-8]
.text$x:000044BA                 xor     ecx, eax
.text$x:000044BC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000044C1                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:000044C6                 jmp     ___CxxFrameHandler3
.text$x:000044C6 __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:000044C6
.text$x:000044C6 ; ---------------------------------------------------------------------------
.text$x:000044CB                 align 4
.text$x:000044CB _text$x         ends
.text$x:000044CB
.text$mn:000044CC ; ===========================================================================
.text$mn:000044CC
.text$mn:000044CC ; Segment type: Pure code
.text$mn:000044CC ; Segment permissions: Read/Execute
.text$mn:000044CC _text$mn        segment para public 'CODE' use32
.text$mn:000044CC                 assume cs:_text$mn
.text$mn:000044CC                 ;org 44CCh
.text$mn:000044CC ; COMDAT (pick any)
.text$mn:000044CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044CC
.text$mn:000044CC ; =============== S U B R O U T I N E =======================================
.text$mn:000044CC
.text$mn:000044CC ; Attributes: bp-based frame
.text$mn:000044CC
.text$mn:000044CC ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:000044CC                 public ??0error_category@std@@QAE@XZ
.text$mn:000044CC ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:000044CC
.text$mn:000044CC var_4           = dword ptr -4
.text$mn:000044CC
.text$mn:000044CC                 push    ebp
.text$mn:000044CD                 mov     ebp, esp
.text$mn:000044CF                 push    ecx
.text$mn:000044D0                 mov     [ebp+var_4], ecx
.text$mn:000044D3                 mov     eax, [ebp+var_4]
.text$mn:000044D6                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:000044DC                 mov     eax, [ebp+var_4]
.text$mn:000044DF                 mov     esp, ebp
.text$mn:000044E1                 pop     ebp
.text$mn:000044E2                 retn
.text$mn:000044E2 ??0error_category@std@@QAE@XZ endp
.text$mn:000044E2
.text$mn:000044E2 ; ---------------------------------------------------------------------------
.text$mn:000044E3                 align 4
.text$mn:000044E3 _text$mn        ends
.text$mn:000044E3
.text$mn:000044E4 ; ===========================================================================
.text$mn:000044E4
.text$mn:000044E4 ; Segment type: Pure code
.text$mn:000044E4 ; Segment permissions: Read/Execute
.text$mn:000044E4 _text$mn        segment para public 'CODE' use32
.text$mn:000044E4                 assume cs:_text$mn
.text$mn:000044E4                 ;org 44E4h
.text$mn:000044E4 ; COMDAT (pick any)
.text$mn:000044E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000044E4
.text$mn:000044E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000044E4
.text$mn:000044E4 ; Attributes: bp-based frame
.text$mn:000044E4
.text$mn:000044E4 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:000044E4                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:000044E4 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:000044E4                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:000044E4                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:000044E4
.text$mn:000044E4 var_4           = dword ptr -4
.text$mn:000044E4 arg_0           = dword ptr  8
.text$mn:000044E4 arg_4           = dword ptr  0Ch
.text$mn:000044E4
.text$mn:000044E4                 push    ebp
.text$mn:000044E5                 mov     ebp, esp
.text$mn:000044E7                 push    ecx
.text$mn:000044E8                 mov     [ebp+var_4], ecx
.text$mn:000044EB                 mov     eax, [ebp+var_4]
.text$mn:000044EE                 mov     ecx, [ebp+arg_0]
.text$mn:000044F1                 mov     [eax], ecx
.text$mn:000044F3                 mov     edx, [ebp+var_4]
.text$mn:000044F6                 mov     eax, [ebp+arg_4]
.text$mn:000044F9                 mov     [edx+4], eax
.text$mn:000044FC                 mov     eax, [ebp+var_4]
.text$mn:000044FF                 mov     esp, ebp
.text$mn:00004501                 pop     ebp
.text$mn:00004502                 retn    8
.text$mn:00004502 ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:00004502
.text$mn:00004502 ; ---------------------------------------------------------------------------
.text$mn:00004505                 align 4
.text$mn:00004505 _text$mn        ends
.text$mn:00004505
.text$mn:00004508 ; ===========================================================================
.text$mn:00004508
.text$mn:00004508 ; Segment type: Pure code
.text$mn:00004508 ; Segment permissions: Read/Execute
.text$mn:00004508 _text$mn        segment para public 'CODE' use32
.text$mn:00004508                 assume cs:_text$mn
.text$mn:00004508                 ;org 4508h
.text$mn:00004508 ; COMDAT (pick any)
.text$mn:00004508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004508
.text$mn:00004508 ; =============== S U B R O U T I N E =======================================
.text$mn:00004508
.text$mn:00004508 ; Attributes: bp-based frame
.text$mn:00004508
.text$mn:00004508 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00004508                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00004508 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00004508                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00004508
.text$mn:00004508 var_4           = dword ptr -4
.text$mn:00004508 arg_0           = dword ptr  8
.text$mn:00004508
.text$mn:00004508                 push    ebp
.text$mn:00004509                 mov     ebp, esp
.text$mn:0000450B                 push    ecx
.text$mn:0000450C                 mov     [ebp+var_4], ecx
.text$mn:0000450F                 mov     eax, [ebp+var_4]
.text$mn:00004512                 mov     ecx, [ebp+arg_0]
.text$mn:00004515                 mov     [eax], ecx
.text$mn:00004517                 mov     eax, [ebp+var_4]
.text$mn:0000451A                 mov     esp, ebp
.text$mn:0000451C                 pop     ebp
.text$mn:0000451D                 retn    4
.text$mn:0000451D ??0id@locale@std@@QAE@I@Z endp
.text$mn:0000451D
.text$mn:0000451D _text$mn        ends
.text$mn:0000451D
.text$mn:00004520 ; ===========================================================================
.text$mn:00004520
.text$mn:00004520 ; Segment type: Pure code
.text$mn:00004520 ; Segment permissions: Read/Execute
.text$mn:00004520 _text$mn        segment para public 'CODE' use32
.text$mn:00004520                 assume cs:_text$mn
.text$mn:00004520                 ;org 4520h
.text$mn:00004520 ; COMDAT (pick any)
.text$mn:00004520                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004520
.text$mn:00004520 ; =============== S U B R O U T I N E =======================================
.text$mn:00004520
.text$mn:00004520 ; Attributes: bp-based frame
.text$mn:00004520
.text$mn:00004520 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const struct std::runtime_error *)
.text$mn:00004520                 public ??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:00004520 ??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$mn:00004520                                         ; DATA XREF: .xdata$x:0000A3D4o
.text$mn:00004520
.text$mn:00004520 var_10          = dword ptr -10h
.text$mn:00004520 var_C           = dword ptr -0Ch
.text$mn:00004520 var_4           = dword ptr -4
.text$mn:00004520 arg_0           = dword ptr  8
.text$mn:00004520
.text$mn:00004520                 push    ebp
.text$mn:00004521                 mov     ebp, esp
.text$mn:00004523                 push    0FFFFFFFFh
.text$mn:00004525                 push    offset __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
.text$mn:0000452A                 mov     eax, large fs:0
.text$mn:00004530                 push    eax
.text$mn:00004531                 push    ecx
.text$mn:00004532                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004537                 xor     eax, ebp
.text$mn:00004539                 push    eax
.text$mn:0000453A                 lea     eax, [ebp+var_C]
.text$mn:0000453D                 mov     large fs:0, eax
.text$mn:00004543                 mov     [ebp+var_10], ecx
.text$mn:00004546                 mov     eax, [ebp+arg_0]
.text$mn:00004549                 push    eax             ; struct std::exception *
.text$mn:0000454A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000454D                 call    ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text$mn:00004552                 mov     [ebp+var_4], 0
.text$mn:00004559                 mov     ecx, [ebp+var_10]
.text$mn:0000455C                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:00004562                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004569                 mov     eax, [ebp+var_10]
.text$mn:0000456C                 mov     ecx, [ebp+var_C]
.text$mn:0000456F                 mov     large fs:0, ecx
.text$mn:00004576                 pop     ecx
.text$mn:00004577                 mov     esp, ebp
.text$mn:00004579                 pop     ebp
.text$mn:0000457A                 retn    4
.text$mn:0000457A ??0runtime_error@std@@QAE@ABV01@@Z endp
.text$mn:0000457A
.text$mn:0000457A ; ---------------------------------------------------------------------------
.text$mn:0000457D                 align 10h
.text$mn:0000457D _text$mn        ends
.text$mn:0000457D
.text$x:00004580 ; ===========================================================================
.text$x:00004580
.text$x:00004580 ; Segment type: Pure code
.text$x:00004580 ; Segment permissions: Read/Execute
.text$x:00004580 _text$x         segment para public 'CODE' use32
.text$x:00004580                 assume cs:_text$x
.text$x:00004580                 ;org 4580h
.text$x:00004580 ; COMDAT (pick associative to section at 4520)
.text$x:00004580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004580
.text$x:00004580 ; =============== S U B R O U T I N E =======================================
.text$x:00004580
.text$x:00004580
.text$x:00004580 __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 proc near
.text$x:00004580                                         ; DATA XREF: .xdata$x:00009598o
.text$x:00004580                 mov     ecx, [ebp-10h]  ; this
.text$x:00004583                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00004583 __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 endp
.text$x:00004583
.text$x:00004588
.text$x:00004588 ; =============== S U B R O U T I N E =======================================
.text$x:00004588
.text$x:00004588
.text$x:00004588 __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z proc near
.text$x:00004588                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+5o
.text$x:00004588
.text$x:00004588 arg_4           = dword ptr  8
.text$x:00004588
.text$x:00004588                 mov     edx, [esp+arg_4]
.text$x:0000458C                 lea     eax, [edx+0Ch]
.text$x:0000458F                 mov     ecx, [edx-8]
.text$x:00004592                 xor     ecx, eax
.text$x:00004594                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004599                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
.text$x:0000459E                 jmp     ___CxxFrameHandler3
.text$x:0000459E __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z endp
.text$x:0000459E
.text$x:0000459E ; ---------------------------------------------------------------------------
.text$x:000045A3                 align 4
.text$x:000045A3 _text$x         ends
.text$x:000045A3
.text$mn:000045A4 ; ===========================================================================
.text$mn:000045A4
.text$mn:000045A4 ; Segment type: Pure code
.text$mn:000045A4 ; Segment permissions: Read/Execute
.text$mn:000045A4 _text$mn        segment para public 'CODE' use32
.text$mn:000045A4                 assume cs:_text$mn
.text$mn:000045A4                 ;org 45A4h
.text$mn:000045A4 ; COMDAT (pick any)
.text$mn:000045A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000045A4
.text$mn:000045A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000045A4
.text$mn:000045A4 ; Attributes: bp-based frame
.text$mn:000045A4
.text$mn:000045A4 ; _DWORD __thiscall std::runtime_error::runtime_error(std::runtime_error *this, const char *)
.text$mn:000045A4                 public ??0runtime_error@std@@QAE@PBD@Z
.text$mn:000045A4 ??0runtime_error@std@@QAE@PBD@Z proc near
.text$mn:000045A4                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+127p
.text$mn:000045A4                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+206p
.text$mn:000045A4
.text$mn:000045A4 var_10          = dword ptr -10h
.text$mn:000045A4 var_C           = dword ptr -0Ch
.text$mn:000045A4 var_4           = dword ptr -4
.text$mn:000045A4 arg_0           = dword ptr  8
.text$mn:000045A4
.text$mn:000045A4                 push    ebp
.text$mn:000045A5                 mov     ebp, esp
.text$mn:000045A7                 push    0FFFFFFFFh
.text$mn:000045A9                 push    offset __ehhandler$??0runtime_error@std@@QAE@PBD@Z
.text$mn:000045AE                 mov     eax, large fs:0
.text$mn:000045B4                 push    eax
.text$mn:000045B5                 push    ecx
.text$mn:000045B6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000045BB                 xor     eax, ebp
.text$mn:000045BD                 push    eax
.text$mn:000045BE                 lea     eax, [ebp+var_C]
.text$mn:000045C1                 mov     large fs:0, eax
.text$mn:000045C7                 mov     [ebp+var_10], ecx
.text$mn:000045CA                 lea     eax, [ebp+arg_0]
.text$mn:000045CD                 push    eax             ; char **
.text$mn:000045CE                 mov     ecx, [ebp+var_10] ; this
.text$mn:000045D1                 call    ??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text$mn:000045D6                 mov     [ebp+var_4], 0
.text$mn:000045DD                 mov     ecx, [ebp+var_10]
.text$mn:000045E0                 mov     dword ptr [ecx], offset ??_7runtime_error@std@@6B@ ; const std::runtime_error::`vftable'
.text$mn:000045E6                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000045ED                 mov     eax, [ebp+var_10]
.text$mn:000045F0                 mov     ecx, [ebp+var_C]
.text$mn:000045F3                 mov     large fs:0, ecx
.text$mn:000045FA                 pop     ecx
.text$mn:000045FB                 mov     esp, ebp
.text$mn:000045FD                 pop     ebp
.text$mn:000045FE                 retn    4
.text$mn:000045FE ??0runtime_error@std@@QAE@PBD@Z endp
.text$mn:000045FE
.text$mn:000045FE ; ---------------------------------------------------------------------------
.text$mn:00004601                 align 4
.text$mn:00004601 _text$mn        ends
.text$mn:00004601
.text$x:00004604 ; ===========================================================================
.text$x:00004604
.text$x:00004604 ; Segment type: Pure code
.text$x:00004604 ; Segment permissions: Read/Execute
.text$x:00004604 _text$x         segment para public 'CODE' use32
.text$x:00004604                 assume cs:_text$x
.text$x:00004604                 ;org 4604h
.text$x:00004604 ; COMDAT (pick associative to section at 45A4)
.text$x:00004604                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004604
.text$x:00004604 ; =============== S U B R O U T I N E =======================================
.text$x:00004604
.text$x:00004604
.text$x:00004604 __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 proc near
.text$x:00004604                                         ; DATA XREF: .xdata$x:00009540o
.text$x:00004604                 mov     ecx, [ebp-10h]  ; this
.text$x:00004607                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00004607 __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 endp
.text$x:00004607
.text$x:0000460C
.text$x:0000460C ; =============== S U B R O U T I N E =======================================
.text$x:0000460C
.text$x:0000460C
.text$x:0000460C __ehhandler$??0runtime_error@std@@QAE@PBD@Z proc near
.text$x:0000460C                                         ; DATA XREF: std::runtime_error::runtime_error(char const *)+5o
.text$x:0000460C
.text$x:0000460C arg_4           = dword ptr  8
.text$x:0000460C
.text$x:0000460C                 mov     edx, [esp+arg_4]
.text$x:00004610                 lea     eax, [edx+0Ch]
.text$x:00004613                 mov     ecx, [edx-8]
.text$x:00004616                 xor     ecx, eax
.text$x:00004618                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000461D                 mov     eax, offset __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
.text$x:00004622                 jmp     ___CxxFrameHandler3
.text$x:00004622 __ehhandler$??0runtime_error@std@@QAE@PBD@Z endp
.text$x:00004622
.text$x:00004622 ; ---------------------------------------------------------------------------
.text$x:00004627                 align 4
.text$x:00004627 _text$x         ends
.text$x:00004627
.text$mn:00004628 ; ===========================================================================
.text$mn:00004628
.text$mn:00004628 ; Segment type: Pure code
.text$mn:00004628 ; Segment permissions: Read/Execute
.text$mn:00004628 _text$mn        segment para public 'CODE' use32
.text$mn:00004628                 assume cs:_text$mn
.text$mn:00004628                 ;org 4628h
.text$mn:00004628 ; COMDAT (pick any)
.text$mn:00004628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004628
.text$mn:00004628 ; =============== S U B R O U T I N E =======================================
.text$mn:00004628
.text$mn:00004628 ; Attributes: bp-based frame
.text$mn:00004628
.text$mn:00004628 ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, char, int, char const *, char const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, char, int, char const *, char const &, struct std::_Iterator_base12>(void)
.text$mn:00004628                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00004628 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00004628                                         ; CODE XREF: __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00004628                                         ; __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z$0+3j ...
.text$mn:00004628
.text$mn:00004628 var_10          = dword ptr -10h
.text$mn:00004628 var_C           = dword ptr -0Ch
.text$mn:00004628 var_4           = dword ptr -4
.text$mn:00004628
.text$mn:00004628                 push    ebp
.text$mn:00004629                 mov     ebp, esp
.text$mn:0000462B                 push    0FFFFFFFFh
.text$mn:0000462D                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00004632                 mov     eax, large fs:0
.text$mn:00004638                 push    eax
.text$mn:00004639                 push    ecx
.text$mn:0000463A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000463F                 xor     eax, ebp
.text$mn:00004641                 push    eax
.text$mn:00004642                 lea     eax, [ebp+var_C]
.text$mn:00004645                 mov     large fs:0, eax
.text$mn:0000464B                 mov     [ebp+var_10], ecx
.text$mn:0000464E                 mov     [ebp+var_4], 0
.text$mn:00004655                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000465C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000465F                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00004664                 mov     ecx, [ebp+var_C]
.text$mn:00004667                 mov     large fs:0, ecx
.text$mn:0000466E                 pop     ecx
.text$mn:0000466F                 mov     esp, ebp
.text$mn:00004671                 pop     ebp
.text$mn:00004672                 retn
.text$mn:00004672 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00004672
.text$mn:00004672 ; ---------------------------------------------------------------------------
.text$mn:00004673                 align 4
.text$mn:00004673 _text$mn        ends
.text$mn:00004673
.text$x:00004674 ; ===========================================================================
.text$x:00004674
.text$x:00004674 ; Segment type: Pure code
.text$x:00004674 ; Segment permissions: Read/Execute
.text$x:00004674 _text$x         segment para public 'CODE' use32
.text$x:00004674                 assume cs:_text$x
.text$x:00004674                 ;org 4674h
.text$x:00004674 ; COMDAT (pick associative to section at 4628)
.text$x:00004674                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004674
.text$x:00004674 ; =============== S U B R O U T I N E =======================================
.text$x:00004674
.text$x:00004674
.text$x:00004674 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00004674                                         ; DATA XREF: .xdata$x:00009D64o
.text$x:00004674                 mov     ecx, [ebp-10h]  ; this
.text$x:00004677                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00004677 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00004677
.text$x:0000467C
.text$x:0000467C ; =============== S U B R O U T I N E =======================================
.text$x:0000467C
.text$x:0000467C
.text$x:0000467C __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:0000467C                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(void)+5o
.text$x:0000467C
.text$x:0000467C arg_4           = dword ptr  8
.text$x:0000467C
.text$x:0000467C                 mov     edx, [esp+arg_4]
.text$x:00004680                 lea     eax, [edx+0Ch]
.text$x:00004683                 mov     ecx, [edx-8]
.text$x:00004686                 xor     ecx, eax
.text$x:00004688                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000468D                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00004692                 jmp     ___CxxFrameHandler3
.text$x:00004692 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00004692
.text$x:00004692 ; ---------------------------------------------------------------------------
.text$x:00004697                 align 4
.text$x:00004697 _text$x         ends
.text$x:00004697
.text$mn:00004698 ; ===========================================================================
.text$mn:00004698
.text$mn:00004698 ; Segment type: Pure code
.text$mn:00004698 ; Segment permissions: Read/Execute
.text$mn:00004698 _text$mn        segment para public 'CODE' use32
.text$mn:00004698                 assume cs:_text$mn
.text$mn:00004698                 ;org 4698h
.text$mn:00004698 ; COMDAT (pick any)
.text$mn:00004698                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004698
.text$mn:00004698 ; =============== S U B R O U T I N E =======================================
.text$mn:00004698
.text$mn:00004698 ; Attributes: bp-based frame
.text$mn:00004698
.text$mn:00004698 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:00004698                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00004698 ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004698                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:00004698                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:00004698
.text$mn:00004698 var_10          = dword ptr -10h
.text$mn:00004698 var_C           = dword ptr -0Ch
.text$mn:00004698 var_4           = dword ptr -4
.text$mn:00004698
.text$mn:00004698                 push    ebp
.text$mn:00004699                 mov     ebp, esp
.text$mn:0000469B                 push    0FFFFFFFFh
.text$mn:0000469D                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:000046A2                 mov     eax, large fs:0
.text$mn:000046A8                 push    eax
.text$mn:000046A9                 push    ecx
.text$mn:000046AA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000046AF                 xor     eax, ebp
.text$mn:000046B1                 push    eax
.text$mn:000046B2                 lea     eax, [ebp+var_C]
.text$mn:000046B5                 mov     large fs:0, eax
.text$mn:000046BB                 mov     [ebp+var_10], ecx
.text$mn:000046BE                 mov     [ebp+var_4], 0
.text$mn:000046C5                 mov     ecx, [ebp+var_10]
.text$mn:000046C8                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:000046CD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000046D4                 mov     ecx, [ebp+var_10]
.text$mn:000046D7                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:000046DC                 mov     ecx, [ebp+var_C]
.text$mn:000046DF                 mov     large fs:0, ecx
.text$mn:000046E6                 pop     ecx
.text$mn:000046E7                 mov     esp, ebp
.text$mn:000046E9                 pop     ebp
.text$mn:000046EA                 retn
.text$mn:000046EA ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:000046EA
.text$mn:000046EA ; ---------------------------------------------------------------------------
.text$mn:000046EB                 align 4
.text$mn:000046EB _text$mn        ends
.text$mn:000046EB
.text$x:000046EC ; ===========================================================================
.text$x:000046EC
.text$x:000046EC ; Segment type: Pure code
.text$x:000046EC ; Segment permissions: Read/Execute
.text$x:000046EC _text$x         segment para public 'CODE' use32
.text$x:000046EC                 assume cs:_text$x
.text$x:000046EC                 ;org 46ECh
.text$x:000046EC ; COMDAT (pick associative to section at 4698)
.text$x:000046EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000046EC
.text$x:000046EC ; =============== S U B R O U T I N E =======================================
.text$x:000046EC
.text$x:000046EC
.text$x:000046EC __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000046EC                                         ; DATA XREF: .xdata$x:000092DCo
.text$x:000046EC                 mov     ecx, [ebp-10h]
.text$x:000046EF                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:000046EF __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000046EF
.text$x:000046F4
.text$x:000046F4 ; =============== S U B R O U T I N E =======================================
.text$x:000046F4
.text$x:000046F4
.text$x:000046F4 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:000046F4                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:000046F4
.text$x:000046F4 arg_4           = dword ptr  8
.text$x:000046F4
.text$x:000046F4                 mov     edx, [esp+arg_4]
.text$x:000046F8                 lea     eax, [edx+0Ch]
.text$x:000046FB                 mov     ecx, [edx-8]
.text$x:000046FE                 xor     ecx, eax
.text$x:00004700                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004705                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:0000470A                 jmp     ___CxxFrameHandler3
.text$x:0000470A __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:0000470A
.text$x:0000470A ; ---------------------------------------------------------------------------
.text$x:0000470F                 align 10h
.text$x:0000470F _text$x         ends
.text$x:0000470F
.text$mn:00004710 ; ===========================================================================
.text$mn:00004710
.text$mn:00004710 ; Segment type: Pure code
.text$mn:00004710 ; Segment permissions: Read/Execute
.text$mn:00004710 _text$mn        segment para public 'CODE' use32
.text$mn:00004710                 assume cs:_text$mn
.text$mn:00004710                 ;org 4710h
.text$mn:00004710 ; COMDAT (pick any)
.text$mn:00004710                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004710
.text$mn:00004710 ; =============== S U B R O U T I N E =======================================
.text$mn:00004710
.text$mn:00004710 ; Attributes: bp-based frame
.text$mn:00004710
.text$mn:00004710 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00004710                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00004710 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004710                                         ; CODE XREF: __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$2+3j
.text$mn:00004710                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0+3j ...
.text$mn:00004710
.text$mn:00004710 var_10          = dword ptr -10h
.text$mn:00004710 var_C           = dword ptr -0Ch
.text$mn:00004710 var_4           = dword ptr -4
.text$mn:00004710
.text$mn:00004710                 push    ebp
.text$mn:00004711                 mov     ebp, esp
.text$mn:00004713                 push    0FFFFFFFFh
.text$mn:00004715                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000471A                 mov     eax, large fs:0
.text$mn:00004720                 push    eax
.text$mn:00004721                 push    ecx
.text$mn:00004722                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004727                 xor     eax, ebp
.text$mn:00004729                 push    eax
.text$mn:0000472A                 lea     eax, [ebp+var_C]
.text$mn:0000472D                 mov     large fs:0, eax
.text$mn:00004733                 mov     [ebp+var_10], ecx
.text$mn:00004736                 mov     [ebp+var_4], 0
.text$mn:0000473D                 mov     ecx, [ebp+var_10]
.text$mn:00004740                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00004745                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000474C                 mov     ecx, [ebp+var_10]
.text$mn:0000474F                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00004754                 mov     ecx, [ebp+var_C]
.text$mn:00004757                 mov     large fs:0, ecx
.text$mn:0000475E                 pop     ecx
.text$mn:0000475F                 mov     esp, ebp
.text$mn:00004761                 pop     ebp
.text$mn:00004762                 retn
.text$mn:00004762 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004762
.text$mn:00004762 ; ---------------------------------------------------------------------------
.text$mn:00004763                 align 4
.text$mn:00004763 _text$mn        ends
.text$mn:00004763
.text$x:00004764 ; ===========================================================================
.text$x:00004764
.text$x:00004764 ; Segment type: Pure code
.text$x:00004764 ; Segment permissions: Read/Execute
.text$x:00004764 _text$x         segment para public 'CODE' use32
.text$x:00004764                 assume cs:_text$x
.text$x:00004764                 ;org 4764h
.text$x:00004764 ; COMDAT (pick associative to section at 4710)
.text$x:00004764                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004764
.text$x:00004764 ; =============== S U B R O U T I N E =======================================
.text$x:00004764
.text$x:00004764
.text$x:00004764 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004764                                         ; DATA XREF: .xdata$x:000097D4o
.text$x:00004764                 mov     ecx, [ebp-10h]
.text$x:00004767                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00004767 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004767
.text$x:0000476C
.text$x:0000476C ; =============== S U B R O U T I N E =======================================
.text$x:0000476C
.text$x:0000476C
.text$x:0000476C __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:0000476C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:0000476C
.text$x:0000476C arg_4           = dword ptr  8
.text$x:0000476C
.text$x:0000476C                 mov     edx, [esp+arg_4]
.text$x:00004770                 lea     eax, [edx+0Ch]
.text$x:00004773                 mov     ecx, [edx-8]
.text$x:00004776                 xor     ecx, eax
.text$x:00004778                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000477D                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:00004782                 jmp     ___CxxFrameHandler3
.text$x:00004782 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00004782
.text$x:00004782 ; ---------------------------------------------------------------------------
.text$x:00004787                 align 4
.text$x:00004787 _text$x         ends
.text$x:00004787
.text$mn:00004788 ; ===========================================================================
.text$mn:00004788
.text$mn:00004788 ; Segment type: Pure code
.text$mn:00004788 ; Segment permissions: Read/Execute
.text$mn:00004788 _text$mn        segment para public 'CODE' use32
.text$mn:00004788                 assume cs:_text$mn
.text$mn:00004788                 ;org 4788h
.text$mn:00004788 ; COMDAT (pick any)
.text$mn:00004788                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004788
.text$mn:00004788 ; =============== S U B R O U T I N E =======================================
.text$mn:00004788
.text$mn:00004788 ; Attributes: bp-based frame
.text$mn:00004788
.text$mn:00004788 ; public: __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>>::~_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>>(void)
.text$mn:00004788                 public ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
.text$mn:00004788 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00004788                                         ; CODE XREF: __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$5+3j
.text$mn:00004788                                         ; __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$7+3j ...
.text$mn:00004788
.text$mn:00004788 var_10          = dword ptr -10h
.text$mn:00004788 var_C           = dword ptr -0Ch
.text$mn:00004788 var_4           = dword ptr -4
.text$mn:00004788
.text$mn:00004788                 push    ebp
.text$mn:00004789                 mov     ebp, esp
.text$mn:0000478B                 push    0FFFFFFFFh
.text$mn:0000478D                 push    offset __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
.text$mn:00004792                 mov     eax, large fs:0
.text$mn:00004798                 push    eax
.text$mn:00004799                 push    ecx
.text$mn:0000479A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000479F                 xor     eax, ebp
.text$mn:000047A1                 push    eax
.text$mn:000047A2                 lea     eax, [ebp+var_C]
.text$mn:000047A5                 mov     large fs:0, eax
.text$mn:000047AB                 mov     [ebp+var_10], ecx
.text$mn:000047AE                 mov     [ebp+var_4], 0
.text$mn:000047B5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000047BC                 mov     ecx, [ebp+var_10]
.text$mn:000047BF                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(void)
.text$mn:000047C4                 mov     ecx, [ebp+var_C]
.text$mn:000047C7                 mov     large fs:0, ecx
.text$mn:000047CE                 pop     ecx
.text$mn:000047CF                 mov     esp, ebp
.text$mn:000047D1                 pop     ebp
.text$mn:000047D2                 retn
.text$mn:000047D2 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:000047D2
.text$mn:000047D2 ; ---------------------------------------------------------------------------
.text$mn:000047D3                 align 4
.text$mn:000047D3 _text$mn        ends
.text$mn:000047D3
.text$x:000047D4 ; ===========================================================================
.text$x:000047D4
.text$x:000047D4 ; Segment type: Pure code
.text$x:000047D4 ; Segment permissions: Read/Execute
.text$x:000047D4 _text$x         segment para public 'CODE' use32
.text$x:000047D4                 assume cs:_text$x
.text$x:000047D4                 ;org 47D4h
.text$x:000047D4 ; COMDAT (pick associative to section at 4788)
.text$x:000047D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000047D4
.text$x:000047D4 ; =============== S U B R O U T I N E =======================================
.text$x:000047D4
.text$x:000047D4
.text$x:000047D4 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000047D4                                         ; DATA XREF: .xdata$x:00009DE8o
.text$x:000047D4                 mov     ecx, [ebp-10h]
.text$x:000047D7                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,char,int,char const *,char const &,std::_Iterator_base12>(void)
.text$x:000047D7 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000047D7
.text$x:000047DC
.text$x:000047DC ; =============== S U B R O U T I N E =======================================
.text$x:000047DC
.text$x:000047DC
.text$x:000047DC __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:000047DC                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)+5o
.text$x:000047DC
.text$x:000047DC arg_4           = dword ptr  8
.text$x:000047DC
.text$x:000047DC                 mov     edx, [esp+arg_4]
.text$x:000047E0                 lea     eax, [edx+0Ch]
.text$x:000047E3                 mov     ecx, [edx-8]
.text$x:000047E6                 xor     ecx, eax
.text$x:000047E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000047ED                 mov     eax, offset __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
.text$x:000047F2                 jmp     ___CxxFrameHandler3
.text$x:000047F2 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ endp
.text$x:000047F2
.text$x:000047F2 ; ---------------------------------------------------------------------------
.text$x:000047F7                 align 4
.text$x:000047F7 _text$x         ends
.text$x:000047F7
.text$mn:000047F8 ; ===========================================================================
.text$mn:000047F8
.text$mn:000047F8 ; Segment type: Pure code
.text$mn:000047F8 ; Segment permissions: Read/Execute
.text$mn:000047F8 _text$mn        segment para public 'CODE' use32
.text$mn:000047F8                 assume cs:_text$mn
.text$mn:000047F8                 ;org 47F8h
.text$mn:000047F8 ; COMDAT (pick any)
.text$mn:000047F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000047F8
.text$mn:000047F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000047F8
.text$mn:000047F8 ; Attributes: bp-based frame
.text$mn:000047F8
.text$mn:000047F8 ; public: __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>::~_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>(void)
.text$mn:000047F8                 public ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
.text$mn:000047F8 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000047F8                                         ; CODE XREF: __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$18+6j
.text$mn:000047F8                                         ; __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$19+6j ...
.text$mn:000047F8
.text$mn:000047F8 var_10          = dword ptr -10h
.text$mn:000047F8 var_C           = dword ptr -0Ch
.text$mn:000047F8 var_4           = dword ptr -4
.text$mn:000047F8
.text$mn:000047F8                 push    ebp
.text$mn:000047F9                 mov     ebp, esp
.text$mn:000047FB                 push    0FFFFFFFFh
.text$mn:000047FD                 push    offset __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
.text$mn:00004802                 mov     eax, large fs:0
.text$mn:00004808                 push    eax
.text$mn:00004809                 push    ecx
.text$mn:0000480A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000480F                 xor     eax, ebp
.text$mn:00004811                 push    eax
.text$mn:00004812                 lea     eax, [ebp+var_C]
.text$mn:00004815                 mov     large fs:0, eax
.text$mn:0000481B                 mov     [ebp+var_10], ecx
.text$mn:0000481E                 mov     [ebp+var_4], 0
.text$mn:00004825                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000482C                 mov     ecx, [ebp+var_10]
.text$mn:0000482F                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00004834                 mov     ecx, [ebp+var_C]
.text$mn:00004837                 mov     large fs:0, ecx
.text$mn:0000483E                 pop     ecx
.text$mn:0000483F                 mov     esp, ebp
.text$mn:00004841                 pop     ebp
.text$mn:00004842                 retn
.text$mn:00004842 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004842
.text$mn:00004842 ; ---------------------------------------------------------------------------
.text$mn:00004843                 align 4
.text$mn:00004843 _text$mn        ends
.text$mn:00004843
.text$x:00004844 ; ===========================================================================
.text$x:00004844
.text$x:00004844 ; Segment type: Pure code
.text$x:00004844 ; Segment permissions: Read/Execute
.text$x:00004844 _text$x         segment para public 'CODE' use32
.text$x:00004844                 assume cs:_text$x
.text$x:00004844                 ;org 4844h
.text$x:00004844 ; COMDAT (pick associative to section at 47F8)
.text$x:00004844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004844
.text$x:00004844 ; =============== S U B R O U T I N E =======================================
.text$x:00004844
.text$x:00004844
.text$x:00004844 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004844                                         ; DATA XREF: .xdata$x:00009E98o
.text$x:00004844                 mov     ecx, [ebp-10h]
.text$x:00004847                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00004847 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004847
.text$x:0000484C
.text$x:0000484C ; =============== S U B R O U T I N E =======================================
.text$x:0000484C
.text$x:0000484C
.text$x:0000484C __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:0000484C                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)+5o
.text$x:0000484C
.text$x:0000484C arg_4           = dword ptr  8
.text$x:0000484C
.text$x:0000484C                 mov     edx, [esp+arg_4]
.text$x:00004850                 lea     eax, [edx+0Ch]
.text$x:00004853                 mov     ecx, [edx-8]
.text$x:00004856                 xor     ecx, eax
.text$x:00004858                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000485D                 mov     eax, offset __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
.text$x:00004862                 jmp     ___CxxFrameHandler3
.text$x:00004862 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ endp
.text$x:00004862
.text$x:00004862 ; ---------------------------------------------------------------------------
.text$x:00004867                 align 4
.text$x:00004867 _text$x         ends
.text$x:00004867
.text$mn:00004868 ; ===========================================================================
.text$mn:00004868
.text$mn:00004868 ; Segment type: Pure code
.text$mn:00004868 ; Segment permissions: Read/Execute
.text$mn:00004868 _text$mn        segment para public 'CODE' use32
.text$mn:00004868                 assume cs:_text$mn
.text$mn:00004868                 ;org 4868h
.text$mn:00004868 ; COMDAT (pick any)
.text$mn:00004868                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004868
.text$mn:00004868 ; =============== S U B R O U T I N E =======================================
.text$mn:00004868
.text$mn:00004868 ; Attributes: bp-based frame
.text$mn:00004868
.text$mn:00004868 ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:00004868                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004868 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:00004868                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:00004868                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:00004868
.text$mn:00004868 var_10          = dword ptr -10h
.text$mn:00004868 var_C           = dword ptr -0Ch
.text$mn:00004868 var_4           = dword ptr -4
.text$mn:00004868
.text$mn:00004868                 push    ebp
.text$mn:00004869                 mov     ebp, esp
.text$mn:0000486B                 push    0FFFFFFFFh
.text$mn:0000486D                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00004872                 mov     eax, large fs:0
.text$mn:00004878                 push    eax
.text$mn:00004879                 push    ecx
.text$mn:0000487A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000487F                 xor     eax, ebp
.text$mn:00004881                 push    eax
.text$mn:00004882                 lea     eax, [ebp+var_C]
.text$mn:00004885                 mov     large fs:0, eax
.text$mn:0000488B                 mov     [ebp+var_10], ecx
.text$mn:0000488E                 mov     [ebp+var_4], 0
.text$mn:00004895                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000489C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000489F                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000048A4                 mov     ecx, [ebp+var_C]
.text$mn:000048A7                 mov     large fs:0, ecx
.text$mn:000048AE                 pop     ecx
.text$mn:000048AF                 mov     esp, ebp
.text$mn:000048B1                 pop     ebp
.text$mn:000048B2                 retn
.text$mn:000048B2 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000048B2
.text$mn:000048B2 ; ---------------------------------------------------------------------------
.text$mn:000048B3                 align 4
.text$mn:000048B3 _text$mn        ends
.text$mn:000048B3
.text$x:000048B4 ; ===========================================================================
.text$x:000048B4
.text$x:000048B4 ; Segment type: Pure code
.text$x:000048B4 ; Segment permissions: Read/Execute
.text$x:000048B4 _text$x         segment para public 'CODE' use32
.text$x:000048B4                 assume cs:_text$x
.text$x:000048B4                 ;org 48B4h
.text$x:000048B4 ; COMDAT (pick associative to section at 4868)
.text$x:000048B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000048B4
.text$x:000048B4 ; =============== S U B R O U T I N E =======================================
.text$x:000048B4
.text$x:000048B4
.text$x:000048B4 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000048B4                                         ; DATA XREF: .xdata$x:00009284o
.text$x:000048B4                 mov     ecx, [ebp-10h]  ; this
.text$x:000048B7                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000048B7 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000048B7
.text$x:000048BC
.text$x:000048BC ; =============== S U B R O U T I N E =======================================
.text$x:000048BC
.text$x:000048BC
.text$x:000048BC __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000048BC                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000048BC
.text$x:000048BC arg_4           = dword ptr  8
.text$x:000048BC
.text$x:000048BC                 mov     edx, [esp+arg_4]
.text$x:000048C0                 lea     eax, [edx+0Ch]
.text$x:000048C3                 mov     ecx, [edx-8]
.text$x:000048C6                 xor     ecx, eax
.text$x:000048C8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000048CD                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000048D2                 jmp     ___CxxFrameHandler3
.text$x:000048D2 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000048D2
.text$x:000048D2 ; ---------------------------------------------------------------------------
.text$x:000048D7                 align 4
.text$x:000048D7 _text$x         ends
.text$x:000048D7
.text$mn:000048D8 ; ===========================================================================
.text$mn:000048D8
.text$mn:000048D8 ; Segment type: Pure code
.text$mn:000048D8 ; Segment permissions: Read/Execute
.text$mn:000048D8 _text$mn        segment para public 'CODE' use32
.text$mn:000048D8                 assume cs:_text$mn
.text$mn:000048D8                 ;org 48D8h
.text$mn:000048D8 ; COMDAT (pick any)
.text$mn:000048D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000048D8
.text$mn:000048D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000048D8
.text$mn:000048D8 ; Attributes: bp-based frame
.text$mn:000048D8
.text$mn:000048D8 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000048D8                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000048D8 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000048D8                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:000048D8                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:000048D8
.text$mn:000048D8 var_10          = dword ptr -10h
.text$mn:000048D8 var_C           = dword ptr -0Ch
.text$mn:000048D8 var_4           = dword ptr -4
.text$mn:000048D8
.text$mn:000048D8                 push    ebp
.text$mn:000048D9                 mov     ebp, esp
.text$mn:000048DB                 push    0FFFFFFFFh
.text$mn:000048DD                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000048E2                 mov     eax, large fs:0
.text$mn:000048E8                 push    eax
.text$mn:000048E9                 push    ecx
.text$mn:000048EA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000048EF                 xor     eax, ebp
.text$mn:000048F1                 push    eax
.text$mn:000048F2                 lea     eax, [ebp+var_C]
.text$mn:000048F5                 mov     large fs:0, eax
.text$mn:000048FB                 mov     [ebp+var_10], ecx
.text$mn:000048FE                 mov     [ebp+var_4], 0
.text$mn:00004905                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000490C                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000490F                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00004914                 mov     ecx, [ebp+var_C]
.text$mn:00004917                 mov     large fs:0, ecx
.text$mn:0000491E                 pop     ecx
.text$mn:0000491F                 mov     esp, ebp
.text$mn:00004921                 pop     ebp
.text$mn:00004922                 retn
.text$mn:00004922 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00004922
.text$mn:00004922 ; ---------------------------------------------------------------------------
.text$mn:00004923                 align 4
.text$mn:00004923 _text$mn        ends
.text$mn:00004923
.text$x:00004924 ; ===========================================================================
.text$x:00004924
.text$x:00004924 ; Segment type: Pure code
.text$x:00004924 ; Segment permissions: Read/Execute
.text$x:00004924 _text$x         segment para public 'CODE' use32
.text$x:00004924                 assume cs:_text$x
.text$x:00004924                 ;org 4924h
.text$x:00004924 ; COMDAT (pick associative to section at 48D8)
.text$x:00004924                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004924
.text$x:00004924 ; =============== S U B R O U T I N E =======================================
.text$x:00004924
.text$x:00004924
.text$x:00004924 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00004924                                         ; DATA XREF: .xdata$x:0000977Co
.text$x:00004924                 mov     ecx, [ebp-10h]  ; this
.text$x:00004927                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00004927 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00004927
.text$x:0000492C
.text$x:0000492C ; =============== S U B R O U T I N E =======================================
.text$x:0000492C
.text$x:0000492C
.text$x:0000492C __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:0000492C                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:0000492C
.text$x:0000492C arg_4           = dword ptr  8
.text$x:0000492C
.text$x:0000492C                 mov     edx, [esp+arg_4]
.text$x:00004930                 lea     eax, [edx+0Ch]
.text$x:00004933                 mov     ecx, [edx-8]
.text$x:00004936                 xor     ecx, eax
.text$x:00004938                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000493D                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00004942                 jmp     ___CxxFrameHandler3
.text$x:00004942 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00004942
.text$x:00004942 ; ---------------------------------------------------------------------------
.text$x:00004947                 align 4
.text$x:00004947 _text$x         ends
.text$x:00004947
.text$mn:00004948 ; ===========================================================================
.text$mn:00004948
.text$mn:00004948 ; Segment type: Pure code
.text$mn:00004948 ; Segment permissions: Read/Execute
.text$mn:00004948 _text$mn        segment para public 'CODE' use32
.text$mn:00004948                 assume cs:_text$mn
.text$mn:00004948                 ;org 4948h
.text$mn:00004948 ; COMDAT (pick any)
.text$mn:00004948                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004948
.text$mn:00004948 ; =============== S U B R O U T I N E =======================================
.text$mn:00004948
.text$mn:00004948 ; Attributes: bp-based frame
.text$mn:00004948
.text$mn:00004948 ; public: __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::~_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>(void)
.text$mn:00004948                 public ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:00004948 ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$mn:00004948                                         ; CODE XREF: __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0+3j
.text$mn:00004948                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+3Fp ...
.text$mn:00004948
.text$mn:00004948 var_10          = dword ptr -10h
.text$mn:00004948 var_C           = dword ptr -0Ch
.text$mn:00004948 var_4           = dword ptr -4
.text$mn:00004948
.text$mn:00004948                 push    ebp
.text$mn:00004949                 mov     ebp, esp
.text$mn:0000494B                 push    0FFFFFFFFh
.text$mn:0000494D                 push    offset __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$mn:00004952                 mov     eax, large fs:0
.text$mn:00004958                 push    eax
.text$mn:00004959                 push    ecx
.text$mn:0000495A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000495F                 xor     eax, ebp
.text$mn:00004961                 push    eax
.text$mn:00004962                 lea     eax, [ebp+var_C]
.text$mn:00004965                 mov     large fs:0, eax
.text$mn:0000496B                 mov     [ebp+var_10], ecx
.text$mn:0000496E                 mov     [ebp+var_4], 0
.text$mn:00004975                 mov     ecx, [ebp+var_10]
.text$mn:00004978                 call    ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:0000497D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004984                 mov     ecx, [ebp+var_10]
.text$mn:00004987                 call    ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:0000498C                 mov     ecx, [ebp+var_C]
.text$mn:0000498F                 mov     large fs:0, ecx
.text$mn:00004996                 pop     ecx
.text$mn:00004997                 mov     esp, ebp
.text$mn:00004999                 pop     ebp
.text$mn:0000499A                 retn
.text$mn:0000499A ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$mn:0000499A
.text$mn:0000499A ; ---------------------------------------------------------------------------
.text$mn:0000499B                 align 4
.text$mn:0000499B _text$mn        ends
.text$mn:0000499B
.text$x:0000499C ; ===========================================================================
.text$x:0000499C
.text$x:0000499C ; Segment type: Pure code
.text$x:0000499C ; Segment permissions: Read/Execute
.text$x:0000499C _text$x         segment para public 'CODE' use32
.text$x:0000499C                 assume cs:_text$x
.text$x:0000499C                 ;org 499Ch
.text$x:0000499C ; COMDAT (pick associative to section at 4948)
.text$x:0000499C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000499C
.text$x:0000499C ; =============== S U B R O U T I N E =======================================
.text$x:0000499C
.text$x:0000499C
.text$x:0000499C __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
.text$x:0000499C                                         ; DATA XREF: .xdata$x:000099ECo
.text$x:0000499C                 mov     ecx, [ebp-10h]
.text$x:0000499F                 jmp     ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$x:0000499F __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 endp
.text$x:0000499F
.text$x:000049A4
.text$x:000049A4 ; =============== S U B R O U T I N E =======================================
.text$x:000049A4
.text$x:000049A4
.text$x:000049A4 __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ proc near
.text$x:000049A4                                         ; DATA XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+5o
.text$x:000049A4
.text$x:000049A4 arg_4           = dword ptr  8
.text$x:000049A4
.text$x:000049A4                 mov     edx, [esp+arg_4]
.text$x:000049A8                 lea     eax, [edx+0Ch]
.text$x:000049AB                 mov     ecx, [edx-8]
.text$x:000049AE                 xor     ecx, eax
.text$x:000049B0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000049B5                 mov     eax, offset __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.text$x:000049BA                 jmp     ___CxxFrameHandler3
.text$x:000049BA __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ endp
.text$x:000049BA
.text$x:000049BA ; ---------------------------------------------------------------------------
.text$x:000049BF                 align 10h
.text$x:000049BF _text$x         ends
.text$x:000049BF
.text$mn:000049C0 ; ===========================================================================
.text$mn:000049C0
.text$mn:000049C0 ; Segment type: Pure code
.text$mn:000049C0 ; Segment permissions: Read/Execute
.text$mn:000049C0 _text$mn        segment para public 'CODE' use32
.text$mn:000049C0                 assume cs:_text$mn
.text$mn:000049C0                 ;org 49C0h
.text$mn:000049C0 ; COMDAT (pick any)
.text$mn:000049C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000049C0
.text$mn:000049C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000049C0
.text$mn:000049C0 ; Attributes: bp-based frame
.text$mn:000049C0
.text$mn:000049C0 ; public: __thiscall std::_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~_Vector_val<struct std::_Simple_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:000049C0                 public ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:000049C0 ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000049C0                                         ; CODE XREF: __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0+3j
.text$mn:000049C0                                         ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+3Fp ...
.text$mn:000049C0
.text$mn:000049C0 var_10          = dword ptr -10h
.text$mn:000049C0 var_C           = dword ptr -0Ch
.text$mn:000049C0 var_4           = dword ptr -4
.text$mn:000049C0
.text$mn:000049C0                 push    ebp
.text$mn:000049C1                 mov     ebp, esp
.text$mn:000049C3                 push    0FFFFFFFFh
.text$mn:000049C5                 push    offset __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$mn:000049CA                 mov     eax, large fs:0
.text$mn:000049D0                 push    eax
.text$mn:000049D1                 push    ecx
.text$mn:000049D2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000049D7                 xor     eax, ebp
.text$mn:000049D9                 push    eax
.text$mn:000049DA                 lea     eax, [ebp+var_C]
.text$mn:000049DD                 mov     large fs:0, eax
.text$mn:000049E3                 mov     [ebp+var_10], ecx
.text$mn:000049E6                 mov     [ebp+var_4], 0
.text$mn:000049ED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000049F4                 mov     ecx, [ebp+var_10] ; this
.text$mn:000049F7                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:000049FC                 mov     ecx, [ebp+var_C]
.text$mn:000049FF                 mov     large fs:0, ecx
.text$mn:00004A06                 pop     ecx
.text$mn:00004A07                 mov     esp, ebp
.text$mn:00004A09                 pop     ebp
.text$mn:00004A0A                 retn
.text$mn:00004A0A ??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$mn:00004A0A
.text$mn:00004A0A ; ---------------------------------------------------------------------------
.text$mn:00004A0B                 align 4
.text$mn:00004A0B _text$mn        ends
.text$mn:00004A0B
.text$x:00004A0C ; ===========================================================================
.text$x:00004A0C
.text$x:00004A0C ; Segment type: Pure code
.text$x:00004A0C ; Segment permissions: Read/Execute
.text$x:00004A0C _text$x         segment para public 'CODE' use32
.text$x:00004A0C                 assume cs:_text$x
.text$x:00004A0C                 ;org 4A0Ch
.text$x:00004A0C ; COMDAT (pick associative to section at 49C0)
.text$x:00004A0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004A0C
.text$x:00004A0C ; =============== S U B R O U T I N E =======================================
.text$x:00004A0C
.text$x:00004A0C
.text$x:00004A0C __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00004A0C                                         ; DATA XREF: .xdata$x:00009994o
.text$x:00004A0C                 mov     ecx, [ebp-10h]  ; this
.text$x:00004A0F                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00004A0F __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:00004A0F
.text$x:00004A14
.text$x:00004A14 ; =============== S U B R O U T I N E =======================================
.text$x:00004A14
.text$x:00004A14
.text$x:00004A14 __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ proc near
.text$x:00004A14                                         ; DATA XREF: std::_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~_Vector_val<std::_Simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00004A14
.text$x:00004A14 arg_4           = dword ptr  8
.text$x:00004A14
.text$x:00004A14                 mov     edx, [esp+arg_4]
.text$x:00004A18                 lea     eax, [edx+0Ch]
.text$x:00004A1B                 mov     ecx, [edx-8]
.text$x:00004A1E                 xor     ecx, eax
.text$x:00004A20                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004A25                 mov     eax, offset __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.text$x:00004A2A                 jmp     ___CxxFrameHandler3
.text$x:00004A2A __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ endp
.text$x:00004A2A
.text$x:00004A2A ; ---------------------------------------------------------------------------
.text$x:00004A2F                 align 10h
.text$x:00004A2F _text$x         ends
.text$x:00004A2F
.text$mn:00004A30 ; ===========================================================================
.text$mn:00004A30
.text$mn:00004A30 ; Segment type: Pure code
.text$mn:00004A30 ; Segment permissions: Read/Execute
.text$mn:00004A30 _text$mn        segment para public 'CODE' use32
.text$mn:00004A30                 assume cs:_text$mn
.text$mn:00004A30                 ;org 4A30h
.text$mn:00004A30 ; COMDAT (pick any)
.text$mn:00004A30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004A30
.text$mn:00004A30 ; =============== S U B R O U T I N E =======================================
.text$mn:00004A30
.text$mn:00004A30 ; Attributes: bp-based frame
.text$mn:00004A30
.text$mn:00004A30 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:00004A30                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00004A30 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:00004A30                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+CCCp
.text$mn:00004A30                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D32p ...
.text$mn:00004A30
.text$mn:00004A30 var_10          = dword ptr -10h
.text$mn:00004A30 var_C           = dword ptr -0Ch
.text$mn:00004A30 var_4           = dword ptr -4
.text$mn:00004A30
.text$mn:00004A30                 push    ebp
.text$mn:00004A31                 mov     ebp, esp
.text$mn:00004A33                 push    0FFFFFFFFh
.text$mn:00004A35                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00004A3A                 mov     eax, large fs:0
.text$mn:00004A40                 push    eax
.text$mn:00004A41                 push    ecx
.text$mn:00004A42                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004A47                 xor     eax, ebp
.text$mn:00004A49                 push    eax
.text$mn:00004A4A                 lea     eax, [ebp+var_C]
.text$mn:00004A4D                 mov     large fs:0, eax
.text$mn:00004A53                 mov     [ebp+var_10], ecx
.text$mn:00004A56                 mov     [ebp+var_4], 0
.text$mn:00004A5D                 push    0               ; Size
.text$mn:00004A5F                 push    1               ; char
.text$mn:00004A61                 mov     ecx, [ebp+var_10]
.text$mn:00004A64                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004A69                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004A70                 mov     ecx, [ebp+var_10]
.text$mn:00004A73                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:00004A78                 mov     ecx, [ebp+var_C]
.text$mn:00004A7B                 mov     large fs:0, ecx
.text$mn:00004A82                 pop     ecx
.text$mn:00004A83                 mov     esp, ebp
.text$mn:00004A85                 pop     ebp
.text$mn:00004A86                 retn
.text$mn:00004A86 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:00004A86
.text$mn:00004A86 ; ---------------------------------------------------------------------------
.text$mn:00004A87                 align 4
.text$mn:00004A87 _text$mn        ends
.text$mn:00004A87
.text$x:00004A88 ; ===========================================================================
.text$x:00004A88
.text$x:00004A88 ; Segment type: Pure code
.text$x:00004A88 ; Segment permissions: Read/Execute
.text$x:00004A88 _text$x         segment para public 'CODE' use32
.text$x:00004A88                 assume cs:_text$x
.text$x:00004A88                 ;org 4A88h
.text$x:00004A88 ; COMDAT (pick associative to section at 4A30)
.text$x:00004A88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004A88
.text$x:00004A88 ; =============== S U B R O U T I N E =======================================
.text$x:00004A88
.text$x:00004A88
.text$x:00004A88 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00004A88                                         ; DATA XREF: .xdata$x:00009368o
.text$x:00004A88                 mov     ecx, [ebp-10h]
.text$x:00004A8B                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00004A8B __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:00004A8B
.text$x:00004A90
.text$x:00004A90 ; =============== S U B R O U T I N E =======================================
.text$x:00004A90
.text$x:00004A90
.text$x:00004A90 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00004A90                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00004A90
.text$x:00004A90 arg_4           = dword ptr  8
.text$x:00004A90
.text$x:00004A90                 mov     edx, [esp+arg_4]
.text$x:00004A94                 lea     eax, [edx+0Ch]
.text$x:00004A97                 mov     ecx, [edx-8]
.text$x:00004A9A                 xor     ecx, eax
.text$x:00004A9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004AA1                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00004AA6                 jmp     ___CxxFrameHandler3
.text$x:00004AA6 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00004AA6
.text$x:00004AA6 ; ---------------------------------------------------------------------------
.text$x:00004AAB                 align 4
.text$x:00004AAB _text$x         ends
.text$x:00004AAB
.text$mn:00004AAC ; ===========================================================================
.text$mn:00004AAC
.text$mn:00004AAC ; Segment type: Pure code
.text$mn:00004AAC ; Segment permissions: Read/Execute
.text$mn:00004AAC _text$mn        segment para public 'CODE' use32
.text$mn:00004AAC                 assume cs:_text$mn
.text$mn:00004AAC                 ;org 4AACh
.text$mn:00004AAC ; COMDAT (pick any)
.text$mn:00004AAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004AAC
.text$mn:00004AAC ; =============== S U B R O U T I N E =======================================
.text$mn:00004AAC
.text$mn:00004AAC ; Attributes: bp-based frame
.text$mn:00004AAC
.text$mn:00004AAC ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00004AAC                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00004AAC ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00004AAC                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+5F2p
.text$mn:00004AAC                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+66Bp ...
.text$mn:00004AAC
.text$mn:00004AAC var_10          = dword ptr -10h
.text$mn:00004AAC var_C           = dword ptr -0Ch
.text$mn:00004AAC var_4           = dword ptr -4
.text$mn:00004AAC
.text$mn:00004AAC                 push    ebp
.text$mn:00004AAD                 mov     ebp, esp
.text$mn:00004AAF                 push    0FFFFFFFFh
.text$mn:00004AB1                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00004AB6                 mov     eax, large fs:0
.text$mn:00004ABC                 push    eax
.text$mn:00004ABD                 push    ecx
.text$mn:00004ABE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004AC3                 xor     eax, ebp
.text$mn:00004AC5                 push    eax
.text$mn:00004AC6                 lea     eax, [ebp+var_C]
.text$mn:00004AC9                 mov     large fs:0, eax
.text$mn:00004ACF                 mov     [ebp+var_10], ecx
.text$mn:00004AD2                 mov     [ebp+var_4], 0
.text$mn:00004AD9                 push    0
.text$mn:00004ADB                 push    1
.text$mn:00004ADD                 mov     ecx, [ebp+var_10]
.text$mn:00004AE0                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00004AE5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004AEC                 mov     ecx, [ebp+var_10]
.text$mn:00004AEF                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00004AF4                 mov     ecx, [ebp+var_C]
.text$mn:00004AF7                 mov     large fs:0, ecx
.text$mn:00004AFE                 pop     ecx
.text$mn:00004AFF                 mov     esp, ebp
.text$mn:00004B01                 pop     ebp
.text$mn:00004B02                 retn
.text$mn:00004B02 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00004B02
.text$mn:00004B02 ; ---------------------------------------------------------------------------
.text$mn:00004B03                 align 4
.text$mn:00004B03 _text$mn        ends
.text$mn:00004B03
.text$x:00004B04 ; ===========================================================================
.text$x:00004B04
.text$x:00004B04 ; Segment type: Pure code
.text$x:00004B04 ; Segment permissions: Read/Execute
.text$x:00004B04 _text$x         segment para public 'CODE' use32
.text$x:00004B04                 assume cs:_text$x
.text$x:00004B04                 ;org 4B04h
.text$x:00004B04 ; COMDAT (pick associative to section at 4AAC)
.text$x:00004B04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004B04
.text$x:00004B04 ; =============== S U B R O U T I N E =======================================
.text$x:00004B04
.text$x:00004B04
.text$x:00004B04 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00004B04                                         ; DATA XREF: .xdata$x:000098B0o
.text$x:00004B04                 mov     ecx, [ebp-10h]
.text$x:00004B07                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00004B07 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00004B07
.text$x:00004B0C
.text$x:00004B0C ; =============== S U B R O U T I N E =======================================
.text$x:00004B0C
.text$x:00004B0C
.text$x:00004B0C __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00004B0C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00004B0C
.text$x:00004B0C arg_4           = dword ptr  8
.text$x:00004B0C
.text$x:00004B0C                 mov     edx, [esp+arg_4]
.text$x:00004B10                 lea     eax, [edx+0Ch]
.text$x:00004B13                 mov     ecx, [edx-8]
.text$x:00004B16                 xor     ecx, eax
.text$x:00004B18                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004B1D                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00004B22                 jmp     ___CxxFrameHandler3
.text$x:00004B22 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00004B22
.text$x:00004B22 ; ---------------------------------------------------------------------------
.text$x:00004B27                 align 4
.text$x:00004B27 _text$x         ends
.text$x:00004B27
.text$mn:00004B28 ; ===========================================================================
.text$mn:00004B28
.text$mn:00004B28 ; Segment type: Pure code
.text$mn:00004B28 ; Segment permissions: Read/Execute
.text$mn:00004B28 _text$mn        segment para public 'CODE' use32
.text$mn:00004B28                 assume cs:_text$mn
.text$mn:00004B28                 ;org 4B28h
.text$mn:00004B28 ; COMDAT (pick any)
.text$mn:00004B28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004B28
.text$mn:00004B28 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B28
.text$mn:00004B28 ; Attributes: bp-based frame
.text$mn:00004B28
.text$mn:00004B28 ; public: __thiscall std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::~pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(void)
.text$mn:00004B28                 public ??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ
.text$mn:00004B28 ??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ proc near
.text$mn:00004B28                                         ; CODE XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::`scalar deleting destructor'(uint)+Ap
.text$mn:00004B28                                         ; ThemeSwitcher::addThemeFromXml(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+84p ...
.text$mn:00004B28
.text$mn:00004B28 var_10          = dword ptr -10h
.text$mn:00004B28 var_C           = dword ptr -0Ch
.text$mn:00004B28 var_4           = dword ptr -4
.text$mn:00004B28
.text$mn:00004B28                 push    ebp
.text$mn:00004B29                 mov     ebp, esp
.text$mn:00004B2B                 push    0FFFFFFFFh
.text$mn:00004B2D                 push    offset __ehhandler$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ
.text$mn:00004B32                 mov     eax, large fs:0
.text$mn:00004B38                 push    eax
.text$mn:00004B39                 push    ecx
.text$mn:00004B3A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004B3F                 xor     eax, ebp
.text$mn:00004B41                 push    eax
.text$mn:00004B42                 lea     eax, [ebp+var_C]
.text$mn:00004B45                 mov     large fs:0, eax
.text$mn:00004B4B                 mov     [ebp+var_10], ecx
.text$mn:00004B4E                 mov     [ebp+var_4], 1
.text$mn:00004B55                 mov     byte ptr [ebp+var_4], 0
.text$mn:00004B59                 mov     ecx, [ebp+var_10]
.text$mn:00004B5C                 add     ecx, 1Ch
.text$mn:00004B5F                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004B64                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004B6B                 mov     ecx, [ebp+var_10]
.text$mn:00004B6E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004B73                 mov     ecx, [ebp+var_C]
.text$mn:00004B76                 mov     large fs:0, ecx
.text$mn:00004B7D                 pop     ecx
.text$mn:00004B7E                 mov     esp, ebp
.text$mn:00004B80                 pop     ebp
.text$mn:00004B81                 retn
.text$mn:00004B81 ??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ endp
.text$mn:00004B81
.text$mn:00004B81 ; ---------------------------------------------------------------------------
.text$mn:00004B82                 align 4
.text$mn:00004B82 _text$mn        ends
.text$mn:00004B82
.text$x:00004B84 ; ===========================================================================
.text$x:00004B84
.text$x:00004B84 ; Segment type: Pure code
.text$x:00004B84 ; Segment permissions: Read/Execute
.text$x:00004B84 _text$x         segment para public 'CODE' use32
.text$x:00004B84                 assume cs:_text$x
.text$x:00004B84                 ;org 4B84h
.text$x:00004B84 ; COMDAT (pick associative to section at 4B28)
.text$x:00004B84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004B84
.text$x:00004B84 ; =============== S U B R O U T I N E =======================================
.text$x:00004B84
.text$x:00004B84
.text$x:00004B84 __unwindfunclet$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ$0 proc near
.text$x:00004B84                                         ; DATA XREF: .xdata$x:00009B78o
.text$x:00004B84                 mov     ecx, [ebp-10h]
.text$x:00004B87                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004B87 __unwindfunclet$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ$0 endp
.text$x:00004B87
.text$x:00004B8C
.text$x:00004B8C ; =============== S U B R O U T I N E =======================================
.text$x:00004B8C
.text$x:00004B8C
.text$x:00004B8C __unwindfunclet$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ$1 proc near
.text$x:00004B8C                                         ; DATA XREF: .xdata$x:00009B80o
.text$x:00004B8C                 mov     ecx, [ebp-10h]
.text$x:00004B8F                 add     ecx, 1Ch
.text$x:00004B92                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00004B92 __unwindfunclet$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ$1 endp
.text$x:00004B92
.text$x:00004B97
.text$x:00004B97 ; =============== S U B R O U T I N E =======================================
.text$x:00004B97
.text$x:00004B97
.text$x:00004B97 __ehhandler$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ proc near
.text$x:00004B97                                         ; DATA XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::~pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)+5o
.text$x:00004B97
.text$x:00004B97 arg_4           = dword ptr  8
.text$x:00004B97
.text$x:00004B97                 mov     edx, [esp+arg_4]
.text$x:00004B9B                 lea     eax, [edx+0Ch]
.text$x:00004B9E                 mov     ecx, [edx-8]
.text$x:00004BA1                 xor     ecx, eax
.text$x:00004BA3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004BA8                 mov     eax, offset __ehfuncinfo$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ
.text$x:00004BAD                 jmp     ___CxxFrameHandler3
.text$x:00004BAD __ehhandler$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ endp
.text$x:00004BAD
.text$x:00004BAD ; ---------------------------------------------------------------------------
.text$x:00004BB2                 align 4
.text$x:00004BB2 _text$x         ends
.text$x:00004BB2
.text$mn:00004BB4 ; ===========================================================================
.text$mn:00004BB4
.text$mn:00004BB4 ; Segment type: Pure code
.text$mn:00004BB4 ; Segment permissions: Read/Execute
.text$mn:00004BB4 _text$mn        segment para public 'CODE' use32
.text$mn:00004BB4                 assume cs:_text$mn
.text$mn:00004BB4                 ;org 4BB4h
.text$mn:00004BB4 ; COMDAT (pick any)
.text$mn:00004BB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004BB4
.text$mn:00004BB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004BB4
.text$mn:00004BB4 ; Attributes: bp-based frame
.text$mn:00004BB4
.text$mn:00004BB4 ; public: __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::~vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>(void)
.text$mn:00004BB4                 public ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00004BB4 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$mn:00004BB4                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+E2Bp
.text$mn:00004BB4                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+E3Dp ...
.text$mn:00004BB4
.text$mn:00004BB4 var_10          = dword ptr -10h
.text$mn:00004BB4 var_C           = dword ptr -0Ch
.text$mn:00004BB4 var_4           = dword ptr -4
.text$mn:00004BB4
.text$mn:00004BB4                 push    ebp
.text$mn:00004BB5                 mov     ebp, esp
.text$mn:00004BB7                 push    0FFFFFFFFh
.text$mn:00004BB9                 push    offset __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$mn:00004BBE                 mov     eax, large fs:0
.text$mn:00004BC4                 push    eax
.text$mn:00004BC5                 push    ecx
.text$mn:00004BC6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004BCB                 xor     eax, ebp
.text$mn:00004BCD                 push    eax
.text$mn:00004BCE                 lea     eax, [ebp+var_C]
.text$mn:00004BD1                 mov     large fs:0, eax
.text$mn:00004BD7                 mov     [ebp+var_10], ecx
.text$mn:00004BDA                 mov     [ebp+var_4], 0
.text$mn:00004BE1                 mov     ecx, [ebp+var_10]
.text$mn:00004BE4                 call    ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:00004BE9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004BF0                 mov     ecx, [ebp+var_10]
.text$mn:00004BF3                 call    ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00004BF8                 mov     ecx, [ebp+var_C]
.text$mn:00004BFB                 mov     large fs:0, ecx
.text$mn:00004C02                 pop     ecx
.text$mn:00004C03                 mov     esp, ebp
.text$mn:00004C05                 pop     ebp
.text$mn:00004C06                 retn
.text$mn:00004C06 ??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$mn:00004C06
.text$mn:00004C06 ; ---------------------------------------------------------------------------
.text$mn:00004C07                 align 4
.text$mn:00004C07 _text$mn        ends
.text$mn:00004C07
.text$x:00004C08 ; ===========================================================================
.text$x:00004C08
.text$x:00004C08 ; Segment type: Pure code
.text$x:00004C08 ; Segment permissions: Read/Execute
.text$x:00004C08 _text$x         segment para public 'CODE' use32
.text$x:00004C08                 assume cs:_text$x
.text$x:00004C08                 ;org 4C08h
.text$x:00004C08 ; COMDAT (pick associative to section at 4BB4)
.text$x:00004C08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C08
.text$x:00004C08 ; =============== S U B R O U T I N E =======================================
.text$x:00004C08
.text$x:00004C08
.text$x:00004C08 __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 proc near
.text$x:00004C08                                         ; DATA XREF: .xdata$x:00009A44o
.text$x:00004C08                 mov     ecx, [ebp-10h]
.text$x:00004C0B                 jmp     ??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$x:00004C0B __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 endp
.text$x:00004C0B
.text$x:00004C10
.text$x:00004C10 ; =============== S U B R O U T I N E =======================================
.text$x:00004C10
.text$x:00004C10
.text$x:00004C10 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ proc near
.text$x:00004C10                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+5o
.text$x:00004C10
.text$x:00004C10 arg_4           = dword ptr  8
.text$x:00004C10
.text$x:00004C10                 mov     edx, [esp+arg_4]
.text$x:00004C14                 lea     eax, [edx+0Ch]
.text$x:00004C17                 mov     ecx, [edx-8]
.text$x:00004C1A                 xor     ecx, eax
.text$x:00004C1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004C21                 mov     eax, offset __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.text$x:00004C26                 jmp     ___CxxFrameHandler3
.text$x:00004C26 __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ endp
.text$x:00004C26
.text$x:00004C26 ; ---------------------------------------------------------------------------
.text$x:00004C2B                 align 4
.text$x:00004C2B _text$x         ends
.text$x:00004C2B
.text$mn:00004C2C ; ===========================================================================
.text$mn:00004C2C
.text$mn:00004C2C ; Segment type: Pure code
.text$mn:00004C2C ; Segment permissions: Read/Execute
.text$mn:00004C2C _text$mn        segment para public 'CODE' use32
.text$mn:00004C2C                 assume cs:_text$mn
.text$mn:00004C2C                 ;org 4C2Ch
.text$mn:00004C2C ; COMDAT (pick any)
.text$mn:00004C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C2C
.text$mn:00004C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00004C2C
.text$mn:00004C2C ; Attributes: bp-based frame
.text$mn:00004C2C
.text$mn:00004C2C ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00004C2C                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00004C2C ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00004C2C                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00004C2C                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00004C2C
.text$mn:00004C2C var_4           = dword ptr -4
.text$mn:00004C2C
.text$mn:00004C2C                 push    ebp
.text$mn:00004C2D                 mov     ebp, esp
.text$mn:00004C2F                 push    ecx
.text$mn:00004C30                 mov     [ebp+var_4], ecx
.text$mn:00004C33                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004C36                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00004C3B                 mov     esp, ebp
.text$mn:00004C3D                 pop     ebp
.text$mn:00004C3E                 retn
.text$mn:00004C3E ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00004C3E
.text$mn:00004C3E ; ---------------------------------------------------------------------------
.text$mn:00004C3F                 align 10h
.text$mn:00004C3F _text$mn        ends
.text$mn:00004C3F
.text$mn:00004C40 ; ===========================================================================
.text$mn:00004C40
.text$mn:00004C40 ; Segment type: Pure code
.text$mn:00004C40 ; Segment permissions: Read/Execute
.text$mn:00004C40 _text$mn        segment para public 'CODE' use32
.text$mn:00004C40                 assume cs:_text$mn
.text$mn:00004C40                 ;org 4C40h
.text$mn:00004C40 ; COMDAT (pick any)
.text$mn:00004C40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004C40
.text$mn:00004C40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C40
.text$mn:00004C40 ; Attributes: bp-based frame
.text$mn:00004C40
.text$mn:00004C40 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00004C40                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00004C40 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00004C40                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00004C40                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00004C40
.text$mn:00004C40 var_10          = dword ptr -10h
.text$mn:00004C40 var_C           = dword ptr -0Ch
.text$mn:00004C40 var_4           = dword ptr -4
.text$mn:00004C40
.text$mn:00004C40                 push    ebp
.text$mn:00004C41                 mov     ebp, esp
.text$mn:00004C43                 push    0FFFFFFFFh
.text$mn:00004C45                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00004C4A                 mov     eax, large fs:0
.text$mn:00004C50                 push    eax
.text$mn:00004C51                 push    ecx
.text$mn:00004C52                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C57                 xor     eax, ebp
.text$mn:00004C59                 push    eax
.text$mn:00004C5A                 lea     eax, [ebp+var_C]
.text$mn:00004C5D                 mov     large fs:0, eax
.text$mn:00004C63                 mov     [ebp+var_10], ecx
.text$mn:00004C66                 mov     [ebp+var_4], 0
.text$mn:00004C6D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004C74                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004C77                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00004C7C                 mov     ecx, [ebp+var_C]
.text$mn:00004C7F                 mov     large fs:0, ecx
.text$mn:00004C86                 pop     ecx
.text$mn:00004C87                 mov     esp, ebp
.text$mn:00004C89                 pop     ebp
.text$mn:00004C8A                 retn
.text$mn:00004C8A ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00004C8A
.text$mn:00004C8A ; ---------------------------------------------------------------------------
.text$mn:00004C8B                 align 4
.text$mn:00004C8B _text$mn        ends
.text$mn:00004C8B
.text$x:00004C8C ; ===========================================================================
.text$x:00004C8C
.text$x:00004C8C ; Segment type: Pure code
.text$x:00004C8C ; Segment permissions: Read/Execute
.text$x:00004C8C _text$x         segment para public 'CODE' use32
.text$x:00004C8C                 assume cs:_text$x
.text$x:00004C8C                 ;org 4C8Ch
.text$x:00004C8C ; COMDAT (pick associative to section at 4C40)
.text$x:00004C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004C8C
.text$x:00004C8C ; =============== S U B R O U T I N E =======================================
.text$x:00004C8C
.text$x:00004C8C
.text$x:00004C8C __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00004C8C                                         ; DATA XREF: .xdata$x:0000961Co
.text$x:00004C8C                 mov     ecx, [ebp-10h]  ; this
.text$x:00004C8F                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00004C8F __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00004C8F
.text$x:00004C94
.text$x:00004C94 ; =============== S U B R O U T I N E =======================================
.text$x:00004C94
.text$x:00004C94
.text$x:00004C94 __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00004C94                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00004C94
.text$x:00004C94 arg_4           = dword ptr  8
.text$x:00004C94
.text$x:00004C94                 mov     edx, [esp+arg_4]
.text$x:00004C98                 lea     eax, [edx+0Ch]
.text$x:00004C9B                 mov     ecx, [edx-8]
.text$x:00004C9E                 xor     ecx, eax
.text$x:00004CA0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004CA5                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00004CAA                 jmp     ___CxxFrameHandler3
.text$x:00004CAA __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00004CAA
.text$x:00004CAA ; ---------------------------------------------------------------------------
.text$x:00004CAF                 align 10h
.text$x:00004CAF _text$x         ends
.text$x:00004CAF
.text$mn:00004CB0 ; ===========================================================================
.text$mn:00004CB0
.text$mn:00004CB0 ; Segment type: Pure code
.text$mn:00004CB0 ; Segment permissions: Read/Execute
.text$mn:00004CB0 _text$mn        segment para public 'CODE' use32
.text$mn:00004CB0                 assume cs:_text$mn
.text$mn:00004CB0                 ;org 4CB0h
.text$mn:00004CB0 ; COMDAT (pick any)
.text$mn:00004CB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004CB0
.text$mn:00004CB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004CB0
.text$mn:00004CB0 ; Attributes: bp-based frame
.text$mn:00004CB0
.text$mn:00004CB0 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00004CB0                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00004CB0 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00004CB0                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00004CB0                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00004CB0
.text$mn:00004CB0 var_10          = dword ptr -10h
.text$mn:00004CB0 var_C           = dword ptr -0Ch
.text$mn:00004CB0 var_4           = dword ptr -4
.text$mn:00004CB0
.text$mn:00004CB0                 push    ebp
.text$mn:00004CB1                 mov     ebp, esp
.text$mn:00004CB3                 push    0FFFFFFFFh
.text$mn:00004CB5                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00004CBA                 mov     eax, large fs:0
.text$mn:00004CC0                 push    eax
.text$mn:00004CC1                 push    ecx
.text$mn:00004CC2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004CC7                 xor     eax, ebp
.text$mn:00004CC9                 push    eax
.text$mn:00004CCA                 lea     eax, [ebp+var_C]
.text$mn:00004CCD                 mov     large fs:0, eax
.text$mn:00004CD3                 mov     [ebp+var_10], ecx
.text$mn:00004CD6                 mov     [ebp+var_4], 0
.text$mn:00004CDD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004CE4                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004CE7                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00004CEC                 mov     ecx, [ebp+var_C]
.text$mn:00004CEF                 mov     large fs:0, ecx
.text$mn:00004CF6                 pop     ecx
.text$mn:00004CF7                 mov     esp, ebp
.text$mn:00004CF9                 pop     ebp
.text$mn:00004CFA                 retn
.text$mn:00004CFA ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00004CFA
.text$mn:00004CFA ; ---------------------------------------------------------------------------
.text$mn:00004CFB                 align 4
.text$mn:00004CFB _text$mn        ends
.text$mn:00004CFB
.text$x:00004CFC ; ===========================================================================
.text$x:00004CFC
.text$x:00004CFC ; Segment type: Pure code
.text$x:00004CFC ; Segment permissions: Read/Execute
.text$x:00004CFC _text$x         segment para public 'CODE' use32
.text$x:00004CFC                 assume cs:_text$x
.text$x:00004CFC                 ;org 4CFCh
.text$x:00004CFC ; COMDAT (pick associative to section at 4CB0)
.text$x:00004CFC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004CFC
.text$x:00004CFC ; =============== S U B R O U T I N E =======================================
.text$x:00004CFC
.text$x:00004CFC
.text$x:00004CFC __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00004CFC                                         ; DATA XREF: .xdata$x:000096A0o
.text$x:00004CFC                 mov     ecx, [ebp-10h]  ; this
.text$x:00004CFF                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00004CFF __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00004CFF
.text$x:00004D04
.text$x:00004D04 ; =============== S U B R O U T I N E =======================================
.text$x:00004D04
.text$x:00004D04
.text$x:00004D04 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00004D04                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00004D04
.text$x:00004D04 arg_4           = dword ptr  8
.text$x:00004D04
.text$x:00004D04                 mov     edx, [esp+arg_4]
.text$x:00004D08                 lea     eax, [edx+0Ch]
.text$x:00004D0B                 mov     ecx, [edx-8]
.text$x:00004D0E                 xor     ecx, eax
.text$x:00004D10                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004D15                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00004D1A                 jmp     ___CxxFrameHandler3
.text$x:00004D1A __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00004D1A
.text$x:00004D1A ; ---------------------------------------------------------------------------
.text$x:00004D1F                 align 10h
.text$x:00004D1F _text$x         ends
.text$x:00004D1F
.text$mn:00004D20 ; ===========================================================================
.text$mn:00004D20
.text$mn:00004D20 ; Segment type: Pure code
.text$mn:00004D20 ; Segment permissions: Read/Execute
.text$mn:00004D20 _text$mn        segment para public 'CODE' use32
.text$mn:00004D20                 assume cs:_text$mn
.text$mn:00004D20                 ;org 4D20h
.text$mn:00004D20 ; COMDAT (pick any)
.text$mn:00004D20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004D20
.text$mn:00004D20 ; =============== S U B R O U T I N E =======================================
.text$mn:00004D20
.text$mn:00004D20 ; Attributes: bp-based frame
.text$mn:00004D20
.text$mn:00004D20 ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00004D20                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:00004D20 ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00004D20                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:00004D20                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:00004D20
.text$mn:00004D20 var_14          = byte ptr -14h
.text$mn:00004D20 var_10          = dword ptr -10h
.text$mn:00004D20 var_C           = dword ptr -0Ch
.text$mn:00004D20 var_4           = dword ptr -4
.text$mn:00004D20
.text$mn:00004D20                 push    ebp
.text$mn:00004D21                 mov     ebp, esp
.text$mn:00004D23                 push    0FFFFFFFFh
.text$mn:00004D25                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:00004D2A                 mov     eax, large fs:0
.text$mn:00004D30                 push    eax
.text$mn:00004D31                 sub     esp, 8
.text$mn:00004D34                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004D39                 xor     eax, ebp
.text$mn:00004D3B                 push    eax
.text$mn:00004D3C                 lea     eax, [ebp+var_C]
.text$mn:00004D3F                 mov     large fs:0, eax
.text$mn:00004D45                 mov     [ebp+var_10], ecx
.text$mn:00004D48                 push    3               ; int
.text$mn:00004D4A                 lea     ecx, [ebp+var_14] ; this
.text$mn:00004D4D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00004D52                 mov     [ebp+var_4], 0
.text$mn:00004D59                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004D5C                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00004D61                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004D68                 lea     ecx, [ebp+var_14] ; this
.text$mn:00004D6B                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00004D70                 mov     ecx, [ebp+var_C]
.text$mn:00004D73                 mov     large fs:0, ecx
.text$mn:00004D7A                 pop     ecx
.text$mn:00004D7B                 mov     esp, ebp
.text$mn:00004D7D                 pop     ebp
.text$mn:00004D7E                 retn
.text$mn:00004D7E ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:00004D7E
.text$mn:00004D7E ; ---------------------------------------------------------------------------
.text$mn:00004D7F                 align 10h
.text$mn:00004D7F _text$mn        ends
.text$mn:00004D7F
.text$x:00004D80 ; ===========================================================================
.text$x:00004D80
.text$x:00004D80 ; Segment type: Pure code
.text$x:00004D80 ; Segment permissions: Read/Execute
.text$x:00004D80 _text$x         segment para public 'CODE' use32
.text$x:00004D80                 assume cs:_text$x
.text$x:00004D80                 ;org 4D80h
.text$x:00004D80 ; COMDAT (pick associative to section at 4D20)
.text$x:00004D80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004D80
.text$x:00004D80 ; =============== S U B R O U T I N E =======================================
.text$x:00004D80
.text$x:00004D80
.text$x:00004D80 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:00004D80                                         ; DATA XREF: .xdata$x:000091F8o
.text$x:00004D80                 lea     ecx, [ebp-14h]  ; this
.text$x:00004D83                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00004D83 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:00004D83
.text$x:00004D88
.text$x:00004D88 ; =============== S U B R O U T I N E =======================================
.text$x:00004D88
.text$x:00004D88
.text$x:00004D88 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:00004D88                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:00004D88
.text$x:00004D88 arg_4           = dword ptr  8
.text$x:00004D88
.text$x:00004D88                 mov     edx, [esp+arg_4]
.text$x:00004D8C                 lea     eax, [edx+0Ch]
.text$x:00004D8F                 mov     ecx, [edx-0Ch]
.text$x:00004D92                 xor     ecx, eax
.text$x:00004D94                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004D99                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:00004D9E                 jmp     ___CxxFrameHandler3
.text$x:00004D9E __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:00004D9E
.text$x:00004D9E ; ---------------------------------------------------------------------------
.text$x:00004DA3                 align 4
.text$x:00004DA3 _text$x         ends
.text$x:00004DA3
.text$mn:00004DA4 ; ===========================================================================
.text$mn:00004DA4
.text$mn:00004DA4 ; Segment type: Pure code
.text$mn:00004DA4 ; Segment permissions: Read/Execute
.text$mn:00004DA4 _text$mn        segment para public 'CODE' use32
.text$mn:00004DA4                 assume cs:_text$mn
.text$mn:00004DA4                 ;org 4DA4h
.text$mn:00004DA4 ; COMDAT (pick any)
.text$mn:00004DA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004DA4
.text$mn:00004DA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00004DA4
.text$mn:00004DA4 ; Attributes: bp-based frame
.text$mn:00004DA4
.text$mn:00004DA4 ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00004DA4                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00004DA4 ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00004DA4                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00004DA4                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00004DA4
.text$mn:00004DA4 var_10          = dword ptr -10h
.text$mn:00004DA4 var_C           = dword ptr -0Ch
.text$mn:00004DA4 var_4           = dword ptr -4
.text$mn:00004DA4
.text$mn:00004DA4                 push    ebp
.text$mn:00004DA5                 mov     ebp, esp
.text$mn:00004DA7                 push    0FFFFFFFFh
.text$mn:00004DA9                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00004DAE                 mov     eax, large fs:0
.text$mn:00004DB4                 push    eax
.text$mn:00004DB5                 push    ecx
.text$mn:00004DB6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004DBB                 xor     eax, ebp
.text$mn:00004DBD                 push    eax
.text$mn:00004DBE                 lea     eax, [ebp+var_C]
.text$mn:00004DC1                 mov     large fs:0, eax
.text$mn:00004DC7                 mov     [ebp+var_10], ecx
.text$mn:00004DCA                 mov     [ebp+var_4], 0
.text$mn:00004DD1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004DD8                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004DDB                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00004DE0                 mov     ecx, [ebp+var_C]
.text$mn:00004DE3                 mov     large fs:0, ecx
.text$mn:00004DEA                 pop     ecx
.text$mn:00004DEB                 mov     esp, ebp
.text$mn:00004DED                 pop     ebp
.text$mn:00004DEE                 retn
.text$mn:00004DEE ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00004DEE
.text$mn:00004DEE ; ---------------------------------------------------------------------------
.text$mn:00004DEF                 align 10h
.text$mn:00004DEF _text$mn        ends
.text$mn:00004DEF
.text$x:00004DF0 ; ===========================================================================
.text$x:00004DF0
.text$x:00004DF0 ; Segment type: Pure code
.text$x:00004DF0 ; Segment permissions: Read/Execute
.text$x:00004DF0 _text$x         segment para public 'CODE' use32
.text$x:00004DF0                 assume cs:_text$x
.text$x:00004DF0                 ;org 4DF0h
.text$x:00004DF0 ; COMDAT (pick associative to section at 4DA4)
.text$x:00004DF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004DF0
.text$x:00004DF0 ; =============== S U B R O U T I N E =======================================
.text$x:00004DF0
.text$x:00004DF0
.text$x:00004DF0 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00004DF0                                         ; DATA XREF: .xdata$x:00009724o
.text$x:00004DF0                 mov     ecx, [ebp-10h]  ; this
.text$x:00004DF3                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00004DF3 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:00004DF3
.text$x:00004DF8
.text$x:00004DF8 ; =============== S U B R O U T I N E =======================================
.text$x:00004DF8
.text$x:00004DF8
.text$x:00004DF8 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00004DF8                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00004DF8
.text$x:00004DF8 arg_4           = dword ptr  8
.text$x:00004DF8
.text$x:00004DF8                 mov     edx, [esp+arg_4]
.text$x:00004DFC                 lea     eax, [edx+0Ch]
.text$x:00004DFF                 mov     ecx, [edx-8]
.text$x:00004E02                 xor     ecx, eax
.text$x:00004E04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E09                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00004E0E                 jmp     ___CxxFrameHandler3
.text$x:00004E0E __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00004E0E
.text$x:00004E0E ; ---------------------------------------------------------------------------
.text$x:00004E13                 align 4
.text$x:00004E13 _text$x         ends
.text$x:00004E13
.text$mn:00004E14 ; ===========================================================================
.text$mn:00004E14
.text$mn:00004E14 ; Segment type: Pure code
.text$mn:00004E14 ; Segment permissions: Read/Execute
.text$mn:00004E14 _text$mn        segment para public 'CODE' use32
.text$mn:00004E14                 assume cs:_text$mn
.text$mn:00004E14                 ;org 4E14h
.text$mn:00004E14 ; COMDAT (pick any)
.text$mn:00004E14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E14
.text$mn:00004E14 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E14
.text$mn:00004E14 ; Attributes: bp-based frame
.text$mn:00004E14
.text$mn:00004E14 ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00004E14                 public ??1error_category@std@@UAE@XZ
.text$mn:00004E14 ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00004E14                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00004E14
.text$mn:00004E14 var_4           = dword ptr -4
.text$mn:00004E14
.text$mn:00004E14                 push    ebp
.text$mn:00004E15                 mov     ebp, esp
.text$mn:00004E17                 push    ecx
.text$mn:00004E18                 mov     [ebp+var_4], ecx
.text$mn:00004E1B                 mov     eax, [ebp+var_4]
.text$mn:00004E1E                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00004E24                 mov     esp, ebp
.text$mn:00004E26                 pop     ebp
.text$mn:00004E27                 retn
.text$mn:00004E27 ??1error_category@std@@UAE@XZ endp
.text$mn:00004E27
.text$mn:00004E27 _text$mn        ends
.text$mn:00004E27
.text$mn:00004E28 ; ===========================================================================
.text$mn:00004E28
.text$mn:00004E28 ; Segment type: Pure code
.text$mn:00004E28 ; Segment permissions: Read/Execute
.text$mn:00004E28 _text$mn        segment para public 'CODE' use32
.text$mn:00004E28                 assume cs:_text$mn
.text$mn:00004E28                 ;org 4E28h
.text$mn:00004E28 ; COMDAT (pick any)
.text$mn:00004E28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E28
.text$mn:00004E28 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E28
.text$mn:00004E28 ; Attributes: bp-based frame
.text$mn:00004E28
.text$mn:00004E28 ; _DWORD __thiscall std::runtime_error::~runtime_error(std::runtime_error *__hidden this)
.text$mn:00004E28                 public ??1runtime_error@std@@UAE@XZ
.text$mn:00004E28 ??1runtime_error@std@@UAE@XZ proc near  ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+Ap
.text$mn:00004E28                                         ; DATA XREF: .xdata$x:0000A384o
.text$mn:00004E28
.text$mn:00004E28 var_10          = dword ptr -10h
.text$mn:00004E28 var_C           = dword ptr -0Ch
.text$mn:00004E28 var_4           = dword ptr -4
.text$mn:00004E28
.text$mn:00004E28                 push    ebp
.text$mn:00004E29                 mov     ebp, esp
.text$mn:00004E2B                 push    0FFFFFFFFh
.text$mn:00004E2D                 push    offset __ehhandler$??1runtime_error@std@@UAE@XZ
.text$mn:00004E32                 mov     eax, large fs:0
.text$mn:00004E38                 push    eax
.text$mn:00004E39                 push    ecx
.text$mn:00004E3A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004E3F                 xor     eax, ebp
.text$mn:00004E41                 push    eax
.text$mn:00004E42                 lea     eax, [ebp+var_C]
.text$mn:00004E45                 mov     large fs:0, eax
.text$mn:00004E4B                 mov     [ebp+var_10], ecx
.text$mn:00004E4E                 mov     [ebp+var_4], 0
.text$mn:00004E55                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004E5C                 mov     ecx, [ebp+var_10] ; this
.text$mn:00004E5F                 call    ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$mn:00004E64                 mov     ecx, [ebp+var_C]
.text$mn:00004E67                 mov     large fs:0, ecx
.text$mn:00004E6E                 pop     ecx
.text$mn:00004E6F                 mov     esp, ebp
.text$mn:00004E71                 pop     ebp
.text$mn:00004E72                 retn
.text$mn:00004E72 ??1runtime_error@std@@UAE@XZ endp
.text$mn:00004E72
.text$mn:00004E72 ; ---------------------------------------------------------------------------
.text$mn:00004E73                 align 4
.text$mn:00004E73 _text$mn        ends
.text$mn:00004E73
.text$x:00004E74 ; ===========================================================================
.text$x:00004E74
.text$x:00004E74 ; Segment type: Pure code
.text$x:00004E74 ; Segment permissions: Read/Execute
.text$x:00004E74 _text$x         segment para public 'CODE' use32
.text$x:00004E74                 assume cs:_text$x
.text$x:00004E74                 ;org 4E74h
.text$x:00004E74 ; COMDAT (pick associative to section at 4E28)
.text$x:00004E74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004E74
.text$x:00004E74 ; =============== S U B R O U T I N E =======================================
.text$x:00004E74
.text$x:00004E74
.text$x:00004E74 __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 proc near
.text$x:00004E74                                         ; DATA XREF: .xdata$x:0000956Co
.text$x:00004E74                 mov     ecx, [ebp-10h]  ; this
.text$x:00004E77                 jmp     ??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text$x:00004E77 __unwindfunclet$??1runtime_error@std@@UAE@XZ$0 endp
.text$x:00004E77
.text$x:00004E7C
.text$x:00004E7C ; =============== S U B R O U T I N E =======================================
.text$x:00004E7C
.text$x:00004E7C
.text$x:00004E7C __ehhandler$??1runtime_error@std@@UAE@XZ proc near
.text$x:00004E7C                                         ; DATA XREF: std::runtime_error::~runtime_error(void)+5o
.text$x:00004E7C
.text$x:00004E7C arg_4           = dword ptr  8
.text$x:00004E7C
.text$x:00004E7C                 mov     edx, [esp+arg_4]
.text$x:00004E80                 lea     eax, [edx+0Ch]
.text$x:00004E83                 mov     ecx, [edx-8]
.text$x:00004E86                 xor     ecx, eax
.text$x:00004E88                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004E8D                 mov     eax, offset __ehfuncinfo$??1runtime_error@std@@UAE@XZ
.text$x:00004E92                 jmp     ___CxxFrameHandler3
.text$x:00004E92 __ehhandler$??1runtime_error@std@@UAE@XZ endp
.text$x:00004E92
.text$x:00004E92 ; ---------------------------------------------------------------------------
.text$x:00004E97                 align 4
.text$x:00004E97 _text$x         ends
.text$x:00004E97
.text$mn:00004E98 ; ===========================================================================
.text$mn:00004E98
.text$mn:00004E98 ; Segment type: Pure code
.text$mn:00004E98 ; Segment permissions: Read/Execute
.text$mn:00004E98 _text$mn        segment para public 'CODE' use32
.text$mn:00004E98                 assume cs:_text$mn
.text$mn:00004E98                 ;org 4E98h
.text$mn:00004E98 ; COMDAT (pick any)
.text$mn:00004E98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004E98
.text$mn:00004E98 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E98
.text$mn:00004E98 ; Attributes: bp-based frame
.text$mn:00004E98
.text$mn:00004E98 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00004E98                 public ??2@YAPAXIPAX@Z
.text$mn:00004E98 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00004E98                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00004E98
.text$mn:00004E98 arg_4           = dword ptr  0Ch
.text$mn:00004E98
.text$mn:00004E98                 push    ebp
.text$mn:00004E99                 mov     ebp, esp
.text$mn:00004E9B                 mov     eax, [ebp+arg_4]
.text$mn:00004E9E                 pop     ebp
.text$mn:00004E9F                 retn
.text$mn:00004E9F ??2@YAPAXIPAX@Z endp
.text$mn:00004E9F
.text$mn:00004E9F _text$mn        ends
.text$mn:00004E9F
.text$mn:00004EA0 ; ===========================================================================
.text$mn:00004EA0
.text$mn:00004EA0 ; Segment type: Pure code
.text$mn:00004EA0 ; Segment permissions: Read/Execute
.text$mn:00004EA0 _text$mn        segment para public 'CODE' use32
.text$mn:00004EA0                 assume cs:_text$mn
.text$mn:00004EA0                 ;org 4EA0h
.text$mn:00004EA0 ; COMDAT (pick any)
.text$mn:00004EA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EA0
.text$mn:00004EA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EA0
.text$mn:00004EA0 ; Attributes: bp-based frame
.text$mn:00004EA0
.text$mn:00004EA0 ; void __cdecl operator delete(void *)
.text$mn:00004EA0                 public ??3@YAXPAX0@Z
.text$mn:00004EA0 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00004EA0                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00004EA0                 push    ebp
.text$mn:00004EA1                 mov     ebp, esp
.text$mn:00004EA3                 pop     ebp
.text$mn:00004EA4                 retn
.text$mn:00004EA4 ??3@YAXPAX0@Z   endp
.text$mn:00004EA4
.text$mn:00004EA4 ; ---------------------------------------------------------------------------
.text$mn:00004EA5                 align 4
.text$mn:00004EA5 _text$mn        ends
.text$mn:00004EA5
.text$mn:00004EA8 ; ===========================================================================
.text$mn:00004EA8
.text$mn:00004EA8 ; Segment type: Pure code
.text$mn:00004EA8 ; Segment permissions: Read/Execute
.text$mn:00004EA8 _text$mn        segment para public 'CODE' use32
.text$mn:00004EA8                 assume cs:_text$mn
.text$mn:00004EA8                 ;org 4EA8h
.text$mn:00004EA8 ; COMDAT (pick any)
.text$mn:00004EA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004EA8
.text$mn:00004EA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00004EA8
.text$mn:00004EA8 ; Attributes: bp-based frame
.text$mn:00004EA8
.text$mn:00004EA8 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::operator=(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
.text$mn:00004EA8                 public ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00004EA8 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$mn:00004EA8                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+CBDp
.text$mn:00004EA8
.text$mn:00004EA8 var_2C          = dword ptr -2Ch
.text$mn:00004EA8 var_28          = dword ptr -28h
.text$mn:00004EA8 var_24          = dword ptr -24h
.text$mn:00004EA8 var_20          = dword ptr -20h
.text$mn:00004EA8 var_1C          = dword ptr -1Ch
.text$mn:00004EA8 var_18          = dword ptr -18h
.text$mn:00004EA8 var_14          = dword ptr -14h
.text$mn:00004EA8 var_F           = byte ptr -0Fh
.text$mn:00004EA8 var_E           = byte ptr -0Eh
.text$mn:00004EA8 var_D           = byte ptr -0Dh
.text$mn:00004EA8 var_C           = dword ptr -0Ch
.text$mn:00004EA8 var_4           = dword ptr -4
.text$mn:00004EA8 arg_0           = dword ptr  8
.text$mn:00004EA8
.text$mn:00004EA8                 push    ebp
.text$mn:00004EA9                 mov     ebp, esp
.text$mn:00004EAB                 push    0FFFFFFFFh
.text$mn:00004EAD                 push    offset __ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00004EB2                 mov     eax, large fs:0
.text$mn:00004EB8                 push    eax
.text$mn:00004EB9                 sub     esp, 20h
.text$mn:00004EBC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004EC1                 xor     eax, ebp
.text$mn:00004EC3                 push    eax
.text$mn:00004EC4                 lea     eax, [ebp+var_C]
.text$mn:00004EC7                 mov     large fs:0, eax
.text$mn:00004ECD                 mov     [ebp+var_14], ecx
.text$mn:00004ED0                 mov     eax, [ebp+var_14]
.text$mn:00004ED3                 cmp     eax, [ebp+arg_0]
.text$mn:00004ED6                 jz      loc_4F8F
.text$mn:00004EDC                 push    0               ; Size
.text$mn:00004EDE                 push    1               ; char
.text$mn:00004EE0                 mov     ecx, [ebp+var_14]
.text$mn:00004EE3                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00004EE8                 xor     ecx, ecx
.text$mn:00004EEA                 jz      short loc_4F01
.text$mn:00004EEC                 lea     edx, [ebp+var_D]
.text$mn:00004EEF                 push    edx
.text$mn:00004EF0                 mov     ecx, [ebp+arg_0]
.text$mn:00004EF3                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004EF8                 push    eax
.text$mn:00004EF9                 mov     ecx, [ebp+var_14]
.text$mn:00004EFC                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<char>> const &)
.text$mn:00004F01
.text$mn:00004F01 loc_4F01:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+42j
.text$mn:00004F01                 lea     eax, [ebp+var_E]
.text$mn:00004F04                 push    eax
.text$mn:00004F05                 mov     ecx, [ebp+arg_0]
.text$mn:00004F08                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004F0D                 push    eax
.text$mn:00004F0E                 lea     ecx, [ebp+var_F]
.text$mn:00004F11                 push    ecx
.text$mn:00004F12                 mov     ecx, [ebp+var_14]
.text$mn:00004F15                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00004F1A                 push    eax
.text$mn:00004F1B                 call    ??$?9V?$allocator@D@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator!=<std::allocator<char>,std::allocator<char>>(std::_Wrap_alloc<std::allocator<char>> const &,std::_Wrap_alloc<std::allocator<char>> const &)
.text$mn:00004F20                 add     esp, 8
.text$mn:00004F23                 movzx   edx, al
.text$mn:00004F26                 test    edx, edx
.text$mn:00004F28                 jz      short loc_4F7A
.text$mn:00004F2A                 sub     esp, 0Ch
.text$mn:00004F2D                 mov     eax, esp
.text$mn:00004F2F                 mov     [ebp+var_20], esp
.text$mn:00004F32                 push    eax
.text$mn:00004F33                 mov     ecx, [ebp+arg_0]
.text$mn:00004F36                 call    ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::end(void)
.text$mn:00004F3B                 mov     [ebp+var_18], eax
.text$mn:00004F3E                 mov     ecx, [ebp+var_18]
.text$mn:00004F41                 mov     [ebp+var_24], ecx
.text$mn:00004F44                 mov     [ebp+var_4], 0
.text$mn:00004F4B                 sub     esp, 0Ch
.text$mn:00004F4E                 mov     edx, esp
.text$mn:00004F50                 mov     [ebp+var_28], esp
.text$mn:00004F53                 push    edx
.text$mn:00004F54                 mov     ecx, [ebp+arg_0]
.text$mn:00004F57                 call    ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin(void)
.text$mn:00004F5C                 mov     [ebp+var_1C], eax
.text$mn:00004F5F                 mov     eax, [ebp+var_1C]
.text$mn:00004F62                 mov     [ebp+var_2C], eax
.text$mn:00004F65                 mov     byte ptr [ebp+var_4], 1
.text$mn:00004F69                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004F70                 mov     ecx, [ebp+var_14]
.text$mn:00004F73                 call    ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)
.text$mn:00004F78                 jmp     short loc_4F8F
.text$mn:00004F7A ; ---------------------------------------------------------------------------
.text$mn:00004F7A
.text$mn:00004F7A loc_4F7A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+80j
.text$mn:00004F7A                 mov     ecx, [ebp+arg_0]
.text$mn:00004F7D                 push    ecx
.text$mn:00004F7E                 call    ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &)
.text$mn:00004F83                 add     esp, 4
.text$mn:00004F86                 push    eax
.text$mn:00004F87                 mov     ecx, [ebp+var_14]
.text$mn:00004F8A                 call    ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)
.text$mn:00004F8F
.text$mn:00004F8F loc_4F8F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+2Ej
.text$mn:00004F8F                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+D0j
.text$mn:00004F8F                 mov     eax, [ebp+var_14]
.text$mn:00004F92                 mov     ecx, [ebp+var_C]
.text$mn:00004F95                 mov     large fs:0, ecx
.text$mn:00004F9C                 pop     ecx
.text$mn:00004F9D                 mov     esp, ebp
.text$mn:00004F9F                 pop     ebp
.text$mn:00004FA0                 retn    4
.text$mn:00004FA0 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$mn:00004FA0
.text$mn:00004FA0 ; ---------------------------------------------------------------------------
.text$mn:00004FA3                 align 4
.text$mn:00004FA3 _text$mn        ends
.text$mn:00004FA3
.text$x:00004FA4 ; ===========================================================================
.text$x:00004FA4
.text$x:00004FA4 ; Segment type: Pure code
.text$x:00004FA4 ; Segment permissions: Read/Execute
.text$x:00004FA4 _text$x         segment para public 'CODE' use32
.text$x:00004FA4                 assume cs:_text$x
.text$x:00004FA4                 ;org 4FA4h
.text$x:00004FA4 ; COMDAT (pick associative to section at 4EA8)
.text$x:00004FA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00004FA4
.text$x:00004FA4 ; =============== S U B R O U T I N E =======================================
.text$x:00004FA4
.text$x:00004FA4
.text$x:00004FA4 __unwindfunclet$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z$0 proc near
.text$x:00004FA4                                         ; DATA XREF: .xdata$x:00009334o
.text$x:00004FA4                 mov     ecx, [ebp-20h]
.text$x:00004FA7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00004FA7 __unwindfunclet$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z$0 endp
.text$x:00004FA7
.text$x:00004FAC
.text$x:00004FAC ; =============== S U B R O U T I N E =======================================
.text$x:00004FAC
.text$x:00004FAC
.text$x:00004FAC __unwindfunclet$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z$1 proc near
.text$x:00004FAC                                         ; DATA XREF: .xdata$x:0000933Co
.text$x:00004FAC                 mov     ecx, [ebp-28h]
.text$x:00004FAF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00004FAF __unwindfunclet$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z$1 endp
.text$x:00004FAF
.text$x:00004FB4
.text$x:00004FB4 ; =============== S U B R O U T I N E =======================================
.text$x:00004FB4
.text$x:00004FB4
.text$x:00004FB4 __ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$x:00004FB4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+5o
.text$x:00004FB4
.text$x:00004FB4 arg_4           = dword ptr  8
.text$x:00004FB4
.text$x:00004FB4                 mov     edx, [esp+arg_4]
.text$x:00004FB8                 lea     eax, [edx+0Ch]
.text$x:00004FBB                 mov     ecx, [edx-24h]
.text$x:00004FBE                 xor     ecx, eax
.text$x:00004FC0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00004FC5                 mov     eax, offset __ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
.text$x:00004FCA                 jmp     ___CxxFrameHandler3
.text$x:00004FCA __ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$x:00004FCA
.text$x:00004FCA ; ---------------------------------------------------------------------------
.text$x:00004FCF                 align 10h
.text$x:00004FCF _text$x         ends
.text$x:00004FCF
.text$mn:00004FD0 ; ===========================================================================
.text$mn:00004FD0
.text$mn:00004FD0 ; Segment type: Pure code
.text$mn:00004FD0 ; Segment permissions: Read/Execute
.text$mn:00004FD0 _text$mn        segment para public 'CODE' use32
.text$mn:00004FD0                 assume cs:_text$mn
.text$mn:00004FD0                 ;org 4FD0h
.text$mn:00004FD0 ; COMDAT (pick any)
.text$mn:00004FD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FD0
.text$mn:00004FD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FD0
.text$mn:00004FD0 ; Attributes: bp-based frame
.text$mn:00004FD0
.text$mn:00004FD0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char *Str)
.text$mn:00004FD0                 public ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z
.text$mn:00004FD0 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z proc near
.text$mn:00004FD0                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B95p
.text$mn:00004FD0
.text$mn:00004FD0 var_4           = dword ptr -4
.text$mn:00004FD0 Str             = dword ptr  8
.text$mn:00004FD0
.text$mn:00004FD0                 push    ebp
.text$mn:00004FD1                 mov     ebp, esp
.text$mn:00004FD3                 push    ecx
.text$mn:00004FD4                 mov     [ebp+var_4], ecx
.text$mn:00004FD7                 mov     eax, [ebp+Str]
.text$mn:00004FDA                 push    eax             ; Str
.text$mn:00004FDB                 mov     ecx, [ebp+var_4]
.text$mn:00004FDE                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:00004FE3                 mov     esp, ebp
.text$mn:00004FE5                 pop     ebp
.text$mn:00004FE6                 retn    4
.text$mn:00004FE6 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z endp
.text$mn:00004FE6
.text$mn:00004FE6 ; ---------------------------------------------------------------------------
.text$mn:00004FE9                 align 4
.text$mn:00004FE9 _text$mn        ends
.text$mn:00004FE9
.text$mn:00004FEC ; ===========================================================================
.text$mn:00004FEC
.text$mn:00004FEC ; Segment type: Pure code
.text$mn:00004FEC ; Segment permissions: Read/Execute
.text$mn:00004FEC _text$mn        segment para public 'CODE' use32
.text$mn:00004FEC                 assume cs:_text$mn
.text$mn:00004FEC                 ;org 4FECh
.text$mn:00004FEC ; COMDAT (pick any)
.text$mn:00004FEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00004FEC
.text$mn:00004FEC ; =============== S U B R O U T I N E =======================================
.text$mn:00004FEC
.text$mn:00004FEC ; Attributes: bp-based frame
.text$mn:00004FEC
.text$mn:00004FEC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00004FEC                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00004FEC ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00004FEC                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+7A5p
.text$mn:00004FEC                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+8D4p
.text$mn:00004FEC
.text$mn:00004FEC var_4           = dword ptr -4
.text$mn:00004FEC Str             = dword ptr  8
.text$mn:00004FEC
.text$mn:00004FEC                 push    ebp
.text$mn:00004FED                 mov     ebp, esp
.text$mn:00004FEF                 push    ecx
.text$mn:00004FF0                 mov     [ebp+var_4], ecx
.text$mn:00004FF3                 mov     eax, [ebp+Str]
.text$mn:00004FF6                 push    eax             ; Str
.text$mn:00004FF7                 mov     ecx, [ebp+var_4]
.text$mn:00004FFA                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00004FFF                 mov     esp, ebp
.text$mn:00005001                 pop     ebp
.text$mn:00005002                 retn    4
.text$mn:00005002 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00005002
.text$mn:00005002 ; ---------------------------------------------------------------------------
.text$mn:00005005                 align 4
.text$mn:00005005 _text$mn        ends
.text$mn:00005005
.text$mn:00005008 ; ===========================================================================
.text$mn:00005008
.text$mn:00005008 ; Segment type: Pure code
.text$mn:00005008 ; Segment permissions: Read/Execute
.text$mn:00005008 _text$mn        segment para public 'CODE' use32
.text$mn:00005008                 assume cs:_text$mn
.text$mn:00005008                 ;org 5008h
.text$mn:00005008 ; COMDAT (pick any)
.text$mn:00005008                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005008
.text$mn:00005008 ; =============== S U B R O U T I N E =======================================
.text$mn:00005008
.text$mn:00005008 ; Attributes: bp-based frame
.text$mn:00005008
.text$mn:00005008 ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:00005008                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00005008 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:00005008                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:00005008
.text$mn:00005008 var_14          = byte ptr -14h
.text$mn:00005008 var_10          = dword ptr -10h
.text$mn:00005008 var_C           = dword ptr -0Ch
.text$mn:00005008 var_4           = dword ptr -4
.text$mn:00005008 arg_0           = dword ptr  8
.text$mn:00005008
.text$mn:00005008                 push    ebp
.text$mn:00005009                 mov     ebp, esp
.text$mn:0000500B                 push    0FFFFFFFFh
.text$mn:0000500D                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00005012                 mov     eax, large fs:0
.text$mn:00005018                 push    eax
.text$mn:00005019                 sub     esp, 8
.text$mn:0000501C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005021                 xor     eax, ebp
.text$mn:00005023                 push    eax
.text$mn:00005024                 lea     eax, [ebp+var_C]
.text$mn:00005027                 mov     large fs:0, eax
.text$mn:0000502D                 mov     [ebp+var_10], ecx
.text$mn:00005030                 mov     eax, [ebp+var_10]
.text$mn:00005033                 mov     ecx, [ebp+arg_0]
.text$mn:00005036                 mov     edx, [eax]
.text$mn:00005038                 cmp     edx, [ecx]
.text$mn:0000503A                 jnz     short loc_503E
.text$mn:0000503C                 jmp     short loc_5080
.text$mn:0000503E ; ---------------------------------------------------------------------------
.text$mn:0000503E
.text$mn:0000503E loc_503E:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:0000503E                 mov     eax, [ebp+arg_0]
.text$mn:00005041                 cmp     dword ptr [eax], 0
.text$mn:00005044                 jz      short loc_5058
.text$mn:00005046                 mov     ecx, [ebp+arg_0]
.text$mn:00005049                 mov     edx, [ecx]
.text$mn:0000504B                 mov     eax, [edx]
.text$mn:0000504D                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000504E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005051                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00005056                 jmp     short loc_5080
.text$mn:00005058 ; ---------------------------------------------------------------------------
.text$mn:00005058
.text$mn:00005058 loc_5058:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:00005058                 push    3               ; int
.text$mn:0000505A                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000505D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00005062                 mov     [ebp+var_4], 0
.text$mn:00005069                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000506C                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00005071                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005078                 lea     ecx, [ebp+var_14] ; this
.text$mn:0000507B                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00005080
.text$mn:00005080 loc_5080:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:00005080                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:00005080                 mov     eax, [ebp+var_10]
.text$mn:00005083                 mov     ecx, [ebp+var_C]
.text$mn:00005086                 mov     large fs:0, ecx
.text$mn:0000508D                 pop     ecx
.text$mn:0000508E                 mov     esp, ebp
.text$mn:00005090                 pop     ebp
.text$mn:00005091                 retn    4
.text$mn:00005091 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:00005091
.text$mn:00005091 _text$mn        ends
.text$mn:00005091
.text$x:00005094 ; ===========================================================================
.text$x:00005094
.text$x:00005094 ; Segment type: Pure code
.text$x:00005094 ; Segment permissions: Read/Execute
.text$x:00005094 _text$x         segment para public 'CODE' use32
.text$x:00005094                 assume cs:_text$x
.text$x:00005094                 ;org 5094h
.text$x:00005094 ; COMDAT (pick associative to section at 5008)
.text$x:00005094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005094
.text$x:00005094 ; =============== S U B R O U T I N E =======================================
.text$x:00005094
.text$x:00005094
.text$x:00005094 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:00005094                                         ; DATA XREF: .xdata$x:000091CCo
.text$x:00005094                 lea     ecx, [ebp-14h]  ; this
.text$x:00005097                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00005097 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:00005097
.text$x:0000509C
.text$x:0000509C ; =============== S U B R O U T I N E =======================================
.text$x:0000509C
.text$x:0000509C
.text$x:0000509C __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:0000509C                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:0000509C
.text$x:0000509C arg_4           = dword ptr  8
.text$x:0000509C
.text$x:0000509C                 mov     edx, [esp+arg_4]
.text$x:000050A0                 lea     eax, [edx+0Ch]
.text$x:000050A3                 mov     ecx, [edx-0Ch]
.text$x:000050A6                 xor     ecx, eax
.text$x:000050A8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000050AD                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:000050B2                 jmp     ___CxxFrameHandler3
.text$x:000050B2 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:000050B2
.text$x:000050B2 ; ---------------------------------------------------------------------------
.text$x:000050B7                 align 4
.text$x:000050B7 _text$x         ends
.text$x:000050B7
.text$mn:000050B8 ; ===========================================================================
.text$mn:000050B8
.text$mn:000050B8 ; Segment type: Pure code
.text$mn:000050B8 ; Segment permissions: Read/Execute
.text$mn:000050B8 _text$mn        segment para public 'CODE' use32
.text$mn:000050B8                 assume cs:_text$mn
.text$mn:000050B8                 ;org 50B8h
.text$mn:000050B8 ; COMDAT (pick any)
.text$mn:000050B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050B8
.text$mn:000050B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000050B8
.text$mn:000050B8 ; Attributes: bp-based frame
.text$mn:000050B8
.text$mn:000050B8 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator==(std::_Iterator_base12 *)
.text$mn:000050B8                 public ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:000050B8 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:000050B8                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator!=(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+10p
.text$mn:000050B8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+39p
.text$mn:000050B8
.text$mn:000050B8 var_8           = dword ptr -8
.text$mn:000050B8 var_4           = dword ptr -4
.text$mn:000050B8 arg_0           = dword ptr  8
.text$mn:000050B8
.text$mn:000050B8                 push    ebp
.text$mn:000050B9                 mov     ebp, esp
.text$mn:000050BB                 sub     esp, 8
.text$mn:000050BE                 mov     [ebp+var_4], ecx
.text$mn:000050C1                 mov     eax, [ebp+arg_0]
.text$mn:000050C4                 push    eax             ; std::_Iterator_base12 *
.text$mn:000050C5                 mov     ecx, [ebp+var_4]
.text$mn:000050C8                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:000050CD                 mov     ecx, [ebp+var_4]
.text$mn:000050D0                 mov     edx, [ebp+arg_0]
.text$mn:000050D3                 mov     eax, [ecx+8]
.text$mn:000050D6                 cmp     eax, [edx+8]
.text$mn:000050D9                 jnz     short loc_50E4
.text$mn:000050DB                 mov     [ebp+var_8], 1
.text$mn:000050E2                 jmp     short loc_50EB
.text$mn:000050E4 ; ---------------------------------------------------------------------------
.text$mn:000050E4
.text$mn:000050E4 loc_50E4:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+21j
.text$mn:000050E4                 mov     [ebp+var_8], 0
.text$mn:000050EB
.text$mn:000050EB loc_50EB:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+2Aj
.text$mn:000050EB                 mov     al, byte ptr [ebp+var_8]
.text$mn:000050EE                 mov     esp, ebp
.text$mn:000050F0                 pop     ebp
.text$mn:000050F1                 retn    4
.text$mn:000050F1 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:000050F1
.text$mn:000050F1 _text$mn        ends
.text$mn:000050F1
.text$mn:000050F4 ; ===========================================================================
.text$mn:000050F4
.text$mn:000050F4 ; Segment type: Pure code
.text$mn:000050F4 ; Segment permissions: Read/Execute
.text$mn:000050F4 _text$mn        segment para public 'CODE' use32
.text$mn:000050F4                 assume cs:_text$mn
.text$mn:000050F4                 ;org 50F4h
.text$mn:000050F4 ; COMDAT (pick any)
.text$mn:000050F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000050F4
.text$mn:000050F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000050F4
.text$mn:000050F4 ; Attributes: bp-based frame
.text$mn:000050F4
.text$mn:000050F4 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:000050F4                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:000050F4 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:000050F4                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:000050F4                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:000050F4
.text$mn:000050F4 var_8           = dword ptr -8
.text$mn:000050F4 var_4           = dword ptr -4
.text$mn:000050F4 arg_0           = dword ptr  8
.text$mn:000050F4
.text$mn:000050F4                 push    ebp
.text$mn:000050F5                 mov     ebp, esp
.text$mn:000050F7                 sub     esp, 8
.text$mn:000050FA                 mov     [ebp+var_8], ecx
.text$mn:000050FD                 mov     eax, [ebp+var_8]
.text$mn:00005100                 cmp     eax, [ebp+arg_0]
.text$mn:00005103                 jnz     short loc_510E
.text$mn:00005105                 mov     [ebp+var_4], 1
.text$mn:0000510C                 jmp     short loc_5115
.text$mn:0000510E ; ---------------------------------------------------------------------------
.text$mn:0000510E
.text$mn:0000510E loc_510E:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:0000510E                 mov     [ebp+var_4], 0
.text$mn:00005115
.text$mn:00005115 loc_5115:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00005115                 mov     al, byte ptr [ebp+var_4]
.text$mn:00005118                 mov     esp, ebp
.text$mn:0000511A                 pop     ebp
.text$mn:0000511B                 retn    4
.text$mn:0000511B ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:0000511B
.text$mn:0000511B ; ---------------------------------------------------------------------------
.text$mn:0000511E                 align 10h
.text$mn:0000511E _text$mn        ends
.text$mn:0000511E
.text$mn:00005120 ; ===========================================================================
.text$mn:00005120
.text$mn:00005120 ; Segment type: Pure code
.text$mn:00005120 ; Segment permissions: Read/Execute
.text$mn:00005120 _text$mn        segment para public 'CODE' use32
.text$mn:00005120                 assume cs:_text$mn
.text$mn:00005120                 ;org 5120h
.text$mn:00005120 ; COMDAT (pick any)
.text$mn:00005120                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005120
.text$mn:00005120 ; =============== S U B R O U T I N E =======================================
.text$mn:00005120
.text$mn:00005120 ; Attributes: bp-based frame
.text$mn:00005120
.text$mn:00005120 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00005120                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00005120 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00005120                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00005120
.text$mn:00005120 var_8           = dword ptr -8
.text$mn:00005120 var_4           = dword ptr -4
.text$mn:00005120 arg_0           = dword ptr  8
.text$mn:00005120
.text$mn:00005120                 push    ebp
.text$mn:00005121                 mov     ebp, esp
.text$mn:00005123                 sub     esp, 8
.text$mn:00005126                 push    esi
.text$mn:00005127                 mov     [ebp+var_4], ecx
.text$mn:0000512A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000512D                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00005132                 push    eax
.text$mn:00005133                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005136                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:0000513B                 mov     ecx, eax
.text$mn:0000513D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00005142                 movzx   eax, al
.text$mn:00005145                 test    eax, eax
.text$mn:00005147                 jz      short loc_5168
.text$mn:00005149                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000514C                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00005151                 mov     esi, eax
.text$mn:00005153                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005156                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:0000515B                 cmp     esi, eax
.text$mn:0000515D                 jnz     short loc_5168
.text$mn:0000515F                 mov     [ebp+var_8], 1
.text$mn:00005166                 jmp     short loc_516F
.text$mn:00005168 ; ---------------------------------------------------------------------------
.text$mn:00005168
.text$mn:00005168 loc_5168:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00005168                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00005168                 mov     [ebp+var_8], 0
.text$mn:0000516F
.text$mn:0000516F loc_516F:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:0000516F                 mov     al, byte ptr [ebp+var_8]
.text$mn:00005172                 pop     esi
.text$mn:00005173                 mov     esp, ebp
.text$mn:00005175                 pop     ebp
.text$mn:00005176                 retn    4
.text$mn:00005176 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00005176
.text$mn:00005176 ; ---------------------------------------------------------------------------
.text$mn:00005179                 align 4
.text$mn:00005179 _text$mn        ends
.text$mn:00005179
.text$mn:0000517C ; ===========================================================================
.text$mn:0000517C
.text$mn:0000517C ; Segment type: Pure code
.text$mn:0000517C ; Segment permissions: Read/Execute
.text$mn:0000517C _text$mn        segment para public 'CODE' use32
.text$mn:0000517C                 assume cs:_text$mn
.text$mn:0000517C                 ;org 517Ch
.text$mn:0000517C ; COMDAT (pick any)
.text$mn:0000517C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000517C
.text$mn:0000517C ; =============== S U B R O U T I N E =======================================
.text$mn:0000517C
.text$mn:0000517C ; Attributes: bp-based frame
.text$mn:0000517C
.text$mn:0000517C ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator!=(std::_Iterator_base12 *)
.text$mn:0000517C                 public ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:0000517C ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:0000517C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+FCp
.text$mn:0000517C                                         ; std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint,std::random_access_iterator_tag)+30p ...
.text$mn:0000517C
.text$mn:0000517C var_8           = dword ptr -8
.text$mn:0000517C var_4           = dword ptr -4
.text$mn:0000517C arg_0           = dword ptr  8
.text$mn:0000517C
.text$mn:0000517C                 push    ebp
.text$mn:0000517D                 mov     ebp, esp
.text$mn:0000517F                 sub     esp, 8
.text$mn:00005182                 mov     [ebp+var_8], ecx
.text$mn:00005185                 mov     eax, [ebp+arg_0]
.text$mn:00005188                 push    eax             ; std::_Iterator_base12 *
.text$mn:00005189                 mov     ecx, [ebp+var_8]
.text$mn:0000518C                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00005191                 movzx   ecx, al
.text$mn:00005194                 test    ecx, ecx
.text$mn:00005196                 jnz     short loc_51A1
.text$mn:00005198                 mov     [ebp+var_4], 1
.text$mn:0000519F                 jmp     short loc_51A8
.text$mn:000051A1 ; ---------------------------------------------------------------------------
.text$mn:000051A1
.text$mn:000051A1 loc_51A1:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator!=(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+1Aj
.text$mn:000051A1                 mov     [ebp+var_4], 0
.text$mn:000051A8
.text$mn:000051A8 loc_51A8:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator!=(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+23j
.text$mn:000051A8                 mov     al, byte ptr [ebp+var_4]
.text$mn:000051AB                 mov     esp, ebp
.text$mn:000051AD                 pop     ebp
.text$mn:000051AE                 retn    4
.text$mn:000051AE ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:000051AE
.text$mn:000051AE ; ---------------------------------------------------------------------------
.text$mn:000051B1                 align 4
.text$mn:000051B1 _text$mn        ends
.text$mn:000051B1
.text$mn:000051B4 ; ===========================================================================
.text$mn:000051B4
.text$mn:000051B4 ; Segment type: Pure code
.text$mn:000051B4 ; Segment permissions: Read/Execute
.text$mn:000051B4 _text$mn        segment para public 'CODE' use32
.text$mn:000051B4                 assume cs:_text$mn
.text$mn:000051B4                 ;org 51B4h
.text$mn:000051B4 ; COMDAT (pick any)
.text$mn:000051B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000051B4
.text$mn:000051B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000051B4
.text$mn:000051B4 ; Attributes: bp-based frame
.text$mn:000051B4
.text$mn:000051B4 ; public: int & __thiscall std::vector<int, class std::allocator<int>>::operator[](unsigned int)
.text$mn:000051B4                 public ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z
.text$mn:000051B4 ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z proc near
.text$mn:000051B4                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+A94p
.text$mn:000051B4
.text$mn:000051B4 var_4           = dword ptr -4
.text$mn:000051B4 arg_0           = dword ptr  8
.text$mn:000051B4
.text$mn:000051B4                 push    ebp
.text$mn:000051B5                 mov     ebp, esp
.text$mn:000051B7                 push    ecx
.text$mn:000051B8                 mov     [ebp+var_4], ecx
.text$mn:000051BB                 mov     ecx, [ebp+var_4]
.text$mn:000051BE                 call    ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int>>::size(void)
.text$mn:000051C3                 cmp     eax, [ebp+arg_0]
.text$mn:000051C6                 ja      short loc_5230
.text$mn:000051C8                 push    4B1h            ; unsigned int
.text$mn:000051CD                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000051D2                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:000051D7                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000051DC                 add     esp, 0Ch
.text$mn:000051DF                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:000051E4                 test    eax, eax
.text$mn:000051E6                 jz      short loc_51EC
.text$mn:000051E8                 xor     ecx, ecx
.text$mn:000051EA                 jnz     short loc_5212
.text$mn:000051EC
.text$mn:000051EC loc_51EC:                               ; CODE XREF: std::vector<int,std::allocator<int>>::operator[](uint)+32j
.text$mn:000051EC                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:000051F1                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000051F6                 push    0
.text$mn:000051F8                 push    4B2h
.text$mn:000051FD                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005202                 push    2
.text$mn:00005204                 call    __CrtDbgReportW
.text$mn:00005209                 add     esp, 18h
.text$mn:0000520C                 cmp     eax, 1
.text$mn:0000520F                 jnz     short loc_5212
.text$mn:00005211                 int     3               ; Trap to Debugger
.text$mn:00005212
.text$mn:00005212 loc_5212:                               ; CODE XREF: std::vector<int,std::allocator<int>>::operator[](uint)+36j
.text$mn:00005212                                         ; std::vector<int,std::allocator<int>>::operator[](uint)+5Bj
.text$mn:00005212                 push    0
.text$mn:00005214                 push    4B2h
.text$mn:00005219                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000521E                 push    offset ??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@ ; "std::vector<int,class std::allocator<in"...
.text$mn:00005223                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00005228                 call    __invalid_parameter
.text$mn:0000522D                 add     esp, 14h
.text$mn:00005230
.text$mn:00005230 loc_5230:                               ; CODE XREF: std::vector<int,std::allocator<int>>::operator[](uint)+12j
.text$mn:00005230                 mov     eax, [ebp+var_4]
.text$mn:00005233                 mov     ecx, [eax+4]
.text$mn:00005236                 mov     edx, [ebp+arg_0]
.text$mn:00005239                 lea     eax, [ecx+edx*4]
.text$mn:0000523C                 mov     esp, ebp
.text$mn:0000523E                 pop     ebp
.text$mn:0000523F                 retn    4
.text$mn:0000523F ??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z endp
.text$mn:0000523F
.text$mn:0000523F ; ---------------------------------------------------------------------------
.text$mn:00005242                 align 4
.text$mn:00005242 _text$mn        ends
.text$mn:00005242
.text$mn:00005244 ; ===========================================================================
.text$mn:00005244
.text$mn:00005244 ; Segment type: Pure code
.text$mn:00005244 ; Segment permissions: Read/Execute
.text$mn:00005244 _text$mn        segment para public 'CODE' use32
.text$mn:00005244                 assume cs:_text$mn
.text$mn:00005244                 ;org 5244h
.text$mn:00005244 ; COMDAT (pick any)
.text$mn:00005244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005244
.text$mn:00005244 ; =============== S U B R O U T I N E =======================================
.text$mn:00005244
.text$mn:00005244 ; Attributes: bp-based frame
.text$mn:00005244
.text$mn:00005244 ; public: struct HWND__ * const & __thiscall std::vector<struct HWND__ *, class std::allocator<struct HWND__ *>>::operator[](unsigned int)const
.text$mn:00005244                 public ??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEABQAUHWND__@@I@Z
.text$mn:00005244 ??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEABQAUHWND__@@I@Z proc near
.text$mn:00005244                                         ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+5Cp
.text$mn:00005244
.text$mn:00005244 var_4           = dword ptr -4
.text$mn:00005244 arg_0           = dword ptr  8
.text$mn:00005244
.text$mn:00005244                 push    ebp
.text$mn:00005245                 mov     ebp, esp
.text$mn:00005247                 push    ecx
.text$mn:00005248                 mov     [ebp+var_4], ecx
.text$mn:0000524B                 mov     ecx, [ebp+var_4]
.text$mn:0000524E                 call    ?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ ; std::vector<HWND__ *,std::allocator<HWND__ *>>::size(void)
.text$mn:00005253                 cmp     eax, [ebp+arg_0]
.text$mn:00005256                 ja      short loc_52C0
.text$mn:00005258                 push    4A1h            ; unsigned int
.text$mn:0000525D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005262                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00005267                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000526C                 add     esp, 0Ch
.text$mn:0000526F                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00005274                 test    eax, eax
.text$mn:00005276                 jz      short loc_527C
.text$mn:00005278                 xor     ecx, ecx
.text$mn:0000527A                 jnz     short loc_52A2
.text$mn:0000527C
.text$mn:0000527C loc_527C:                               ; CODE XREF: std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+32j
.text$mn:0000527C                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00005281                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00005286                 push    0
.text$mn:00005288                 push    4A2h
.text$mn:0000528D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005292                 push    2
.text$mn:00005294                 call    __CrtDbgReportW
.text$mn:00005299                 add     esp, 18h
.text$mn:0000529C                 cmp     eax, 1
.text$mn:0000529F                 jnz     short loc_52A2
.text$mn:000052A1                 int     3               ; Trap to Debugger
.text$mn:000052A2
.text$mn:000052A2 loc_52A2:                               ; CODE XREF: std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+36j
.text$mn:000052A2                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+5Bj
.text$mn:000052A2                 push    0
.text$mn:000052A4                 push    4A2h
.text$mn:000052A9                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000052AE                 push    offset ??_C@_1KC@CCKJJADN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAH?$AAW?$AAN?$AAD?$AA_?$AA_?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs@ ; "std::vector<struct HWND__ *,class std::"...
.text$mn:000052B3                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:000052B8                 call    __invalid_parameter
.text$mn:000052BD                 add     esp, 14h
.text$mn:000052C0
.text$mn:000052C0 loc_52C0:                               ; CODE XREF: std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+12j
.text$mn:000052C0                 mov     eax, [ebp+var_4]
.text$mn:000052C3                 mov     ecx, [eax+4]
.text$mn:000052C6                 mov     edx, [ebp+arg_0]
.text$mn:000052C9                 lea     eax, [ecx+edx*4]
.text$mn:000052CC                 mov     esp, ebp
.text$mn:000052CE                 pop     ebp
.text$mn:000052CF                 retn    4
.text$mn:000052CF ??A?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEABQAUHWND__@@I@Z endp
.text$mn:000052CF
.text$mn:000052CF ; ---------------------------------------------------------------------------
.text$mn:000052D2                 align 4
.text$mn:000052D2 _text$mn        ends
.text$mn:000052D2
.text$mn:000052D4 ; ===========================================================================
.text$mn:000052D4
.text$mn:000052D4 ; Segment type: Pure code
.text$mn:000052D4 ; Segment permissions: Read/Execute
.text$mn:000052D4 _text$mn        segment para public 'CODE' use32
.text$mn:000052D4                 assume cs:_text$mn
.text$mn:000052D4                 ;org 52D4h
.text$mn:000052D4 ; COMDAT (pick any)
.text$mn:000052D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000052D4
.text$mn:000052D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000052D4
.text$mn:000052D4 ; Attributes: bp-based frame
.text$mn:000052D4
.text$mn:000052D4 ; public: struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> & __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::operator[](unsigned int)
.text$mn:000052D4                 public ??A?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@I@Z
.text$mn:000052D4 ??A?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@I@Z proc near
.text$mn:000052D4                                         ; CODE XREF: ThemeSwitcher::getElementFromIndex(uint)+Ep
.text$mn:000052D4
.text$mn:000052D4 var_4           = dword ptr -4
.text$mn:000052D4 arg_0           = dword ptr  8
.text$mn:000052D4
.text$mn:000052D4                 push    ebp
.text$mn:000052D5                 mov     ebp, esp
.text$mn:000052D7                 push    ecx
.text$mn:000052D8                 mov     [ebp+var_4], ecx
.text$mn:000052DB                 mov     ecx, [ebp+var_4]
.text$mn:000052DE                 call    ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::size(void)
.text$mn:000052E3                 cmp     eax, [ebp+arg_0]
.text$mn:000052E6                 ja      short loc_5350
.text$mn:000052E8                 push    4B1h            ; unsigned int
.text$mn:000052ED                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000052F2                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:000052F7                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000052FC                 add     esp, 0Ch
.text$mn:000052FF                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00005304                 test    eax, eax
.text$mn:00005306                 jz      short loc_530C
.text$mn:00005308                 xor     ecx, ecx
.text$mn:0000530A                 jnz     short loc_5332
.text$mn:0000530C
.text$mn:0000530C loc_530C:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+32j
.text$mn:0000530C                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00005311                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00005316                 push    0
.text$mn:00005318                 push    4B2h
.text$mn:0000531D                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005322                 push    2
.text$mn:00005324                 call    __CrtDbgReportW
.text$mn:00005329                 add     esp, 18h
.text$mn:0000532C                 cmp     eax, 1
.text$mn:0000532F                 jnz     short loc_5332
.text$mn:00005331                 int     3               ; Trap to Debugger
.text$mn:00005332
.text$mn:00005332 loc_5332:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+36j
.text$mn:00005332                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+5Bj
.text$mn:00005332                 push    0
.text$mn:00005334                 push    4B2h
.text$mn:00005339                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000533E                 push    offset ??_C@_1DLI@PMFFPGKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; "std::vector<struct std::pair<class std:"...
.text$mn:00005343                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00005348                 call    __invalid_parameter
.text$mn:0000534D                 add     esp, 14h
.text$mn:00005350
.text$mn:00005350 loc_5350:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+12j
.text$mn:00005350                 imul    eax, [ebp+arg_0], 38h
.text$mn:00005354                 mov     ecx, [ebp+var_4]
.text$mn:00005357                 add     eax, [ecx+4]
.text$mn:0000535A                 mov     esp, ebp
.text$mn:0000535C                 pop     ebp
.text$mn:0000535D                 retn    4
.text$mn:0000535D ??A?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@I@Z endp
.text$mn:0000535D
.text$mn:0000535D _text$mn        ends
.text$mn:0000535D
.text$mn:00005360 ; ===========================================================================
.text$mn:00005360
.text$mn:00005360 ; Segment type: Pure code
.text$mn:00005360 ; Segment permissions: Read/Execute
.text$mn:00005360 _text$mn        segment para public 'CODE' use32
.text$mn:00005360                 assume cs:_text$mn
.text$mn:00005360                 ;org 5360h
.text$mn:00005360 ; COMDAT (pick any)
.text$mn:00005360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005360
.text$mn:00005360 ; =============== S U B R O U T I N E =======================================
.text$mn:00005360
.text$mn:00005360 ; Attributes: bp-based frame
.text$mn:00005360
.text$mn:00005360 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::operator[](unsigned int)
.text$mn:00005360                 public ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z
.text$mn:00005360 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z proc near
.text$mn:00005360                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+6F2p
.text$mn:00005360                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+868p ...
.text$mn:00005360
.text$mn:00005360 var_4           = dword ptr -4
.text$mn:00005360 arg_0           = dword ptr  8
.text$mn:00005360
.text$mn:00005360                 push    ebp
.text$mn:00005361                 mov     ebp, esp
.text$mn:00005363                 push    ecx
.text$mn:00005364                 mov     [ebp+var_4], ecx
.text$mn:00005367                 mov     ecx, [ebp+var_4]
.text$mn:0000536A                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:0000536F                 cmp     eax, [ebp+arg_0]
.text$mn:00005372                 ja      short loc_53DC
.text$mn:00005374                 push    4B1h            ; unsigned int
.text$mn:00005379                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000537E                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:00005383                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00005388                 add     esp, 0Ch
.text$mn:0000538B                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00005390                 test    eax, eax
.text$mn:00005392                 jz      short loc_5398
.text$mn:00005394                 xor     ecx, ecx
.text$mn:00005396                 jnz     short loc_53BE
.text$mn:00005398
.text$mn:00005398 loc_5398:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+32j
.text$mn:00005398                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:0000539D                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000053A2                 push    0
.text$mn:000053A4                 push    4B2h
.text$mn:000053A9                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000053AE                 push    2
.text$mn:000053B0                 call    __CrtDbgReportW
.text$mn:000053B5                 add     esp, 18h
.text$mn:000053B8                 cmp     eax, 1
.text$mn:000053BB                 jnz     short loc_53BE
.text$mn:000053BD                 int     3               ; Trap to Debugger
.text$mn:000053BE
.text$mn:000053BE loc_53BE:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+36j
.text$mn:000053BE                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+5Bj
.text$mn:000053BE                 push    0
.text$mn:000053C0                 push    4B2h
.text$mn:000053C5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000053CA                 push    offset ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@ ; "std::vector<class std::basic_string<wch"...
.text$mn:000053CF                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:000053D4                 call    __invalid_parameter
.text$mn:000053D9                 add     esp, 14h
.text$mn:000053DC
.text$mn:000053DC loc_53DC:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+12j
.text$mn:000053DC                 imul    eax, [ebp+arg_0], 1Ch
.text$mn:000053E0                 mov     ecx, [ebp+var_4]
.text$mn:000053E3                 add     eax, [ecx+4]
.text$mn:000053E6                 mov     esp, ebp
.text$mn:000053E8                 pop     ebp
.text$mn:000053E9                 retn    4
.text$mn:000053E9 ??A?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@I@Z endp
.text$mn:000053E9
.text$mn:000053E9 _text$mn        ends
.text$mn:000053E9
.text$mn:000053EC ; ===========================================================================
.text$mn:000053EC
.text$mn:000053EC ; Segment type: Pure code
.text$mn:000053EC ; Segment permissions: Read/Execute
.text$mn:000053EC _text$mn        segment para public 'CODE' use32
.text$mn:000053EC                 assume cs:_text$mn
.text$mn:000053EC                 ;org 53ECh
.text$mn:000053EC ; COMDAT (pick any)
.text$mn:000053EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000053EC
.text$mn:000053EC ; =============== S U B R O U T I N E =======================================
.text$mn:000053EC
.text$mn:000053EC ; Attributes: bp-based frame
.text$mn:000053EC
.text$mn:000053EC ; public: char const & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>>::operator*(void)const
.text$mn:000053EC                 public ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
.text$mn:000053EC ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ proc near
.text$mn:000053EC                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+Ap
.text$mn:000053EC
.text$mn:000053EC var_4           = dword ptr -4
.text$mn:000053EC
.text$mn:000053EC                 push    ebp
.text$mn:000053ED                 mov     ebp, esp
.text$mn:000053EF                 push    ecx
.text$mn:000053F0                 push    esi
.text$mn:000053F1                 mov     [ebp+var_4], ecx
.text$mn:000053F4                 mov     ecx, [ebp+var_4] ; this
.text$mn:000053F7                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000053FC                 test    eax, eax
.text$mn:000053FE                 jz      short loc_5444
.text$mn:00005400                 mov     eax, [ebp+var_4]
.text$mn:00005403                 cmp     dword ptr [eax+8], 0
.text$mn:00005407                 jz      short loc_5444
.text$mn:00005409                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000540C                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005411                 mov     ecx, eax
.text$mn:00005413                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005418                 mov     ecx, [ebp+var_4]
.text$mn:0000541B                 cmp     [ecx+8], eax
.text$mn:0000541E                 jb      short loc_5444
.text$mn:00005420                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005423                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005428                 mov     ecx, eax
.text$mn:0000542A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000542F                 mov     esi, eax
.text$mn:00005431                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005434                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005439                 add     esi, [eax+14h]
.text$mn:0000543C                 mov     edx, [ebp+var_4]
.text$mn:0000543F                 cmp     esi, [edx+8]
.text$mn:00005442                 ja      short loc_54A3
.text$mn:00005444
.text$mn:00005444 loc_5444:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+12j
.text$mn:00005444                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+1Bj ...
.text$mn:00005444                 push    4Fh ; 'O'       ; unsigned int
.text$mn:00005446                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000544B                 push    offset ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; "string iterator not dereferencable"
.text$mn:00005450                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00005455                 add     esp, 0Ch
.text$mn:00005458                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000545D                 test    eax, eax
.text$mn:0000545F                 jz      short loc_5465
.text$mn:00005461                 xor     ecx, ecx
.text$mn:00005463                 jnz     short loc_5488
.text$mn:00005465
.text$mn:00005465 loc_5465:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+73j
.text$mn:00005465                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:0000546A                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000546F                 push    0
.text$mn:00005471                 push    50h ; 'P'
.text$mn:00005473                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005478                 push    2
.text$mn:0000547A                 call    __CrtDbgReportW
.text$mn:0000547F                 add     esp, 18h
.text$mn:00005482                 cmp     eax, 1
.text$mn:00005485                 jnz     short loc_5488
.text$mn:00005487                 int     3               ; Trap to Debugger
.text$mn:00005488
.text$mn:00005488 loc_5488:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+77j
.text$mn:00005488                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+99j
.text$mn:00005488                 push    0
.text$mn:0000548A                 push    50h ; 'P'
.text$mn:0000548C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005491                 push    offset ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00005496                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:0000549B                 call    __invalid_parameter
.text$mn:000054A0                 add     esp, 14h
.text$mn:000054A3
.text$mn:000054A3 loc_54A3:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+56j
.text$mn:000054A3                 mov     eax, [ebp+var_4]
.text$mn:000054A6                 mov     eax, [eax+8]
.text$mn:000054A9                 pop     esi
.text$mn:000054AA                 mov     esp, ebp
.text$mn:000054AC                 pop     ebp
.text$mn:000054AD                 retn
.text$mn:000054AD ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ endp
.text$mn:000054AD
.text$mn:000054AD ; ---------------------------------------------------------------------------
.text$mn:000054AE                 align 10h
.text$mn:000054AE _text$mn        ends
.text$mn:000054AE
.text$mn:000054B0 ; ===========================================================================
.text$mn:000054B0
.text$mn:000054B0 ; Segment type: Pure code
.text$mn:000054B0 ; Segment permissions: Read/Execute
.text$mn:000054B0 _text$mn        segment para public 'CODE' use32
.text$mn:000054B0                 assume cs:_text$mn
.text$mn:000054B0                 ;org 54B0h
.text$mn:000054B0 ; COMDAT (pick any)
.text$mn:000054B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054B0
.text$mn:000054B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000054B0
.text$mn:000054B0 ; Attributes: bp-based frame
.text$mn:000054B0
.text$mn:000054B0 ; public: char & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>::operator*(void)const
.text$mn:000054B0                 public ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
.text$mn:000054B0 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ proc near
.text$mn:000054B0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+10Bp
.text$mn:000054B0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+135p
.text$mn:000054B0
.text$mn:000054B0 var_4           = dword ptr -4
.text$mn:000054B0
.text$mn:000054B0                 push    ebp
.text$mn:000054B1                 mov     ebp, esp
.text$mn:000054B3                 push    ecx
.text$mn:000054B4                 mov     [ebp+var_4], ecx
.text$mn:000054B7                 mov     ecx, [ebp+var_4]
.text$mn:000054BA                 call    ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)
.text$mn:000054BF                 mov     esp, ebp
.text$mn:000054C1                 pop     ebp
.text$mn:000054C2                 retn
.text$mn:000054C2 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ endp
.text$mn:000054C2
.text$mn:000054C2 ; ---------------------------------------------------------------------------
.text$mn:000054C3                 align 4
.text$mn:000054C3 _text$mn        ends
.text$mn:000054C3
.text$mn:000054C4 ; ===========================================================================
.text$mn:000054C4
.text$mn:000054C4 ; Segment type: Pure code
.text$mn:000054C4 ; Segment permissions: Read/Execute
.text$mn:000054C4 _text$mn        segment para public 'CODE' use32
.text$mn:000054C4                 assume cs:_text$mn
.text$mn:000054C4                 ;org 54C4h
.text$mn:000054C4 ; COMDAT (pick any)
.text$mn:000054C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000054C4
.text$mn:000054C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000054C4
.text$mn:000054C4 ; Attributes: bp-based frame
.text$mn:000054C4
.text$mn:000054C4 ; public: class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>> & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>>::operator++(void)
.text$mn:000054C4                 public ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ
.text$mn:000054C4 ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ proc near
.text$mn:000054C4                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+Ap
.text$mn:000054C4
.text$mn:000054C4 var_4           = dword ptr -4
.text$mn:000054C4
.text$mn:000054C4                 push    ebp
.text$mn:000054C5                 mov     ebp, esp
.text$mn:000054C7                 push    ecx
.text$mn:000054C8                 push    esi
.text$mn:000054C9                 mov     [ebp+var_4], ecx
.text$mn:000054CC                 mov     ecx, [ebp+var_4] ; this
.text$mn:000054CF                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000054D4                 test    eax, eax
.text$mn:000054D6                 jz      short loc_5505
.text$mn:000054D8                 mov     eax, [ebp+var_4]
.text$mn:000054DB                 cmp     dword ptr [eax+8], 0
.text$mn:000054DF                 jz      short loc_5505
.text$mn:000054E1                 mov     ecx, [ebp+var_4] ; this
.text$mn:000054E4                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000054E9                 mov     ecx, eax
.text$mn:000054EB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000054F0                 mov     esi, eax
.text$mn:000054F2                 mov     ecx, [ebp+var_4] ; this
.text$mn:000054F5                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000054FA                 add     esi, [eax+14h]
.text$mn:000054FD                 mov     ecx, [ebp+var_4]
.text$mn:00005500                 cmp     esi, [ecx+8]
.text$mn:00005503                 ja      short loc_5564
.text$mn:00005505
.text$mn:00005505 loc_5505:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+12j
.text$mn:00005505                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+1Bj
.text$mn:00005505                 push    6Dh ; 'm'       ; unsigned int
.text$mn:00005507                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000550C                 push    offset ??_C@_1EE@HAKOGNPH@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@ ; "string iterator not incrementable"
.text$mn:00005511                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00005516                 add     esp, 0Ch
.text$mn:00005519                 mov     edx, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000551E                 test    edx, edx
.text$mn:00005520                 jz      short loc_5526
.text$mn:00005522                 xor     eax, eax
.text$mn:00005524                 jnz     short loc_5549
.text$mn:00005526
.text$mn:00005526 loc_5526:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+5Cj
.text$mn:00005526                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:0000552B                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00005530                 push    0
.text$mn:00005532                 push    6Eh ; 'n'
.text$mn:00005534                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005539                 push    2
.text$mn:0000553B                 call    __CrtDbgReportW
.text$mn:00005540                 add     esp, 18h
.text$mn:00005543                 cmp     eax, 1
.text$mn:00005546                 jnz     short loc_5549
.text$mn:00005548                 int     3               ; Trap to Debugger
.text$mn:00005549
.text$mn:00005549 loc_5549:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+60j
.text$mn:00005549                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+82j
.text$mn:00005549                 push    0
.text$mn:0000554B                 push    6Eh ; 'n'
.text$mn:0000554D                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005552                 push    offset ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00005557                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:0000555C                 call    __invalid_parameter
.text$mn:00005561                 add     esp, 14h
.text$mn:00005564
.text$mn:00005564 loc_5564:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+3Fj
.text$mn:00005564                 mov     edx, [ebp+var_4]
.text$mn:00005567                 mov     eax, [edx+8]
.text$mn:0000556A                 add     eax, 1
.text$mn:0000556D                 mov     ecx, [ebp+var_4]
.text$mn:00005570                 mov     [ecx+8], eax
.text$mn:00005573                 mov     eax, [ebp+var_4]
.text$mn:00005576                 pop     esi
.text$mn:00005577                 mov     esp, ebp
.text$mn:00005579                 pop     ebp
.text$mn:0000557A                 retn
.text$mn:0000557A ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ endp
.text$mn:0000557A
.text$mn:0000557A ; ---------------------------------------------------------------------------
.text$mn:0000557B                 align 4
.text$mn:0000557B _text$mn        ends
.text$mn:0000557B
.text$mn:0000557C ; ===========================================================================
.text$mn:0000557C
.text$mn:0000557C ; Segment type: Pure code
.text$mn:0000557C ; Segment permissions: Read/Execute
.text$mn:0000557C _text$mn        segment para public 'CODE' use32
.text$mn:0000557C                 assume cs:_text$mn
.text$mn:0000557C                 ;org 557Ch
.text$mn:0000557C ; COMDAT (pick any)
.text$mn:0000557C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000557C
.text$mn:0000557C ; =============== S U B R O U T I N E =======================================
.text$mn:0000557C
.text$mn:0000557C ; Attributes: bp-based frame
.text$mn:0000557C
.text$mn:0000557C ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>> & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>::operator++(void)
.text$mn:0000557C                 public ??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ
.text$mn:0000557C ??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ proc near
.text$mn:0000557C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+F0p
.text$mn:0000557C
.text$mn:0000557C var_4           = dword ptr -4
.text$mn:0000557C
.text$mn:0000557C                 push    ebp
.text$mn:0000557D                 mov     ebp, esp
.text$mn:0000557F                 push    ecx
.text$mn:00005580                 mov     [ebp+var_4], ecx
.text$mn:00005583                 mov     ecx, [ebp+var_4]
.text$mn:00005586                 call    ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)
.text$mn:0000558B                 mov     eax, [ebp+var_4]
.text$mn:0000558E                 mov     esp, ebp
.text$mn:00005590                 pop     ebp
.text$mn:00005591                 retn
.text$mn:00005591 ??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ endp
.text$mn:00005591
.text$mn:00005591 ; ---------------------------------------------------------------------------
.text$mn:00005592                 align 4
.text$mn:00005592 _text$mn        ends
.text$mn:00005592
.text$mn:00005594 ; ===========================================================================
.text$mn:00005594
.text$mn:00005594 ; Segment type: Pure code
.text$mn:00005594 ; Segment permissions: Read/Execute
.text$mn:00005594 _text$mn        segment para public 'CODE' use32
.text$mn:00005594                 assume cs:_text$mn
.text$mn:00005594                 ;org 5594h
.text$mn:00005594 ; COMDAT (pick any)
.text$mn:00005594                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005594
.text$mn:00005594 ; =============== S U B R O U T I N E =======================================
.text$mn:00005594
.text$mn:00005594 ; Attributes: bp-based frame
.text$mn:00005594
.text$mn:00005594 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_Iterator_base12 *)
.text$mn:00005594                 public ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:00005594 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:00005594                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+4Bp
.text$mn:00005594                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>)+42p
.text$mn:00005594
.text$mn:00005594 var_4           = dword ptr -4
.text$mn:00005594 arg_0           = dword ptr  8
.text$mn:00005594
.text$mn:00005594                 push    ebp
.text$mn:00005595                 mov     ebp, esp
.text$mn:00005597                 push    ecx
.text$mn:00005598                 mov     [ebp+var_4], ecx
.text$mn:0000559B                 mov     eax, [ebp+arg_0]
.text$mn:0000559E                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000559F                 mov     ecx, [ebp+var_4]
.text$mn:000055A2                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:000055A7                 mov     ecx, [ebp+var_4]
.text$mn:000055AA                 mov     edx, [ebp+arg_0]
.text$mn:000055AD                 mov     eax, [ecx+8]
.text$mn:000055B0                 sub     eax, [edx+8]
.text$mn:000055B3                 mov     esp, ebp
.text$mn:000055B5                 pop     ebp
.text$mn:000055B6                 retn    4
.text$mn:000055B6 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:000055B6
.text$mn:000055B6 ; ---------------------------------------------------------------------------
.text$mn:000055B9                 align 4
.text$mn:000055B9 _text$mn        ends
.text$mn:000055B9
.text$mn:000055BC ; ===========================================================================
.text$mn:000055BC
.text$mn:000055BC ; Segment type: Pure code
.text$mn:000055BC ; Segment permissions: Read/Execute
.text$mn:000055BC _text$mn        segment para public 'CODE' use32
.text$mn:000055BC                 assume cs:_text$mn
.text$mn:000055BC                 ;org 55BCh
.text$mn:000055BC ; COMDAT (pick any)
.text$mn:000055BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000055BC
.text$mn:000055BC ; =============== S U B R O U T I N E =======================================
.text$mn:000055BC
.text$mn:000055BC ; Attributes: bp-based frame
.text$mn:000055BC
.text$mn:000055BC ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_Iterator_base12 *)
.text$mn:000055BC                 public ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z
.text$mn:000055BC ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z proc near
.text$mn:000055BC                                         ; CODE XREF: std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &,std::random_access_iterator_tag)+6Fp
.text$mn:000055BC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+12Cp
.text$mn:000055BC
.text$mn:000055BC var_28          = byte ptr -28h
.text$mn:000055BC var_1C          = dword ptr -1Ch
.text$mn:000055BC var_18          = dword ptr -18h
.text$mn:000055BC var_14          = dword ptr -14h
.text$mn:000055BC var_10          = dword ptr -10h
.text$mn:000055BC var_C           = dword ptr -0Ch
.text$mn:000055BC var_4           = dword ptr -4
.text$mn:000055BC arg_0           = dword ptr  8
.text$mn:000055BC
.text$mn:000055BC                 push    ebp
.text$mn:000055BD                 mov     ebp, esp
.text$mn:000055BF                 push    0FFFFFFFFh
.text$mn:000055C1                 push    offset __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z
.text$mn:000055C6                 mov     eax, large fs:0
.text$mn:000055CC                 push    eax
.text$mn:000055CD                 sub     esp, 1Ch
.text$mn:000055D0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000055D5                 xor     eax, ebp
.text$mn:000055D7                 push    eax
.text$mn:000055D8                 lea     eax, [ebp+var_C]
.text$mn:000055DB                 mov     large fs:0, eax
.text$mn:000055E1                 mov     [ebp+var_10], ecx
.text$mn:000055E4                 mov     eax, [ebp+arg_0]
.text$mn:000055E7                 push    eax             ; std::_Iterator_base12 *
.text$mn:000055E8                 mov     ecx, [ebp+var_10]
.text$mn:000055EB                 push    ecx             ; struct std::_Iterator_base12 *
.text$mn:000055EC                 lea     ecx, [ebp+var_28]
.text$mn:000055EF                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:000055F4                 mov     [ebp+var_14], eax
.text$mn:000055F7                 mov     edx, [ebp+var_14]
.text$mn:000055FA                 mov     [ebp+var_18], edx
.text$mn:000055FD                 mov     [ebp+var_4], 0
.text$mn:00005604                 mov     ecx, [ebp+var_18]
.text$mn:00005607                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:0000560C                 mov     [ebp+var_1C], eax
.text$mn:0000560F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005616                 lea     ecx, [ebp+var_28]
.text$mn:00005619                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:0000561E                 mov     eax, [ebp+var_1C]
.text$mn:00005621                 mov     ecx, [ebp+var_C]
.text$mn:00005624                 mov     large fs:0, ecx
.text$mn:0000562B                 pop     ecx
.text$mn:0000562C                 mov     esp, ebp
.text$mn:0000562E                 pop     ebp
.text$mn:0000562F                 retn    4
.text$mn:0000562F ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z endp
.text$mn:0000562F
.text$mn:0000562F ; ---------------------------------------------------------------------------
.text$mn:00005632                 align 4
.text$mn:00005632 _text$mn        ends
.text$mn:00005632
.text$x:00005634 ; ===========================================================================
.text$x:00005634
.text$x:00005634 ; Segment type: Pure code
.text$x:00005634 ; Segment permissions: Read/Execute
.text$x:00005634 _text$x         segment para public 'CODE' use32
.text$x:00005634                 assume cs:_text$x
.text$x:00005634                 ;org 5634h
.text$x:00005634 ; COMDAT (pick associative to section at 55BC)
.text$x:00005634                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005634
.text$x:00005634 ; =============== S U B R O U T I N E =======================================
.text$x:00005634
.text$x:00005634
.text$x:00005634 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z$0 proc near
.text$x:00005634                                         ; DATA XREF: .xdata$x:00009E6Co
.text$x:00005634                 lea     ecx, [ebp-28h]
.text$x:00005637                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00005637 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z$0 endp
.text$x:00005637
.text$x:0000563C
.text$x:0000563C ; =============== S U B R O U T I N E =======================================
.text$x:0000563C
.text$x:0000563C
.text$x:0000563C __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z proc near
.text$x:0000563C                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+5o
.text$x:0000563C
.text$x:0000563C arg_4           = dword ptr  8
.text$x:0000563C
.text$x:0000563C                 mov     edx, [esp+arg_4]
.text$x:00005640                 lea     eax, [edx+0Ch]
.text$x:00005643                 mov     ecx, [edx-20h]
.text$x:00005646                 xor     ecx, eax
.text$x:00005648                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000564D                 mov     eax, offset __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z
.text$x:00005652                 jmp     ___CxxFrameHandler3
.text$x:00005652 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z endp
.text$x:00005652
.text$x:00005652 ; ---------------------------------------------------------------------------
.text$x:00005657                 align 4
.text$x:00005657 _text$x         ends
.text$x:00005657
.text$mn:00005658 ; ===========================================================================
.text$mn:00005658
.text$mn:00005658 ; Segment type: Pure code
.text$mn:00005658 ; Segment permissions: Read/Execute
.text$mn:00005658 _text$mn        segment para public 'CODE' use32
.text$mn:00005658                 assume cs:_text$mn
.text$mn:00005658                 ;org 5658h
.text$mn:00005658 ; COMDAT (pick any)
.text$mn:00005658                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005658
.text$mn:00005658 ; =============== S U B R O U T I N E =======================================
.text$mn:00005658
.text$mn:00005658 ; Attributes: bp-based frame
.text$mn:00005658
.text$mn:00005658 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator<(std::_Iterator_base12 *)
.text$mn:00005658                 public ??M?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00005658 ??M?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00005658                                         ; CODE XREF: std::_Debug_range2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,wchar_t const *,uint,std::random_access_iterator_tag)+6Bp
.text$mn:00005658
.text$mn:00005658 var_8           = dword ptr -8
.text$mn:00005658 var_4           = dword ptr -4
.text$mn:00005658 arg_0           = dword ptr  8
.text$mn:00005658
.text$mn:00005658                 push    ebp
.text$mn:00005659                 mov     ebp, esp
.text$mn:0000565B                 sub     esp, 8
.text$mn:0000565E                 mov     [ebp+var_4], ecx
.text$mn:00005661                 mov     eax, [ebp+arg_0]
.text$mn:00005664                 push    eax             ; std::_Iterator_base12 *
.text$mn:00005665                 mov     ecx, [ebp+var_4]
.text$mn:00005668                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:0000566D                 mov     ecx, [ebp+var_4]
.text$mn:00005670                 mov     edx, [ebp+arg_0]
.text$mn:00005673                 mov     eax, [ecx+8]
.text$mn:00005676                 cmp     eax, [edx+8]
.text$mn:00005679                 jnb     short loc_5684
.text$mn:0000567B                 mov     [ebp+var_8], 1
.text$mn:00005682                 jmp     short loc_568B
.text$mn:00005684 ; ---------------------------------------------------------------------------
.text$mn:00005684
.text$mn:00005684 loc_5684:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator<(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+21j
.text$mn:00005684                 mov     [ebp+var_8], 0
.text$mn:0000568B
.text$mn:0000568B loc_568B:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator<(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+2Aj
.text$mn:0000568B                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000568E                 mov     esp, ebp
.text$mn:00005690                 pop     ebp
.text$mn:00005691                 retn    4
.text$mn:00005691 ??M?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00005691
.text$mn:00005691 _text$mn        ends
.text$mn:00005691
.text$mn:00005694 ; ===========================================================================
.text$mn:00005694
.text$mn:00005694 ; Segment type: Pure code
.text$mn:00005694 ; Segment permissions: Read/Execute
.text$mn:00005694 _text$mn        segment para public 'CODE' use32
.text$mn:00005694                 assume cs:_text$mn
.text$mn:00005694                 ;org 5694h
.text$mn:00005694 ; COMDAT (pick any)
.text$mn:00005694                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005694
.text$mn:00005694 ; =============== S U B R O U T I N E =======================================
.text$mn:00005694
.text$mn:00005694 ; Attributes: bp-based frame
.text$mn:00005694
.text$mn:00005694 ; public: void * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::`scalar deleting destructor'(unsigned int)
.text$mn:00005694                 public ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
.text$mn:00005694 ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z proc near
.text$mn:00005694                                         ; CODE XREF: std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::destroy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+Cp
.text$mn:00005694
.text$mn:00005694 var_4           = dword ptr -4
.text$mn:00005694 arg_0           = dword ptr  8
.text$mn:00005694
.text$mn:00005694                 push    ebp
.text$mn:00005695                 mov     ebp, esp
.text$mn:00005697                 push    ecx
.text$mn:00005698                 mov     [ebp+var_4], ecx
.text$mn:0000569B                 mov     ecx, [ebp+var_4]
.text$mn:0000569E                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000056A3                 mov     eax, [ebp+arg_0]
.text$mn:000056A6                 and     eax, 1
.text$mn:000056A9                 jz      short loc_56B7
.text$mn:000056AB                 mov     ecx, [ebp+var_4]
.text$mn:000056AE                 push    ecx             ; void *
.text$mn:000056AF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000056B4                 add     esp, 4
.text$mn:000056B7
.text$mn:000056B7 loc_56B7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+15j
.text$mn:000056B7                 mov     eax, [ebp+var_4]
.text$mn:000056BA                 mov     esp, ebp
.text$mn:000056BC                 pop     ebp
.text$mn:000056BD                 retn    4
.text$mn:000056BD ??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z endp
.text$mn:000056BD
.text$mn:000056BD _text$mn        ends
.text$mn:000056BD
.text$mn:000056C0 ; ===========================================================================
.text$mn:000056C0
.text$mn:000056C0 ; Segment type: Pure code
.text$mn:000056C0 ; Segment permissions: Read/Execute
.text$mn:000056C0 _text$mn        segment para public 'CODE' use32
.text$mn:000056C0                 assume cs:_text$mn
.text$mn:000056C0                 ;org 56C0h
.text$mn:000056C0 ; COMDAT (pick any)
.text$mn:000056C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056C0
.text$mn:000056C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000056C0
.text$mn:000056C0 ; Attributes: bp-based frame
.text$mn:000056C0
.text$mn:000056C0 ; public: void * __thiscall std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::`scalar deleting destructor'(unsigned int)
.text$mn:000056C0                 public ??_G?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAEPAXI@Z
.text$mn:000056C0 ??_G?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAEPAXI@Z proc near
.text$mn:000056C0                                         ; CODE XREF: std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::destroy<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+Cp
.text$mn:000056C0
.text$mn:000056C0 var_4           = dword ptr -4
.text$mn:000056C0 arg_0           = dword ptr  8
.text$mn:000056C0
.text$mn:000056C0                 push    ebp
.text$mn:000056C1                 mov     ebp, esp
.text$mn:000056C3                 push    ecx
.text$mn:000056C4                 mov     [ebp+var_4], ecx
.text$mn:000056C7                 mov     ecx, [ebp+var_4]
.text$mn:000056CA                 call    ??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::~pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:000056CF                 mov     eax, [ebp+arg_0]
.text$mn:000056D2                 and     eax, 1
.text$mn:000056D5                 jz      short loc_56E3
.text$mn:000056D7                 mov     ecx, [ebp+var_4]
.text$mn:000056DA                 push    ecx             ; void *
.text$mn:000056DB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000056E0                 add     esp, 4
.text$mn:000056E3
.text$mn:000056E3 loc_56E3:                               ; CODE XREF: std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::`scalar deleting destructor'(uint)+15j
.text$mn:000056E3                 mov     eax, [ebp+var_4]
.text$mn:000056E6                 mov     esp, ebp
.text$mn:000056E8                 pop     ebp
.text$mn:000056E9                 retn    4
.text$mn:000056E9 ??_G?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAEPAXI@Z endp
.text$mn:000056E9
.text$mn:000056E9 _text$mn        ends
.text$mn:000056E9
.text$mn:000056EC ; ===========================================================================
.text$mn:000056EC
.text$mn:000056EC ; Segment type: Pure code
.text$mn:000056EC ; Segment permissions: Read/Execute
.text$mn:000056EC _text$mn        segment para public 'CODE' use32
.text$mn:000056EC                 assume cs:_text$mn
.text$mn:000056EC                 ;org 56ECh
.text$mn:000056EC ; COMDAT (pick any)
.text$mn:000056EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056EC
.text$mn:000056EC ; =============== S U B R O U T I N E =======================================
.text$mn:000056EC
.text$mn:000056EC ; Attributes: bp-based frame
.text$mn:000056EC
.text$mn:000056EC ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000056EC                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:000056EC ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:000056EC
.text$mn:000056EC var_4           = dword ptr -4
.text$mn:000056EC arg_0           = dword ptr  8
.text$mn:000056EC
.text$mn:000056EC                 push    ebp
.text$mn:000056ED                 mov     ebp, esp
.text$mn:000056EF                 push    ecx
.text$mn:000056F0                 mov     [ebp+var_4], ecx
.text$mn:000056F3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000056F6                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:000056FB                 mov     eax, [ebp+arg_0]
.text$mn:000056FE                 and     eax, 1
.text$mn:00005701                 jz      short loc_570F
.text$mn:00005703                 mov     ecx, [ebp+var_4]
.text$mn:00005706                 push    ecx             ; void *
.text$mn:00005707                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000570C                 add     esp, 4
.text$mn:0000570F
.text$mn:0000570F loc_570F:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000570F                 mov     eax, [ebp+var_4]
.text$mn:00005712                 mov     esp, ebp
.text$mn:00005714                 pop     ebp
.text$mn:00005715                 retn    4
.text$mn:00005715 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00005715
.text$mn:00005715 _text$mn        ends
.text$mn:00005715
.text$mn:00005718 ; ===========================================================================
.text$mn:00005718
.text$mn:00005718 ; Segment type: Pure code
.text$mn:00005718 ; Segment permissions: Read/Execute
.text$mn:00005718 _text$mn        segment para public 'CODE' use32
.text$mn:00005718                 assume cs:_text$mn
.text$mn:00005718                 ;org 5718h
.text$mn:00005718 ; COMDAT (pick any)
.text$mn:00005718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005718
.text$mn:00005718 ; =============== S U B R O U T I N E =======================================
.text$mn:00005718
.text$mn:00005718 ; Attributes: bp-based frame
.text$mn:00005718
.text$mn:00005718 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005718                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00005718 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00005718
.text$mn:00005718 var_4           = dword ptr -4
.text$mn:00005718 arg_0           = dword ptr  8
.text$mn:00005718
.text$mn:00005718                 push    ebp
.text$mn:00005719                 mov     ebp, esp
.text$mn:0000571B                 push    ecx
.text$mn:0000571C                 mov     [ebp+var_4], ecx
.text$mn:0000571F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005722                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00005727                 mov     eax, [ebp+arg_0]
.text$mn:0000572A                 and     eax, 1
.text$mn:0000572D                 jz      short loc_573B
.text$mn:0000572F                 mov     ecx, [ebp+var_4]
.text$mn:00005732                 push    ecx             ; void *
.text$mn:00005733                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005738                 add     esp, 4
.text$mn:0000573B
.text$mn:0000573B loc_573B:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000573B                 mov     eax, [ebp+var_4]
.text$mn:0000573E                 mov     esp, ebp
.text$mn:00005740                 pop     ebp
.text$mn:00005741                 retn    4
.text$mn:00005741 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00005741
.text$mn:00005741 _text$mn        ends
.text$mn:00005741
.text$mn:00005744 ; ===========================================================================
.text$mn:00005744
.text$mn:00005744 ; Segment type: Pure code
.text$mn:00005744 ; Segment permissions: Read/Execute
.text$mn:00005744 _text$mn        segment para public 'CODE' use32
.text$mn:00005744                 assume cs:_text$mn
.text$mn:00005744                 ;org 5744h
.text$mn:00005744 ; COMDAT (pick any)
.text$mn:00005744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005744
.text$mn:00005744 ; =============== S U B R O U T I N E =======================================
.text$mn:00005744
.text$mn:00005744 ; Attributes: bp-based frame
.text$mn:00005744
.text$mn:00005744 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005744                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00005744 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00005744
.text$mn:00005744 var_4           = dword ptr -4
.text$mn:00005744 arg_0           = dword ptr  8
.text$mn:00005744
.text$mn:00005744                 push    ebp
.text$mn:00005745                 mov     ebp, esp
.text$mn:00005747                 push    ecx
.text$mn:00005748                 mov     [ebp+var_4], ecx
.text$mn:0000574B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000574E                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:00005753                 mov     eax, [ebp+arg_0]
.text$mn:00005756                 and     eax, 1
.text$mn:00005759                 jz      short loc_5767
.text$mn:0000575B                 mov     ecx, [ebp+var_4]
.text$mn:0000575E                 push    ecx             ; void *
.text$mn:0000575F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005764                 add     esp, 4
.text$mn:00005767
.text$mn:00005767 loc_5767:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00005767                 mov     eax, [ebp+var_4]
.text$mn:0000576A                 mov     esp, ebp
.text$mn:0000576C                 pop     ebp
.text$mn:0000576D                 retn    4
.text$mn:0000576D ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:0000576D
.text$mn:0000576D _text$mn        ends
.text$mn:0000576D
.text$mn:00005770 ; ===========================================================================
.text$mn:00005770
.text$mn:00005770 ; Segment type: Pure code
.text$mn:00005770 ; Segment permissions: Read/Execute
.text$mn:00005770 _text$mn        segment para public 'CODE' use32
.text$mn:00005770                 assume cs:_text$mn
.text$mn:00005770                 ;org 5770h
.text$mn:00005770 ; COMDAT (pick any)
.text$mn:00005770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005770
.text$mn:00005770 ; =============== S U B R O U T I N E =======================================
.text$mn:00005770
.text$mn:00005770 ; Attributes: bp-based frame
.text$mn:00005770
.text$mn:00005770 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00005770                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:00005770 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:00005770
.text$mn:00005770 var_4           = dword ptr -4
.text$mn:00005770 arg_0           = dword ptr  8
.text$mn:00005770
.text$mn:00005770                 push    ebp
.text$mn:00005771                 mov     ebp, esp
.text$mn:00005773                 push    ecx
.text$mn:00005774                 mov     [ebp+var_4], ecx
.text$mn:00005777                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000577A                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:0000577F                 mov     eax, [ebp+arg_0]
.text$mn:00005782                 and     eax, 1
.text$mn:00005785                 jz      short loc_5793
.text$mn:00005787                 mov     ecx, [ebp+var_4]
.text$mn:0000578A                 push    ecx             ; void *
.text$mn:0000578B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00005790                 add     esp, 4
.text$mn:00005793
.text$mn:00005793 loc_5793:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:00005793                 mov     eax, [ebp+var_4]
.text$mn:00005796                 mov     esp, ebp
.text$mn:00005798                 pop     ebp
.text$mn:00005799                 retn    4
.text$mn:00005799 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:00005799
.text$mn:00005799 _text$mn        ends
.text$mn:00005799
.text$mn:0000579C ; ===========================================================================
.text$mn:0000579C
.text$mn:0000579C ; Segment type: Pure code
.text$mn:0000579C ; Segment permissions: Read/Execute
.text$mn:0000579C _text$mn        segment para public 'CODE' use32
.text$mn:0000579C                 assume cs:_text$mn
.text$mn:0000579C                 ;org 579Ch
.text$mn:0000579C ; COMDAT (pick any)
.text$mn:0000579C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000579C
.text$mn:0000579C ; =============== S U B R O U T I N E =======================================
.text$mn:0000579C
.text$mn:0000579C ; Attributes: bp-based frame
.text$mn:0000579C
.text$mn:0000579C ; public: virtual void * __thiscall std::runtime_error::`scalar deleting destructor'(unsigned int)
.text$mn:0000579C                 public ??_Gruntime_error@std@@UAEPAXI@Z
.text$mn:0000579C ??_Gruntime_error@std@@UAEPAXI@Z proc near
.text$mn:0000579C
.text$mn:0000579C var_4           = dword ptr -4
.text$mn:0000579C arg_0           = dword ptr  8
.text$mn:0000579C
.text$mn:0000579C                 push    ebp
.text$mn:0000579D                 mov     ebp, esp
.text$mn:0000579F                 push    ecx
.text$mn:000057A0                 mov     [ebp+var_4], ecx
.text$mn:000057A3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000057A6                 call    ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.text$mn:000057AB                 mov     eax, [ebp+arg_0]
.text$mn:000057AE                 and     eax, 1
.text$mn:000057B1                 jz      short loc_57BF
.text$mn:000057B3                 mov     ecx, [ebp+var_4]
.text$mn:000057B6                 push    ecx             ; void *
.text$mn:000057B7                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000057BC                 add     esp, 4
.text$mn:000057BF
.text$mn:000057BF loc_57BF:                               ; CODE XREF: std::runtime_error::`scalar deleting destructor'(uint)+15j
.text$mn:000057BF                 mov     eax, [ebp+var_4]
.text$mn:000057C2                 mov     esp, ebp
.text$mn:000057C4                 pop     ebp
.text$mn:000057C5                 retn    4
.text$mn:000057C5 ??_Gruntime_error@std@@UAEPAXI@Z endp
.text$mn:000057C5
.text$mn:000057C5 _text$mn        ends
.text$mn:000057C5
.text$di:000057C8 ; ===========================================================================
.text$di:000057C8
.text$di:000057C8 ; Segment type: Pure code
.text$di:000057C8 ; Segment permissions: Read/Execute
.text$di:000057C8 _text$di        segment para public 'CODE' use32
.text$di:000057C8                 assume cs:_text$di
.text$di:000057C8                 ;org 57C8h
.text$di:000057C8 ; COMDAT (pick any)
.text$di:000057C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000057C8
.text$di:000057C8 ; =============== S U B R O U T I N E =======================================
.text$di:000057C8
.text$di:000057C8 ; Attributes: bp-based frame
.text$di:000057C8
.text$di:000057C8 ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:000057C8 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:000057C8                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:000057C8                 push    ebp
.text$di:000057C9                 mov     ebp, esp
.text$di:000057CB                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:000057D0                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:000057D5                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000057DA                 call    _atexit
.text$di:000057DF                 add     esp, 4
.text$di:000057E2                 pop     ebp
.text$di:000057E3                 retn
.text$di:000057E3 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:000057E3
.text$di:000057E3 _text$di        ends
.text$di:000057E3
.text$di:000057E4 ; ===========================================================================
.text$di:000057E4
.text$di:000057E4 ; Segment type: Pure code
.text$di:000057E4 ; Segment permissions: Read/Execute
.text$di:000057E4 _text$di        segment para public 'CODE' use32
.text$di:000057E4                 assume cs:_text$di
.text$di:000057E4                 ;org 57E4h
.text$di:000057E4 ; COMDAT (pick any)
.text$di:000057E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000057E4
.text$di:000057E4 ; =============== S U B R O U T I N E =======================================
.text$di:000057E4
.text$di:000057E4 ; Attributes: bp-based frame
.text$di:000057E4
.text$di:000057E4 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:000057E4 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:000057E4                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:000057E4                 push    ebp
.text$di:000057E5                 mov     ebp, esp
.text$di:000057E7                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:000057EC                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:000057F1                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000057F6                 call    _atexit
.text$di:000057FB                 add     esp, 4
.text$di:000057FE                 pop     ebp
.text$di:000057FF                 retn
.text$di:000057FF ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:000057FF
.text$di:000057FF _text$di        ends
.text$di:000057FF
.text$di:00005800 ; ===========================================================================
.text$di:00005800
.text$di:00005800 ; Segment type: Pure code
.text$di:00005800 ; Segment permissions: Read/Execute
.text$di:00005800 _text$di        segment para public 'CODE' use32
.text$di:00005800                 assume cs:_text$di
.text$di:00005800                 ;org 5800h
.text$di:00005800 ; COMDAT (pick any)
.text$di:00005800                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005800
.text$di:00005800 ; =============== S U B R O U T I N E =======================================
.text$di:00005800
.text$di:00005800 ; Attributes: bp-based frame
.text$di:00005800
.text$di:00005800 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:00005800 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:00005800                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:00005800                 push    ebp
.text$di:00005801                 mov     ebp, esp
.text$di:00005803                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:00005808                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:0000580D                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00005812                 call    _atexit
.text$di:00005817                 add     esp, 4
.text$di:0000581A                 pop     ebp
.text$di:0000581B                 retn
.text$di:0000581B ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:0000581B
.text$di:0000581B _text$di        ends
.text$di:0000581B
.text$di:0000581C ; ===========================================================================
.text$di:0000581C
.text$di:0000581C ; Segment type: Pure code
.text$di:0000581C ; Segment permissions: Read/Execute
.text$di:0000581C _text$di        segment para public 'CODE' use32
.text$di:0000581C                 assume cs:_text$di
.text$di:0000581C                 ;org 581Ch
.text$di:0000581C ; COMDAT (pick any)
.text$di:0000581C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000581C
.text$di:0000581C ; =============== S U B R O U T I N E =======================================
.text$di:0000581C
.text$di:0000581C ; Attributes: bp-based frame
.text$di:0000581C
.text$di:0000581C ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:0000581C ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000581C                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:0000581C                 push    ebp
.text$di:0000581D                 mov     ebp, esp
.text$di:0000581F                 push    0               ; unsigned int
.text$di:00005821                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:00005826                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000582B                 pop     ebp
.text$di:0000582C                 retn
.text$di:0000582C ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000582C
.text$di:0000582C ; ---------------------------------------------------------------------------
.text$di:0000582D                 align 10h
.text$di:0000582D _text$di        ends
.text$di:0000582D
.text$di:00005830 ; ===========================================================================
.text$di:00005830
.text$di:00005830 ; Segment type: Pure code
.text$di:00005830 ; Segment permissions: Read/Execute
.text$di:00005830 _text$di        segment para public 'CODE' use32
.text$di:00005830                 assume cs:_text$di
.text$di:00005830                 ;org 5830h
.text$di:00005830 ; COMDAT (pick any)
.text$di:00005830                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005830
.text$di:00005830 ; =============== S U B R O U T I N E =======================================
.text$di:00005830
.text$di:00005830 ; Attributes: bp-based frame
.text$di:00005830
.text$di:00005830 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00005830 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005830                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00005830                 push    ebp
.text$di:00005831                 mov     ebp, esp
.text$di:00005833                 push    0               ; unsigned int
.text$di:00005835                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:0000583A                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000583F                 pop     ebp
.text$di:00005840                 retn
.text$di:00005840 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005840
.text$di:00005840 ; ---------------------------------------------------------------------------
.text$di:00005841                 align 4
.text$di:00005841 _text$di        ends
.text$di:00005841
.text$di:00005844 ; ===========================================================================
.text$di:00005844
.text$di:00005844 ; Segment type: Pure code
.text$di:00005844 ; Segment permissions: Read/Execute
.text$di:00005844 _text$di        segment para public 'CODE' use32
.text$di:00005844                 assume cs:_text$di
.text$di:00005844                 ;org 5844h
.text$di:00005844 ; COMDAT (pick any)
.text$di:00005844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005844
.text$di:00005844 ; =============== S U B R O U T I N E =======================================
.text$di:00005844
.text$di:00005844 ; Attributes: bp-based frame
.text$di:00005844
.text$di:00005844 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00005844 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005844                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00005844                 push    ebp
.text$di:00005845                 mov     ebp, esp
.text$di:00005847                 push    0               ; unsigned int
.text$di:00005849                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:0000584E                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005853                 pop     ebp
.text$di:00005854                 retn
.text$di:00005854 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005854
.text$di:00005854 ; ---------------------------------------------------------------------------
.text$di:00005855                 align 4
.text$di:00005855 _text$di        ends
.text$di:00005855
.text$di:00005858 ; ===========================================================================
.text$di:00005858
.text$di:00005858 ; Segment type: Pure code
.text$di:00005858 ; Segment permissions: Read/Execute
.text$di:00005858 _text$di        segment para public 'CODE' use32
.text$di:00005858                 assume cs:_text$di
.text$di:00005858                 ;org 5858h
.text$di:00005858 ; COMDAT (pick any)
.text$di:00005858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00005858
.text$di:00005858 ; =============== S U B R O U T I N E =======================================
.text$di:00005858
.text$di:00005858 ; Attributes: bp-based frame
.text$di:00005858
.text$di:00005858 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:00005858 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00005858                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:00005858                 push    ebp
.text$di:00005859                 mov     ebp, esp
.text$di:0000585B                 push    0               ; unsigned int
.text$di:0000585D                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00005862                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00005867                 pop     ebp
.text$di:00005868                 retn
.text$di:00005868 ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00005868
.text$di:00005868 ; ---------------------------------------------------------------------------
.text$di:00005869                 align 4
.text$di:00005869 _text$di        ends
.text$di:00005869
.text$di:0000586C ; ===========================================================================
.text$di:0000586C
.text$di:0000586C ; Segment type: Pure code
.text$di:0000586C ; Segment permissions: Read/Execute
.text$di:0000586C _text$di        segment para public 'CODE' use32
.text$di:0000586C                 assume cs:_text$di
.text$di:0000586C                 ;org 586Ch
.text$di:0000586C ; COMDAT (pick any)
.text$di:0000586C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000586C
.text$di:0000586C ; =============== S U B R O U T I N E =======================================
.text$di:0000586C
.text$di:0000586C ; Attributes: bp-based frame
.text$di:0000586C
.text$di:0000586C ; void __cdecl std::`dynamic initializer for '_Tuple_alloc''(void)
.text$di:0000586C ??__E_Tuple_alloc@std@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:__Tuple_alloc$initializer$o
.text$di:0000586C
.text$di:0000586C var_1           = byte ptr -1
.text$di:0000586C
.text$di:0000586C                 push    ebp
.text$di:0000586D                 mov     ebp, esp
.text$di:0000586F                 push    ecx
.text$di:00005870                 xor     eax, eax
.text$di:00005872                 mov     [ebp+var_1], al
.text$di:00005875                 mov     esp, ebp
.text$di:00005877                 pop     ebp
.text$di:00005878                 retn
.text$di:00005878 ??__E_Tuple_alloc@std@@YAXXZ endp
.text$di:00005878
.text$di:00005878 ; ---------------------------------------------------------------------------
.text$di:00005879                 align 4
.text$di:00005879 _text$di        ends
.text$di:00005879
.text$di:0000587C ; ===========================================================================
.text$di:0000587C
.text$di:0000587C ; Segment type: Pure code
.text$di:0000587C ; Segment permissions: Read/Execute
.text$di:0000587C _text$di        segment para public 'CODE' use32
.text$di:0000587C                 assume cs:_text$di
.text$di:0000587C                 ;org 587Ch
.text$di:0000587C ; COMDAT (pick any)
.text$di:0000587C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000587C
.text$di:0000587C ; =============== S U B R O U T I N E =======================================
.text$di:0000587C
.text$di:0000587C ; Attributes: bp-based frame
.text$di:0000587C
.text$di:0000587C ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:0000587C ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:0000587C
.text$di:0000587C var_1           = byte ptr -1
.text$di:0000587C
.text$di:0000587C                 push    ebp
.text$di:0000587D                 mov     ebp, esp
.text$di:0000587F                 push    ecx
.text$di:00005880                 xor     eax, eax
.text$di:00005882                 mov     [ebp+var_1], al
.text$di:00005885                 mov     esp, ebp
.text$di:00005887                 pop     ebp
.text$di:00005888                 retn
.text$di:00005888 ??__Eallocator_arg@std@@YAXXZ endp
.text$di:00005888
.text$di:00005888 ; ---------------------------------------------------------------------------
.text$di:00005889                 align 4
.text$di:00005889 _text$di        ends
.text$di:00005889
.text$di:0000588C ; ===========================================================================
.text$di:0000588C
.text$di:0000588C ; Segment type: Pure code
.text$di:0000588C ; Segment permissions: Read/Execute
.text$di:0000588C _text$di        segment para public 'CODE' use32
.text$di:0000588C                 assume cs:_text$di
.text$di:0000588C                 ;org 588Ch
.text$di:0000588C ; COMDAT (pick any)
.text$di:0000588C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000588C
.text$di:0000588C ; =============== S U B R O U T I N E =======================================
.text$di:0000588C
.text$di:0000588C ; Attributes: bp-based frame
.text$di:0000588C
.text$di:0000588C ; void __cdecl std::`dynamic initializer for 'ignore''(void)
.text$di:0000588C ??__Eignore@std@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_ignore$initializer$o
.text$di:0000588C                 push    ebp
.text$di:0000588D                 mov     ebp, esp
.text$di:0000588F                 mov     ecx, offset _ignore ; this
.text$di:00005894                 call    ??0_Ignore@std@@QAE@XZ ; std::_Ignore::_Ignore(void)
.text$di:00005899                 pop     ebp
.text$di:0000589A                 retn
.text$di:0000589A ??__Eignore@std@@YAXXZ endp
.text$di:0000589A
.text$di:0000589A ; ---------------------------------------------------------------------------
.text$di:0000589B                 align 4
.text$di:0000589B _text$di        ends
.text$di:0000589B
.text$di:0000589C ; ===========================================================================
.text$di:0000589C
.text$di:0000589C ; Segment type: Pure code
.text$di:0000589C ; Segment permissions: Read/Execute
.text$di:0000589C _text$di        segment para public 'CODE' use32
.text$di:0000589C                 assume cs:_text$di
.text$di:0000589C                 ;org 589Ch
.text$di:0000589C ; COMDAT (pick any)
.text$di:0000589C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000589C
.text$di:0000589C ; =============== S U B R O U T I N E =======================================
.text$di:0000589C
.text$di:0000589C ; Attributes: bp-based frame
.text$di:0000589C
.text$di:0000589C ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:0000589C ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:0000589C                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:0000589C
.text$di:0000589C var_1           = byte ptr -1
.text$di:0000589C
.text$di:0000589C                 push    ebp
.text$di:0000589D                 mov     ebp, esp
.text$di:0000589F                 push    ecx
.text$di:000058A0                 xor     eax, eax
.text$di:000058A2                 mov     [ebp+var_1], al
.text$di:000058A5                 mov     esp, ebp
.text$di:000058A7                 pop     ebp
.text$di:000058A8                 retn
.text$di:000058A8 ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:000058A8
.text$di:000058A8 ; ---------------------------------------------------------------------------
.text$di:000058A9                 align 4
.text$di:000058A9 _text$di        ends
.text$di:000058A9
.text$yd:000058AC ; ===========================================================================
.text$yd:000058AC
.text$yd:000058AC ; Segment type: Pure code
.text$yd:000058AC ; Segment permissions: Read/Execute
.text$yd:000058AC _text$yd        segment para public 'CODE' use32
.text$yd:000058AC                 assume cs:_text$yd
.text$yd:000058AC                 ;org 58ACh
.text$yd:000058AC ; COMDAT (pick any)
.text$yd:000058AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000058AC
.text$yd:000058AC ; =============== S U B R O U T I N E =======================================
.text$yd:000058AC
.text$yd:000058AC ; Attributes: bp-based frame
.text$yd:000058AC
.text$yd:000058AC ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:000058AC ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:000058AC                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:000058AC                 push    ebp
.text$yd:000058AD                 mov     ebp, esp
.text$yd:000058AF                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:000058B4                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:000058B9                 pop     ebp
.text$yd:000058BA                 retn
.text$yd:000058BA ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:000058BA
.text$yd:000058BA ; ---------------------------------------------------------------------------
.text$yd:000058BB                 align 4
.text$yd:000058BB _text$yd        ends
.text$yd:000058BB
.text$yd:000058BC ; ===========================================================================
.text$yd:000058BC
.text$yd:000058BC ; Segment type: Pure code
.text$yd:000058BC ; Segment permissions: Read/Execute
.text$yd:000058BC _text$yd        segment para public 'CODE' use32
.text$yd:000058BC                 assume cs:_text$yd
.text$yd:000058BC                 ;org 58BCh
.text$yd:000058BC ; COMDAT (pick any)
.text$yd:000058BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000058BC
.text$yd:000058BC ; =============== S U B R O U T I N E =======================================
.text$yd:000058BC
.text$yd:000058BC ; Attributes: bp-based frame
.text$yd:000058BC
.text$yd:000058BC ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:000058BC ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:000058BC                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:000058BC                 push    ebp
.text$yd:000058BD                 mov     ebp, esp
.text$yd:000058BF                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:000058C4                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:000058C9                 pop     ebp
.text$yd:000058CA                 retn
.text$yd:000058CA ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:000058CA
.text$yd:000058CA ; ---------------------------------------------------------------------------
.text$yd:000058CB                 align 4
.text$yd:000058CB _text$yd        ends
.text$yd:000058CB
.text$yd:000058CC ; ===========================================================================
.text$yd:000058CC
.text$yd:000058CC ; Segment type: Pure code
.text$yd:000058CC ; Segment permissions: Read/Execute
.text$yd:000058CC _text$yd        segment para public 'CODE' use32
.text$yd:000058CC                 assume cs:_text$yd
.text$yd:000058CC                 ;org 58CCh
.text$yd:000058CC ; COMDAT (pick any)
.text$yd:000058CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000058CC
.text$yd:000058CC ; =============== S U B R O U T I N E =======================================
.text$yd:000058CC
.text$yd:000058CC ; Attributes: bp-based frame
.text$yd:000058CC
.text$yd:000058CC ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:000058CC ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:000058CC                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:000058CC                 push    ebp
.text$yd:000058CD                 mov     ebp, esp
.text$yd:000058CF                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:000058D4                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:000058D9                 pop     ebp
.text$yd:000058DA                 retn
.text$yd:000058DA ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:000058DA
.text$yd:000058DA ; ---------------------------------------------------------------------------
.text$yd:000058DB                 align 4
.text$yd:000058DB _text$yd        ends
.text$yd:000058DB
.text$mn:000058DC ; ===========================================================================
.text$mn:000058DC
.text$mn:000058DC ; Segment type: Pure code
.text$mn:000058DC ; Segment permissions: Read/Execute
.text$mn:000058DC _text$mn        segment para public 'CODE' use32
.text$mn:000058DC                 assume cs:_text$mn
.text$mn:000058DC                 ;org 58DCh
.text$mn:000058DC ; COMDAT (pick any)
.text$mn:000058DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000058DC
.text$mn:000058DC ; =============== S U B R O U T I N E =======================================
.text$mn:000058DC
.text$mn:000058DC ; Attributes: bp-based frame
.text$mn:000058DC
.text$mn:000058DC ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:000058DC                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:000058DC ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:000058DC                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(char const *,std::_Container_base12 const *)+3Cp
.text$mn:000058DC                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+49p
.text$mn:000058DC
.text$mn:000058DC var_1C          = byte ptr -1Ch
.text$mn:000058DC var_18          = byte ptr -18h
.text$mn:000058DC var_14          = dword ptr -14h
.text$mn:000058DC var_10          = dword ptr -10h
.text$mn:000058DC var_C           = dword ptr -0Ch
.text$mn:000058DC var_4           = dword ptr -4
.text$mn:000058DC arg_0           = dword ptr  8
.text$mn:000058DC
.text$mn:000058DC                 push    ebp
.text$mn:000058DD                 mov     ebp, esp
.text$mn:000058DF                 push    0FFFFFFFFh
.text$mn:000058E1                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:000058E6                 mov     eax, large fs:0
.text$mn:000058EC                 push    eax
.text$mn:000058ED                 sub     esp, 10h
.text$mn:000058F0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000058F5                 xor     eax, ebp
.text$mn:000058F7                 push    eax
.text$mn:000058F8                 lea     eax, [ebp+var_C]
.text$mn:000058FB                 mov     large fs:0, eax
.text$mn:00005901                 mov     [ebp+var_10], ecx
.text$mn:00005904                 cmp     [ebp+arg_0], 0
.text$mn:00005908                 jnz     short loc_5934
.text$mn:0000590A                 push    3               ; int
.text$mn:0000590C                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000590F                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00005914                 mov     [ebp+var_4], 0
.text$mn:0000591B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000591E                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00005923                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000592A                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000592D                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00005932                 jmp     short loc_598B
.text$mn:00005934 ; ---------------------------------------------------------------------------
.text$mn:00005934
.text$mn:00005934 loc_5934:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:00005934                 mov     eax, [ebp+arg_0]
.text$mn:00005937                 mov     ecx, [eax]
.text$mn:00005939                 mov     [ebp+var_14], ecx
.text$mn:0000593C                 mov     edx, [ebp+var_10]
.text$mn:0000593F                 mov     eax, [edx]
.text$mn:00005941                 cmp     eax, [ebp+var_14]
.text$mn:00005944                 jz      short loc_598B
.text$mn:00005946                 push    3               ; int
.text$mn:00005948                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000594B                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00005950                 mov     [ebp+var_4], 1
.text$mn:00005957                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000595A                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:0000595F                 mov     ecx, [ebp+var_10]
.text$mn:00005962                 mov     edx, [ebp+var_14]
.text$mn:00005965                 mov     eax, [edx+4]
.text$mn:00005968                 mov     [ecx+4], eax
.text$mn:0000596B                 mov     ecx, [ebp+var_14]
.text$mn:0000596E                 mov     edx, [ebp+var_10]
.text$mn:00005971                 mov     [ecx+4], edx
.text$mn:00005974                 mov     eax, [ebp+var_10]
.text$mn:00005977                 mov     ecx, [ebp+var_14]
.text$mn:0000597A                 mov     [eax], ecx
.text$mn:0000597C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005983                 lea     ecx, [ebp+var_1C] ; this
.text$mn:00005986                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000598B
.text$mn:0000598B loc_598B:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:0000598B                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:0000598B                 mov     ecx, [ebp+var_C]
.text$mn:0000598E                 mov     large fs:0, ecx
.text$mn:00005995                 pop     ecx
.text$mn:00005996                 mov     esp, ebp
.text$mn:00005998                 pop     ebp
.text$mn:00005999                 retn    4
.text$mn:00005999 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:00005999
.text$mn:00005999 _text$mn        ends
.text$mn:00005999
.text$x:0000599C ; ===========================================================================
.text$x:0000599C
.text$x:0000599C ; Segment type: Pure code
.text$x:0000599C ; Segment permissions: Read/Execute
.text$x:0000599C _text$x         segment para public 'CODE' use32
.text$x:0000599C                 assume cs:_text$x
.text$x:0000599C                 ;org 599Ch
.text$x:0000599C ; COMDAT (pick associative to section at 58DC)
.text$x:0000599C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000599C
.text$x:0000599C ; =============== S U B R O U T I N E =======================================
.text$x:0000599C
.text$x:0000599C
.text$x:0000599C __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:0000599C                                         ; DATA XREF: .xdata$x:00009224o
.text$x:0000599C                 lea     ecx, [ebp-18h]  ; this
.text$x:0000599F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000599F __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:0000599F
.text$x:000059A4
.text$x:000059A4 ; =============== S U B R O U T I N E =======================================
.text$x:000059A4
.text$x:000059A4
.text$x:000059A4 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:000059A4                                         ; DATA XREF: .xdata$x:0000922Co
.text$x:000059A4                 lea     ecx, [ebp-1Ch]  ; this
.text$x:000059A7                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:000059A7 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:000059A7
.text$x:000059AC
.text$x:000059AC ; =============== S U B R O U T I N E =======================================
.text$x:000059AC
.text$x:000059AC
.text$x:000059AC __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:000059AC                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:000059AC
.text$x:000059AC arg_4           = dword ptr  8
.text$x:000059AC
.text$x:000059AC                 mov     edx, [esp+arg_4]
.text$x:000059B0                 lea     eax, [edx+0Ch]
.text$x:000059B3                 mov     ecx, [edx-14h]
.text$x:000059B6                 xor     ecx, eax
.text$x:000059B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000059BD                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:000059C2                 jmp     ___CxxFrameHandler3
.text$x:000059C2 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:000059C2
.text$x:000059C2 ; ---------------------------------------------------------------------------
.text$x:000059C7                 align 4
.text$x:000059C7 _text$x         ends
.text$x:000059C7
.text$mn:000059C8 ; ===========================================================================
.text$mn:000059C8
.text$mn:000059C8 ; Segment type: Pure code
.text$mn:000059C8 ; Segment permissions: Read/Execute
.text$mn:000059C8 _text$mn        segment para public 'CODE' use32
.text$mn:000059C8                 assume cs:_text$mn
.text$mn:000059C8                 ;org 59C8h
.text$mn:000059C8 ; COMDAT (pick any)
.text$mn:000059C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000059C8
.text$mn:000059C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000059C8
.text$mn:000059C8 ; Attributes: bp-based frame
.text$mn:000059C8
.text$mn:000059C8 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:000059C8                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:000059C8 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000059C8                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:000059C8
.text$mn:000059C8 var_10          = byte ptr -10h
.text$mn:000059C8 var_8           = dword ptr -8
.text$mn:000059C8 var_1           = byte ptr -1
.text$mn:000059C8
.text$mn:000059C8                 push    ebp
.text$mn:000059C9                 mov     ebp, esp
.text$mn:000059CB                 sub     esp, 10h
.text$mn:000059CE                 mov     [ebp+var_8], ecx
.text$mn:000059D1                 lea     ecx, [ebp+var_1]
.text$mn:000059D4                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000059D9                 push    1
.text$mn:000059DB                 lea     ecx, [ebp+var_1]
.text$mn:000059DE                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000059E3                 mov     ecx, [ebp+var_8]
.text$mn:000059E6                 mov     [ecx], eax
.text$mn:000059E8                 lea     ecx, [ebp+var_10] ; this
.text$mn:000059EB                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000059F0                 push    eax             ; int
.text$mn:000059F1                 mov     edx, [ebp+var_8]
.text$mn:000059F4                 mov     eax, [edx]
.text$mn:000059F6                 push    eax             ; void *
.text$mn:000059F7                 lea     ecx, [ebp+var_1]
.text$mn:000059FA                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000059FF                 mov     ecx, [ebp+var_8]
.text$mn:00005A02                 mov     edx, [ecx]
.text$mn:00005A04                 mov     eax, [ebp+var_8]
.text$mn:00005A07                 mov     [edx], eax
.text$mn:00005A09                 mov     esp, ebp
.text$mn:00005A0B                 pop     ebp
.text$mn:00005A0C                 retn
.text$mn:00005A0C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00005A0C
.text$mn:00005A0C ; ---------------------------------------------------------------------------
.text$mn:00005A0D                 align 10h
.text$mn:00005A0D _text$mn        ends
.text$mn:00005A0D
.text$mn:00005A10 ; ===========================================================================
.text$mn:00005A10
.text$mn:00005A10 ; Segment type: Pure code
.text$mn:00005A10 ; Segment permissions: Read/Execute
.text$mn:00005A10 _text$mn        segment para public 'CODE' use32
.text$mn:00005A10                 assume cs:_text$mn
.text$mn:00005A10                 ;org 5A10h
.text$mn:00005A10 ; COMDAT (pick any)
.text$mn:00005A10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A10
.text$mn:00005A10 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A10
.text$mn:00005A10 ; Attributes: bp-based frame
.text$mn:00005A10
.text$mn:00005A10 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00005A10                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00005A10 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00005A10                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:00005A10
.text$mn:00005A10 var_10          = byte ptr -10h
.text$mn:00005A10 var_8           = dword ptr -8
.text$mn:00005A10 var_1           = byte ptr -1
.text$mn:00005A10
.text$mn:00005A10                 push    ebp
.text$mn:00005A11                 mov     ebp, esp
.text$mn:00005A13                 sub     esp, 10h
.text$mn:00005A16                 mov     [ebp+var_8], ecx
.text$mn:00005A19                 lea     ecx, [ebp+var_1]
.text$mn:00005A1C                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00005A21                 push    1
.text$mn:00005A23                 lea     ecx, [ebp+var_1]
.text$mn:00005A26                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00005A2B                 mov     ecx, [ebp+var_8]
.text$mn:00005A2E                 mov     [ecx], eax
.text$mn:00005A30                 lea     ecx, [ebp+var_10] ; this
.text$mn:00005A33                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00005A38                 push    eax             ; int
.text$mn:00005A39                 mov     edx, [ebp+var_8]
.text$mn:00005A3C                 mov     eax, [edx]
.text$mn:00005A3E                 push    eax             ; void *
.text$mn:00005A3F                 lea     ecx, [ebp+var_1]
.text$mn:00005A42                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005A47                 mov     ecx, [ebp+var_8]
.text$mn:00005A4A                 mov     edx, [ecx]
.text$mn:00005A4C                 mov     eax, [ebp+var_8]
.text$mn:00005A4F                 mov     [edx], eax
.text$mn:00005A51                 mov     esp, ebp
.text$mn:00005A53                 pop     ebp
.text$mn:00005A54                 retn
.text$mn:00005A54 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00005A54
.text$mn:00005A54 ; ---------------------------------------------------------------------------
.text$mn:00005A55                 align 4
.text$mn:00005A55 _text$mn        ends
.text$mn:00005A55
.text$mn:00005A58 ; ===========================================================================
.text$mn:00005A58
.text$mn:00005A58 ; Segment type: Pure code
.text$mn:00005A58 ; Segment permissions: Read/Execute
.text$mn:00005A58 _text$mn        segment para public 'CODE' use32
.text$mn:00005A58                 assume cs:_text$mn
.text$mn:00005A58                 ;org 5A58h
.text$mn:00005A58 ; COMDAT (pick any)
.text$mn:00005A58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A58
.text$mn:00005A58 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A58
.text$mn:00005A58 ; Attributes: bp-based frame
.text$mn:00005A58
.text$mn:00005A58 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Alloc_proxy(void)
.text$mn:00005A58                 public ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:00005A58 ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:00005A58                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+38p
.text$mn:00005A58
.text$mn:00005A58 var_10          = byte ptr -10h
.text$mn:00005A58 var_8           = dword ptr -8
.text$mn:00005A58 var_1           = byte ptr -1
.text$mn:00005A58
.text$mn:00005A58                 push    ebp
.text$mn:00005A59                 mov     ebp, esp
.text$mn:00005A5B                 sub     esp, 10h
.text$mn:00005A5E                 mov     [ebp+var_8], ecx
.text$mn:00005A61                 lea     ecx, [ebp+var_1]
.text$mn:00005A64                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:00005A69                 push    1
.text$mn:00005A6B                 lea     ecx, [ebp+var_1]
.text$mn:00005A6E                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::allocate(uint)
.text$mn:00005A73                 mov     ecx, [ebp+var_8]
.text$mn:00005A76                 mov     [ecx], eax
.text$mn:00005A78                 lea     ecx, [ebp+var_10] ; this
.text$mn:00005A7B                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:00005A80                 push    eax             ; int
.text$mn:00005A81                 mov     edx, [ebp+var_8]
.text$mn:00005A84                 mov     eax, [edx]
.text$mn:00005A86                 push    eax             ; void *
.text$mn:00005A87                 lea     ecx, [ebp+var_1]
.text$mn:00005A8A                 call    ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:00005A8F                 mov     ecx, [ebp+var_8]
.text$mn:00005A92                 mov     edx, [ecx]
.text$mn:00005A94                 mov     eax, [ebp+var_8]
.text$mn:00005A97                 mov     [edx], eax
.text$mn:00005A99                 mov     esp, ebp
.text$mn:00005A9B                 pop     ebp
.text$mn:00005A9C                 retn
.text$mn:00005A9C ?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:00005A9C
.text$mn:00005A9C ; ---------------------------------------------------------------------------
.text$mn:00005A9D                 align 10h
.text$mn:00005A9D _text$mn        ends
.text$mn:00005A9D
.text$mn:00005AA0 ; ===========================================================================
.text$mn:00005AA0
.text$mn:00005AA0 ; Segment type: Pure code
.text$mn:00005AA0 ; Segment permissions: Read/Execute
.text$mn:00005AA0 _text$mn        segment para public 'CODE' use32
.text$mn:00005AA0                 assume cs:_text$mn
.text$mn:00005AA0                 ;org 5AA0h
.text$mn:00005AA0 ; COMDAT (pick any)
.text$mn:00005AA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005AA0
.text$mn:00005AA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005AA0
.text$mn:00005AA0 ; Attributes: bp-based frame
.text$mn:00005AA0
.text$mn:00005AA0 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Assign_rv(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &&)
.text$mn:00005AA0                 public ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z
.text$mn:00005AA0 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:00005AA0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+E2p
.text$mn:00005AA0
.text$mn:00005AA0 var_8           = dword ptr -8
.text$mn:00005AA0 var_1           = byte ptr -1
.text$mn:00005AA0 arg_0           = dword ptr  8
.text$mn:00005AA0
.text$mn:00005AA0                 push    ebp
.text$mn:00005AA1                 mov     ebp, esp
.text$mn:00005AA3                 sub     esp, 8
.text$mn:00005AA6                 mov     [ebp+var_8], ecx
.text$mn:00005AA9                 mov     eax, [ebp+arg_0]
.text$mn:00005AAC                 cmp     dword ptr [eax+18h], 10h
.text$mn:00005AB0                 jnb     short loc_5AD4
.text$mn:00005AB2                 mov     ecx, [ebp+arg_0]
.text$mn:00005AB5                 mov     edx, [ecx+14h]
.text$mn:00005AB8                 add     edx, 1
.text$mn:00005ABB                 push    edx             ; Size
.text$mn:00005ABC                 mov     eax, [ebp+arg_0]
.text$mn:00005ABF                 add     eax, 4
.text$mn:00005AC2                 push    eax             ; Src
.text$mn:00005AC3                 mov     ecx, [ebp+var_8]
.text$mn:00005AC6                 add     ecx, 4
.text$mn:00005AC9                 push    ecx             ; Dst
.text$mn:00005ACA                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00005ACF                 add     esp, 0Ch
.text$mn:00005AD2                 jmp     short loc_5AFF
.text$mn:00005AD4 ; ---------------------------------------------------------------------------
.text$mn:00005AD4
.text$mn:00005AD4 loc_5AD4:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+10j
.text$mn:00005AD4                 mov     edx, [ebp+arg_0]
.text$mn:00005AD7                 add     edx, 4
.text$mn:00005ADA                 push    edx             ; int
.text$mn:00005ADB                 mov     eax, [ebp+var_8]
.text$mn:00005ADE                 add     eax, 4
.text$mn:00005AE1                 push    eax             ; void *
.text$mn:00005AE2                 lea     ecx, [ebp+var_1]
.text$mn:00005AE5                 push    ecx
.text$mn:00005AE6                 mov     ecx, [ebp+var_8]
.text$mn:00005AE9                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005AEE                 mov     ecx, eax
.text$mn:00005AF0                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00005AF5                 mov     edx, [ebp+arg_0]
.text$mn:00005AF8                 mov     dword ptr [edx+4], 0
.text$mn:00005AFF
.text$mn:00005AFF loc_5AFF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+32j
.text$mn:00005AFF                 mov     eax, [ebp+var_8]
.text$mn:00005B02                 mov     ecx, [ebp+arg_0]
.text$mn:00005B05                 mov     edx, [ecx+14h]
.text$mn:00005B08                 mov     [eax+14h], edx
.text$mn:00005B0B                 mov     eax, [ebp+var_8]
.text$mn:00005B0E                 mov     ecx, [ebp+arg_0]
.text$mn:00005B11                 mov     edx, [ecx+18h]
.text$mn:00005B14                 mov     [eax+18h], edx
.text$mn:00005B17                 push    0               ; Size
.text$mn:00005B19                 push    0               ; char
.text$mn:00005B1B                 mov     ecx, [ebp+arg_0]
.text$mn:00005B1E                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005B23                 mov     esp, ebp
.text$mn:00005B25                 pop     ebp
.text$mn:00005B26                 retn    4
.text$mn:00005B26 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:00005B26
.text$mn:00005B26 ; ---------------------------------------------------------------------------
.text$mn:00005B29                 align 4
.text$mn:00005B29 _text$mn        ends
.text$mn:00005B29
.text$mn:00005B2C ; ===========================================================================
.text$mn:00005B2C
.text$mn:00005B2C ; Segment type: Pure code
.text$mn:00005B2C ; Segment permissions: Read/Execute
.text$mn:00005B2C _text$mn        segment para public 'CODE' use32
.text$mn:00005B2C                 assume cs:_text$mn
.text$mn:00005B2C                 ;org 5B2Ch
.text$mn:00005B2C ; COMDAT (pick any)
.text$mn:00005B2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B2C
.text$mn:00005B2C ; =============== S U B R O U T I N E =======================================
.text$mn:00005B2C
.text$mn:00005B2C ; Attributes: bp-based frame
.text$mn:00005B2C
.text$mn:00005B2C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00005B2C                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:00005B2C ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:00005B2C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+60p
.text$mn:00005B2C
.text$mn:00005B2C var_8           = dword ptr -8
.text$mn:00005B2C var_1           = byte ptr -1
.text$mn:00005B2C arg_0           = dword ptr  8
.text$mn:00005B2C
.text$mn:00005B2C                 push    ebp
.text$mn:00005B2D                 mov     ebp, esp
.text$mn:00005B2F                 sub     esp, 8
.text$mn:00005B32                 mov     [ebp+var_8], ecx
.text$mn:00005B35                 mov     eax, [ebp+arg_0]
.text$mn:00005B38                 cmp     dword ptr [eax+18h], 8
.text$mn:00005B3C                 jnb     short loc_5B60
.text$mn:00005B3E                 mov     ecx, [ebp+arg_0]
.text$mn:00005B41                 mov     edx, [ecx+14h]
.text$mn:00005B44                 add     edx, 1
.text$mn:00005B47                 push    edx             ; int
.text$mn:00005B48                 mov     eax, [ebp+arg_0]
.text$mn:00005B4B                 add     eax, 4
.text$mn:00005B4E                 push    eax             ; Src
.text$mn:00005B4F                 mov     ecx, [ebp+var_8]
.text$mn:00005B52                 add     ecx, 4
.text$mn:00005B55                 push    ecx             ; Dst
.text$mn:00005B56                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00005B5B                 add     esp, 0Ch
.text$mn:00005B5E                 jmp     short loc_5B8B
.text$mn:00005B60 ; ---------------------------------------------------------------------------
.text$mn:00005B60
.text$mn:00005B60 loc_5B60:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:00005B60                 mov     edx, [ebp+arg_0]
.text$mn:00005B63                 add     edx, 4
.text$mn:00005B66                 push    edx             ; int
.text$mn:00005B67                 mov     eax, [ebp+var_8]
.text$mn:00005B6A                 add     eax, 4
.text$mn:00005B6D                 push    eax             ; void *
.text$mn:00005B6E                 lea     ecx, [ebp+var_1]
.text$mn:00005B71                 push    ecx
.text$mn:00005B72                 mov     ecx, [ebp+var_8]
.text$mn:00005B75                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005B7A                 mov     ecx, eax
.text$mn:00005B7C                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00005B81                 mov     edx, [ebp+arg_0]
.text$mn:00005B84                 mov     dword ptr [edx+4], 0
.text$mn:00005B8B
.text$mn:00005B8B loc_5B8B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:00005B8B                 mov     eax, [ebp+var_8]
.text$mn:00005B8E                 mov     ecx, [ebp+arg_0]
.text$mn:00005B91                 mov     edx, [ecx+14h]
.text$mn:00005B94                 mov     [eax+14h], edx
.text$mn:00005B97                 mov     eax, [ebp+var_8]
.text$mn:00005B9A                 mov     ecx, [ebp+arg_0]
.text$mn:00005B9D                 mov     edx, [ecx+18h]
.text$mn:00005BA0                 mov     [eax+18h], edx
.text$mn:00005BA3                 push    0
.text$mn:00005BA5                 push    0
.text$mn:00005BA7                 mov     ecx, [ebp+arg_0]
.text$mn:00005BAA                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005BAF                 mov     esp, ebp
.text$mn:00005BB1                 pop     ebp
.text$mn:00005BB2                 retn    4
.text$mn:00005BB2 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:00005BB2
.text$mn:00005BB2 ; ---------------------------------------------------------------------------
.text$mn:00005BB5                 align 4
.text$mn:00005BB5 _text$mn        ends
.text$mn:00005BB5
.text$mn:00005BB8 ; ===========================================================================
.text$mn:00005BB8
.text$mn:00005BB8 ; Segment type: Pure code
.text$mn:00005BB8 ; Segment permissions: Read/Execute
.text$mn:00005BB8 _text$mn        segment para public 'CODE' use32
.text$mn:00005BB8                 assume cs:_text$mn
.text$mn:00005BB8                 ;org 5BB8h
.text$mn:00005BB8 ; COMDAT (pick any)
.text$mn:00005BB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BB8
.text$mn:00005BB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BB8
.text$mn:00005BB8 ; Attributes: bp-based frame
.text$mn:00005BB8
.text$mn:00005BB8 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<char>> const &)
.text$mn:00005BB8                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z
.text$mn:00005BB8 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z proc near
.text$mn:00005BB8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+54p
.text$mn:00005BB8
.text$mn:00005BB8 var_4           = dword ptr -4
.text$mn:00005BB8
.text$mn:00005BB8                 push    ebp
.text$mn:00005BB9                 mov     ebp, esp
.text$mn:00005BBB                 push    ecx
.text$mn:00005BBC                 mov     [ebp+var_4], ecx
.text$mn:00005BBF                 mov     esp, ebp
.text$mn:00005BC1                 pop     ebp
.text$mn:00005BC2                 retn    4
.text$mn:00005BC2 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z endp
.text$mn:00005BC2
.text$mn:00005BC2 ; ---------------------------------------------------------------------------
.text$mn:00005BC5                 align 4
.text$mn:00005BC5 _text$mn        ends
.text$mn:00005BC5
.text$mn:00005BC8 ; ===========================================================================
.text$mn:00005BC8
.text$mn:00005BC8 ; Segment type: Pure code
.text$mn:00005BC8 ; Segment permissions: Read/Execute
.text$mn:00005BC8 _text$mn        segment para public 'CODE' use32
.text$mn:00005BC8                 assume cs:_text$mn
.text$mn:00005BC8                 ;org 5BC8h
.text$mn:00005BC8 ; COMDAT (pick any)
.text$mn:00005BC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005BC8
.text$mn:00005BC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005BC8
.text$mn:00005BC8 ; Attributes: bp-based frame
.text$mn:00005BC8
.text$mn:00005BC8 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Chassign(unsigned int, unsigned int, wchar_t)
.text$mn:00005BC8                 public ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z
.text$mn:00005BC8 ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z proc near
.text$mn:00005BC8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+59p
.text$mn:00005BC8
.text$mn:00005BC8 var_4           = dword ptr -4
.text$mn:00005BC8 arg_0           = dword ptr  8
.text$mn:00005BC8 arg_4           = dword ptr  0Ch
.text$mn:00005BC8 arg_8           = word ptr  10h
.text$mn:00005BC8
.text$mn:00005BC8                 push    ebp
.text$mn:00005BC9                 mov     ebp, esp
.text$mn:00005BCB                 push    ecx
.text$mn:00005BCC                 mov     [ebp+var_4], ecx
.text$mn:00005BCF                 cmp     [ebp+arg_4], 1
.text$mn:00005BD3                 jnz     short loc_5BF2
.text$mn:00005BD5                 lea     eax, [ebp+arg_8]
.text$mn:00005BD8                 push    eax
.text$mn:00005BD9                 mov     ecx, [ebp+var_4]
.text$mn:00005BDC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005BE1                 mov     ecx, [ebp+arg_0]
.text$mn:00005BE4                 lea     edx, [eax+ecx*2]
.text$mn:00005BE7                 push    edx
.text$mn:00005BE8                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:00005BED                 add     esp, 8
.text$mn:00005BF0                 jmp     short loc_5C12
.text$mn:00005BF2 ; ---------------------------------------------------------------------------
.text$mn:00005BF2
.text$mn:00005BF2 loc_5BF2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+Bj
.text$mn:00005BF2                 movzx   eax, [ebp+arg_8]
.text$mn:00005BF6                 push    eax
.text$mn:00005BF7                 mov     ecx, [ebp+arg_4]
.text$mn:00005BFA                 push    ecx
.text$mn:00005BFB                 mov     ecx, [ebp+var_4]
.text$mn:00005BFE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005C03                 mov     edx, [ebp+arg_0]
.text$mn:00005C06                 lea     eax, [eax+edx*2]
.text$mn:00005C09                 push    eax
.text$mn:00005C0A                 call    ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z ; std::char_traits<wchar_t>::assign(wchar_t *,uint,wchar_t)
.text$mn:00005C0F                 add     esp, 0Ch
.text$mn:00005C12
.text$mn:00005C12 loc_5C12:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+28j
.text$mn:00005C12                 mov     esp, ebp
.text$mn:00005C14                 pop     ebp
.text$mn:00005C15                 retn    0Ch
.text$mn:00005C15 ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z endp
.text$mn:00005C15
.text$mn:00005C15 _text$mn        ends
.text$mn:00005C15
.text$mn:00005C18 ; ===========================================================================
.text$mn:00005C18
.text$mn:00005C18 ; Segment type: Pure code
.text$mn:00005C18 ; Segment permissions: Read/Execute
.text$mn:00005C18 _text$mn        segment para public 'CODE' use32
.text$mn:00005C18                 assume cs:_text$mn
.text$mn:00005C18                 ;org 5C18h
.text$mn:00005C18 ; COMDAT (pick any)
.text$mn:00005C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C18
.text$mn:00005C18 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C18
.text$mn:00005C18 ; Attributes: bp-based frame
.text$mn:00005C18
.text$mn:00005C18 ; void __thiscall std::_Iterator_base12::_Clrcont(std::_Iterator_base12 *__hidden this)
.text$mn:00005C18                 public ?_Clrcont@_Iterator_base12@std@@QAEXXZ
.text$mn:00005C18 ?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00005C18                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+80p
.text$mn:00005C18                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+80p
.text$mn:00005C18
.text$mn:00005C18 var_4           = dword ptr -4
.text$mn:00005C18
.text$mn:00005C18                 push    ebp
.text$mn:00005C19                 mov     ebp, esp
.text$mn:00005C1B                 push    ecx
.text$mn:00005C1C                 mov     [ebp+var_4], ecx
.text$mn:00005C1F                 mov     eax, [ebp+var_4]
.text$mn:00005C22                 mov     dword ptr [eax], 0
.text$mn:00005C28                 mov     esp, ebp
.text$mn:00005C2A                 pop     ebp
.text$mn:00005C2B                 retn
.text$mn:00005C2B ?_Clrcont@_Iterator_base12@std@@QAEXXZ endp
.text$mn:00005C2B
.text$mn:00005C2B _text$mn        ends
.text$mn:00005C2B
.text$mn:00005C2C ; ===========================================================================
.text$mn:00005C2C
.text$mn:00005C2C ; Segment type: Pure code
.text$mn:00005C2C ; Segment permissions: Read/Execute
.text$mn:00005C2C _text$mn        segment para public 'CODE' use32
.text$mn:00005C2C                 assume cs:_text$mn
.text$mn:00005C2C                 ;org 5C2Ch
.text$mn:00005C2C ; COMDAT (pick any)
.text$mn:00005C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C2C
.text$mn:00005C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C2C
.text$mn:00005C2C ; Attributes: bp-based frame
.text$mn:00005C2C
.text$mn:00005C2C ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_Iterator_base12 *)
.text$mn:00005C2C                 public ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:00005C2C ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:00005C2C                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+10p
.text$mn:00005C2C                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+Ep ...
.text$mn:00005C2C
.text$mn:00005C2C var_4           = dword ptr -4
.text$mn:00005C2C arg_0           = dword ptr  8
.text$mn:00005C2C
.text$mn:00005C2C                 push    ebp
.text$mn:00005C2D                 mov     ebp, esp
.text$mn:00005C2F                 push    ecx
.text$mn:00005C30                 push    esi
.text$mn:00005C31                 mov     [ebp+var_4], ecx
.text$mn:00005C34                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005C37                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005C3C                 test    eax, eax
.text$mn:00005C3E                 jz      short loc_5C56
.text$mn:00005C40                 mov     ecx, [ebp+var_4] ; this
.text$mn:00005C43                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005C48                 mov     esi, eax
.text$mn:00005C4A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00005C4D                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:00005C52                 cmp     esi, eax
.text$mn:00005C54                 jz      short loc_5CBE
.text$mn:00005C56
.text$mn:00005C56 loc_5C56:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+12j
.text$mn:00005C56                 push    0FAh ; '·'      ; unsigned int
.text$mn:00005C5B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005C60                 push    offset ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "string iterators incompatible"
.text$mn:00005C65                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00005C6A                 add     esp, 0Ch
.text$mn:00005C6D                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:00005C72                 test    eax, eax
.text$mn:00005C74                 jz      short loc_5C7A
.text$mn:00005C76                 xor     ecx, ecx
.text$mn:00005C78                 jnz     short loc_5CA0
.text$mn:00005C7A
.text$mn:00005C7A loc_5C7A:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+48j
.text$mn:00005C7A                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:00005C7F                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00005C84                 push    0
.text$mn:00005C86                 push    0FBh ; 'v'
.text$mn:00005C8B                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005C90                 push    2
.text$mn:00005C92                 call    __CrtDbgReportW
.text$mn:00005C97                 add     esp, 18h
.text$mn:00005C9A                 cmp     eax, 1
.text$mn:00005C9D                 jnz     short loc_5CA0
.text$mn:00005C9F                 int     3               ; Trap to Debugger
.text$mn:00005CA0
.text$mn:00005CA0 loc_5CA0:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+4Cj
.text$mn:00005CA0                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+71j
.text$mn:00005CA0                 push    0
.text$mn:00005CA2                 push    0FBh ; 'v'
.text$mn:00005CA7                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00005CAC                 push    offset ??_C@_1MA@BDELDFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00005CB1                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:00005CB6                 call    __invalid_parameter
.text$mn:00005CBB                 add     esp, 14h
.text$mn:00005CBE
.text$mn:00005CBE loc_5CBE:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+28j
.text$mn:00005CBE                 pop     esi
.text$mn:00005CBF                 mov     esp, ebp
.text$mn:00005CC1                 pop     ebp
.text$mn:00005CC2                 retn    4
.text$mn:00005CC2 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:00005CC2
.text$mn:00005CC2 ; ---------------------------------------------------------------------------
.text$mn:00005CC5                 align 4
.text$mn:00005CC5 _text$mn        ends
.text$mn:00005CC5
.text$mn:00005CC8 ; ===========================================================================
.text$mn:00005CC8
.text$mn:00005CC8 ; Segment type: Pure code
.text$mn:00005CC8 ; Segment permissions: Read/Execute
.text$mn:00005CC8 _text$mn        segment para public 'CODE' use32
.text$mn:00005CC8                 assume cs:_text$mn
.text$mn:00005CC8                 ;org 5CC8h
.text$mn:00005CC8 ; COMDAT (pick any)
.text$mn:00005CC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CC8
.text$mn:00005CC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CC8
.text$mn:00005CC8 ; Attributes: bp-based frame
.text$mn:00005CC8
.text$mn:00005CC8 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00005CC8                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005CC8 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00005CC8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00005CC8
.text$mn:00005CC8 var_20          = dword ptr -20h
.text$mn:00005CC8 var_1C          = dword ptr -1Ch
.text$mn:00005CC8 var_18          = dword ptr -18h
.text$mn:00005CC8 var_11          = byte ptr -11h
.text$mn:00005CC8 var_10          = dword ptr -10h
.text$mn:00005CC8 var_C           = byte ptr -0Ch
.text$mn:00005CC8 var_4           = dword ptr -4
.text$mn:00005CC8 arg_0           = dword ptr  8
.text$mn:00005CC8
.text$mn:00005CC8 ; FUNCTION CHUNK AT .text$mn:00005DEA SIZE 00000009 BYTES
.text$mn:00005CC8
.text$mn:00005CC8                 push    ebp
.text$mn:00005CC9                 mov     ebp, esp
.text$mn:00005CCB                 push    0FFFFFFFFh
.text$mn:00005CCD                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005CD2                 mov     eax, large fs:0
.text$mn:00005CD8                 push    eax
.text$mn:00005CD9                 push    ecx
.text$mn:00005CDA                 sub     esp, 10h
.text$mn:00005CDD                 push    ebx
.text$mn:00005CDE                 push    esi
.text$mn:00005CDF                 push    edi
.text$mn:00005CE0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005CE5                 xor     eax, ebp
.text$mn:00005CE7                 push    eax
.text$mn:00005CE8                 lea     eax, [ebp+var_C]
.text$mn:00005CEB                 mov     large fs:0, eax
.text$mn:00005CF1                 mov     [ebp+var_10], esp
.text$mn:00005CF4                 mov     [ebp+var_18], ecx
.text$mn:00005CF7                 mov     eax, [ebp+arg_0]
.text$mn:00005CFA                 or      eax, 0Fh
.text$mn:00005CFD                 mov     [ebp+var_1C], eax
.text$mn:00005D00                 mov     ecx, [ebp+var_18]
.text$mn:00005D03                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005D08                 cmp     eax, [ebp+var_1C]
.text$mn:00005D0B                 jnb     short loc_5D15
.text$mn:00005D0D                 mov     ecx, [ebp+arg_0]
.text$mn:00005D10                 mov     [ebp+var_1C], ecx
.text$mn:00005D13                 jmp     short loc_5D67
.text$mn:00005D15 ; ---------------------------------------------------------------------------
.text$mn:00005D15
.text$mn:00005D15 loc_5D15:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00005D15                 mov     edx, [ebp+var_18]
.text$mn:00005D18                 mov     ecx, [edx+18h]
.text$mn:00005D1B                 shr     ecx, 1
.text$mn:00005D1D                 mov     eax, [ebp+var_1C]
.text$mn:00005D20                 xor     edx, edx
.text$mn:00005D22                 mov     esi, 3
.text$mn:00005D27                 div     esi
.text$mn:00005D29                 cmp     ecx, eax
.text$mn:00005D2B                 ja      short loc_5D2F
.text$mn:00005D2D                 jmp     short loc_5D67
.text$mn:00005D2F ; ---------------------------------------------------------------------------
.text$mn:00005D2F
.text$mn:00005D2F loc_5D2F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:00005D2F                 mov     ecx, [ebp+var_18]
.text$mn:00005D32                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005D37                 mov     edx, [ebp+var_18]
.text$mn:00005D3A                 mov     ecx, [edx+18h]
.text$mn:00005D3D                 shr     ecx, 1
.text$mn:00005D3F                 sub     eax, ecx
.text$mn:00005D41                 mov     edx, [ebp+var_18]
.text$mn:00005D44                 cmp     [edx+18h], eax
.text$mn:00005D47                 ja      short loc_5D5C
.text$mn:00005D49                 mov     eax, [ebp+var_18]
.text$mn:00005D4C                 mov     ecx, [eax+18h]
.text$mn:00005D4F                 shr     ecx, 1
.text$mn:00005D51                 mov     edx, [ebp+var_18]
.text$mn:00005D54                 add     ecx, [edx+18h]
.text$mn:00005D57                 mov     [ebp+var_1C], ecx
.text$mn:00005D5A                 jmp     short loc_5D67
.text$mn:00005D5C ; ---------------------------------------------------------------------------
.text$mn:00005D5C
.text$mn:00005D5C loc_5D5C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:00005D5C                 mov     ecx, [ebp+var_18]
.text$mn:00005D5F                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00005D64                 mov     [ebp+var_1C], eax
.text$mn:00005D67
.text$mn:00005D67 loc_5D67:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:00005D67                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:00005D67                 mov     [ebp+var_4], 0
.text$mn:00005D6E                 mov     eax, [ebp+var_1C]
.text$mn:00005D71                 add     eax, 1
.text$mn:00005D74                 push    eax
.text$mn:00005D75                 lea     ecx, [ebp+var_11]
.text$mn:00005D78                 push    ecx
.text$mn:00005D79                 mov     ecx, [ebp+var_18]
.text$mn:00005D7C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005D81                 mov     ecx, eax
.text$mn:00005D83                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00005D88                 mov     [ebp+var_20], eax
.text$mn:00005D8B                 jmp     short loc_5DEA
.text$mn:00005D8B ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:00005D8B
.text$mn:00005D8D
.text$mn:00005D8D ; =============== S U B R O U T I N E =======================================
.text$mn:00005D8D
.text$mn:00005D8D
.text$mn:00005D8D __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:00005D8D                                         ; DATA XREF: .xdata$x:00009488o
.text$mn:00005D8D
.text$mn:00005D8D ; FUNCTION CHUNK AT .text$mn:00005DD4 SIZE 00000009 BYTES
.text$mn:00005D8D ; FUNCTION CHUNK AT .text$mn:00005DE4 SIZE 00000006 BYTES
.text$mn:00005D8D
.text$mn:00005D8D                 mov     [ebp-10h], esp
.text$mn:00005D90                 mov     edx, [ebp+8]
.text$mn:00005D93                 mov     [ebp-1Ch], edx
.text$mn:00005D96                 mov     byte ptr [ebp-4], 2
.text$mn:00005D9A                 mov     eax, [ebp-1Ch]
.text$mn:00005D9D                 add     eax, 1
.text$mn:00005DA0                 push    eax
.text$mn:00005DA1                 lea     ecx, [ebp-12h]
.text$mn:00005DA4                 push    ecx
.text$mn:00005DA5                 mov     ecx, [ebp-18h]
.text$mn:00005DA8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005DAD                 mov     ecx, eax
.text$mn:00005DAF                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00005DB4                 mov     [ebp-20h], eax
.text$mn:00005DB7                 jmp     short loc_5DD4
.text$mn:00005DB7 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:00005DB7
.text$mn:00005DB9
.text$mn:00005DB9 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DB9
.text$mn:00005DB9 ; Attributes: noreturn
.text$mn:00005DB9
.text$mn:00005DB9 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00005DB9                                         ; DATA XREF: .xdata$x:00009498o
.text$mn:00005DB9                 push    0               ; Size
.text$mn:00005DBB                 push    1               ; char
.text$mn:00005DBD                 mov     ecx, [ebp-18h]
.text$mn:00005DC0                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005DC5                 push    0
.text$mn:00005DC7                 push    0
.text$mn:00005DC9                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005DC9 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00005DC9
.text$mn:00005DCE ; ---------------------------------------------------------------------------
.text$mn:00005DCE                 mov     eax, offset $LN17
.text$mn:00005DD3                 retn
.text$mn:00005DD4 ; ---------------------------------------------------------------------------
.text$mn:00005DD4 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005DD4
.text$mn:00005DD4 loc_5DD4:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00005DD4                 mov     dword ptr [ebp-4], 1
.text$mn:00005DDB                 jmp     short loc_5DE4
.text$mn:00005DDB ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005DDD
.text$mn:00005DDD ; =============== S U B R O U T I N E =======================================
.text$mn:00005DDD
.text$mn:00005DDD
.text$mn:00005DDD $LN17           proc near               ; DATA XREF: .text$mn:00005DCEo
.text$mn:00005DDD                 mov     dword ptr [ebp-4], 1
.text$mn:00005DDD $LN17           endp ; sp-analysis failed
.text$mn:00005DDD
.text$mn:00005DE4 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005DE4
.text$mn:00005DE4 loc_5DE4:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00005DE4                 mov     eax, offset $LN19
.text$mn:00005DE9                 retn
.text$mn:00005DE9 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00005DEA ; ---------------------------------------------------------------------------
.text$mn:00005DEA ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005DEA
.text$mn:00005DEA loc_5DEA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:00005DEA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005DF1                 jmp     short loc_5DFA
.text$mn:00005DF1 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00005DF3
.text$mn:00005DF3 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DF3
.text$mn:00005DF3
.text$mn:00005DF3 $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_5DE4o
.text$mn:00005DF3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00005DFA
.text$mn:00005DFA loc_5DFA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:00005DFA                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00005DFE                 jbe     short loc_5E19
.text$mn:00005E00                 mov     edx, [ebp+0Ch]
.text$mn:00005E03                 push    edx             ; Size
.text$mn:00005E04                 mov     ecx, [ebp-18h]
.text$mn:00005E07                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00005E0C                 push    eax             ; Src
.text$mn:00005E0D                 mov     eax, [ebp-20h]
.text$mn:00005E10                 push    eax             ; Dst
.text$mn:00005E11                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00005E16                 add     esp, 0Ch
.text$mn:00005E19
.text$mn:00005E19 loc_5E19:                               ; CODE XREF: $LN19+Bj
.text$mn:00005E19                 push    0               ; Size
.text$mn:00005E1B                 push    1               ; char
.text$mn:00005E1D                 mov     ecx, [ebp-18h]
.text$mn:00005E20                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00005E25                 lea     ecx, [ebp-20h]
.text$mn:00005E28                 push    ecx             ; int
.text$mn:00005E29                 mov     edx, [ebp-18h]
.text$mn:00005E2C                 add     edx, 4
.text$mn:00005E2F                 push    edx             ; void *
.text$mn:00005E30                 lea     eax, [ebp-13h]
.text$mn:00005E33                 push    eax
.text$mn:00005E34                 mov     ecx, [ebp-18h]
.text$mn:00005E37                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00005E3C                 mov     ecx, eax
.text$mn:00005E3E                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:00005E43                 mov     ecx, [ebp-18h]
.text$mn:00005E46                 mov     edx, [ebp-1Ch]
.text$mn:00005E49                 mov     [ecx+18h], edx
.text$mn:00005E4C                 mov     eax, [ebp+0Ch]
.text$mn:00005E4F                 push    eax
.text$mn:00005E50                 mov     ecx, [ebp-18h]
.text$mn:00005E53                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00005E58                 mov     ecx, [ebp-0Ch]
.text$mn:00005E5B                 mov     large fs:0, ecx
.text$mn:00005E62                 pop     ecx
.text$mn:00005E63                 pop     edi
.text$mn:00005E64                 pop     esi
.text$mn:00005E65                 pop     ebx
.text$mn:00005E66                 mov     esp, ebp
.text$mn:00005E68                 pop     ebp
.text$mn:00005E69                 retn    8
.text$mn:00005E69 $LN19           endp ; sp-analysis failed
.text$mn:00005E69
.text$mn:00005E69 _text$mn        ends
.text$mn:00005E69
.text$x:00005E6C ; ===========================================================================
.text$x:00005E6C
.text$x:00005E6C ; Segment type: Pure code
.text$x:00005E6C ; Segment permissions: Read/Execute
.text$x:00005E6C _text$x         segment para public 'CODE' use32
.text$x:00005E6C                 assume cs:_text$x
.text$x:00005E6C                 ;org 5E6Ch
.text$x:00005E6C ; COMDAT (pick associative to section at 5CC8)
.text$x:00005E6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005E6C
.text$x:00005E6C ; =============== S U B R O U T I N E =======================================
.text$x:00005E6C
.text$x:00005E6C
.text$x:00005E6C __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:00005E6C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:00005E6C
.text$x:00005E6C arg_4           = dword ptr  8
.text$x:00005E6C
.text$x:00005E6C                 mov     edx, [esp+arg_4]
.text$x:00005E70                 lea     eax, [edx+0Ch]
.text$x:00005E73                 mov     ecx, [edx-24h]
.text$x:00005E76                 xor     ecx, eax
.text$x:00005E78                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E7D                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:00005E82                 jmp     ___CxxFrameHandler3
.text$x:00005E82 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:00005E82
.text$x:00005E82 ; ---------------------------------------------------------------------------
.text$x:00005E87                 align 4
.text$x:00005E87 _text$x         ends
.text$x:00005E87
.text$mn:00005E88 ; ===========================================================================
.text$mn:00005E88
.text$mn:00005E88 ; Segment type: Pure code
.text$mn:00005E88 ; Segment permissions: Read/Execute
.text$mn:00005E88 _text$mn        segment para public 'CODE' use32
.text$mn:00005E88                 assume cs:_text$mn
.text$mn:00005E88                 ;org 5E88h
.text$mn:00005E88 ; COMDAT (pick any)
.text$mn:00005E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E88
.text$mn:00005E88 ; =============== S U B R O U T I N E =======================================
.text$mn:00005E88
.text$mn:00005E88 ; Attributes: bp-based frame
.text$mn:00005E88
.text$mn:00005E88 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:00005E88                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005E88 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:00005E88                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:00005E88
.text$mn:00005E88 var_20          = dword ptr -20h
.text$mn:00005E88 var_1C          = dword ptr -1Ch
.text$mn:00005E88 var_18          = dword ptr -18h
.text$mn:00005E88 var_11          = byte ptr -11h
.text$mn:00005E88 var_10          = dword ptr -10h
.text$mn:00005E88 var_C           = byte ptr -0Ch
.text$mn:00005E88 var_4           = dword ptr -4
.text$mn:00005E88 arg_0           = dword ptr  8
.text$mn:00005E88
.text$mn:00005E88 ; FUNCTION CHUNK AT .text$mn:00005FAA SIZE 00000009 BYTES
.text$mn:00005E88
.text$mn:00005E88                 push    ebp
.text$mn:00005E89                 mov     ebp, esp
.text$mn:00005E8B                 push    0FFFFFFFFh
.text$mn:00005E8D                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005E92                 mov     eax, large fs:0
.text$mn:00005E98                 push    eax
.text$mn:00005E99                 push    ecx
.text$mn:00005E9A                 sub     esp, 10h
.text$mn:00005E9D                 push    ebx
.text$mn:00005E9E                 push    esi
.text$mn:00005E9F                 push    edi
.text$mn:00005EA0                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005EA5                 xor     eax, ebp
.text$mn:00005EA7                 push    eax
.text$mn:00005EA8                 lea     eax, [ebp+var_C]
.text$mn:00005EAB                 mov     large fs:0, eax
.text$mn:00005EB1                 mov     [ebp+var_10], esp
.text$mn:00005EB4                 mov     [ebp+var_18], ecx
.text$mn:00005EB7                 mov     eax, [ebp+arg_0]
.text$mn:00005EBA                 or      eax, 7
.text$mn:00005EBD                 mov     [ebp+var_1C], eax
.text$mn:00005EC0                 mov     ecx, [ebp+var_18]
.text$mn:00005EC3                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005EC8                 cmp     eax, [ebp+var_1C]
.text$mn:00005ECB                 jnb     short loc_5ED5
.text$mn:00005ECD                 mov     ecx, [ebp+arg_0]
.text$mn:00005ED0                 mov     [ebp+var_1C], ecx
.text$mn:00005ED3                 jmp     short loc_5F27
.text$mn:00005ED5 ; ---------------------------------------------------------------------------
.text$mn:00005ED5
.text$mn:00005ED5 loc_5ED5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:00005ED5                 mov     edx, [ebp+var_18]
.text$mn:00005ED8                 mov     ecx, [edx+18h]
.text$mn:00005EDB                 shr     ecx, 1
.text$mn:00005EDD                 mov     eax, [ebp+var_1C]
.text$mn:00005EE0                 xor     edx, edx
.text$mn:00005EE2                 mov     esi, 3
.text$mn:00005EE7                 div     esi
.text$mn:00005EE9                 cmp     ecx, eax
.text$mn:00005EEB                 ja      short loc_5EEF
.text$mn:00005EED                 jmp     short loc_5F27
.text$mn:00005EEF ; ---------------------------------------------------------------------------
.text$mn:00005EEF
.text$mn:00005EEF loc_5EEF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:00005EEF                 mov     ecx, [ebp+var_18]
.text$mn:00005EF2                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005EF7                 mov     edx, [ebp+var_18]
.text$mn:00005EFA                 mov     ecx, [edx+18h]
.text$mn:00005EFD                 shr     ecx, 1
.text$mn:00005EFF                 sub     eax, ecx
.text$mn:00005F01                 mov     edx, [ebp+var_18]
.text$mn:00005F04                 cmp     [edx+18h], eax
.text$mn:00005F07                 ja      short loc_5F1C
.text$mn:00005F09                 mov     eax, [ebp+var_18]
.text$mn:00005F0C                 mov     ecx, [eax+18h]
.text$mn:00005F0F                 shr     ecx, 1
.text$mn:00005F11                 mov     edx, [ebp+var_18]
.text$mn:00005F14                 add     ecx, [edx+18h]
.text$mn:00005F17                 mov     [ebp+var_1C], ecx
.text$mn:00005F1A                 jmp     short loc_5F27
.text$mn:00005F1C ; ---------------------------------------------------------------------------
.text$mn:00005F1C
.text$mn:00005F1C loc_5F1C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:00005F1C                 mov     ecx, [ebp+var_18]
.text$mn:00005F1F                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00005F24                 mov     [ebp+var_1C], eax
.text$mn:00005F27
.text$mn:00005F27 loc_5F27:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:00005F27                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:00005F27                 mov     [ebp+var_4], 0
.text$mn:00005F2E                 mov     eax, [ebp+var_1C]
.text$mn:00005F31                 add     eax, 1
.text$mn:00005F34                 push    eax
.text$mn:00005F35                 lea     ecx, [ebp+var_11]
.text$mn:00005F38                 push    ecx
.text$mn:00005F39                 mov     ecx, [ebp+var_18]
.text$mn:00005F3C                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005F41                 mov     ecx, eax
.text$mn:00005F43                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00005F48                 mov     [ebp+var_20], eax
.text$mn:00005F4B                 jmp     short loc_5FAA
.text$mn:00005F4B ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:00005F4B
.text$mn:00005F4D
.text$mn:00005F4D ; =============== S U B R O U T I N E =======================================
.text$mn:00005F4D
.text$mn:00005F4D
.text$mn:00005F4D __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00005F4D                                         ; DATA XREF: .xdata$x:000098E4o
.text$mn:00005F4D
.text$mn:00005F4D ; FUNCTION CHUNK AT .text$mn:00005F94 SIZE 00000009 BYTES
.text$mn:00005F4D ; FUNCTION CHUNK AT .text$mn:00005FA4 SIZE 00000006 BYTES
.text$mn:00005F4D
.text$mn:00005F4D                 mov     [ebp-10h], esp
.text$mn:00005F50                 mov     edx, [ebp+8]
.text$mn:00005F53                 mov     [ebp-1Ch], edx
.text$mn:00005F56                 mov     byte ptr [ebp-4], 2
.text$mn:00005F5A                 mov     eax, [ebp-1Ch]
.text$mn:00005F5D                 add     eax, 1
.text$mn:00005F60                 push    eax
.text$mn:00005F61                 lea     ecx, [ebp-12h]
.text$mn:00005F64                 push    ecx
.text$mn:00005F65                 mov     ecx, [ebp-18h]
.text$mn:00005F68                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005F6D                 mov     ecx, eax
.text$mn:00005F6F                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00005F74                 mov     [ebp-20h], eax
.text$mn:00005F77                 jmp     short loc_5F94
.text$mn:00005F77 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:00005F77
.text$mn:00005F79
.text$mn:00005F79 ; =============== S U B R O U T I N E =======================================
.text$mn:00005F79
.text$mn:00005F79 ; Attributes: noreturn
.text$mn:00005F79
.text$mn:00005F79 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:00005F79                                         ; DATA XREF: .xdata$x:000098F4o
.text$mn:00005F79                 push    0
.text$mn:00005F7B                 push    1
.text$mn:00005F7D                 mov     ecx, [ebp-18h]
.text$mn:00005F80                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005F85                 push    0
.text$mn:00005F87                 push    0
.text$mn:00005F89                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00005F89 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:00005F89
.text$mn:00005F8E ; ---------------------------------------------------------------------------
.text$mn:00005F8E                 mov     eax, offset $LN17_0
.text$mn:00005F93                 retn
.text$mn:00005F94 ; ---------------------------------------------------------------------------
.text$mn:00005F94 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005F94
.text$mn:00005F94 loc_5F94:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00005F94                 mov     dword ptr [ebp-4], 1
.text$mn:00005F9B                 jmp     short loc_5FA4
.text$mn:00005F9B ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005F9D
.text$mn:00005F9D ; =============== S U B R O U T I N E =======================================
.text$mn:00005F9D
.text$mn:00005F9D
.text$mn:00005F9D $LN17_0         proc near               ; DATA XREF: .text$mn:00005F8Eo
.text$mn:00005F9D                 mov     dword ptr [ebp-4], 1
.text$mn:00005F9D $LN17_0         endp ; sp-analysis failed
.text$mn:00005F9D
.text$mn:00005FA4 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005FA4
.text$mn:00005FA4 loc_5FA4:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00005FA4                 mov     eax, offset $LN19_0
.text$mn:00005FA9                 retn
.text$mn:00005FA9 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00005FAA ; ---------------------------------------------------------------------------
.text$mn:00005FAA ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005FAA
.text$mn:00005FAA loc_5FAA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:00005FAA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005FB1                 jmp     short loc_5FBA
.text$mn:00005FB1 ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00005FB3
.text$mn:00005FB3 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FB3
.text$mn:00005FB3
.text$mn:00005FB3 $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_5FA4o
.text$mn:00005FB3                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00005FBA
.text$mn:00005FBA loc_5FBA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:00005FBA                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00005FBE                 jbe     short loc_5FD9
.text$mn:00005FC0                 mov     edx, [ebp+0Ch]
.text$mn:00005FC3                 push    edx             ; int
.text$mn:00005FC4                 mov     ecx, [ebp-18h]
.text$mn:00005FC7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00005FCC                 push    eax             ; Src
.text$mn:00005FCD                 mov     eax, [ebp-20h]
.text$mn:00005FD0                 push    eax             ; Dst
.text$mn:00005FD1                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00005FD6                 add     esp, 0Ch
.text$mn:00005FD9
.text$mn:00005FD9 loc_5FD9:                               ; CODE XREF: $LN19_0+Bj
.text$mn:00005FD9                 push    0
.text$mn:00005FDB                 push    1
.text$mn:00005FDD                 mov     ecx, [ebp-18h]
.text$mn:00005FE0                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00005FE5                 lea     ecx, [ebp-20h]
.text$mn:00005FE8                 push    ecx             ; int
.text$mn:00005FE9                 mov     edx, [ebp-18h]
.text$mn:00005FEC                 add     edx, 4
.text$mn:00005FEF                 push    edx             ; void *
.text$mn:00005FF0                 lea     eax, [ebp-13h]
.text$mn:00005FF3                 push    eax
.text$mn:00005FF4                 mov     ecx, [ebp-18h]
.text$mn:00005FF7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00005FFC                 mov     ecx, eax
.text$mn:00005FFE                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00006003                 mov     ecx, [ebp-18h]
.text$mn:00006006                 mov     edx, [ebp-1Ch]
.text$mn:00006009                 mov     [ecx+18h], edx
.text$mn:0000600C                 mov     eax, [ebp+0Ch]
.text$mn:0000600F                 push    eax
.text$mn:00006010                 mov     ecx, [ebp-18h]
.text$mn:00006013                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006018                 mov     ecx, [ebp-0Ch]
.text$mn:0000601B                 mov     large fs:0, ecx
.text$mn:00006022                 pop     ecx
.text$mn:00006023                 pop     edi
.text$mn:00006024                 pop     esi
.text$mn:00006025                 pop     ebx
.text$mn:00006026                 mov     esp, ebp
.text$mn:00006028                 pop     ebp
.text$mn:00006029                 retn    8
.text$mn:00006029 $LN19_0         endp ; sp-analysis failed
.text$mn:00006029
.text$mn:00006029 _text$mn        ends
.text$mn:00006029
.text$x:0000602C ; ===========================================================================
.text$x:0000602C
.text$x:0000602C ; Segment type: Pure code
.text$x:0000602C ; Segment permissions: Read/Execute
.text$x:0000602C _text$x         segment para public 'CODE' use32
.text$x:0000602C                 assume cs:_text$x
.text$x:0000602C                 ;org 602Ch
.text$x:0000602C ; COMDAT (pick associative to section at 5E88)
.text$x:0000602C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000602C
.text$x:0000602C ; =============== S U B R O U T I N E =======================================
.text$x:0000602C
.text$x:0000602C
.text$x:0000602C __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:0000602C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:0000602C
.text$x:0000602C arg_4           = dword ptr  8
.text$x:0000602C
.text$x:0000602C                 mov     edx, [esp+arg_4]
.text$x:00006030                 lea     eax, [edx+0Ch]
.text$x:00006033                 mov     ecx, [edx-24h]
.text$x:00006036                 xor     ecx, eax
.text$x:00006038                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000603D                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:00006042                 jmp     ___CxxFrameHandler3
.text$x:00006042 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:00006042
.text$x:00006042 ; ---------------------------------------------------------------------------
.text$x:00006047                 align 4
.text$x:00006047 _text$x         ends
.text$x:00006047
.text$mn:00006048 ; ===========================================================================
.text$mn:00006048
.text$mn:00006048 ; Segment type: Pure code
.text$mn:00006048 ; Segment permissions: Read/Execute
.text$mn:00006048 _text$mn        segment para public 'CODE' use32
.text$mn:00006048                 assume cs:_text$mn
.text$mn:00006048                 ;org 6048h
.text$mn:00006048 ; COMDAT (pick any)
.text$mn:00006048                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006048
.text$mn:00006048 ; =============== S U B R O U T I N E =======================================
.text$mn:00006048
.text$mn:00006048 ; Attributes: bp-based frame
.text$mn:00006048
.text$mn:00006048 ; protected: void __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Destroy(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)
.text$mn:00006048                 public ?_Destroy@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z
.text$mn:00006048 ?_Destroy@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z proc near
.text$mn:00006048                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+CBp
.text$mn:00006048
.text$mn:00006048 var_8           = dword ptr -8
.text$mn:00006048 var_1           = byte ptr -1
.text$mn:00006048 arg_0           = dword ptr  8
.text$mn:00006048 arg_4           = dword ptr  0Ch
.text$mn:00006048
.text$mn:00006048                 push    ebp
.text$mn:00006049                 mov     ebp, esp
.text$mn:0000604B                 sub     esp, 8
.text$mn:0000604E                 mov     [ebp+var_8], ecx
.text$mn:00006051                 lea     eax, [ebp+var_1]
.text$mn:00006054                 push    eax
.text$mn:00006055                 mov     ecx, [ebp+var_8]
.text$mn:00006058                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)
.text$mn:0000605D                 lea     ecx, [ebp+var_1]
.text$mn:00006060                 push    ecx
.text$mn:00006061                 mov     edx, [ebp+arg_4]
.text$mn:00006064                 push    edx
.text$mn:00006065                 mov     eax, [ebp+arg_0]
.text$mn:00006068                 push    eax
.text$mn:00006069                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@@std@@YAXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@0AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>> &)
.text$mn:0000606E                 add     esp, 0Ch
.text$mn:00006071                 mov     esp, ebp
.text$mn:00006073                 pop     ebp
.text$mn:00006074                 retn    8
.text$mn:00006074 ?_Destroy@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z endp
.text$mn:00006074
.text$mn:00006074 ; ---------------------------------------------------------------------------
.text$mn:00006077                 align 4
.text$mn:00006077 _text$mn        ends
.text$mn:00006077
.text$mn:00006078 ; ===========================================================================
.text$mn:00006078
.text$mn:00006078 ; Segment type: Pure code
.text$mn:00006078 ; Segment permissions: Read/Execute
.text$mn:00006078 _text$mn        segment para public 'CODE' use32
.text$mn:00006078                 assume cs:_text$mn
.text$mn:00006078                 ;org 6078h
.text$mn:00006078 ; COMDAT (pick any)
.text$mn:00006078                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006078
.text$mn:00006078 ; =============== S U B R O U T I N E =======================================
.text$mn:00006078
.text$mn:00006078 ; Attributes: bp-based frame
.text$mn:00006078
.text$mn:00006078 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Destroy(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)
.text$mn:00006078                 public ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00006078 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:00006078                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+CBp
.text$mn:00006078                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+2Bp ...
.text$mn:00006078
.text$mn:00006078 var_8           = dword ptr -8
.text$mn:00006078 var_1           = byte ptr -1
.text$mn:00006078 arg_0           = dword ptr  8
.text$mn:00006078 arg_4           = dword ptr  0Ch
.text$mn:00006078
.text$mn:00006078                 push    ebp
.text$mn:00006079                 mov     ebp, esp
.text$mn:0000607B                 sub     esp, 8
.text$mn:0000607E                 mov     [ebp+var_8], ecx
.text$mn:00006081                 lea     eax, [ebp+var_1]
.text$mn:00006084                 push    eax
.text$mn:00006085                 mov     ecx, [ebp+var_8]
.text$mn:00006088                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:0000608D                 lea     ecx, [ebp+var_1]
.text$mn:00006090                 push    ecx
.text$mn:00006091                 mov     edx, [ebp+arg_4]
.text$mn:00006094                 push    edx
.text$mn:00006095                 mov     eax, [ebp+arg_0]
.text$mn:00006098                 push    eax
.text$mn:00006099                 call    ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> &)
.text$mn:0000609E                 add     esp, 0Ch
.text$mn:000060A1                 mov     esp, ebp
.text$mn:000060A3                 pop     ebp
.text$mn:000060A4                 retn    8
.text$mn:000060A4 ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:000060A4
.text$mn:000060A4 ; ---------------------------------------------------------------------------
.text$mn:000060A7                 align 4
.text$mn:000060A7 _text$mn        ends
.text$mn:000060A7
.text$mn:000060A8 ; ===========================================================================
.text$mn:000060A8
.text$mn:000060A8 ; Segment type: Pure code
.text$mn:000060A8 ; Segment permissions: Read/Execute
.text$mn:000060A8 _text$mn        segment para public 'CODE' use32
.text$mn:000060A8                 assume cs:_text$mn
.text$mn:000060A8                 ;org 60A8h
.text$mn:000060A8 ; COMDAT (pick any)
.text$mn:000060A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060A8
.text$mn:000060A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000060A8
.text$mn:000060A8 ; Attributes: bp-based frame
.text$mn:000060A8
.text$mn:000060A8 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:000060A8                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:000060A8 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:000060A8                                         ; CODE XREF: $LN19+60p
.text$mn:000060A8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:000060A8
.text$mn:000060A8 var_8           = dword ptr -8
.text$mn:000060A8 var_1           = byte ptr -1
.text$mn:000060A8 arg_0           = dword ptr  8
.text$mn:000060A8
.text$mn:000060A8                 push    ebp
.text$mn:000060A9                 mov     ebp, esp
.text$mn:000060AB                 sub     esp, 8
.text$mn:000060AE                 mov     [ebp+var_8], ecx
.text$mn:000060B1                 mov     [ebp+var_1], 0
.text$mn:000060B5                 mov     eax, [ebp+var_8]
.text$mn:000060B8                 mov     ecx, [ebp+arg_0]
.text$mn:000060BB                 mov     [eax+14h], ecx
.text$mn:000060BE                 lea     edx, [ebp+var_1]
.text$mn:000060C1                 push    edx
.text$mn:000060C2                 mov     ecx, [ebp+var_8]
.text$mn:000060C5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000060CA                 add     eax, [ebp+arg_0]
.text$mn:000060CD                 push    eax
.text$mn:000060CE                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:000060D3                 add     esp, 8
.text$mn:000060D6                 mov     esp, ebp
.text$mn:000060D8                 pop     ebp
.text$mn:000060D9                 retn    4
.text$mn:000060D9 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:000060D9
.text$mn:000060D9 _text$mn        ends
.text$mn:000060D9
.text$mn:000060DC ; ===========================================================================
.text$mn:000060DC
.text$mn:000060DC ; Segment type: Pure code
.text$mn:000060DC ; Segment permissions: Read/Execute
.text$mn:000060DC _text$mn        segment para public 'CODE' use32
.text$mn:000060DC                 assume cs:_text$mn
.text$mn:000060DC                 ;org 60DCh
.text$mn:000060DC ; COMDAT (pick any)
.text$mn:000060DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060DC
.text$mn:000060DC ; =============== S U B R O U T I N E =======================================
.text$mn:000060DC
.text$mn:000060DC ; Attributes: bp-based frame
.text$mn:000060DC
.text$mn:000060DC ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:000060DC                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:000060DC ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:000060DC                                         ; CODE XREF: $LN19_0+60p
.text$mn:000060DC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:000060DC
.text$mn:000060DC var_8           = dword ptr -8
.text$mn:000060DC var_2           = word ptr -2
.text$mn:000060DC arg_0           = dword ptr  8
.text$mn:000060DC
.text$mn:000060DC                 push    ebp
.text$mn:000060DD                 mov     ebp, esp
.text$mn:000060DF                 sub     esp, 8
.text$mn:000060E2                 mov     [ebp+var_8], ecx
.text$mn:000060E5                 xor     eax, eax
.text$mn:000060E7                 mov     [ebp+var_2], ax
.text$mn:000060EB                 mov     ecx, [ebp+var_8]
.text$mn:000060EE                 mov     edx, [ebp+arg_0]
.text$mn:000060F1                 mov     [ecx+14h], edx
.text$mn:000060F4                 lea     eax, [ebp+var_2]
.text$mn:000060F7                 push    eax
.text$mn:000060F8                 mov     ecx, [ebp+var_8]
.text$mn:000060FB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006100                 mov     ecx, [ebp+arg_0]
.text$mn:00006103                 lea     edx, [eax+ecx*2]
.text$mn:00006106                 push    edx
.text$mn:00006107                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:0000610C                 add     esp, 8
.text$mn:0000610F                 mov     esp, ebp
.text$mn:00006111                 pop     ebp
.text$mn:00006112                 retn    4
.text$mn:00006112 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:00006112
.text$mn:00006112 ; ---------------------------------------------------------------------------
.text$mn:00006115                 align 4
.text$mn:00006115 _text$mn        ends
.text$mn:00006115
.text$mn:00006118 ; ===========================================================================
.text$mn:00006118
.text$mn:00006118 ; Segment type: Pure code
.text$mn:00006118 ; Segment permissions: Read/Execute
.text$mn:00006118 _text$mn        segment para public 'CODE' use32
.text$mn:00006118                 assume cs:_text$mn
.text$mn:00006118                 ;org 6118h
.text$mn:00006118 ; COMDAT (pick any)
.text$mn:00006118                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006118
.text$mn:00006118 ; =============== S U B R O U T I N E =======================================
.text$mn:00006118
.text$mn:00006118 ; Attributes: bp-based frame
.text$mn:00006118
.text$mn:00006118 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00006118                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00006118 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00006118                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00006118
.text$mn:00006118 var_8           = dword ptr -8
.text$mn:00006118 var_1           = byte ptr -1
.text$mn:00006118
.text$mn:00006118                 push    ebp
.text$mn:00006119                 mov     ebp, esp
.text$mn:0000611B                 sub     esp, 8
.text$mn:0000611E                 mov     [ebp+var_8], ecx
.text$mn:00006121                 lea     ecx, [ebp+var_1]
.text$mn:00006124                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00006129                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000612C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006131                 mov     eax, [ebp+var_8]
.text$mn:00006134                 mov     ecx, [eax]
.text$mn:00006136                 push    ecx
.text$mn:00006137                 lea     ecx, [ebp+var_1]
.text$mn:0000613A                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:0000613F                 push    1               ; int
.text$mn:00006141                 mov     edx, [ebp+var_8]
.text$mn:00006144                 mov     eax, [edx]
.text$mn:00006146                 push    eax             ; void *
.text$mn:00006147                 lea     ecx, [ebp+var_1]
.text$mn:0000614A                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:0000614F                 mov     ecx, [ebp+var_8]
.text$mn:00006152                 mov     dword ptr [ecx], 0
.text$mn:00006158                 mov     esp, ebp
.text$mn:0000615A                 pop     ebp
.text$mn:0000615B                 retn
.text$mn:0000615B ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000615B
.text$mn:0000615B _text$mn        ends
.text$mn:0000615B
.text$mn:0000615C ; ===========================================================================
.text$mn:0000615C
.text$mn:0000615C ; Segment type: Pure code
.text$mn:0000615C ; Segment permissions: Read/Execute
.text$mn:0000615C _text$mn        segment para public 'CODE' use32
.text$mn:0000615C                 assume cs:_text$mn
.text$mn:0000615C                 ;org 615Ch
.text$mn:0000615C ; COMDAT (pick any)
.text$mn:0000615C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000615C
.text$mn:0000615C ; =============== S U B R O U T I N E =======================================
.text$mn:0000615C
.text$mn:0000615C ; Attributes: bp-based frame
.text$mn:0000615C
.text$mn:0000615C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:0000615C                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:0000615C ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000615C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:0000615C
.text$mn:0000615C var_8           = dword ptr -8
.text$mn:0000615C var_1           = byte ptr -1
.text$mn:0000615C
.text$mn:0000615C                 push    ebp
.text$mn:0000615D                 mov     ebp, esp
.text$mn:0000615F                 sub     esp, 8
.text$mn:00006162                 mov     [ebp+var_8], ecx
.text$mn:00006165                 lea     ecx, [ebp+var_1]
.text$mn:00006168                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000616D                 mov     ecx, [ebp+var_8] ; this
.text$mn:00006170                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006175                 mov     eax, [ebp+var_8]
.text$mn:00006178                 mov     ecx, [eax]
.text$mn:0000617A                 push    ecx
.text$mn:0000617B                 lea     ecx, [ebp+var_1]
.text$mn:0000617E                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00006183                 push    1               ; int
.text$mn:00006185                 mov     edx, [ebp+var_8]
.text$mn:00006188                 mov     eax, [edx]
.text$mn:0000618A                 push    eax             ; void *
.text$mn:0000618B                 lea     ecx, [ebp+var_1]
.text$mn:0000618E                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00006193                 mov     ecx, [ebp+var_8]
.text$mn:00006196                 mov     dword ptr [ecx], 0
.text$mn:0000619C                 mov     esp, ebp
.text$mn:0000619E                 pop     ebp
.text$mn:0000619F                 retn
.text$mn:0000619F ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:0000619F
.text$mn:0000619F _text$mn        ends
.text$mn:0000619F
.text$mn:000061A0 ; ===========================================================================
.text$mn:000061A0
.text$mn:000061A0 ; Segment type: Pure code
.text$mn:000061A0 ; Segment permissions: Read/Execute
.text$mn:000061A0 _text$mn        segment para public 'CODE' use32
.text$mn:000061A0                 assume cs:_text$mn
.text$mn:000061A0                 ;org 61A0h
.text$mn:000061A0 ; COMDAT (pick any)
.text$mn:000061A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061A0
.text$mn:000061A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000061A0
.text$mn:000061A0 ; Attributes: bp-based frame
.text$mn:000061A0
.text$mn:000061A0 ; public: void __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Free_proxy(void)
.text$mn:000061A0                 public ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ
.text$mn:000061A0 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ proc near
.text$mn:000061A0                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::~_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)+30p
.text$mn:000061A0
.text$mn:000061A0 var_8           = dword ptr -8
.text$mn:000061A0 var_1           = byte ptr -1
.text$mn:000061A0
.text$mn:000061A0                 push    ebp
.text$mn:000061A1                 mov     ebp, esp
.text$mn:000061A3                 sub     esp, 8
.text$mn:000061A6                 mov     [ebp+var_8], ecx
.text$mn:000061A9                 lea     ecx, [ebp+var_1]
.text$mn:000061AC                 call    ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::_Wrap_alloc<std::allocator<std::_Container_proxy>>(void)
.text$mn:000061B1                 mov     ecx, [ebp+var_8] ; this
.text$mn:000061B4                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:000061B9                 mov     eax, [ebp+var_8]
.text$mn:000061BC                 mov     ecx, [eax]
.text$mn:000061BE                 push    ecx
.text$mn:000061BF                 lea     ecx, [ebp+var_1]
.text$mn:000061C2                 call    ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:000061C7                 push    1               ; int
.text$mn:000061C9                 mov     edx, [ebp+var_8]
.text$mn:000061CC                 mov     eax, [edx]
.text$mn:000061CE                 push    eax             ; void *
.text$mn:000061CF                 lea     ecx, [ebp+var_1]
.text$mn:000061D2                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(std::_Container_proxy *,uint)
.text$mn:000061D7                 mov     ecx, [ebp+var_8]
.text$mn:000061DA                 mov     dword ptr [ecx], 0
.text$mn:000061E0                 mov     esp, ebp
.text$mn:000061E2                 pop     ebp
.text$mn:000061E3                 retn
.text$mn:000061E3 ?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ endp
.text$mn:000061E3
.text$mn:000061E3 _text$mn        ends
.text$mn:000061E3
.text$mn:000061E4 ; ===========================================================================
.text$mn:000061E4
.text$mn:000061E4 ; Segment type: Pure code
.text$mn:000061E4 ; Segment permissions: Read/Execute
.text$mn:000061E4 _text$mn        segment para public 'CODE' use32
.text$mn:000061E4                 assume cs:_text$mn
.text$mn:000061E4                 ;org 61E4h
.text$mn:000061E4 ; COMDAT (pick any)
.text$mn:000061E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061E4
.text$mn:000061E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000061E4
.text$mn:000061E4 ; Attributes: bp-based frame
.text$mn:000061E4
.text$mn:000061E4 ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:000061E4                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:000061E4 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:000061E4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+4Bp
.text$mn:000061E4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+60p ...
.text$mn:000061E4
.text$mn:000061E4 var_4           = dword ptr -4
.text$mn:000061E4 arg_0           = dword ptr  8
.text$mn:000061E4
.text$mn:000061E4                 push    ebp
.text$mn:000061E5                 mov     ebp, esp
.text$mn:000061E7                 push    ecx
.text$mn:000061E8                 mov     [ebp+var_4], ecx
.text$mn:000061EB                 mov     ecx, [ebp+arg_0]
.text$mn:000061EE                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:000061F3                 mov     eax, [ebp+arg_0]
.text$mn:000061F6                 mov     esp, ebp
.text$mn:000061F8                 pop     ebp
.text$mn:000061F9                 retn    4
.text$mn:000061F9 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:000061F9
.text$mn:000061F9 _text$mn        ends
.text$mn:000061F9
.text$mn:000061FC ; ===========================================================================
.text$mn:000061FC
.text$mn:000061FC ; Segment type: Pure code
.text$mn:000061FC ; Segment permissions: Read/Execute
.text$mn:000061FC _text$mn        segment para public 'CODE' use32
.text$mn:000061FC                 assume cs:_text$mn
.text$mn:000061FC                 ;org 61FCh
.text$mn:000061FC ; COMDAT (pick any)
.text$mn:000061FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061FC
.text$mn:000061FC ; =============== S U B R O U T I N E =======================================
.text$mn:000061FC
.text$mn:000061FC ; Attributes: bp-based frame
.text$mn:000061FC
.text$mn:000061FC ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:000061FC                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:000061FC ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:000061FC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Fp
.text$mn:000061FC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p ...
.text$mn:000061FC
.text$mn:000061FC var_4           = dword ptr -4
.text$mn:000061FC arg_0           = dword ptr  8
.text$mn:000061FC
.text$mn:000061FC                 push    ebp
.text$mn:000061FD                 mov     ebp, esp
.text$mn:000061FF                 push    ecx
.text$mn:00006200                 mov     [ebp+var_4], ecx
.text$mn:00006203                 mov     ecx, [ebp+arg_0]
.text$mn:00006206                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:0000620B                 mov     eax, [ebp+arg_0]
.text$mn:0000620E                 mov     esp, ebp
.text$mn:00006210                 pop     ebp
.text$mn:00006211                 retn    4
.text$mn:00006211 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:00006211
.text$mn:00006211 _text$mn        ends
.text$mn:00006211
.text$mn:00006214 ; ===========================================================================
.text$mn:00006214
.text$mn:00006214 ; Segment type: Pure code
.text$mn:00006214 ; Segment permissions: Read/Execute
.text$mn:00006214 _text$mn        segment para public 'CODE' use32
.text$mn:00006214                 assume cs:_text$mn
.text$mn:00006214                 ;org 6214h
.text$mn:00006214 ; COMDAT (pick any)
.text$mn:00006214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006214
.text$mn:00006214 ; =============== S U B R O U T I N E =======================================
.text$mn:00006214
.text$mn:00006214 ; Attributes: bp-based frame
.text$mn:00006214
.text$mn:00006214 ; public: struct std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>>::_Getal(void)const
.text$mn:00006214                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ
.text$mn:00006214 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ proc near
.text$mn:00006214                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Umove<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wc
.text$mn:00006214                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Destroy(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+10p ...
.text$mn:00006214
.text$mn:00006214 var_4           = dword ptr -4
.text$mn:00006214 arg_0           = dword ptr  8
.text$mn:00006214
.text$mn:00006214                 push    ebp
.text$mn:00006215                 mov     ebp, esp
.text$mn:00006217                 push    ecx
.text$mn:00006218                 mov     [ebp+var_4], ecx
.text$mn:0000621B                 mov     ecx, [ebp+arg_0]
.text$mn:0000621E                 call    ??0?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>(void)
.text$mn:00006223                 mov     eax, [ebp+arg_0]
.text$mn:00006226                 mov     esp, ebp
.text$mn:00006228                 pop     ebp
.text$mn:00006229                 retn    4
.text$mn:00006229 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ endp
.text$mn:00006229
.text$mn:00006229 _text$mn        ends
.text$mn:00006229
.text$mn:0000622C ; ===========================================================================
.text$mn:0000622C
.text$mn:0000622C ; Segment type: Pure code
.text$mn:0000622C ; Segment permissions: Read/Execute
.text$mn:0000622C _text$mn        segment para public 'CODE' use32
.text$mn:0000622C                 assume cs:_text$mn
.text$mn:0000622C                 ;org 622Ch
.text$mn:0000622C ; COMDAT (pick any)
.text$mn:0000622C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000622C
.text$mn:0000622C ; =============== S U B R O U T I N E =======================================
.text$mn:0000622C
.text$mn:0000622C ; Attributes: bp-based frame
.text$mn:0000622C
.text$mn:0000622C ; public: struct std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> __thiscall std::_Vector_alloc<0, struct std::_Vec_base_types<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Getal(void)const
.text$mn:0000622C                 public ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ
.text$mn:0000622C ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ proc near
.text$mn:0000622C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p
.text$mn:0000622C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+10p ...
.text$mn:0000622C
.text$mn:0000622C var_4           = dword ptr -4
.text$mn:0000622C arg_0           = dword ptr  8
.text$mn:0000622C
.text$mn:0000622C                 push    ebp
.text$mn:0000622D                 mov     ebp, esp
.text$mn:0000622F                 push    ecx
.text$mn:00006230                 mov     [ebp+var_4], ecx
.text$mn:00006233                 mov     ecx, [ebp+arg_0]
.text$mn:00006236                 call    ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)
.text$mn:0000623B                 mov     eax, [ebp+arg_0]
.text$mn:0000623E                 mov     esp, ebp
.text$mn:00006240                 pop     ebp
.text$mn:00006241                 retn    4
.text$mn:00006241 ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ endp
.text$mn:00006241
.text$mn:00006241 _text$mn        ends
.text$mn:00006241
.text$mn:00006244 ; ===========================================================================
.text$mn:00006244
.text$mn:00006244 ; Segment type: Pure code
.text$mn:00006244 ; Segment permissions: Read/Execute
.text$mn:00006244 _text$mn        segment para public 'CODE' use32
.text$mn:00006244                 assume cs:_text$mn
.text$mn:00006244                 ;org 6244h
.text$mn:00006244 ; COMDAT (pick any)
.text$mn:00006244                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006244
.text$mn:00006244 ; =============== S U B R O U T I N E =======================================
.text$mn:00006244
.text$mn:00006244 ; Attributes: bp-based frame
.text$mn:00006244
.text$mn:00006244 ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:00006244                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:00006244 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:00006244                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+Bp
.text$mn:00006244                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+20p ...
.text$mn:00006244
.text$mn:00006244 var_8           = dword ptr -8
.text$mn:00006244 var_4           = dword ptr -4
.text$mn:00006244
.text$mn:00006244                 push    ebp
.text$mn:00006245                 mov     ebp, esp
.text$mn:00006247                 sub     esp, 8
.text$mn:0000624A                 mov     [ebp+var_4], ecx
.text$mn:0000624D                 mov     eax, [ebp+var_4]
.text$mn:00006250                 cmp     dword ptr [eax], 0
.text$mn:00006253                 jnz     short loc_625E
.text$mn:00006255                 mov     [ebp+var_8], 0
.text$mn:0000625C                 jmp     short loc_6268
.text$mn:0000625E ; ---------------------------------------------------------------------------
.text$mn:0000625E
.text$mn:0000625E loc_625E:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:0000625E                 mov     ecx, [ebp+var_4]
.text$mn:00006261                 mov     edx, [ecx]
.text$mn:00006263                 mov     eax, [edx]
.text$mn:00006265                 mov     [ebp+var_8], eax
.text$mn:00006268
.text$mn:00006268 loc_6268:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:00006268                 mov     eax, [ebp+var_8]
.text$mn:0000626B                 mov     esp, ebp
.text$mn:0000626D                 pop     ebp
.text$mn:0000626E                 retn
.text$mn:0000626E ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:0000626E
.text$mn:0000626E ; ---------------------------------------------------------------------------
.text$mn:0000626F                 align 10h
.text$mn:0000626F _text$mn        ends
.text$mn:0000626F
.text$mn:00006270 ; ===========================================================================
.text$mn:00006270
.text$mn:00006270 ; Segment type: Pure code
.text$mn:00006270 ; Segment permissions: Read/Execute
.text$mn:00006270 _text$mn        segment para public 'CODE' use32
.text$mn:00006270                 assume cs:_text$mn
.text$mn:00006270                 ;org 6270h
.text$mn:00006270 ; COMDAT (pick any)
.text$mn:00006270                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006270
.text$mn:00006270 ; =============== S U B R O U T I N E =======================================
.text$mn:00006270
.text$mn:00006270 ; Attributes: bp-based frame
.text$mn:00006270
.text$mn:00006270 ; struct std::_Iterator_base12 **__thiscall std::_Container_base12::_Getpfirst(std::_Container_base12 *__hidden this)
.text$mn:00006270                 public ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
.text$mn:00006270 ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
.text$mn:00006270                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+3Cp
.text$mn:00006270                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+3Cp
.text$mn:00006270
.text$mn:00006270 var_8           = dword ptr -8
.text$mn:00006270 var_4           = dword ptr -4
.text$mn:00006270
.text$mn:00006270                 push    ebp
.text$mn:00006271                 mov     ebp, esp
.text$mn:00006273                 sub     esp, 8
.text$mn:00006276                 mov     [ebp+var_4], ecx
.text$mn:00006279                 mov     eax, [ebp+var_4]
.text$mn:0000627C                 cmp     dword ptr [eax], 0
.text$mn:0000627F                 jnz     short loc_628A
.text$mn:00006281                 mov     [ebp+var_8], 0
.text$mn:00006288                 jmp     short loc_6295
.text$mn:0000628A ; ---------------------------------------------------------------------------
.text$mn:0000628A
.text$mn:0000628A loc_628A:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+Fj
.text$mn:0000628A                 mov     ecx, [ebp+var_4]
.text$mn:0000628D                 mov     edx, [ecx]
.text$mn:0000628F                 add     edx, 4
.text$mn:00006292                 mov     [ebp+var_8], edx
.text$mn:00006295
.text$mn:00006295 loc_6295:                               ; CODE XREF: std::_Container_base12::_Getpfirst(void)+18j
.text$mn:00006295                 mov     eax, [ebp+var_8]
.text$mn:00006298                 mov     esp, ebp
.text$mn:0000629A                 pop     ebp
.text$mn:0000629B                 retn
.text$mn:0000629B ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ endp
.text$mn:0000629B
.text$mn:0000629B _text$mn        ends
.text$mn:0000629B
.text$mn:0000629C ; ===========================================================================
.text$mn:0000629C
.text$mn:0000629C ; Segment type: Pure code
.text$mn:0000629C ; Segment permissions: Read/Execute
.text$mn:0000629C _text$mn        segment para public 'CODE' use32
.text$mn:0000629C                 assume cs:_text$mn
.text$mn:0000629C                 ;org 629Ch
.text$mn:0000629C ; COMDAT (pick any)
.text$mn:0000629C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000629C
.text$mn:0000629C ; =============== S U B R O U T I N E =======================================
.text$mn:0000629C
.text$mn:0000629C ; Attributes: bp-based frame
.text$mn:0000629C
.text$mn:0000629C ; struct std::_Iterator_base12 **__thiscall std::_Iterator_base12::_Getpnext(std::_Iterator_base12 *__hidden this)
.text$mn:0000629C                 public ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
.text$mn:0000629C ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
.text$mn:0000629C                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+71p
.text$mn:0000629C                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+8Ap ...
.text$mn:0000629C
.text$mn:0000629C var_4           = dword ptr -4
.text$mn:0000629C
.text$mn:0000629C                 push    ebp
.text$mn:0000629D                 mov     ebp, esp
.text$mn:0000629F                 push    ecx
.text$mn:000062A0                 mov     [ebp+var_4], ecx
.text$mn:000062A3                 mov     eax, [ebp+var_4]
.text$mn:000062A6                 add     eax, 4
.text$mn:000062A9                 mov     esp, ebp
.text$mn:000062AB                 pop     ebp
.text$mn:000062AC                 retn
.text$mn:000062AC ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ endp
.text$mn:000062AC
.text$mn:000062AC ; ---------------------------------------------------------------------------
.text$mn:000062AD                 align 10h
.text$mn:000062AD _text$mn        ends
.text$mn:000062AD
.text$mn:000062B0 ; ===========================================================================
.text$mn:000062B0
.text$mn:000062B0 ; Segment type: Pure code
.text$mn:000062B0 ; Segment permissions: Read/Execute
.text$mn:000062B0 _text$mn        segment para public 'CODE' use32
.text$mn:000062B0                 assume cs:_text$mn
.text$mn:000062B0                 ;org 62B0h
.text$mn:000062B0 ; COMDAT (pick any)
.text$mn:000062B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062B0
.text$mn:000062B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000062B0
.text$mn:000062B0 ; Attributes: bp-based frame
.text$mn:000062B0
.text$mn:000062B0 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:000062B0                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:000062B0 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:000062B0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:000062B0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp ...
.text$mn:000062B0
.text$mn:000062B0 var_C           = dword ptr -0Ch
.text$mn:000062B0 Size            = dword ptr -8
.text$mn:000062B0 var_4           = dword ptr -4
.text$mn:000062B0 arg_0           = dword ptr  8
.text$mn:000062B0 arg_4           = byte ptr  0Ch
.text$mn:000062B0
.text$mn:000062B0                 push    ebp
.text$mn:000062B1                 mov     ebp, esp
.text$mn:000062B3                 sub     esp, 0Ch
.text$mn:000062B6                 mov     [ebp+var_4], ecx
.text$mn:000062B9                 mov     ecx, [ebp+var_4]
.text$mn:000062BC                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:000062C1                 cmp     eax, [ebp+arg_0]
.text$mn:000062C4                 jnb     short loc_62CE
.text$mn:000062C6                 mov     ecx, [ebp+var_4]
.text$mn:000062C9                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:000062CE
.text$mn:000062CE loc_62CE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:000062CE                 mov     eax, [ebp+var_4]
.text$mn:000062D1                 mov     ecx, [eax+18h]
.text$mn:000062D4                 cmp     ecx, [ebp+arg_0]
.text$mn:000062D7                 jnb     short loc_62EE
.text$mn:000062D9                 mov     edx, [ebp+var_4]
.text$mn:000062DC                 mov     eax, [edx+14h]
.text$mn:000062DF                 push    eax
.text$mn:000062E0                 mov     ecx, [ebp+arg_0]
.text$mn:000062E3                 push    ecx
.text$mn:000062E4                 mov     ecx, [ebp+var_4]
.text$mn:000062E7                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:000062EC                 jmp     short loc_6338
.text$mn:000062EE ; ---------------------------------------------------------------------------
.text$mn:000062EE
.text$mn:000062EE loc_62EE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:000062EE                 movzx   edx, [ebp+arg_4]
.text$mn:000062F2                 test    edx, edx
.text$mn:000062F4                 jz      short loc_6328
.text$mn:000062F6                 cmp     [ebp+arg_0], 10h
.text$mn:000062FA                 jnb     short loc_6328
.text$mn:000062FC                 mov     eax, [ebp+var_4]
.text$mn:000062FF                 mov     ecx, [ebp+arg_0]
.text$mn:00006302                 cmp     ecx, [eax+14h]
.text$mn:00006305                 jnb     short loc_630F
.text$mn:00006307                 mov     edx, [ebp+arg_0]
.text$mn:0000630A                 mov     [ebp+Size], edx
.text$mn:0000630D                 jmp     short loc_6318
.text$mn:0000630F ; ---------------------------------------------------------------------------
.text$mn:0000630F
.text$mn:0000630F loc_630F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:0000630F                 mov     eax, [ebp+var_4]
.text$mn:00006312                 mov     ecx, [eax+14h]
.text$mn:00006315                 mov     [ebp+Size], ecx
.text$mn:00006318
.text$mn:00006318 loc_6318:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00006318                 mov     edx, [ebp+Size]
.text$mn:0000631B                 push    edx             ; Size
.text$mn:0000631C                 push    1               ; char
.text$mn:0000631E                 mov     ecx, [ebp+var_4]
.text$mn:00006321                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00006326                 jmp     short loc_6338
.text$mn:00006328 ; ---------------------------------------------------------------------------
.text$mn:00006328
.text$mn:00006328 loc_6328:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00006328                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00006328                 cmp     [ebp+arg_0], 0
.text$mn:0000632C                 jnz     short loc_6338
.text$mn:0000632E                 push    0
.text$mn:00006330                 mov     ecx, [ebp+var_4]
.text$mn:00006333                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00006338
.text$mn:00006338 loc_6338:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00006338                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00006338                 cmp     [ebp+arg_0], 0
.text$mn:0000633C                 jbe     short loc_6347
.text$mn:0000633E                 mov     [ebp+var_C], 1
.text$mn:00006345                 jmp     short loc_634E
.text$mn:00006347 ; ---------------------------------------------------------------------------
.text$mn:00006347
.text$mn:00006347 loc_6347:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00006347                 mov     [ebp+var_C], 0
.text$mn:0000634E
.text$mn:0000634E loc_634E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:0000634E                 mov     al, byte ptr [ebp+var_C]
.text$mn:00006351                 mov     esp, ebp
.text$mn:00006353                 pop     ebp
.text$mn:00006354                 retn    8
.text$mn:00006354 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00006354
.text$mn:00006354 ; ---------------------------------------------------------------------------
.text$mn:00006357                 align 4
.text$mn:00006357 _text$mn        ends
.text$mn:00006357
.text$mn:00006358 ; ===========================================================================
.text$mn:00006358
.text$mn:00006358 ; Segment type: Pure code
.text$mn:00006358 ; Segment permissions: Read/Execute
.text$mn:00006358 _text$mn        segment para public 'CODE' use32
.text$mn:00006358                 assume cs:_text$mn
.text$mn:00006358                 ;org 6358h
.text$mn:00006358 ; COMDAT (pick any)
.text$mn:00006358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006358
.text$mn:00006358 ; =============== S U B R O U T I N E =======================================
.text$mn:00006358
.text$mn:00006358 ; Attributes: bp-based frame
.text$mn:00006358
.text$mn:00006358 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00006358                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00006358 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00006358                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+3Ap
.text$mn:00006358                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Ap ...
.text$mn:00006358
.text$mn:00006358 var_C           = dword ptr -0Ch
.text$mn:00006358 var_8           = dword ptr -8
.text$mn:00006358 var_4           = dword ptr -4
.text$mn:00006358 arg_0           = dword ptr  8
.text$mn:00006358 arg_4           = byte ptr  0Ch
.text$mn:00006358
.text$mn:00006358                 push    ebp
.text$mn:00006359                 mov     ebp, esp
.text$mn:0000635B                 sub     esp, 0Ch
.text$mn:0000635E                 mov     [ebp+var_4], ecx
.text$mn:00006361                 mov     ecx, [ebp+var_4]
.text$mn:00006364                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00006369                 cmp     eax, [ebp+arg_0]
.text$mn:0000636C                 jnb     short loc_6376
.text$mn:0000636E                 mov     ecx, [ebp+var_4]
.text$mn:00006371                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00006376
.text$mn:00006376 loc_6376:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00006376                 mov     eax, [ebp+var_4]
.text$mn:00006379                 mov     ecx, [eax+18h]
.text$mn:0000637C                 cmp     ecx, [ebp+arg_0]
.text$mn:0000637F                 jnb     short loc_6396
.text$mn:00006381                 mov     edx, [ebp+var_4]
.text$mn:00006384                 mov     eax, [edx+14h]
.text$mn:00006387                 push    eax
.text$mn:00006388                 mov     ecx, [ebp+arg_0]
.text$mn:0000638B                 push    ecx
.text$mn:0000638C                 mov     ecx, [ebp+var_4]
.text$mn:0000638F                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00006394                 jmp     short loc_63E0
.text$mn:00006396 ; ---------------------------------------------------------------------------
.text$mn:00006396
.text$mn:00006396 loc_6396:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00006396                 movzx   edx, [ebp+arg_4]
.text$mn:0000639A                 test    edx, edx
.text$mn:0000639C                 jz      short loc_63D0
.text$mn:0000639E                 cmp     [ebp+arg_0], 8
.text$mn:000063A2                 jnb     short loc_63D0
.text$mn:000063A4                 mov     eax, [ebp+var_4]
.text$mn:000063A7                 mov     ecx, [ebp+arg_0]
.text$mn:000063AA                 cmp     ecx, [eax+14h]
.text$mn:000063AD                 jnb     short loc_63B7
.text$mn:000063AF                 mov     edx, [ebp+arg_0]
.text$mn:000063B2                 mov     [ebp+var_8], edx
.text$mn:000063B5                 jmp     short loc_63C0
.text$mn:000063B7 ; ---------------------------------------------------------------------------
.text$mn:000063B7
.text$mn:000063B7 loc_63B7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:000063B7                 mov     eax, [ebp+var_4]
.text$mn:000063BA                 mov     ecx, [eax+14h]
.text$mn:000063BD                 mov     [ebp+var_8], ecx
.text$mn:000063C0
.text$mn:000063C0 loc_63C0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:000063C0                 mov     edx, [ebp+var_8]
.text$mn:000063C3                 push    edx
.text$mn:000063C4                 push    1
.text$mn:000063C6                 mov     ecx, [ebp+var_4]
.text$mn:000063C9                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000063CE                 jmp     short loc_63E0
.text$mn:000063D0 ; ---------------------------------------------------------------------------
.text$mn:000063D0
.text$mn:000063D0 loc_63D0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:000063D0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:000063D0                 cmp     [ebp+arg_0], 0
.text$mn:000063D4                 jnz     short loc_63E0
.text$mn:000063D6                 push    0
.text$mn:000063D8                 mov     ecx, [ebp+var_4]
.text$mn:000063DB                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000063E0
.text$mn:000063E0 loc_63E0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:000063E0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:000063E0                 cmp     [ebp+arg_0], 0
.text$mn:000063E4                 jbe     short loc_63EF
.text$mn:000063E6                 mov     [ebp+var_C], 1
.text$mn:000063ED                 jmp     short loc_63F6
.text$mn:000063EF ; ---------------------------------------------------------------------------
.text$mn:000063EF
.text$mn:000063EF loc_63EF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:000063EF                 mov     [ebp+var_C], 0
.text$mn:000063F6
.text$mn:000063F6 loc_63F6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:000063F6                 mov     al, byte ptr [ebp+var_C]
.text$mn:000063F9                 mov     esp, ebp
.text$mn:000063FB                 pop     ebp
.text$mn:000063FC                 retn    8
.text$mn:000063FC ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:000063FC
.text$mn:000063FC ; ---------------------------------------------------------------------------
.text$mn:000063FF                 align 10h
.text$mn:000063FF _text$mn        ends
.text$mn:000063FF
.text$mn:00006400 ; ===========================================================================
.text$mn:00006400
.text$mn:00006400 ; Segment type: Pure code
.text$mn:00006400 ; Segment permissions: Read/Execute
.text$mn:00006400 _text$mn        segment para public 'CODE' use32
.text$mn:00006400                 assume cs:_text$mn
.text$mn:00006400                 ;org 6400h
.text$mn:00006400 ; COMDAT (pick any)
.text$mn:00006400                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006400
.text$mn:00006400 ; =============== S U B R O U T I N E =======================================
.text$mn:00006400
.text$mn:00006400 ; Attributes: bp-based frame
.text$mn:00006400
.text$mn:00006400 ; protected: unsigned int __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Grow_to(unsigned int)const
.text$mn:00006400                 public ?_Grow_to@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEII@Z
.text$mn:00006400 ?_Grow_to@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEII@Z proc near
.text$mn:00006400                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)+45p
.text$mn:00006400
.text$mn:00006400 var_C           = dword ptr -0Ch
.text$mn:00006400 var_8           = dword ptr -8
.text$mn:00006400 var_4           = dword ptr -4
.text$mn:00006400 arg_0           = dword ptr  8
.text$mn:00006400
.text$mn:00006400                 push    ebp
.text$mn:00006401                 mov     ebp, esp
.text$mn:00006403                 sub     esp, 0Ch
.text$mn:00006406                 mov     [ebp+var_8], ecx
.text$mn:00006409                 mov     ecx, [ebp+var_8]
.text$mn:0000640C                 call    ?capacity@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::capacity(void)
.text$mn:00006411                 mov     [ebp+var_4], eax
.text$mn:00006414                 mov     ecx, [ebp+var_8]
.text$mn:00006417                 call    ?max_size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::max_size(void)
.text$mn:0000641C                 mov     ecx, [ebp+var_4]
.text$mn:0000641F                 shr     ecx, 1
.text$mn:00006421                 sub     eax, ecx
.text$mn:00006423                 cmp     eax, [ebp+var_4]
.text$mn:00006426                 jnb     short loc_6431
.text$mn:00006428                 mov     [ebp+var_C], 0
.text$mn:0000642F                 jmp     short loc_643C
.text$mn:00006431 ; ---------------------------------------------------------------------------
.text$mn:00006431
.text$mn:00006431 loc_6431:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Grow_to(uint)+26j
.text$mn:00006431                 mov     edx, [ebp+var_4]
.text$mn:00006434                 shr     edx, 1
.text$mn:00006436                 add     edx, [ebp+var_4]
.text$mn:00006439                 mov     [ebp+var_C], edx
.text$mn:0000643C
.text$mn:0000643C loc_643C:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Grow_to(uint)+2Fj
.text$mn:0000643C                 mov     eax, [ebp+var_C]
.text$mn:0000643F                 mov     [ebp+var_4], eax
.text$mn:00006442                 mov     ecx, [ebp+var_4]
.text$mn:00006445                 cmp     ecx, [ebp+arg_0]
.text$mn:00006448                 jnb     short loc_6450
.text$mn:0000644A                 mov     edx, [ebp+arg_0]
.text$mn:0000644D                 mov     [ebp+var_4], edx
.text$mn:00006450
.text$mn:00006450 loc_6450:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Grow_to(uint)+48j
.text$mn:00006450                 mov     eax, [ebp+var_4]
.text$mn:00006453                 mov     esp, ebp
.text$mn:00006455                 pop     ebp
.text$mn:00006456                 retn    4
.text$mn:00006456 ?_Grow_to@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEII@Z endp
.text$mn:00006456
.text$mn:00006456 ; ---------------------------------------------------------------------------
.text$mn:00006459                 align 4
.text$mn:00006459 _text$mn        ends
.text$mn:00006459
.text$mn:0000645C ; ===========================================================================
.text$mn:0000645C
.text$mn:0000645C ; Segment type: Pure code
.text$mn:0000645C ; Segment permissions: Read/Execute
.text$mn:0000645C _text$mn        segment para public 'CODE' use32
.text$mn:0000645C                 assume cs:_text$mn
.text$mn:0000645C                 ;org 645Ch
.text$mn:0000645C ; COMDAT (pick any)
.text$mn:0000645C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000645C
.text$mn:0000645C ; =============== S U B R O U T I N E =======================================
.text$mn:0000645C
.text$mn:0000645C ; Attributes: bp-based frame
.text$mn:0000645C
.text$mn:0000645C ; protected: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Grow_to(unsigned int)const
.text$mn:0000645C                 public ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z
.text$mn:0000645C ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z proc near
.text$mn:0000645C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+45p
.text$mn:0000645C
.text$mn:0000645C var_C           = dword ptr -0Ch
.text$mn:0000645C var_8           = dword ptr -8
.text$mn:0000645C var_4           = dword ptr -4
.text$mn:0000645C arg_0           = dword ptr  8
.text$mn:0000645C
.text$mn:0000645C                 push    ebp
.text$mn:0000645D                 mov     ebp, esp
.text$mn:0000645F                 sub     esp, 0Ch
.text$mn:00006462                 mov     [ebp+var_8], ecx
.text$mn:00006465                 mov     ecx, [ebp+var_8]
.text$mn:00006468                 call    ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::capacity(void)
.text$mn:0000646D                 mov     [ebp+var_4], eax
.text$mn:00006470                 mov     ecx, [ebp+var_8]
.text$mn:00006473                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:00006478                 mov     ecx, [ebp+var_4]
.text$mn:0000647B                 shr     ecx, 1
.text$mn:0000647D                 sub     eax, ecx
.text$mn:0000647F                 cmp     eax, [ebp+var_4]
.text$mn:00006482                 jnb     short loc_648D
.text$mn:00006484                 mov     [ebp+var_C], 0
.text$mn:0000648B                 jmp     short loc_6498
.text$mn:0000648D ; ---------------------------------------------------------------------------
.text$mn:0000648D
.text$mn:0000648D loc_648D:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+26j
.text$mn:0000648D                 mov     edx, [ebp+var_4]
.text$mn:00006490                 shr     edx, 1
.text$mn:00006492                 add     edx, [ebp+var_4]
.text$mn:00006495                 mov     [ebp+var_C], edx
.text$mn:00006498
.text$mn:00006498 loc_6498:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+2Fj
.text$mn:00006498                 mov     eax, [ebp+var_C]
.text$mn:0000649B                 mov     [ebp+var_4], eax
.text$mn:0000649E                 mov     ecx, [ebp+var_4]
.text$mn:000064A1                 cmp     ecx, [ebp+arg_0]
.text$mn:000064A4                 jnb     short loc_64AC
.text$mn:000064A6                 mov     edx, [ebp+arg_0]
.text$mn:000064A9                 mov     [ebp+var_4], edx
.text$mn:000064AC
.text$mn:000064AC loc_64AC:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+48j
.text$mn:000064AC                 mov     eax, [ebp+var_4]
.text$mn:000064AF                 mov     esp, ebp
.text$mn:000064B1                 pop     ebp
.text$mn:000064B2                 retn    4
.text$mn:000064B2 ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z endp
.text$mn:000064B2
.text$mn:000064B2 ; ---------------------------------------------------------------------------
.text$mn:000064B5                 align 4
.text$mn:000064B5 _text$mn        ends
.text$mn:000064B5
.text$mn:000064B8 ; ===========================================================================
.text$mn:000064B8
.text$mn:000064B8 ; Segment type: Pure code
.text$mn:000064B8 ; Segment permissions: Read/Execute
.text$mn:000064B8 _text$mn        segment para public 'CODE' use32
.text$mn:000064B8                 assume cs:_text$mn
.text$mn:000064B8                 ;org 64B8h
.text$mn:000064B8 ; COMDAT (pick any)
.text$mn:000064B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064B8
.text$mn:000064B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000064B8
.text$mn:000064B8 ; Attributes: bp-based frame
.text$mn:000064B8
.text$mn:000064B8 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:000064B8                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:000064B8 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:000064B8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:000064B8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+2Cp
.text$mn:000064B8
.text$mn:000064B8 var_4           = dword ptr -4
.text$mn:000064B8 arg_0           = dword ptr  8
.text$mn:000064B8
.text$mn:000064B8                 push    ebp
.text$mn:000064B9                 mov     ebp, esp
.text$mn:000064BB                 push    ecx
.text$mn:000064BC                 mov     [ebp+var_4], ecx
.text$mn:000064BF                 cmp     [ebp+arg_0], 0
.text$mn:000064C3                 jz      short loc_64E5
.text$mn:000064C5                 mov     ecx, [ebp+var_4]
.text$mn:000064C8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000064CD                 cmp     [ebp+arg_0], eax
.text$mn:000064D0                 jb      short loc_64E5
.text$mn:000064D2                 mov     ecx, [ebp+var_4]
.text$mn:000064D5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000064DA                 mov     ecx, [ebp+var_4]
.text$mn:000064DD                 add     eax, [ecx+14h]
.text$mn:000064E0                 cmp     eax, [ebp+arg_0]
.text$mn:000064E3                 ja      short loc_64EB
.text$mn:000064E5
.text$mn:000064E5 loc_64E5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:000064E5                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:000064E5                 xor     al, al
.text$mn:000064E7                 jmp     short loc_64ED
.text$mn:000064E9 ; ---------------------------------------------------------------------------
.text$mn:000064E9                 jmp     short loc_64ED
.text$mn:000064EB ; ---------------------------------------------------------------------------
.text$mn:000064EB
.text$mn:000064EB loc_64EB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:000064EB                 mov     al, 1
.text$mn:000064ED
.text$mn:000064ED loc_64ED:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:000064ED                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:000064ED                 mov     esp, ebp
.text$mn:000064EF                 pop     ebp
.text$mn:000064F0                 retn    4
.text$mn:000064F0 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:000064F0
.text$mn:000064F0 ; ---------------------------------------------------------------------------
.text$mn:000064F3                 align 4
.text$mn:000064F3 _text$mn        ends
.text$mn:000064F3
.text$mn:000064F4 ; ===========================================================================
.text$mn:000064F4
.text$mn:000064F4 ; Segment type: Pure code
.text$mn:000064F4 ; Segment permissions: Read/Execute
.text$mn:000064F4 _text$mn        segment para public 'CODE' use32
.text$mn:000064F4                 assume cs:_text$mn
.text$mn:000064F4                 ;org 64F4h
.text$mn:000064F4 ; COMDAT (pick any)
.text$mn:000064F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064F4
.text$mn:000064F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064F4
.text$mn:000064F4 ; Attributes: bp-based frame
.text$mn:000064F4
.text$mn:000064F4 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000064F4                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:000064F4 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:000064F4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap
.text$mn:000064F4
.text$mn:000064F4 var_4           = dword ptr -4
.text$mn:000064F4 arg_0           = dword ptr  8
.text$mn:000064F4
.text$mn:000064F4                 push    ebp
.text$mn:000064F5                 mov     ebp, esp
.text$mn:000064F7                 push    ecx
.text$mn:000064F8                 mov     [ebp+var_4], ecx
.text$mn:000064FB                 cmp     [ebp+arg_0], 0
.text$mn:000064FF                 jz      short loc_6524
.text$mn:00006501                 mov     ecx, [ebp+var_4]
.text$mn:00006504                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006509                 cmp     [ebp+arg_0], eax
.text$mn:0000650C                 jb      short loc_6524
.text$mn:0000650E                 mov     ecx, [ebp+var_4]
.text$mn:00006511                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006516                 mov     ecx, [ebp+var_4]
.text$mn:00006519                 mov     edx, [ecx+14h]
.text$mn:0000651C                 lea     eax, [eax+edx*2]
.text$mn:0000651F                 cmp     eax, [ebp+arg_0]
.text$mn:00006522                 ja      short loc_652A
.text$mn:00006524
.text$mn:00006524 loc_6524:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00006524                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00006524                 xor     al, al
.text$mn:00006526                 jmp     short loc_652C
.text$mn:00006528 ; ---------------------------------------------------------------------------
.text$mn:00006528                 jmp     short loc_652C
.text$mn:0000652A ; ---------------------------------------------------------------------------
.text$mn:0000652A
.text$mn:0000652A loc_652A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:0000652A                 mov     al, 1
.text$mn:0000652C
.text$mn:0000652C loc_652C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:0000652C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:0000652C                 mov     esp, ebp
.text$mn:0000652E                 pop     ebp
.text$mn:0000652F                 retn    4
.text$mn:0000652F ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:0000652F
.text$mn:0000652F ; ---------------------------------------------------------------------------
.text$mn:00006532                 align 4
.text$mn:00006532 _text$mn        ends
.text$mn:00006532
.text$mn:00006534 ; ===========================================================================
.text$mn:00006534
.text$mn:00006534 ; Segment type: Pure code
.text$mn:00006534 ; Segment permissions: Read/Execute
.text$mn:00006534 _text$mn        segment para public 'CODE' use32
.text$mn:00006534                 assume cs:_text$mn
.text$mn:00006534                 ;org 6534h
.text$mn:00006534 ; COMDAT (pick any)
.text$mn:00006534                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006534
.text$mn:00006534 ; =============== S U B R O U T I N E =======================================
.text$mn:00006534
.text$mn:00006534 ; Attributes: bp-based frame
.text$mn:00006534
.text$mn:00006534 ; protected: bool __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Inside(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const *)const
.text$mn:00006534                 public ?_Inside@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBE_NPBU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@@Z
.text$mn:00006534 ?_Inside@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBE_NPBU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@@Z proc near
.text$mn:00006534                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+19p
.text$mn:00006534
.text$mn:00006534 var_8           = dword ptr -8
.text$mn:00006534 var_4           = dword ptr -4
.text$mn:00006534 arg_0           = dword ptr  8
.text$mn:00006534
.text$mn:00006534                 push    ebp
.text$mn:00006535                 mov     ebp, esp
.text$mn:00006537                 sub     esp, 8
.text$mn:0000653A                 mov     [ebp+var_4], ecx
.text$mn:0000653D                 mov     eax, [ebp+var_4]
.text$mn:00006540                 mov     ecx, [ebp+arg_0]
.text$mn:00006543                 cmp     ecx, [eax+8]
.text$mn:00006546                 jnb     short loc_655C
.text$mn:00006548                 mov     edx, [ebp+var_4]
.text$mn:0000654B                 mov     eax, [edx+4]
.text$mn:0000654E                 cmp     eax, [ebp+arg_0]
.text$mn:00006551                 ja      short loc_655C
.text$mn:00006553                 mov     [ebp+var_8], 1
.text$mn:0000655A                 jmp     short loc_6563
.text$mn:0000655C ; ---------------------------------------------------------------------------
.text$mn:0000655C
.text$mn:0000655C loc_655C:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Inside(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const *)+12j
.text$mn:0000655C                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Inside(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const *)+1Dj
.text$mn:0000655C                 mov     [ebp+var_8], 0
.text$mn:00006563
.text$mn:00006563 loc_6563:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Inside(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const *)+26j
.text$mn:00006563                 mov     al, byte ptr [ebp+var_8]
.text$mn:00006566                 mov     esp, ebp
.text$mn:00006568                 pop     ebp
.text$mn:00006569                 retn    4
.text$mn:00006569 ?_Inside@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBE_NPBU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@@Z endp
.text$mn:00006569
.text$mn:00006569 _text$mn        ends
.text$mn:00006569
.text$mn:0000656C ; ===========================================================================
.text$mn:0000656C
.text$mn:0000656C ; Segment type: Pure code
.text$mn:0000656C ; Segment permissions: Read/Execute
.text$mn:0000656C _text$mn        segment para public 'CODE' use32
.text$mn:0000656C                 assume cs:_text$mn
.text$mn:0000656C                 ;org 656Ch
.text$mn:0000656C ; COMDAT (pick any)
.text$mn:0000656C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000656C
.text$mn:0000656C ; =============== S U B R O U T I N E =======================================
.text$mn:0000656C
.text$mn:0000656C ; Attributes: bp-based frame
.text$mn:0000656C
.text$mn:0000656C ; protected: bool __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Inside(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const *)const
.text$mn:0000656C                 public ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:0000656C ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:0000656C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+19p
.text$mn:0000656C
.text$mn:0000656C var_8           = dword ptr -8
.text$mn:0000656C var_4           = dword ptr -4
.text$mn:0000656C arg_0           = dword ptr  8
.text$mn:0000656C
.text$mn:0000656C                 push    ebp
.text$mn:0000656D                 mov     ebp, esp
.text$mn:0000656F                 sub     esp, 8
.text$mn:00006572                 mov     [ebp+var_4], ecx
.text$mn:00006575                 mov     eax, [ebp+var_4]
.text$mn:00006578                 mov     ecx, [ebp+arg_0]
.text$mn:0000657B                 cmp     ecx, [eax+8]
.text$mn:0000657E                 jnb     short loc_6594
.text$mn:00006580                 mov     edx, [ebp+var_4]
.text$mn:00006583                 mov     eax, [edx+4]
.text$mn:00006586                 cmp     eax, [ebp+arg_0]
.text$mn:00006589                 ja      short loc_6594
.text$mn:0000658B                 mov     [ebp+var_8], 1
.text$mn:00006592                 jmp     short loc_659B
.text$mn:00006594 ; ---------------------------------------------------------------------------
.text$mn:00006594
.text$mn:00006594 loc_6594:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+12j
.text$mn:00006594                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+1Dj
.text$mn:00006594                 mov     [ebp+var_8], 0
.text$mn:0000659B
.text$mn:0000659B loc_659B:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)+26j
.text$mn:0000659B                 mov     al, byte ptr [ebp+var_8]
.text$mn:0000659E                 mov     esp, ebp
.text$mn:000065A0                 pop     ebp
.text$mn:000065A1                 retn    4
.text$mn:000065A1 ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:000065A1
.text$mn:000065A1 _text$mn        ends
.text$mn:000065A1
.text$mn:000065A4 ; ===========================================================================
.text$mn:000065A4
.text$mn:000065A4 ; Segment type: Pure code
.text$mn:000065A4 ; Segment permissions: Read/Execute
.text$mn:000065A4 _text$mn        segment para public 'CODE' use32
.text$mn:000065A4                 assume cs:_text$mn
.text$mn:000065A4                 ;org 65A4h
.text$mn:000065A4 ; COMDAT (pick any)
.text$mn:000065A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065A4
.text$mn:000065A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000065A4
.text$mn:000065A4 ; Attributes: bp-based frame
.text$mn:000065A4
.text$mn:000065A4 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:000065A4                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:000065A4 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:000065A4                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+27p
.text$mn:000065A4                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+3Ep ...
.text$mn:000065A4
.text$mn:000065A4 var_8           = dword ptr -8
.text$mn:000065A4 var_4           = dword ptr -4
.text$mn:000065A4
.text$mn:000065A4                 push    ebp
.text$mn:000065A5                 mov     ebp, esp
.text$mn:000065A7                 sub     esp, 8
.text$mn:000065AA                 mov     [ebp+var_4], ecx
.text$mn:000065AD                 mov     eax, [ebp+var_4]
.text$mn:000065B0                 cmp     dword ptr [eax+18h], 10h
.text$mn:000065B4                 jb      short loc_65CA
.text$mn:000065B6                 mov     ecx, [ebp+var_4]
.text$mn:000065B9                 mov     edx, [ecx+4]
.text$mn:000065BC                 push    edx
.text$mn:000065BD                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000065C2                 add     esp, 4
.text$mn:000065C5                 mov     [ebp+var_8], eax
.text$mn:000065C8                 jmp     short loc_65D3
.text$mn:000065CA ; ---------------------------------------------------------------------------
.text$mn:000065CA
.text$mn:000065CA loc_65CA:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:000065CA                 mov     eax, [ebp+var_4]
.text$mn:000065CD                 add     eax, 4
.text$mn:000065D0                 mov     [ebp+var_8], eax
.text$mn:000065D3
.text$mn:000065D3 loc_65D3:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:000065D3                 mov     eax, [ebp+var_8]
.text$mn:000065D6                 mov     esp, ebp
.text$mn:000065D8                 pop     ebp
.text$mn:000065D9                 retn
.text$mn:000065D9 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:000065D9
.text$mn:000065D9 ; ---------------------------------------------------------------------------
.text$mn:000065DA                 align 4
.text$mn:000065DA _text$mn        ends
.text$mn:000065DA
.text$mn:000065DC ; ===========================================================================
.text$mn:000065DC
.text$mn:000065DC ; Segment type: Pure code
.text$mn:000065DC ; Segment permissions: Read/Execute
.text$mn:000065DC _text$mn        segment para public 'CODE' use32
.text$mn:000065DC                 assume cs:_text$mn
.text$mn:000065DC                 ;org 65DCh
.text$mn:000065DC ; COMDAT (pick any)
.text$mn:000065DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065DC
.text$mn:000065DC ; =============== S U B R O U T I N E =======================================
.text$mn:000065DC
.text$mn:000065DC ; Attributes: bp-based frame
.text$mn:000065DC
.text$mn:000065DC ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:000065DC                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:000065DC ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:000065DC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:000065DC                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)+Ap ...
.text$mn:000065DC
.text$mn:000065DC var_8           = dword ptr -8
.text$mn:000065DC var_4           = dword ptr -4
.text$mn:000065DC
.text$mn:000065DC                 push    ebp
.text$mn:000065DD                 mov     ebp, esp
.text$mn:000065DF                 sub     esp, 8
.text$mn:000065E2                 mov     [ebp+var_4], ecx
.text$mn:000065E5                 mov     eax, [ebp+var_4]
.text$mn:000065E8                 cmp     dword ptr [eax+18h], 10h
.text$mn:000065EC                 jb      short loc_6602
.text$mn:000065EE                 mov     ecx, [ebp+var_4]
.text$mn:000065F1                 mov     edx, [ecx+4]
.text$mn:000065F4                 push    edx
.text$mn:000065F5                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000065FA                 add     esp, 4
.text$mn:000065FD                 mov     [ebp+var_8], eax
.text$mn:00006600                 jmp     short loc_660B
.text$mn:00006602 ; ---------------------------------------------------------------------------
.text$mn:00006602
.text$mn:00006602 loc_6602:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00006602                 mov     eax, [ebp+var_4]
.text$mn:00006605                 add     eax, 4
.text$mn:00006608                 mov     [ebp+var_8], eax
.text$mn:0000660B
.text$mn:0000660B loc_660B:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:0000660B                 mov     eax, [ebp+var_8]
.text$mn:0000660E                 mov     esp, ebp
.text$mn:00006610                 pop     ebp
.text$mn:00006611                 retn
.text$mn:00006611 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00006611
.text$mn:00006611 ; ---------------------------------------------------------------------------
.text$mn:00006612                 align 4
.text$mn:00006612 _text$mn        ends
.text$mn:00006612
.text$mn:00006614 ; ===========================================================================
.text$mn:00006614
.text$mn:00006614 ; Segment type: Pure code
.text$mn:00006614 ; Segment permissions: Read/Execute
.text$mn:00006614 _text$mn        segment para public 'CODE' use32
.text$mn:00006614                 assume cs:_text$mn
.text$mn:00006614                 ;org 6614h
.text$mn:00006614 ; COMDAT (pick any)
.text$mn:00006614                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006614
.text$mn:00006614 ; =============== S U B R O U T I N E =======================================
.text$mn:00006614
.text$mn:00006614 ; Attributes: bp-based frame
.text$mn:00006614
.text$mn:00006614 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00006614                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00006614 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00006614                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+14p
.text$mn:00006614                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+36p ...
.text$mn:00006614
.text$mn:00006614 var_8           = dword ptr -8
.text$mn:00006614 var_4           = dword ptr -4
.text$mn:00006614
.text$mn:00006614                 push    ebp
.text$mn:00006615                 mov     ebp, esp
.text$mn:00006617                 sub     esp, 8
.text$mn:0000661A                 mov     [ebp+var_4], ecx
.text$mn:0000661D                 mov     eax, [ebp+var_4]
.text$mn:00006620                 cmp     dword ptr [eax+18h], 8
.text$mn:00006624                 jb      short loc_663A
.text$mn:00006626                 mov     ecx, [ebp+var_4]
.text$mn:00006629                 mov     edx, [ecx+4]
.text$mn:0000662C                 push    edx
.text$mn:0000662D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00006632                 add     esp, 4
.text$mn:00006635                 mov     [ebp+var_8], eax
.text$mn:00006638                 jmp     short loc_6643
.text$mn:0000663A ; ---------------------------------------------------------------------------
.text$mn:0000663A
.text$mn:0000663A loc_663A:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:0000663A                 mov     eax, [ebp+var_4]
.text$mn:0000663D                 add     eax, 4
.text$mn:00006640                 mov     [ebp+var_8], eax
.text$mn:00006643
.text$mn:00006643 loc_6643:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00006643                 mov     eax, [ebp+var_8]
.text$mn:00006646                 mov     esp, ebp
.text$mn:00006648                 pop     ebp
.text$mn:00006649                 retn
.text$mn:00006649 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00006649
.text$mn:00006649 ; ---------------------------------------------------------------------------
.text$mn:0000664A                 align 4
.text$mn:0000664A _text$mn        ends
.text$mn:0000664A
.text$mn:0000664C ; ===========================================================================
.text$mn:0000664C
.text$mn:0000664C ; Segment type: Pure code
.text$mn:0000664C ; Segment permissions: Read/Execute
.text$mn:0000664C _text$mn        segment para public 'CODE' use32
.text$mn:0000664C                 assume cs:_text$mn
.text$mn:0000664C                 ;org 664Ch
.text$mn:0000664C ; COMDAT (pick any)
.text$mn:0000664C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000664C
.text$mn:0000664C ; =============== S U B R O U T I N E =======================================
.text$mn:0000664C
.text$mn:0000664C ; Attributes: bp-based frame
.text$mn:0000664C
.text$mn:0000664C ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:0000664C                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:0000664C ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:0000664C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp
.text$mn:0000664C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)+Ap ...
.text$mn:0000664C
.text$mn:0000664C var_8           = dword ptr -8
.text$mn:0000664C var_4           = dword ptr -4
.text$mn:0000664C
.text$mn:0000664C                 push    ebp
.text$mn:0000664D                 mov     ebp, esp
.text$mn:0000664F                 sub     esp, 8
.text$mn:00006652                 mov     [ebp+var_4], ecx
.text$mn:00006655                 mov     eax, [ebp+var_4]
.text$mn:00006658                 cmp     dword ptr [eax+18h], 8
.text$mn:0000665C                 jb      short loc_6672
.text$mn:0000665E                 mov     ecx, [ebp+var_4]
.text$mn:00006661                 mov     edx, [ecx+4]
.text$mn:00006664                 push    edx
.text$mn:00006665                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000666A                 add     esp, 4
.text$mn:0000666D                 mov     [ebp+var_8], eax
.text$mn:00006670                 jmp     short loc_667B
.text$mn:00006672 ; ---------------------------------------------------------------------------
.text$mn:00006672
.text$mn:00006672 loc_6672:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00006672                 mov     eax, [ebp+var_4]
.text$mn:00006675                 add     eax, 4
.text$mn:00006678                 mov     [ebp+var_8], eax
.text$mn:0000667B
.text$mn:0000667B loc_667B:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:0000667B                 mov     eax, [ebp+var_8]
.text$mn:0000667E                 mov     esp, ebp
.text$mn:00006680                 pop     ebp
.text$mn:00006681                 retn
.text$mn:00006681 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00006681
.text$mn:00006681 ; ---------------------------------------------------------------------------
.text$mn:00006682                 align 4
.text$mn:00006682 _text$mn        ends
.text$mn:00006682
.text$mn:00006684 ; ===========================================================================
.text$mn:00006684
.text$mn:00006684 ; Segment type: Pure code
.text$mn:00006684 ; Segment permissions: Read/Execute
.text$mn:00006684 _text$mn        segment para public 'CODE' use32
.text$mn:00006684                 assume cs:_text$mn
.text$mn:00006684                 ;org 6684h
.text$mn:00006684 ; COMDAT (pick any)
.text$mn:00006684                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006684
.text$mn:00006684 ; =============== S U B R O U T I N E =======================================
.text$mn:00006684
.text$mn:00006684 ; Attributes: bp-based frame
.text$mn:00006684
.text$mn:00006684 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00006684                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00006684 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00006684                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00006684                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00006684
.text$mn:00006684 var_18          = byte ptr -18h
.text$mn:00006684 var_14          = dword ptr -14h
.text$mn:00006684 var_10          = dword ptr -10h
.text$mn:00006684 var_C           = dword ptr -0Ch
.text$mn:00006684 var_4           = dword ptr -4
.text$mn:00006684
.text$mn:00006684                 push    ebp
.text$mn:00006685                 mov     ebp, esp
.text$mn:00006687                 push    0FFFFFFFFh
.text$mn:00006689                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:0000668E                 mov     eax, large fs:0
.text$mn:00006694                 push    eax
.text$mn:00006695                 sub     esp, 0Ch
.text$mn:00006698                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000669D                 xor     eax, ebp
.text$mn:0000669F                 push    eax
.text$mn:000066A0                 lea     eax, [ebp+var_C]
.text$mn:000066A3                 mov     large fs:0, eax
.text$mn:000066A9                 mov     [ebp+var_14], ecx
.text$mn:000066AC                 mov     eax, [ebp+var_14]
.text$mn:000066AF                 cmp     dword ptr [eax], 0
.text$mn:000066B2                 jz      short loc_670F
.text$mn:000066B4                 push    3               ; int
.text$mn:000066B6                 lea     ecx, [ebp+var_18] ; this
.text$mn:000066B9                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000066BE                 mov     [ebp+var_4], 0
.text$mn:000066C5                 mov     ecx, [ebp+var_14]
.text$mn:000066C8                 mov     edx, [ecx]
.text$mn:000066CA                 add     edx, 4
.text$mn:000066CD                 mov     [ebp+var_10], edx
.text$mn:000066D0                 jmp     short loc_66DF
.text$mn:000066D2 ; ---------------------------------------------------------------------------
.text$mn:000066D2
.text$mn:000066D2 loc_66D2:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:000066D2                 mov     eax, [ebp+var_10]
.text$mn:000066D5                 mov     ecx, [eax]
.text$mn:000066D7                 mov     edx, [ebp+var_10]
.text$mn:000066DA                 mov     eax, [ecx+4]
.text$mn:000066DD                 mov     [edx], eax
.text$mn:000066DF
.text$mn:000066DF loc_66DF:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:000066DF                 mov     ecx, [ebp+var_10]
.text$mn:000066E2                 cmp     dword ptr [ecx], 0
.text$mn:000066E5                 jz      short loc_66F4
.text$mn:000066E7                 mov     edx, [ebp+var_10]
.text$mn:000066EA                 mov     eax, [edx]
.text$mn:000066EC                 mov     dword ptr [eax], 0
.text$mn:000066F2                 jmp     short loc_66D2
.text$mn:000066F4 ; ---------------------------------------------------------------------------
.text$mn:000066F4
.text$mn:000066F4 loc_66F4:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:000066F4                 mov     ecx, [ebp+var_14]
.text$mn:000066F7                 mov     edx, [ecx]
.text$mn:000066F9                 mov     dword ptr [edx+4], 0
.text$mn:00006700                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006707                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000670A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000670F
.text$mn:0000670F loc_670F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:0000670F                 mov     ecx, [ebp+var_C]
.text$mn:00006712                 mov     large fs:0, ecx
.text$mn:00006719                 pop     ecx
.text$mn:0000671A                 mov     esp, ebp
.text$mn:0000671C                 pop     ebp
.text$mn:0000671D                 retn
.text$mn:0000671D ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:0000671D
.text$mn:0000671D ; ---------------------------------------------------------------------------
.text$mn:0000671E                 align 10h
.text$mn:0000671E _text$mn        ends
.text$mn:0000671E
.text$x:00006720 ; ===========================================================================
.text$x:00006720
.text$x:00006720 ; Segment type: Pure code
.text$x:00006720 ; Segment permissions: Read/Execute
.text$x:00006720 _text$x         segment para public 'CODE' use32
.text$x:00006720                 assume cs:_text$x
.text$x:00006720                 ;org 6720h
.text$x:00006720 ; COMDAT (pick associative to section at 6684)
.text$x:00006720                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006720
.text$x:00006720 ; =============== S U B R O U T I N E =======================================
.text$x:00006720
.text$x:00006720
.text$x:00006720 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00006720                                         ; DATA XREF: .xdata$x:000091A0o
.text$x:00006720                 lea     ecx, [ebp-18h]  ; this
.text$x:00006723                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006723 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00006723
.text$x:00006728
.text$x:00006728 ; =============== S U B R O U T I N E =======================================
.text$x:00006728
.text$x:00006728
.text$x:00006728 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00006728                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00006728
.text$x:00006728 arg_4           = dword ptr  8
.text$x:00006728
.text$x:00006728                 mov     edx, [esp+arg_4]
.text$x:0000672C                 lea     eax, [edx+0Ch]
.text$x:0000672F                 mov     ecx, [edx-10h]
.text$x:00006732                 xor     ecx, eax
.text$x:00006734                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006739                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:0000673E                 jmp     ___CxxFrameHandler3
.text$x:0000673E __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:0000673E
.text$x:0000673E ; ---------------------------------------------------------------------------
.text$x:00006743                 align 4
.text$x:00006743 _text$x         ends
.text$x:00006743
.text$mn:00006744 ; ===========================================================================
.text$mn:00006744
.text$mn:00006744 ; Segment type: Pure code
.text$mn:00006744 ; Segment permissions: Read/Execute
.text$mn:00006744 _text$mn        segment para public 'CODE' use32
.text$mn:00006744                 assume cs:_text$mn
.text$mn:00006744                 ;org 6744h
.text$mn:00006744 ; COMDAT (pick any)
.text$mn:00006744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006744
.text$mn:00006744 ; =============== S U B R O U T I N E =======================================
.text$mn:00006744
.text$mn:00006744 ; Attributes: bp-based frame
.text$mn:00006744
.text$mn:00006744 ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:00006744                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:00006744 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00006744                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:00006744                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:00006744
.text$mn:00006744 var_8           = dword ptr -8
.text$mn:00006744 var_4           = dword ptr -4
.text$mn:00006744
.text$mn:00006744                 push    ebp
.text$mn:00006745                 mov     ebp, esp
.text$mn:00006747                 sub     esp, 8
.text$mn:0000674A                 mov     [ebp+var_8], ecx
.text$mn:0000674D                 mov     eax, [ebp+var_8]
.text$mn:00006750                 cmp     dword ptr [eax], 0
.text$mn:00006753                 jz      short loc_67B2
.text$mn:00006755                 mov     ecx, [ebp+var_8]
.text$mn:00006758                 mov     edx, [ecx]
.text$mn:0000675A                 add     edx, 4
.text$mn:0000675D                 mov     [ebp+var_4], edx
.text$mn:00006760
.text$mn:00006760 loc_6760:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:00006760                 mov     eax, [ebp+var_4]
.text$mn:00006763                 cmp     dword ptr [eax], 0
.text$mn:00006766                 jz      short loc_677F
.text$mn:00006768                 mov     ecx, [ebp+var_4]
.text$mn:0000676B                 mov     edx, [ecx]
.text$mn:0000676D                 cmp     edx, [ebp+var_8]
.text$mn:00006770                 jz      short loc_677F
.text$mn:00006772                 mov     eax, [ebp+var_4]
.text$mn:00006775                 mov     ecx, [eax]
.text$mn:00006777                 add     ecx, 4
.text$mn:0000677A                 mov     [ebp+var_4], ecx
.text$mn:0000677D                 jmp     short loc_6760
.text$mn:0000677F ; ---------------------------------------------------------------------------
.text$mn:0000677F
.text$mn:0000677F loc_677F:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:0000677F                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:0000677F                 mov     edx, [ebp+var_4]
.text$mn:00006782                 cmp     dword ptr [edx], 0
.text$mn:00006785                 jnz     short loc_679E
.text$mn:00006787                 push    0C9h ; '+'      ; unsigned int
.text$mn:0000678C                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00006791                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:00006796                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000679B                 add     esp, 0Ch
.text$mn:0000679E
.text$mn:0000679E loc_679E:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:0000679E                 mov     eax, [ebp+var_4]
.text$mn:000067A1                 mov     ecx, [ebp+var_8]
.text$mn:000067A4                 mov     edx, [ecx+4]
.text$mn:000067A7                 mov     [eax], edx
.text$mn:000067A9                 mov     eax, [ebp+var_8]
.text$mn:000067AC                 mov     dword ptr [eax], 0
.text$mn:000067B2
.text$mn:000067B2 loc_67B2:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:000067B2                 mov     esp, ebp
.text$mn:000067B4                 pop     ebp
.text$mn:000067B5                 retn
.text$mn:000067B5 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:000067B5
.text$mn:000067B5 ; ---------------------------------------------------------------------------
.text$mn:000067B6                 align 4
.text$mn:000067B6 _text$mn        ends
.text$mn:000067B6
.text$mn:000067B8 ; ===========================================================================
.text$mn:000067B8
.text$mn:000067B8 ; Segment type: Pure code
.text$mn:000067B8 ; Segment permissions: Read/Execute
.text$mn:000067B8 _text$mn        segment para public 'CODE' use32
.text$mn:000067B8                 assume cs:_text$mn
.text$mn:000067B8                 ;org 67B8h
.text$mn:000067B8 ; COMDAT (pick any)
.text$mn:000067B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000067B8
.text$mn:000067B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000067B8
.text$mn:000067B8 ; Attributes: bp-based frame
.text$mn:000067B8
.text$mn:000067B8 ; protected: void __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Orphan_range(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *, struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> *)const
.text$mn:000067B8                 public ?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z
.text$mn:000067B8 ?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z proc near
.text$mn:000067B8                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+6Fp
.text$mn:000067B8                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+DCp
.text$mn:000067B8
.text$mn:000067B8 var_18          = byte ptr -18h
.text$mn:000067B8 var_14          = dword ptr -14h
.text$mn:000067B8 var_10          = dword ptr -10h
.text$mn:000067B8 var_C           = dword ptr -0Ch
.text$mn:000067B8 var_4           = dword ptr -4
.text$mn:000067B8 arg_0           = dword ptr  8
.text$mn:000067B8 arg_4           = dword ptr  0Ch
.text$mn:000067B8
.text$mn:000067B8                 push    ebp
.text$mn:000067B9                 mov     ebp, esp
.text$mn:000067BB                 push    0FFFFFFFFh
.text$mn:000067BD                 push    offset __ehhandler$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z
.text$mn:000067C2                 mov     eax, large fs:0
.text$mn:000067C8                 push    eax
.text$mn:000067C9                 sub     esp, 0Ch
.text$mn:000067CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067D1                 xor     eax, ebp
.text$mn:000067D3                 push    eax
.text$mn:000067D4                 lea     eax, [ebp+var_C]
.text$mn:000067D7                 mov     large fs:0, eax
.text$mn:000067DD                 mov     [ebp+var_14], ecx
.text$mn:000067E0                 push    3               ; int
.text$mn:000067E2                 lea     ecx, [ebp+var_18] ; this
.text$mn:000067E5                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000067EA                 mov     [ebp+var_4], 0
.text$mn:000067F1                 mov     ecx, [ebp+var_14] ; this
.text$mn:000067F4                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:000067F9                 mov     [ebp+var_10], eax
.text$mn:000067FC                 cmp     [ebp+var_10], 0
.text$mn:00006800                 jz      short loc_6850
.text$mn:00006802
.text$mn:00006802 loc_6802:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *):loc_684Ej
.text$mn:00006802                 mov     eax, [ebp+var_10]
.text$mn:00006805                 cmp     dword ptr [eax], 0
.text$mn:00006808                 jz      short loc_6850
.text$mn:0000680A                 mov     ecx, [ebp+var_10]
.text$mn:0000680D                 mov     edx, [ecx]
.text$mn:0000680F                 mov     eax, [edx+8]
.text$mn:00006812                 cmp     eax, [ebp+arg_0]
.text$mn:00006815                 jb      short loc_6824
.text$mn:00006817                 mov     ecx, [ebp+var_10]
.text$mn:0000681A                 mov     edx, [ecx]
.text$mn:0000681C                 mov     eax, [ebp+arg_4]
.text$mn:0000681F                 cmp     eax, [edx+8]
.text$mn:00006822                 jnb     short loc_6833
.text$mn:00006824
.text$mn:00006824 loc_6824:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+5Dj
.text$mn:00006824                 mov     ecx, [ebp+var_10]
.text$mn:00006827                 mov     ecx, [ecx]      ; this
.text$mn:00006829                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000682E                 mov     [ebp+var_10], eax
.text$mn:00006831                 jmp     short loc_684E
.text$mn:00006833 ; ---------------------------------------------------------------------------
.text$mn:00006833
.text$mn:00006833 loc_6833:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+6Aj
.text$mn:00006833                 mov     edx, [ebp+var_10]
.text$mn:00006836                 mov     ecx, [edx]      ; this
.text$mn:00006838                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:0000683D                 mov     eax, [ebp+var_10]
.text$mn:00006840                 mov     ecx, [eax]      ; this
.text$mn:00006842                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00006847                 mov     ecx, [ebp+var_10]
.text$mn:0000684A                 mov     edx, [eax]
.text$mn:0000684C                 mov     [ecx], edx
.text$mn:0000684E
.text$mn:0000684E loc_684E:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+79j
.text$mn:0000684E                 jmp     short loc_6802
.text$mn:00006850 ; ---------------------------------------------------------------------------
.text$mn:00006850
.text$mn:00006850 loc_6850:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+48j
.text$mn:00006850                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+50j
.text$mn:00006850                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006857                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000685A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000685F                 mov     ecx, [ebp+var_C]
.text$mn:00006862                 mov     large fs:0, ecx
.text$mn:00006869                 pop     ecx
.text$mn:0000686A                 mov     esp, ebp
.text$mn:0000686C                 pop     ebp
.text$mn:0000686D                 retn    8
.text$mn:0000686D ?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z endp
.text$mn:0000686D
.text$mn:0000686D _text$mn        ends
.text$mn:0000686D
.text$x:00006870 ; ===========================================================================
.text$x:00006870
.text$x:00006870 ; Segment type: Pure code
.text$x:00006870 ; Segment permissions: Read/Execute
.text$x:00006870 _text$x         segment para public 'CODE' use32
.text$x:00006870                 assume cs:_text$x
.text$x:00006870                 ;org 6870h
.text$x:00006870 ; COMDAT (pick associative to section at 67B8)
.text$x:00006870                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006870
.text$x:00006870 ; =============== S U B R O U T I N E =======================================
.text$x:00006870
.text$x:00006870
.text$x:00006870 __unwindfunclet$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z$0 proc near
.text$x:00006870                                         ; DATA XREF: .xdata$x:00009B4Co
.text$x:00006870                 lea     ecx, [ebp-18h]  ; this
.text$x:00006873                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006873 __unwindfunclet$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z$0 endp
.text$x:00006873
.text$x:00006878
.text$x:00006878 ; =============== S U B R O U T I N E =======================================
.text$x:00006878
.text$x:00006878
.text$x:00006878 __ehhandler$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z proc near
.text$x:00006878                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)+5o
.text$x:00006878
.text$x:00006878 arg_4           = dword ptr  8
.text$x:00006878
.text$x:00006878                 mov     edx, [esp+arg_4]
.text$x:0000687C                 lea     eax, [edx+0Ch]
.text$x:0000687F                 mov     ecx, [edx-10h]
.text$x:00006882                 xor     ecx, eax
.text$x:00006884                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006889                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z
.text$x:0000688E                 jmp     ___CxxFrameHandler3
.text$x:0000688E __ehhandler$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z endp
.text$x:0000688E
.text$x:0000688E ; ---------------------------------------------------------------------------
.text$x:00006893                 align 4
.text$x:00006893 _text$x         ends
.text$x:00006893
.text$mn:00006894 ; ===========================================================================
.text$mn:00006894
.text$mn:00006894 ; Segment type: Pure code
.text$mn:00006894 ; Segment permissions: Read/Execute
.text$mn:00006894 _text$mn        segment para public 'CODE' use32
.text$mn:00006894                 assume cs:_text$mn
.text$mn:00006894                 ;org 6894h
.text$mn:00006894 ; COMDAT (pick any)
.text$mn:00006894                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006894
.text$mn:00006894 ; =============== S U B R O U T I N E =======================================
.text$mn:00006894
.text$mn:00006894 ; Attributes: bp-based frame
.text$mn:00006894
.text$mn:00006894 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Orphan_range(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> *)const
.text$mn:00006894                 public ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:00006894 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$mn:00006894                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+6Fp
.text$mn:00006894                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+DCp
.text$mn:00006894
.text$mn:00006894 var_18          = byte ptr -18h
.text$mn:00006894 var_14          = dword ptr -14h
.text$mn:00006894 var_10          = dword ptr -10h
.text$mn:00006894 var_C           = dword ptr -0Ch
.text$mn:00006894 var_4           = dword ptr -4
.text$mn:00006894 arg_0           = dword ptr  8
.text$mn:00006894 arg_4           = dword ptr  0Ch
.text$mn:00006894
.text$mn:00006894                 push    ebp
.text$mn:00006895                 mov     ebp, esp
.text$mn:00006897                 push    0FFFFFFFFh
.text$mn:00006899                 push    offset __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$mn:0000689E                 mov     eax, large fs:0
.text$mn:000068A4                 push    eax
.text$mn:000068A5                 sub     esp, 0Ch
.text$mn:000068A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000068AD                 xor     eax, ebp
.text$mn:000068AF                 push    eax
.text$mn:000068B0                 lea     eax, [ebp+var_C]
.text$mn:000068B3                 mov     large fs:0, eax
.text$mn:000068B9                 mov     [ebp+var_14], ecx
.text$mn:000068BC                 push    3               ; int
.text$mn:000068BE                 lea     ecx, [ebp+var_18] ; this
.text$mn:000068C1                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000068C6                 mov     [ebp+var_4], 0
.text$mn:000068CD                 mov     ecx, [ebp+var_14] ; this
.text$mn:000068D0                 call    ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst(void)
.text$mn:000068D5                 mov     [ebp+var_10], eax
.text$mn:000068D8                 cmp     [ebp+var_10], 0
.text$mn:000068DC                 jz      short loc_692C
.text$mn:000068DE
.text$mn:000068DE loc_68DE:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *):loc_692Aj
.text$mn:000068DE                 mov     eax, [ebp+var_10]
.text$mn:000068E1                 cmp     dword ptr [eax], 0
.text$mn:000068E4                 jz      short loc_692C
.text$mn:000068E6                 mov     ecx, [ebp+var_10]
.text$mn:000068E9                 mov     edx, [ecx]
.text$mn:000068EB                 mov     eax, [edx+8]
.text$mn:000068EE                 cmp     eax, [ebp+arg_0]
.text$mn:000068F1                 jb      short loc_6900
.text$mn:000068F3                 mov     ecx, [ebp+var_10]
.text$mn:000068F6                 mov     edx, [ecx]
.text$mn:000068F8                 mov     eax, [ebp+arg_4]
.text$mn:000068FB                 cmp     eax, [edx+8]
.text$mn:000068FE                 jnb     short loc_690F
.text$mn:00006900
.text$mn:00006900 loc_6900:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5Dj
.text$mn:00006900                 mov     ecx, [ebp+var_10]
.text$mn:00006903                 mov     ecx, [ecx]      ; this
.text$mn:00006905                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:0000690A                 mov     [ebp+var_10], eax
.text$mn:0000690D                 jmp     short loc_692A
.text$mn:0000690F ; ---------------------------------------------------------------------------
.text$mn:0000690F
.text$mn:0000690F loc_690F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+6Aj
.text$mn:0000690F                 mov     edx, [ebp+var_10]
.text$mn:00006912                 mov     ecx, [edx]      ; this
.text$mn:00006914                 call    ?_Clrcont@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Clrcont(void)
.text$mn:00006919                 mov     eax, [ebp+var_10]
.text$mn:0000691C                 mov     ecx, [eax]      ; this
.text$mn:0000691E                 call    ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext(void)
.text$mn:00006923                 mov     ecx, [ebp+var_10]
.text$mn:00006926                 mov     edx, [eax]
.text$mn:00006928                 mov     [ecx], edx
.text$mn:0000692A
.text$mn:0000692A loc_692A:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+79j
.text$mn:0000692A                 jmp     short loc_68DE
.text$mn:0000692C ; ---------------------------------------------------------------------------
.text$mn:0000692C
.text$mn:0000692C loc_692C:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+48j
.text$mn:0000692C                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+50j
.text$mn:0000692C                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006933                 lea     ecx, [ebp+var_18] ; this
.text$mn:00006936                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000693B                 mov     ecx, [ebp+var_C]
.text$mn:0000693E                 mov     large fs:0, ecx
.text$mn:00006945                 pop     ecx
.text$mn:00006946                 mov     esp, ebp
.text$mn:00006948                 pop     ebp
.text$mn:00006949                 retn    8
.text$mn:00006949 ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$mn:00006949
.text$mn:00006949 _text$mn        ends
.text$mn:00006949
.text$x:0000694C ; ===========================================================================
.text$x:0000694C
.text$x:0000694C ; Segment type: Pure code
.text$x:0000694C ; Segment permissions: Read/Execute
.text$x:0000694C _text$x         segment para public 'CODE' use32
.text$x:0000694C                 assume cs:_text$x
.text$x:0000694C                 ;org 694Ch
.text$x:0000694C ; COMDAT (pick associative to section at 6894)
.text$x:0000694C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000694C
.text$x:0000694C ; =============== S U B R O U T I N E =======================================
.text$x:0000694C
.text$x:0000694C
.text$x:0000694C __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 proc near
.text$x:0000694C                                         ; DATA XREF: .xdata$x:00009AC8o
.text$x:0000694C                 lea     ecx, [ebp-18h]  ; this
.text$x:0000694F                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000694F __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 endp
.text$x:0000694F
.text$x:00006954
.text$x:00006954 ; =============== S U B R O U T I N E =======================================
.text$x:00006954
.text$x:00006954
.text$x:00006954 __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z proc near
.text$x:00006954                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)+5o
.text$x:00006954
.text$x:00006954 arg_4           = dword ptr  8
.text$x:00006954
.text$x:00006954                 mov     edx, [esp+arg_4]
.text$x:00006958                 lea     eax, [edx+0Ch]
.text$x:0000695B                 mov     ecx, [edx-10h]
.text$x:0000695E                 xor     ecx, eax
.text$x:00006960                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006965                 mov     eax, offset __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.text$x:0000696A                 jmp     ___CxxFrameHandler3
.text$x:0000696A __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z endp
.text$x:0000696A
.text$x:0000696A ; ---------------------------------------------------------------------------
.text$x:0000696F                 align 10h
.text$x:0000696F _text$x         ends
.text$x:0000696F
.text$mn:00006970 ; ===========================================================================
.text$mn:00006970
.text$mn:00006970 ; Segment type: Pure code
.text$mn:00006970 ; Segment permissions: Read/Execute
.text$mn:00006970 _text$mn        segment para public 'CODE' use32
.text$mn:00006970                 assume cs:_text$mn
.text$mn:00006970                 ;org 6970h
.text$mn:00006970 ; COMDAT (pick any)
.text$mn:00006970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006970
.text$mn:00006970 ; =============== S U B R O U T I N E =======================================
.text$mn:00006970
.text$mn:00006970 ; Attributes: bp-based frame
.text$mn:00006970
.text$mn:00006970 ; public: static unsigned int __cdecl std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Pdif(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>>)
.text$mn:00006970                 public ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z
.text$mn:00006970 ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z proc near
.text$mn:00006970                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+89p
.text$mn:00006970                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+FAp ...
.text$mn:00006970
.text$mn:00006970 var_14          = dword ptr -14h
.text$mn:00006970 var_10          = dword ptr -10h
.text$mn:00006970 var_C           = dword ptr -0Ch
.text$mn:00006970 var_4           = dword ptr -4
.text$mn:00006970 arg_0           = byte ptr  8
.text$mn:00006970 arg_8           = dword ptr  10h
.text$mn:00006970 arg_C           = byte ptr  14h
.text$mn:00006970
.text$mn:00006970                 push    ebp
.text$mn:00006971                 mov     ebp, esp
.text$mn:00006973                 push    0FFFFFFFFh
.text$mn:00006975                 push    offset __ehhandler$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z
.text$mn:0000697A                 mov     eax, large fs:0
.text$mn:00006980                 push    eax
.text$mn:00006981                 sub     esp, 8
.text$mn:00006984                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006989                 xor     eax, ebp
.text$mn:0000698B                 push    eax
.text$mn:0000698C                 lea     eax, [ebp+var_C]
.text$mn:0000698F                 mov     large fs:0, eax
.text$mn:00006995                 mov     [ebp+var_4], 1
.text$mn:0000699C                 cmp     [ebp+arg_8], 0
.text$mn:000069A0                 jnz     short loc_69AB
.text$mn:000069A2                 mov     [ebp+var_10], 0
.text$mn:000069A9                 jmp     short loc_69BA
.text$mn:000069AB ; ---------------------------------------------------------------------------
.text$mn:000069AB
.text$mn:000069AB loc_69AB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>)+30j
.text$mn:000069AB                 lea     eax, [ebp+arg_C]
.text$mn:000069AE                 push    eax             ; std::_Iterator_base12 *
.text$mn:000069AF                 lea     ecx, [ebp+arg_0]
.text$mn:000069B2                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:000069B7                 mov     [ebp+var_10], eax
.text$mn:000069BA
.text$mn:000069BA loc_69BA:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>)+39j
.text$mn:000069BA                 mov     ecx, [ebp+var_10]
.text$mn:000069BD                 mov     [ebp+var_14], ecx
.text$mn:000069C0                 mov     byte ptr [ebp+var_4], 0
.text$mn:000069C4                 lea     ecx, [ebp+arg_0]
.text$mn:000069C7                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:000069CC                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000069D3                 lea     ecx, [ebp+arg_C]
.text$mn:000069D6                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:000069DB                 mov     eax, [ebp+var_14]
.text$mn:000069DE                 mov     ecx, [ebp+var_C]
.text$mn:000069E1                 mov     large fs:0, ecx
.text$mn:000069E8                 pop     ecx
.text$mn:000069E9                 mov     esp, ebp
.text$mn:000069EB                 pop     ebp
.text$mn:000069EC                 retn
.text$mn:000069EC ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z endp
.text$mn:000069EC
.text$mn:000069EC ; ---------------------------------------------------------------------------
.text$mn:000069ED                 align 10h
.text$mn:000069ED _text$mn        ends
.text$mn:000069ED
.text$x:000069F0 ; ===========================================================================
.text$x:000069F0
.text$x:000069F0 ; Segment type: Pure code
.text$x:000069F0 ; Segment permissions: Read/Execute
.text$x:000069F0 _text$x         segment para public 'CODE' use32
.text$x:000069F0                 assume cs:_text$x
.text$x:000069F0                 ;org 69F0h
.text$x:000069F0 ; COMDAT (pick associative to section at 6970)
.text$x:000069F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000069F0
.text$x:000069F0 ; =============== S U B R O U T I N E =======================================
.text$x:000069F0
.text$x:000069F0
.text$x:000069F0 __unwindfunclet$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z$0 proc near
.text$x:000069F0                                         ; DATA XREF: .xdata$x:0000950Co
.text$x:000069F0                 lea     ecx, [ebp+14h]
.text$x:000069F3                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:000069F3 __unwindfunclet$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z$0 endp
.text$x:000069F3
.text$x:000069F8
.text$x:000069F8 ; =============== S U B R O U T I N E =======================================
.text$x:000069F8
.text$x:000069F8
.text$x:000069F8 __unwindfunclet$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z$1 proc near
.text$x:000069F8                                         ; DATA XREF: .xdata$x:00009514o
.text$x:000069F8                 lea     ecx, [ebp+8]
.text$x:000069FB                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:000069FB __unwindfunclet$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z$1 endp
.text$x:000069FB
.text$x:00006A00
.text$x:00006A00 ; =============== S U B R O U T I N E =======================================
.text$x:00006A00
.text$x:00006A00
.text$x:00006A00 __ehhandler$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z proc near
.text$x:00006A00                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>)+5o
.text$x:00006A00
.text$x:00006A00 arg_4           = dword ptr  8
.text$x:00006A00
.text$x:00006A00                 mov     edx, [esp+arg_4]
.text$x:00006A04                 lea     eax, [edx+0Ch]
.text$x:00006A07                 mov     ecx, [edx-0Ch]
.text$x:00006A0A                 xor     ecx, eax
.text$x:00006A0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A11                 mov     eax, offset __ehfuncinfo$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z
.text$x:00006A16                 jmp     ___CxxFrameHandler3
.text$x:00006A16 __ehhandler$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z endp
.text$x:00006A16
.text$x:00006A16 ; ---------------------------------------------------------------------------
.text$x:00006A1B                 align 4
.text$x:00006A1B _text$x         ends
.text$x:00006A1B
.text$mn:00006A1C ; ===========================================================================
.text$mn:00006A1C
.text$mn:00006A1C ; Segment type: Pure code
.text$mn:00006A1C ; Segment permissions: Read/Execute
.text$mn:00006A1C _text$mn        segment para public 'CODE' use32
.text$mn:00006A1C                 assume cs:_text$mn
.text$mn:00006A1C                 ;org 6A1Ch
.text$mn:00006A1C ; COMDAT (pick any)
.text$mn:00006A1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A1C
.text$mn:00006A1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006A1C
.text$mn:00006A1C ; Attributes: bp-based frame
.text$mn:00006A1C
.text$mn:00006A1C ; protected: void __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Reallocate(unsigned int)
.text$mn:00006A1C                 public ?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.text$mn:00006A1C ?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:00006A1C                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)+4Ep
.text$mn:00006A1C
.text$mn:00006A1C var_20          = dword ptr -20h
.text$mn:00006A1C var_1C          = dword ptr -1Ch
.text$mn:00006A1C var_18          = dword ptr -18h
.text$mn:00006A1C var_13          = byte ptr -13h
.text$mn:00006A1C var_11          = byte ptr -11h
.text$mn:00006A1C var_10          = dword ptr -10h
.text$mn:00006A1C var_C           = dword ptr -0Ch
.text$mn:00006A1C var_4           = dword ptr -4
.text$mn:00006A1C arg_0           = dword ptr  8
.text$mn:00006A1C
.text$mn:00006A1C ; FUNCTION CHUNK AT .text$mn:00006AB2 SIZE 00000009 BYTES
.text$mn:00006A1C ; FUNCTION CHUNK AT .text$mn:00006AC2 SIZE 00000098 BYTES
.text$mn:00006A1C
.text$mn:00006A1C                 push    ebp
.text$mn:00006A1D                 mov     ebp, esp
.text$mn:00006A1F                 push    0FFFFFFFFh
.text$mn:00006A21                 push    offset __ehhandler$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.text$mn:00006A26                 mov     eax, large fs:0
.text$mn:00006A2C                 push    eax
.text$mn:00006A2D                 push    ecx
.text$mn:00006A2E                 sub     esp, 10h
.text$mn:00006A31                 push    ebx
.text$mn:00006A32                 push    esi
.text$mn:00006A33                 push    edi
.text$mn:00006A34                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006A39                 xor     eax, ebp
.text$mn:00006A3B                 push    eax
.text$mn:00006A3C                 lea     eax, [ebp+var_C]
.text$mn:00006A3F                 mov     large fs:0, eax
.text$mn:00006A45                 mov     [ebp+var_10], esp
.text$mn:00006A48                 mov     [ebp+var_18], ecx
.text$mn:00006A4B                 mov     eax, [ebp+arg_0]
.text$mn:00006A4E                 push    eax
.text$mn:00006A4F                 lea     ecx, [ebp+var_11]
.text$mn:00006A52                 push    ecx
.text$mn:00006A53                 mov     ecx, [ebp+var_18]
.text$mn:00006A56                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)
.text$mn:00006A5B                 mov     ecx, eax
.text$mn:00006A5D                 call    ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::allocate(uint)
.text$mn:00006A62                 mov     [ebp+var_1C], eax
.text$mn:00006A65                 mov     [ebp+var_4], 0
.text$mn:00006A6C                 mov     edx, [ebp+var_1C]
.text$mn:00006A6F                 push    edx
.text$mn:00006A70                 mov     eax, [ebp+var_18]
.text$mn:00006A73                 mov     ecx, [eax+8]
.text$mn:00006A76                 push    ecx
.text$mn:00006A77                 mov     edx, [ebp+var_18]
.text$mn:00006A7A                 mov     eax, [edx+4]
.text$mn:00006A7D                 push    eax
.text$mn:00006A7E                 mov     ecx, [ebp+var_18]
.text$mn:00006A81                 call    ??$_Umove@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@PAU21@00@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Umove<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00006A86                 jmp     short loc_6AB2
.text$mn:00006A86 ?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z endp
.text$mn:00006A86
.text$mn:00006A88
.text$mn:00006A88 ; =============== S U B R O U T I N E =======================================
.text$mn:00006A88
.text$mn:00006A88 ; Attributes: noreturn
.text$mn:00006A88
.text$mn:00006A88 __catch$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z$0 proc near
.text$mn:00006A88                                         ; DATA XREF: .xdata$x:00009AFCo
.text$mn:00006A88                 mov     ecx, [ebp+8]
.text$mn:00006A8B                 push    ecx             ; int
.text$mn:00006A8C                 mov     edx, [ebp-1Ch]
.text$mn:00006A8F                 push    edx             ; void *
.text$mn:00006A90                 lea     eax, [ebp-12h]
.text$mn:00006A93                 push    eax
.text$mn:00006A94                 mov     ecx, [ebp-18h]
.text$mn:00006A97                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)
.text$mn:00006A9C                 mov     ecx, eax
.text$mn:00006A9E                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::deallocate(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,uint)
.text$mn:00006AA3                 push    0
.text$mn:00006AA5                 push    0
.text$mn:00006AA7                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00006AA7 __catch$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z$0 endp
.text$mn:00006AA7
.text$mn:00006AAC ; ---------------------------------------------------------------------------
.text$mn:00006AAC                 mov     eax, offset $LN8_0
.text$mn:00006AB1                 retn
.text$mn:00006AB2 ; ---------------------------------------------------------------------------
.text$mn:00006AB2 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.text$mn:00006AB2
.text$mn:00006AB2 loc_6AB2:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+6Aj
.text$mn:00006AB2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006AB9                 jmp     short loc_6AC2
.text$mn:00006AB9 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.text$mn:00006ABB
.text$mn:00006ABB ; =============== S U B R O U T I N E =======================================
.text$mn:00006ABB
.text$mn:00006ABB
.text$mn:00006ABB $LN8_0          proc near               ; DATA XREF: .text$mn:00006AACo
.text$mn:00006ABB                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00006ABB $LN8_0          endp ; sp-analysis failed
.text$mn:00006ABB
.text$mn:00006AC2 ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.text$mn:00006AC2
.text$mn:00006AC2 loc_6AC2:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+9Dj
.text$mn:00006AC2                 mov     ecx, [ebp+var_18]
.text$mn:00006AC5                 call    ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::size(void)
.text$mn:00006ACA                 mov     [ebp+var_20], eax
.text$mn:00006ACD                 mov     ecx, [ebp+var_18]
.text$mn:00006AD0                 cmp     dword ptr [ecx+4], 0
.text$mn:00006AD4                 jz      short loc_6B1B
.text$mn:00006AD6                 mov     edx, [ebp+var_18]
.text$mn:00006AD9                 mov     eax, [edx+8]
.text$mn:00006ADC                 push    eax
.text$mn:00006ADD                 mov     ecx, [ebp+var_18]
.text$mn:00006AE0                 mov     edx, [ecx+4]
.text$mn:00006AE3                 push    edx
.text$mn:00006AE4                 mov     ecx, [ebp+var_18]
.text$mn:00006AE7                 call    ?_Destroy@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Destroy(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00006AEC                 mov     eax, [ebp+var_18]
.text$mn:00006AEF                 mov     ecx, [ebp+var_18]
.text$mn:00006AF2                 mov     eax, [eax+0Ch]
.text$mn:00006AF5                 sub     eax, [ecx+4]
.text$mn:00006AF8                 cdq
.text$mn:00006AF9                 mov     ecx, 38h ; '8'
.text$mn:00006AFE                 idiv    ecx
.text$mn:00006B00                 push    eax             ; int
.text$mn:00006B01                 mov     edx, [ebp+var_18]
.text$mn:00006B04                 mov     eax, [edx+4]
.text$mn:00006B07                 push    eax             ; void *
.text$mn:00006B08                 lea     ecx, [ebp+var_13]
.text$mn:00006B0B                 push    ecx
.text$mn:00006B0C                 mov     ecx, [ebp+var_18]
.text$mn:00006B0F                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)
.text$mn:00006B14                 mov     ecx, eax
.text$mn:00006B16                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::deallocate(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,uint)
.text$mn:00006B1B
.text$mn:00006B1B loc_6B1B:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+B8j
.text$mn:00006B1B                 mov     ecx, [ebp+var_18] ; this
.text$mn:00006B1E                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006B23                 imul    edx, [ebp+arg_0], 38h
.text$mn:00006B27                 add     edx, [ebp+var_1C]
.text$mn:00006B2A                 mov     eax, [ebp+var_18]
.text$mn:00006B2D                 mov     [eax+0Ch], edx
.text$mn:00006B30                 imul    ecx, [ebp+var_20], 38h
.text$mn:00006B34                 add     ecx, [ebp+var_1C]
.text$mn:00006B37                 mov     edx, [ebp+var_18]
.text$mn:00006B3A                 mov     [edx+8], ecx
.text$mn:00006B3D                 mov     eax, [ebp+var_18]
.text$mn:00006B40                 mov     ecx, [ebp+var_1C]
.text$mn:00006B43                 mov     [eax+4], ecx
.text$mn:00006B46                 mov     ecx, [ebp+var_C]
.text$mn:00006B49                 mov     large fs:0, ecx
.text$mn:00006B50                 pop     ecx
.text$mn:00006B51                 pop     edi
.text$mn:00006B52                 pop     esi
.text$mn:00006B53                 pop     ebx
.text$mn:00006B54                 mov     esp, ebp
.text$mn:00006B56                 pop     ebp
.text$mn:00006B57                 retn    4
.text$mn:00006B57 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.text$mn:00006B57 ; ---------------------------------------------------------------------------
.text$mn:00006B5A                 align 4
.text$mn:00006B5A _text$mn        ends
.text$mn:00006B5A
.text$x:00006B5C ; ===========================================================================
.text$x:00006B5C
.text$x:00006B5C ; Segment type: Pure code
.text$x:00006B5C ; Segment permissions: Read/Execute
.text$x:00006B5C _text$x         segment para public 'CODE' use32
.text$x:00006B5C                 assume cs:_text$x
.text$x:00006B5C                 ;org 6B5Ch
.text$x:00006B5C ; COMDAT (pick associative to section at 6A1C)
.text$x:00006B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B5C
.text$x:00006B5C ; =============== S U B R O U T I N E =======================================
.text$x:00006B5C
.text$x:00006B5C
.text$x:00006B5C __ehhandler$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z proc near
.text$x:00006B5C                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+5o
.text$x:00006B5C
.text$x:00006B5C arg_4           = dword ptr  8
.text$x:00006B5C
.text$x:00006B5C                 mov     edx, [esp+arg_4]
.text$x:00006B60                 lea     eax, [edx+0Ch]
.text$x:00006B63                 mov     ecx, [edx-24h]
.text$x:00006B66                 xor     ecx, eax
.text$x:00006B68                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B6D                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.text$x:00006B72                 jmp     ___CxxFrameHandler3
.text$x:00006B72 __ehhandler$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z endp
.text$x:00006B72
.text$x:00006B72 ; ---------------------------------------------------------------------------
.text$x:00006B77                 align 4
.text$x:00006B77 _text$x         ends
.text$x:00006B77
.text$mn:00006B78 ; ===========================================================================
.text$mn:00006B78
.text$mn:00006B78 ; Segment type: Pure code
.text$mn:00006B78 ; Segment permissions: Read/Execute
.text$mn:00006B78 _text$mn        segment para public 'CODE' use32
.text$mn:00006B78                 assume cs:_text$mn
.text$mn:00006B78                 ;org 6B78h
.text$mn:00006B78 ; COMDAT (pick any)
.text$mn:00006B78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B78
.text$mn:00006B78 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B78
.text$mn:00006B78 ; Attributes: bp-based frame
.text$mn:00006B78
.text$mn:00006B78 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reallocate(unsigned int)
.text$mn:00006B78                 public ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00006B78 ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:00006B78                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+4Ep
.text$mn:00006B78
.text$mn:00006B78 var_20          = dword ptr -20h
.text$mn:00006B78 var_1C          = dword ptr -1Ch
.text$mn:00006B78 var_18          = dword ptr -18h
.text$mn:00006B78 var_13          = byte ptr -13h
.text$mn:00006B78 var_11          = byte ptr -11h
.text$mn:00006B78 var_10          = dword ptr -10h
.text$mn:00006B78 var_C           = dword ptr -0Ch
.text$mn:00006B78 var_4           = dword ptr -4
.text$mn:00006B78 arg_0           = dword ptr  8
.text$mn:00006B78
.text$mn:00006B78 ; FUNCTION CHUNK AT .text$mn:00006C0E SIZE 00000009 BYTES
.text$mn:00006B78 ; FUNCTION CHUNK AT .text$mn:00006C1E SIZE 00000098 BYTES
.text$mn:00006B78
.text$mn:00006B78                 push    ebp
.text$mn:00006B79                 mov     ebp, esp
.text$mn:00006B7B                 push    0FFFFFFFFh
.text$mn:00006B7D                 push    offset __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00006B82                 mov     eax, large fs:0
.text$mn:00006B88                 push    eax
.text$mn:00006B89                 push    ecx
.text$mn:00006B8A                 sub     esp, 10h
.text$mn:00006B8D                 push    ebx
.text$mn:00006B8E                 push    esi
.text$mn:00006B8F                 push    edi
.text$mn:00006B90                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006B95                 xor     eax, ebp
.text$mn:00006B97                 push    eax
.text$mn:00006B98                 lea     eax, [ebp+var_C]
.text$mn:00006B9B                 mov     large fs:0, eax
.text$mn:00006BA1                 mov     [ebp+var_10], esp
.text$mn:00006BA4                 mov     [ebp+var_18], ecx
.text$mn:00006BA7                 mov     eax, [ebp+arg_0]
.text$mn:00006BAA                 push    eax
.text$mn:00006BAB                 lea     ecx, [ebp+var_11]
.text$mn:00006BAE                 push    ecx
.text$mn:00006BAF                 mov     ecx, [ebp+var_18]
.text$mn:00006BB2                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00006BB7                 mov     ecx, eax
.text$mn:00006BB9                 call    ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)
.text$mn:00006BBE                 mov     [ebp+var_1C], eax
.text$mn:00006BC1                 mov     [ebp+var_4], 0
.text$mn:00006BC8                 mov     edx, [ebp+var_1C]
.text$mn:00006BCB                 push    edx
.text$mn:00006BCC                 mov     eax, [ebp+var_18]
.text$mn:00006BCF                 mov     ecx, [eax+8]
.text$mn:00006BD2                 push    ecx
.text$mn:00006BD3                 mov     edx, [ebp+var_18]
.text$mn:00006BD6                 mov     eax, [edx+4]
.text$mn:00006BD9                 push    eax
.text$mn:00006BDA                 mov     ecx, [ebp+var_18]
.text$mn:00006BDD                 call    ??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Umove<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006BE2                 jmp     short loc_6C0E
.text$mn:00006BE2 ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:00006BE2
.text$mn:00006BE4
.text$mn:00006BE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BE4
.text$mn:00006BE4 ; Attributes: noreturn
.text$mn:00006BE4
.text$mn:00006BE4 __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 proc near
.text$mn:00006BE4                                         ; DATA XREF: .xdata$x:00009A78o
.text$mn:00006BE4                 mov     ecx, [ebp+8]
.text$mn:00006BE7                 push    ecx             ; int
.text$mn:00006BE8                 mov     edx, [ebp-1Ch]
.text$mn:00006BEB                 push    edx             ; void *
.text$mn:00006BEC                 lea     eax, [ebp-12h]
.text$mn:00006BEF                 push    eax
.text$mn:00006BF0                 mov     ecx, [ebp-18h]
.text$mn:00006BF3                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00006BF8                 mov     ecx, eax
.text$mn:00006BFA                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:00006BFF                 push    0
.text$mn:00006C01                 push    0
.text$mn:00006C03                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00006C03 __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0 endp
.text$mn:00006C03
.text$mn:00006C08 ; ---------------------------------------------------------------------------
.text$mn:00006C08                 mov     eax, offset $LN8
.text$mn:00006C0D                 retn
.text$mn:00006C0E ; ---------------------------------------------------------------------------
.text$mn:00006C0E ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00006C0E
.text$mn:00006C0E loc_6C0E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+6Aj
.text$mn:00006C0E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006C15                 jmp     short loc_6C1E
.text$mn:00006C15 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00006C17
.text$mn:00006C17 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C17
.text$mn:00006C17
.text$mn:00006C17 $LN8            proc near               ; DATA XREF: .text$mn:00006C08o
.text$mn:00006C17                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00006C17 $LN8            endp ; sp-analysis failed
.text$mn:00006C17
.text$mn:00006C1E ; START OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00006C1E
.text$mn:00006C1E loc_6C1E:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+9Dj
.text$mn:00006C1E                 mov     ecx, [ebp+var_18]
.text$mn:00006C21                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00006C26                 mov     [ebp+var_20], eax
.text$mn:00006C29                 mov     ecx, [ebp+var_18]
.text$mn:00006C2C                 cmp     dword ptr [ecx+4], 0
.text$mn:00006C30                 jz      short loc_6C77
.text$mn:00006C32                 mov     edx, [ebp+var_18]
.text$mn:00006C35                 mov     eax, [edx+8]
.text$mn:00006C38                 push    eax
.text$mn:00006C39                 mov     ecx, [ebp+var_18]
.text$mn:00006C3C                 mov     edx, [ecx+4]
.text$mn:00006C3F                 push    edx
.text$mn:00006C40                 mov     ecx, [ebp+var_18]
.text$mn:00006C43                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006C48                 mov     eax, [ebp+var_18]
.text$mn:00006C4B                 mov     ecx, [ebp+var_18]
.text$mn:00006C4E                 mov     eax, [eax+0Ch]
.text$mn:00006C51                 sub     eax, [ecx+4]
.text$mn:00006C54                 cdq
.text$mn:00006C55                 mov     ecx, 1Ch
.text$mn:00006C5A                 idiv    ecx
.text$mn:00006C5C                 push    eax             ; int
.text$mn:00006C5D                 mov     edx, [ebp+var_18]
.text$mn:00006C60                 mov     eax, [edx+4]
.text$mn:00006C63                 push    eax             ; void *
.text$mn:00006C64                 lea     ecx, [ebp+var_13]
.text$mn:00006C67                 push    ecx
.text$mn:00006C68                 mov     ecx, [ebp+var_18]
.text$mn:00006C6B                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00006C70                 mov     ecx, eax
.text$mn:00006C72                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:00006C77
.text$mn:00006C77 loc_6C77:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+B8j
.text$mn:00006C77                 mov     ecx, [ebp+var_18] ; this
.text$mn:00006C7A                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006C7F                 imul    edx, [ebp+arg_0], 1Ch
.text$mn:00006C83                 add     edx, [ebp+var_1C]
.text$mn:00006C86                 mov     eax, [ebp+var_18]
.text$mn:00006C89                 mov     [eax+0Ch], edx
.text$mn:00006C8C                 imul    ecx, [ebp+var_20], 1Ch
.text$mn:00006C90                 add     ecx, [ebp+var_1C]
.text$mn:00006C93                 mov     edx, [ebp+var_18]
.text$mn:00006C96                 mov     [edx+8], ecx
.text$mn:00006C99                 mov     eax, [ebp+var_18]
.text$mn:00006C9C                 mov     ecx, [ebp+var_1C]
.text$mn:00006C9F                 mov     [eax+4], ecx
.text$mn:00006CA2                 mov     ecx, [ebp+var_C]
.text$mn:00006CA5                 mov     large fs:0, ecx
.text$mn:00006CAC                 pop     ecx
.text$mn:00006CAD                 pop     edi
.text$mn:00006CAE                 pop     esi
.text$mn:00006CAF                 pop     ebx
.text$mn:00006CB0                 mov     esp, ebp
.text$mn:00006CB2                 pop     ebp
.text$mn:00006CB3                 retn    4
.text$mn:00006CB3 ; END OF FUNCTION CHUNK FOR ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00006CB3 ; ---------------------------------------------------------------------------
.text$mn:00006CB6                 align 4
.text$mn:00006CB6 _text$mn        ends
.text$mn:00006CB6
.text$x:00006CB8 ; ===========================================================================
.text$x:00006CB8
.text$x:00006CB8 ; Segment type: Pure code
.text$x:00006CB8 ; Segment permissions: Read/Execute
.text$x:00006CB8 _text$x         segment para public 'CODE' use32
.text$x:00006CB8                 assume cs:_text$x
.text$x:00006CB8                 ;org 6CB8h
.text$x:00006CB8 ; COMDAT (pick associative to section at 6B78)
.text$x:00006CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006CB8
.text$x:00006CB8 ; =============== S U B R O U T I N E =======================================
.text$x:00006CB8
.text$x:00006CB8
.text$x:00006CB8 __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$x:00006CB8                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+5o
.text$x:00006CB8
.text$x:00006CB8 arg_4           = dword ptr  8
.text$x:00006CB8
.text$x:00006CB8                 mov     edx, [esp+arg_4]
.text$x:00006CBC                 lea     eax, [edx+0Ch]
.text$x:00006CBF                 mov     ecx, [edx-24h]
.text$x:00006CC2                 xor     ecx, eax
.text$x:00006CC4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006CC9                 mov     eax, offset __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$x:00006CCE                 jmp     ___CxxFrameHandler3
.text$x:00006CCE __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$x:00006CCE
.text$x:00006CCE ; ---------------------------------------------------------------------------
.text$x:00006CD3                 align 4
.text$x:00006CD3 _text$x         ends
.text$x:00006CD3
.text$mn:00006CD4 ; ===========================================================================
.text$mn:00006CD4
.text$mn:00006CD4 ; Segment type: Pure code
.text$mn:00006CD4 ; Segment permissions: Read/Execute
.text$mn:00006CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00006CD4                 assume cs:_text$mn
.text$mn:00006CD4                 ;org 6CD4h
.text$mn:00006CD4 ; COMDAT (pick any)
.text$mn:00006CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CD4
.text$mn:00006CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006CD4
.text$mn:00006CD4 ; Attributes: bp-based frame
.text$mn:00006CD4
.text$mn:00006CD4 ; protected: void __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Reserve(unsigned int)
.text$mn:00006CD4                 public ?_Reserve@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.text$mn:00006CD4 ?_Reserve@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:00006CD4                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+59p
.text$mn:00006CD4                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+C6p
.text$mn:00006CD4
.text$mn:00006CD4 var_4           = dword ptr -4
.text$mn:00006CD4 arg_0           = dword ptr  8
.text$mn:00006CD4
.text$mn:00006CD4                 push    ebp
.text$mn:00006CD5                 mov     ebp, esp
.text$mn:00006CD7                 push    ecx
.text$mn:00006CD8                 push    esi
.text$mn:00006CD9                 mov     [ebp+var_4], ecx
.text$mn:00006CDC                 mov     ecx, [ebp+var_4]
.text$mn:00006CDF                 call    ?_Unused_capacity@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Unused_capacity(void)
.text$mn:00006CE4                 cmp     eax, [ebp+arg_0]
.text$mn:00006CE7                 jnb     short loc_6D27
.text$mn:00006CE9                 mov     ecx, [ebp+var_4]
.text$mn:00006CEC                 call    ?max_size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::max_size(void)
.text$mn:00006CF1                 mov     esi, eax
.text$mn:00006CF3                 mov     ecx, [ebp+var_4]
.text$mn:00006CF6                 call    ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::size(void)
.text$mn:00006CFB                 sub     esi, eax
.text$mn:00006CFD                 cmp     esi, [ebp+arg_0]
.text$mn:00006D00                 jnb     short loc_6D0A
.text$mn:00006D02                 mov     ecx, [ebp+var_4]
.text$mn:00006D05                 call    ?_Xlen@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Xlen(void)
.text$mn:00006D0A
.text$mn:00006D0A loc_6D0A:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)+2Cj
.text$mn:00006D0A                 mov     ecx, [ebp+var_4]
.text$mn:00006D0D                 call    ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::size(void)
.text$mn:00006D12                 add     eax, [ebp+arg_0]
.text$mn:00006D15                 push    eax
.text$mn:00006D16                 mov     ecx, [ebp+var_4]
.text$mn:00006D19                 call    ?_Grow_to@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEII@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Grow_to(uint)
.text$mn:00006D1E                 push    eax
.text$mn:00006D1F                 mov     ecx, [ebp+var_4]
.text$mn:00006D22                 call    ?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)
.text$mn:00006D27
.text$mn:00006D27 loc_6D27:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)+13j
.text$mn:00006D27                 pop     esi
.text$mn:00006D28                 mov     esp, ebp
.text$mn:00006D2A                 pop     ebp
.text$mn:00006D2B                 retn    4
.text$mn:00006D2B ?_Reserve@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z endp
.text$mn:00006D2B
.text$mn:00006D2B ; ---------------------------------------------------------------------------
.text$mn:00006D2E                 align 10h
.text$mn:00006D2E _text$mn        ends
.text$mn:00006D2E
.text$mn:00006D30 ; ===========================================================================
.text$mn:00006D30
.text$mn:00006D30 ; Segment type: Pure code
.text$mn:00006D30 ; Segment permissions: Read/Execute
.text$mn:00006D30 _text$mn        segment para public 'CODE' use32
.text$mn:00006D30                 assume cs:_text$mn
.text$mn:00006D30                 ;org 6D30h
.text$mn:00006D30 ; COMDAT (pick any)
.text$mn:00006D30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D30
.text$mn:00006D30 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D30
.text$mn:00006D30 ; Attributes: bp-based frame
.text$mn:00006D30
.text$mn:00006D30 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Reserve(unsigned int)
.text$mn:00006D30                 public ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.text$mn:00006D30 ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z proc near
.text$mn:00006D30                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+59p
.text$mn:00006D30                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+C6p
.text$mn:00006D30
.text$mn:00006D30 var_4           = dword ptr -4
.text$mn:00006D30 arg_0           = dword ptr  8
.text$mn:00006D30
.text$mn:00006D30                 push    ebp
.text$mn:00006D31                 mov     ebp, esp
.text$mn:00006D33                 push    ecx
.text$mn:00006D34                 push    esi
.text$mn:00006D35                 mov     [ebp+var_4], ecx
.text$mn:00006D38                 mov     ecx, [ebp+var_4]
.text$mn:00006D3B                 call    ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Unused_capacity(void)
.text$mn:00006D40                 cmp     eax, [ebp+arg_0]
.text$mn:00006D43                 jnb     short loc_6D83
.text$mn:00006D45                 mov     ecx, [ebp+var_4]
.text$mn:00006D48                 call    ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:00006D4D                 mov     esi, eax
.text$mn:00006D4F                 mov     ecx, [ebp+var_4]
.text$mn:00006D52                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00006D57                 sub     esi, eax
.text$mn:00006D59                 cmp     esi, [ebp+arg_0]
.text$mn:00006D5C                 jnb     short loc_6D66
.text$mn:00006D5E                 mov     ecx, [ebp+var_4]
.text$mn:00006D61                 call    ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)
.text$mn:00006D66
.text$mn:00006D66 loc_6D66:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+2Cj
.text$mn:00006D66                 mov     ecx, [ebp+var_4]
.text$mn:00006D69                 call    ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::size(void)
.text$mn:00006D6E                 add     eax, [ebp+arg_0]
.text$mn:00006D71                 push    eax
.text$mn:00006D72                 mov     ecx, [ebp+var_4]
.text$mn:00006D75                 call    ?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)
.text$mn:00006D7A                 push    eax
.text$mn:00006D7B                 mov     ecx, [ebp+var_4]
.text$mn:00006D7E                 call    ?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)
.text$mn:00006D83
.text$mn:00006D83 loc_6D83:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+13j
.text$mn:00006D83                 pop     esi
.text$mn:00006D84                 mov     esp, ebp
.text$mn:00006D86                 pop     ebp
.text$mn:00006D87                 retn    4
.text$mn:00006D87 ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z endp
.text$mn:00006D87
.text$mn:00006D87 ; ---------------------------------------------------------------------------
.text$mn:00006D8A                 align 4
.text$mn:00006D8A _text$mn        ends
.text$mn:00006D8A
.text$mn:00006D8C ; ===========================================================================
.text$mn:00006D8C
.text$mn:00006D8C ; Segment type: Pure code
.text$mn:00006D8C ; Segment permissions: Read/Execute
.text$mn:00006D8C _text$mn        segment para public 'CODE' use32
.text$mn:00006D8C                 assume cs:_text$mn
.text$mn:00006D8C                 ;org 6D8Ch
.text$mn:00006D8C ; COMDAT (pick any)
.text$mn:00006D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D8C
.text$mn:00006D8C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D8C
.text$mn:00006D8C ; Attributes: bp-based frame
.text$mn:00006D8C
.text$mn:00006D8C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:00006D8C                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:00006D8C ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:00006D8C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:00006D8C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:00006D8C
.text$mn:00006D8C var_C           = dword ptr -0Ch
.text$mn:00006D8C var_8           = dword ptr -8
.text$mn:00006D8C var_2           = byte ptr -2
.text$mn:00006D8C var_1           = byte ptr -1
.text$mn:00006D8C arg_0           = byte ptr  8
.text$mn:00006D8C Size            = dword ptr  0Ch
.text$mn:00006D8C
.text$mn:00006D8C                 push    ebp
.text$mn:00006D8D                 mov     ebp, esp
.text$mn:00006D8F                 sub     esp, 0Ch
.text$mn:00006D92                 mov     [ebp+var_8], ecx
.text$mn:00006D95                 movzx   eax, [ebp+arg_0]
.text$mn:00006D99                 test    eax, eax
.text$mn:00006D9B                 jnz     short loc_6D9F
.text$mn:00006D9D                 jmp     short loc_6E12
.text$mn:00006D9F ; ---------------------------------------------------------------------------
.text$mn:00006D9F
.text$mn:00006D9F loc_6D9F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:00006D9F                 mov     ecx, [ebp+var_8]
.text$mn:00006DA2                 cmp     dword ptr [ecx+18h], 10h
.text$mn:00006DA6                 jb      short loc_6E12
.text$mn:00006DA8                 mov     edx, [ebp+var_8]
.text$mn:00006DAB                 mov     eax, [edx+4]
.text$mn:00006DAE                 mov     [ebp+var_C], eax
.text$mn:00006DB1                 mov     ecx, [ebp+var_8]
.text$mn:00006DB4                 add     ecx, 4
.text$mn:00006DB7                 push    ecx
.text$mn:00006DB8                 lea     edx, [ebp+var_1]
.text$mn:00006DBB                 push    edx
.text$mn:00006DBC                 mov     ecx, [ebp+var_8]
.text$mn:00006DBF                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00006DC4                 mov     ecx, eax
.text$mn:00006DC6                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00006DCB                 cmp     [ebp+Size], 0
.text$mn:00006DCF                 jbe     short loc_6DF1
.text$mn:00006DD1                 mov     eax, [ebp+Size]
.text$mn:00006DD4                 push    eax             ; Size
.text$mn:00006DD5                 mov     ecx, [ebp+var_C]
.text$mn:00006DD8                 push    ecx
.text$mn:00006DD9                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00006DDE                 add     esp, 4
.text$mn:00006DE1                 push    eax             ; Src
.text$mn:00006DE2                 mov     edx, [ebp+var_8]
.text$mn:00006DE5                 add     edx, 4
.text$mn:00006DE8                 push    edx             ; Dst
.text$mn:00006DE9                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00006DEE                 add     esp, 0Ch
.text$mn:00006DF1
.text$mn:00006DF1 loc_6DF1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00006DF1                 mov     eax, [ebp+var_8]
.text$mn:00006DF4                 mov     ecx, [eax+18h]
.text$mn:00006DF7                 add     ecx, 1
.text$mn:00006DFA                 push    ecx             ; int
.text$mn:00006DFB                 mov     edx, [ebp+var_C]
.text$mn:00006DFE                 push    edx             ; void *
.text$mn:00006DFF                 lea     eax, [ebp+var_2]
.text$mn:00006E02                 push    eax
.text$mn:00006E03                 mov     ecx, [ebp+var_8]
.text$mn:00006E06                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00006E0B                 mov     ecx, eax
.text$mn:00006E0D                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:00006E12
.text$mn:00006E12 loc_6E12:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:00006E12                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:00006E12                 mov     ecx, [ebp+var_8]
.text$mn:00006E15                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00006E1C                 mov     edx, [ebp+Size]
.text$mn:00006E1F                 push    edx
.text$mn:00006E20                 mov     ecx, [ebp+var_8]
.text$mn:00006E23                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00006E28                 mov     esp, ebp
.text$mn:00006E2A                 pop     ebp
.text$mn:00006E2B                 retn    8
.text$mn:00006E2B ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00006E2B
.text$mn:00006E2B ; ---------------------------------------------------------------------------
.text$mn:00006E2E                 align 10h
.text$mn:00006E2E _text$mn        ends
.text$mn:00006E2E
.text$mn:00006E30 ; ===========================================================================
.text$mn:00006E30
.text$mn:00006E30 ; Segment type: Pure code
.text$mn:00006E30 ; Segment permissions: Read/Execute
.text$mn:00006E30 _text$mn        segment para public 'CODE' use32
.text$mn:00006E30                 assume cs:_text$mn
.text$mn:00006E30                 ;org 6E30h
.text$mn:00006E30 ; COMDAT (pick any)
.text$mn:00006E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E30
.text$mn:00006E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E30
.text$mn:00006E30 ; Attributes: bp-based frame
.text$mn:00006E30
.text$mn:00006E30 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00006E30                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00006E30 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00006E30                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+4Bp
.text$mn:00006E30                                         ; __catch$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$0+7p ...
.text$mn:00006E30
.text$mn:00006E30 var_C           = dword ptr -0Ch
.text$mn:00006E30 var_8           = dword ptr -8
.text$mn:00006E30 var_2           = byte ptr -2
.text$mn:00006E30 var_1           = byte ptr -1
.text$mn:00006E30 arg_0           = byte ptr  8
.text$mn:00006E30 arg_4           = dword ptr  0Ch
.text$mn:00006E30
.text$mn:00006E30                 push    ebp
.text$mn:00006E31                 mov     ebp, esp
.text$mn:00006E33                 sub     esp, 0Ch
.text$mn:00006E36                 mov     [ebp+var_8], ecx
.text$mn:00006E39                 movzx   eax, [ebp+arg_0]
.text$mn:00006E3D                 test    eax, eax
.text$mn:00006E3F                 jnz     short loc_6E43
.text$mn:00006E41                 jmp     short loc_6EB6
.text$mn:00006E43 ; ---------------------------------------------------------------------------
.text$mn:00006E43
.text$mn:00006E43 loc_6E43:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:00006E43                 mov     ecx, [ebp+var_8]
.text$mn:00006E46                 cmp     dword ptr [ecx+18h], 8
.text$mn:00006E4A                 jb      short loc_6EB6
.text$mn:00006E4C                 mov     edx, [ebp+var_8]
.text$mn:00006E4F                 mov     eax, [edx+4]
.text$mn:00006E52                 mov     [ebp+var_C], eax
.text$mn:00006E55                 mov     ecx, [ebp+var_8]
.text$mn:00006E58                 add     ecx, 4
.text$mn:00006E5B                 push    ecx
.text$mn:00006E5C                 lea     edx, [ebp+var_1]
.text$mn:00006E5F                 push    edx
.text$mn:00006E60                 mov     ecx, [ebp+var_8]
.text$mn:00006E63                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006E68                 mov     ecx, eax
.text$mn:00006E6A                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00006E6F                 cmp     [ebp+arg_4], 0
.text$mn:00006E73                 jbe     short loc_6E95
.text$mn:00006E75                 mov     eax, [ebp+arg_4]
.text$mn:00006E78                 push    eax             ; int
.text$mn:00006E79                 mov     ecx, [ebp+var_C]
.text$mn:00006E7C                 push    ecx
.text$mn:00006E7D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00006E82                 add     esp, 4
.text$mn:00006E85                 push    eax             ; Src
.text$mn:00006E86                 mov     edx, [ebp+var_8]
.text$mn:00006E89                 add     edx, 4
.text$mn:00006E8C                 push    edx             ; Dst
.text$mn:00006E8D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00006E92                 add     esp, 0Ch
.text$mn:00006E95
.text$mn:00006E95 loc_6E95:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:00006E95                 mov     eax, [ebp+var_8]
.text$mn:00006E98                 mov     ecx, [eax+18h]
.text$mn:00006E9B                 add     ecx, 1
.text$mn:00006E9E                 push    ecx             ; int
.text$mn:00006E9F                 mov     edx, [ebp+var_C]
.text$mn:00006EA2                 push    edx             ; void *
.text$mn:00006EA3                 lea     eax, [ebp+var_2]
.text$mn:00006EA6                 push    eax
.text$mn:00006EA7                 mov     ecx, [ebp+var_8]
.text$mn:00006EAA                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006EAF                 mov     ecx, eax
.text$mn:00006EB1                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:00006EB6
.text$mn:00006EB6 loc_6EB6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:00006EB6                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:00006EB6                 mov     ecx, [ebp+var_8]
.text$mn:00006EB9                 mov     dword ptr [ecx+18h], 7
.text$mn:00006EC0                 mov     edx, [ebp+arg_4]
.text$mn:00006EC3                 push    edx
.text$mn:00006EC4                 mov     ecx, [ebp+var_8]
.text$mn:00006EC7                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00006ECC                 mov     esp, ebp
.text$mn:00006ECE                 pop     ebp
.text$mn:00006ECF                 retn    8
.text$mn:00006ECF ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:00006ECF
.text$mn:00006ECF ; ---------------------------------------------------------------------------
.text$mn:00006ED2                 align 4
.text$mn:00006ED2 _text$mn        ends
.text$mn:00006ED2
.text$mn:00006ED4 ; ===========================================================================
.text$mn:00006ED4
.text$mn:00006ED4 ; Segment type: Pure code
.text$mn:00006ED4 ; Segment permissions: Read/Execute
.text$mn:00006ED4 _text$mn        segment para public 'CODE' use32
.text$mn:00006ED4                 assume cs:_text$mn
.text$mn:00006ED4                 ;org 6ED4h
.text$mn:00006ED4 ; COMDAT (pick any)
.text$mn:00006ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006ED4
.text$mn:00006ED4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006ED4
.text$mn:00006ED4 ; Attributes: bp-based frame
.text$mn:00006ED4
.text$mn:00006ED4 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Tidy(void)
.text$mn:00006ED4                 public ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ
.text$mn:00006ED4 ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ proc near
.text$mn:00006ED4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::~vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(void)+30p
.text$mn:00006ED4
.text$mn:00006ED4 var_8           = dword ptr -8
.text$mn:00006ED4 var_1           = byte ptr -1
.text$mn:00006ED4
.text$mn:00006ED4                 push    ebp
.text$mn:00006ED5                 mov     ebp, esp
.text$mn:00006ED7                 sub     esp, 8
.text$mn:00006EDA                 mov     [ebp+var_8], ecx
.text$mn:00006EDD                 mov     eax, [ebp+var_8]
.text$mn:00006EE0                 cmp     dword ptr [eax+4], 0
.text$mn:00006EE4                 jz      short loc_6F53
.text$mn:00006EE6                 mov     ecx, [ebp+var_8] ; this
.text$mn:00006EE9                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006EEE                 mov     ecx, [ebp+var_8]
.text$mn:00006EF1                 mov     edx, [ecx+8]
.text$mn:00006EF4                 push    edx
.text$mn:00006EF5                 mov     eax, [ebp+var_8]
.text$mn:00006EF8                 mov     ecx, [eax+4]
.text$mn:00006EFB                 push    ecx
.text$mn:00006EFC                 mov     ecx, [ebp+var_8]
.text$mn:00006EFF                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00006F04                 mov     edx, [ebp+var_8]
.text$mn:00006F07                 mov     eax, [ebp+var_8]
.text$mn:00006F0A                 mov     ecx, [edx+0Ch]
.text$mn:00006F0D                 sub     ecx, [eax+4]
.text$mn:00006F10                 mov     eax, ecx
.text$mn:00006F12                 cdq
.text$mn:00006F13                 mov     ecx, 1Ch
.text$mn:00006F18                 idiv    ecx
.text$mn:00006F1A                 push    eax             ; int
.text$mn:00006F1B                 mov     edx, [ebp+var_8]
.text$mn:00006F1E                 mov     eax, [edx+4]
.text$mn:00006F21                 push    eax             ; void *
.text$mn:00006F22                 lea     ecx, [ebp+var_1]
.text$mn:00006F25                 push    ecx
.text$mn:00006F26                 mov     ecx, [ebp+var_8]
.text$mn:00006F29                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00006F2E                 mov     ecx, eax
.text$mn:00006F30                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:00006F35                 mov     edx, [ebp+var_8]
.text$mn:00006F38                 mov     dword ptr [edx+4], 0
.text$mn:00006F3F                 mov     eax, [ebp+var_8]
.text$mn:00006F42                 mov     dword ptr [eax+8], 0
.text$mn:00006F49                 mov     ecx, [ebp+var_8]
.text$mn:00006F4C                 mov     dword ptr [ecx+0Ch], 0
.text$mn:00006F53
.text$mn:00006F53 loc_6F53:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Tidy(void)+10j
.text$mn:00006F53                 mov     esp, ebp
.text$mn:00006F55                 pop     ebp
.text$mn:00006F56                 retn
.text$mn:00006F56 ?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ endp
.text$mn:00006F56
.text$mn:00006F56 ; ---------------------------------------------------------------------------
.text$mn:00006F57                 align 4
.text$mn:00006F57 _text$mn        ends
.text$mn:00006F57
.text$mn:00006F58 ; ===========================================================================
.text$mn:00006F58
.text$mn:00006F58 ; Segment type: Pure code
.text$mn:00006F58 ; Segment permissions: Read/Execute
.text$mn:00006F58 _text$mn        segment para public 'CODE' use32
.text$mn:00006F58                 assume cs:_text$mn
.text$mn:00006F58                 ;org 6F58h
.text$mn:00006F58 ; COMDAT (pick any)
.text$mn:00006F58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F58
.text$mn:00006F58 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F58
.text$mn:00006F58 ; Attributes: bp-based frame
.text$mn:00006F58
.text$mn:00006F58 ; public: unsigned int __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Unused_capacity(void)const
.text$mn:00006F58                 public ?_Unused_capacity@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ
.text$mn:00006F58 ?_Unused_capacity@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ proc near
.text$mn:00006F58                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)+Bp
.text$mn:00006F58
.text$mn:00006F58 var_4           = dword ptr -4
.text$mn:00006F58
.text$mn:00006F58                 push    ebp
.text$mn:00006F59                 mov     ebp, esp
.text$mn:00006F5B                 push    ecx
.text$mn:00006F5C                 mov     [ebp+var_4], ecx
.text$mn:00006F5F                 mov     eax, [ebp+var_4]
.text$mn:00006F62                 mov     ecx, [ebp+var_4]
.text$mn:00006F65                 mov     eax, [eax+0Ch]
.text$mn:00006F68                 sub     eax, [ecx+8]
.text$mn:00006F6B                 cdq
.text$mn:00006F6C                 mov     ecx, 38h ; '8'
.text$mn:00006F71                 idiv    ecx
.text$mn:00006F73                 mov     esp, ebp
.text$mn:00006F75                 pop     ebp
.text$mn:00006F76                 retn
.text$mn:00006F76 ?_Unused_capacity@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ endp
.text$mn:00006F76
.text$mn:00006F76 ; ---------------------------------------------------------------------------
.text$mn:00006F77                 align 4
.text$mn:00006F77 _text$mn        ends
.text$mn:00006F77
.text$mn:00006F78 ; ===========================================================================
.text$mn:00006F78
.text$mn:00006F78 ; Segment type: Pure code
.text$mn:00006F78 ; Segment permissions: Read/Execute
.text$mn:00006F78 _text$mn        segment para public 'CODE' use32
.text$mn:00006F78                 assume cs:_text$mn
.text$mn:00006F78                 ;org 6F78h
.text$mn:00006F78 ; COMDAT (pick any)
.text$mn:00006F78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F78
.text$mn:00006F78 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F78
.text$mn:00006F78 ; Attributes: bp-based frame
.text$mn:00006F78
.text$mn:00006F78 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Unused_capacity(void)const
.text$mn:00006F78                 public ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:00006F78 ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:00006F78                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+Bp
.text$mn:00006F78
.text$mn:00006F78 var_4           = dword ptr -4
.text$mn:00006F78
.text$mn:00006F78                 push    ebp
.text$mn:00006F79                 mov     ebp, esp
.text$mn:00006F7B                 push    ecx
.text$mn:00006F7C                 mov     [ebp+var_4], ecx
.text$mn:00006F7F                 mov     eax, [ebp+var_4]
.text$mn:00006F82                 mov     ecx, [ebp+var_4]
.text$mn:00006F85                 mov     eax, [eax+0Ch]
.text$mn:00006F88                 sub     eax, [ecx+8]
.text$mn:00006F8B                 cdq
.text$mn:00006F8C                 mov     ecx, 1Ch
.text$mn:00006F91                 idiv    ecx
.text$mn:00006F93                 mov     esp, ebp
.text$mn:00006F95                 pop     ebp
.text$mn:00006F96                 retn
.text$mn:00006F96 ?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:00006F96
.text$mn:00006F96 ; ---------------------------------------------------------------------------
.text$mn:00006F97                 align 4
.text$mn:00006F97 _text$mn        ends
.text$mn:00006F97
.text$mn:00006F98 ; ===========================================================================
.text$mn:00006F98
.text$mn:00006F98 ; Segment type: Pure code
.text$mn:00006F98 ; Segment permissions: Read/Execute
.text$mn:00006F98 _text$mn        segment para public 'CODE' use32
.text$mn:00006F98                 assume cs:_text$mn
.text$mn:00006F98                 ;org 6F98h
.text$mn:00006F98 ; COMDAT (pick any)
.text$mn:00006F98                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006F98
.text$mn:00006F98 ; =============== S U B R O U T I N E =======================================
.text$mn:00006F98
.text$mn:00006F98 ; Attributes: bp-based frame
.text$mn:00006F98
.text$mn:00006F98 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:00006F98                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00006F98 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00006F98                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:00006F98                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+75p ...
.text$mn:00006F98
.text$mn:00006F98 var_4           = dword ptr -4
.text$mn:00006F98
.text$mn:00006F98                 push    ebp
.text$mn:00006F99                 mov     ebp, esp
.text$mn:00006F9B                 push    ecx
.text$mn:00006F9C                 mov     [ebp+var_4], ecx
.text$mn:00006F9F                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00006FA4                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00006FA9                 mov     esp, ebp
.text$mn:00006FAB                 pop     ebp
.text$mn:00006FAC                 retn
.text$mn:00006FAC ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00006FAC
.text$mn:00006FAC ; ---------------------------------------------------------------------------
.text$mn:00006FAD                 align 10h
.text$mn:00006FAD _text$mn        ends
.text$mn:00006FAD
.text$mn:00006FB0 ; ===========================================================================
.text$mn:00006FB0
.text$mn:00006FB0 ; Segment type: Pure code
.text$mn:00006FB0 ; Segment permissions: Read/Execute
.text$mn:00006FB0 _text$mn        segment para public 'CODE' use32
.text$mn:00006FB0                 assume cs:_text$mn
.text$mn:00006FB0                 ;org 6FB0h
.text$mn:00006FB0 ; COMDAT (pick any)
.text$mn:00006FB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FB0
.text$mn:00006FB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FB0
.text$mn:00006FB0 ; Attributes: bp-based frame
.text$mn:00006FB0
.text$mn:00006FB0 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:00006FB0                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00006FB0 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00006FB0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:00006FB0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+1Ap
.text$mn:00006FB0
.text$mn:00006FB0 var_4           = dword ptr -4
.text$mn:00006FB0
.text$mn:00006FB0                 push    ebp
.text$mn:00006FB1                 mov     ebp, esp
.text$mn:00006FB3                 push    ecx
.text$mn:00006FB4                 mov     [ebp+var_4], ecx
.text$mn:00006FB7                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00006FBC                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00006FC1                 mov     esp, ebp
.text$mn:00006FC3                 pop     ebp
.text$mn:00006FC4                 retn
.text$mn:00006FC4 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00006FC4
.text$mn:00006FC4 ; ---------------------------------------------------------------------------
.text$mn:00006FC5                 align 4
.text$mn:00006FC5 _text$mn        ends
.text$mn:00006FC5
.text$mn:00006FC8 ; ===========================================================================
.text$mn:00006FC8
.text$mn:00006FC8 ; Segment type: Pure code
.text$mn:00006FC8 ; Segment permissions: Read/Execute
.text$mn:00006FC8 _text$mn        segment para public 'CODE' use32
.text$mn:00006FC8                 assume cs:_text$mn
.text$mn:00006FC8                 ;org 6FC8h
.text$mn:00006FC8 ; COMDAT (pick any)
.text$mn:00006FC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FC8
.text$mn:00006FC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FC8
.text$mn:00006FC8 ; Attributes: bp-based frame
.text$mn:00006FC8
.text$mn:00006FC8 ; protected: void __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::_Xlen(void)const
.text$mn:00006FC8                 public ?_Xlen@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXXZ
.text$mn:00006FC8 ?_Xlen@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXXZ proc near
.text$mn:00006FC8                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)+31p
.text$mn:00006FC8
.text$mn:00006FC8 var_4           = dword ptr -4
.text$mn:00006FC8
.text$mn:00006FC8                 push    ebp
.text$mn:00006FC9                 mov     ebp, esp
.text$mn:00006FCB                 push    ecx
.text$mn:00006FCC                 mov     [ebp+var_4], ecx
.text$mn:00006FCF                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:00006FD4                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00006FD9                 mov     esp, ebp
.text$mn:00006FDB                 pop     ebp
.text$mn:00006FDC                 retn
.text$mn:00006FDC ?_Xlen@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXXZ endp
.text$mn:00006FDC
.text$mn:00006FDC ; ---------------------------------------------------------------------------
.text$mn:00006FDD                 align 10h
.text$mn:00006FDD _text$mn        ends
.text$mn:00006FDD
.text$mn:00006FE0 ; ===========================================================================
.text$mn:00006FE0
.text$mn:00006FE0 ; Segment type: Pure code
.text$mn:00006FE0 ; Segment permissions: Read/Execute
.text$mn:00006FE0 _text$mn        segment para public 'CODE' use32
.text$mn:00006FE0                 assume cs:_text$mn
.text$mn:00006FE0                 ;org 6FE0h
.text$mn:00006FE0 ; COMDAT (pick any)
.text$mn:00006FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FE0
.text$mn:00006FE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FE0
.text$mn:00006FE0 ; Attributes: bp-based frame
.text$mn:00006FE0
.text$mn:00006FE0 ; protected: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::_Xlen(void)const
.text$mn:00006FE0                 public ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ
.text$mn:00006FE0 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ proc near
.text$mn:00006FE0                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+31p
.text$mn:00006FE0
.text$mn:00006FE0 var_4           = dword ptr -4
.text$mn:00006FE0
.text$mn:00006FE0                 push    ebp
.text$mn:00006FE1                 mov     ebp, esp
.text$mn:00006FE3                 push    ecx
.text$mn:00006FE4                 mov     [ebp+var_4], ecx
.text$mn:00006FE7                 push    offset ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; "vector<T> too long"
.text$mn:00006FEC                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00006FF1                 mov     esp, ebp
.text$mn:00006FF3                 pop     ebp
.text$mn:00006FF4                 retn
.text$mn:00006FF4 ?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ endp
.text$mn:00006FF4
.text$mn:00006FF4 ; ---------------------------------------------------------------------------
.text$mn:00006FF5                 align 4
.text$mn:00006FF5 _text$mn        ends
.text$mn:00006FF5
.text$mn:00006FF8 ; ===========================================================================
.text$mn:00006FF8
.text$mn:00006FF8 ; Segment type: Pure code
.text$mn:00006FF8 ; Segment permissions: Read/Execute
.text$mn:00006FF8 _text$mn        segment para public 'CODE' use32
.text$mn:00006FF8                 assume cs:_text$mn
.text$mn:00006FF8                 ;org 6FF8h
.text$mn:00006FF8 ; COMDAT (pick any)
.text$mn:00006FF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FF8
.text$mn:00006FF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FF8
.text$mn:00006FF8 ; Attributes: bp-based frame
.text$mn:00006FF8
.text$mn:00006FF8 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:00006FF8                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:00006FF8 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:00006FF8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:00006FF8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+33p ...
.text$mn:00006FF8
.text$mn:00006FF8 var_4           = dword ptr -4
.text$mn:00006FF8
.text$mn:00006FF8                 push    ebp
.text$mn:00006FF9                 mov     ebp, esp
.text$mn:00006FFB                 push    ecx
.text$mn:00006FFC                 mov     [ebp+var_4], ecx
.text$mn:00006FFF                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00007004                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00007009                 mov     esp, ebp
.text$mn:0000700B                 pop     ebp
.text$mn:0000700C                 retn
.text$mn:0000700C ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:0000700C
.text$mn:0000700C ; ---------------------------------------------------------------------------
.text$mn:0000700D                 align 10h
.text$mn:0000700D _text$mn        ends
.text$mn:0000700D
.text$mn:00007010 ; ===========================================================================
.text$mn:00007010
.text$mn:00007010 ; Segment type: Pure code
.text$mn:00007010 ; Segment permissions: Read/Execute
.text$mn:00007010 _text$mn        segment para public 'CODE' use32
.text$mn:00007010                 assume cs:_text$mn
.text$mn:00007010                 ;org 7010h
.text$mn:00007010 ; COMDAT (pick any)
.text$mn:00007010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007010
.text$mn:00007010 ; =============== S U B R O U T I N E =======================================
.text$mn:00007010
.text$mn:00007010 ; Attributes: bp-based frame
.text$mn:00007010
.text$mn:00007010 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00007010                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00007010 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00007010                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00007010                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+33p ...
.text$mn:00007010
.text$mn:00007010 var_4           = dword ptr -4
.text$mn:00007010
.text$mn:00007010                 push    ebp
.text$mn:00007011                 mov     ebp, esp
.text$mn:00007013                 push    ecx
.text$mn:00007014                 mov     [ebp+var_4], ecx
.text$mn:00007017                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:0000701C                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00007021                 mov     esp, ebp
.text$mn:00007023                 pop     ebp
.text$mn:00007024                 retn
.text$mn:00007024 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00007024
.text$mn:00007024 ; ---------------------------------------------------------------------------
.text$mn:00007025                 align 4
.text$mn:00007025 _text$mn        ends
.text$mn:00007025
.text$mn:00007028 ; ===========================================================================
.text$mn:00007028
.text$mn:00007028 ; Segment type: Pure code
.text$mn:00007028 ; Segment permissions: Read/Execute
.text$mn:00007028 _text$mn        segment para public 'CODE' use32
.text$mn:00007028                 assume cs:_text$mn
.text$mn:00007028                 ;org 7028h
.text$mn:00007028 ; COMDAT (pick any)
.text$mn:00007028                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007028
.text$mn:00007028 ; =============== S U B R O U T I N E =======================================
.text$mn:00007028
.text$mn:00007028 ; Attributes: bp-based frame
.text$mn:00007028
.text$mn:00007028 ; public: void __thiscall ThemeSwitcher::addThemeFromXml(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
.text$mn:00007028                 public ?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00007028 ?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$mn:00007028                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+8A5p
.text$mn:00007028                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+A26p
.text$mn:00007028
.text$mn:00007028 var_78          = dword ptr -78h
.text$mn:00007028 var_74          = dword ptr -74h
.text$mn:00007028 var_70          = dword ptr -70h
.text$mn:00007028 var_6C          = dword ptr -6Ch
.text$mn:00007028 var_68          = dword ptr -68h
.text$mn:00007028 var_64          = byte ptr -64h
.text$mn:00007028 var_2C          = byte ptr -2Ch
.text$mn:00007028 var_10          = dword ptr -10h
.text$mn:00007028 var_C           = dword ptr -0Ch
.text$mn:00007028 var_4           = dword ptr -4
.text$mn:00007028 arg_0           = byte ptr  8
.text$mn:00007028
.text$mn:00007028                 push    ebp
.text$mn:00007029                 mov     ebp, esp
.text$mn:0000702B                 push    0FFFFFFFFh
.text$mn:0000702D                 push    offset __ehhandler$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$mn:00007032                 mov     eax, large fs:0
.text$mn:00007038                 push    eax
.text$mn:00007039                 sub     esp, 6Ch
.text$mn:0000703C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007041                 xor     eax, ebp
.text$mn:00007043                 mov     [ebp+var_10], eax
.text$mn:00007046                 push    eax
.text$mn:00007047                 lea     eax, [ebp+var_C]
.text$mn:0000704A                 mov     large fs:0, eax
.text$mn:00007050                 mov     [ebp+var_68], ecx
.text$mn:00007053                 mov     [ebp+var_4], 0
.text$mn:0000705A                 lea     eax, [ebp+arg_0]
.text$mn:0000705D                 push    eax
.text$mn:0000705E                 lea     ecx, [ebp+arg_0]
.text$mn:00007061                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00007066                 push    eax
.text$mn:00007067                 lea     ecx, [ebp+var_2C]
.text$mn:0000706A                 push    ecx
.text$mn:0000706B                 mov     ecx, [ebp+var_68]
.text$mn:0000706E                 call    ?getThemeFromXmlFileName@ThemeSwitcher@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; ThemeSwitcher::getThemeFromXmlFileName(wchar_t const *)
.text$mn:00007073                 mov     [ebp+var_78], eax
.text$mn:00007076                 mov     edx, [ebp+var_78]
.text$mn:00007079                 mov     [ebp+var_70], edx
.text$mn:0000707C                 mov     byte ptr [ebp+var_4], 1
.text$mn:00007080                 mov     eax, [ebp+var_70]
.text$mn:00007083                 push    eax
.text$mn:00007084                 lea     ecx, [ebp+var_64]
.text$mn:00007087                 call    ??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000708C                 mov     [ebp+var_6C], eax
.text$mn:0000708F                 mov     ecx, [ebp+var_6C]
.text$mn:00007092                 mov     [ebp+var_74], ecx
.text$mn:00007095                 mov     byte ptr [ebp+var_4], 2
.text$mn:00007099                 mov     edx, [ebp+var_74]
.text$mn:0000709C                 push    edx
.text$mn:0000709D                 mov     ecx, [ebp+var_68]
.text$mn:000070A0                 call    ?push_back@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEX$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)
.text$mn:000070A5                 mov     byte ptr [ebp+var_4], 1
.text$mn:000070A9                 lea     ecx, [ebp+var_64]
.text$mn:000070AC                 call    ??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::~pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$mn:000070B1                 mov     byte ptr [ebp+var_4], 0
.text$mn:000070B5                 lea     ecx, [ebp+var_2C]
.text$mn:000070B8                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000070BD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000070C4                 lea     ecx, [ebp+arg_0]
.text$mn:000070C7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000070CC                 mov     ecx, [ebp+var_C]
.text$mn:000070CF                 mov     large fs:0, ecx
.text$mn:000070D6                 pop     ecx
.text$mn:000070D7                 mov     ecx, [ebp+var_10]
.text$mn:000070DA                 xor     ecx, ebp
.text$mn:000070DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000070E1                 mov     esp, ebp
.text$mn:000070E3                 pop     ebp
.text$mn:000070E4                 retn    1Ch
.text$mn:000070E4 ?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$mn:000070E4
.text$mn:000070E4 ; ---------------------------------------------------------------------------
.text$mn:000070E7                 align 4
.text$mn:000070E7 _text$mn        ends
.text$mn:000070E7
.text$x:000070E8 ; ===========================================================================
.text$x:000070E8
.text$x:000070E8 ; Segment type: Pure code
.text$x:000070E8 ; Segment permissions: Read/Execute
.text$x:000070E8 _text$x         segment para public 'CODE' use32
.text$x:000070E8                 assume cs:_text$x
.text$x:000070E8                 ;org 70E8h
.text$x:000070E8 ; COMDAT (pick associative to section at 7028)
.text$x:000070E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000070E8
.text$x:000070E8 ; =============== S U B R O U T I N E =======================================
.text$x:000070E8
.text$x:000070E8
.text$x:000070E8 __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 proc near
.text$x:000070E8                                         ; DATA XREF: .xdata$x:00009BE0o
.text$x:000070E8                 lea     ecx, [ebp+8]
.text$x:000070EB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000070EB __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 endp
.text$x:000070EB
.text$x:000070F0
.text$x:000070F0 ; =============== S U B R O U T I N E =======================================
.text$x:000070F0
.text$x:000070F0
.text$x:000070F0 __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1 proc near
.text$x:000070F0                                         ; DATA XREF: .xdata$x:00009BE8o
.text$x:000070F0                 lea     ecx, [ebp-2Ch]
.text$x:000070F3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000070F3 __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1 endp
.text$x:000070F3
.text$x:000070F8
.text$x:000070F8 ; =============== S U B R O U T I N E =======================================
.text$x:000070F8
.text$x:000070F8
.text$x:000070F8 __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$2 proc near
.text$x:000070F8                                         ; DATA XREF: .xdata$x:00009BF0o
.text$x:000070F8                 lea     ecx, [ebp-64h]
.text$x:000070FB                 jmp     ??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ ; std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::~pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(void)
.text$x:000070FB __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$2 endp
.text$x:000070FB
.text$x:00007100
.text$x:00007100 ; =============== S U B R O U T I N E =======================================
.text$x:00007100
.text$x:00007100
.text$x:00007100 __ehhandler$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z proc near
.text$x:00007100                                         ; DATA XREF: ThemeSwitcher::addThemeFromXml(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+5o
.text$x:00007100
.text$x:00007100 arg_4           = dword ptr  8
.text$x:00007100
.text$x:00007100                 mov     edx, [esp+arg_4]
.text$x:00007104                 lea     eax, [edx+0Ch]
.text$x:00007107                 mov     ecx, [edx-70h]
.text$x:0000710A                 xor     ecx, eax
.text$x:0000710C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007111                 mov     ecx, [edx-4]
.text$x:00007114                 xor     ecx, eax
.text$x:00007116                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000711B                 mov     eax, offset __ehfuncinfo$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.text$x:00007120                 jmp     ___CxxFrameHandler3
.text$x:00007120 __ehhandler$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z endp
.text$x:00007120
.text$x:00007120 ; ---------------------------------------------------------------------------
.text$x:00007125                 align 4
.text$x:00007125 _text$x         ends
.text$x:00007125
.text$mn:00007128 ; ===========================================================================
.text$mn:00007128
.text$mn:00007128 ; Segment type: Pure code
.text$mn:00007128 ; Segment permissions: Read/Execute
.text$mn:00007128 _text$mn        segment para public 'CODE' use32
.text$mn:00007128                 assume cs:_text$mn
.text$mn:00007128                 ;org 7128h
.text$mn:00007128 ; COMDAT (pick any)
.text$mn:00007128                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007128
.text$mn:00007128 ; =============== S U B R O U T I N E =======================================
.text$mn:00007128
.text$mn:00007128 ; Attributes: bp-based frame
.text$mn:00007128
.text$mn:00007128 ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:00007128                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:00007128 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:00007128                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:00007128                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:00007128
.text$mn:00007128 var_4           = dword ptr -4
.text$mn:00007128 arg_0           = dword ptr  8
.text$mn:00007128
.text$mn:00007128                 push    ebp
.text$mn:00007129                 mov     ebp, esp
.text$mn:0000712B                 push    ecx
.text$mn:0000712C                 mov     [ebp+var_4], ecx
.text$mn:0000712F                 mov     eax, [ebp+arg_0]
.text$mn:00007132                 push    eax
.text$mn:00007133                 mov     ecx, [ebp+var_4]
.text$mn:00007136                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:0000713B                 mov     esp, ebp
.text$mn:0000713D                 pop     ebp
.text$mn:0000713E                 retn    4
.text$mn:0000713E ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:0000713E
.text$mn:0000713E ; ---------------------------------------------------------------------------
.text$mn:00007141                 align 4
.text$mn:00007141 _text$mn        ends
.text$mn:00007141
.text$mn:00007144 ; ===========================================================================
.text$mn:00007144
.text$mn:00007144 ; Segment type: Pure code
.text$mn:00007144 ; Segment permissions: Read/Execute
.text$mn:00007144 _text$mn        segment para public 'CODE' use32
.text$mn:00007144                 assume cs:_text$mn
.text$mn:00007144                 ;org 7144h
.text$mn:00007144 ; COMDAT (pick any)
.text$mn:00007144                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007144
.text$mn:00007144 ; =============== S U B R O U T I N E =======================================
.text$mn:00007144
.text$mn:00007144 ; Attributes: bp-based frame
.text$mn:00007144
.text$mn:00007144 ; public: struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * __thiscall std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::allocate(unsigned int)
.text$mn:00007144                 public ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z
.text$mn:00007144 ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z proc near
.text$mn:00007144                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+41p
.text$mn:00007144
.text$mn:00007144 var_4           = dword ptr -4
.text$mn:00007144 arg_0           = dword ptr  8
.text$mn:00007144
.text$mn:00007144                 push    ebp
.text$mn:00007145                 mov     ebp, esp
.text$mn:00007147                 push    ecx
.text$mn:00007148                 mov     [ebp+var_4], ecx
.text$mn:0000714B                 mov     eax, [ebp+arg_0]
.text$mn:0000714E                 push    eax
.text$mn:0000714F                 mov     ecx, [ebp+var_4]
.text$mn:00007152                 call    ?allocate@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z ; std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)
.text$mn:00007157                 mov     esp, ebp
.text$mn:00007159                 pop     ebp
.text$mn:0000715A                 retn    4
.text$mn:0000715A ?allocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z endp
.text$mn:0000715A
.text$mn:0000715A ; ---------------------------------------------------------------------------
.text$mn:0000715D                 align 10h
.text$mn:0000715D _text$mn        ends
.text$mn:0000715D
.text$mn:00007160 ; ===========================================================================
.text$mn:00007160
.text$mn:00007160 ; Segment type: Pure code
.text$mn:00007160 ; Segment permissions: Read/Execute
.text$mn:00007160 _text$mn        segment para public 'CODE' use32
.text$mn:00007160                 assume cs:_text$mn
.text$mn:00007160                 ;org 7160h
.text$mn:00007160 ; COMDAT (pick any)
.text$mn:00007160                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007160
.text$mn:00007160 ; =============== S U B R O U T I N E =======================================
.text$mn:00007160
.text$mn:00007160 ; Attributes: bp-based frame
.text$mn:00007160
.text$mn:00007160 ; public: struct std::_Container_proxy * __thiscall std::_Wrap_alloc<class std::allocator<struct std::_Container_proxy>>::allocate(unsigned int)
.text$mn:00007160                 public ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:00007160 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:00007160                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Alloc_proxy(void)+16p
.text$mn:00007160
.text$mn:00007160 var_4           = dword ptr -4
.text$mn:00007160 arg_0           = dword ptr  8
.text$mn:00007160
.text$mn:00007160                 push    ebp
.text$mn:00007161                 mov     ebp, esp
.text$mn:00007163                 push    ecx
.text$mn:00007164                 mov     [ebp+var_4], ecx
.text$mn:00007167                 mov     eax, [ebp+arg_0]
.text$mn:0000716A                 push    eax
.text$mn:0000716B                 mov     ecx, [ebp+var_4]
.text$mn:0000716E                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00007173                 mov     esp, ebp
.text$mn:00007175                 pop     ebp
.text$mn:00007176                 retn    4
.text$mn:00007176 ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00007176
.text$mn:00007176 ; ---------------------------------------------------------------------------
.text$mn:00007179                 align 4
.text$mn:00007179 _text$mn        ends
.text$mn:00007179
.text$mn:0000717C ; ===========================================================================
.text$mn:0000717C
.text$mn:0000717C ; Segment type: Pure code
.text$mn:0000717C ; Segment permissions: Read/Execute
.text$mn:0000717C _text$mn        segment para public 'CODE' use32
.text$mn:0000717C                 assume cs:_text$mn
.text$mn:0000717C                 ;org 717Ch
.text$mn:0000717C ; COMDAT (pick any)
.text$mn:0000717C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000717C
.text$mn:0000717C ; =============== S U B R O U T I N E =======================================
.text$mn:0000717C
.text$mn:0000717C ; Attributes: bp-based frame
.text$mn:0000717C
.text$mn:0000717C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::allocate(unsigned int)
.text$mn:0000717C                 public ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:0000717C ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:0000717C                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+41p
.text$mn:0000717C
.text$mn:0000717C var_4           = dword ptr -4
.text$mn:0000717C arg_0           = dword ptr  8
.text$mn:0000717C
.text$mn:0000717C                 push    ebp
.text$mn:0000717D                 mov     ebp, esp
.text$mn:0000717F                 push    ecx
.text$mn:00007180                 mov     [ebp+var_4], ecx
.text$mn:00007183                 mov     eax, [ebp+arg_0]
.text$mn:00007186                 push    eax
.text$mn:00007187                 mov     ecx, [ebp+var_4]
.text$mn:0000718A                 call    ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::allocate(uint)
.text$mn:0000718F                 mov     esp, ebp
.text$mn:00007191                 pop     ebp
.text$mn:00007192                 retn    4
.text$mn:00007192 ?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00007192
.text$mn:00007192 ; ---------------------------------------------------------------------------
.text$mn:00007195                 align 4
.text$mn:00007195 _text$mn        ends
.text$mn:00007195
.text$mn:00007198 ; ===========================================================================
.text$mn:00007198
.text$mn:00007198 ; Segment type: Pure code
.text$mn:00007198 ; Segment permissions: Read/Execute
.text$mn:00007198 _text$mn        segment para public 'CODE' use32
.text$mn:00007198                 assume cs:_text$mn
.text$mn:00007198                 ;org 7198h
.text$mn:00007198 ; COMDAT (pick any)
.text$mn:00007198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007198
.text$mn:00007198 ; =============== S U B R O U T I N E =======================================
.text$mn:00007198
.text$mn:00007198 ; Attributes: bp-based frame
.text$mn:00007198
.text$mn:00007198 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:00007198                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:00007198 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:00007198                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:00007198                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:00007198
.text$mn:00007198 var_4           = dword ptr -4
.text$mn:00007198 arg_0           = dword ptr  8
.text$mn:00007198
.text$mn:00007198                 push    ebp
.text$mn:00007199                 mov     ebp, esp
.text$mn:0000719B                 push    ecx
.text$mn:0000719C                 mov     [ebp+var_4], ecx
.text$mn:0000719F                 mov     eax, [ebp+arg_0]
.text$mn:000071A2                 push    eax
.text$mn:000071A3                 mov     ecx, [ebp+var_4]
.text$mn:000071A6                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:000071AB                 mov     esp, ebp
.text$mn:000071AD                 pop     ebp
.text$mn:000071AE                 retn    4
.text$mn:000071AE ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:000071AE
.text$mn:000071AE ; ---------------------------------------------------------------------------
.text$mn:000071B1                 align 4
.text$mn:000071B1 _text$mn        ends
.text$mn:000071B1
.text$mn:000071B4 ; ===========================================================================
.text$mn:000071B4
.text$mn:000071B4 ; Segment type: Pure code
.text$mn:000071B4 ; Segment permissions: Read/Execute
.text$mn:000071B4 _text$mn        segment para public 'CODE' use32
.text$mn:000071B4                 assume cs:_text$mn
.text$mn:000071B4                 ;org 71B4h
.text$mn:000071B4 ; COMDAT (pick any)
.text$mn:000071B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071B4
.text$mn:000071B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000071B4
.text$mn:000071B4 ; Attributes: bp-based frame
.text$mn:000071B4
.text$mn:000071B4 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:000071B4                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:000071B4 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:000071B4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:000071B4
.text$mn:000071B4 var_4           = dword ptr -4
.text$mn:000071B4 arg_0           = dword ptr  8
.text$mn:000071B4
.text$mn:000071B4                 push    ebp
.text$mn:000071B5                 mov     ebp, esp
.text$mn:000071B7                 push    ecx
.text$mn:000071B8                 mov     [ebp+var_4], ecx
.text$mn:000071BB                 push    0
.text$mn:000071BD                 mov     eax, [ebp+arg_0]
.text$mn:000071C0                 push    eax
.text$mn:000071C1                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:000071C6                 add     esp, 8
.text$mn:000071C9                 mov     esp, ebp
.text$mn:000071CB                 pop     ebp
.text$mn:000071CC                 retn    4
.text$mn:000071CC ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:000071CC
.text$mn:000071CC ; ---------------------------------------------------------------------------
.text$mn:000071CF                 align 10h
.text$mn:000071CF _text$mn        ends
.text$mn:000071CF
.text$mn:000071D0 ; ===========================================================================
.text$mn:000071D0
.text$mn:000071D0 ; Segment type: Pure code
.text$mn:000071D0 ; Segment permissions: Read/Execute
.text$mn:000071D0 _text$mn        segment para public 'CODE' use32
.text$mn:000071D0                 assume cs:_text$mn
.text$mn:000071D0                 ;org 71D0h
.text$mn:000071D0 ; COMDAT (pick any)
.text$mn:000071D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071D0
.text$mn:000071D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000071D0
.text$mn:000071D0 ; Attributes: bp-based frame
.text$mn:000071D0
.text$mn:000071D0 ; public: struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> * __thiscall std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::allocate(unsigned int)
.text$mn:000071D0                 public ?allocate@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z
.text$mn:000071D0 ?allocate@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z proc near
.text$mn:000071D0                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::allocate(uint)+Ep
.text$mn:000071D0
.text$mn:000071D0 var_4           = dword ptr -4
.text$mn:000071D0 arg_0           = dword ptr  8
.text$mn:000071D0
.text$mn:000071D0                 push    ebp
.text$mn:000071D1                 mov     ebp, esp
.text$mn:000071D3                 push    ecx
.text$mn:000071D4                 mov     [ebp+var_4], ecx
.text$mn:000071D7                 push    0
.text$mn:000071D9                 mov     eax, [ebp+arg_0]
.text$mn:000071DC                 push    eax
.text$mn:000071DD                 call    ??$_Allocate@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@IPAU10@@Z ; std::_Allocate<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(uint,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:000071E2                 add     esp, 8
.text$mn:000071E5                 mov     esp, ebp
.text$mn:000071E7                 pop     ebp
.text$mn:000071E8                 retn    4
.text$mn:000071E8 ?allocate@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z endp
.text$mn:000071E8
.text$mn:000071E8 ; ---------------------------------------------------------------------------
.text$mn:000071EB                 align 4
.text$mn:000071EB _text$mn        ends
.text$mn:000071EB
.text$mn:000071EC ; ===========================================================================
.text$mn:000071EC
.text$mn:000071EC ; Segment type: Pure code
.text$mn:000071EC ; Segment permissions: Read/Execute
.text$mn:000071EC _text$mn        segment para public 'CODE' use32
.text$mn:000071EC                 assume cs:_text$mn
.text$mn:000071EC                 ;org 71ECh
.text$mn:000071EC ; COMDAT (pick any)
.text$mn:000071EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000071EC
.text$mn:000071EC ; =============== S U B R O U T I N E =======================================
.text$mn:000071EC
.text$mn:000071EC ; Attributes: bp-based frame
.text$mn:000071EC
.text$mn:000071EC ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:000071EC                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:000071EC ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:000071EC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:000071EC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p ...
.text$mn:000071EC
.text$mn:000071EC var_4           = dword ptr -4
.text$mn:000071EC arg_0           = dword ptr  8
.text$mn:000071EC
.text$mn:000071EC                 push    ebp
.text$mn:000071ED                 mov     ebp, esp
.text$mn:000071EF                 push    ecx
.text$mn:000071F0                 mov     [ebp+var_4], ecx
.text$mn:000071F3                 push    0
.text$mn:000071F5                 mov     eax, [ebp+arg_0]
.text$mn:000071F8                 push    eax
.text$mn:000071F9                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:000071FE                 add     esp, 8
.text$mn:00007201                 mov     esp, ebp
.text$mn:00007203                 pop     ebp
.text$mn:00007204                 retn    4
.text$mn:00007204 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:00007204
.text$mn:00007204 ; ---------------------------------------------------------------------------
.text$mn:00007207                 align 4
.text$mn:00007207 _text$mn        ends
.text$mn:00007207
.text$mn:00007208 ; ===========================================================================
.text$mn:00007208
.text$mn:00007208 ; Segment type: Pure code
.text$mn:00007208 ; Segment permissions: Read/Execute
.text$mn:00007208 _text$mn        segment para public 'CODE' use32
.text$mn:00007208                 assume cs:_text$mn
.text$mn:00007208                 ;org 7208h
.text$mn:00007208 ; COMDAT (pick any)
.text$mn:00007208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007208
.text$mn:00007208 ; =============== S U B R O U T I N E =======================================
.text$mn:00007208
.text$mn:00007208 ; Attributes: bp-based frame
.text$mn:00007208
.text$mn:00007208 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> * __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::allocate(unsigned int)
.text$mn:00007208                 public ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00007208 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00007208                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::allocate(uint)+Ep
.text$mn:00007208
.text$mn:00007208 var_4           = dword ptr -4
.text$mn:00007208 arg_0           = dword ptr  8
.text$mn:00007208
.text$mn:00007208                 push    ebp
.text$mn:00007209                 mov     ebp, esp
.text$mn:0000720B                 push    ecx
.text$mn:0000720C                 mov     [ebp+var_4], ecx
.text$mn:0000720F                 push    0
.text$mn:00007211                 mov     eax, [ebp+arg_0]
.text$mn:00007214                 push    eax
.text$mn:00007215                 call    ??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z ; std::_Allocate<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:0000721A                 add     esp, 8
.text$mn:0000721D                 mov     esp, ebp
.text$mn:0000721F                 pop     ebp
.text$mn:00007220                 retn    4
.text$mn:00007220 ?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00007220
.text$mn:00007220 ; ---------------------------------------------------------------------------
.text$mn:00007223                 align 4
.text$mn:00007223 _text$mn        ends
.text$mn:00007223
.text$mn:00007224 ; ===========================================================================
.text$mn:00007224
.text$mn:00007224 ; Segment type: Pure code
.text$mn:00007224 ; Segment permissions: Read/Execute
.text$mn:00007224 _text$mn        segment para public 'CODE' use32
.text$mn:00007224                 assume cs:_text$mn
.text$mn:00007224                 ;org 7224h
.text$mn:00007224 ; COMDAT (pick any)
.text$mn:00007224                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007224
.text$mn:00007224 ; =============== S U B R O U T I N E =======================================
.text$mn:00007224
.text$mn:00007224 ; Attributes: bp-based frame
.text$mn:00007224
.text$mn:00007224 ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:00007224                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:00007224 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:00007224                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:00007224
.text$mn:00007224 var_4           = dword ptr -4
.text$mn:00007224 arg_0           = dword ptr  8
.text$mn:00007224
.text$mn:00007224                 push    ebp
.text$mn:00007225                 mov     ebp, esp
.text$mn:00007227                 push    ecx
.text$mn:00007228                 mov     [ebp+var_4], ecx
.text$mn:0000722B                 push    0
.text$mn:0000722D                 mov     eax, [ebp+arg_0]
.text$mn:00007230                 push    eax
.text$mn:00007231                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:00007236                 add     esp, 8
.text$mn:00007239                 mov     esp, ebp
.text$mn:0000723B                 pop     ebp
.text$mn:0000723C                 retn    4
.text$mn:0000723C ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:0000723C
.text$mn:0000723C ; ---------------------------------------------------------------------------
.text$mn:0000723F                 align 10h
.text$mn:0000723F _text$mn        ends
.text$mn:0000723F
.text$mn:00007240 ; ===========================================================================
.text$mn:00007240
.text$mn:00007240 ; Segment type: Pure code
.text$mn:00007240 ; Segment permissions: Read/Execute
.text$mn:00007240 _text$mn        segment para public 'CODE' use32
.text$mn:00007240                 assume cs:_text$mn
.text$mn:00007240                 ;org 7240h
.text$mn:00007240 ; COMDAT (pick any)
.text$mn:00007240                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007240
.text$mn:00007240 ; =============== S U B R O U T I N E =======================================
.text$mn:00007240
.text$mn:00007240 ; Attributes: bp-based frame
.text$mn:00007240
.text$mn:00007240 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::append(unsigned int, wchar_t)
.text$mn:00007240                 public ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
.text$mn:00007240 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z proc near
.text$mn:00007240                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+11Dp
.text$mn:00007240
.text$mn:00007240 var_8           = dword ptr -8
.text$mn:00007240 var_4           = dword ptr -4
.text$mn:00007240 arg_0           = dword ptr  8
.text$mn:00007240 arg_4           = word ptr  0Ch
.text$mn:00007240
.text$mn:00007240                 push    ebp
.text$mn:00007241                 mov     ebp, esp
.text$mn:00007243                 sub     esp, 8
.text$mn:00007246                 mov     [ebp+var_4], ecx
.text$mn:00007249                 mov     eax, [ebp+var_4]
.text$mn:0000724C                 or      ecx, 0FFFFFFFFh
.text$mn:0000724F                 sub     ecx, [eax+14h]
.text$mn:00007252                 cmp     ecx, [ebp+arg_0]
.text$mn:00007255                 ja      short loc_725F
.text$mn:00007257                 mov     ecx, [ebp+var_4]
.text$mn:0000725A                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:0000725F
.text$mn:0000725F loc_725F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+15j
.text$mn:0000725F                 cmp     [ebp+arg_0], 0
.text$mn:00007263                 jbe     short loc_72AA
.text$mn:00007265                 mov     edx, [ebp+var_4]
.text$mn:00007268                 mov     eax, [edx+14h]
.text$mn:0000726B                 add     eax, [ebp+arg_0]
.text$mn:0000726E                 mov     [ebp+var_8], eax
.text$mn:00007271                 push    0
.text$mn:00007273                 mov     ecx, [ebp+var_8]
.text$mn:00007276                 push    ecx
.text$mn:00007277                 mov     ecx, [ebp+var_4]
.text$mn:0000727A                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000727F                 movzx   edx, al
.text$mn:00007282                 test    edx, edx
.text$mn:00007284                 jz      short loc_72AA
.text$mn:00007286                 movzx   eax, [ebp+arg_4]
.text$mn:0000728A                 push    eax
.text$mn:0000728B                 mov     ecx, [ebp+arg_0]
.text$mn:0000728E                 push    ecx
.text$mn:0000728F                 mov     edx, [ebp+var_4]
.text$mn:00007292                 mov     eax, [edx+14h]
.text$mn:00007295                 push    eax
.text$mn:00007296                 mov     ecx, [ebp+var_4]
.text$mn:00007299                 call    ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)
.text$mn:0000729E                 mov     ecx, [ebp+var_8]
.text$mn:000072A1                 push    ecx
.text$mn:000072A2                 mov     ecx, [ebp+var_4]
.text$mn:000072A5                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000072AA
.text$mn:000072AA loc_72AA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+23j
.text$mn:000072AA                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::append(uint,wchar_t)+44j
.text$mn:000072AA                 mov     eax, [ebp+var_4]
.text$mn:000072AD                 mov     esp, ebp
.text$mn:000072AF                 pop     ebp
.text$mn:000072B0                 retn    8
.text$mn:000072B0 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z endp
.text$mn:000072B0
.text$mn:000072B0 ; ---------------------------------------------------------------------------
.text$mn:000072B3                 align 4
.text$mn:000072B3 _text$mn        ends
.text$mn:000072B3
.text$mn:000072B4 ; ===========================================================================
.text$mn:000072B4
.text$mn:000072B4 ; Segment type: Pure code
.text$mn:000072B4 ; Segment permissions: Read/Execute
.text$mn:000072B4 _text$mn        segment para public 'CODE' use32
.text$mn:000072B4                 assume cs:_text$mn
.text$mn:000072B4                 ;org 72B4h
.text$mn:000072B4 ; COMDAT (pick any)
.text$mn:000072B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000072B4
.text$mn:000072B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000072B4
.text$mn:000072B4 ; Attributes: bp-based frame
.text$mn:000072B4
.text$mn:000072B4 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:000072B4                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:000072B4 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:000072B4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:000072B4
.text$mn:000072B4 Size            = dword ptr -8
.text$mn:000072B4 var_4           = dword ptr -4
.text$mn:000072B4 arg_0           = dword ptr  8
.text$mn:000072B4 arg_4           = dword ptr  0Ch
.text$mn:000072B4 arg_8           = dword ptr  10h
.text$mn:000072B4
.text$mn:000072B4                 push    ebp
.text$mn:000072B5                 mov     ebp, esp
.text$mn:000072B7                 sub     esp, 8
.text$mn:000072BA                 mov     [ebp+var_4], ecx
.text$mn:000072BD                 mov     ecx, [ebp+arg_0]
.text$mn:000072C0                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:000072C5                 cmp     eax, [ebp+arg_4]
.text$mn:000072C8                 jnb     short loc_72D2
.text$mn:000072CA                 mov     ecx, [ebp+var_4]
.text$mn:000072CD                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000072D2
.text$mn:000072D2 loc_72D2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:000072D2                 mov     ecx, [ebp+arg_0]
.text$mn:000072D5                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:000072DA                 sub     eax, [ebp+arg_4]
.text$mn:000072DD                 mov     [ebp+Size], eax
.text$mn:000072E0                 mov     eax, [ebp+arg_8]
.text$mn:000072E3                 cmp     eax, [ebp+Size]
.text$mn:000072E6                 jnb     short loc_72EE
.text$mn:000072E8                 mov     ecx, [ebp+arg_8]
.text$mn:000072EB                 mov     [ebp+Size], ecx
.text$mn:000072EE
.text$mn:000072EE loc_72EE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:000072EE                 mov     edx, [ebp+var_4]
.text$mn:000072F1                 cmp     edx, [ebp+arg_0]
.text$mn:000072F4                 jnz     short loc_7315
.text$mn:000072F6                 mov     eax, [ebp+arg_4]
.text$mn:000072F9                 add     eax, [ebp+Size]
.text$mn:000072FC                 push    eax
.text$mn:000072FD                 mov     ecx, [ebp+var_4]
.text$mn:00007300                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00007305                 mov     ecx, [ebp+arg_4]
.text$mn:00007308                 push    ecx
.text$mn:00007309                 push    0
.text$mn:0000730B                 mov     ecx, [ebp+var_4]
.text$mn:0000730E                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00007313                 jmp     short loc_7357
.text$mn:00007315 ; ---------------------------------------------------------------------------
.text$mn:00007315
.text$mn:00007315 loc_7315:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00007315                 push    0
.text$mn:00007317                 mov     edx, [ebp+Size]
.text$mn:0000731A                 push    edx
.text$mn:0000731B                 mov     ecx, [ebp+var_4]
.text$mn:0000731E                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00007323                 movzx   eax, al
.text$mn:00007326                 test    eax, eax
.text$mn:00007328                 jz      short loc_7357
.text$mn:0000732A                 mov     ecx, [ebp+Size]
.text$mn:0000732D                 push    ecx             ; Size
.text$mn:0000732E                 mov     ecx, [ebp+arg_0]
.text$mn:00007331                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007336                 add     eax, [ebp+arg_4]
.text$mn:00007339                 push    eax             ; Src
.text$mn:0000733A                 mov     ecx, [ebp+var_4]
.text$mn:0000733D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007342                 push    eax             ; Dst
.text$mn:00007343                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00007348                 add     esp, 0Ch
.text$mn:0000734B                 mov     edx, [ebp+Size]
.text$mn:0000734E                 push    edx
.text$mn:0000734F                 mov     ecx, [ebp+var_4]
.text$mn:00007352                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007357
.text$mn:00007357 loc_7357:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:00007357                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:00007357                 mov     eax, [ebp+var_4]
.text$mn:0000735A                 mov     esp, ebp
.text$mn:0000735C                 pop     ebp
.text$mn:0000735D                 retn    0Ch
.text$mn:0000735D ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000735D
.text$mn:0000735D _text$mn        ends
.text$mn:0000735D
.text$mn:00007360 ; ===========================================================================
.text$mn:00007360
.text$mn:00007360 ; Segment type: Pure code
.text$mn:00007360 ; Segment permissions: Read/Execute
.text$mn:00007360 _text$mn        segment para public 'CODE' use32
.text$mn:00007360                 assume cs:_text$mn
.text$mn:00007360                 ;org 7360h
.text$mn:00007360 ; COMDAT (pick any)
.text$mn:00007360                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007360
.text$mn:00007360 ; =============== S U B R O U T I N E =======================================
.text$mn:00007360
.text$mn:00007360 ; Attributes: bp-based frame
.text$mn:00007360
.text$mn:00007360 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:00007360                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00007360 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00007360                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:00007360                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)+Ep
.text$mn:00007360
.text$mn:00007360 var_4           = dword ptr -4
.text$mn:00007360 Str             = dword ptr  8
.text$mn:00007360
.text$mn:00007360                 push    ebp
.text$mn:00007361                 mov     ebp, esp
.text$mn:00007363                 push    ecx
.text$mn:00007364                 mov     [ebp+var_4], ecx
.text$mn:00007367                 push    490h            ; unsigned int
.text$mn:0000736C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007371                 mov     eax, [ebp+Str]
.text$mn:00007374                 push    eax             ; int
.text$mn:00007375                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000737A                 add     esp, 0Ch
.text$mn:0000737D                 mov     ecx, [ebp+Str]
.text$mn:00007380                 push    ecx             ; Str
.text$mn:00007381                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00007386                 add     esp, 4
.text$mn:00007389                 push    eax             ; Size
.text$mn:0000738A                 mov     edx, [ebp+Str]
.text$mn:0000738D                 push    edx             ; Src
.text$mn:0000738E                 mov     ecx, [ebp+var_4]
.text$mn:00007391                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:00007396                 mov     esp, ebp
.text$mn:00007398                 pop     ebp
.text$mn:00007399                 retn    4
.text$mn:00007399 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:00007399
.text$mn:00007399 _text$mn        ends
.text$mn:00007399
.text$mn:0000739C ; ===========================================================================
.text$mn:0000739C
.text$mn:0000739C ; Segment type: Pure code
.text$mn:0000739C ; Segment permissions: Read/Execute
.text$mn:0000739C _text$mn        segment para public 'CODE' use32
.text$mn:0000739C                 assume cs:_text$mn
.text$mn:0000739C                 ;org 739Ch
.text$mn:0000739C ; COMDAT (pick any)
.text$mn:0000739C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000739C
.text$mn:0000739C ; =============== S U B R O U T I N E =======================================
.text$mn:0000739C
.text$mn:0000739C ; Attributes: bp-based frame
.text$mn:0000739C
.text$mn:0000739C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:0000739C                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:0000739C ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:0000739C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:0000739C
.text$mn:0000739C var_4           = dword ptr -4
.text$mn:0000739C Src             = dword ptr  8
.text$mn:0000739C Size            = dword ptr  0Ch
.text$mn:0000739C
.text$mn:0000739C                 push    ebp
.text$mn:0000739D                 mov     ebp, esp
.text$mn:0000739F                 push    ecx
.text$mn:000073A0                 mov     [ebp+var_4], ecx
.text$mn:000073A3                 cmp     [ebp+Size], 0
.text$mn:000073A7                 jz      short loc_73BF
.text$mn:000073A9                 push    47Fh            ; unsigned int
.text$mn:000073AE                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000073B3                 mov     eax, [ebp+Src]
.text$mn:000073B6                 push    eax             ; int
.text$mn:000073B7                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:000073BC                 add     esp, 0Ch
.text$mn:000073BF
.text$mn:000073BF loc_73BF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:000073BF                 mov     ecx, [ebp+Src]
.text$mn:000073C2                 push    ecx
.text$mn:000073C3                 mov     ecx, [ebp+var_4]
.text$mn:000073C6                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:000073CB                 movzx   edx, al
.text$mn:000073CE                 test    edx, edx
.text$mn:000073D0                 jz      short loc_73F2
.text$mn:000073D2                 mov     eax, [ebp+Size]
.text$mn:000073D5                 push    eax
.text$mn:000073D6                 mov     ecx, [ebp+var_4]
.text$mn:000073D9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000073DE                 mov     ecx, [ebp+Src]
.text$mn:000073E1                 sub     ecx, eax
.text$mn:000073E3                 push    ecx
.text$mn:000073E4                 mov     edx, [ebp+var_4]
.text$mn:000073E7                 push    edx
.text$mn:000073E8                 mov     ecx, [ebp+var_4]
.text$mn:000073EB                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:000073F0                 jmp     short loc_742F
.text$mn:000073F2 ; ---------------------------------------------------------------------------
.text$mn:000073F2
.text$mn:000073F2 loc_73F2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:000073F2                 push    0
.text$mn:000073F4                 mov     eax, [ebp+Size]
.text$mn:000073F7                 push    eax
.text$mn:000073F8                 mov     ecx, [ebp+var_4]
.text$mn:000073FB                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00007400                 movzx   ecx, al
.text$mn:00007403                 test    ecx, ecx
.text$mn:00007405                 jz      short loc_742C
.text$mn:00007407                 mov     edx, [ebp+Size]
.text$mn:0000740A                 push    edx             ; Size
.text$mn:0000740B                 mov     eax, [ebp+Src]
.text$mn:0000740E                 push    eax             ; Src
.text$mn:0000740F                 mov     ecx, [ebp+var_4]
.text$mn:00007412                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007417                 push    eax             ; Dst
.text$mn:00007418                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000741D                 add     esp, 0Ch
.text$mn:00007420                 mov     ecx, [ebp+Size]
.text$mn:00007423                 push    ecx
.text$mn:00007424                 mov     ecx, [ebp+var_4]
.text$mn:00007427                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000742C
.text$mn:0000742C loc_742C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:0000742C                 mov     eax, [ebp+var_4]
.text$mn:0000742F
.text$mn:0000742F loc_742F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:0000742F                 mov     esp, ebp
.text$mn:00007431                 pop     ebp
.text$mn:00007432                 retn    8
.text$mn:00007432 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00007432
.text$mn:00007432 ; ---------------------------------------------------------------------------
.text$mn:00007435                 align 4
.text$mn:00007435 _text$mn        ends
.text$mn:00007435
.text$mn:00007438 ; ===========================================================================
.text$mn:00007438
.text$mn:00007438 ; Segment type: Pure code
.text$mn:00007438 ; Segment permissions: Read/Execute
.text$mn:00007438 _text$mn        segment para public 'CODE' use32
.text$mn:00007438                 assume cs:_text$mn
.text$mn:00007438                 ;org 7438h
.text$mn:00007438 ; COMDAT (pick any)
.text$mn:00007438                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007438
.text$mn:00007438 ; =============== S U B R O U T I N E =======================================
.text$mn:00007438
.text$mn:00007438 ; Attributes: bp-based frame
.text$mn:00007438
.text$mn:00007438 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00007438                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00007438 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00007438                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:00007438                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+51p
.text$mn:00007438
.text$mn:00007438 var_8           = dword ptr -8
.text$mn:00007438 var_4           = dword ptr -4
.text$mn:00007438 arg_0           = dword ptr  8
.text$mn:00007438 arg_4           = dword ptr  0Ch
.text$mn:00007438 arg_8           = dword ptr  10h
.text$mn:00007438
.text$mn:00007438                 push    ebp
.text$mn:00007439                 mov     ebp, esp
.text$mn:0000743B                 sub     esp, 8
.text$mn:0000743E                 mov     [ebp+var_4], ecx
.text$mn:00007441                 mov     ecx, [ebp+arg_0]
.text$mn:00007444                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00007449                 cmp     eax, [ebp+arg_4]
.text$mn:0000744C                 jnb     short loc_7456
.text$mn:0000744E                 mov     ecx, [ebp+var_4]
.text$mn:00007451                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00007456
.text$mn:00007456 loc_7456:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:00007456                 mov     ecx, [ebp+arg_0]
.text$mn:00007459                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:0000745E                 sub     eax, [ebp+arg_4]
.text$mn:00007461                 mov     [ebp+var_8], eax
.text$mn:00007464                 mov     eax, [ebp+arg_8]
.text$mn:00007467                 cmp     eax, [ebp+var_8]
.text$mn:0000746A                 jnb     short loc_7472
.text$mn:0000746C                 mov     ecx, [ebp+arg_8]
.text$mn:0000746F                 mov     [ebp+var_8], ecx
.text$mn:00007472
.text$mn:00007472 loc_7472:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:00007472                 mov     edx, [ebp+var_4]
.text$mn:00007475                 cmp     edx, [ebp+arg_0]
.text$mn:00007478                 jnz     short loc_7499
.text$mn:0000747A                 mov     eax, [ebp+arg_4]
.text$mn:0000747D                 add     eax, [ebp+var_8]
.text$mn:00007480                 push    eax
.text$mn:00007481                 mov     ecx, [ebp+var_4]
.text$mn:00007484                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:00007489                 mov     ecx, [ebp+arg_4]
.text$mn:0000748C                 push    ecx
.text$mn:0000748D                 push    0
.text$mn:0000748F                 mov     ecx, [ebp+var_4]
.text$mn:00007492                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00007497                 jmp     short loc_74DE
.text$mn:00007499 ; ---------------------------------------------------------------------------
.text$mn:00007499
.text$mn:00007499 loc_7499:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:00007499                 push    0
.text$mn:0000749B                 mov     edx, [ebp+var_8]
.text$mn:0000749E                 push    edx
.text$mn:0000749F                 mov     ecx, [ebp+var_4]
.text$mn:000074A2                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000074A7                 movzx   eax, al
.text$mn:000074AA                 test    eax, eax
.text$mn:000074AC                 jz      short loc_74DE
.text$mn:000074AE                 mov     ecx, [ebp+var_8]
.text$mn:000074B1                 push    ecx             ; int
.text$mn:000074B2                 mov     ecx, [ebp+arg_0]
.text$mn:000074B5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000074BA                 mov     edx, [ebp+arg_4]
.text$mn:000074BD                 lea     eax, [eax+edx*2]
.text$mn:000074C0                 push    eax             ; Src
.text$mn:000074C1                 mov     ecx, [ebp+var_4]
.text$mn:000074C4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000074C9                 push    eax             ; Dst
.text$mn:000074CA                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000074CF                 add     esp, 0Ch
.text$mn:000074D2                 mov     ecx, [ebp+var_8]
.text$mn:000074D5                 push    ecx
.text$mn:000074D6                 mov     ecx, [ebp+var_4]
.text$mn:000074D9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000074DE
.text$mn:000074DE loc_74DE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:000074DE                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:000074DE                 mov     eax, [ebp+var_4]
.text$mn:000074E1                 mov     esp, ebp
.text$mn:000074E3                 pop     ebp
.text$mn:000074E4                 retn    0Ch
.text$mn:000074E4 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:000074E4
.text$mn:000074E4 ; ---------------------------------------------------------------------------
.text$mn:000074E7                 align 4
.text$mn:000074E7 _text$mn        ends
.text$mn:000074E7
.text$mn:000074E8 ; ===========================================================================
.text$mn:000074E8
.text$mn:000074E8 ; Segment type: Pure code
.text$mn:000074E8 ; Segment permissions: Read/Execute
.text$mn:000074E8 _text$mn        segment para public 'CODE' use32
.text$mn:000074E8                 assume cs:_text$mn
.text$mn:000074E8                 ;org 74E8h
.text$mn:000074E8 ; COMDAT (pick any)
.text$mn:000074E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074E8
.text$mn:000074E8 ; =============== S U B R O U T I N E =======================================
.text$mn:000074E8
.text$mn:000074E8 ; Attributes: bp-based frame
.text$mn:000074E8
.text$mn:000074E8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:000074E8                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:000074E8 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:000074E8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:000074E8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:000074E8
.text$mn:000074E8 var_4           = dword ptr -4
.text$mn:000074E8 Str             = dword ptr  8
.text$mn:000074E8
.text$mn:000074E8                 push    ebp
.text$mn:000074E9                 mov     ebp, esp
.text$mn:000074EB                 push    ecx
.text$mn:000074EC                 mov     [ebp+var_4], ecx
.text$mn:000074EF                 push    490h            ; unsigned int
.text$mn:000074F4                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000074F9                 mov     eax, [ebp+Str]
.text$mn:000074FC                 push    eax             ; int
.text$mn:000074FD                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00007502                 add     esp, 0Ch
.text$mn:00007505                 mov     ecx, [ebp+Str]
.text$mn:00007508                 push    ecx             ; Str
.text$mn:00007509                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:0000750E                 add     esp, 4
.text$mn:00007511                 push    eax             ; int
.text$mn:00007512                 mov     edx, [ebp+Str]
.text$mn:00007515                 push    edx             ; Src
.text$mn:00007516                 mov     ecx, [ebp+var_4]
.text$mn:00007519                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:0000751E                 mov     esp, ebp
.text$mn:00007520                 pop     ebp
.text$mn:00007521                 retn    4
.text$mn:00007521 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00007521
.text$mn:00007521 _text$mn        ends
.text$mn:00007521
.text$mn:00007524 ; ===========================================================================
.text$mn:00007524
.text$mn:00007524 ; Segment type: Pure code
.text$mn:00007524 ; Segment permissions: Read/Execute
.text$mn:00007524 _text$mn        segment para public 'CODE' use32
.text$mn:00007524                 assume cs:_text$mn
.text$mn:00007524                 ;org 7524h
.text$mn:00007524 ; COMDAT (pick any)
.text$mn:00007524                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007524
.text$mn:00007524 ; =============== S U B R O U T I N E =======================================
.text$mn:00007524
.text$mn:00007524 ; Attributes: bp-based frame
.text$mn:00007524
.text$mn:00007524 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:00007524                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:00007524 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:00007524                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:00007524
.text$mn:00007524 var_4           = dword ptr -4
.text$mn:00007524 Src             = dword ptr  8
.text$mn:00007524 arg_4           = dword ptr  0Ch
.text$mn:00007524
.text$mn:00007524                 push    ebp
.text$mn:00007525                 mov     ebp, esp
.text$mn:00007527                 push    ecx
.text$mn:00007528                 mov     [ebp+var_4], ecx
.text$mn:0000752B                 cmp     [ebp+arg_4], 0
.text$mn:0000752F                 jz      short loc_7547
.text$mn:00007531                 push    47Fh            ; unsigned int
.text$mn:00007536                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000753B                 mov     eax, [ebp+Src]
.text$mn:0000753E                 push    eax             ; int
.text$mn:0000753F                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:00007544                 add     esp, 0Ch
.text$mn:00007547
.text$mn:00007547 loc_7547:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:00007547                 mov     ecx, [ebp+Src]
.text$mn:0000754A                 push    ecx
.text$mn:0000754B                 mov     ecx, [ebp+var_4]
.text$mn:0000754E                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00007553                 movzx   edx, al
.text$mn:00007556                 test    edx, edx
.text$mn:00007558                 jz      short loc_757C
.text$mn:0000755A                 mov     eax, [ebp+arg_4]
.text$mn:0000755D                 push    eax
.text$mn:0000755E                 mov     ecx, [ebp+var_4]
.text$mn:00007561                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007566                 mov     ecx, [ebp+Src]
.text$mn:00007569                 sub     ecx, eax
.text$mn:0000756B                 sar     ecx, 1
.text$mn:0000756D                 push    ecx
.text$mn:0000756E                 mov     edx, [ebp+var_4]
.text$mn:00007571                 push    edx
.text$mn:00007572                 mov     ecx, [ebp+var_4]
.text$mn:00007575                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:0000757A                 jmp     short loc_75B9
.text$mn:0000757C ; ---------------------------------------------------------------------------
.text$mn:0000757C
.text$mn:0000757C loc_757C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:0000757C                 push    0
.text$mn:0000757E                 mov     eax, [ebp+arg_4]
.text$mn:00007581                 push    eax
.text$mn:00007582                 mov     ecx, [ebp+var_4]
.text$mn:00007585                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000758A                 movzx   ecx, al
.text$mn:0000758D                 test    ecx, ecx
.text$mn:0000758F                 jz      short loc_75B6
.text$mn:00007591                 mov     edx, [ebp+arg_4]
.text$mn:00007594                 push    edx             ; int
.text$mn:00007595                 mov     eax, [ebp+Src]
.text$mn:00007598                 push    eax             ; Src
.text$mn:00007599                 mov     ecx, [ebp+var_4]
.text$mn:0000759C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000075A1                 push    eax             ; Dst
.text$mn:000075A2                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000075A7                 add     esp, 0Ch
.text$mn:000075AA                 mov     ecx, [ebp+arg_4]
.text$mn:000075AD                 push    ecx
.text$mn:000075AE                 mov     ecx, [ebp+var_4]
.text$mn:000075B1                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000075B6
.text$mn:000075B6 loc_75B6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:000075B6                 mov     eax, [ebp+var_4]
.text$mn:000075B9
.text$mn:000075B9 loc_75B9:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:000075B9                 mov     esp, ebp
.text$mn:000075BB                 pop     ebp
.text$mn:000075BC                 retn    8
.text$mn:000075BC ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:000075BC
.text$mn:000075BC ; ---------------------------------------------------------------------------
.text$mn:000075BF                 align 10h
.text$mn:000075BF _text$mn        ends
.text$mn:000075BF
.text$mn:000075C0 ; ===========================================================================
.text$mn:000075C0
.text$mn:000075C0 ; Segment type: Pure code
.text$mn:000075C0 ; Segment permissions: Read/Execute
.text$mn:000075C0 _text$mn        segment para public 'CODE' use32
.text$mn:000075C0                 assume cs:_text$mn
.text$mn:000075C0                 ;org 75C0h
.text$mn:000075C0 ; COMDAT (pick any)
.text$mn:000075C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075C0
.text$mn:000075C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000075C0
.text$mn:000075C0 ; Attributes: bp-based frame
.text$mn:000075C0
.text$mn:000075C0 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:000075C0                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:000075C0 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:000075C0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:000075C0
.text$mn:000075C0 arg_0           = dword ptr  8
.text$mn:000075C0 arg_4           = dword ptr  0Ch
.text$mn:000075C0
.text$mn:000075C0                 push    ebp
.text$mn:000075C1                 mov     ebp, esp
.text$mn:000075C3                 mov     eax, [ebp+arg_0]
.text$mn:000075C6                 mov     ecx, [ebp+arg_4]
.text$mn:000075C9                 mov     dl, [ecx]
.text$mn:000075CB                 mov     [eax], dl
.text$mn:000075CD                 pop     ebp
.text$mn:000075CE                 retn
.text$mn:000075CE ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:000075CE
.text$mn:000075CE ; ---------------------------------------------------------------------------
.text$mn:000075CF                 align 10h
.text$mn:000075CF _text$mn        ends
.text$mn:000075CF
.text$mn:000075D0 ; ===========================================================================
.text$mn:000075D0
.text$mn:000075D0 ; Segment type: Pure code
.text$mn:000075D0 ; Segment permissions: Read/Execute
.text$mn:000075D0 _text$mn        segment para public 'CODE' use32
.text$mn:000075D0                 assume cs:_text$mn
.text$mn:000075D0                 ;org 75D0h
.text$mn:000075D0 ; COMDAT (pick any)
.text$mn:000075D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075D0
.text$mn:000075D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000075D0
.text$mn:000075D0 ; Attributes: bp-based frame
.text$mn:000075D0
.text$mn:000075D0 ; public: static wchar_t * __cdecl std::char_traits<wchar_t>::assign(wchar_t *, unsigned int, wchar_t)
.text$mn:000075D0                 public ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z
.text$mn:000075D0 ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z proc near
.text$mn:000075D0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+42p
.text$mn:000075D0
.text$mn:000075D0 arg_0           = dword ptr  8
.text$mn:000075D0 arg_4           = dword ptr  0Ch
.text$mn:000075D0 arg_8           = word ptr  10h
.text$mn:000075D0
.text$mn:000075D0                 push    ebp
.text$mn:000075D1                 mov     ebp, esp
.text$mn:000075D3                 mov     eax, [ebp+arg_4]
.text$mn:000075D6                 push    eax
.text$mn:000075D7                 movzx   ecx, [ebp+arg_8]
.text$mn:000075DB                 push    ecx
.text$mn:000075DC                 mov     edx, [ebp+arg_0]
.text$mn:000075DF                 push    edx
.text$mn:000075E0                 call    _wmemset
.text$mn:000075E5                 add     esp, 0Ch
.text$mn:000075E8                 pop     ebp
.text$mn:000075E9                 retn
.text$mn:000075E9 ?assign@?$char_traits@_W@std@@SAPA_WPA_WI_W@Z endp
.text$mn:000075E9
.text$mn:000075E9 ; ---------------------------------------------------------------------------
.text$mn:000075EA                 align 4
.text$mn:000075EA _text$mn        ends
.text$mn:000075EA
.text$mn:000075EC ; ===========================================================================
.text$mn:000075EC
.text$mn:000075EC ; Segment type: Pure code
.text$mn:000075EC ; Segment permissions: Read/Execute
.text$mn:000075EC _text$mn        segment para public 'CODE' use32
.text$mn:000075EC                 assume cs:_text$mn
.text$mn:000075EC                 ;org 75ECh
.text$mn:000075EC ; COMDAT (pick any)
.text$mn:000075EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000075EC
.text$mn:000075EC ; =============== S U B R O U T I N E =======================================
.text$mn:000075EC
.text$mn:000075EC ; Attributes: bp-based frame
.text$mn:000075EC
.text$mn:000075EC ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:000075EC                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:000075EC ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:000075EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Chassign(uint,uint,wchar_t)+20p
.text$mn:000075EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:000075EC
.text$mn:000075EC arg_0           = dword ptr  8
.text$mn:000075EC arg_4           = dword ptr  0Ch
.text$mn:000075EC
.text$mn:000075EC                 push    ebp
.text$mn:000075ED                 mov     ebp, esp
.text$mn:000075EF                 mov     eax, [ebp+arg_0]
.text$mn:000075F2                 mov     ecx, [ebp+arg_4]
.text$mn:000075F5                 mov     dx, [ecx]
.text$mn:000075F8                 mov     [eax], dx
.text$mn:000075FB                 pop     ebp
.text$mn:000075FC                 retn
.text$mn:000075FC ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:000075FC
.text$mn:000075FC ; ---------------------------------------------------------------------------
.text$mn:000075FD                 align 10h
.text$mn:000075FD _text$mn        ends
.text$mn:000075FD
.text$mn:00007600 ; ===========================================================================
.text$mn:00007600
.text$mn:00007600 ; Segment type: Pure code
.text$mn:00007600 ; Segment permissions: Read/Execute
.text$mn:00007600 _text$mn        segment para public 'CODE' use32
.text$mn:00007600                 assume cs:_text$mn
.text$mn:00007600                 ;org 7600h
.text$mn:00007600 ; COMDAT (pick any)
.text$mn:00007600                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007600
.text$mn:00007600 ; =============== S U B R O U T I N E =======================================
.text$mn:00007600
.text$mn:00007600 ; Attributes: bp-based frame
.text$mn:00007600
.text$mn:00007600 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>> __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::begin(void)
.text$mn:00007600                 public ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
.text$mn:00007600 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ proc near
.text$mn:00007600                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+C2Bp
.text$mn:00007600                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+A9p ...
.text$mn:00007600
.text$mn:00007600 var_14          = dword ptr -14h
.text$mn:00007600 var_10          = dword ptr -10h
.text$mn:00007600 var_C           = dword ptr -0Ch
.text$mn:00007600 var_4           = dword ptr -4
.text$mn:00007600 arg_0           = dword ptr  8
.text$mn:00007600
.text$mn:00007600                 push    ebp
.text$mn:00007601                 mov     ebp, esp
.text$mn:00007603                 push    0FFFFFFFFh
.text$mn:00007605                 push    offset __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
.text$mn:0000760A                 mov     eax, large fs:0
.text$mn:00007610                 push    eax
.text$mn:00007611                 sub     esp, 8
.text$mn:00007614                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007619                 xor     eax, ebp
.text$mn:0000761B                 push    eax
.text$mn:0000761C                 lea     eax, [ebp+var_C]
.text$mn:0000761F                 mov     large fs:0, eax
.text$mn:00007625                 mov     [ebp+var_10], ecx
.text$mn:00007628                 mov     [ebp+var_14], 0
.text$mn:0000762F                 mov     eax, [ebp+var_10]
.text$mn:00007632                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007633                 mov     ecx, [ebp+var_10]
.text$mn:00007636                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000763B                 push    eax             ; int
.text$mn:0000763C                 mov     ecx, [ebp+arg_0]
.text$mn:0000763F                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(char *,std::_Container_base12 const *)
.text$mn:00007644                 mov     [ebp+var_4], 0
.text$mn:0000764B                 mov     ecx, [ebp+var_14]
.text$mn:0000764E                 or      ecx, 1
.text$mn:00007651                 mov     [ebp+var_14], ecx
.text$mn:00007654                 mov     eax, [ebp+arg_0]
.text$mn:00007657                 mov     ecx, [ebp+var_C]
.text$mn:0000765A                 mov     large fs:0, ecx
.text$mn:00007661                 pop     ecx
.text$mn:00007662                 mov     esp, ebp
.text$mn:00007664                 pop     ebp
.text$mn:00007665                 retn    4
.text$mn:00007665 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ endp
.text$mn:00007665
.text$mn:00007665 _text$mn        ends
.text$mn:00007665
.text$x:00007668 ; ===========================================================================
.text$x:00007668
.text$x:00007668 ; Segment type: Pure code
.text$x:00007668 ; Segment permissions: Read/Execute
.text$x:00007668 _text$x         segment para public 'CODE' use32
.text$x:00007668                 assume cs:_text$x
.text$x:00007668                 ;org 7668h
.text$x:00007668 ; COMDAT (pick associative to section at 7600)
.text$x:00007668                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007668
.text$x:00007668 ; =============== S U B R O U T I N E =======================================
.text$x:00007668
.text$x:00007668
.text$x:00007668 __unwindfunclet$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ$0 proc near
.text$x:00007668                                         ; DATA XREF: .xdata$x:00009428o
.text$x:00007668                 mov     eax, [ebp-14h]
.text$x:0000766B                 and     eax, 1
.text$x:0000766E                 jz      $LN4
.text$x:00007674                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00007678                 mov     ecx, [ebp+8]
.text$x:0000767B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00007680 ; ---------------------------------------------------------------------------
.text$x:00007680
.text$x:00007680 $LN4:                                   ; CODE XREF: __unwindfunclet$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ$0+6j
.text$x:00007680                 retn
.text$x:00007680 __unwindfunclet$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ$0 endp
.text$x:00007680
.text$x:00007681
.text$x:00007681 ; =============== S U B R O U T I N E =======================================
.text$x:00007681
.text$x:00007681
.text$x:00007681 __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ proc near
.text$x:00007681                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin(void)+5o
.text$x:00007681
.text$x:00007681 arg_4           = dword ptr  8
.text$x:00007681
.text$x:00007681                 mov     edx, [esp+arg_4]
.text$x:00007685                 lea     eax, [edx+0Ch]
.text$x:00007688                 mov     ecx, [edx-0Ch]
.text$x:0000768B                 xor     ecx, eax
.text$x:0000768D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007692                 mov     eax, offset __ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
.text$x:00007697                 jmp     ___CxxFrameHandler3
.text$x:00007697 __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ endp
.text$x:00007697
.text$x:00007697 _text$x         ends
.text$x:00007697
.text$mn:0000769C ; ===========================================================================
.text$mn:0000769C
.text$mn:0000769C ; Segment type: Pure code
.text$mn:0000769C ; Segment permissions: Read/Execute
.text$mn:0000769C _text$mn        segment para public 'CODE' use32
.text$mn:0000769C                 assume cs:_text$mn
.text$mn:0000769C                 ;org 769Ch
.text$mn:0000769C ; COMDAT (pick any)
.text$mn:0000769C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000769C
.text$mn:0000769C ; =============== S U B R O U T I N E =======================================
.text$mn:0000769C
.text$mn:0000769C ; Attributes: bp-based frame
.text$mn:0000769C
.text$mn:0000769C ; public: char const * __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::c_str(void)const
.text$mn:0000769C                 public ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
.text$mn:0000769C ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
.text$mn:0000769C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+BADp
.text$mn:0000769C                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D05p
.text$mn:0000769C
.text$mn:0000769C var_4           = dword ptr -4
.text$mn:0000769C
.text$mn:0000769C                 push    ebp
.text$mn:0000769D                 mov     ebp, esp
.text$mn:0000769F                 push    ecx
.text$mn:000076A0                 mov     [ebp+var_4], ecx
.text$mn:000076A3                 mov     ecx, [ebp+var_4]
.text$mn:000076A6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000076AB                 mov     esp, ebp
.text$mn:000076AD                 pop     ebp
.text$mn:000076AE                 retn
.text$mn:000076AE ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ endp
.text$mn:000076AE
.text$mn:000076AE ; ---------------------------------------------------------------------------
.text$mn:000076AF                 align 10h
.text$mn:000076AF _text$mn        ends
.text$mn:000076AF
.text$mn:000076B0 ; ===========================================================================
.text$mn:000076B0
.text$mn:000076B0 ; Segment type: Pure code
.text$mn:000076B0 ; Segment permissions: Read/Execute
.text$mn:000076B0 _text$mn        segment para public 'CODE' use32
.text$mn:000076B0                 assume cs:_text$mn
.text$mn:000076B0                 ;org 76B0h
.text$mn:000076B0 ; COMDAT (pick any)
.text$mn:000076B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076B0
.text$mn:000076B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000076B0
.text$mn:000076B0 ; Attributes: bp-based frame
.text$mn:000076B0
.text$mn:000076B0 ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:000076B0                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:000076B0 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:000076B0                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+697p
.text$mn:000076B0                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+6F9p ...
.text$mn:000076B0
.text$mn:000076B0 var_4           = dword ptr -4
.text$mn:000076B0
.text$mn:000076B0                 push    ebp
.text$mn:000076B1                 mov     ebp, esp
.text$mn:000076B3                 push    ecx
.text$mn:000076B4                 mov     [ebp+var_4], ecx
.text$mn:000076B7                 mov     ecx, [ebp+var_4]
.text$mn:000076BA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000076BF                 mov     esp, ebp
.text$mn:000076C1                 pop     ebp
.text$mn:000076C2                 retn
.text$mn:000076C2 ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:000076C2
.text$mn:000076C2 ; ---------------------------------------------------------------------------
.text$mn:000076C3                 align 4
.text$mn:000076C3 _text$mn        ends
.text$mn:000076C3
.text$mn:000076C4 ; ===========================================================================
.text$mn:000076C4
.text$mn:000076C4 ; Segment type: Pure code
.text$mn:000076C4 ; Segment permissions: Read/Execute
.text$mn:000076C4 _text$mn        segment para public 'CODE' use32
.text$mn:000076C4                 assume cs:_text$mn
.text$mn:000076C4                 ;org 76C4h
.text$mn:000076C4 ; COMDAT (pick any)
.text$mn:000076C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076C4
.text$mn:000076C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000076C4
.text$mn:000076C4 ; Attributes: bp-based frame
.text$mn:000076C4
.text$mn:000076C4 ; public: unsigned int __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::capacity(void)const
.text$mn:000076C4                 public ?capacity@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ
.text$mn:000076C4 ?capacity@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ proc near
.text$mn:000076C4                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Grow_to(uint)+Cp
.text$mn:000076C4
.text$mn:000076C4 var_4           = dword ptr -4
.text$mn:000076C4
.text$mn:000076C4                 push    ebp
.text$mn:000076C5                 mov     ebp, esp
.text$mn:000076C7                 push    ecx
.text$mn:000076C8                 mov     [ebp+var_4], ecx
.text$mn:000076CB                 mov     eax, [ebp+var_4]
.text$mn:000076CE                 mov     ecx, [ebp+var_4]
.text$mn:000076D1                 mov     eax, [eax+0Ch]
.text$mn:000076D4                 sub     eax, [ecx+4]
.text$mn:000076D7                 cdq
.text$mn:000076D8                 mov     ecx, 38h ; '8'
.text$mn:000076DD                 idiv    ecx
.text$mn:000076DF                 mov     esp, ebp
.text$mn:000076E1                 pop     ebp
.text$mn:000076E2                 retn
.text$mn:000076E2 ?capacity@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ endp
.text$mn:000076E2
.text$mn:000076E2 ; ---------------------------------------------------------------------------
.text$mn:000076E3                 align 4
.text$mn:000076E3 _text$mn        ends
.text$mn:000076E3
.text$mn:000076E4 ; ===========================================================================
.text$mn:000076E4
.text$mn:000076E4 ; Segment type: Pure code
.text$mn:000076E4 ; Segment permissions: Read/Execute
.text$mn:000076E4 _text$mn        segment para public 'CODE' use32
.text$mn:000076E4                 assume cs:_text$mn
.text$mn:000076E4                 ;org 76E4h
.text$mn:000076E4 ; COMDAT (pick any)
.text$mn:000076E4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076E4
.text$mn:000076E4 ; =============== S U B R O U T I N E =======================================
.text$mn:000076E4
.text$mn:000076E4 ; Attributes: bp-based frame
.text$mn:000076E4
.text$mn:000076E4 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::capacity(void)const
.text$mn:000076E4                 public ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:000076E4 ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:000076E4                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+Cp
.text$mn:000076E4
.text$mn:000076E4 var_4           = dword ptr -4
.text$mn:000076E4
.text$mn:000076E4                 push    ebp
.text$mn:000076E5                 mov     ebp, esp
.text$mn:000076E7                 push    ecx
.text$mn:000076E8                 mov     [ebp+var_4], ecx
.text$mn:000076EB                 mov     eax, [ebp+var_4]
.text$mn:000076EE                 mov     ecx, [ebp+var_4]
.text$mn:000076F1                 mov     eax, [eax+0Ch]
.text$mn:000076F4                 sub     eax, [ecx+4]
.text$mn:000076F7                 cdq
.text$mn:000076F8                 mov     ecx, 1Ch
.text$mn:000076FD                 idiv    ecx
.text$mn:000076FF                 mov     esp, ebp
.text$mn:00007701                 pop     ebp
.text$mn:00007702                 retn
.text$mn:00007702 ?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:00007702
.text$mn:00007702 ; ---------------------------------------------------------------------------
.text$mn:00007703                 align 4
.text$mn:00007703 _text$mn        ends
.text$mn:00007703
.text$mn:00007704 ; ===========================================================================
.text$mn:00007704
.text$mn:00007704 ; Segment type: Pure code
.text$mn:00007704 ; Segment permissions: Read/Execute
.text$mn:00007704 _text$mn        segment para public 'CODE' use32
.text$mn:00007704                 assume cs:_text$mn
.text$mn:00007704                 ;org 7704h
.text$mn:00007704 ; COMDAT (pick any)
.text$mn:00007704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007704
.text$mn:00007704 ; =============== S U B R O U T I N E =======================================
.text$mn:00007704
.text$mn:00007704 ; Attributes: bp-based frame
.text$mn:00007704
.text$mn:00007704 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:00007704                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:00007704 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00007704                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:00007704
.text$mn:00007704 var_4           = dword ptr -4
.text$mn:00007704
.text$mn:00007704                 push    ebp
.text$mn:00007705                 mov     ebp, esp
.text$mn:00007707                 push    ecx
.text$mn:00007708                 mov     [ebp+var_4], ecx
.text$mn:0000770B                 mov     eax, [ebp+var_4]
.text$mn:0000770E                 mov     eax, [eax+4]
.text$mn:00007711                 mov     esp, ebp
.text$mn:00007713                 pop     ebp
.text$mn:00007714                 retn
.text$mn:00007714 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00007714
.text$mn:00007714 ; ---------------------------------------------------------------------------
.text$mn:00007715                 align 4
.text$mn:00007715 _text$mn        ends
.text$mn:00007715
.text$mn:00007718 ; ===========================================================================
.text$mn:00007718
.text$mn:00007718 ; Segment type: Pure code
.text$mn:00007718 ; Segment permissions: Read/Execute
.text$mn:00007718 _text$mn        segment para public 'CODE' use32
.text$mn:00007718                 assume cs:_text$mn
.text$mn:00007718                 ;org 7718h
.text$mn:00007718 ; COMDAT (pick any)
.text$mn:00007718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007718
.text$mn:00007718 ; =============== S U B R O U T I N E =======================================
.text$mn:00007718
.text$mn:00007718 ; Attributes: bp-based frame
.text$mn:00007718
.text$mn:00007718 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00007718                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00007718 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00007718                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00007718                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00007718
.text$mn:00007718 var_4           = dword ptr -4
.text$mn:00007718
.text$mn:00007718                 push    ebp
.text$mn:00007719                 mov     ebp, esp
.text$mn:0000771B                 push    ecx
.text$mn:0000771C                 mov     [ebp+var_4], ecx
.text$mn:0000771F                 mov     eax, [ebp+var_4]
.text$mn:00007722                 mov     eax, [eax+4]
.text$mn:00007725                 mov     esp, ebp
.text$mn:00007727                 pop     ebp
.text$mn:00007728                 retn
.text$mn:00007728 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00007728
.text$mn:00007728 ; ---------------------------------------------------------------------------
.text$mn:00007729                 align 4
.text$mn:00007729 _text$mn        ends
.text$mn:00007729
.text$mn:0000772C ; ===========================================================================
.text$mn:0000772C
.text$mn:0000772C ; Segment type: Pure code
.text$mn:0000772C ; Segment permissions: Read/Execute
.text$mn:0000772C _text$mn        segment para public 'CODE' use32
.text$mn:0000772C                 assume cs:_text$mn
.text$mn:0000772C                 ;org 772Ch
.text$mn:0000772C ; COMDAT (pick any)
.text$mn:0000772C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000772C
.text$mn:0000772C ; =============== S U B R O U T I N E =======================================
.text$mn:0000772C
.text$mn:0000772C ; Attributes: bp-based frame
.text$mn:0000772C
.text$mn:0000772C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::clear(void)
.text$mn:0000772C                 public ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
.text$mn:0000772C ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ proc near
.text$mn:0000772C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+8BDp
.text$mn:0000772C
.text$mn:0000772C var_4           = dword ptr -4
.text$mn:0000772C
.text$mn:0000772C                 push    ebp
.text$mn:0000772D                 mov     ebp, esp
.text$mn:0000772F                 push    ecx
.text$mn:00007730                 mov     [ebp+var_4], ecx
.text$mn:00007733                 push    0
.text$mn:00007735                 mov     ecx, [ebp+var_4]
.text$mn:00007738                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000773D                 mov     esp, ebp
.text$mn:0000773F                 pop     ebp
.text$mn:00007740                 retn
.text$mn:00007740 ?clear@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ endp
.text$mn:00007740
.text$mn:00007740 ; ---------------------------------------------------------------------------
.text$mn:00007741                 align 4
.text$mn:00007741 _text$mn        ends
.text$mn:00007741
.text$mn:00007744 ; ===========================================================================
.text$mn:00007744
.text$mn:00007744 ; Segment type: Pure code
.text$mn:00007744 ; Segment permissions: Read/Execute
.text$mn:00007744 _text$mn        segment para public 'CODE' use32
.text$mn:00007744                 assume cs:_text$mn
.text$mn:00007744                 ;org 7744h
.text$mn:00007744 ; COMDAT (pick any)
.text$mn:00007744                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007744
.text$mn:00007744 ; =============== S U B R O U T I N E =======================================
.text$mn:00007744
.text$mn:00007744 ; Attributes: bp-based frame
.text$mn:00007744
.text$mn:00007744 ; public: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::clear(void)
.text$mn:00007744                 public ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ
.text$mn:00007744 ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ proc near
.text$mn:00007744                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+73Cp
.text$mn:00007744                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+8B2p
.text$mn:00007744
.text$mn:00007744 var_4           = dword ptr -4
.text$mn:00007744
.text$mn:00007744                 push    ebp
.text$mn:00007745                 mov     ebp, esp
.text$mn:00007747                 push    ecx
.text$mn:00007748                 mov     [ebp+var_4], ecx
.text$mn:0000774B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000774E                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007753                 mov     eax, [ebp+var_4]
.text$mn:00007756                 mov     ecx, [eax+8]
.text$mn:00007759                 push    ecx
.text$mn:0000775A                 mov     edx, [ebp+var_4]
.text$mn:0000775D                 mov     eax, [edx+4]
.text$mn:00007760                 push    eax
.text$mn:00007761                 mov     ecx, [ebp+var_4]
.text$mn:00007764                 call    ?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Destroy(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00007769                 mov     ecx, [ebp+var_4]
.text$mn:0000776C                 mov     edx, [ebp+var_4]
.text$mn:0000776F                 mov     eax, [edx+4]
.text$mn:00007772                 mov     [ecx+8], eax
.text$mn:00007775                 mov     esp, ebp
.text$mn:00007777                 pop     ebp
.text$mn:00007778                 retn
.text$mn:00007778 ?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ endp
.text$mn:00007778
.text$mn:00007778 ; ---------------------------------------------------------------------------
.text$mn:00007779                 align 4
.text$mn:00007779 _text$mn        ends
.text$mn:00007779
.text$mn:0000777C ; ===========================================================================
.text$mn:0000777C
.text$mn:0000777C ; Segment type: Pure code
.text$mn:0000777C ; Segment permissions: Read/Execute
.text$mn:0000777C _text$mn        segment para public 'CODE' use32
.text$mn:0000777C                 assume cs:_text$mn
.text$mn:0000777C                 ;org 777Ch
.text$mn:0000777C ; COMDAT (pick any)
.text$mn:0000777C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000777C
.text$mn:0000777C ; =============== S U B R O U T I N E =======================================
.text$mn:0000777C
.text$mn:0000777C ; Attributes: bp-based frame
.text$mn:0000777C
.text$mn:0000777C ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(int, int, void *Buf2, int)
.text$mn:0000777C                 public ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
.text$mn:0000777C ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z proc near
.text$mn:0000777C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(char const *)+3Ap
.text$mn:0000777C
.text$mn:0000777C var_18          = dword ptr -18h
.text$mn:0000777C var_14          = dword ptr -14h
.text$mn:0000777C var_10          = dword ptr -10h
.text$mn:0000777C var_C           = dword ptr -0Ch
.text$mn:0000777C Size            = dword ptr -8
.text$mn:0000777C var_4           = dword ptr -4
.text$mn:0000777C arg_0           = dword ptr  8
.text$mn:0000777C arg_4           = dword ptr  0Ch
.text$mn:0000777C Buf2            = dword ptr  10h
.text$mn:0000777C arg_C           = dword ptr  14h
.text$mn:0000777C
.text$mn:0000777C                 push    ebp
.text$mn:0000777D                 mov     ebp, esp
.text$mn:0000777F                 sub     esp, 18h
.text$mn:00007782                 mov     [ebp+var_4], ecx
.text$mn:00007785                 cmp     [ebp+arg_C], 0
.text$mn:00007789                 jz      short loc_77A1
.text$mn:0000778B                 push    87Dh            ; unsigned int
.text$mn:00007790                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007795                 mov     eax, [ebp+Buf2]
.text$mn:00007798                 push    eax             ; int
.text$mn:00007799                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000779E                 add     esp, 0Ch
.text$mn:000077A1
.text$mn:000077A1 loc_77A1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+Dj
.text$mn:000077A1                 mov     ecx, [ebp+var_4]
.text$mn:000077A4                 mov     edx, [ecx+14h]
.text$mn:000077A7                 cmp     edx, [ebp+arg_0]
.text$mn:000077AA                 jnb     short loc_77B4
.text$mn:000077AC                 mov     ecx, [ebp+var_4]
.text$mn:000077AF                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000077B4
.text$mn:000077B4 loc_77B4:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+2Ej
.text$mn:000077B4                 mov     eax, [ebp+var_4]
.text$mn:000077B7                 mov     ecx, [eax+14h]
.text$mn:000077BA                 sub     ecx, [ebp+arg_0]
.text$mn:000077BD                 cmp     ecx, [ebp+arg_4]
.text$mn:000077C0                 jnb     short loc_77CE
.text$mn:000077C2                 mov     edx, [ebp+var_4]
.text$mn:000077C5                 mov     eax, [edx+14h]
.text$mn:000077C8                 sub     eax, [ebp+arg_0]
.text$mn:000077CB                 mov     [ebp+arg_4], eax
.text$mn:000077CE
.text$mn:000077CE loc_77CE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+44j
.text$mn:000077CE                 mov     ecx, [ebp+arg_4]
.text$mn:000077D1                 cmp     ecx, [ebp+arg_C]
.text$mn:000077D4                 jnb     short loc_77DE
.text$mn:000077D6                 mov     edx, [ebp+arg_4]
.text$mn:000077D9                 mov     [ebp+Size], edx
.text$mn:000077DC                 jmp     short loc_77E4
.text$mn:000077DE ; ---------------------------------------------------------------------------
.text$mn:000077DE
.text$mn:000077DE loc_77DE:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+58j
.text$mn:000077DE                 mov     eax, [ebp+arg_C]
.text$mn:000077E1                 mov     [ebp+Size], eax
.text$mn:000077E4
.text$mn:000077E4 loc_77E4:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+60j
.text$mn:000077E4                 mov     ecx, [ebp+Size]
.text$mn:000077E7                 push    ecx             ; Size
.text$mn:000077E8                 mov     edx, [ebp+Buf2]
.text$mn:000077EB                 push    edx             ; Buf2
.text$mn:000077EC                 mov     ecx, [ebp+var_4]
.text$mn:000077EF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000077F4                 add     eax, [ebp+arg_0]
.text$mn:000077F7                 push    eax             ; Buf1
.text$mn:000077F8                 call    ?compare@?$char_traits@D@std@@SAHPBD0I@Z ; std::char_traits<char>::compare(char const *,char const *,uint)
.text$mn:000077FD                 add     esp, 0Ch
.text$mn:00007800                 mov     [ebp+var_C], eax
.text$mn:00007803                 cmp     [ebp+var_C], 0
.text$mn:00007807                 jz      short loc_7811
.text$mn:00007809                 mov     eax, [ebp+var_C]
.text$mn:0000780C                 mov     [ebp+var_18], eax
.text$mn:0000780F                 jmp     short loc_7846
.text$mn:00007811 ; ---------------------------------------------------------------------------
.text$mn:00007811
.text$mn:00007811 loc_7811:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+8Bj
.text$mn:00007811                 mov     ecx, [ebp+arg_4]
.text$mn:00007814                 cmp     ecx, [ebp+arg_C]
.text$mn:00007817                 jnb     short loc_7822
.text$mn:00007819                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:00007820                 jmp     short loc_7840
.text$mn:00007822 ; ---------------------------------------------------------------------------
.text$mn:00007822
.text$mn:00007822 loc_7822:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+9Bj
.text$mn:00007822                 mov     edx, [ebp+arg_4]
.text$mn:00007825                 cmp     edx, [ebp+arg_C]
.text$mn:00007828                 jnz     short loc_7833
.text$mn:0000782A                 mov     [ebp+var_10], 0
.text$mn:00007831                 jmp     short loc_783A
.text$mn:00007833 ; ---------------------------------------------------------------------------
.text$mn:00007833
.text$mn:00007833 loc_7833:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+ACj
.text$mn:00007833                 mov     [ebp+var_10], 1
.text$mn:0000783A
.text$mn:0000783A loc_783A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+B5j
.text$mn:0000783A                 mov     eax, [ebp+var_10]
.text$mn:0000783D                 mov     [ebp+var_14], eax
.text$mn:00007840
.text$mn:00007840 loc_7840:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+A4j
.text$mn:00007840                 mov     ecx, [ebp+var_14]
.text$mn:00007843                 mov     [ebp+var_18], ecx
.text$mn:00007846
.text$mn:00007846 loc_7846:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+93j
.text$mn:00007846                 mov     eax, [ebp+var_18]
.text$mn:00007849                 mov     esp, ebp
.text$mn:0000784B                 pop     ebp
.text$mn:0000784C                 retn    10h
.text$mn:0000784C ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z endp
.text$mn:0000784C
.text$mn:0000784C ; ---------------------------------------------------------------------------
.text$mn:0000784F                 align 10h
.text$mn:0000784F _text$mn        ends
.text$mn:0000784F
.text$mn:00007850 ; ===========================================================================
.text$mn:00007850
.text$mn:00007850 ; Segment type: Pure code
.text$mn:00007850 ; Segment permissions: Read/Execute
.text$mn:00007850 _text$mn        segment para public 'CODE' use32
.text$mn:00007850                 assume cs:_text$mn
.text$mn:00007850                 ;org 7850h
.text$mn:00007850 ; COMDAT (pick any)
.text$mn:00007850                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007850
.text$mn:00007850 ; =============== S U B R O U T I N E =======================================
.text$mn:00007850
.text$mn:00007850 ; Attributes: bp-based frame
.text$mn:00007850
.text$mn:00007850 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(char *Str)
.text$mn:00007850                 public ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z
.text$mn:00007850 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z proc near
.text$mn:00007850                                         ; CODE XREF: std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)+Bp
.text$mn:00007850
.text$mn:00007850 var_4           = dword ptr -4
.text$mn:00007850 Str             = dword ptr  8
.text$mn:00007850
.text$mn:00007850                 push    ebp
.text$mn:00007851                 mov     ebp, esp
.text$mn:00007853                 push    ecx
.text$mn:00007854                 mov     [ebp+var_4], ecx
.text$mn:00007857                 push    86Eh            ; unsigned int
.text$mn:0000785C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007861                 mov     eax, [ebp+Str]
.text$mn:00007864                 push    eax             ; int
.text$mn:00007865                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000786A                 add     esp, 0Ch
.text$mn:0000786D                 mov     ecx, [ebp+Str]
.text$mn:00007870                 push    ecx             ; Str
.text$mn:00007871                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:00007876                 add     esp, 4
.text$mn:00007879                 push    eax             ; int
.text$mn:0000787A                 mov     edx, [ebp+Str]
.text$mn:0000787D                 push    edx             ; Buf2
.text$mn:0000787E                 mov     eax, [ebp+var_4]
.text$mn:00007881                 mov     ecx, [eax+14h]
.text$mn:00007884                 push    ecx             ; int
.text$mn:00007885                 push    0               ; int
.text$mn:00007887                 mov     ecx, [ebp+var_4]
.text$mn:0000788A                 call    ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)
.text$mn:0000788F                 mov     esp, ebp
.text$mn:00007891                 pop     ebp
.text$mn:00007892                 retn    4
.text$mn:00007892 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHPBD@Z endp
.text$mn:00007892
.text$mn:00007892 ; ---------------------------------------------------------------------------
.text$mn:00007895                 align 4
.text$mn:00007895 _text$mn        ends
.text$mn:00007895
.text$mn:00007898 ; ===========================================================================
.text$mn:00007898
.text$mn:00007898 ; Segment type: Pure code
.text$mn:00007898 ; Segment permissions: Read/Execute
.text$mn:00007898 _text$mn        segment para public 'CODE' use32
.text$mn:00007898                 assume cs:_text$mn
.text$mn:00007898                 ;org 7898h
.text$mn:00007898 ; COMDAT (pick any)
.text$mn:00007898                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007898
.text$mn:00007898 ; =============== S U B R O U T I N E =======================================
.text$mn:00007898
.text$mn:00007898 ; Attributes: bp-based frame
.text$mn:00007898
.text$mn:00007898 ; public: int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::compare(unsigned int, unsigned int, wchar_t const *, unsigned int)const
.text$mn:00007898                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z
.text$mn:00007898 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z proc near
.text$mn:00007898                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+3Ap
.text$mn:00007898
.text$mn:00007898 var_18          = dword ptr -18h
.text$mn:00007898 var_14          = dword ptr -14h
.text$mn:00007898 var_10          = dword ptr -10h
.text$mn:00007898 var_C           = dword ptr -0Ch
.text$mn:00007898 var_8           = dword ptr -8
.text$mn:00007898 var_4           = dword ptr -4
.text$mn:00007898 arg_0           = dword ptr  8
.text$mn:00007898 arg_4           = dword ptr  0Ch
.text$mn:00007898 arg_8           = dword ptr  10h
.text$mn:00007898 arg_C           = dword ptr  14h
.text$mn:00007898
.text$mn:00007898                 push    ebp
.text$mn:00007899                 mov     ebp, esp
.text$mn:0000789B                 sub     esp, 18h
.text$mn:0000789E                 mov     [ebp+var_4], ecx
.text$mn:000078A1                 cmp     [ebp+arg_C], 0
.text$mn:000078A5                 jz      short loc_78BD
.text$mn:000078A7                 push    87Dh            ; unsigned int
.text$mn:000078AC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000078B1                 mov     eax, [ebp+arg_8]
.text$mn:000078B4                 push    eax             ; int
.text$mn:000078B5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000078BA                 add     esp, 0Ch
.text$mn:000078BD
.text$mn:000078BD loc_78BD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+Dj
.text$mn:000078BD                 mov     ecx, [ebp+var_4]
.text$mn:000078C0                 mov     edx, [ecx+14h]
.text$mn:000078C3                 cmp     edx, [ebp+arg_0]
.text$mn:000078C6                 jnb     short loc_78D0
.text$mn:000078C8                 mov     ecx, [ebp+var_4]
.text$mn:000078CB                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000078D0
.text$mn:000078D0 loc_78D0:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+2Ej
.text$mn:000078D0                 mov     eax, [ebp+var_4]
.text$mn:000078D3                 mov     ecx, [eax+14h]
.text$mn:000078D6                 sub     ecx, [ebp+arg_0]
.text$mn:000078D9                 cmp     ecx, [ebp+arg_4]
.text$mn:000078DC                 jnb     short loc_78EA
.text$mn:000078DE                 mov     edx, [ebp+var_4]
.text$mn:000078E1                 mov     eax, [edx+14h]
.text$mn:000078E4                 sub     eax, [ebp+arg_0]
.text$mn:000078E7                 mov     [ebp+arg_4], eax
.text$mn:000078EA
.text$mn:000078EA loc_78EA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+44j
.text$mn:000078EA                 mov     ecx, [ebp+arg_4]
.text$mn:000078ED                 cmp     ecx, [ebp+arg_C]
.text$mn:000078F0                 jnb     short loc_78FA
.text$mn:000078F2                 mov     edx, [ebp+arg_4]
.text$mn:000078F5                 mov     [ebp+var_8], edx
.text$mn:000078F8                 jmp     short loc_7900
.text$mn:000078FA ; ---------------------------------------------------------------------------
.text$mn:000078FA
.text$mn:000078FA loc_78FA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+58j
.text$mn:000078FA                 mov     eax, [ebp+arg_C]
.text$mn:000078FD                 mov     [ebp+var_8], eax
.text$mn:00007900
.text$mn:00007900 loc_7900:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+60j
.text$mn:00007900                 mov     ecx, [ebp+var_8]
.text$mn:00007903                 push    ecx
.text$mn:00007904                 mov     edx, [ebp+arg_8]
.text$mn:00007907                 push    edx
.text$mn:00007908                 mov     ecx, [ebp+var_4]
.text$mn:0000790B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007910                 mov     ecx, [ebp+arg_0]
.text$mn:00007913                 lea     edx, [eax+ecx*2]
.text$mn:00007916                 push    edx
.text$mn:00007917                 call    ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z ; std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)
.text$mn:0000791C                 add     esp, 0Ch
.text$mn:0000791F                 mov     [ebp+var_C], eax
.text$mn:00007922                 cmp     [ebp+var_C], 0
.text$mn:00007926                 jz      short loc_7930
.text$mn:00007928                 mov     eax, [ebp+var_C]
.text$mn:0000792B                 mov     [ebp+var_18], eax
.text$mn:0000792E                 jmp     short loc_7965
.text$mn:00007930 ; ---------------------------------------------------------------------------
.text$mn:00007930
.text$mn:00007930 loc_7930:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+8Ej
.text$mn:00007930                 mov     ecx, [ebp+arg_4]
.text$mn:00007933                 cmp     ecx, [ebp+arg_C]
.text$mn:00007936                 jnb     short loc_7941
.text$mn:00007938                 mov     [ebp+var_14], 0FFFFFFFFh
.text$mn:0000793F                 jmp     short loc_795F
.text$mn:00007941 ; ---------------------------------------------------------------------------
.text$mn:00007941
.text$mn:00007941 loc_7941:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+9Ej
.text$mn:00007941                 mov     edx, [ebp+arg_4]
.text$mn:00007944                 cmp     edx, [ebp+arg_C]
.text$mn:00007947                 jnz     short loc_7952
.text$mn:00007949                 mov     [ebp+var_10], 0
.text$mn:00007950                 jmp     short loc_7959
.text$mn:00007952 ; ---------------------------------------------------------------------------
.text$mn:00007952
.text$mn:00007952 loc_7952:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+AFj
.text$mn:00007952                 mov     [ebp+var_10], 1
.text$mn:00007959
.text$mn:00007959 loc_7959:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+B8j
.text$mn:00007959                 mov     eax, [ebp+var_10]
.text$mn:0000795C                 mov     [ebp+var_14], eax
.text$mn:0000795F
.text$mn:0000795F loc_795F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+A7j
.text$mn:0000795F                 mov     ecx, [ebp+var_14]
.text$mn:00007962                 mov     [ebp+var_18], ecx
.text$mn:00007965
.text$mn:00007965 loc_7965:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+96j
.text$mn:00007965                 mov     eax, [ebp+var_18]
.text$mn:00007968                 mov     esp, ebp
.text$mn:0000796A                 pop     ebp
.text$mn:0000796B                 retn    10h
.text$mn:0000796B ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z endp
.text$mn:0000796B
.text$mn:0000796B ; ---------------------------------------------------------------------------
.text$mn:0000796E                 align 10h
.text$mn:0000796E _text$mn        ends
.text$mn:0000796E
.text$mn:00007970 ; ===========================================================================
.text$mn:00007970
.text$mn:00007970 ; Segment type: Pure code
.text$mn:00007970 ; Segment permissions: Read/Execute
.text$mn:00007970 _text$mn        segment para public 'CODE' use32
.text$mn:00007970                 assume cs:_text$mn
.text$mn:00007970                 ;org 7970h
.text$mn:00007970 ; COMDAT (pick any)
.text$mn:00007970                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007970
.text$mn:00007970 ; =============== S U B R O U T I N E =======================================
.text$mn:00007970
.text$mn:00007970 ; Attributes: bp-based frame
.text$mn:00007970
.text$mn:00007970 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t *Str)
.text$mn:00007970                 public ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z
.text$mn:00007970 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z proc near
.text$mn:00007970                                         ; CODE XREF: std::operator==<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,wchar_t const *)+Bp
.text$mn:00007970                                         ; ThemeSwitcher::themeNameExists(wchar_t const *)+3Ap
.text$mn:00007970
.text$mn:00007970 var_4           = dword ptr -4
.text$mn:00007970 Str             = dword ptr  8
.text$mn:00007970
.text$mn:00007970                 push    ebp
.text$mn:00007971                 mov     ebp, esp
.text$mn:00007973                 push    ecx
.text$mn:00007974                 mov     [ebp+var_4], ecx
.text$mn:00007977                 push    86Eh            ; unsigned int
.text$mn:0000797C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007981                 mov     eax, [ebp+Str]
.text$mn:00007984                 push    eax             ; int
.text$mn:00007985                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000798A                 add     esp, 0Ch
.text$mn:0000798D                 mov     ecx, [ebp+Str]
.text$mn:00007990                 push    ecx             ; Str
.text$mn:00007991                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00007996                 add     esp, 4
.text$mn:00007999                 push    eax
.text$mn:0000799A                 mov     edx, [ebp+Str]
.text$mn:0000799D                 push    edx
.text$mn:0000799E                 mov     eax, [ebp+var_4]
.text$mn:000079A1                 mov     ecx, [eax+14h]
.text$mn:000079A4                 push    ecx
.text$mn:000079A5                 push    0
.text$mn:000079A7                 mov     ecx, [ebp+var_4]
.text$mn:000079AA                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHIIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)
.text$mn:000079AF                 mov     esp, ebp
.text$mn:000079B1                 pop     ebp
.text$mn:000079B2                 retn    4
.text$mn:000079B2 ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z endp
.text$mn:000079B2
.text$mn:000079B2 ; ---------------------------------------------------------------------------
.text$mn:000079B5                 align 4
.text$mn:000079B5 _text$mn        ends
.text$mn:000079B5
.text$mn:000079B8 ; ===========================================================================
.text$mn:000079B8
.text$mn:000079B8 ; Segment type: Pure code
.text$mn:000079B8 ; Segment permissions: Read/Execute
.text$mn:000079B8 _text$mn        segment para public 'CODE' use32
.text$mn:000079B8                 assume cs:_text$mn
.text$mn:000079B8                 ;org 79B8h
.text$mn:000079B8 ; COMDAT (pick any)
.text$mn:000079B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079B8
.text$mn:000079B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000079B8
.text$mn:000079B8 ; Attributes: bp-based frame
.text$mn:000079B8
.text$mn:000079B8 ; int __cdecl std::char_traits<char>::compare(void *Buf1, void *Buf2, size_t Size)
.text$mn:000079B8                 public ?compare@?$char_traits@D@std@@SAHPBD0I@Z
.text$mn:000079B8 ?compare@?$char_traits@D@std@@SAHPBD0I@Z proc near
.text$mn:000079B8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(uint,uint,char const *,uint)+7Cp
.text$mn:000079B8
.text$mn:000079B8 var_4           = dword ptr -4
.text$mn:000079B8 Buf1            = dword ptr  8
.text$mn:000079B8 Buf2            = dword ptr  0Ch
.text$mn:000079B8 Size            = dword ptr  10h
.text$mn:000079B8
.text$mn:000079B8                 push    ebp
.text$mn:000079B9                 mov     ebp, esp
.text$mn:000079BB                 push    ecx
.text$mn:000079BC                 cmp     [ebp+Size], 0
.text$mn:000079C0                 jnz     short loc_79CB
.text$mn:000079C2                 mov     [ebp+var_4], 0
.text$mn:000079C9                 jmp     short loc_79E2
.text$mn:000079CB ; ---------------------------------------------------------------------------
.text$mn:000079CB
.text$mn:000079CB loc_79CB:                               ; CODE XREF: std::char_traits<char>::compare(char const *,char const *,uint)+8j
.text$mn:000079CB                 mov     eax, [ebp+Size]
.text$mn:000079CE                 push    eax             ; Size
.text$mn:000079CF                 mov     ecx, [ebp+Buf2]
.text$mn:000079D2                 push    ecx             ; Buf2
.text$mn:000079D3                 mov     edx, [ebp+Buf1]
.text$mn:000079D6                 push    edx             ; Buf1
.text$mn:000079D7                 call    _memcmp
.text$mn:000079DC                 add     esp, 0Ch
.text$mn:000079DF                 mov     [ebp+var_4], eax
.text$mn:000079E2
.text$mn:000079E2 loc_79E2:                               ; CODE XREF: std::char_traits<char>::compare(char const *,char const *,uint)+11j
.text$mn:000079E2                 mov     eax, [ebp+var_4]
.text$mn:000079E5                 mov     esp, ebp
.text$mn:000079E7                 pop     ebp
.text$mn:000079E8                 retn
.text$mn:000079E8 ?compare@?$char_traits@D@std@@SAHPBD0I@Z endp
.text$mn:000079E8
.text$mn:000079E8 ; ---------------------------------------------------------------------------
.text$mn:000079E9                 align 4
.text$mn:000079E9 _text$mn        ends
.text$mn:000079E9
.text$mn:000079EC ; ===========================================================================
.text$mn:000079EC
.text$mn:000079EC ; Segment type: Pure code
.text$mn:000079EC ; Segment permissions: Read/Execute
.text$mn:000079EC _text$mn        segment para public 'CODE' use32
.text$mn:000079EC                 assume cs:_text$mn
.text$mn:000079EC                 ;org 79ECh
.text$mn:000079EC ; COMDAT (pick any)
.text$mn:000079EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000079EC
.text$mn:000079EC ; =============== S U B R O U T I N E =======================================
.text$mn:000079EC
.text$mn:000079EC ; Attributes: bp-based frame
.text$mn:000079EC
.text$mn:000079EC ; public: static int __cdecl std::char_traits<wchar_t>::compare(wchar_t const *, wchar_t const *, unsigned int)
.text$mn:000079EC                 public ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z
.text$mn:000079EC ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z proc near
.text$mn:000079EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(uint,uint,wchar_t const *,uint)+7Fp
.text$mn:000079EC
.text$mn:000079EC var_4           = dword ptr -4
.text$mn:000079EC arg_0           = dword ptr  8
.text$mn:000079EC arg_4           = dword ptr  0Ch
.text$mn:000079EC arg_8           = dword ptr  10h
.text$mn:000079EC
.text$mn:000079EC                 push    ebp
.text$mn:000079ED                 mov     ebp, esp
.text$mn:000079EF                 push    ecx
.text$mn:000079F0                 cmp     [ebp+arg_8], 0
.text$mn:000079F4                 jnz     short loc_79FF
.text$mn:000079F6                 mov     [ebp+var_4], 0
.text$mn:000079FD                 jmp     short loc_7A16
.text$mn:000079FF ; ---------------------------------------------------------------------------
.text$mn:000079FF
.text$mn:000079FF loc_79FF:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+8j
.text$mn:000079FF                 mov     eax, [ebp+arg_8]
.text$mn:00007A02                 push    eax
.text$mn:00007A03                 mov     ecx, [ebp+arg_4]
.text$mn:00007A06                 push    ecx
.text$mn:00007A07                 mov     edx, [ebp+arg_0]
.text$mn:00007A0A                 push    edx
.text$mn:00007A0B                 call    _wmemcmp
.text$mn:00007A10                 add     esp, 0Ch
.text$mn:00007A13                 mov     [ebp+var_4], eax
.text$mn:00007A16
.text$mn:00007A16 loc_7A16:                               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+11j
.text$mn:00007A16                 mov     eax, [ebp+var_4]
.text$mn:00007A19                 mov     esp, ebp
.text$mn:00007A1B                 pop     ebp
.text$mn:00007A1C                 retn
.text$mn:00007A1C ?compare@?$char_traits@_W@std@@SAHPB_W0I@Z endp
.text$mn:00007A1C
.text$mn:00007A1C ; ---------------------------------------------------------------------------
.text$mn:00007A1D                 align 10h
.text$mn:00007A1D _text$mn        ends
.text$mn:00007A1D
.text$mn:00007A20 ; ===========================================================================
.text$mn:00007A20
.text$mn:00007A20 ; Segment type: Pure code
.text$mn:00007A20 ; Segment permissions: Read/Execute
.text$mn:00007A20 _text$mn        segment para public 'CODE' use32
.text$mn:00007A20                 assume cs:_text$mn
.text$mn:00007A20                 ;org 7A20h
.text$mn:00007A20 ; COMDAT (pick any)
.text$mn:00007A20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A20
.text$mn:00007A20 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A20
.text$mn:00007A20 ; Attributes: bp-based frame
.text$mn:00007A20
.text$mn:00007A20 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:00007A20                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00007A20 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:00007A20                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00007A20
.text$mn:00007A20 var_4           = dword ptr -4
.text$mn:00007A20 Dst             = dword ptr  8
.text$mn:00007A20 Src             = dword ptr  0Ch
.text$mn:00007A20 Size            = dword ptr  10h
.text$mn:00007A20
.text$mn:00007A20                 push    ebp
.text$mn:00007A21                 mov     ebp, esp
.text$mn:00007A23                 push    ecx
.text$mn:00007A24                 cmp     [ebp+Size], 0
.text$mn:00007A28                 jnz     short loc_7A32
.text$mn:00007A2A                 mov     eax, [ebp+Dst]
.text$mn:00007A2D                 mov     [ebp+var_4], eax
.text$mn:00007A30                 jmp     short loc_7A49
.text$mn:00007A32 ; ---------------------------------------------------------------------------
.text$mn:00007A32
.text$mn:00007A32 loc_7A32:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:00007A32                 mov     ecx, [ebp+Size]
.text$mn:00007A35                 push    ecx             ; Size
.text$mn:00007A36                 mov     edx, [ebp+Src]
.text$mn:00007A39                 push    edx             ; Src
.text$mn:00007A3A                 mov     eax, [ebp+Dst]
.text$mn:00007A3D                 push    eax             ; Dst
.text$mn:00007A3E                 call    _memcpy
.text$mn:00007A43                 add     esp, 0Ch
.text$mn:00007A46                 mov     [ebp+var_4], eax
.text$mn:00007A49
.text$mn:00007A49 loc_7A49:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:00007A49                 mov     eax, [ebp+var_4]
.text$mn:00007A4C                 mov     esp, ebp
.text$mn:00007A4E                 pop     ebp
.text$mn:00007A4F                 retn
.text$mn:00007A4F ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00007A4F
.text$mn:00007A4F _text$mn        ends
.text$mn:00007A4F
.text$mn:00007A50 ; ===========================================================================
.text$mn:00007A50
.text$mn:00007A50 ; Segment type: Pure code
.text$mn:00007A50 ; Segment permissions: Read/Execute
.text$mn:00007A50 _text$mn        segment para public 'CODE' use32
.text$mn:00007A50                 assume cs:_text$mn
.text$mn:00007A50                 ;org 7A50h
.text$mn:00007A50 ; COMDAT (pick any)
.text$mn:00007A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A50
.text$mn:00007A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A50
.text$mn:00007A50 ; Attributes: bp-based frame
.text$mn:00007A50
.text$mn:00007A50 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:00007A50                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00007A50 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00007A50                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:00007A50                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00007A50
.text$mn:00007A50 var_4           = dword ptr -4
.text$mn:00007A50 Dst             = dword ptr  8
.text$mn:00007A50 Src             = dword ptr  0Ch
.text$mn:00007A50 arg_8           = dword ptr  10h
.text$mn:00007A50
.text$mn:00007A50                 push    ebp
.text$mn:00007A51                 mov     ebp, esp
.text$mn:00007A53                 push    ecx
.text$mn:00007A54                 cmp     [ebp+arg_8], 0
.text$mn:00007A58                 jnz     short loc_7A62
.text$mn:00007A5A                 mov     eax, [ebp+Dst]
.text$mn:00007A5D                 mov     [ebp+var_4], eax
.text$mn:00007A60                 jmp     short loc_7A79
.text$mn:00007A62 ; ---------------------------------------------------------------------------
.text$mn:00007A62
.text$mn:00007A62 loc_7A62:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:00007A62                 mov     ecx, [ebp+arg_8]
.text$mn:00007A65                 push    ecx             ; int
.text$mn:00007A66                 mov     edx, [ebp+Src]
.text$mn:00007A69                 push    edx             ; Src
.text$mn:00007A6A                 mov     eax, [ebp+Dst]
.text$mn:00007A6D                 push    eax             ; Dst
.text$mn:00007A6E                 call    _wmemcpy
.text$mn:00007A73                 add     esp, 0Ch
.text$mn:00007A76                 mov     [ebp+var_4], eax
.text$mn:00007A79
.text$mn:00007A79 loc_7A79:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00007A79                 mov     eax, [ebp+var_4]
.text$mn:00007A7C                 mov     esp, ebp
.text$mn:00007A7E                 pop     ebp
.text$mn:00007A7F                 retn
.text$mn:00007A7F ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00007A7F
.text$mn:00007A7F _text$mn        ends
.text$mn:00007A7F
.text$mn:00007A80 ; ===========================================================================
.text$mn:00007A80
.text$mn:00007A80 ; Segment type: Pure code
.text$mn:00007A80 ; Segment permissions: Read/Execute
.text$mn:00007A80 _text$mn        segment para public 'CODE' use32
.text$mn:00007A80                 assume cs:_text$mn
.text$mn:00007A80                 ;org 7A80h
.text$mn:00007A80 ; COMDAT (pick any)
.text$mn:00007A80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A80
.text$mn:00007A80 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A80
.text$mn:00007A80 ; Attributes: bp-based frame
.text$mn:00007A80
.text$mn:00007A80 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:00007A80                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:00007A80 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:00007A80                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:00007A80
.text$mn:00007A80 var_4           = dword ptr -4
.text$mn:00007A80 arg_0           = dword ptr  8
.text$mn:00007A80 arg_4           = dword ptr  0Ch
.text$mn:00007A80
.text$mn:00007A80                 push    ebp
.text$mn:00007A81                 mov     ebp, esp
.text$mn:00007A83                 push    ecx
.text$mn:00007A84                 mov     [ebp+var_4], ecx
.text$mn:00007A87                 mov     eax, [ebp+arg_4]
.text$mn:00007A8A                 push    eax             ; int
.text$mn:00007A8B                 mov     ecx, [ebp+arg_0]
.text$mn:00007A8E                 push    ecx             ; void *
.text$mn:00007A8F                 mov     ecx, [ebp+var_4]
.text$mn:00007A92                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:00007A97                 mov     esp, ebp
.text$mn:00007A99                 pop     ebp
.text$mn:00007A9A                 retn    8
.text$mn:00007A9A ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:00007A9A
.text$mn:00007A9A ; ---------------------------------------------------------------------------
.text$mn:00007A9D                 align 10h
.text$mn:00007A9D _text$mn        ends
.text$mn:00007A9D
.text$mn:00007AA0 ; ===========================================================================
.text$mn:00007AA0
.text$mn:00007AA0 ; Segment type: Pure code
.text$mn:00007AA0 ; Segment permissions: Read/Execute
.text$mn:00007AA0 _text$mn        segment para public 'CODE' use32
.text$mn:00007AA0                 assume cs:_text$mn
.text$mn:00007AA0                 ;org 7AA0h
.text$mn:00007AA0 ; COMDAT (pick any)
.text$mn:00007AA0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AA0
.text$mn:00007AA0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AA0
.text$mn:00007AA0 ; Attributes: bp-based frame
.text$mn:00007AA0
.text$mn:00007AA0 ; int __stdcall std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::deallocate(void *, int)
.text$mn:00007AA0                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z
.text$mn:00007AA0 ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z proc near
.text$mn:00007AA0                                         ; CODE XREF: __catch$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z$0+16p
.text$mn:00007AA0                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+FAp
.text$mn:00007AA0
.text$mn:00007AA0 var_4           = dword ptr -4
.text$mn:00007AA0 arg_0           = dword ptr  8
.text$mn:00007AA0 arg_4           = dword ptr  0Ch
.text$mn:00007AA0
.text$mn:00007AA0                 push    ebp
.text$mn:00007AA1                 mov     ebp, esp
.text$mn:00007AA3                 push    ecx
.text$mn:00007AA4                 mov     [ebp+var_4], ecx
.text$mn:00007AA7                 mov     eax, [ebp+arg_4]
.text$mn:00007AAA                 push    eax             ; int
.text$mn:00007AAB                 mov     ecx, [ebp+arg_0]
.text$mn:00007AAE                 push    ecx             ; void *
.text$mn:00007AAF                 mov     ecx, [ebp+var_4]
.text$mn:00007AB2                 call    ?deallocate@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z ; std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,uint)
.text$mn:00007AB7                 mov     esp, ebp
.text$mn:00007AB9                 pop     ebp
.text$mn:00007ABA                 retn    8
.text$mn:00007ABA ?deallocate@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z endp
.text$mn:00007ABA
.text$mn:00007ABA ; ---------------------------------------------------------------------------
.text$mn:00007ABD                 align 10h
.text$mn:00007ABD _text$mn        ends
.text$mn:00007ABD
.text$mn:00007AC0 ; ===========================================================================
.text$mn:00007AC0
.text$mn:00007AC0 ; Segment type: Pure code
.text$mn:00007AC0 ; Segment permissions: Read/Execute
.text$mn:00007AC0 _text$mn        segment para public 'CODE' use32
.text$mn:00007AC0                 assume cs:_text$mn
.text$mn:00007AC0                 ;org 7AC0h
.text$mn:00007AC0 ; COMDAT (pick any)
.text$mn:00007AC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AC0
.text$mn:00007AC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AC0
.text$mn:00007AC0 ; Attributes: bp-based frame
.text$mn:00007AC0
.text$mn:00007AC0 ; int __stdcall std::_Wrap_alloc<std::allocator<std::_Container_proxy>>::deallocate(void *, int)
.text$mn:00007AC0                 public ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00007AC0 ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00007AC0                                         ; CODE XREF: std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Free_proxy(void)+32p
.text$mn:00007AC0
.text$mn:00007AC0 var_4           = dword ptr -4
.text$mn:00007AC0 arg_0           = dword ptr  8
.text$mn:00007AC0 arg_4           = dword ptr  0Ch
.text$mn:00007AC0
.text$mn:00007AC0                 push    ebp
.text$mn:00007AC1                 mov     ebp, esp
.text$mn:00007AC3                 push    ecx
.text$mn:00007AC4                 mov     [ebp+var_4], ecx
.text$mn:00007AC7                 mov     eax, [ebp+arg_4]
.text$mn:00007ACA                 push    eax             ; int
.text$mn:00007ACB                 mov     ecx, [ebp+arg_0]
.text$mn:00007ACE                 push    ecx             ; void *
.text$mn:00007ACF                 mov     ecx, [ebp+var_4]
.text$mn:00007AD2                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00007AD7                 mov     esp, ebp
.text$mn:00007AD9                 pop     ebp
.text$mn:00007ADA                 retn    8
.text$mn:00007ADA ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00007ADA
.text$mn:00007ADA ; ---------------------------------------------------------------------------
.text$mn:00007ADD                 align 10h
.text$mn:00007ADD _text$mn        ends
.text$mn:00007ADD
.text$mn:00007AE0 ; ===========================================================================
.text$mn:00007AE0
.text$mn:00007AE0 ; Segment type: Pure code
.text$mn:00007AE0 ; Segment permissions: Read/Execute
.text$mn:00007AE0 _text$mn        segment para public 'CODE' use32
.text$mn:00007AE0                 assume cs:_text$mn
.text$mn:00007AE0                 ;org 7AE0h
.text$mn:00007AE0 ; COMDAT (pick any)
.text$mn:00007AE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007AE0
.text$mn:00007AE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AE0
.text$mn:00007AE0 ; Attributes: bp-based frame
.text$mn:00007AE0
.text$mn:00007AE0 ; int __stdcall std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(void *, int)
.text$mn:00007AE0                 public ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00007AE0 ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00007AE0                                         ; CODE XREF: __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0+16p
.text$mn:00007AE0                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reallocate(uint)+FAp ...
.text$mn:00007AE0
.text$mn:00007AE0 var_4           = dword ptr -4
.text$mn:00007AE0 arg_0           = dword ptr  8
.text$mn:00007AE0 arg_4           = dword ptr  0Ch
.text$mn:00007AE0
.text$mn:00007AE0                 push    ebp
.text$mn:00007AE1                 mov     ebp, esp
.text$mn:00007AE3                 push    ecx
.text$mn:00007AE4                 mov     [ebp+var_4], ecx
.text$mn:00007AE7                 mov     eax, [ebp+arg_4]
.text$mn:00007AEA                 push    eax             ; int
.text$mn:00007AEB                 mov     ecx, [ebp+arg_0]
.text$mn:00007AEE                 push    ecx             ; void *
.text$mn:00007AEF                 mov     ecx, [ebp+var_4]
.text$mn:00007AF2                 call    ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)
.text$mn:00007AF7                 mov     esp, ebp
.text$mn:00007AF9                 pop     ebp
.text$mn:00007AFA                 retn    8
.text$mn:00007AFA ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00007AFA
.text$mn:00007AFA ; ---------------------------------------------------------------------------
.text$mn:00007AFD                 align 10h
.text$mn:00007AFD _text$mn        ends
.text$mn:00007AFD
.text$mn:00007B00 ; ===========================================================================
.text$mn:00007B00
.text$mn:00007B00 ; Segment type: Pure code
.text$mn:00007B00 ; Segment permissions: Read/Execute
.text$mn:00007B00 _text$mn        segment para public 'CODE' use32
.text$mn:00007B00                 assume cs:_text$mn
.text$mn:00007B00                 ;org 7B00h
.text$mn:00007B00 ; COMDAT (pick any)
.text$mn:00007B00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B00
.text$mn:00007B00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B00
.text$mn:00007B00 ; Attributes: bp-based frame
.text$mn:00007B00
.text$mn:00007B00 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:00007B00                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:00007B00 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:00007B00                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:00007B00
.text$mn:00007B00 var_4           = dword ptr -4
.text$mn:00007B00 arg_0           = dword ptr  8
.text$mn:00007B00 arg_4           = dword ptr  0Ch
.text$mn:00007B00
.text$mn:00007B00                 push    ebp
.text$mn:00007B01                 mov     ebp, esp
.text$mn:00007B03                 push    ecx
.text$mn:00007B04                 mov     [ebp+var_4], ecx
.text$mn:00007B07                 mov     eax, [ebp+arg_4]
.text$mn:00007B0A                 push    eax             ; int
.text$mn:00007B0B                 mov     ecx, [ebp+arg_0]
.text$mn:00007B0E                 push    ecx             ; void *
.text$mn:00007B0F                 mov     ecx, [ebp+var_4]
.text$mn:00007B12                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:00007B17                 mov     esp, ebp
.text$mn:00007B19                 pop     ebp
.text$mn:00007B1A                 retn    8
.text$mn:00007B1A ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:00007B1A
.text$mn:00007B1A ; ---------------------------------------------------------------------------
.text$mn:00007B1D                 align 10h
.text$mn:00007B1D _text$mn        ends
.text$mn:00007B1D
.text$mn:00007B20 ; ===========================================================================
.text$mn:00007B20
.text$mn:00007B20 ; Segment type: Pure code
.text$mn:00007B20 ; Segment permissions: Read/Execute
.text$mn:00007B20 _text$mn        segment para public 'CODE' use32
.text$mn:00007B20                 assume cs:_text$mn
.text$mn:00007B20                 ;org 7B20h
.text$mn:00007B20 ; COMDAT (pick any)
.text$mn:00007B20                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B20
.text$mn:00007B20 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B20
.text$mn:00007B20 ; Attributes: bp-based frame
.text$mn:00007B20
.text$mn:00007B20 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:00007B20                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:00007B20 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:00007B20                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:00007B20
.text$mn:00007B20 var_4           = dword ptr -4
.text$mn:00007B20 arg_0           = dword ptr  8
.text$mn:00007B20
.text$mn:00007B20                 push    ebp
.text$mn:00007B21                 mov     ebp, esp
.text$mn:00007B23                 push    ecx
.text$mn:00007B24                 mov     [ebp+var_4], ecx
.text$mn:00007B27                 mov     eax, [ebp+arg_0]
.text$mn:00007B2A                 push    eax             ; void *
.text$mn:00007B2B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B30                 add     esp, 4
.text$mn:00007B33                 mov     esp, ebp
.text$mn:00007B35                 pop     ebp
.text$mn:00007B36                 retn    8
.text$mn:00007B36 ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:00007B36
.text$mn:00007B36 ; ---------------------------------------------------------------------------
.text$mn:00007B39                 align 4
.text$mn:00007B39 _text$mn        ends
.text$mn:00007B39
.text$mn:00007B3C ; ===========================================================================
.text$mn:00007B3C
.text$mn:00007B3C ; Segment type: Pure code
.text$mn:00007B3C ; Segment permissions: Read/Execute
.text$mn:00007B3C _text$mn        segment para public 'CODE' use32
.text$mn:00007B3C                 assume cs:_text$mn
.text$mn:00007B3C                 ;org 7B3Ch
.text$mn:00007B3C ; COMDAT (pick any)
.text$mn:00007B3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B3C
.text$mn:00007B3C ; =============== S U B R O U T I N E =======================================
.text$mn:00007B3C
.text$mn:00007B3C ; Attributes: bp-based frame
.text$mn:00007B3C
.text$mn:00007B3C ; int __stdcall std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(void *, int)
.text$mn:00007B3C                 public ?deallocate@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z
.text$mn:00007B3C ?deallocate@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z proc near
.text$mn:00007B3C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::deallocate(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,uint)+12p
.text$mn:00007B3C
.text$mn:00007B3C var_4           = dword ptr -4
.text$mn:00007B3C arg_0           = dword ptr  8
.text$mn:00007B3C
.text$mn:00007B3C                 push    ebp
.text$mn:00007B3D                 mov     ebp, esp
.text$mn:00007B3F                 push    ecx
.text$mn:00007B40                 mov     [ebp+var_4], ecx
.text$mn:00007B43                 mov     eax, [ebp+arg_0]
.text$mn:00007B46                 push    eax             ; void *
.text$mn:00007B47                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B4C                 add     esp, 4
.text$mn:00007B4F                 mov     esp, ebp
.text$mn:00007B51                 pop     ebp
.text$mn:00007B52                 retn    8
.text$mn:00007B52 ?deallocate@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@I@Z endp
.text$mn:00007B52
.text$mn:00007B52 ; ---------------------------------------------------------------------------
.text$mn:00007B55                 align 4
.text$mn:00007B55 _text$mn        ends
.text$mn:00007B55
.text$mn:00007B58 ; ===========================================================================
.text$mn:00007B58
.text$mn:00007B58 ; Segment type: Pure code
.text$mn:00007B58 ; Segment permissions: Read/Execute
.text$mn:00007B58 _text$mn        segment para public 'CODE' use32
.text$mn:00007B58                 assume cs:_text$mn
.text$mn:00007B58                 ;org 7B58h
.text$mn:00007B58 ; COMDAT (pick any)
.text$mn:00007B58                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B58
.text$mn:00007B58 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B58
.text$mn:00007B58 ; Attributes: bp-based frame
.text$mn:00007B58
.text$mn:00007B58 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:00007B58                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00007B58 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00007B58                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:00007B58                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p ...
.text$mn:00007B58
.text$mn:00007B58 var_4           = dword ptr -4
.text$mn:00007B58 arg_0           = dword ptr  8
.text$mn:00007B58
.text$mn:00007B58                 push    ebp
.text$mn:00007B59                 mov     ebp, esp
.text$mn:00007B5B                 push    ecx
.text$mn:00007B5C                 mov     [ebp+var_4], ecx
.text$mn:00007B5F                 mov     eax, [ebp+arg_0]
.text$mn:00007B62                 push    eax             ; void *
.text$mn:00007B63                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B68                 add     esp, 4
.text$mn:00007B6B                 mov     esp, ebp
.text$mn:00007B6D                 pop     ebp
.text$mn:00007B6E                 retn    8
.text$mn:00007B6E ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:00007B6E
.text$mn:00007B6E ; ---------------------------------------------------------------------------
.text$mn:00007B71                 align 4
.text$mn:00007B71 _text$mn        ends
.text$mn:00007B71
.text$mn:00007B74 ; ===========================================================================
.text$mn:00007B74
.text$mn:00007B74 ; Segment type: Pure code
.text$mn:00007B74 ; Segment permissions: Read/Execute
.text$mn:00007B74 _text$mn        segment para public 'CODE' use32
.text$mn:00007B74                 assume cs:_text$mn
.text$mn:00007B74                 ;org 7B74h
.text$mn:00007B74 ; COMDAT (pick any)
.text$mn:00007B74                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B74
.text$mn:00007B74 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B74
.text$mn:00007B74 ; Attributes: bp-based frame
.text$mn:00007B74
.text$mn:00007B74 ; int __stdcall std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::deallocate(void *, int)
.text$mn:00007B74                 public ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z
.text$mn:00007B74 ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z proc near
.text$mn:00007B74                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::deallocate(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,uint)+12p
.text$mn:00007B74
.text$mn:00007B74 var_4           = dword ptr -4
.text$mn:00007B74 arg_0           = dword ptr  8
.text$mn:00007B74
.text$mn:00007B74                 push    ebp
.text$mn:00007B75                 mov     ebp, esp
.text$mn:00007B77                 push    ecx
.text$mn:00007B78                 mov     [ebp+var_4], ecx
.text$mn:00007B7B                 mov     eax, [ebp+arg_0]
.text$mn:00007B7E                 push    eax             ; void *
.text$mn:00007B7F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007B84                 add     esp, 4
.text$mn:00007B87                 mov     esp, ebp
.text$mn:00007B89                 pop     ebp
.text$mn:00007B8A                 retn    8
.text$mn:00007B8A ?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z endp
.text$mn:00007B8A
.text$mn:00007B8A ; ---------------------------------------------------------------------------
.text$mn:00007B8D                 align 10h
.text$mn:00007B8D _text$mn        ends
.text$mn:00007B8D
.text$mn:00007B90 ; ===========================================================================
.text$mn:00007B90
.text$mn:00007B90 ; Segment type: Pure code
.text$mn:00007B90 ; Segment permissions: Read/Execute
.text$mn:00007B90 _text$mn        segment para public 'CODE' use32
.text$mn:00007B90                 assume cs:_text$mn
.text$mn:00007B90                 ;org 7B90h
.text$mn:00007B90 ; COMDAT (pick any)
.text$mn:00007B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007B90
.text$mn:00007B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B90
.text$mn:00007B90 ; Attributes: bp-based frame
.text$mn:00007B90
.text$mn:00007B90 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:00007B90                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:00007B90 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:00007B90                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:00007B90
.text$mn:00007B90 var_4           = dword ptr -4
.text$mn:00007B90 arg_0           = dword ptr  8
.text$mn:00007B90
.text$mn:00007B90                 push    ebp
.text$mn:00007B91                 mov     ebp, esp
.text$mn:00007B93                 push    ecx
.text$mn:00007B94                 mov     [ebp+var_4], ecx
.text$mn:00007B97                 mov     eax, [ebp+arg_0]
.text$mn:00007B9A                 push    eax             ; void *
.text$mn:00007B9B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007BA0                 add     esp, 4
.text$mn:00007BA3                 mov     esp, ebp
.text$mn:00007BA5                 pop     ebp
.text$mn:00007BA6                 retn    8
.text$mn:00007BA6 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:00007BA6
.text$mn:00007BA6 ; ---------------------------------------------------------------------------
.text$mn:00007BA9                 align 4
.text$mn:00007BA9 _text$mn        ends
.text$mn:00007BA9
.text$mn:00007BAC ; ===========================================================================
.text$mn:00007BAC
.text$mn:00007BAC ; Segment type: Pure code
.text$mn:00007BAC ; Segment permissions: Read/Execute
.text$mn:00007BAC _text$mn        segment para public 'CODE' use32
.text$mn:00007BAC                 assume cs:_text$mn
.text$mn:00007BAC                 ;org 7BACh
.text$mn:00007BAC ; COMDAT (pick any)
.text$mn:00007BAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BAC
.text$mn:00007BAC ; =============== S U B R O U T I N E =======================================
.text$mn:00007BAC
.text$mn:00007BAC ; Attributes: bp-based frame
.text$mn:00007BAC
.text$mn:00007BAC ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:00007BAC                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00007BAC ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00007BAC                                         ; DATA XREF: .rdata:0000A4B0o
.text$mn:00007BAC
.text$mn:00007BAC var_4           = dword ptr -4
.text$mn:00007BAC arg_0           = dword ptr  8
.text$mn:00007BAC arg_4           = dword ptr  0Ch
.text$mn:00007BAC
.text$mn:00007BAC                 push    ebp
.text$mn:00007BAD                 mov     ebp, esp
.text$mn:00007BAF                 push    ecx
.text$mn:00007BB0                 mov     [ebp+var_4], ecx
.text$mn:00007BB3                 mov     eax, [ebp+arg_4]
.text$mn:00007BB6                 push    eax             ; int
.text$mn:00007BB7                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00007BBC                 add     esp, 4
.text$mn:00007BBF                 test    eax, eax
.text$mn:00007BC1                 jz      short loc_7BDC
.text$mn:00007BC3                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00007BC8                 push    eax             ; struct std::error_category *
.text$mn:00007BC9                 mov     ecx, [ebp+arg_4]
.text$mn:00007BCC                 push    ecx             ; int
.text$mn:00007BCD                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007BD0                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00007BD5                 mov     eax, [ebp+arg_0]
.text$mn:00007BD8                 jmp     short loc_7BF1
.text$mn:00007BDA ; ---------------------------------------------------------------------------
.text$mn:00007BDA                 jmp     short loc_7BF1
.text$mn:00007BDC ; ---------------------------------------------------------------------------
.text$mn:00007BDC
.text$mn:00007BDC loc_7BDC:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:00007BDC                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:00007BE1                 push    eax             ; struct std::error_category *
.text$mn:00007BE2                 mov     edx, [ebp+arg_4]
.text$mn:00007BE5                 push    edx             ; int
.text$mn:00007BE6                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007BE9                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00007BEE                 mov     eax, [ebp+arg_0]
.text$mn:00007BF1
.text$mn:00007BF1 loc_7BF1:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:00007BF1                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:00007BF1                 mov     esp, ebp
.text$mn:00007BF3                 pop     ebp
.text$mn:00007BF4                 retn    8
.text$mn:00007BF4 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00007BF4
.text$mn:00007BF4 ; ---------------------------------------------------------------------------
.text$mn:00007BF7                 align 4
.text$mn:00007BF7 _text$mn        ends
.text$mn:00007BF7
.text$mn:00007BF8 ; ===========================================================================
.text$mn:00007BF8
.text$mn:00007BF8 ; Segment type: Pure code
.text$mn:00007BF8 ; Segment permissions: Read/Execute
.text$mn:00007BF8 _text$mn        segment para public 'CODE' use32
.text$mn:00007BF8                 assume cs:_text$mn
.text$mn:00007BF8                 ;org 7BF8h
.text$mn:00007BF8 ; COMDAT (pick any)
.text$mn:00007BF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BF8
.text$mn:00007BF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BF8
.text$mn:00007BF8 ; Attributes: bp-based frame
.text$mn:00007BF8
.text$mn:00007BF8 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:00007BF8                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00007BF8 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00007BF8                                         ; DATA XREF: .rdata:0000A420o
.text$mn:00007BF8                                         ; .rdata:0000A43Co ...
.text$mn:00007BF8
.text$mn:00007BF8 var_4           = dword ptr -4
.text$mn:00007BF8 arg_0           = dword ptr  8
.text$mn:00007BF8 arg_4           = dword ptr  0Ch
.text$mn:00007BF8
.text$mn:00007BF8                 push    ebp
.text$mn:00007BF9                 mov     ebp, esp
.text$mn:00007BFB                 push    ecx
.text$mn:00007BFC                 mov     [ebp+var_4], ecx
.text$mn:00007BFF                 mov     eax, [ebp+var_4]
.text$mn:00007C02                 push    eax             ; struct std::error_category *
.text$mn:00007C03                 mov     ecx, [ebp+arg_4]
.text$mn:00007C06                 push    ecx             ; int
.text$mn:00007C07                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007C0A                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00007C0F                 mov     eax, [ebp+arg_0]
.text$mn:00007C12                 mov     esp, ebp
.text$mn:00007C14                 pop     ebp
.text$mn:00007C15                 retn    8
.text$mn:00007C15 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00007C15
.text$mn:00007C15 _text$mn        ends
.text$mn:00007C15
.text$mn:00007C18 ; ===========================================================================
.text$mn:00007C18
.text$mn:00007C18 ; Segment type: Pure code
.text$mn:00007C18 ; Segment permissions: Read/Execute
.text$mn:00007C18 _text$mn        segment para public 'CODE' use32
.text$mn:00007C18                 assume cs:_text$mn
.text$mn:00007C18                 ;org 7C18h
.text$mn:00007C18 ; COMDAT (pick any)
.text$mn:00007C18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C18
.text$mn:00007C18 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C18
.text$mn:00007C18 ; Attributes: bp-based frame
.text$mn:00007C18
.text$mn:00007C18 ; void __thiscall PluginsManager::disable(PluginsManager *__hidden this)
.text$mn:00007C18                 public ?disable@PluginsManager@@QAEXXZ
.text$mn:00007C18 ?disable@PluginsManager@@QAEXXZ proc near
.text$mn:00007C18                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+16Fp
.text$mn:00007C18
.text$mn:00007C18 var_4           = dword ptr -4
.text$mn:00007C18
.text$mn:00007C18                 push    ebp
.text$mn:00007C19                 mov     ebp, esp
.text$mn:00007C1B                 push    ecx
.text$mn:00007C1C                 mov     [ebp+var_4], ecx
.text$mn:00007C1F                 mov     eax, [ebp+var_4]
.text$mn:00007C22                 mov     byte ptr [eax+40h], 1
.text$mn:00007C26                 mov     esp, ebp
.text$mn:00007C28                 pop     ebp
.text$mn:00007C29                 retn
.text$mn:00007C29 ?disable@PluginsManager@@QAEXXZ endp
.text$mn:00007C29
.text$mn:00007C29 ; ---------------------------------------------------------------------------
.text$mn:00007C2A                 align 4
.text$mn:00007C2A _text$mn        ends
.text$mn:00007C2A
.text$mn:00007C2C ; ===========================================================================
.text$mn:00007C2C
.text$mn:00007C2C ; Segment type: Pure code
.text$mn:00007C2C ; Segment permissions: Read/Execute
.text$mn:00007C2C _text$mn        segment para public 'CODE' use32
.text$mn:00007C2C                 assume cs:_text$mn
.text$mn:00007C2C                 ;org 7C2Ch
.text$mn:00007C2C ; COMDAT (pick any)
.text$mn:00007C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C2C
.text$mn:00007C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00007C2C
.text$mn:00007C2C ; Attributes: bp-based frame
.text$mn:00007C2C
.text$mn:00007C2C ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>> __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::end(void)
.text$mn:00007C2C                 public ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
.text$mn:00007C2C ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ proc near
.text$mn:00007C2C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+BFEp
.text$mn:00007C2C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+72p ...
.text$mn:00007C2C
.text$mn:00007C2C var_14          = dword ptr -14h
.text$mn:00007C2C var_10          = dword ptr -10h
.text$mn:00007C2C var_C           = dword ptr -0Ch
.text$mn:00007C2C var_4           = dword ptr -4
.text$mn:00007C2C arg_0           = dword ptr  8
.text$mn:00007C2C
.text$mn:00007C2C                 push    ebp
.text$mn:00007C2D                 mov     ebp, esp
.text$mn:00007C2F                 push    0FFFFFFFFh
.text$mn:00007C31                 push    offset __ehhandler$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
.text$mn:00007C36                 mov     eax, large fs:0
.text$mn:00007C3C                 push    eax
.text$mn:00007C3D                 sub     esp, 8
.text$mn:00007C40                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007C45                 xor     eax, ebp
.text$mn:00007C47                 push    eax
.text$mn:00007C48                 lea     eax, [ebp+var_C]
.text$mn:00007C4B                 mov     large fs:0, eax
.text$mn:00007C51                 mov     [ebp+var_10], ecx
.text$mn:00007C54                 mov     [ebp+var_14], 0
.text$mn:00007C5B                 mov     eax, [ebp+var_10]
.text$mn:00007C5E                 push    eax             ; struct std::_Container_base12 *
.text$mn:00007C5F                 mov     ecx, [ebp+var_10]
.text$mn:00007C62                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007C67                 mov     ecx, [ebp+var_10]
.text$mn:00007C6A                 add     eax, [ecx+14h]
.text$mn:00007C6D                 push    eax             ; int
.text$mn:00007C6E                 mov     ecx, [ebp+arg_0]
.text$mn:00007C71                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::_String_iterator<std::_String_val<std::_Simple_types<char>>>(char *,std::_Container_base12 const *)
.text$mn:00007C76                 mov     [ebp+var_4], 0
.text$mn:00007C7D                 mov     edx, [ebp+var_14]
.text$mn:00007C80                 or      edx, 1
.text$mn:00007C83                 mov     [ebp+var_14], edx
.text$mn:00007C86                 mov     eax, [ebp+arg_0]
.text$mn:00007C89                 mov     ecx, [ebp+var_C]
.text$mn:00007C8C                 mov     large fs:0, ecx
.text$mn:00007C93                 pop     ecx
.text$mn:00007C94                 mov     esp, ebp
.text$mn:00007C96                 pop     ebp
.text$mn:00007C97                 retn    4
.text$mn:00007C97 ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ endp
.text$mn:00007C97
.text$mn:00007C97 ; ---------------------------------------------------------------------------
.text$mn:00007C9A                 align 4
.text$mn:00007C9A _text$mn        ends
.text$mn:00007C9A
.text$x:00007C9C ; ===========================================================================
.text$x:00007C9C
.text$x:00007C9C ; Segment type: Pure code
.text$x:00007C9C ; Segment permissions: Read/Execute
.text$x:00007C9C _text$x         segment para public 'CODE' use32
.text$x:00007C9C                 assume cs:_text$x
.text$x:00007C9C                 ;org 7C9Ch
.text$x:00007C9C ; COMDAT (pick associative to section at 7C2C)
.text$x:00007C9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007C9C
.text$x:00007C9C ; =============== S U B R O U T I N E =======================================
.text$x:00007C9C
.text$x:00007C9C
.text$x:00007C9C __unwindfunclet$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ$0 proc near
.text$x:00007C9C                                         ; DATA XREF: .xdata$x:00009454o
.text$x:00007C9C                 mov     eax, [ebp-14h]
.text$x:00007C9F                 and     eax, 1
.text$x:00007CA2                 jz      $LN4_0
.text$x:00007CA8                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00007CAC                 mov     ecx, [ebp+8]
.text$x:00007CAF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00007CB4 ; ---------------------------------------------------------------------------
.text$x:00007CB4
.text$x:00007CB4 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ$0+6j
.text$x:00007CB4                 retn
.text$x:00007CB4 __unwindfunclet$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ$0 endp
.text$x:00007CB4
.text$x:00007CB5
.text$x:00007CB5 ; =============== S U B R O U T I N E =======================================
.text$x:00007CB5
.text$x:00007CB5
.text$x:00007CB5 __ehhandler$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ proc near
.text$x:00007CB5                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::end(void)+5o
.text$x:00007CB5
.text$x:00007CB5 arg_4           = dword ptr  8
.text$x:00007CB5
.text$x:00007CB5                 mov     edx, [esp+arg_4]
.text$x:00007CB9                 lea     eax, [edx+0Ch]
.text$x:00007CBC                 mov     ecx, [edx-0Ch]
.text$x:00007CBF                 xor     ecx, eax
.text$x:00007CC1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007CC6                 mov     eax, offset __ehfuncinfo$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
.text$x:00007CCB                 jmp     ___CxxFrameHandler3
.text$x:00007CCB __ehhandler$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ endp
.text$x:00007CCB
.text$x:00007CCB _text$x         ends
.text$x:00007CCB
.text$mn:00007CD0 ; ===========================================================================
.text$mn:00007CD0
.text$mn:00007CD0 ; Segment type: Pure code
.text$mn:00007CD0 ; Segment permissions: Read/Execute
.text$mn:00007CD0 _text$mn        segment para public 'CODE' use32
.text$mn:00007CD0                 assume cs:_text$mn
.text$mn:00007CD0                 ;org 7CD0h
.text$mn:00007CD0 ; COMDAT (pick any)
.text$mn:00007CD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CD0
.text$mn:00007CD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CD0
.text$mn:00007CD0 ; Attributes: bp-based frame
.text$mn:00007CD0
.text$mn:00007CD0 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:00007CD0                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:00007CD0 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:00007CD0                                         ; DATA XREF: .rdata:0000A424o
.text$mn:00007CD0                                         ; .rdata:0000A440o ...
.text$mn:00007CD0
.text$mn:00007CD0 var_8           = dword ptr -8
.text$mn:00007CD0 var_4           = dword ptr -4
.text$mn:00007CD0 arg_0           = dword ptr  8
.text$mn:00007CD0 arg_4           = dword ptr  0Ch
.text$mn:00007CD0
.text$mn:00007CD0                 push    ebp
.text$mn:00007CD1                 mov     ebp, esp
.text$mn:00007CD3                 sub     esp, 8
.text$mn:00007CD6                 mov     [ebp+var_8], ecx
.text$mn:00007CD9                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007CDC                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:00007CE1                 push    eax
.text$mn:00007CE2                 mov     ecx, [ebp+var_8]
.text$mn:00007CE5                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00007CEA                 movzx   eax, al
.text$mn:00007CED                 test    eax, eax
.text$mn:00007CEF                 jz      short loc_7D07
.text$mn:00007CF1                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007CF4                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00007CF9                 cmp     eax, [ebp+arg_4]
.text$mn:00007CFC                 jnz     short loc_7D07
.text$mn:00007CFE                 mov     [ebp+var_4], 1
.text$mn:00007D05                 jmp     short loc_7D0E
.text$mn:00007D07 ; ---------------------------------------------------------------------------
.text$mn:00007D07
.text$mn:00007D07 loc_7D07:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:00007D07                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:00007D07                 mov     [ebp+var_4], 0
.text$mn:00007D0E
.text$mn:00007D0E loc_7D0E:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:00007D0E                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007D11                 mov     esp, ebp
.text$mn:00007D13                 pop     ebp
.text$mn:00007D14                 retn    8
.text$mn:00007D14 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:00007D14
.text$mn:00007D14 ; ---------------------------------------------------------------------------
.text$mn:00007D17                 align 4
.text$mn:00007D17 _text$mn        ends
.text$mn:00007D17
.text$mn:00007D18 ; ===========================================================================
.text$mn:00007D18
.text$mn:00007D18 ; Segment type: Pure code
.text$mn:00007D18 ; Segment permissions: Read/Execute
.text$mn:00007D18 _text$mn        segment para public 'CODE' use32
.text$mn:00007D18                 assume cs:_text$mn
.text$mn:00007D18                 ;org 7D18h
.text$mn:00007D18 ; COMDAT (pick any)
.text$mn:00007D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D18
.text$mn:00007D18 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D18
.text$mn:00007D18 ; Attributes: bp-based frame
.text$mn:00007D18
.text$mn:00007D18 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:00007D18                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:00007D18 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:00007D18                                         ; DATA XREF: .rdata:0000A428o
.text$mn:00007D18                                         ; .rdata:0000A444o ...
.text$mn:00007D18
.text$mn:00007D18 var_C           = byte ptr -0Ch
.text$mn:00007D18 var_4           = dword ptr -4
.text$mn:00007D18 arg_0           = dword ptr  8
.text$mn:00007D18 arg_4           = dword ptr  0Ch
.text$mn:00007D18
.text$mn:00007D18                 push    ebp
.text$mn:00007D19                 mov     ebp, esp
.text$mn:00007D1B                 sub     esp, 0Ch
.text$mn:00007D1E                 mov     [ebp+var_4], ecx
.text$mn:00007D21                 mov     eax, [ebp+arg_4]
.text$mn:00007D24                 push    eax             ; std::error_condition *
.text$mn:00007D25                 mov     ecx, [ebp+arg_0]
.text$mn:00007D28                 push    ecx
.text$mn:00007D29                 lea     edx, [ebp+var_C]
.text$mn:00007D2C                 push    edx
.text$mn:00007D2D                 mov     eax, [ebp+var_4]
.text$mn:00007D30                 mov     edx, [eax]
.text$mn:00007D32                 mov     ecx, [ebp+var_4]
.text$mn:00007D35                 mov     eax, [edx+0Ch]
.text$mn:00007D38                 call    eax
.text$mn:00007D3A                 mov     ecx, eax
.text$mn:00007D3C                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:00007D41                 mov     esp, ebp
.text$mn:00007D43                 pop     ebp
.text$mn:00007D44                 retn    8
.text$mn:00007D44 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:00007D44
.text$mn:00007D44 ; ---------------------------------------------------------------------------
.text$mn:00007D47                 align 4
.text$mn:00007D47 _text$mn        ends
.text$mn:00007D47
.text$mn:00007D48 ; ===========================================================================
.text$mn:00007D48
.text$mn:00007D48 ; Segment type: Pure code
.text$mn:00007D48 ; Segment permissions: Read/Execute
.text$mn:00007D48 _text$mn        segment para public 'CODE' use32
.text$mn:00007D48                 assume cs:_text$mn
.text$mn:00007D48                 ;org 7D48h
.text$mn:00007D48 ; COMDAT (pick any)
.text$mn:00007D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D48
.text$mn:00007D48 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D48
.text$mn:00007D48 ; Attributes: bp-based frame
.text$mn:00007D48
.text$mn:00007D48 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:00007D48                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:00007D48 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00007D48                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:00007D48
.text$mn:00007D48 var_4           = dword ptr -4
.text$mn:00007D48 arg_0           = dword ptr  8
.text$mn:00007D48
.text$mn:00007D48                 push    ebp
.text$mn:00007D49                 mov     ebp, esp
.text$mn:00007D4B                 push    ecx
.text$mn:00007D4C                 mov     [ebp+var_4], ecx
.text$mn:00007D4F                 mov     eax, [ebp+var_4]
.text$mn:00007D52                 mov     ecx, [eax+14h]
.text$mn:00007D55                 cmp     ecx, [ebp+arg_0]
.text$mn:00007D58                 jnb     short loc_7D62
.text$mn:00007D5A                 mov     ecx, [ebp+var_4]
.text$mn:00007D5D                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00007D62
.text$mn:00007D62 loc_7D62:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:00007D62                 mov     edx, [ebp+arg_0]
.text$mn:00007D65                 push    edx
.text$mn:00007D66                 mov     ecx, [ebp+var_4]
.text$mn:00007D69                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007D6E                 mov     eax, [ebp+var_4]
.text$mn:00007D71                 mov     esp, ebp
.text$mn:00007D73                 pop     ebp
.text$mn:00007D74                 retn    4
.text$mn:00007D74 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:00007D74
.text$mn:00007D74 ; ---------------------------------------------------------------------------
.text$mn:00007D77                 align 4
.text$mn:00007D77 _text$mn        ends
.text$mn:00007D77
.text$mn:00007D78 ; ===========================================================================
.text$mn:00007D78
.text$mn:00007D78 ; Segment type: Pure code
.text$mn:00007D78 ; Segment permissions: Read/Execute
.text$mn:00007D78 _text$mn        segment para public 'CODE' use32
.text$mn:00007D78                 assume cs:_text$mn
.text$mn:00007D78                 ;org 7D78h
.text$mn:00007D78 ; COMDAT (pick any)
.text$mn:00007D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D78
.text$mn:00007D78 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D78
.text$mn:00007D78 ; Attributes: bp-based frame
.text$mn:00007D78
.text$mn:00007D78 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:00007D78                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:00007D78 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00007D78                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:00007D78                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+10Cp
.text$mn:00007D78
.text$mn:00007D78 var_C           = dword ptr -0Ch
.text$mn:00007D78 Dst             = dword ptr -8
.text$mn:00007D78 var_4           = dword ptr -4
.text$mn:00007D78 arg_0           = dword ptr  8
.text$mn:00007D78 arg_4           = dword ptr  0Ch
.text$mn:00007D78
.text$mn:00007D78                 push    ebp
.text$mn:00007D79                 mov     ebp, esp
.text$mn:00007D7B                 sub     esp, 0Ch
.text$mn:00007D7E                 mov     [ebp+var_4], ecx
.text$mn:00007D81                 mov     eax, [ebp+var_4]
.text$mn:00007D84                 mov     ecx, [eax+14h]
.text$mn:00007D87                 cmp     ecx, [ebp+arg_0]
.text$mn:00007D8A                 jnb     short loc_7D94
.text$mn:00007D8C                 mov     ecx, [ebp+var_4]
.text$mn:00007D8F                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00007D94
.text$mn:00007D94 loc_7D94:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:00007D94                 mov     edx, [ebp+var_4]
.text$mn:00007D97                 mov     eax, [edx+14h]
.text$mn:00007D9A                 sub     eax, [ebp+arg_0]
.text$mn:00007D9D                 cmp     eax, [ebp+arg_4]
.text$mn:00007DA0                 ja      short loc_7DB0
.text$mn:00007DA2                 mov     ecx, [ebp+arg_0]
.text$mn:00007DA5                 push    ecx
.text$mn:00007DA6                 mov     ecx, [ebp+var_4]
.text$mn:00007DA9                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007DAE                 jmp     short loc_7DF6
.text$mn:00007DB0 ; ---------------------------------------------------------------------------
.text$mn:00007DB0
.text$mn:00007DB0 loc_7DB0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:00007DB0                 cmp     [ebp+arg_4], 0
.text$mn:00007DB4                 jbe     short loc_7DF6
.text$mn:00007DB6                 mov     ecx, [ebp+var_4]
.text$mn:00007DB9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007DBE                 add     eax, [ebp+arg_0]
.text$mn:00007DC1                 mov     [ebp+Dst], eax
.text$mn:00007DC4                 mov     edx, [ebp+var_4]
.text$mn:00007DC7                 mov     eax, [edx+14h]
.text$mn:00007DCA                 sub     eax, [ebp+arg_4]
.text$mn:00007DCD                 mov     [ebp+var_C], eax
.text$mn:00007DD0                 mov     ecx, [ebp+var_C]
.text$mn:00007DD3                 sub     ecx, [ebp+arg_0]
.text$mn:00007DD6                 push    ecx             ; Size
.text$mn:00007DD7                 mov     edx, [ebp+Dst]
.text$mn:00007DDA                 add     edx, [ebp+arg_4]
.text$mn:00007DDD                 push    edx             ; Src
.text$mn:00007DDE                 mov     eax, [ebp+Dst]
.text$mn:00007DE1                 push    eax             ; Dst
.text$mn:00007DE2                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00007DE7                 add     esp, 0Ch
.text$mn:00007DEA                 mov     ecx, [ebp+var_C]
.text$mn:00007DED                 push    ecx
.text$mn:00007DEE                 mov     ecx, [ebp+var_4]
.text$mn:00007DF1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007DF6
.text$mn:00007DF6 loc_7DF6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:00007DF6                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:00007DF6                 mov     eax, [ebp+var_4]
.text$mn:00007DF9                 mov     esp, ebp
.text$mn:00007DFB                 pop     ebp
.text$mn:00007DFC                 retn    8
.text$mn:00007DFC ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:00007DFC
.text$mn:00007DFC ; ---------------------------------------------------------------------------
.text$mn:00007DFF                 align 10h
.text$mn:00007DFF _text$mn        ends
.text$mn:00007DFF
.text$mn:00007E00 ; ===========================================================================
.text$mn:00007E00
.text$mn:00007E00 ; Segment type: Pure code
.text$mn:00007E00 ; Segment permissions: Read/Execute
.text$mn:00007E00 _text$mn        segment para public 'CODE' use32
.text$mn:00007E00                 assume cs:_text$mn
.text$mn:00007E00                 ;org 7E00h
.text$mn:00007E00 ; COMDAT (pick any)
.text$mn:00007E00                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E00
.text$mn:00007E00 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E00
.text$mn:00007E00 ; Attributes: bp-based frame
.text$mn:00007E00
.text$mn:00007E00 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:00007E00                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:00007E00 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00007E00                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:00007E00
.text$mn:00007E00 var_4           = dword ptr -4
.text$mn:00007E00 arg_0           = dword ptr  8
.text$mn:00007E00
.text$mn:00007E00                 push    ebp
.text$mn:00007E01                 mov     ebp, esp
.text$mn:00007E03                 push    ecx
.text$mn:00007E04                 mov     [ebp+var_4], ecx
.text$mn:00007E07                 mov     eax, [ebp+var_4]
.text$mn:00007E0A                 mov     ecx, [eax+14h]
.text$mn:00007E0D                 cmp     ecx, [ebp+arg_0]
.text$mn:00007E10                 jnb     short loc_7E1A
.text$mn:00007E12                 mov     ecx, [ebp+var_4]
.text$mn:00007E15                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00007E1A
.text$mn:00007E1A loc_7E1A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:00007E1A                 mov     edx, [ebp+arg_0]
.text$mn:00007E1D                 push    edx
.text$mn:00007E1E                 mov     ecx, [ebp+var_4]
.text$mn:00007E21                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007E26                 mov     eax, [ebp+var_4]
.text$mn:00007E29                 mov     esp, ebp
.text$mn:00007E2B                 pop     ebp
.text$mn:00007E2C                 retn    4
.text$mn:00007E2C ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:00007E2C
.text$mn:00007E2C ; ---------------------------------------------------------------------------
.text$mn:00007E2F                 align 10h
.text$mn:00007E2F _text$mn        ends
.text$mn:00007E2F
.text$mn:00007E30 ; ===========================================================================
.text$mn:00007E30
.text$mn:00007E30 ; Segment type: Pure code
.text$mn:00007E30 ; Segment permissions: Read/Execute
.text$mn:00007E30 _text$mn        segment para public 'CODE' use32
.text$mn:00007E30                 assume cs:_text$mn
.text$mn:00007E30                 ;org 7E30h
.text$mn:00007E30 ; COMDAT (pick any)
.text$mn:00007E30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E30
.text$mn:00007E30 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E30
.text$mn:00007E30 ; Attributes: bp-based frame
.text$mn:00007E30
.text$mn:00007E30 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:00007E30                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:00007E30 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00007E30                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:00007E30
.text$mn:00007E30 var_C           = dword ptr -0Ch
.text$mn:00007E30 Dst             = dword ptr -8
.text$mn:00007E30 var_4           = dword ptr -4
.text$mn:00007E30 arg_0           = dword ptr  8
.text$mn:00007E30 arg_4           = dword ptr  0Ch
.text$mn:00007E30
.text$mn:00007E30                 push    ebp
.text$mn:00007E31                 mov     ebp, esp
.text$mn:00007E33                 sub     esp, 0Ch
.text$mn:00007E36                 mov     [ebp+var_4], ecx
.text$mn:00007E39                 mov     eax, [ebp+var_4]
.text$mn:00007E3C                 mov     ecx, [eax+14h]
.text$mn:00007E3F                 cmp     ecx, [ebp+arg_0]
.text$mn:00007E42                 jnb     short loc_7E4C
.text$mn:00007E44                 mov     ecx, [ebp+var_4]
.text$mn:00007E47                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00007E4C
.text$mn:00007E4C loc_7E4C:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:00007E4C                 mov     edx, [ebp+var_4]
.text$mn:00007E4F                 mov     eax, [edx+14h]
.text$mn:00007E52                 sub     eax, [ebp+arg_0]
.text$mn:00007E55                 cmp     eax, [ebp+arg_4]
.text$mn:00007E58                 ja      short loc_7E68
.text$mn:00007E5A                 mov     ecx, [ebp+arg_0]
.text$mn:00007E5D                 push    ecx
.text$mn:00007E5E                 mov     ecx, [ebp+var_4]
.text$mn:00007E61                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007E66                 jmp     short loc_7EB4
.text$mn:00007E68 ; ---------------------------------------------------------------------------
.text$mn:00007E68
.text$mn:00007E68 loc_7E68:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:00007E68                 cmp     [ebp+arg_4], 0
.text$mn:00007E6C                 jbe     short loc_7EB4
.text$mn:00007E6E                 mov     ecx, [ebp+var_4]
.text$mn:00007E71                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007E76                 mov     edx, [ebp+arg_0]
.text$mn:00007E79                 lea     eax, [eax+edx*2]
.text$mn:00007E7C                 mov     [ebp+Dst], eax
.text$mn:00007E7F                 mov     ecx, [ebp+var_4]
.text$mn:00007E82                 mov     edx, [ecx+14h]
.text$mn:00007E85                 sub     edx, [ebp+arg_4]
.text$mn:00007E88                 mov     [ebp+var_C], edx
.text$mn:00007E8B                 mov     eax, [ebp+var_C]
.text$mn:00007E8E                 sub     eax, [ebp+arg_0]
.text$mn:00007E91                 push    eax             ; int
.text$mn:00007E92                 mov     ecx, [ebp+arg_4]
.text$mn:00007E95                 mov     edx, [ebp+Dst]
.text$mn:00007E98                 lea     eax, [edx+ecx*2]
.text$mn:00007E9B                 push    eax             ; Src
.text$mn:00007E9C                 mov     ecx, [ebp+Dst]
.text$mn:00007E9F                 push    ecx             ; Dst
.text$mn:00007EA0                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00007EA5                 add     esp, 0Ch
.text$mn:00007EA8                 mov     edx, [ebp+var_C]
.text$mn:00007EAB                 push    edx
.text$mn:00007EAC                 mov     ecx, [ebp+var_4]
.text$mn:00007EAF                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007EB4
.text$mn:00007EB4 loc_7EB4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:00007EB4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:00007EB4                 mov     eax, [ebp+var_4]
.text$mn:00007EB7                 mov     esp, ebp
.text$mn:00007EB9                 pop     ebp
.text$mn:00007EBA                 retn    8
.text$mn:00007EBA ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:00007EBA
.text$mn:00007EBA ; ---------------------------------------------------------------------------
.text$mn:00007EBD                 align 10h
.text$mn:00007EBD _text$mn        ends
.text$mn:00007EBD
.text$mn:00007EC0 ; ===========================================================================
.text$mn:00007EC0
.text$mn:00007EC0 ; Segment type: Pure code
.text$mn:00007EC0 ; Segment permissions: Read/Execute
.text$mn:00007EC0 _text$mn        segment para public 'CODE' use32
.text$mn:00007EC0                 assume cs:_text$mn
.text$mn:00007EC0                 ;org 7EC0h
.text$mn:00007EC0 ; COMDAT (pick any)
.text$mn:00007EC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EC0
.text$mn:00007EC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007EC0
.text$mn:00007EC0 ; Attributes: bp-based frame
.text$mn:00007EC0
.text$mn:00007EC0 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:00007EC0                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:00007EC0 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00007EC0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:00007EC0                 push    ebp
.text$mn:00007EC1                 mov     ebp, esp
.text$mn:00007EC3                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:00007EC8                 pop     ebp
.text$mn:00007EC9                 retn
.text$mn:00007EC9 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00007EC9
.text$mn:00007EC9 ; ---------------------------------------------------------------------------
.text$mn:00007ECA                 align 4
.text$mn:00007ECA _text$mn        ends
.text$mn:00007ECA
.text$mn:00007ECC ; ===========================================================================
.text$mn:00007ECC
.text$mn:00007ECC ; Segment type: Pure code
.text$mn:00007ECC ; Segment permissions: Read/Execute
.text$mn:00007ECC _text$mn        segment para public 'CODE' use32
.text$mn:00007ECC                 assume cs:_text$mn
.text$mn:00007ECC                 ;org 7ECCh
.text$mn:00007ECC ; COMDAT (pick any)
.text$mn:00007ECC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007ECC
.text$mn:00007ECC ; =============== S U B R O U T I N E =======================================
.text$mn:00007ECC
.text$mn:00007ECC ; Attributes: bp-based frame
.text$mn:00007ECC
.text$mn:00007ECC ; const wchar_t *__thiscall NppParameters::getAppDataNppDir(NppParameters *__hidden this)
.text$mn:00007ECC                 public ?getAppDataNppDir@NppParameters@@QBEPB_WXZ
.text$mn:00007ECC ?getAppDataNppDir@NppParameters@@QBEPB_WXZ proc near
.text$mn:00007ECC                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+767p
.text$mn:00007ECC                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+77Ap ...
.text$mn:00007ECC
.text$mn:00007ECC var_4           = dword ptr -4
.text$mn:00007ECC
.text$mn:00007ECC                 push    ebp
.text$mn:00007ECD                 mov     ebp, esp
.text$mn:00007ECF                 push    ecx
.text$mn:00007ED0                 mov     [ebp+var_4], ecx
.text$mn:00007ED3                 mov     ecx, [ebp+var_4]
.text$mn:00007ED6                 add     ecx, 1CB14h
.text$mn:00007EDC                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00007EE1                 mov     esp, ebp
.text$mn:00007EE3                 pop     ebp
.text$mn:00007EE4                 retn
.text$mn:00007EE4 ?getAppDataNppDir@NppParameters@@QBEPB_WXZ endp
.text$mn:00007EE4
.text$mn:00007EE4 ; ---------------------------------------------------------------------------
.text$mn:00007EE5                 align 4
.text$mn:00007EE5 _text$mn        ends
.text$mn:00007EE5
.text$mn:00007EE8 ; ===========================================================================
.text$mn:00007EE8
.text$mn:00007EE8 ; Segment type: Pure code
.text$mn:00007EE8 ; Segment permissions: Read/Execute
.text$mn:00007EE8 _text$mn        segment para public 'CODE' use32
.text$mn:00007EE8                 assume cs:_text$mn
.text$mn:00007EE8                 ;org 7EE8h
.text$mn:00007EE8 ; COMDAT (pick any)
.text$mn:00007EE8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EE8
.text$mn:00007EE8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007EE8
.text$mn:00007EE8 ; Attributes: bp-based frame
.text$mn:00007EE8
.text$mn:00007EE8 ; public: struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> & __thiscall ThemeSwitcher::getElementFromIndex(unsigned int)
.text$mn:00007EE8                 public ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z
.text$mn:00007EE8 ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z proc near
.text$mn:00007EE8                                         ; CODE XREF: ThemeSwitcher::themeNameExists(wchar_t const *)+33p
.text$mn:00007EE8
.text$mn:00007EE8 var_4           = dword ptr -4
.text$mn:00007EE8 arg_0           = dword ptr  8
.text$mn:00007EE8
.text$mn:00007EE8                 push    ebp
.text$mn:00007EE9                 mov     ebp, esp
.text$mn:00007EEB                 push    ecx
.text$mn:00007EEC                 mov     [ebp+var_4], ecx
.text$mn:00007EEF                 mov     eax, [ebp+arg_0]
.text$mn:00007EF2                 push    eax
.text$mn:00007EF3                 mov     ecx, [ebp+var_4]
.text$mn:00007EF6                 call    ??A?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@I@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)
.text$mn:00007EFB                 mov     esp, ebp
.text$mn:00007EFD                 pop     ebp
.text$mn:00007EFE
.text$mn:00007EFE locret_7EFE:                            ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+BAo
.text$mn:00007EFE                 retn    4
.text$mn:00007EFE ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z endp
.text$mn:00007EFE
.text$mn:00007EFE ; ---------------------------------------------------------------------------
.text$mn:00007F01                 align 4
.text$mn:00007F01 _text$mn        ends
.text$mn:00007F01
.text$mn:00007F04 ; ===========================================================================
.text$mn:00007F04
.text$mn:00007F04 ; Segment type: Pure code
.text$mn:00007F04 ; Segment permissions: Read/Execute
.text$mn:00007F04 _text$mn        segment para public 'CODE' use32
.text$mn:00007F04                 assume cs:_text$mn
.text$mn:00007F04                 ;org 7F04h
.text$mn:00007F04 ; COMDAT (pick any)
.text$mn:00007F04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F04
.text$mn:00007F04 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F04
.text$mn:00007F04 ; Attributes: bp-based frame
.text$mn:00007F04
.text$mn:00007F04 ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:00007F04                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:00007F04 ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:00007F04                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *):loc_1059p
.text$mn:00007F04                 push    ebp
.text$mn:00007F05                 mov     ebp, esp
.text$mn:00007F07                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:00007F0C                 pop     ebp
.text$mn:00007F0D                 retn
.text$mn:00007F0D ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:00007F0D
.text$mn:00007F0D ; ---------------------------------------------------------------------------
.text$mn:00007F0E                 align 10h
.text$mn:00007F0E _text$mn        ends
.text$mn:00007F0E
.text$mn:00007F10 ; ===========================================================================
.text$mn:00007F10
.text$mn:00007F10 ; Segment type: Pure code
.text$mn:00007F10 ; Segment permissions: Read/Execute
.text$mn:00007F10 _text$mn        segment para public 'CODE' use32
.text$mn:00007F10                 assume cs:_text$mn
.text$mn:00007F10                 ;org 7F10h
.text$mn:00007F10 ; COMDAT (pick any)
.text$mn:00007F10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F10
.text$mn:00007F10 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F10
.text$mn:00007F10 ; Attributes: bp-based frame
.text$mn:00007F10
.text$mn:00007F10 ; struct LocalizationSwitcher *__thiscall NppParameters::getLocalizationSwitcher(NppParameters *__hidden this)
.text$mn:00007F10                 public ?getLocalizationSwitcher@NppParameters@@QAEAAVLocalizationSwitcher@@XZ
.text$mn:00007F10 ?getLocalizationSwitcher@NppParameters@@QAEAAVLocalizationSwitcher@@XZ proc near
.text$mn:00007F10                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+613p
.text$mn:00007F10
.text$mn:00007F10 var_4           = dword ptr -4
.text$mn:00007F10
.text$mn:00007F10                 push    ebp
.text$mn:00007F11                 mov     ebp, esp
.text$mn:00007F13                 push    ecx
.text$mn:00007F14                 mov     [ebp+var_4], ecx
.text$mn:00007F17                 mov     eax, [ebp+var_4]
.text$mn:00007F1A                 add     eax, 1C984h
.text$mn:00007F1F                 mov     esp, ebp
.text$mn:00007F21                 pop     ebp
.text$mn:00007F22                 retn
.text$mn:00007F22 ?getLocalizationSwitcher@NppParameters@@QAEAAVLocalizationSwitcher@@XZ endp
.text$mn:00007F22
.text$mn:00007F22 ; ---------------------------------------------------------------------------
.text$mn:00007F23                 align 4
.text$mn:00007F23 _text$mn        ends
.text$mn:00007F23
.text$mn:00007F24 ; ===========================================================================
.text$mn:00007F24
.text$mn:00007F24 ; Segment type: Pure code
.text$mn:00007F24 ; Segment permissions: Read/Execute
.text$mn:00007F24 _text$mn        segment para public 'CODE' use32
.text$mn:00007F24                 assume cs:_text$mn
.text$mn:00007F24                 ;org 7F24h
.text$mn:00007F24 ; COMDAT (pick any)
.text$mn:00007F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F24
.text$mn:00007F24 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F24
.text$mn:00007F24 ; Attributes: bp-based frame
.text$mn:00007F24
.text$mn:00007F24 ; const struct NppGUI *__thiscall NppParameters::getNppGUI(NppParameters *__hidden this)
.text$mn:00007F24                 public ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ
.text$mn:00007F24 ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ proc near
.text$mn:00007F24                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+14Ep
.text$mn:00007F24
.text$mn:00007F24 var_4           = dword ptr -4
.text$mn:00007F24
.text$mn:00007F24                 push    ebp
.text$mn:00007F25                 mov     ebp, esp
.text$mn:00007F27                 push    ecx
.text$mn:00007F28                 mov     [ebp+var_4], ecx
.text$mn:00007F2B                 mov     eax, [ebp+var_4]
.text$mn:00007F2E                 add     eax, 118h
.text$mn:00007F33                 mov     esp, ebp
.text$mn:00007F35                 pop     ebp
.text$mn:00007F36                 retn
.text$mn:00007F36 ?getNppGUI@NppParameters@@QBEABUNppGUI@@XZ endp
.text$mn:00007F36
.text$mn:00007F36 ; ---------------------------------------------------------------------------
.text$mn:00007F37                 align 4
.text$mn:00007F37 _text$mn        ends
.text$mn:00007F37
.text$mn:00007F38 ; ===========================================================================
.text$mn:00007F38
.text$mn:00007F38 ; Segment type: Pure code
.text$mn:00007F38 ; Segment permissions: Read/Execute
.text$mn:00007F38 _text$mn        segment para public 'CODE' use32
.text$mn:00007F38                 assume cs:_text$mn
.text$mn:00007F38                 ;org 7F38h
.text$mn:00007F38 ; COMDAT (pick any)
.text$mn:00007F38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F38
.text$mn:00007F38 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F38
.text$mn:00007F38 ; Attributes: bp-based frame
.text$mn:00007F38
.text$mn:00007F38 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall NppParameters::getNppPath(void)const
.text$mn:00007F38                 public ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:00007F38 ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$mn:00007F38                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+604p
.text$mn:00007F38
.text$mn:00007F38 var_14          = dword ptr -14h
.text$mn:00007F38 var_10          = dword ptr -10h
.text$mn:00007F38 var_C           = dword ptr -0Ch
.text$mn:00007F38 var_4           = dword ptr -4
.text$mn:00007F38 arg_0           = dword ptr  8
.text$mn:00007F38
.text$mn:00007F38                 push    ebp
.text$mn:00007F39                 mov     ebp, esp
.text$mn:00007F3B                 push    0FFFFFFFFh
.text$mn:00007F3D                 push    offset __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$mn:00007F42                 mov     eax, large fs:0
.text$mn:00007F48                 push    eax
.text$mn:00007F49                 sub     esp, 8
.text$mn:00007F4C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007F51                 xor     eax, ebp
.text$mn:00007F53                 push    eax
.text$mn:00007F54                 lea     eax, [ebp+var_C]
.text$mn:00007F57                 mov     large fs:0, eax
.text$mn:00007F5D                 mov     [ebp+var_14], ecx
.text$mn:00007F60                 mov     [ebp+var_10], 0
.text$mn:00007F67                 mov     eax, [ebp+var_14]
.text$mn:00007F6A                 add     eax, 1CAC0h
.text$mn:00007F6F                 push    eax
.text$mn:00007F70                 mov     ecx, [ebp+arg_0]
.text$mn:00007F73                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00007F78                 mov     [ebp+var_4], 0
.text$mn:00007F7F                 mov     ecx, [ebp+var_10]
.text$mn:00007F82                 or      ecx, 1
.text$mn:00007F85                 mov     [ebp+var_10], ecx
.text$mn:00007F88                 mov     eax, [ebp+arg_0]
.text$mn:00007F8B                 mov     ecx, [ebp+var_C]
.text$mn:00007F8E                 mov     large fs:0, ecx
.text$mn:00007F95                 pop     ecx
.text$mn:00007F96                 mov     esp, ebp
.text$mn:00007F98                 pop     ebp
.text$mn:00007F99                 retn    4
.text$mn:00007F99 ?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$mn:00007F99
.text$mn:00007F99 _text$mn        ends
.text$mn:00007F99
.text$x:00007F9C ; ===========================================================================
.text$x:00007F9C
.text$x:00007F9C ; Segment type: Pure code
.text$x:00007F9C ; Segment permissions: Read/Execute
.text$x:00007F9C _text$x         segment para public 'CODE' use32
.text$x:00007F9C                 assume cs:_text$x
.text$x:00007F9C                 ;org 7F9Ch
.text$x:00007F9C ; COMDAT (pick associative to section at 7F38)
.text$x:00007F9C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007F9C
.text$x:00007F9C ; =============== S U B R O U T I N E =======================================
.text$x:00007F9C
.text$x:00007F9C
.text$x:00007F9C __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 proc near
.text$x:00007F9C                                         ; DATA XREF: .xdata$x:00009C50o
.text$x:00007F9C                 mov     eax, [ebp-10h]
.text$x:00007F9F                 and     eax, 1
.text$x:00007FA2                 jz      $LN4_1
.text$x:00007FA8                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00007FAC                 mov     ecx, [ebp+8]
.text$x:00007FAF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00007FB4 ; ---------------------------------------------------------------------------
.text$x:00007FB4
.text$x:00007FB4 $LN4_1:                                 ; CODE XREF: __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0+6j
.text$x:00007FB4                 retn
.text$x:00007FB4 __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0 endp
.text$x:00007FB4
.text$x:00007FB5
.text$x:00007FB5 ; =============== S U B R O U T I N E =======================================
.text$x:00007FB5
.text$x:00007FB5
.text$x:00007FB5 __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ proc near
.text$x:00007FB5                                         ; DATA XREF: NppParameters::getNppPath(void)+5o
.text$x:00007FB5
.text$x:00007FB5 arg_4           = dword ptr  8
.text$x:00007FB5
.text$x:00007FB5                 mov     edx, [esp+arg_4]
.text$x:00007FB9                 lea     eax, [edx+0Ch]
.text$x:00007FBC                 mov     ecx, [edx-0Ch]
.text$x:00007FBF                 xor     ecx, eax
.text$x:00007FC1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007FC6                 mov     eax, offset __ehfuncinfo$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.text$x:00007FCB                 jmp     ___CxxFrameHandler3
.text$x:00007FCB __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ endp
.text$x:00007FCB
.text$x:00007FCB _text$x         ends
.text$x:00007FCB
.text$mn:00007FD0 ; ===========================================================================
.text$mn:00007FD0
.text$mn:00007FD0 ; Segment type: Pure code
.text$mn:00007FD0 ; Segment permissions: Read/Execute
.text$mn:00007FD0 _text$mn        segment para public 'CODE' use32
.text$mn:00007FD0                 assume cs:_text$mn
.text$mn:00007FD0                 ;org 7FD0h
.text$mn:00007FD0 ; COMDAT (pick any)
.text$mn:00007FD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FD0
.text$mn:00007FD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007FD0
.text$mn:00007FD0 ; Attributes: bp-based frame
.text$mn:00007FD0
.text$mn:00007FD0 ; struct ThemeSwitcher *__thiscall NppParameters::getThemeSwitcher(NppParameters *__hidden this)
.text$mn:00007FD0                 public ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ
.text$mn:00007FD0 ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ proc near
.text$mn:00007FD0                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+747p
.text$mn:00007FD0
.text$mn:00007FD0 var_4           = dword ptr -4
.text$mn:00007FD0
.text$mn:00007FD0                 push    ebp
.text$mn:00007FD1                 mov     ebp, esp
.text$mn:00007FD3                 push    ecx
.text$mn:00007FD4                 mov     [ebp+var_4], ecx
.text$mn:00007FD7                 mov     eax, [ebp+var_4]
.text$mn:00007FDA                 add     eax, 1C9E8h
.text$mn:00007FDF                 mov     esp, ebp
.text$mn:00007FE1                 pop     ebp
.text$mn:00007FE2                 retn
.text$mn:00007FE2 ?getThemeSwitcher@NppParameters@@QAEAAVThemeSwitcher@@XZ endp
.text$mn:00007FE2
.text$mn:00007FE2 ; ---------------------------------------------------------------------------
.text$mn:00007FE3                 align 4
.text$mn:00007FE3 _text$mn        ends
.text$mn:00007FE3
.text$mn:00007FE4 ; ===========================================================================
.text$mn:00007FE4
.text$mn:00007FE4 ; Segment type: Pure code
.text$mn:00007FE4 ; Segment permissions: Read/Execute
.text$mn:00007FE4 _text$mn        segment para public 'CODE' use32
.text$mn:00007FE4                 assume cs:_text$mn
.text$mn:00007FE4                 ;org 7FE4h
.text$mn:00007FE4 ; COMDAT (pick any)
.text$mn:00007FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FE4
.text$mn:00007FE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007FE4
.text$mn:00007FE4 ; Attributes: bp-based frame
.text$mn:00007FE4
.text$mn:00007FE4 ; void __thiscall Window::init(Window *this, HINSTANCE, HWND)
.text$mn:00007FE4                 public ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z
.text$mn:00007FE4 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
.text$mn:00007FE4                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+6Cp
.text$mn:00007FE4
.text$mn:00007FE4 var_4           = dword ptr -4
.text$mn:00007FE4 arg_0           = dword ptr  8
.text$mn:00007FE4 arg_4           = dword ptr  0Ch
.text$mn:00007FE4
.text$mn:00007FE4                 push    ebp
.text$mn:00007FE5                 mov     ebp, esp
.text$mn:00007FE7                 push    ecx
.text$mn:00007FE8                 mov     [ebp+var_4], ecx
.text$mn:00007FEB                 mov     eax, [ebp+var_4]
.text$mn:00007FEE                 mov     ecx, [ebp+arg_0]
.text$mn:00007FF1                 mov     [eax+4], ecx
.text$mn:00007FF4                 mov     edx, [ebp+var_4]
.text$mn:00007FF7                 mov     eax, [ebp+arg_4]
.text$mn:00007FFA                 mov     [edx+8], eax
.text$mn:00007FFD                 mov     esp, ebp
.text$mn:00007FFF                 pop     ebp
.text$mn:00008000                 retn    8
.text$mn:00008000 ?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z endp
.text$mn:00008000
.text$mn:00008000 ; ---------------------------------------------------------------------------
.text$mn:00008003                 align 4
.text$mn:00008003 _text$mn        ends
.text$mn:00008003
.text$mn:00008004 ; ===========================================================================
.text$mn:00008004
.text$mn:00008004 ; Segment type: Pure code
.text$mn:00008004 ; Segment permissions: Read/Execute
.text$mn:00008004 _text$mn        segment para public 'CODE' use32
.text$mn:00008004                 assume cs:_text$mn
.text$mn:00008004                 ;org 8004h
.text$mn:00008004 ; COMDAT (pick any)
.text$mn:00008004                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008004
.text$mn:00008004 ; =============== S U B R O U T I N E =======================================
.text$mn:00008004
.text$mn:00008004 ; Attributes: bp-based frame
.text$mn:00008004
.text$mn:00008004 ; bool __thiscall CmdLineParams::isPointValid(CmdLineParams *__hidden this)
.text$mn:00008004                 public ?isPointValid@CmdLineParams@@QAE_NXZ
.text$mn:00008004 ?isPointValid@CmdLineParams@@QAE_NXZ proc near
.text$mn:00008004                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+23Cp
.text$mn:00008004                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+484p
.text$mn:00008004
.text$mn:00008004 var_8           = dword ptr -8
.text$mn:00008004 var_4           = dword ptr -4
.text$mn:00008004
.text$mn:00008004                 push    ebp
.text$mn:00008005                 mov     ebp, esp
.text$mn:00008007                 sub     esp, 8
.text$mn:0000800A                 mov     [ebp+var_4], ecx
.text$mn:0000800D                 mov     eax, [ebp+var_4]
.text$mn:00008010                 movzx   ecx, byte ptr [eax+18h]
.text$mn:00008014                 test    ecx, ecx
.text$mn:00008016                 jz      short loc_802C
.text$mn:00008018                 mov     edx, [ebp+var_4]
.text$mn:0000801B                 movzx   eax, byte ptr [edx+19h]
.text$mn:0000801F                 test    eax, eax
.text$mn:00008021                 jz      short loc_802C
.text$mn:00008023                 mov     [ebp+var_8], 1
.text$mn:0000802A                 jmp     short loc_8033
.text$mn:0000802C ; ---------------------------------------------------------------------------
.text$mn:0000802C
.text$mn:0000802C loc_802C:                               ; CODE XREF: CmdLineParams::isPointValid(void)+12j
.text$mn:0000802C                                         ; CmdLineParams::isPointValid(void)+1Dj
.text$mn:0000802C                 mov     [ebp+var_8], 0
.text$mn:00008033
.text$mn:00008033 loc_8033:                               ; CODE XREF: CmdLineParams::isPointValid(void)+26j
.text$mn:00008033                 mov     al, byte ptr [ebp+var_8]
.text$mn:00008036                 mov     esp, ebp
.text$mn:00008038                 pop     ebp
.text$mn:00008039                 retn
.text$mn:00008039 ?isPointValid@CmdLineParams@@QAE_NXZ endp
.text$mn:00008039
.text$mn:00008039 ; ---------------------------------------------------------------------------
.text$mn:0000803A                 align 4
.text$mn:0000803A _text$mn        ends
.text$mn:0000803A
.text$mn:0000803C ; ===========================================================================
.text$mn:0000803C
.text$mn:0000803C ; Segment type: Pure code
.text$mn:0000803C ; Segment permissions: Read/Execute
.text$mn:0000803C _text$mn        segment para public 'CODE' use32
.text$mn:0000803C                 assume cs:_text$mn
.text$mn:0000803C                 ;org 803Ch
.text$mn:0000803C ; COMDAT (pick any)
.text$mn:0000803C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000803C
.text$mn:0000803C ; =============== S U B R O U T I N E =======================================
.text$mn:0000803C
.text$mn:0000803C ; Attributes: bp-based frame
.text$mn:0000803C
.text$mn:0000803C ; bool __thiscall NativeLangSpeaker::isRTL(NativeLangSpeaker *__hidden this)
.text$mn:0000803C                 public ?isRTL@NativeLangSpeaker@@QBE_NXZ
.text$mn:0000803C ?isRTL@NativeLangSpeaker@@QBE_NXZ proc near
.text$mn:0000803C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+180p
.text$mn:0000803C
.text$mn:0000803C var_4           = dword ptr -4
.text$mn:0000803C
.text$mn:0000803C                 push    ebp
.text$mn:0000803D                 mov     ebp, esp
.text$mn:0000803F                 push    ecx
.text$mn:00008040                 mov     [ebp+var_4], ecx
.text$mn:00008043                 mov     eax, [ebp+var_4]
.text$mn:00008046                 mov     al, [eax+8]
.text$mn:00008049                 mov     esp, ebp
.text$mn:0000804B                 pop     ebp
.text$mn:0000804C                 retn
.text$mn:0000804C ?isRTL@NativeLangSpeaker@@QBE_NXZ endp
.text$mn:0000804C
.text$mn:0000804C ; ---------------------------------------------------------------------------
.text$mn:0000804D                 align 10h
.text$mn:0000804D _text$mn        ends
.text$mn:0000804D
.text$mn:00008050 ; ===========================================================================
.text$mn:00008050
.text$mn:00008050 ; Segment type: Pure code
.text$mn:00008050 ; Segment permissions: Read/Execute
.text$mn:00008050 _text$mn        segment para public 'CODE' use32
.text$mn:00008050                 assume cs:_text$mn
.text$mn:00008050                 ;org 8050h
.text$mn:00008050 ; COMDAT (pick any)
.text$mn:00008050                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008050
.text$mn:00008050 ; =============== S U B R O U T I N E =======================================
.text$mn:00008050
.text$mn:00008050 ; Attributes: bp-based frame
.text$mn:00008050
.text$mn:00008050 ; bool __thiscall NppGUI::isSnapshotMode(NppGUI *__hidden this)
.text$mn:00008050                 public ?isSnapshotMode@NppGUI@@QBE_NXZ
.text$mn:00008050 ?isSnapshotMode@NppGUI@@QBE_NXZ proc near
.text$mn:00008050                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+DC2p
.text$mn:00008050
.text$mn:00008050 var_8           = dword ptr -8
.text$mn:00008050 var_4           = dword ptr -4
.text$mn:00008050
.text$mn:00008050                 push    ebp
.text$mn:00008051                 mov     ebp, esp
.text$mn:00008053                 sub     esp, 8
.text$mn:00008056                 mov     [ebp+var_4], ecx
.text$mn:00008059                 mov     eax, [ebp+var_4]
.text$mn:0000805C                 movzx   ecx, byte ptr [eax+695h]
.text$mn:00008063                 test    ecx, ecx
.text$mn:00008065                 jz      short loc_8086
.text$mn:00008067                 mov     edx, [ebp+var_4]
.text$mn:0000806A                 movzx   eax, byte ptr [edx+3Ah]
.text$mn:0000806E                 test    eax, eax
.text$mn:00008070                 jz      short loc_8086
.text$mn:00008072                 mov     ecx, [ebp+var_4]
.text$mn:00008075                 movzx   edx, byte ptr [ecx+3Bh]
.text$mn:00008079                 test    edx, edx
.text$mn:0000807B                 jnz     short loc_8086
.text$mn:0000807D                 mov     [ebp+var_8], 1
.text$mn:00008084                 jmp     short loc_808D
.text$mn:00008086 ; ---------------------------------------------------------------------------
.text$mn:00008086
.text$mn:00008086 loc_8086:                               ; CODE XREF: NppGUI::isSnapshotMode(void)+15j
.text$mn:00008086                                         ; NppGUI::isSnapshotMode(void)+20j ...
.text$mn:00008086                 mov     [ebp+var_8], 0
.text$mn:0000808D
.text$mn:0000808D loc_808D:                               ; CODE XREF: NppGUI::isSnapshotMode(void)+34j
.text$mn:0000808D                 mov     al, byte ptr [ebp+var_8]
.text$mn:00008090                 mov     esp, ebp
.text$mn:00008092                 pop     ebp
.text$mn:00008093                 retn
.text$mn:00008093 ?isSnapshotMode@NppGUI@@QBE_NXZ endp
.text$mn:00008093
.text$mn:00008093 _text$mn        ends
.text$mn:00008093
.text$mn:00008094 ; ===========================================================================
.text$mn:00008094
.text$mn:00008094 ; Segment type: Pure code
.text$mn:00008094 ; Segment permissions: Read/Execute
.text$mn:00008094 _text$mn        segment para public 'CODE' use32
.text$mn:00008094                 assume cs:_text$mn
.text$mn:00008094                 ;org 8094h
.text$mn:00008094 ; COMDAT (pick any)
.text$mn:00008094                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008094
.text$mn:00008094 ; =============== S U B R O U T I N E =======================================
.text$mn:00008094
.text$mn:00008094 ; Attributes: bp-based frame
.text$mn:00008094
.text$mn:00008094 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:00008094                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:00008094 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:00008094                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:00008094                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::compare(char const *)+21p
.text$mn:00008094
.text$mn:00008094 var_4           = dword ptr -4
.text$mn:00008094 Str             = dword ptr  8
.text$mn:00008094
.text$mn:00008094                 push    ebp
.text$mn:00008095                 mov     ebp, esp
.text$mn:00008097                 push    ecx
.text$mn:00008098                 mov     eax, [ebp+Str]
.text$mn:0000809B                 movsx   ecx, byte ptr [eax]
.text$mn:0000809E                 test    ecx, ecx
.text$mn:000080A0                 jnz     short loc_80AB
.text$mn:000080A2                 mov     [ebp+var_4], 0
.text$mn:000080A9                 jmp     short loc_80BA
.text$mn:000080AB ; ---------------------------------------------------------------------------
.text$mn:000080AB
.text$mn:000080AB loc_80AB:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:000080AB                 mov     edx, [ebp+Str]
.text$mn:000080AE                 push    edx             ; Str
.text$mn:000080AF                 call    _strlen
.text$mn:000080B4                 add     esp, 4
.text$mn:000080B7                 mov     [ebp+var_4], eax
.text$mn:000080BA
.text$mn:000080BA loc_80BA:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:000080BA                 mov     eax, [ebp+var_4]
.text$mn:000080BD                 mov     esp, ebp
.text$mn:000080BF                 pop     ebp
.text$mn:000080C0                 retn
.text$mn:000080C0 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:000080C0
.text$mn:000080C0 ; ---------------------------------------------------------------------------
.text$mn:000080C1                 align 4
.text$mn:000080C1 _text$mn        ends
.text$mn:000080C1
.text$mn:000080C4 ; ===========================================================================
.text$mn:000080C4
.text$mn:000080C4 ; Segment type: Pure code
.text$mn:000080C4 ; Segment permissions: Read/Execute
.text$mn:000080C4 _text$mn        segment para public 'CODE' use32
.text$mn:000080C4                 assume cs:_text$mn
.text$mn:000080C4                 ;org 80C4h
.text$mn:000080C4 ; COMDAT (pick any)
.text$mn:000080C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080C4
.text$mn:000080C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000080C4
.text$mn:000080C4 ; Attributes: bp-based frame
.text$mn:000080C4
.text$mn:000080C4 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:000080C4                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:000080C4 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:000080C4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p
.text$mn:000080C4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)+21p
.text$mn:000080C4
.text$mn:000080C4 var_4           = dword ptr -4
.text$mn:000080C4 Str             = dword ptr  8
.text$mn:000080C4
.text$mn:000080C4                 push    ebp
.text$mn:000080C5                 mov     ebp, esp
.text$mn:000080C7                 push    ecx
.text$mn:000080C8                 mov     eax, [ebp+Str]
.text$mn:000080CB                 movzx   ecx, word ptr [eax]
.text$mn:000080CE                 test    ecx, ecx
.text$mn:000080D0                 jnz     short loc_80DB
.text$mn:000080D2                 mov     [ebp+var_4], 0
.text$mn:000080D9                 jmp     short loc_80EA
.text$mn:000080DB ; ---------------------------------------------------------------------------
.text$mn:000080DB
.text$mn:000080DB loc_80DB:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:000080DB                 mov     edx, [ebp+Str]
.text$mn:000080DE                 push    edx             ; Str
.text$mn:000080DF                 call    _wcslen
.text$mn:000080E4                 add     esp, 4
.text$mn:000080E7                 mov     [ebp+var_4], eax
.text$mn:000080EA
.text$mn:000080EA loc_80EA:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:000080EA                 mov     eax, [ebp+var_4]
.text$mn:000080ED                 mov     esp, ebp
.text$mn:000080EF                 pop     ebp
.text$mn:000080F0                 retn
.text$mn:000080F0 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:000080F0
.text$mn:000080F0 ; ---------------------------------------------------------------------------
.text$mn:000080F1                 align 4
.text$mn:000080F1 _text$mn        ends
.text$mn:000080F1
.text$mn:000080F4 ; ===========================================================================
.text$mn:000080F4
.text$mn:000080F4 ; Segment type: Pure code
.text$mn:000080F4 ; Segment permissions: Read/Execute
.text$mn:000080F4 _text$mn        segment para public 'CODE' use32
.text$mn:000080F4                 assume cs:_text$mn
.text$mn:000080F4                 ;org 80F4h
.text$mn:000080F4 ; COMDAT (pick any)
.text$mn:000080F4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080F4
.text$mn:000080F4 ; =============== S U B R O U T I N E =======================================
.text$mn:000080F4
.text$mn:000080F4 ; Attributes: bp-based frame
.text$mn:000080F4
.text$mn:000080F4 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:000080F4                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:000080F4 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:000080F4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:000080F4
.text$mn:000080F4 var_4           = dword ptr -4
.text$mn:000080F4
.text$mn:000080F4                 push    ebp
.text$mn:000080F5                 mov     ebp, esp
.text$mn:000080F7                 push    ecx
.text$mn:000080F8                 mov     [ebp+var_4], ecx
.text$mn:000080FB                 mov     eax, [ebp+var_4]
.text$mn:000080FE                 push    eax
.text$mn:000080FF                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00008104                 add     esp, 4
.text$mn:00008107                 mov     esp, ebp
.text$mn:00008109                 pop     ebp
.text$mn:0000810A                 retn
.text$mn:0000810A ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:0000810A
.text$mn:0000810A ; ---------------------------------------------------------------------------
.text$mn:0000810B                 align 4
.text$mn:0000810B _text$mn        ends
.text$mn:0000810B
.text$mn:0000810C ; ===========================================================================
.text$mn:0000810C
.text$mn:0000810C ; Segment type: Pure code
.text$mn:0000810C ; Segment permissions: Read/Execute
.text$mn:0000810C _text$mn        segment para public 'CODE' use32
.text$mn:0000810C                 assume cs:_text$mn
.text$mn:0000810C                 ;org 810Ch
.text$mn:0000810C ; COMDAT (pick any)
.text$mn:0000810C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000810C
.text$mn:0000810C ; =============== S U B R O U T I N E =======================================
.text$mn:0000810C
.text$mn:0000810C ; Attributes: bp-based frame
.text$mn:0000810C
.text$mn:0000810C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::max_size(void)const
.text$mn:0000810C                 public ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QBEIXZ
.text$mn:0000810C ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QBEIXZ proc near
.text$mn:0000810C                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::max_size(void)+17p
.text$mn:0000810C
.text$mn:0000810C var_4           = dword ptr -4
.text$mn:0000810C
.text$mn:0000810C                 push    ebp
.text$mn:0000810D                 mov     ebp, esp
.text$mn:0000810F                 push    ecx
.text$mn:00008110                 mov     [ebp+var_4], ecx
.text$mn:00008113                 mov     eax, [ebp+var_4]
.text$mn:00008116                 push    eax
.text$mn:00008117                 call    ?max_size@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::max_size(std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)
.text$mn:0000811C                 add     esp, 4
.text$mn:0000811F                 mov     esp, ebp
.text$mn:00008121                 pop     ebp
.text$mn:00008122                 retn
.text$mn:00008122 ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QBEIXZ endp
.text$mn:00008122
.text$mn:00008122 ; ---------------------------------------------------------------------------
.text$mn:00008123                 align 4
.text$mn:00008123 _text$mn        ends
.text$mn:00008123
.text$mn:00008124 ; ===========================================================================
.text$mn:00008124
.text$mn:00008124 ; Segment type: Pure code
.text$mn:00008124 ; Segment permissions: Read/Execute
.text$mn:00008124 _text$mn        segment para public 'CODE' use32
.text$mn:00008124                 assume cs:_text$mn
.text$mn:00008124                 ;org 8124h
.text$mn:00008124 ; COMDAT (pick any)
.text$mn:00008124                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008124
.text$mn:00008124 ; =============== S U B R O U T I N E =======================================
.text$mn:00008124
.text$mn:00008124 ; Attributes: bp-based frame
.text$mn:00008124
.text$mn:00008124 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:00008124                 public ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ
.text$mn:00008124 ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ proc near
.text$mn:00008124                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+17p
.text$mn:00008124
.text$mn:00008124 var_4           = dword ptr -4
.text$mn:00008124
.text$mn:00008124                 push    ebp
.text$mn:00008125                 mov     ebp, esp
.text$mn:00008127                 push    ecx
.text$mn:00008128                 mov     [ebp+var_4], ecx
.text$mn:0000812B                 mov     eax, [ebp+var_4]
.text$mn:0000812E                 push    eax
.text$mn:0000812F                 call    ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)
.text$mn:00008134                 add     esp, 4
.text$mn:00008137                 mov     esp, ebp
.text$mn:00008139                 pop     ebp
.text$mn:0000813A                 retn
.text$mn:0000813A ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ endp
.text$mn:0000813A
.text$mn:0000813A ; ---------------------------------------------------------------------------
.text$mn:0000813B                 align 4
.text$mn:0000813B _text$mn        ends
.text$mn:0000813B
.text$mn:0000813C ; ===========================================================================
.text$mn:0000813C
.text$mn:0000813C ; Segment type: Pure code
.text$mn:0000813C ; Segment permissions: Read/Execute
.text$mn:0000813C _text$mn        segment para public 'CODE' use32
.text$mn:0000813C                 assume cs:_text$mn
.text$mn:0000813C                 ;org 813Ch
.text$mn:0000813C ; COMDAT (pick any)
.text$mn:0000813C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000813C
.text$mn:0000813C ; =============== S U B R O U T I N E =======================================
.text$mn:0000813C
.text$mn:0000813C ; Attributes: bp-based frame
.text$mn:0000813C
.text$mn:0000813C ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:0000813C                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:0000813C ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:0000813C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:0000813C
.text$mn:0000813C var_4           = dword ptr -4
.text$mn:0000813C
.text$mn:0000813C                 push    ebp
.text$mn:0000813D                 mov     ebp, esp
.text$mn:0000813F                 push    ecx
.text$mn:00008140                 mov     [ebp+var_4], ecx
.text$mn:00008143                 mov     eax, [ebp+var_4]
.text$mn:00008146                 push    eax
.text$mn:00008147                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:0000814C                 add     esp, 4
.text$mn:0000814F                 mov     esp, ebp
.text$mn:00008151                 pop     ebp
.text$mn:00008152                 retn
.text$mn:00008152 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:00008152
.text$mn:00008152 ; ---------------------------------------------------------------------------
.text$mn:00008153                 align 4
.text$mn:00008153 _text$mn        ends
.text$mn:00008153
.text$mn:00008154 ; ===========================================================================
.text$mn:00008154
.text$mn:00008154 ; Segment type: Pure code
.text$mn:00008154 ; Segment permissions: Read/Execute
.text$mn:00008154 _text$mn        segment para public 'CODE' use32
.text$mn:00008154                 assume cs:_text$mn
.text$mn:00008154                 ;org 8154h
.text$mn:00008154 ; COMDAT (pick any)
.text$mn:00008154                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008154
.text$mn:00008154 ; =============== S U B R O U T I N E =======================================
.text$mn:00008154
.text$mn:00008154 ; Attributes: bp-based frame
.text$mn:00008154
.text$mn:00008154 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:00008154                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:00008154 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:00008154                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:00008154
.text$mn:00008154 var_4           = dword ptr -4
.text$mn:00008154
.text$mn:00008154                 push    ebp
.text$mn:00008155                 mov     ebp, esp
.text$mn:00008157                 push    ecx
.text$mn:00008158                 mov     [ebp+var_4], ecx
.text$mn:0000815B                 or      eax, 0FFFFFFFFh
.text$mn:0000815E                 mov     esp, ebp
.text$mn:00008160                 pop     ebp
.text$mn:00008161                 retn
.text$mn:00008161 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00008161
.text$mn:00008161 ; ---------------------------------------------------------------------------
.text$mn:00008162                 align 4
.text$mn:00008162 _text$mn        ends
.text$mn:00008162
.text$mn:00008164 ; ===========================================================================
.text$mn:00008164
.text$mn:00008164 ; Segment type: Pure code
.text$mn:00008164 ; Segment permissions: Read/Execute
.text$mn:00008164 _text$mn        segment para public 'CODE' use32
.text$mn:00008164                 assume cs:_text$mn
.text$mn:00008164                 ;org 8164h
.text$mn:00008164 ; COMDAT (pick any)
.text$mn:00008164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008164
.text$mn:00008164 ; =============== S U B R O U T I N E =======================================
.text$mn:00008164
.text$mn:00008164 ; Attributes: bp-based frame
.text$mn:00008164
.text$mn:00008164 ; public: unsigned int __thiscall std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:00008164                 public ?max_size@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QBEIXZ
.text$mn:00008164 ?max_size@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QBEIXZ proc near
.text$mn:00008164                                         ; CODE XREF: std::allocator_traits<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::max_size(std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>> const &)+6p
.text$mn:00008164
.text$mn:00008164 var_4           = dword ptr -4
.text$mn:00008164
.text$mn:00008164                 push    ebp
.text$mn:00008165                 mov     ebp, esp
.text$mn:00008167                 push    ecx
.text$mn:00008168                 mov     [ebp+var_4], ecx
.text$mn:0000816B                 mov     eax, 4924924h
.text$mn:00008170                 mov     esp, ebp
.text$mn:00008172                 pop     ebp
.text$mn:00008173                 retn
.text$mn:00008173 ?max_size@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QBEIXZ endp
.text$mn:00008173
.text$mn:00008173 _text$mn        ends
.text$mn:00008173
.text$mn:00008174 ; ===========================================================================
.text$mn:00008174
.text$mn:00008174 ; Segment type: Pure code
.text$mn:00008174 ; Segment permissions: Read/Execute
.text$mn:00008174 _text$mn        segment para public 'CODE' use32
.text$mn:00008174                 assume cs:_text$mn
.text$mn:00008174                 ;org 8174h
.text$mn:00008174 ; COMDAT (pick any)
.text$mn:00008174                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008174
.text$mn:00008174 ; =============== S U B R O U T I N E =======================================
.text$mn:00008174
.text$mn:00008174 ; Attributes: bp-based frame
.text$mn:00008174
.text$mn:00008174 ; public: unsigned int __thiscall std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>::max_size(void)const
.text$mn:00008174                 public ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ
.text$mn:00008174 ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ proc near
.text$mn:00008174                                         ; CODE XREF: std::allocator_traits<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const &)+6p
.text$mn:00008174
.text$mn:00008174 var_4           = dword ptr -4
.text$mn:00008174
.text$mn:00008174                 push    ebp
.text$mn:00008175                 mov     ebp, esp
.text$mn:00008177                 push    ecx
.text$mn:00008178                 mov     [ebp+var_4], ecx
.text$mn:0000817B                 mov     eax, 9249249h
.text$mn:00008180                 mov     esp, ebp
.text$mn:00008182                 pop     ebp
.text$mn:00008183                 retn
.text$mn:00008183 ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ endp
.text$mn:00008183
.text$mn:00008183 _text$mn        ends
.text$mn:00008183
.text$mn:00008184 ; ===========================================================================
.text$mn:00008184
.text$mn:00008184 ; Segment type: Pure code
.text$mn:00008184 ; Segment permissions: Read/Execute
.text$mn:00008184 _text$mn        segment para public 'CODE' use32
.text$mn:00008184                 assume cs:_text$mn
.text$mn:00008184                 ;org 8184h
.text$mn:00008184 ; COMDAT (pick any)
.text$mn:00008184                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008184
.text$mn:00008184 ; =============== S U B R O U T I N E =======================================
.text$mn:00008184
.text$mn:00008184 ; Attributes: bp-based frame
.text$mn:00008184
.text$mn:00008184 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:00008184                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:00008184 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:00008184                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:00008184
.text$mn:00008184 var_4           = dword ptr -4
.text$mn:00008184
.text$mn:00008184                 push    ebp
.text$mn:00008185                 mov     ebp, esp
.text$mn:00008187                 push    ecx
.text$mn:00008188                 mov     [ebp+var_4], ecx
.text$mn:0000818B                 mov     eax, 7FFFFFFFh
.text$mn:00008190                 mov     esp, ebp
.text$mn:00008192                 pop     ebp
.text$mn:00008193                 retn
.text$mn:00008193 ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:00008193
.text$mn:00008193 _text$mn        ends
.text$mn:00008193
.text$mn:00008194 ; ===========================================================================
.text$mn:00008194
.text$mn:00008194 ; Segment type: Pure code
.text$mn:00008194 ; Segment permissions: Read/Execute
.text$mn:00008194 _text$mn        segment para public 'CODE' use32
.text$mn:00008194                 assume cs:_text$mn
.text$mn:00008194                 ;org 8194h
.text$mn:00008194 ; COMDAT (pick any)
.text$mn:00008194                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008194
.text$mn:00008194 ; =============== S U B R O U T I N E =======================================
.text$mn:00008194
.text$mn:00008194 ; Attributes: bp-based frame
.text$mn:00008194
.text$mn:00008194 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:00008194                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:00008194 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:00008194                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:00008194
.text$mn:00008194 arg_0           = dword ptr  8
.text$mn:00008194
.text$mn:00008194                 push    ebp
.text$mn:00008195                 mov     ebp, esp
.text$mn:00008197                 mov     ecx, [ebp+arg_0]
.text$mn:0000819A                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:0000819F                 pop     ebp
.text$mn:000081A0                 retn
.text$mn:000081A0 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:000081A0
.text$mn:000081A0 ; ---------------------------------------------------------------------------
.text$mn:000081A1                 align 4
.text$mn:000081A1 _text$mn        ends
.text$mn:000081A1
.text$mn:000081A4 ; ===========================================================================
.text$mn:000081A4
.text$mn:000081A4 ; Segment type: Pure code
.text$mn:000081A4 ; Segment permissions: Read/Execute
.text$mn:000081A4 _text$mn        segment para public 'CODE' use32
.text$mn:000081A4                 assume cs:_text$mn
.text$mn:000081A4                 ;org 81A4h
.text$mn:000081A4 ; COMDAT (pick any)
.text$mn:000081A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081A4
.text$mn:000081A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081A4
.text$mn:000081A4 ; Attributes: bp-based frame
.text$mn:000081A4
.text$mn:000081A4 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::max_size(class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> const &)
.text$mn:000081A4                 public ?max_size@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@Z
.text$mn:000081A4 ?max_size@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@Z proc near
.text$mn:000081A4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::max_size(void)+Bp
.text$mn:000081A4
.text$mn:000081A4 arg_0           = dword ptr  8
.text$mn:000081A4
.text$mn:000081A4                 push    ebp
.text$mn:000081A5                 mov     ebp, esp
.text$mn:000081A7                 mov     ecx, [ebp+arg_0]
.text$mn:000081AA                 call    ?max_size@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QBEIXZ ; std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:000081AF                 pop     ebp
.text$mn:000081B0                 retn
.text$mn:000081B0 ?max_size@?$allocator_traits@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@SAIABV?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@Z endp
.text$mn:000081B0
.text$mn:000081B0 ; ---------------------------------------------------------------------------
.text$mn:000081B1                 align 4
.text$mn:000081B1 _text$mn        ends
.text$mn:000081B1
.text$mn:000081B4 ; ===========================================================================
.text$mn:000081B4
.text$mn:000081B4 ; Segment type: Pure code
.text$mn:000081B4 ; Segment permissions: Read/Execute
.text$mn:000081B4 _text$mn        segment para public 'CODE' use32
.text$mn:000081B4                 assume cs:_text$mn
.text$mn:000081B4                 ;org 81B4h
.text$mn:000081B4 ; COMDAT (pick any)
.text$mn:000081B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081B4
.text$mn:000081B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081B4
.text$mn:000081B4 ; Attributes: bp-based frame
.text$mn:000081B4
.text$mn:000081B4 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> const &)
.text$mn:000081B4                 public ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z
.text$mn:000081B4 ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z proc near
.text$mn:000081B4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)+Bp
.text$mn:000081B4
.text$mn:000081B4 arg_0           = dword ptr  8
.text$mn:000081B4
.text$mn:000081B4                 push    ebp
.text$mn:000081B5                 mov     ebp, esp
.text$mn:000081B7                 mov     ecx, [ebp+arg_0]
.text$mn:000081BA                 call    ?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ ; std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>::max_size(void)
.text$mn:000081BF                 pop     ebp
.text$mn:000081C0                 retn
.text$mn:000081C0 ?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z endp
.text$mn:000081C0
.text$mn:000081C0 ; ---------------------------------------------------------------------------
.text$mn:000081C1                 align 4
.text$mn:000081C1 _text$mn        ends
.text$mn:000081C1
.text$mn:000081C4 ; ===========================================================================
.text$mn:000081C4
.text$mn:000081C4 ; Segment type: Pure code
.text$mn:000081C4 ; Segment permissions: Read/Execute
.text$mn:000081C4 _text$mn        segment para public 'CODE' use32
.text$mn:000081C4                 assume cs:_text$mn
.text$mn:000081C4                 ;org 81C4h
.text$mn:000081C4 ; COMDAT (pick any)
.text$mn:000081C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081C4
.text$mn:000081C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081C4
.text$mn:000081C4 ; Attributes: bp-based frame
.text$mn:000081C4
.text$mn:000081C4 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:000081C4                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:000081C4 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:000081C4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:000081C4
.text$mn:000081C4 arg_0           = dword ptr  8
.text$mn:000081C4
.text$mn:000081C4                 push    ebp
.text$mn:000081C5                 mov     ebp, esp
.text$mn:000081C7                 mov     ecx, [ebp+arg_0]
.text$mn:000081CA                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:000081CF                 pop     ebp
.text$mn:000081D0                 retn
.text$mn:000081D0 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:000081D0
.text$mn:000081D0 ; ---------------------------------------------------------------------------
.text$mn:000081D1                 align 4
.text$mn:000081D1 _text$mn        ends
.text$mn:000081D1
.text$mn:000081D4 ; ===========================================================================
.text$mn:000081D4
.text$mn:000081D4 ; Segment type: Pure code
.text$mn:000081D4 ; Segment permissions: Read/Execute
.text$mn:000081D4 _text$mn        segment para public 'CODE' use32
.text$mn:000081D4                 assume cs:_text$mn
.text$mn:000081D4                 ;org 81D4h
.text$mn:000081D4 ; COMDAT (pick any)
.text$mn:000081D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081D4
.text$mn:000081D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081D4
.text$mn:000081D4 ; Attributes: bp-based frame
.text$mn:000081D4
.text$mn:000081D4 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:000081D4                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:000081D4 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:000081D4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:000081D4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:000081D4
.text$mn:000081D4 var_10          = dword ptr -10h
.text$mn:000081D4 var_C           = dword ptr -0Ch
.text$mn:000081D4 var_8           = dword ptr -8
.text$mn:000081D4 var_1           = byte ptr -1
.text$mn:000081D4
.text$mn:000081D4                 push    ebp
.text$mn:000081D5                 mov     ebp, esp
.text$mn:000081D7                 sub     esp, 10h
.text$mn:000081DA                 mov     [ebp+var_10], ecx
.text$mn:000081DD                 lea     eax, [ebp+var_1]
.text$mn:000081E0                 push    eax
.text$mn:000081E1                 mov     ecx, [ebp+var_10]
.text$mn:000081E4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000081E9                 mov     ecx, eax
.text$mn:000081EB                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:000081F0                 mov     [ebp+var_8], eax
.text$mn:000081F3                 cmp     [ebp+var_8], 1
.text$mn:000081F7                 ja      short loc_8202
.text$mn:000081F9                 mov     [ebp+var_C], 1
.text$mn:00008200                 jmp     short loc_820B
.text$mn:00008202 ; ---------------------------------------------------------------------------
.text$mn:00008202
.text$mn:00008202 loc_8202:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:00008202                 mov     ecx, [ebp+var_8]
.text$mn:00008205                 sub     ecx, 1
.text$mn:00008208                 mov     [ebp+var_C], ecx
.text$mn:0000820B
.text$mn:0000820B loc_820B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:0000820B                 mov     eax, [ebp+var_C]
.text$mn:0000820E                 mov     esp, ebp
.text$mn:00008210                 pop     ebp
.text$mn:00008211                 retn
.text$mn:00008211 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00008211
.text$mn:00008211 ; ---------------------------------------------------------------------------
.text$mn:00008212                 align 4
.text$mn:00008212 _text$mn        ends
.text$mn:00008212
.text$mn:00008214 ; ===========================================================================
.text$mn:00008214
.text$mn:00008214 ; Segment type: Pure code
.text$mn:00008214 ; Segment permissions: Read/Execute
.text$mn:00008214 _text$mn        segment para public 'CODE' use32
.text$mn:00008214                 assume cs:_text$mn
.text$mn:00008214                 ;org 8214h
.text$mn:00008214 ; COMDAT (pick any)
.text$mn:00008214                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008214
.text$mn:00008214 ; =============== S U B R O U T I N E =======================================
.text$mn:00008214
.text$mn:00008214 ; Attributes: bp-based frame
.text$mn:00008214
.text$mn:00008214 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00008214                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00008214 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00008214                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:00008214                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:00008214
.text$mn:00008214 var_10          = dword ptr -10h
.text$mn:00008214 var_C           = dword ptr -0Ch
.text$mn:00008214 var_8           = dword ptr -8
.text$mn:00008214 var_1           = byte ptr -1
.text$mn:00008214
.text$mn:00008214                 push    ebp
.text$mn:00008215                 mov     ebp, esp
.text$mn:00008217                 sub     esp, 10h
.text$mn:0000821A                 mov     [ebp+var_10], ecx
.text$mn:0000821D                 lea     eax, [ebp+var_1]
.text$mn:00008220                 push    eax
.text$mn:00008221                 mov     ecx, [ebp+var_10]
.text$mn:00008224                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008229                 mov     ecx, eax
.text$mn:0000822B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:00008230                 mov     [ebp+var_8], eax
.text$mn:00008233                 cmp     [ebp+var_8], 1
.text$mn:00008237                 ja      short loc_8242
.text$mn:00008239                 mov     [ebp+var_C], 1
.text$mn:00008240                 jmp     short loc_824B
.text$mn:00008242 ; ---------------------------------------------------------------------------
.text$mn:00008242
.text$mn:00008242 loc_8242:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:00008242                 mov     ecx, [ebp+var_8]
.text$mn:00008245                 sub     ecx, 1
.text$mn:00008248                 mov     [ebp+var_C], ecx
.text$mn:0000824B
.text$mn:0000824B loc_824B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:0000824B                 mov     eax, [ebp+var_C]
.text$mn:0000824E                 mov     esp, ebp
.text$mn:00008250                 pop     ebp
.text$mn:00008251                 retn
.text$mn:00008251 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00008251
.text$mn:00008251 ; ---------------------------------------------------------------------------
.text$mn:00008252                 align 4
.text$mn:00008252 _text$mn        ends
.text$mn:00008252
.text$mn:00008254 ; ===========================================================================
.text$mn:00008254
.text$mn:00008254 ; Segment type: Pure code
.text$mn:00008254 ; Segment permissions: Read/Execute
.text$mn:00008254 _text$mn        segment para public 'CODE' use32
.text$mn:00008254                 assume cs:_text$mn
.text$mn:00008254                 ;org 8254h
.text$mn:00008254 ; COMDAT (pick any)
.text$mn:00008254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008254
.text$mn:00008254 ; =============== S U B R O U T I N E =======================================
.text$mn:00008254
.text$mn:00008254 ; Attributes: bp-based frame
.text$mn:00008254
.text$mn:00008254 ; public: unsigned int __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::max_size(void)const
.text$mn:00008254                 public ?max_size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ
.text$mn:00008254 ?max_size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ proc near
.text$mn:00008254                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Grow_to(uint)+17p
.text$mn:00008254                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)+18p
.text$mn:00008254
.text$mn:00008254 var_8           = dword ptr -8
.text$mn:00008254 var_1           = byte ptr -1
.text$mn:00008254
.text$mn:00008254                 push    ebp
.text$mn:00008255                 mov     ebp, esp
.text$mn:00008257                 sub     esp, 8
.text$mn:0000825A                 mov     [ebp+var_8], ecx
.text$mn:0000825D                 lea     eax, [ebp+var_1]
.text$mn:00008260                 push    eax
.text$mn:00008261                 mov     ecx, [ebp+var_8]
.text$mn:00008264                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)
.text$mn:00008269                 mov     ecx, eax
.text$mn:0000826B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::max_size(void)
.text$mn:00008270                 mov     esp, ebp
.text$mn:00008272                 pop     ebp
.text$mn:00008273                 retn
.text$mn:00008273 ?max_size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ endp
.text$mn:00008273
.text$mn:00008273 _text$mn        ends
.text$mn:00008273
.text$mn:00008274 ; ===========================================================================
.text$mn:00008274
.text$mn:00008274 ; Segment type: Pure code
.text$mn:00008274 ; Segment permissions: Read/Execute
.text$mn:00008274 _text$mn        segment para public 'CODE' use32
.text$mn:00008274                 assume cs:_text$mn
.text$mn:00008274                 ;org 8274h
.text$mn:00008274 ; COMDAT (pick any)
.text$mn:00008274                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008274
.text$mn:00008274 ; =============== S U B R O U T I N E =======================================
.text$mn:00008274
.text$mn:00008274 ; Attributes: bp-based frame
.text$mn:00008274
.text$mn:00008274 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::max_size(void)const
.text$mn:00008274                 public ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:00008274 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:00008274                                         ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Grow_to(uint)+17p
.text$mn:00008274                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)+18p
.text$mn:00008274
.text$mn:00008274 var_8           = dword ptr -8
.text$mn:00008274 var_1           = byte ptr -1
.text$mn:00008274
.text$mn:00008274                 push    ebp
.text$mn:00008275                 mov     ebp, esp
.text$mn:00008277                 sub     esp, 8
.text$mn:0000827A                 mov     [ebp+var_8], ecx
.text$mn:0000827D                 lea     eax, [ebp+var_1]
.text$mn:00008280                 push    eax
.text$mn:00008281                 mov     ecx, [ebp+var_8]
.text$mn:00008284                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00008289                 mov     ecx, eax
.text$mn:0000828B                 call    ?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::max_size(void)
.text$mn:00008290                 mov     esp, ebp
.text$mn:00008292                 pop     ebp
.text$mn:00008293                 retn
.text$mn:00008293 ?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:00008293
.text$mn:00008293 _text$mn        ends
.text$mn:00008293
.text$mn:00008294 ; ===========================================================================
.text$mn:00008294
.text$mn:00008294 ; Segment type: Pure code
.text$mn:00008294 ; Segment permissions: Read/Execute
.text$mn:00008294 _text$mn        segment para public 'CODE' use32
.text$mn:00008294                 assume cs:_text$mn
.text$mn:00008294                 ;org 8294h
.text$mn:00008294 ; COMDAT (pick any)
.text$mn:00008294                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008294
.text$mn:00008294 ; =============== S U B R O U T I N E =======================================
.text$mn:00008294
.text$mn:00008294 ; Attributes: bp-based frame
.text$mn:00008294
.text$mn:00008294 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:00008294                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00008294 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00008294                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:00008294                                         ; DATA XREF: .rdata:0000A438o
.text$mn:00008294
.text$mn:00008294 var_1C          = dword ptr -1Ch
.text$mn:00008294 var_18          = dword ptr -18h
.text$mn:00008294 Str             = dword ptr -14h
.text$mn:00008294 var_10          = dword ptr -10h
.text$mn:00008294 var_C           = dword ptr -0Ch
.text$mn:00008294 var_4           = dword ptr -4
.text$mn:00008294 arg_0           = dword ptr  8
.text$mn:00008294 arg_4           = dword ptr  0Ch
.text$mn:00008294
.text$mn:00008294                 push    ebp
.text$mn:00008295                 mov     ebp, esp
.text$mn:00008297                 push    0FFFFFFFFh
.text$mn:00008299                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000829E                 mov     eax, large fs:0
.text$mn:000082A4                 push    eax
.text$mn:000082A5                 sub     esp, 10h
.text$mn:000082A8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000082AD                 xor     eax, ebp
.text$mn:000082AF                 push    eax
.text$mn:000082B0                 lea     eax, [ebp+var_C]
.text$mn:000082B3                 mov     large fs:0, eax
.text$mn:000082B9                 mov     [ebp+var_1C], ecx
.text$mn:000082BC                 mov     [ebp+var_18], 0
.text$mn:000082C3                 mov     eax, [ebp+arg_4]
.text$mn:000082C6                 push    eax             ; int
.text$mn:000082C7                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:000082CC                 add     esp, 4
.text$mn:000082CF                 mov     [ebp+var_10], eax
.text$mn:000082D2                 cmp     [ebp+var_10], 0
.text$mn:000082D6                 jz      short loc_82E0
.text$mn:000082D8                 mov     ecx, [ebp+var_10]
.text$mn:000082DB                 mov     [ebp+Str], ecx
.text$mn:000082DE                 jmp     short loc_82E7
.text$mn:000082E0 ; ---------------------------------------------------------------------------
.text$mn:000082E0
.text$mn:000082E0 loc_82E0:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:000082E0                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:000082E7
.text$mn:000082E7 loc_82E7:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:000082E7                 mov     edx, [ebp+Str]
.text$mn:000082EA                 push    edx             ; Str
.text$mn:000082EB                 mov     ecx, [ebp+arg_0]
.text$mn:000082EE                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:000082F3                 mov     [ebp+var_4], 0
.text$mn:000082FA                 mov     eax, [ebp+var_18]
.text$mn:000082FD                 or      eax, 1
.text$mn:00008300                 mov     [ebp+var_18], eax
.text$mn:00008303                 mov     eax, [ebp+arg_0]
.text$mn:00008306                 mov     ecx, [ebp+var_C]
.text$mn:00008309                 mov     large fs:0, ecx
.text$mn:00008310                 pop     ecx
.text$mn:00008311                 mov     esp, ebp
.text$mn:00008313                 pop     ebp
.text$mn:00008314                 retn    8
.text$mn:00008314 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00008314
.text$mn:00008314 ; ---------------------------------------------------------------------------
.text$mn:00008317                 align 4
.text$mn:00008317 _text$mn        ends
.text$mn:00008317
.text$x:00008318 ; ===========================================================================
.text$x:00008318
.text$x:00008318 ; Segment type: Pure code
.text$x:00008318 ; Segment permissions: Read/Execute
.text$x:00008318 _text$x         segment para public 'CODE' use32
.text$x:00008318                 assume cs:_text$x
.text$x:00008318                 ;org 8318h
.text$x:00008318 ; COMDAT (pick associative to section at 8294)
.text$x:00008318                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008318
.text$x:00008318 ; =============== S U B R O U T I N E =======================================
.text$x:00008318
.text$x:00008318
.text$x:00008318 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00008318                                         ; DATA XREF: .xdata$x:000095F0o
.text$x:00008318                 mov     eax, [ebp-18h]
.text$x:0000831B                 and     eax, 1
.text$x:0000831E                 jz      $LN6
.text$x:00008324                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00008328                 mov     ecx, [ebp+8]
.text$x:0000832B                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00008330 ; ---------------------------------------------------------------------------
.text$x:00008330
.text$x:00008330 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00008330                 retn
.text$x:00008330 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00008330
.text$x:00008331
.text$x:00008331 ; =============== S U B R O U T I N E =======================================
.text$x:00008331
.text$x:00008331
.text$x:00008331 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00008331                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:00008331
.text$x:00008331 arg_4           = dword ptr  8
.text$x:00008331
.text$x:00008331                 mov     edx, [esp+arg_4]
.text$x:00008335                 lea     eax, [edx+0Ch]
.text$x:00008338                 mov     ecx, [edx-14h]
.text$x:0000833B                 xor     ecx, eax
.text$x:0000833D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008342                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00008347                 jmp     ___CxxFrameHandler3
.text$x:00008347 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00008347
.text$x:00008347 _text$x         ends
.text$x:00008347
.text$mn:0000834C ; ===========================================================================
.text$mn:0000834C
.text$mn:0000834C ; Segment type: Pure code
.text$mn:0000834C ; Segment permissions: Read/Execute
.text$mn:0000834C _text$mn        segment para public 'CODE' use32
.text$mn:0000834C                 assume cs:_text$mn
.text$mn:0000834C                 ;org 834Ch
.text$mn:0000834C ; COMDAT (pick any)
.text$mn:0000834C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000834C
.text$mn:0000834C ; =============== S U B R O U T I N E =======================================
.text$mn:0000834C
.text$mn:0000834C ; Attributes: bp-based frame
.text$mn:0000834C
.text$mn:0000834C ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:0000834C                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000834C ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:0000834C                                         ; DATA XREF: .rdata:0000A46Co
.text$mn:0000834C
.text$mn:0000834C var_14          = dword ptr -14h
.text$mn:0000834C var_10          = dword ptr -10h
.text$mn:0000834C var_C           = dword ptr -0Ch
.text$mn:0000834C var_4           = dword ptr -4
.text$mn:0000834C arg_0           = dword ptr  8
.text$mn:0000834C arg_4           = dword ptr  0Ch
.text$mn:0000834C
.text$mn:0000834C                 push    ebp
.text$mn:0000834D                 mov     ebp, esp
.text$mn:0000834F                 push    0FFFFFFFFh
.text$mn:00008351                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00008356                 mov     eax, large fs:0
.text$mn:0000835C                 push    eax
.text$mn:0000835D                 sub     esp, 8
.text$mn:00008360                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008365                 xor     eax, ebp
.text$mn:00008367                 push    eax
.text$mn:00008368                 lea     eax, [ebp+var_C]
.text$mn:0000836B                 mov     large fs:0, eax
.text$mn:00008371                 mov     [ebp+var_14], ecx
.text$mn:00008374                 mov     [ebp+var_10], 0
.text$mn:0000837B                 cmp     [ebp+arg_4], 1
.text$mn:0000837F                 jnz     short loc_83A5
.text$mn:00008381                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:00008386                 mov     ecx, [ebp+arg_0]
.text$mn:00008389                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000838E                 mov     [ebp+var_4], 0
.text$mn:00008395                 mov     eax, [ebp+var_10]
.text$mn:00008398                 or      eax, 1
.text$mn:0000839B                 mov     [ebp+var_10], eax
.text$mn:0000839E                 mov     eax, [ebp+arg_0]
.text$mn:000083A1                 jmp     short loc_83C8
.text$mn:000083A3 ; ---------------------------------------------------------------------------
.text$mn:000083A3                 jmp     short loc_83C8
.text$mn:000083A5 ; ---------------------------------------------------------------------------
.text$mn:000083A5
.text$mn:000083A5 loc_83A5:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:000083A5                 mov     ecx, [ebp+arg_4]
.text$mn:000083A8                 push    ecx
.text$mn:000083A9                 mov     edx, [ebp+arg_0]
.text$mn:000083AC                 push    edx
.text$mn:000083AD                 mov     ecx, [ebp+var_14]
.text$mn:000083B0                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:000083B5                 mov     [ebp+var_4], 0
.text$mn:000083BC                 mov     eax, [ebp+var_10]
.text$mn:000083BF                 or      eax, 1
.text$mn:000083C2                 mov     [ebp+var_10], eax
.text$mn:000083C5                 mov     eax, [ebp+arg_0]
.text$mn:000083C8
.text$mn:000083C8 loc_83C8:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:000083C8                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:000083C8                 mov     ecx, [ebp+var_C]
.text$mn:000083CB                 mov     large fs:0, ecx
.text$mn:000083D2                 pop     ecx
.text$mn:000083D3                 mov     esp, ebp
.text$mn:000083D5                 pop     ebp
.text$mn:000083D6                 retn    8
.text$mn:000083D6 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:000083D6
.text$mn:000083D6 ; ---------------------------------------------------------------------------
.text$mn:000083D9                 align 4
.text$mn:000083D9 _text$mn        ends
.text$mn:000083D9
.text$x:000083DC ; ===========================================================================
.text$x:000083DC
.text$x:000083DC ; Segment type: Pure code
.text$x:000083DC ; Segment permissions: Read/Execute
.text$x:000083DC _text$x         segment para public 'CODE' use32
.text$x:000083DC                 assume cs:_text$x
.text$x:000083DC                 ;org 83DCh
.text$x:000083DC ; COMDAT (pick associative to section at 834C)
.text$x:000083DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000083DC
.text$x:000083DC ; =============== S U B R O U T I N E =======================================
.text$x:000083DC
.text$x:000083DC
.text$x:000083DC __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:000083DC                                         ; DATA XREF: .xdata$x:00009674o
.text$x:000083DC                 mov     eax, [ebp-10h]
.text$x:000083DF                 and     eax, 1
.text$x:000083E2                 jz      $LN6_0
.text$x:000083E8                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:000083EC                 mov     ecx, [ebp+8]
.text$x:000083EF                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000083F4 ; ---------------------------------------------------------------------------
.text$x:000083F4
.text$x:000083F4 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:000083F4                 retn
.text$x:000083F4 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:000083F4
.text$x:000083F5
.text$x:000083F5 ; =============== S U B R O U T I N E =======================================
.text$x:000083F5
.text$x:000083F5
.text$x:000083F5 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:000083F5                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:000083F5
.text$x:000083F5 arg_4           = dword ptr  8
.text$x:000083F5
.text$x:000083F5                 mov     edx, [esp+arg_4]
.text$x:000083F9                 lea     eax, [edx+0Ch]
.text$x:000083FC                 mov     ecx, [edx-0Ch]
.text$x:000083FF                 xor     ecx, eax
.text$x:00008401                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008406                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000840B                 jmp     ___CxxFrameHandler3
.text$x:0000840B __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000840B
.text$x:0000840B _text$x         ends
.text$x:0000840B
.text$mn:00008410 ; ===========================================================================
.text$mn:00008410
.text$mn:00008410 ; Segment type: Pure code
.text$mn:00008410 ; Segment permissions: Read/Execute
.text$mn:00008410 _text$mn        segment para public 'CODE' use32
.text$mn:00008410                 assume cs:_text$mn
.text$mn:00008410                 ;org 8410h
.text$mn:00008410 ; COMDAT (pick any)
.text$mn:00008410                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008410
.text$mn:00008410 ; =============== S U B R O U T I N E =======================================
.text$mn:00008410
.text$mn:00008410 ; Attributes: bp-based frame
.text$mn:00008410
.text$mn:00008410 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00008410                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00008410 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00008410                                         ; DATA XREF: .rdata:0000A4ACo
.text$mn:00008410
.text$mn:00008410 var_1C          = dword ptr -1Ch
.text$mn:00008410 var_18          = dword ptr -18h
.text$mn:00008410 Str             = dword ptr -14h
.text$mn:00008410 var_10          = dword ptr -10h
.text$mn:00008410 var_C           = dword ptr -0Ch
.text$mn:00008410 var_4           = dword ptr -4
.text$mn:00008410 arg_0           = dword ptr  8
.text$mn:00008410 arg_4           = dword ptr  0Ch
.text$mn:00008410
.text$mn:00008410                 push    ebp
.text$mn:00008411                 mov     ebp, esp
.text$mn:00008413                 push    0FFFFFFFFh
.text$mn:00008415                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000841A                 mov     eax, large fs:0
.text$mn:00008420                 push    eax
.text$mn:00008421                 sub     esp, 10h
.text$mn:00008424                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008429                 xor     eax, ebp
.text$mn:0000842B                 push    eax
.text$mn:0000842C                 lea     eax, [ebp+var_C]
.text$mn:0000842F                 mov     large fs:0, eax
.text$mn:00008435                 mov     [ebp+var_1C], ecx
.text$mn:00008438                 mov     [ebp+var_18], 0
.text$mn:0000843F                 mov     eax, [ebp+arg_4]
.text$mn:00008442                 push    eax             ; int
.text$mn:00008443                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:00008448                 add     esp, 4
.text$mn:0000844B                 mov     [ebp+var_10], eax
.text$mn:0000844E                 cmp     [ebp+var_10], 0
.text$mn:00008452                 jz      short loc_845C
.text$mn:00008454                 mov     ecx, [ebp+var_10]
.text$mn:00008457                 mov     [ebp+Str], ecx
.text$mn:0000845A                 jmp     short loc_8463
.text$mn:0000845C ; ---------------------------------------------------------------------------
.text$mn:0000845C
.text$mn:0000845C loc_845C:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:0000845C                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00008463
.text$mn:00008463 loc_8463:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:00008463                 mov     edx, [ebp+Str]
.text$mn:00008466                 push    edx             ; Str
.text$mn:00008467                 mov     ecx, [ebp+arg_0]
.text$mn:0000846A                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:0000846F                 mov     [ebp+var_4], 0
.text$mn:00008476                 mov     eax, [ebp+var_18]
.text$mn:00008479                 or      eax, 1
.text$mn:0000847C                 mov     [ebp+var_18], eax
.text$mn:0000847F                 mov     eax, [ebp+arg_0]
.text$mn:00008482                 mov     ecx, [ebp+var_C]
.text$mn:00008485                 mov     large fs:0, ecx
.text$mn:0000848C                 pop     ecx
.text$mn:0000848D                 mov     esp, ebp
.text$mn:0000848F                 pop     ebp
.text$mn:00008490                 retn    8
.text$mn:00008490 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00008490
.text$mn:00008490 ; ---------------------------------------------------------------------------
.text$mn:00008493                 align 4
.text$mn:00008493 _text$mn        ends
.text$mn:00008493
.text$x:00008494 ; ===========================================================================
.text$x:00008494
.text$x:00008494 ; Segment type: Pure code
.text$x:00008494 ; Segment permissions: Read/Execute
.text$x:00008494 _text$x         segment para public 'CODE' use32
.text$x:00008494                 assume cs:_text$x
.text$x:00008494                 ;org 8494h
.text$x:00008494 ; COMDAT (pick associative to section at 8410)
.text$x:00008494                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008494
.text$x:00008494 ; =============== S U B R O U T I N E =======================================
.text$x:00008494
.text$x:00008494
.text$x:00008494 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00008494                                         ; DATA XREF: .xdata$x:000096F8o
.text$x:00008494                 mov     eax, [ebp-18h]
.text$x:00008497                 and     eax, 1
.text$x:0000849A                 jz      $LN6_1
.text$x:000084A0                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:000084A4                 mov     ecx, [ebp+8]
.text$x:000084A7                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000084AC ; ---------------------------------------------------------------------------
.text$x:000084AC
.text$x:000084AC $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:000084AC                 retn
.text$x:000084AC __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:000084AC
.text$x:000084AD
.text$x:000084AD ; =============== S U B R O U T I N E =======================================
.text$x:000084AD
.text$x:000084AD
.text$x:000084AD __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:000084AD                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:000084AD
.text$x:000084AD arg_4           = dword ptr  8
.text$x:000084AD
.text$x:000084AD                 mov     edx, [esp+arg_4]
.text$x:000084B1                 lea     eax, [edx+0Ch]
.text$x:000084B4                 mov     ecx, [edx-14h]
.text$x:000084B7                 xor     ecx, eax
.text$x:000084B9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000084BE                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:000084C3                 jmp     ___CxxFrameHandler3
.text$x:000084C3 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:000084C3
.text$x:000084C3 _text$x         ends
.text$x:000084C3
.text$mn:000084C8 ; ===========================================================================
.text$mn:000084C8
.text$mn:000084C8 ; Segment type: Pure code
.text$mn:000084C8 ; Segment permissions: Read/Execute
.text$mn:000084C8 _text$mn        segment para public 'CODE' use32
.text$mn:000084C8                 assume cs:_text$mn
.text$mn:000084C8                 ;org 84C8h
.text$mn:000084C8 ; COMDAT (pick any)
.text$mn:000084C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000084C8
.text$mn:000084C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000084C8
.text$mn:000084C8 ; Attributes: bp-based frame
.text$mn:000084C8
.text$mn:000084C8 ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:000084C8                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:000084C8 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:000084C8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Assign_rv(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &&)+2Ap
.text$mn:000084C8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap ...
.text$mn:000084C8
.text$mn:000084C8 var_4           = dword ptr -4
.text$mn:000084C8 Dst             = dword ptr  8
.text$mn:000084C8 Src             = dword ptr  0Ch
.text$mn:000084C8 Size            = dword ptr  10h
.text$mn:000084C8
.text$mn:000084C8                 push    ebp
.text$mn:000084C9                 mov     ebp, esp
.text$mn:000084CB                 push    ecx
.text$mn:000084CC                 cmp     [ebp+Size], 0
.text$mn:000084D0                 jnz     short loc_84DA
.text$mn:000084D2                 mov     eax, [ebp+Dst]
.text$mn:000084D5                 mov     [ebp+var_4], eax
.text$mn:000084D8                 jmp     short loc_84F1
.text$mn:000084DA ; ---------------------------------------------------------------------------
.text$mn:000084DA
.text$mn:000084DA loc_84DA:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:000084DA                 mov     ecx, [ebp+Size]
.text$mn:000084DD                 push    ecx             ; Size
.text$mn:000084DE                 mov     edx, [ebp+Src]
.text$mn:000084E1                 push    edx             ; Src
.text$mn:000084E2                 mov     eax, [ebp+Dst]
.text$mn:000084E5                 push    eax             ; Dst
.text$mn:000084E6                 call    _memmove
.text$mn:000084EB                 add     esp, 0Ch
.text$mn:000084EE                 mov     [ebp+var_4], eax
.text$mn:000084F1
.text$mn:000084F1 loc_84F1:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:000084F1                 mov     eax, [ebp+var_4]
.text$mn:000084F4                 mov     esp, ebp
.text$mn:000084F6                 pop     ebp
.text$mn:000084F7                 retn
.text$mn:000084F7 ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:000084F7
.text$mn:000084F7 _text$mn        ends
.text$mn:000084F7
.text$mn:000084F8 ; ===========================================================================
.text$mn:000084F8
.text$mn:000084F8 ; Segment type: Pure code
.text$mn:000084F8 ; Segment permissions: Read/Execute
.text$mn:000084F8 _text$mn        segment para public 'CODE' use32
.text$mn:000084F8                 assume cs:_text$mn
.text$mn:000084F8                 ;org 84F8h
.text$mn:000084F8 ; COMDAT (pick any)
.text$mn:000084F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000084F8
.text$mn:000084F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000084F8
.text$mn:000084F8 ; Attributes: bp-based frame
.text$mn:000084F8
.text$mn:000084F8 ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:000084F8                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:000084F8 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:000084F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:000084F8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p
.text$mn:000084F8
.text$mn:000084F8 var_4           = dword ptr -4
.text$mn:000084F8 Dst             = dword ptr  8
.text$mn:000084F8 Src             = dword ptr  0Ch
.text$mn:000084F8 arg_8           = dword ptr  10h
.text$mn:000084F8
.text$mn:000084F8                 push    ebp
.text$mn:000084F9                 mov     ebp, esp
.text$mn:000084FB                 push    ecx
.text$mn:000084FC                 cmp     [ebp+arg_8], 0
.text$mn:00008500                 jnz     short loc_850A
.text$mn:00008502                 mov     eax, [ebp+Dst]
.text$mn:00008505                 mov     [ebp+var_4], eax
.text$mn:00008508                 jmp     short loc_8521
.text$mn:0000850A ; ---------------------------------------------------------------------------
.text$mn:0000850A
.text$mn:0000850A loc_850A:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000850A                 mov     ecx, [ebp+arg_8]
.text$mn:0000850D                 push    ecx             ; int
.text$mn:0000850E                 mov     edx, [ebp+Src]
.text$mn:00008511                 push    edx             ; Src
.text$mn:00008512                 mov     eax, [ebp+Dst]
.text$mn:00008515                 push    eax             ; Dst
.text$mn:00008516                 call    _wmemmove
.text$mn:0000851B                 add     esp, 0Ch
.text$mn:0000851E                 mov     [ebp+var_4], eax
.text$mn:00008521
.text$mn:00008521 loc_8521:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00008521                 mov     eax, [ebp+var_4]
.text$mn:00008524                 mov     esp, ebp
.text$mn:00008526                 pop     ebp
.text$mn:00008527                 retn
.text$mn:00008527 ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:00008527
.text$mn:00008527 _text$mn        ends
.text$mn:00008527
.text$mn:00008528 ; ===========================================================================
.text$mn:00008528
.text$mn:00008528 ; Segment type: Pure code
.text$mn:00008528 ; Segment permissions: Read/Execute
.text$mn:00008528 _text$mn        segment para public 'CODE' use32
.text$mn:00008528                 assume cs:_text$mn
.text$mn:00008528                 ;org 8528h
.text$mn:00008528 ; COMDAT (pick any)
.text$mn:00008528                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008528
.text$mn:00008528 ; =============== S U B R O U T I N E =======================================
.text$mn:00008528
.text$mn:00008528 ; Attributes: bp-based frame
.text$mn:00008528
.text$mn:00008528 ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:00008528                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:00008528 ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:00008528                                         ; DATA XREF: .rdata:0000A434o
.text$mn:00008528
.text$mn:00008528 var_4           = dword ptr -4
.text$mn:00008528
.text$mn:00008528                 push    ebp
.text$mn:00008529                 mov     ebp, esp
.text$mn:0000852B                 push    ecx
.text$mn:0000852C                 mov     [ebp+var_4], ecx
.text$mn:0000852F                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:00008534                 mov     esp, ebp
.text$mn:00008536                 pop     ebp
.text$mn:00008537                 retn
.text$mn:00008537 ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:00008537
.text$mn:00008537 _text$mn        ends
.text$mn:00008537
.text$mn:00008538 ; ===========================================================================
.text$mn:00008538
.text$mn:00008538 ; Segment type: Pure code
.text$mn:00008538 ; Segment permissions: Read/Execute
.text$mn:00008538 _text$mn        segment para public 'CODE' use32
.text$mn:00008538                 assume cs:_text$mn
.text$mn:00008538                 ;org 8538h
.text$mn:00008538 ; COMDAT (pick any)
.text$mn:00008538                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008538
.text$mn:00008538 ; =============== S U B R O U T I N E =======================================
.text$mn:00008538
.text$mn:00008538 ; Attributes: bp-based frame
.text$mn:00008538
.text$mn:00008538 ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:00008538                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:00008538 ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:00008538                                         ; DATA XREF: .rdata:0000A468o
.text$mn:00008538
.text$mn:00008538 var_4           = dword ptr -4
.text$mn:00008538
.text$mn:00008538                 push    ebp
.text$mn:00008539                 mov     ebp, esp
.text$mn:0000853B                 push    ecx
.text$mn:0000853C                 mov     [ebp+var_4], ecx
.text$mn:0000853F                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:00008544                 mov     esp, ebp
.text$mn:00008546                 pop     ebp
.text$mn:00008547                 retn
.text$mn:00008547 ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:00008547
.text$mn:00008547 _text$mn        ends
.text$mn:00008547
.text$mn:00008548 ; ===========================================================================
.text$mn:00008548
.text$mn:00008548 ; Segment type: Pure code
.text$mn:00008548 ; Segment permissions: Read/Execute
.text$mn:00008548 _text$mn        segment para public 'CODE' use32
.text$mn:00008548                 assume cs:_text$mn
.text$mn:00008548                 ;org 8548h
.text$mn:00008548 ; COMDAT (pick any)
.text$mn:00008548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008548
.text$mn:00008548 ; =============== S U B R O U T I N E =======================================
.text$mn:00008548
.text$mn:00008548 ; Attributes: bp-based frame
.text$mn:00008548
.text$mn:00008548 ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:00008548                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:00008548 ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:00008548                                         ; DATA XREF: .rdata:0000A4A8o
.text$mn:00008548
.text$mn:00008548 var_4           = dword ptr -4
.text$mn:00008548
.text$mn:00008548                 push    ebp
.text$mn:00008549                 mov     ebp, esp
.text$mn:0000854B                 push    ecx
.text$mn:0000854C                 mov     [ebp+var_4], ecx
.text$mn:0000854F                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:00008554                 mov     esp, ebp
.text$mn:00008556                 pop     ebp
.text$mn:00008557                 retn
.text$mn:00008557 ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:00008557
.text$mn:00008557 _text$mn        ends
.text$mn:00008557
.text$mn:00008558 ; ===========================================================================
.text$mn:00008558
.text$mn:00008558 ; Segment type: Pure code
.text$mn:00008558 ; Segment permissions: Read/Execute
.text$mn:00008558 _text$mn        segment para public 'CODE' use32
.text$mn:00008558                 assume cs:_text$mn
.text$mn:00008558                 ;org 8558h
.text$mn:00008558 ; COMDAT (pick any)
.text$mn:00008558                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008558
.text$mn:00008558 ; =============== S U B R O U T I N E =======================================
.text$mn:00008558
.text$mn:00008558 ; Attributes: bp-based frame
.text$mn:00008558
.text$mn:00008558 ; public: void __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::push_back(struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>> &&)
.text$mn:00008558                 public ?push_back@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEX$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@@Z
.text$mn:00008558 ?push_back@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEX$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@@Z proc near
.text$mn:00008558                                         ; CODE XREF: ThemeSwitcher::addThemeFromXml(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+78p
.text$mn:00008558
.text$mn:00008558 var_C           = dword ptr -0Ch
.text$mn:00008558 var_8           = dword ptr -8
.text$mn:00008558 var_2           = byte ptr -2
.text$mn:00008558 var_1           = byte ptr -1
.text$mn:00008558 arg_0           = dword ptr  8
.text$mn:00008558
.text$mn:00008558                 push    ebp
.text$mn:00008559                 mov     ebp, esp
.text$mn:0000855B                 sub     esp, 0Ch
.text$mn:0000855E                 mov     [ebp+var_8], ecx
.text$mn:00008561                 mov     eax, [ebp+arg_0]
.text$mn:00008564                 push    eax
.text$mn:00008565                 call    ??$addressof@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &)
.text$mn:0000856A                 add     esp, 4
.text$mn:0000856D                 push    eax
.text$mn:0000856E                 mov     ecx, [ebp+var_8]
.text$mn:00008571                 call    ?_Inside@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBE_NPBU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Inside(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> const *)
.text$mn:00008576                 movzx   ecx, al
.text$mn:00008579                 test    ecx, ecx
.text$mn:0000857B                 jz      loc_860B
.text$mn:00008581                 mov     edx, [ebp+arg_0]
.text$mn:00008584                 push    edx
.text$mn:00008585                 call    ??$addressof@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &)
.text$mn:0000858A                 add     esp, 4
.text$mn:0000858D                 mov     ecx, [ebp+var_8]
.text$mn:00008590                 sub     eax, [ecx+4]
.text$mn:00008593                 cdq
.text$mn:00008594                 mov     ecx, 38h ; '8'
.text$mn:00008599                 idiv    ecx
.text$mn:0000859B                 mov     [ebp+var_C], eax
.text$mn:0000859E                 mov     edx, [ebp+var_8]
.text$mn:000085A1                 mov     eax, [ebp+var_8]
.text$mn:000085A4                 mov     ecx, [edx+8]
.text$mn:000085A7                 cmp     ecx, [eax+0Ch]
.text$mn:000085AA                 jnz     short loc_85B6
.text$mn:000085AC                 push    1
.text$mn:000085AE                 mov     ecx, [ebp+var_8]
.text$mn:000085B1                 call    ?_Reserve@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)
.text$mn:000085B6
.text$mn:000085B6 loc_85B6:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+52j
.text$mn:000085B6                 mov     edx, [ebp+var_8]
.text$mn:000085B9                 mov     eax, [edx+8]
.text$mn:000085BC                 push    eax
.text$mn:000085BD                 mov     ecx, [ebp+var_8]
.text$mn:000085C0                 mov     edx, [ecx+8]
.text$mn:000085C3                 push    edx
.text$mn:000085C4                 mov     ecx, [ebp+var_8]
.text$mn:000085C7                 call    ?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:000085CC                 imul    eax, [ebp+var_C], 38h
.text$mn:000085D0                 mov     ecx, [ebp+var_8]
.text$mn:000085D3                 add     eax, [ecx+4]
.text$mn:000085D6                 push    eax
.text$mn:000085D7                 call    ??$forward@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &)
.text$mn:000085DC                 add     esp, 4
.text$mn:000085DF                 push    eax             ; int
.text$mn:000085E0                 mov     edx, [ebp+var_8]
.text$mn:000085E3                 mov     eax, [edx+8]
.text$mn:000085E6                 push    eax             ; void *
.text$mn:000085E7                 lea     ecx, [ebp+var_1]
.text$mn:000085EA                 push    ecx
.text$mn:000085EB                 mov     ecx, [ebp+var_8]
.text$mn:000085EE                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)
.text$mn:000085F3                 mov     ecx, eax
.text$mn:000085F5                 call    ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)
.text$mn:000085FA                 mov     edx, [ebp+var_8]
.text$mn:000085FD                 mov     eax, [edx+8]
.text$mn:00008600                 add     eax, 38h ; '8'
.text$mn:00008603                 mov     ecx, [ebp+var_8]
.text$mn:00008606                 mov     [ecx+8], eax
.text$mn:00008609                 jmp     short loc_866F
.text$mn:0000860B ; ---------------------------------------------------------------------------
.text$mn:0000860B
.text$mn:0000860B loc_860B:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+23j
.text$mn:0000860B                 mov     edx, [ebp+var_8]
.text$mn:0000860E                 mov     eax, [ebp+var_8]
.text$mn:00008611                 mov     ecx, [edx+8]
.text$mn:00008614                 cmp     ecx, [eax+0Ch]
.text$mn:00008617                 jnz     short loc_8623
.text$mn:00008619                 push    1
.text$mn:0000861B                 mov     ecx, [ebp+var_8]
.text$mn:0000861E                 call    ?_Reserve@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reserve(uint)
.text$mn:00008623
.text$mn:00008623 loc_8623:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+BFj
.text$mn:00008623                 mov     edx, [ebp+var_8]
.text$mn:00008626                 mov     eax, [edx+8]
.text$mn:00008629                 push    eax
.text$mn:0000862A                 mov     ecx, [ebp+var_8]
.text$mn:0000862D                 mov     edx, [ecx+8]
.text$mn:00008630                 push    edx
.text$mn:00008631                 mov     ecx, [ebp+var_8]
.text$mn:00008634                 call    ?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Orphan_range(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *)
.text$mn:00008639                 mov     eax, [ebp+arg_0]
.text$mn:0000863C                 push    eax
.text$mn:0000863D                 call    ??$forward@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@YA$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@AAU10@@Z ; std::forward<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &)
.text$mn:00008642                 add     esp, 4
.text$mn:00008645                 push    eax             ; int
.text$mn:00008646                 mov     ecx, [ebp+var_8]
.text$mn:00008649                 mov     edx, [ecx+8]
.text$mn:0000864C                 push    edx             ; void *
.text$mn:0000864D                 lea     eax, [ebp+var_2]
.text$mn:00008650                 push    eax
.text$mn:00008651                 mov     ecx, [ebp+var_8]
.text$mn:00008654                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>>::_Getal(void)
.text$mn:00008659                 mov     ecx, eax
.text$mn:0000865B                 call    ??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::construct<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)
.text$mn:00008660                 mov     ecx, [ebp+var_8]
.text$mn:00008663                 mov     edx, [ecx+8]
.text$mn:00008666                 add     edx, 38h ; '8'
.text$mn:00008669                 mov     eax, [ebp+var_8]
.text$mn:0000866C                 mov     [eax+8], edx
.text$mn:0000866F
.text$mn:0000866F loc_866F:                               ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::push_back(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> &&)+B1j
.text$mn:0000866F                 mov     esp, ebp
.text$mn:00008671                 pop     ebp
.text$mn:00008672                 retn    4
.text$mn:00008672 ?push_back@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QAEX$$QAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@@Z endp
.text$mn:00008672
.text$mn:00008672 ; ---------------------------------------------------------------------------
.text$mn:00008675                 align 4
.text$mn:00008675 _text$mn        ends
.text$mn:00008675
.text$mn:00008678 ; ===========================================================================
.text$mn:00008678
.text$mn:00008678 ; Segment type: Pure code
.text$mn:00008678 ; Segment permissions: Read/Execute
.text$mn:00008678 _text$mn        segment para public 'CODE' use32
.text$mn:00008678                 assume cs:_text$mn
.text$mn:00008678                 ;org 8678h
.text$mn:00008678 ; COMDAT (pick any)
.text$mn:00008678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008678
.text$mn:00008678 ; =============== S U B R O U T I N E =======================================
.text$mn:00008678
.text$mn:00008678 ; Attributes: bp-based frame
.text$mn:00008678
.text$mn:00008678 ; public: void __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::push_back(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00008678                 public ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
.text$mn:00008678 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z proc near
.text$mn:00008678                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+5E3p
.text$mn:00008678
.text$mn:00008678 var_C           = dword ptr -0Ch
.text$mn:00008678 var_8           = dword ptr -8
.text$mn:00008678 var_2           = byte ptr -2
.text$mn:00008678 var_1           = byte ptr -1
.text$mn:00008678 arg_0           = dword ptr  8
.text$mn:00008678
.text$mn:00008678                 push    ebp
.text$mn:00008679                 mov     ebp, esp
.text$mn:0000867B                 sub     esp, 0Ch
.text$mn:0000867E                 mov     [ebp+var_8], ecx
.text$mn:00008681                 mov     eax, [ebp+arg_0]
.text$mn:00008684                 push    eax
.text$mn:00008685                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:0000868A                 add     esp, 4
.text$mn:0000868D                 push    eax
.text$mn:0000868E                 mov     ecx, [ebp+var_8]
.text$mn:00008691                 call    ?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Inside(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const *)
.text$mn:00008696                 movzx   ecx, al
.text$mn:00008699                 test    ecx, ecx
.text$mn:0000869B                 jz      loc_872B
.text$mn:000086A1                 mov     edx, [ebp+arg_0]
.text$mn:000086A4                 push    edx
.text$mn:000086A5                 call    ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000086AA                 add     esp, 4
.text$mn:000086AD                 mov     ecx, [ebp+var_8]
.text$mn:000086B0                 sub     eax, [ecx+4]
.text$mn:000086B3                 cdq
.text$mn:000086B4                 mov     ecx, 1Ch
.text$mn:000086B9                 idiv    ecx
.text$mn:000086BB                 mov     [ebp+var_C], eax
.text$mn:000086BE                 mov     edx, [ebp+var_8]
.text$mn:000086C1                 mov     eax, [ebp+var_8]
.text$mn:000086C4                 mov     ecx, [edx+8]
.text$mn:000086C7                 cmp     ecx, [eax+0Ch]
.text$mn:000086CA                 jnz     short loc_86D6
.text$mn:000086CC                 push    1
.text$mn:000086CE                 mov     ecx, [ebp+var_8]
.text$mn:000086D1                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:000086D6
.text$mn:000086D6 loc_86D6:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+52j
.text$mn:000086D6                 mov     edx, [ebp+var_8]
.text$mn:000086D9                 mov     eax, [edx+8]
.text$mn:000086DC                 push    eax
.text$mn:000086DD                 mov     ecx, [ebp+var_8]
.text$mn:000086E0                 mov     edx, [ecx+8]
.text$mn:000086E3                 push    edx
.text$mn:000086E4                 mov     ecx, [ebp+var_8]
.text$mn:000086E7                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:000086EC                 imul    eax, [ebp+var_C], 1Ch
.text$mn:000086F0                 mov     ecx, [ebp+var_8]
.text$mn:000086F3                 add     eax, [ecx+4]
.text$mn:000086F6                 push    eax
.text$mn:000086F7                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:000086FC                 add     esp, 4
.text$mn:000086FF                 push    eax             ; int
.text$mn:00008700                 mov     edx, [ebp+var_8]
.text$mn:00008703                 mov     eax, [edx+8]
.text$mn:00008706                 push    eax             ; void *
.text$mn:00008707                 lea     ecx, [ebp+var_1]
.text$mn:0000870A                 push    ecx
.text$mn:0000870B                 mov     ecx, [ebp+var_8]
.text$mn:0000870E                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00008713                 mov     ecx, eax
.text$mn:00008715                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000871A                 mov     edx, [ebp+var_8]
.text$mn:0000871D                 mov     eax, [edx+8]
.text$mn:00008720                 add     eax, 1Ch
.text$mn:00008723                 mov     ecx, [ebp+var_8]
.text$mn:00008726                 mov     [ecx+8], eax
.text$mn:00008729                 jmp     short loc_878F
.text$mn:0000872B ; ---------------------------------------------------------------------------
.text$mn:0000872B
.text$mn:0000872B loc_872B:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+23j
.text$mn:0000872B                 mov     edx, [ebp+var_8]
.text$mn:0000872E                 mov     eax, [ebp+var_8]
.text$mn:00008731                 mov     ecx, [edx+8]
.text$mn:00008734                 cmp     ecx, [eax+0Ch]
.text$mn:00008737                 jnz     short loc_8743
.text$mn:00008739                 push    1
.text$mn:0000873B                 mov     ecx, [ebp+var_8]
.text$mn:0000873E                 call    ?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Reserve(uint)
.text$mn:00008743
.text$mn:00008743 loc_8743:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+BFj
.text$mn:00008743                 mov     edx, [ebp+var_8]
.text$mn:00008746                 mov     eax, [edx+8]
.text$mn:00008749                 push    eax
.text$mn:0000874A                 mov     ecx, [ebp+var_8]
.text$mn:0000874D                 mov     edx, [ecx+8]
.text$mn:00008750                 push    edx
.text$mn:00008751                 mov     ecx, [ebp+var_8]
.text$mn:00008754                 call    ?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Orphan_range(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *)
.text$mn:00008759                 mov     eax, [ebp+arg_0]
.text$mn:0000875C                 push    eax
.text$mn:0000875D                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00008762                 add     esp, 4
.text$mn:00008765                 push    eax             ; int
.text$mn:00008766                 mov     ecx, [ebp+var_8]
.text$mn:00008769                 mov     edx, [ecx+8]
.text$mn:0000876C                 push    edx             ; void *
.text$mn:0000876D                 lea     eax, [ebp+var_2]
.text$mn:00008770                 push    eax
.text$mn:00008771                 mov     ecx, [ebp+var_8]
.text$mn:00008774                 call    ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Getal(void)
.text$mn:00008779                 mov     ecx, eax
.text$mn:0000877B                 call    ??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::construct<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00008780                 mov     ecx, [ebp+var_8]
.text$mn:00008783                 mov     edx, [ecx+8]
.text$mn:00008786                 add     edx, 1Ch
.text$mn:00008789                 mov     eax, [ebp+var_8]
.text$mn:0000878C                 mov     [eax+8], edx
.text$mn:0000878F
.text$mn:0000878F loc_878F:                               ; CODE XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::push_back(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+B1j
.text$mn:0000878F                 mov     esp, ebp
.text$mn:00008791                 pop     ebp
.text$mn:00008792                 retn    4
.text$mn:00008792 ?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z endp
.text$mn:00008792
.text$mn:00008792 ; ---------------------------------------------------------------------------
.text$mn:00008795                 align 4
.text$mn:00008795 _text$mn        ends
.text$mn:00008795
.text$mn:00008798 ; ===========================================================================
.text$mn:00008798
.text$mn:00008798 ; Segment type: Pure code
.text$mn:00008798 ; Segment permissions: Read/Execute
.text$mn:00008798 _text$mn        segment para public 'CODE' use32
.text$mn:00008798                 assume cs:_text$mn
.text$mn:00008798                 ;org 8798h
.text$mn:00008798 ; COMDAT (pick any)
.text$mn:00008798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008798
.text$mn:00008798 ; =============== S U B R O U T I N E =======================================
.text$mn:00008798
.text$mn:00008798 ; Attributes: bp-based frame
.text$mn:00008798
.text$mn:00008798 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(int, size_t, int, int, size_t Size)
.text$mn:00008798                 public ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:00008798 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:00008798                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+59p
.text$mn:00008798
.text$mn:00008798 var_10          = dword ptr -10h
.text$mn:00008798 var_C           = dword ptr -0Ch
.text$mn:00008798 var_8           = dword ptr -8
.text$mn:00008798 var_4           = dword ptr -4
.text$mn:00008798 arg_0           = dword ptr  8
.text$mn:00008798 arg_4           = dword ptr  0Ch
.text$mn:00008798 arg_8           = dword ptr  10h
.text$mn:00008798 arg_C           = dword ptr  14h
.text$mn:00008798 Size            = dword ptr  18h
.text$mn:00008798
.text$mn:00008798                 push    ebp
.text$mn:00008799                 mov     ebp, esp
.text$mn:0000879B                 sub     esp, 10h
.text$mn:0000879E                 mov     [ebp+var_4], ecx
.text$mn:000087A1                 mov     eax, [ebp+var_4]
.text$mn:000087A4                 mov     ecx, [eax+14h]
.text$mn:000087A7                 cmp     ecx, [ebp+arg_0]
.text$mn:000087AA                 jb      short loc_87B9
.text$mn:000087AC                 mov     ecx, [ebp+arg_8]
.text$mn:000087AF                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:000087B4                 cmp     eax, [ebp+arg_C]
.text$mn:000087B7                 jnb     short loc_87C1
.text$mn:000087B9
.text$mn:000087B9 loc_87B9:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+12j
.text$mn:000087B9                 mov     ecx, [ebp+var_4]
.text$mn:000087BC                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000087C1
.text$mn:000087C1 loc_87C1:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+1Fj
.text$mn:000087C1                 mov     edx, [ebp+var_4]
.text$mn:000087C4                 mov     eax, [edx+14h]
.text$mn:000087C7                 sub     eax, [ebp+arg_0]
.text$mn:000087CA                 cmp     eax, [ebp+arg_4]
.text$mn:000087CD                 jnb     short loc_87DB
.text$mn:000087CF                 mov     ecx, [ebp+var_4]
.text$mn:000087D2                 mov     edx, [ecx+14h]
.text$mn:000087D5                 sub     edx, [ebp+arg_0]
.text$mn:000087D8                 mov     [ebp+arg_4], edx
.text$mn:000087DB
.text$mn:000087DB loc_87DB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+35j
.text$mn:000087DB                 mov     ecx, [ebp+arg_8]
.text$mn:000087DE                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:000087E3                 sub     eax, [ebp+arg_C]
.text$mn:000087E6                 mov     [ebp+var_10], eax
.text$mn:000087E9                 mov     eax, [ebp+var_10]
.text$mn:000087EC                 cmp     eax, [ebp+Size]
.text$mn:000087EF                 jnb     short loc_87F7
.text$mn:000087F1                 mov     ecx, [ebp+var_10]
.text$mn:000087F4                 mov     [ebp+Size], ecx
.text$mn:000087F7
.text$mn:000087F7 loc_87F7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+57j
.text$mn:000087F7                 or      edx, 0FFFFFFFFh
.text$mn:000087FA                 sub     edx, [ebp+Size]
.text$mn:000087FD                 mov     eax, [ebp+var_4]
.text$mn:00008800                 mov     ecx, [eax+14h]
.text$mn:00008803                 sub     ecx, [ebp+arg_4]
.text$mn:00008806                 cmp     edx, ecx
.text$mn:00008808                 ja      short loc_8812
.text$mn:0000880A                 mov     ecx, [ebp+var_4]
.text$mn:0000880D                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00008812
.text$mn:00008812 loc_8812:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+70j
.text$mn:00008812                 mov     edx, [ebp+var_4]
.text$mn:00008815                 mov     eax, [edx+14h]
.text$mn:00008818                 sub     eax, [ebp+arg_4]
.text$mn:0000881B                 sub     eax, [ebp+arg_0]
.text$mn:0000881E                 mov     [ebp+var_8], eax
.text$mn:00008821                 mov     ecx, [ebp+var_4]
.text$mn:00008824                 mov     edx, [ecx+14h]
.text$mn:00008827                 add     edx, [ebp+Size]
.text$mn:0000882A                 sub     edx, [ebp+arg_4]
.text$mn:0000882D                 mov     [ebp+var_C], edx
.text$mn:00008830                 mov     eax, [ebp+var_4]
.text$mn:00008833                 mov     ecx, [eax+14h]
.text$mn:00008836                 cmp     ecx, [ebp+var_C]
.text$mn:00008839                 jnb     short loc_8849
.text$mn:0000883B                 push    0
.text$mn:0000883D                 mov     edx, [ebp+var_C]
.text$mn:00008840                 push    edx
.text$mn:00008841                 mov     ecx, [ebp+var_4]
.text$mn:00008844                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008849
.text$mn:00008849 loc_8849:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+A1j
.text$mn:00008849                 mov     eax, [ebp+var_4]
.text$mn:0000884C                 cmp     eax, [ebp+arg_8]
.text$mn:0000884F                 jz      short loc_88A4
.text$mn:00008851                 mov     ecx, [ebp+var_8]
.text$mn:00008854                 push    ecx             ; Size
.text$mn:00008855                 mov     ecx, [ebp+var_4]
.text$mn:00008858                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000885D                 add     eax, [ebp+arg_0]
.text$mn:00008860                 add     eax, [ebp+arg_4]
.text$mn:00008863                 push    eax             ; Src
.text$mn:00008864                 mov     ecx, [ebp+var_4]
.text$mn:00008867                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000886C                 add     eax, [ebp+arg_0]
.text$mn:0000886F                 add     eax, [ebp+Size]
.text$mn:00008872                 push    eax             ; Dst
.text$mn:00008873                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00008878                 add     esp, 0Ch
.text$mn:0000887B                 mov     edx, [ebp+Size]
.text$mn:0000887E                 push    edx             ; Size
.text$mn:0000887F                 mov     ecx, [ebp+arg_8]
.text$mn:00008882                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008887                 add     eax, [ebp+arg_C]
.text$mn:0000888A                 push    eax             ; Src
.text$mn:0000888B                 mov     ecx, [ebp+var_4]
.text$mn:0000888E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008893                 add     eax, [ebp+arg_0]
.text$mn:00008896                 push    eax             ; Dst
.text$mn:00008897                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000889C                 add     esp, 0Ch
.text$mn:0000889F                 jmp     loc_8A38
.text$mn:000088A4 ; ---------------------------------------------------------------------------
.text$mn:000088A4
.text$mn:000088A4 loc_88A4:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+B7j
.text$mn:000088A4                 mov     eax, [ebp+Size]
.text$mn:000088A7                 cmp     eax, [ebp+arg_4]
.text$mn:000088AA                 ja      short loc_88FF
.text$mn:000088AC                 mov     ecx, [ebp+Size]
.text$mn:000088AF                 push    ecx             ; Size
.text$mn:000088B0                 mov     ecx, [ebp+var_4]
.text$mn:000088B3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000088B8                 add     eax, [ebp+arg_C]
.text$mn:000088BB                 push    eax             ; Src
.text$mn:000088BC                 mov     ecx, [ebp+var_4]
.text$mn:000088BF                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000088C4                 add     eax, [ebp+arg_0]
.text$mn:000088C7                 push    eax             ; Dst
.text$mn:000088C8                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:000088CD                 add     esp, 0Ch
.text$mn:000088D0                 mov     edx, [ebp+var_8]
.text$mn:000088D3                 push    edx             ; Size
.text$mn:000088D4                 mov     ecx, [ebp+var_4]
.text$mn:000088D7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000088DC                 add     eax, [ebp+arg_0]
.text$mn:000088DF                 add     eax, [ebp+arg_4]
.text$mn:000088E2                 push    eax             ; Src
.text$mn:000088E3                 mov     ecx, [ebp+var_4]
.text$mn:000088E6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000088EB                 add     eax, [ebp+arg_0]
.text$mn:000088EE                 add     eax, [ebp+Size]
.text$mn:000088F1                 push    eax             ; Dst
.text$mn:000088F2                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:000088F7                 add     esp, 0Ch
.text$mn:000088FA                 jmp     loc_8A38
.text$mn:000088FF ; ---------------------------------------------------------------------------
.text$mn:000088FF
.text$mn:000088FF loc_88FF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+112j
.text$mn:000088FF                 mov     eax, [ebp+arg_C]
.text$mn:00008902                 cmp     eax, [ebp+arg_0]
.text$mn:00008905                 ja      short loc_895A
.text$mn:00008907                 mov     ecx, [ebp+var_8]
.text$mn:0000890A                 push    ecx             ; Size
.text$mn:0000890B                 mov     ecx, [ebp+var_4]
.text$mn:0000890E                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008913                 add     eax, [ebp+arg_0]
.text$mn:00008916                 add     eax, [ebp+arg_4]
.text$mn:00008919                 push    eax             ; Src
.text$mn:0000891A                 mov     ecx, [ebp+var_4]
.text$mn:0000891D                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008922                 add     eax, [ebp+arg_0]
.text$mn:00008925                 add     eax, [ebp+Size]
.text$mn:00008928                 push    eax             ; Dst
.text$mn:00008929                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000892E                 add     esp, 0Ch
.text$mn:00008931                 mov     edx, [ebp+Size]
.text$mn:00008934                 push    edx             ; Size
.text$mn:00008935                 mov     ecx, [ebp+var_4]
.text$mn:00008938                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000893D                 add     eax, [ebp+arg_C]
.text$mn:00008940                 push    eax             ; Src
.text$mn:00008941                 mov     ecx, [ebp+var_4]
.text$mn:00008944                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008949                 add     eax, [ebp+arg_0]
.text$mn:0000894C                 push    eax             ; Dst
.text$mn:0000894D                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00008952                 add     esp, 0Ch
.text$mn:00008955                 jmp     loc_8A38
.text$mn:0000895A ; ---------------------------------------------------------------------------
.text$mn:0000895A
.text$mn:0000895A loc_895A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+16Dj
.text$mn:0000895A                 mov     eax, [ebp+arg_0]
.text$mn:0000895D                 add     eax, [ebp+arg_4]
.text$mn:00008960                 cmp     eax, [ebp+arg_C]
.text$mn:00008963                 ja      short loc_89BD
.text$mn:00008965                 mov     ecx, [ebp+var_8]
.text$mn:00008968                 push    ecx             ; Size
.text$mn:00008969                 mov     ecx, [ebp+var_4]
.text$mn:0000896C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008971                 add     eax, [ebp+arg_0]
.text$mn:00008974                 add     eax, [ebp+arg_4]
.text$mn:00008977                 push    eax             ; Src
.text$mn:00008978                 mov     ecx, [ebp+var_4]
.text$mn:0000897B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008980                 add     eax, [ebp+arg_0]
.text$mn:00008983                 add     eax, [ebp+Size]
.text$mn:00008986                 push    eax             ; Dst
.text$mn:00008987                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:0000898C                 add     esp, 0Ch
.text$mn:0000898F                 mov     edx, [ebp+Size]
.text$mn:00008992                 push    edx             ; Size
.text$mn:00008993                 mov     ecx, [ebp+var_4]
.text$mn:00008996                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000899B                 mov     ecx, [ebp+arg_C]
.text$mn:0000899E                 add     ecx, [ebp+Size]
.text$mn:000089A1                 sub     ecx, [ebp+arg_4]
.text$mn:000089A4                 add     eax, ecx
.text$mn:000089A6                 push    eax             ; Src
.text$mn:000089A7                 mov     ecx, [ebp+var_4]
.text$mn:000089AA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000089AF                 add     eax, [ebp+arg_0]
.text$mn:000089B2                 push    eax             ; Dst
.text$mn:000089B3                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:000089B8                 add     esp, 0Ch
.text$mn:000089BB                 jmp     short loc_8A38
.text$mn:000089BD ; ---------------------------------------------------------------------------
.text$mn:000089BD
.text$mn:000089BD loc_89BD:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+1CBj
.text$mn:000089BD                 mov     edx, [ebp+arg_4]
.text$mn:000089C0                 push    edx             ; Size
.text$mn:000089C1                 mov     ecx, [ebp+var_4]
.text$mn:000089C4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000089C9                 add     eax, [ebp+arg_C]
.text$mn:000089CC                 push    eax             ; Src
.text$mn:000089CD                 mov     ecx, [ebp+var_4]
.text$mn:000089D0                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000089D5                 add     eax, [ebp+arg_0]
.text$mn:000089D8                 push    eax             ; Dst
.text$mn:000089D9                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:000089DE                 add     esp, 0Ch
.text$mn:000089E1                 mov     eax, [ebp+var_8]
.text$mn:000089E4                 push    eax             ; Size
.text$mn:000089E5                 mov     ecx, [ebp+var_4]
.text$mn:000089E8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000089ED                 add     eax, [ebp+arg_0]
.text$mn:000089F0                 add     eax, [ebp+arg_4]
.text$mn:000089F3                 push    eax             ; Src
.text$mn:000089F4                 mov     ecx, [ebp+var_4]
.text$mn:000089F7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000089FC                 add     eax, [ebp+arg_0]
.text$mn:000089FF                 add     eax, [ebp+Size]
.text$mn:00008A02                 push    eax             ; Dst
.text$mn:00008A03                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00008A08                 add     esp, 0Ch
.text$mn:00008A0B                 mov     ecx, [ebp+Size]
.text$mn:00008A0E                 sub     ecx, [ebp+arg_4]
.text$mn:00008A11                 push    ecx             ; Size
.text$mn:00008A12                 mov     ecx, [ebp+var_4]
.text$mn:00008A15                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008A1A                 add     eax, [ebp+arg_C]
.text$mn:00008A1D                 add     eax, [ebp+Size]
.text$mn:00008A20                 push    eax             ; Src
.text$mn:00008A21                 mov     ecx, [ebp+var_4]
.text$mn:00008A24                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008A29                 add     eax, [ebp+arg_0]
.text$mn:00008A2C                 add     eax, [ebp+arg_4]
.text$mn:00008A2F                 push    eax             ; Dst
.text$mn:00008A30                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00008A35                 add     esp, 0Ch
.text$mn:00008A38
.text$mn:00008A38 loc_8A38:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+107j
.text$mn:00008A38                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+162j ...
.text$mn:00008A38                 mov     edx, [ebp+var_C]
.text$mn:00008A3B                 push    edx
.text$mn:00008A3C                 mov     ecx, [ebp+var_4]
.text$mn:00008A3F                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008A44                 mov     eax, [ebp+var_4]
.text$mn:00008A47                 mov     esp, ebp
.text$mn:00008A49                 pop     ebp
.text$mn:00008A4A                 retn    14h
.text$mn:00008A4A ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:00008A4A
.text$mn:00008A4A ; ---------------------------------------------------------------------------
.text$mn:00008A4D                 align 10h
.text$mn:00008A4D _text$mn        ends
.text$mn:00008A4D
.text$mn:00008A50 ; ===========================================================================
.text$mn:00008A50
.text$mn:00008A50 ; Segment type: Pure code
.text$mn:00008A50 ; Segment permissions: Read/Execute
.text$mn:00008A50 _text$mn        segment para public 'CODE' use32
.text$mn:00008A50                 assume cs:_text$mn
.text$mn:00008A50                 ;org 8A50h
.text$mn:00008A50 ; COMDAT (pick any)
.text$mn:00008A50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A50
.text$mn:00008A50 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A50
.text$mn:00008A50 ; Attributes: bp-based frame
.text$mn:00008A50
.text$mn:00008A50 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(int, size_t, void *Src, size_t Size)
.text$mn:00008A50                 public ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z
.text$mn:00008A50 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z proc near
.text$mn:00008A50                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+201p
.text$mn:00008A50
.text$mn:00008A50 var_C           = dword ptr -0Ch
.text$mn:00008A50 var_8           = dword ptr -8
.text$mn:00008A50 var_4           = dword ptr -4
.text$mn:00008A50 arg_0           = dword ptr  8
.text$mn:00008A50 arg_4           = dword ptr  0Ch
.text$mn:00008A50 Src             = dword ptr  10h
.text$mn:00008A50 Size            = dword ptr  14h
.text$mn:00008A50
.text$mn:00008A50                 push    ebp
.text$mn:00008A51                 mov     ebp, esp
.text$mn:00008A53                 sub     esp, 0Ch
.text$mn:00008A56                 mov     [ebp+var_4], ecx
.text$mn:00008A59                 cmp     [ebp+Size], 0
.text$mn:00008A5D                 jz      short loc_8A75
.text$mn:00008A5F                 push    5A9h            ; unsigned int
.text$mn:00008A64                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008A69                 mov     eax, [ebp+Src]
.text$mn:00008A6C                 push    eax             ; int
.text$mn:00008A6D                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:00008A72                 add     esp, 0Ch
.text$mn:00008A75
.text$mn:00008A75 loc_8A75:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+Dj
.text$mn:00008A75                 mov     ecx, [ebp+Src]
.text$mn:00008A78                 push    ecx
.text$mn:00008A79                 mov     ecx, [ebp+var_4]
.text$mn:00008A7C                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:00008A81                 movzx   edx, al
.text$mn:00008A84                 test    edx, edx
.text$mn:00008A86                 jz      short loc_8AB3
.text$mn:00008A88                 mov     eax, [ebp+Size]
.text$mn:00008A8B                 push    eax             ; Size
.text$mn:00008A8C                 mov     ecx, [ebp+var_4]
.text$mn:00008A8F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008A94                 mov     ecx, [ebp+Src]
.text$mn:00008A97                 sub     ecx, eax
.text$mn:00008A99                 push    ecx             ; int
.text$mn:00008A9A                 mov     edx, [ebp+var_4]
.text$mn:00008A9D                 push    edx             ; int
.text$mn:00008A9E                 mov     eax, [ebp+arg_4]
.text$mn:00008AA1                 push    eax             ; size_t
.text$mn:00008AA2                 mov     ecx, [ebp+arg_0]
.text$mn:00008AA5                 push    ecx             ; int
.text$mn:00008AA6                 mov     ecx, [ebp+var_4]
.text$mn:00008AA9                 call    ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00008AAE                 jmp     loc_8BC9
.text$mn:00008AB3 ; ---------------------------------------------------------------------------
.text$mn:00008AB3
.text$mn:00008AB3 loc_8AB3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+36j
.text$mn:00008AB3                 mov     edx, [ebp+var_4]
.text$mn:00008AB6                 mov     eax, [edx+14h]
.text$mn:00008AB9                 cmp     eax, [ebp+arg_0]
.text$mn:00008ABC                 jnb     short loc_8AC6
.text$mn:00008ABE                 mov     ecx, [ebp+var_4]
.text$mn:00008AC1                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00008AC6
.text$mn:00008AC6 loc_8AC6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+6Cj
.text$mn:00008AC6                 mov     ecx, [ebp+var_4]
.text$mn:00008AC9                 mov     edx, [ecx+14h]
.text$mn:00008ACC                 sub     edx, [ebp+arg_0]
.text$mn:00008ACF                 cmp     edx, [ebp+arg_4]
.text$mn:00008AD2                 jnb     short loc_8AE0
.text$mn:00008AD4                 mov     eax, [ebp+var_4]
.text$mn:00008AD7                 mov     ecx, [eax+14h]
.text$mn:00008ADA                 sub     ecx, [ebp+arg_0]
.text$mn:00008ADD                 mov     [ebp+arg_4], ecx
.text$mn:00008AE0
.text$mn:00008AE0 loc_8AE0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+82j
.text$mn:00008AE0                 or      edx, 0FFFFFFFFh
.text$mn:00008AE3                 sub     edx, [ebp+Size]
.text$mn:00008AE6                 mov     eax, [ebp+var_4]
.text$mn:00008AE9                 mov     ecx, [eax+14h]
.text$mn:00008AEC                 sub     ecx, [ebp+arg_4]
.text$mn:00008AEF                 cmp     edx, ecx
.text$mn:00008AF1                 ja      short loc_8AFB
.text$mn:00008AF3                 mov     ecx, [ebp+var_4]
.text$mn:00008AF6                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00008AFB
.text$mn:00008AFB loc_8AFB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+A1j
.text$mn:00008AFB                 mov     edx, [ebp+var_4]
.text$mn:00008AFE                 mov     eax, [edx+14h]
.text$mn:00008B01                 sub     eax, [ebp+arg_4]
.text$mn:00008B04                 sub     eax, [ebp+arg_0]
.text$mn:00008B07                 mov     [ebp+var_8], eax
.text$mn:00008B0A                 mov     ecx, [ebp+Size]
.text$mn:00008B0D                 cmp     ecx, [ebp+arg_4]
.text$mn:00008B10                 jnb     short loc_8B3C
.text$mn:00008B12                 mov     edx, [ebp+var_8]
.text$mn:00008B15                 push    edx             ; Size
.text$mn:00008B16                 mov     ecx, [ebp+var_4]
.text$mn:00008B19                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008B1E                 add     eax, [ebp+arg_0]
.text$mn:00008B21                 add     eax, [ebp+arg_4]
.text$mn:00008B24                 push    eax             ; Src
.text$mn:00008B25                 mov     ecx, [ebp+var_4]
.text$mn:00008B28                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008B2D                 add     eax, [ebp+arg_0]
.text$mn:00008B30                 add     eax, [ebp+Size]
.text$mn:00008B33                 push    eax             ; Dst
.text$mn:00008B34                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00008B39                 add     esp, 0Ch
.text$mn:00008B3C
.text$mn:00008B3C loc_8B3C:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+C0j
.text$mn:00008B3C                 cmp     [ebp+Size], 0
.text$mn:00008B40                 ja      short loc_8B48
.text$mn:00008B42                 cmp     [ebp+arg_4], 0
.text$mn:00008B46                 jbe     short loc_8BC6
.text$mn:00008B48
.text$mn:00008B48 loc_8B48:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+F0j
.text$mn:00008B48                 mov     eax, [ebp+var_4]
.text$mn:00008B4B                 mov     ecx, [eax+14h]
.text$mn:00008B4E                 add     ecx, [ebp+Size]
.text$mn:00008B51                 sub     ecx, [ebp+arg_4]
.text$mn:00008B54                 mov     [ebp+var_C], ecx
.text$mn:00008B57                 push    0
.text$mn:00008B59                 mov     edx, [ebp+var_C]
.text$mn:00008B5C                 push    edx
.text$mn:00008B5D                 mov     ecx, [ebp+var_4]
.text$mn:00008B60                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008B65                 movzx   eax, al
.text$mn:00008B68                 test    eax, eax
.text$mn:00008B6A                 jz      short loc_8BC6
.text$mn:00008B6C                 mov     ecx, [ebp+arg_4]
.text$mn:00008B6F                 cmp     ecx, [ebp+Size]
.text$mn:00008B72                 jnb     short loc_8B9E
.text$mn:00008B74                 mov     edx, [ebp+var_8]
.text$mn:00008B77                 push    edx             ; Size
.text$mn:00008B78                 mov     ecx, [ebp+var_4]
.text$mn:00008B7B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008B80                 add     eax, [ebp+arg_0]
.text$mn:00008B83                 add     eax, [ebp+arg_4]
.text$mn:00008B86                 push    eax             ; Src
.text$mn:00008B87                 mov     ecx, [ebp+var_4]
.text$mn:00008B8A                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008B8F                 add     eax, [ebp+arg_0]
.text$mn:00008B92                 add     eax, [ebp+Size]
.text$mn:00008B95                 push    eax             ; Dst
.text$mn:00008B96                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00008B9B                 add     esp, 0Ch
.text$mn:00008B9E
.text$mn:00008B9E loc_8B9E:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+122j
.text$mn:00008B9E                 mov     eax, [ebp+Size]
.text$mn:00008BA1                 push    eax             ; Size
.text$mn:00008BA2                 mov     ecx, [ebp+Src]
.text$mn:00008BA5                 push    ecx             ; Src
.text$mn:00008BA6                 mov     ecx, [ebp+var_4]
.text$mn:00008BA9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008BAE                 add     eax, [ebp+arg_0]
.text$mn:00008BB1                 push    eax             ; Dst
.text$mn:00008BB2                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008BB7                 add     esp, 0Ch
.text$mn:00008BBA                 mov     edx, [ebp+var_C]
.text$mn:00008BBD                 push    edx
.text$mn:00008BBE                 mov     ecx, [ebp+var_4]
.text$mn:00008BC1                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008BC6
.text$mn:00008BC6 loc_8BC6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+F6j
.text$mn:00008BC6                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+11Aj
.text$mn:00008BC6                 mov     eax, [ebp+var_4]
.text$mn:00008BC9
.text$mn:00008BC9 loc_8BC9:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)+5Ej
.text$mn:00008BC9                 mov     esp, ebp
.text$mn:00008BCB                 pop     ebp
.text$mn:00008BCC                 retn    10h
.text$mn:00008BCC ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z endp
.text$mn:00008BCC
.text$mn:00008BCC ; ---------------------------------------------------------------------------
.text$mn:00008BCF                 align 10h
.text$mn:00008BCF _text$mn        ends
.text$mn:00008BCF
.text$mn:00008BD0 ; ===========================================================================
.text$mn:00008BD0
.text$mn:00008BD0 ; Segment type: Pure code
.text$mn:00008BD0 ; Segment permissions: Read/Execute
.text$mn:00008BD0 _text$mn        segment para public 'CODE' use32
.text$mn:00008BD0                 assume cs:_text$mn
.text$mn:00008BD0                 ;org 8BD0h
.text$mn:00008BD0 ; COMDAT (pick any)
.text$mn:00008BD0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BD0
.text$mn:00008BD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008BD0
.text$mn:00008BD0 ; Attributes: bp-based frame
.text$mn:00008BD0
.text$mn:00008BD0 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<char>>>)
.text$mn:00008BD0                 public ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z
.text$mn:00008BD0 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z proc near
.text$mn:00008BD0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+E0p
.text$mn:00008BD0
.text$mn:00008BD0 var_AC          = byte ptr -0ACh
.text$mn:00008BD0 var_A0          = byte ptr -0A0h
.text$mn:00008BD0 var_94          = dword ptr -94h
.text$mn:00008BD0 var_90          = dword ptr -90h
.text$mn:00008BD0 var_8C          = dword ptr -8Ch
.text$mn:00008BD0 var_88          = dword ptr -88h
.text$mn:00008BD0 var_84          = dword ptr -84h
.text$mn:00008BD0 var_80          = dword ptr -80h
.text$mn:00008BD0 var_7C          = dword ptr -7Ch
.text$mn:00008BD0 var_78          = dword ptr -78h
.text$mn:00008BD0 var_74          = dword ptr -74h
.text$mn:00008BD0 var_70          = dword ptr -70h
.text$mn:00008BD0 var_6C          = dword ptr -6Ch
.text$mn:00008BD0 var_68          = dword ptr -68h
.text$mn:00008BD0 var_64          = dword ptr -64h
.text$mn:00008BD0 var_60          = dword ptr -60h
.text$mn:00008BD0 var_5C          = dword ptr -5Ch
.text$mn:00008BD0 var_58          = dword ptr -58h
.text$mn:00008BD0 var_54          = dword ptr -54h
.text$mn:00008BD0 var_50          = dword ptr -50h
.text$mn:00008BD0 var_4C          = dword ptr -4Ch
.text$mn:00008BD0 var_48          = dword ptr -48h
.text$mn:00008BD0 var_44          = dword ptr -44h
.text$mn:00008BD0 var_40          = dword ptr -40h
.text$mn:00008BD0 var_3C          = dword ptr -3Ch
.text$mn:00008BD0 var_38          = dword ptr -38h
.text$mn:00008BD0 var_34          = dword ptr -34h
.text$mn:00008BD0 var_30          = dword ptr -30h
.text$mn:00008BD0 var_2C          = dword ptr -2Ch
.text$mn:00008BD0 var_28          = dword ptr -28h
.text$mn:00008BD0 var_24          = dword ptr -24h
.text$mn:00008BD0 var_20          = dword ptr -20h
.text$mn:00008BD0 var_1C          = dword ptr -1Ch
.text$mn:00008BD0 var_18          = dword ptr -18h
.text$mn:00008BD0 var_14          = dword ptr -14h
.text$mn:00008BD0 var_10          = dword ptr -10h
.text$mn:00008BD0 var_C           = dword ptr -0Ch
.text$mn:00008BD0 var_4           = dword ptr -4
.text$mn:00008BD0 arg_0           = byte ptr  8
.text$mn:00008BD0 arg_C           = byte ptr  14h
.text$mn:00008BD0 arg_18          = byte ptr  20h
.text$mn:00008BD0 arg_24          = byte ptr  2Ch
.text$mn:00008BD0
.text$mn:00008BD0                 push    ebp
.text$mn:00008BD1                 mov     ebp, esp
.text$mn:00008BD3                 push    0FFFFFFFFh
.text$mn:00008BD5                 push    offset __ehhandler$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z
.text$mn:00008BDA                 mov     eax, large fs:0
.text$mn:00008BE0                 push    eax
.text$mn:00008BE1                 sub     esp, 0A0h
.text$mn:00008BE7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008BEC                 xor     eax, ebp
.text$mn:00008BEE                 push    eax
.text$mn:00008BEF                 lea     eax, [ebp+var_C]
.text$mn:00008BF2                 mov     large fs:0, eax
.text$mn:00008BF8                 mov     [ebp+var_10], ecx
.text$mn:00008BFB                 mov     [ebp+var_4], 3
.text$mn:00008C02                 lea     eax, [ebp+arg_24]
.text$mn:00008C05                 push    eax             ; std::_Iterator_base12 *
.text$mn:00008C06                 lea     ecx, [ebp+arg_18]
.text$mn:00008C09                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008C0E                 movzx   ecx, al
.text$mn:00008C11                 test    ecx, ecx
.text$mn:00008C13                 jz      loc_8CF5
.text$mn:00008C19                 sub     esp, 0Ch
.text$mn:00008C1C                 mov     ecx, esp
.text$mn:00008C1E                 mov     [ebp+var_58], esp
.text$mn:00008C21                 lea     edx, [ebp+arg_0]
.text$mn:00008C24                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00008C25                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008C2A                 mov     [ebp+var_54], eax
.text$mn:00008C2D                 mov     eax, [ebp+var_54]
.text$mn:00008C30                 mov     [ebp+var_60], eax
.text$mn:00008C33                 mov     byte ptr [ebp+var_4], 4
.text$mn:00008C37                 sub     esp, 0Ch
.text$mn:00008C3A                 mov     ecx, esp
.text$mn:00008C3C                 mov     [ebp+var_80], esp
.text$mn:00008C3F                 lea     edx, [ebp+arg_C]
.text$mn:00008C42                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00008C43                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008C48                 mov     [ebp+var_38], eax
.text$mn:00008C4B                 mov     eax, [ebp+var_38]
.text$mn:00008C4E                 mov     [ebp+var_68], eax
.text$mn:00008C51                 mov     byte ptr [ebp+var_4], 5
.text$mn:00008C55                 mov     byte ptr [ebp+var_4], 3
.text$mn:00008C59                 call    ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>)
.text$mn:00008C5E                 add     esp, 18h
.text$mn:00008C61                 mov     [ebp+var_20], eax
.text$mn:00008C64                 mov     ecx, [ebp+var_20]
.text$mn:00008C67                 push    ecx
.text$mn:00008C68                 lea     edx, [ebp+var_A0]
.text$mn:00008C6E                 push    edx
.text$mn:00008C6F                 mov     ecx, [ebp+var_10]
.text$mn:00008C72                 call    ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin(void)
.text$mn:00008C77                 mov     [ebp+var_48], eax
.text$mn:00008C7A                 mov     eax, [ebp+var_48]
.text$mn:00008C7D                 mov     [ebp+var_28], eax
.text$mn:00008C80                 mov     byte ptr [ebp+var_4], 6
.text$mn:00008C84                 sub     esp, 0Ch
.text$mn:00008C87                 mov     ecx, esp
.text$mn:00008C89                 mov     [ebp+var_90], esp
.text$mn:00008C8F                 mov     edx, [ebp+var_28]
.text$mn:00008C92                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00008C93                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008C98                 mov     [ebp+var_40], eax
.text$mn:00008C9B                 mov     eax, [ebp+var_40]
.text$mn:00008C9E                 mov     [ebp+var_70], eax
.text$mn:00008CA1                 mov     byte ptr [ebp+var_4], 7
.text$mn:00008CA5                 sub     esp, 0Ch
.text$mn:00008CA8                 mov     ecx, esp
.text$mn:00008CAA                 mov     [ebp+var_88], esp
.text$mn:00008CB0                 lea     edx, [ebp+arg_0]
.text$mn:00008CB3                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00008CB4                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008CB9                 mov     [ebp+var_30], eax
.text$mn:00008CBC                 mov     eax, [ebp+var_30]
.text$mn:00008CBF                 mov     [ebp+var_78], eax
.text$mn:00008CC2                 mov     byte ptr [ebp+var_4], 8
.text$mn:00008CC6                 mov     byte ptr [ebp+var_4], 6
.text$mn:00008CCA                 call    ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>)
.text$mn:00008CCF                 add     esp, 18h
.text$mn:00008CD2                 mov     [ebp+var_50], eax
.text$mn:00008CD5                 mov     ecx, [ebp+var_50]
.text$mn:00008CD8                 push    ecx
.text$mn:00008CD9                 mov     ecx, [ebp+var_10]
.text$mn:00008CDC                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00008CE1                 mov     byte ptr [ebp+var_4], 3
.text$mn:00008CE5                 lea     ecx, [ebp+var_A0]
.text$mn:00008CEB                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00008CF0                 jmp     loc_8DE5
.text$mn:00008CF5 ; ---------------------------------------------------------------------------
.text$mn:00008CF5
.text$mn:00008CF5 loc_8CF5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+43j
.text$mn:00008CF5                 lea     edx, [ebp+arg_18]
.text$mn:00008CF8                 push    edx             ; std::_Iterator_base12 *
.text$mn:00008CF9                 lea     ecx, [ebp+arg_24]
.text$mn:00008CFC                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008D01                 push    eax             ; Size
.text$mn:00008D02                 lea     ecx, [ebp+arg_18]
.text$mn:00008D05                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)
.text$mn:00008D0A                 push    eax             ; Src
.text$mn:00008D0B                 sub     esp, 0Ch
.text$mn:00008D0E                 mov     ecx, esp
.text$mn:00008D10                 mov     [ebp+var_94], esp
.text$mn:00008D16                 lea     eax, [ebp+arg_0]
.text$mn:00008D19                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00008D1A                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008D1F                 mov     [ebp+var_18], eax
.text$mn:00008D22                 mov     ecx, [ebp+var_18]
.text$mn:00008D25                 mov     [ebp+var_5C], ecx
.text$mn:00008D28                 mov     byte ptr [ebp+var_4], 9
.text$mn:00008D2C                 sub     esp, 0Ch
.text$mn:00008D2F                 mov     ecx, esp
.text$mn:00008D31                 mov     [ebp+var_64], esp
.text$mn:00008D34                 lea     edx, [ebp+arg_C]
.text$mn:00008D37                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00008D38                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008D3D                 mov     [ebp+var_1C], eax
.text$mn:00008D40                 mov     eax, [ebp+var_1C]
.text$mn:00008D43                 mov     [ebp+var_6C], eax
.text$mn:00008D46                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00008D4A                 mov     byte ptr [ebp+var_4], 3
.text$mn:00008D4E                 call    ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>)
.text$mn:00008D53                 add     esp, 18h
.text$mn:00008D56                 mov     [ebp+var_24], eax
.text$mn:00008D59                 mov     ecx, [ebp+var_24]
.text$mn:00008D5C                 push    ecx             ; size_t
.text$mn:00008D5D                 lea     edx, [ebp+var_AC]
.text$mn:00008D63                 push    edx
.text$mn:00008D64                 mov     ecx, [ebp+var_10]
.text$mn:00008D67                 call    ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::begin(void)
.text$mn:00008D6C                 mov     [ebp+var_2C], eax
.text$mn:00008D6F                 mov     eax, [ebp+var_2C]
.text$mn:00008D72                 mov     [ebp+var_34], eax
.text$mn:00008D75                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00008D79                 sub     esp, 0Ch
.text$mn:00008D7C                 mov     ecx, esp
.text$mn:00008D7E                 mov     [ebp+var_74], esp
.text$mn:00008D81                 mov     edx, [ebp+var_34]
.text$mn:00008D84                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00008D85                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008D8A                 mov     [ebp+var_3C], eax
.text$mn:00008D8D                 mov     eax, [ebp+var_3C]
.text$mn:00008D90                 mov     [ebp+var_7C], eax
.text$mn:00008D93                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00008D97                 sub     esp, 0Ch
.text$mn:00008D9A                 mov     ecx, esp
.text$mn:00008D9C                 mov     [ebp+var_84], esp
.text$mn:00008DA2                 lea     edx, [ebp+arg_0]
.text$mn:00008DA5                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00008DA6                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)
.text$mn:00008DAB                 mov     [ebp+var_44], eax
.text$mn:00008DAE                 mov     eax, [ebp+var_44]
.text$mn:00008DB1                 mov     [ebp+var_8C], eax
.text$mn:00008DB7                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00008DBB                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00008DBF                 call    ?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>)
.text$mn:00008DC4                 add     esp, 18h
.text$mn:00008DC7                 mov     [ebp+var_4C], eax
.text$mn:00008DCA                 mov     ecx, [ebp+var_4C]
.text$mn:00008DCD                 push    ecx             ; int
.text$mn:00008DCE                 mov     ecx, [ebp+var_10]
.text$mn:00008DD1                 call    ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IIPBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(uint,uint,char const *,uint)
.text$mn:00008DD6                 mov     byte ptr [ebp+var_4], 3
.text$mn:00008DDA                 lea     ecx, [ebp+var_AC]
.text$mn:00008DE0                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00008DE5
.text$mn:00008DE5 loc_8DE5:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+120j
.text$mn:00008DE5                 mov     edx, [ebp+var_10]
.text$mn:00008DE8                 mov     [ebp+var_14], edx
.text$mn:00008DEB                 mov     byte ptr [ebp+var_4], 2
.text$mn:00008DEF                 lea     ecx, [ebp+arg_0]
.text$mn:00008DF2                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00008DF7                 mov     byte ptr [ebp+var_4], 1
.text$mn:00008DFB                 lea     ecx, [ebp+arg_C]
.text$mn:00008DFE                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00008E03                 mov     byte ptr [ebp+var_4], 0
.text$mn:00008E07                 lea     ecx, [ebp+arg_18]
.text$mn:00008E0A                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00008E0F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008E16                 lea     ecx, [ebp+arg_24]
.text$mn:00008E19                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$mn:00008E1E                 mov     eax, [ebp+var_14]
.text$mn:00008E21                 mov     ecx, [ebp+var_C]
.text$mn:00008E24                 mov     large fs:0, ecx
.text$mn:00008E2B                 pop     ecx
.text$mn:00008E2C                 mov     esp, ebp
.text$mn:00008E2E                 pop     ebp
.text$mn:00008E2F                 retn    30h
.text$mn:00008E2F ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z endp
.text$mn:00008E2F
.text$mn:00008E2F ; ---------------------------------------------------------------------------
.text$mn:00008E32                 align 4
.text$mn:00008E32 _text$mn        ends
.text$mn:00008E32
.text$x:00008E34 ; ===========================================================================
.text$x:00008E34
.text$x:00008E34 ; Segment type: Pure code
.text$x:00008E34 ; Segment permissions: Read/Execute
.text$x:00008E34 _text$x         segment para public 'CODE' use32
.text$x:00008E34                 assume cs:_text$x
.text$x:00008E34                 ;org 8E34h
.text$x:00008E34 ; COMDAT (pick associative to section at 8BD0)
.text$x:00008E34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008E34
.text$x:00008E34 ; =============== S U B R O U T I N E =======================================
.text$x:00008E34
.text$x:00008E34
.text$x:00008E34 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$0 proc near
.text$x:00008E34                                         ; DATA XREF: .xdata$x:000093B8o
.text$x:00008E34                 lea     ecx, [ebp+2Ch]
.text$x:00008E37                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E37 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$0 endp
.text$x:00008E37
.text$x:00008E3C
.text$x:00008E3C ; =============== S U B R O U T I N E =======================================
.text$x:00008E3C
.text$x:00008E3C
.text$x:00008E3C __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$1 proc near
.text$x:00008E3C                                         ; DATA XREF: .xdata$x:000093C0o
.text$x:00008E3C                 lea     ecx, [ebp+20h]
.text$x:00008E3F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E3F __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$1 endp
.text$x:00008E3F
.text$x:00008E44
.text$x:00008E44 ; =============== S U B R O U T I N E =======================================
.text$x:00008E44
.text$x:00008E44
.text$x:00008E44 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$2 proc near
.text$x:00008E44                                         ; DATA XREF: .xdata$x:000093C8o
.text$x:00008E44                 lea     ecx, [ebp+14h]
.text$x:00008E47                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E47 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$2 endp
.text$x:00008E47
.text$x:00008E4C
.text$x:00008E4C ; =============== S U B R O U T I N E =======================================
.text$x:00008E4C
.text$x:00008E4C
.text$x:00008E4C __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$3 proc near
.text$x:00008E4C                                         ; DATA XREF: .xdata$x:000093D0o
.text$x:00008E4C                 lea     ecx, [ebp+8]
.text$x:00008E4F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E4F __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$3 endp
.text$x:00008E4F
.text$x:00008E54
.text$x:00008E54 ; =============== S U B R O U T I N E =======================================
.text$x:00008E54
.text$x:00008E54
.text$x:00008E54 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$4 proc near
.text$x:00008E54                                         ; DATA XREF: .xdata$x:000093D8o
.text$x:00008E54                 mov     ecx, [ebp-58h]
.text$x:00008E57                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E57 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$4 endp
.text$x:00008E57
.text$x:00008E5C
.text$x:00008E5C ; =============== S U B R O U T I N E =======================================
.text$x:00008E5C
.text$x:00008E5C
.text$x:00008E5C __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$5 proc near
.text$x:00008E5C                                         ; DATA XREF: .xdata$x:000093E0o
.text$x:00008E5C                 mov     ecx, [ebp-80h]
.text$x:00008E5F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E5F __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$5 endp
.text$x:00008E5F
.text$x:00008E64
.text$x:00008E64 ; =============== S U B R O U T I N E =======================================
.text$x:00008E64
.text$x:00008E64
.text$x:00008E64 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$6 proc near
.text$x:00008E64                                         ; DATA XREF: .xdata$x:000093E8o
.text$x:00008E64                 lea     ecx, [ebp-0A0h]
.text$x:00008E6A                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E6A __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$6 endp
.text$x:00008E6A
.text$x:00008E6F
.text$x:00008E6F ; =============== S U B R O U T I N E =======================================
.text$x:00008E6F
.text$x:00008E6F
.text$x:00008E6F __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$7 proc near
.text$x:00008E6F                                         ; DATA XREF: .xdata$x:000093F0o
.text$x:00008E6F                 mov     ecx, [ebp-90h]
.text$x:00008E75                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E75 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$7 endp
.text$x:00008E75
.text$x:00008E7A
.text$x:00008E7A ; =============== S U B R O U T I N E =======================================
.text$x:00008E7A
.text$x:00008E7A
.text$x:00008E7A __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$8 proc near
.text$x:00008E7A                                         ; DATA XREF: .xdata$x:000093F8o
.text$x:00008E7A                 mov     ecx, [ebp-88h]
.text$x:00008E80                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E80 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$8 endp
.text$x:00008E80
.text$x:00008E85
.text$x:00008E85 ; =============== S U B R O U T I N E =======================================
.text$x:00008E85
.text$x:00008E85
.text$x:00008E85 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$9 proc near
.text$x:00008E85                                         ; DATA XREF: .xdata$x:00009400o
.text$x:00008E85                 mov     ecx, [ebp-94h]
.text$x:00008E8B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E8B __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$9 endp
.text$x:00008E8B
.text$x:00008E90
.text$x:00008E90 ; =============== S U B R O U T I N E =======================================
.text$x:00008E90
.text$x:00008E90
.text$x:00008E90 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$10 proc near
.text$x:00008E90                                         ; DATA XREF: .xdata$x:00009408o
.text$x:00008E90                 mov     ecx, [ebp-64h]
.text$x:00008E93                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E93 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$10 endp
.text$x:00008E93
.text$x:00008E98
.text$x:00008E98 ; =============== S U B R O U T I N E =======================================
.text$x:00008E98
.text$x:00008E98
.text$x:00008E98 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$11 proc near
.text$x:00008E98                                         ; DATA XREF: .xdata$x:00009410o
.text$x:00008E98                 lea     ecx, [ebp-0ACh]
.text$x:00008E9E                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008E9E __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$11 endp
.text$x:00008E9E
.text$x:00008EA3
.text$x:00008EA3 ; =============== S U B R O U T I N E =======================================
.text$x:00008EA3
.text$x:00008EA3
.text$x:00008EA3 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$12 proc near
.text$x:00008EA3                                         ; DATA XREF: .xdata$x:00009418o
.text$x:00008EA3                 mov     ecx, [ebp-74h]
.text$x:00008EA6                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008EA6 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$12 endp
.text$x:00008EA6
.text$x:00008EAB
.text$x:00008EAB ; =============== S U B R O U T I N E =======================================
.text$x:00008EAB
.text$x:00008EAB
.text$x:00008EAB __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$13 proc near
.text$x:00008EAB                                         ; DATA XREF: .xdata$x:00009420o
.text$x:00008EAB                 mov     ecx, [ebp-84h]
.text$x:00008EB1                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<char>>>(void)
.text$x:00008EB1 __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$13 endp
.text$x:00008EB1
.text$x:00008EB6
.text$x:00008EB6 ; =============== S U B R O U T I N E =======================================
.text$x:00008EB6
.text$x:00008EB6
.text$x:00008EB6 __ehhandler$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z proc near
.text$x:00008EB6                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+5o
.text$x:00008EB6
.text$x:00008EB6 arg_4           = dword ptr  8
.text$x:00008EB6
.text$x:00008EB6                 mov     edx, [esp+arg_4]
.text$x:00008EBA                 lea     eax, [edx+0Ch]
.text$x:00008EBD                 mov     ecx, [edx-0A4h]
.text$x:00008EC3                 xor     ecx, eax
.text$x:00008EC5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008ECA                 mov     eax, offset __ehfuncinfo$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z
.text$x:00008ECF                 jmp     ___CxxFrameHandler3
.text$x:00008ECF __ehhandler$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z endp
.text$x:00008ECF
.text$x:00008ECF _text$x         ends
.text$x:00008ECF
.text$mn:00008ED4 ; ===========================================================================
.text$mn:00008ED4
.text$mn:00008ED4 ; Segment type: Pure code
.text$mn:00008ED4 ; Segment permissions: Read/Execute
.text$mn:00008ED4 _text$mn        segment para public 'CODE' use32
.text$mn:00008ED4                 assume cs:_text$mn
.text$mn:00008ED4                 ;org 8ED4h
.text$mn:00008ED4 ; COMDAT (pick any)
.text$mn:00008ED4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008ED4
.text$mn:00008ED4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008ED4
.text$mn:00008ED4 ; Attributes: bp-based frame
.text$mn:00008ED4
.text$mn:00008ED4 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::reserve(unsigned int)
.text$mn:00008ED4                 public ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:00008ED4 ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:00008ED4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+E2p
.text$mn:00008ED4
.text$mn:00008ED4 var_8           = dword ptr -8
.text$mn:00008ED4 var_4           = dword ptr -4
.text$mn:00008ED4 arg_0           = dword ptr  8
.text$mn:00008ED4
.text$mn:00008ED4                 push    ebp
.text$mn:00008ED5                 mov     ebp, esp
.text$mn:00008ED7                 sub     esp, 8
.text$mn:00008EDA                 mov     [ebp+var_4], ecx
.text$mn:00008EDD                 mov     eax, [ebp+var_4]
.text$mn:00008EE0                 mov     ecx, [eax+14h]
.text$mn:00008EE3                 cmp     ecx, [ebp+arg_0]
.text$mn:00008EE6                 ja      short loc_8F1D
.text$mn:00008EE8                 mov     edx, [ebp+var_4]
.text$mn:00008EEB                 mov     eax, [edx+18h]
.text$mn:00008EEE                 cmp     eax, [ebp+arg_0]
.text$mn:00008EF1                 jz      short loc_8F1D
.text$mn:00008EF3                 mov     ecx, [ebp+var_4]
.text$mn:00008EF6                 mov     edx, [ecx+14h]
.text$mn:00008EF9                 mov     [ebp+var_8], edx
.text$mn:00008EFC                 push    1
.text$mn:00008EFE                 mov     eax, [ebp+arg_0]
.text$mn:00008F01                 push    eax
.text$mn:00008F02                 mov     ecx, [ebp+var_4]
.text$mn:00008F05                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:00008F0A                 movzx   ecx, al
.text$mn:00008F0D                 test    ecx, ecx
.text$mn:00008F0F                 jz      short loc_8F1D
.text$mn:00008F11                 mov     edx, [ebp+var_8]
.text$mn:00008F14                 push    edx
.text$mn:00008F15                 mov     ecx, [ebp+var_4]
.text$mn:00008F18                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008F1D
.text$mn:00008F1D loc_8F1D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)+12j
.text$mn:00008F1D                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::reserve(uint)+1Dj ...
.text$mn:00008F1D                 mov     esp, ebp
.text$mn:00008F1F                 pop     ebp
.text$mn:00008F20                 retn    4
.text$mn:00008F20 ?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:00008F20
.text$mn:00008F20 ; ---------------------------------------------------------------------------
.text$mn:00008F23                 align 4
.text$mn:00008F23 _text$mn        ends
.text$mn:00008F23
.text$mn:00008F24 ; ===========================================================================
.text$mn:00008F24
.text$mn:00008F24 ; Segment type: Pure code
.text$mn:00008F24 ; Segment permissions: Read/Execute
.text$mn:00008F24 _text$mn        segment para public 'CODE' use32
.text$mn:00008F24                 assume cs:_text$mn
.text$mn:00008F24                 ;org 8F24h
.text$mn:00008F24 ; COMDAT (pick any)
.text$mn:00008F24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F24
.text$mn:00008F24 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F24
.text$mn:00008F24 ; Attributes: bp-based frame
.text$mn:00008F24
.text$mn:00008F24 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:00008F24                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:00008F24 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:00008F24                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:00008F24
.text$mn:00008F24 var_8           = dword ptr -8
.text$mn:00008F24 var_1           = byte ptr -1
.text$mn:00008F24 arg_0           = dword ptr  8
.text$mn:00008F24
.text$mn:00008F24                 push    ebp
.text$mn:00008F25                 mov     ebp, esp
.text$mn:00008F27                 sub     esp, 8
.text$mn:00008F2A                 mov     [ebp+var_8], ecx
.text$mn:00008F2D                 mov     eax, [ebp+var_8]
.text$mn:00008F30                 push    eax
.text$mn:00008F31                 lea     ecx, [ebp+var_1]
.text$mn:00008F34                 push    ecx
.text$mn:00008F35                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:00008F3A                 add     esp, 8
.text$mn:00008F3D                 push    eax
.text$mn:00008F3E                 mov     ecx, [ebp+arg_0]
.text$mn:00008F41                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:00008F46                 mov     eax, [ebp+arg_0]
.text$mn:00008F49                 mov     esp, ebp
.text$mn:00008F4B                 pop     ebp
.text$mn:00008F4C                 retn    4
.text$mn:00008F4C ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:00008F4C
.text$mn:00008F4C ; ---------------------------------------------------------------------------
.text$mn:00008F4F                 align 10h
.text$mn:00008F4F _text$mn        ends
.text$mn:00008F4F
.text$mn:00008F50 ; ===========================================================================
.text$mn:00008F50
.text$mn:00008F50 ; Segment type: Pure code
.text$mn:00008F50 ; Segment permissions: Read/Execute
.text$mn:00008F50 _text$mn        segment para public 'CODE' use32
.text$mn:00008F50                 assume cs:_text$mn
.text$mn:00008F50                 ;org 8F50h
.text$mn:00008F50 ; COMDAT (pick any)
.text$mn:00008F50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F50
.text$mn:00008F50 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F50
.text$mn:00008F50 ; Attributes: bp-based frame
.text$mn:00008F50
.text$mn:00008F50 ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:00008F50                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:00008F50 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:00008F50                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:00008F50
.text$mn:00008F50 var_4           = dword ptr -4
.text$mn:00008F50 arg_0           = dword ptr  8
.text$mn:00008F50
.text$mn:00008F50                 push    ebp
.text$mn:00008F51                 mov     ebp, esp
.text$mn:00008F53                 push    ecx
.text$mn:00008F54                 mov     [ebp+var_4], ecx
.text$mn:00008F57                 mov     eax, [ebp+var_4]
.text$mn:00008F5A                 push    eax
.text$mn:00008F5B                 mov     ecx, [ebp+arg_0]
.text$mn:00008F5E                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00008F63                 mov     eax, [ebp+arg_0]
.text$mn:00008F66                 mov     esp, ebp
.text$mn:00008F68                 pop     ebp
.text$mn:00008F69                 retn    4
.text$mn:00008F69 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:00008F69
.text$mn:00008F69 _text$mn        ends
.text$mn:00008F69
.text$mn:00008F6C ; ===========================================================================
.text$mn:00008F6C
.text$mn:00008F6C ; Segment type: Pure code
.text$mn:00008F6C ; Segment permissions: Read/Execute
.text$mn:00008F6C _text$mn        segment para public 'CODE' use32
.text$mn:00008F6C                 assume cs:_text$mn
.text$mn:00008F6C                 ;org 8F6Ch
.text$mn:00008F6C ; COMDAT (pick any)
.text$mn:00008F6C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F6C
.text$mn:00008F6C ; =============== S U B R O U T I N E =======================================
.text$mn:00008F6C
.text$mn:00008F6C ; Attributes: bp-based frame
.text$mn:00008F6C
.text$mn:00008F6C ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:00008F6C                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:00008F6C ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:00008F6C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:00008F6C
.text$mn:00008F6C arg_0           = dword ptr  8
.text$mn:00008F6C arg_4           = dword ptr  0Ch
.text$mn:00008F6C
.text$mn:00008F6C                 push    ebp
.text$mn:00008F6D                 mov     ebp, esp
.text$mn:00008F6F                 mov     eax, [ebp+arg_0]
.text$mn:00008F72                 push    eax
.text$mn:00008F73                 mov     ecx, [ebp+arg_4]
.text$mn:00008F76                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:00008F7B                 mov     eax, [ebp+arg_0]
.text$mn:00008F7E                 pop     ebp
.text$mn:00008F7F                 retn
.text$mn:00008F7F ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:00008F7F
.text$mn:00008F7F _text$mn        ends
.text$mn:00008F7F
.text$mn:00008F80 ; ===========================================================================
.text$mn:00008F80
.text$mn:00008F80 ; Segment type: Pure code
.text$mn:00008F80 ; Segment permissions: Read/Execute
.text$mn:00008F80 _text$mn        segment para public 'CODE' use32
.text$mn:00008F80                 assume cs:_text$mn
.text$mn:00008F80                 ;org 8F80h
.text$mn:00008F80 ; COMDAT (pick any)
.text$mn:00008F80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F80
.text$mn:00008F80 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F80
.text$mn:00008F80 ; Attributes: bp-based frame
.text$mn:00008F80
.text$mn:00008F80 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:00008F80                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00008F80 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00008F80                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:00008F80                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p ...
.text$mn:00008F80
.text$mn:00008F80 var_4           = dword ptr -4
.text$mn:00008F80
.text$mn:00008F80                 push    ebp
.text$mn:00008F81                 mov     ebp, esp
.text$mn:00008F83                 push    ecx
.text$mn:00008F84                 mov     [ebp+var_4], ecx
.text$mn:00008F87                 mov     eax, [ebp+var_4]
.text$mn:00008F8A                 mov     eax, [eax+14h]
.text$mn:00008F8D                 mov     esp, ebp
.text$mn:00008F8F                 pop     ebp
.text$mn:00008F90                 retn
.text$mn:00008F90 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00008F90
.text$mn:00008F90 ; ---------------------------------------------------------------------------
.text$mn:00008F91                 align 4
.text$mn:00008F91 _text$mn        ends
.text$mn:00008F91
.text$mn:00008F94 ; ===========================================================================
.text$mn:00008F94
.text$mn:00008F94 ; Segment type: Pure code
.text$mn:00008F94 ; Segment permissions: Read/Execute
.text$mn:00008F94 _text$mn        segment para public 'CODE' use32
.text$mn:00008F94                 assume cs:_text$mn
.text$mn:00008F94                 ;org 8F94h
.text$mn:00008F94 ; COMDAT (pick any)
.text$mn:00008F94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F94
.text$mn:00008F94 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F94
.text$mn:00008F94 ; Attributes: bp-based frame
.text$mn:00008F94
.text$mn:00008F94 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:00008F94                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00008F94 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00008F94                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:00008F94                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p
.text$mn:00008F94
.text$mn:00008F94 var_4           = dword ptr -4
.text$mn:00008F94
.text$mn:00008F94                 push    ebp
.text$mn:00008F95                 mov     ebp, esp
.text$mn:00008F97                 push    ecx
.text$mn:00008F98                 mov     [ebp+var_4], ecx
.text$mn:00008F9B                 mov     eax, [ebp+var_4]
.text$mn:00008F9E                 mov     eax, [eax+14h]
.text$mn:00008FA1                 mov     esp, ebp
.text$mn:00008FA3                 pop     ebp
.text$mn:00008FA4                 retn
.text$mn:00008FA4 ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00008FA4
.text$mn:00008FA4 ; ---------------------------------------------------------------------------
.text$mn:00008FA5                 align 4
.text$mn:00008FA5 _text$mn        ends
.text$mn:00008FA5
.text$mn:00008FA8 ; ===========================================================================
.text$mn:00008FA8
.text$mn:00008FA8 ; Segment type: Pure code
.text$mn:00008FA8 ; Segment permissions: Read/Execute
.text$mn:00008FA8 _text$mn        segment para public 'CODE' use32
.text$mn:00008FA8                 assume cs:_text$mn
.text$mn:00008FA8                 ;org 8FA8h
.text$mn:00008FA8 ; COMDAT (pick any)
.text$mn:00008FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FA8
.text$mn:00008FA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FA8
.text$mn:00008FA8 ; Attributes: bp-based frame
.text$mn:00008FA8
.text$mn:00008FA8 ; public: unsigned int __thiscall std::vector<int, class std::allocator<int>>::size(void)const
.text$mn:00008FA8                 public ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
.text$mn:00008FA8 ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
.text$mn:00008FA8                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+A55p
.text$mn:00008FA8                                         ; std::vector<int,std::allocator<int>>::operator[](uint)+Ap
.text$mn:00008FA8
.text$mn:00008FA8 var_4           = dword ptr -4
.text$mn:00008FA8
.text$mn:00008FA8                 push    ebp
.text$mn:00008FA9                 mov     ebp, esp
.text$mn:00008FAB                 push    ecx
.text$mn:00008FAC                 mov     [ebp+var_4], ecx
.text$mn:00008FAF                 mov     eax, [ebp+var_4]
.text$mn:00008FB2                 mov     ecx, [ebp+var_4]
.text$mn:00008FB5                 mov     eax, [eax+8]
.text$mn:00008FB8                 sub     eax, [ecx+4]
.text$mn:00008FBB                 sar     eax, 2
.text$mn:00008FBE                 mov     esp, ebp
.text$mn:00008FC0                 pop     ebp
.text$mn:00008FC1                 retn
.text$mn:00008FC1 ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ endp
.text$mn:00008FC1
.text$mn:00008FC1 ; ---------------------------------------------------------------------------
.text$mn:00008FC2                 align 4
.text$mn:00008FC2 _text$mn        ends
.text$mn:00008FC2
.text$mn:00008FC4 ; ===========================================================================
.text$mn:00008FC4
.text$mn:00008FC4 ; Segment type: Pure code
.text$mn:00008FC4 ; Segment permissions: Read/Execute
.text$mn:00008FC4 _text$mn        segment para public 'CODE' use32
.text$mn:00008FC4                 assume cs:_text$mn
.text$mn:00008FC4                 ;org 8FC4h
.text$mn:00008FC4 ; COMDAT (pick any)
.text$mn:00008FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FC4
.text$mn:00008FC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FC4
.text$mn:00008FC4 ; Attributes: bp-based frame
.text$mn:00008FC4
.text$mn:00008FC4 ; public: unsigned int __thiscall std::vector<struct HWND__ *, class std::allocator<struct HWND__ *>>::size(void)const
.text$mn:00008FC4                 public ?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ
.text$mn:00008FC4 ?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ proc near
.text$mn:00008FC4                                         ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+19p
.text$mn:00008FC4                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+Ap
.text$mn:00008FC4
.text$mn:00008FC4 var_4           = dword ptr -4
.text$mn:00008FC4
.text$mn:00008FC4                 push    ebp
.text$mn:00008FC5                 mov     ebp, esp
.text$mn:00008FC7                 push    ecx
.text$mn:00008FC8                 mov     [ebp+var_4], ecx
.text$mn:00008FCB                 mov     eax, [ebp+var_4]
.text$mn:00008FCE                 mov     ecx, [ebp+var_4]
.text$mn:00008FD1                 mov     eax, [eax+8]
.text$mn:00008FD4                 sub     eax, [ecx+4]
.text$mn:00008FD7                 sar     eax, 2
.text$mn:00008FDA                 mov     esp, ebp
.text$mn:00008FDC                 pop     ebp
.text$mn:00008FDD                 retn
.text$mn:00008FDD ?size@?$vector@PAUHWND__@@V?$allocator@PAUHWND__@@@std@@@std@@QBEIXZ endp
.text$mn:00008FDD
.text$mn:00008FDD ; ---------------------------------------------------------------------------
.text$mn:00008FDE                 align 10h
.text$mn:00008FDE _text$mn        ends
.text$mn:00008FDE
.text$mn:00008FE0 ; ===========================================================================
.text$mn:00008FE0
.text$mn:00008FE0 ; Segment type: Pure code
.text$mn:00008FE0 ; Segment permissions: Read/Execute
.text$mn:00008FE0 _text$mn        segment para public 'CODE' use32
.text$mn:00008FE0                 assume cs:_text$mn
.text$mn:00008FE0                 ;org 8FE0h
.text$mn:00008FE0 ; COMDAT (pick any)
.text$mn:00008FE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008FE0
.text$mn:00008FE0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008FE0
.text$mn:00008FE0 ; Attributes: bp-based frame
.text$mn:00008FE0
.text$mn:00008FE0 ; public: unsigned int __thiscall std::vector<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>, class std::allocator<struct std::pair<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>>::size(void)const
.text$mn:00008FE0                 public ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ
.text$mn:00008FE0 ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ proc near
.text$mn:00008FE0                                         ; CODE XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+Ap
.text$mn:00008FE0                                         ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Reallocate(uint)+A9p ...
.text$mn:00008FE0
.text$mn:00008FE0 var_4           = dword ptr -4
.text$mn:00008FE0
.text$mn:00008FE0                 push    ebp
.text$mn:00008FE1                 mov     ebp, esp
.text$mn:00008FE3                 push    ecx
.text$mn:00008FE4                 mov     [ebp+var_4], ecx
.text$mn:00008FE7                 mov     eax, [ebp+var_4]
.text$mn:00008FEA                 mov     ecx, [ebp+var_4]
.text$mn:00008FED                 mov     eax, [eax+8]
.text$mn:00008FF0                 sub     eax, [ecx+4]
.text$mn:00008FF3                 cdq
.text$mn:00008FF4                 mov     ecx, 38h ; '8'
.text$mn:00008FF9                 idiv    ecx
.text$mn:00008FFB                 mov     esp, ebp
.text$mn:00008FFD                 pop     ebp
.text$mn:00008FFE                 retn
.text$mn:00008FFE ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ endp
.text$mn:00008FFE
.text$mn:00008FFE ; ---------------------------------------------------------------------------
.text$mn:00008FFF                 align 10h
.text$mn:00008FFF _text$mn        ends
.text$mn:00008FFF
.text$mn:00009000 ; ===========================================================================
.text$mn:00009000
.text$mn:00009000 ; Segment type: Pure code
.text$mn:00009000 ; Segment permissions: Read/Execute
.text$mn:00009000 _text$mn        segment para public 'CODE' use32
.text$mn:00009000                 assume cs:_text$mn
.text$mn:00009000                 ;org 9000h
.text$mn:00009000 ; COMDAT (pick any)
.text$mn:00009000                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009000
.text$mn:00009000 ; =============== S U B R O U T I N E =======================================
.text$mn:00009000
.text$mn:00009000 ; Attributes: bp-based frame
.text$mn:00009000
.text$mn:00009000 ; public: unsigned int __thiscall std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::size(void)const
.text$mn:00009000                 public ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ
.text$mn:00009000 ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ proc near
.text$mn:00009000                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+6BBp
.text$mn:00009000                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+831p ...
.text$mn:00009000
.text$mn:00009000 var_4           = dword ptr -4
.text$mn:00009000
.text$mn:00009000                 push    ebp
.text$mn:00009001                 mov     ebp, esp
.text$mn:00009003                 push    ecx
.text$mn:00009004                 mov     [ebp+var_4], ecx
.text$mn:00009007                 mov     eax, [ebp+var_4]
.text$mn:0000900A                 mov     ecx, [ebp+var_4]
.text$mn:0000900D                 mov     eax, [eax+8]
.text$mn:00009010                 sub     eax, [ecx+4]
.text$mn:00009013                 cdq
.text$mn:00009014                 mov     ecx, 1Ch
.text$mn:00009019                 idiv    ecx
.text$mn:0000901B                 mov     esp, ebp
.text$mn:0000901D                 pop     ebp
.text$mn:0000901E                 retn
.text$mn:0000901E ?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ endp
.text$mn:0000901E
.text$mn:0000901E ; ---------------------------------------------------------------------------
.text$mn:0000901F                 align 10h
.text$mn:0000901F _text$mn        ends
.text$mn:0000901F
.text$mn:00009020 ; ===========================================================================
.text$mn:00009020
.text$mn:00009020 ; Segment type: Pure code
.text$mn:00009020 ; Segment permissions: Read/Execute
.text$mn:00009020 _text$mn        segment para public 'CODE' use32
.text$mn:00009020                 assume cs:_text$mn
.text$mn:00009020                 ;org 9020h
.text$mn:00009020 ; COMDAT (pick any)
.text$mn:00009020                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009020
.text$mn:00009020 ; =============== S U B R O U T I N E =======================================
.text$mn:00009020
.text$mn:00009020 ; Attributes: bp-based frame
.text$mn:00009020
.text$mn:00009020 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:00009020                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:00009020 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00009020                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_7BDCp
.text$mn:00009020                 push    ebp
.text$mn:00009021                 mov     ebp, esp
.text$mn:00009023                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:00009028                 pop     ebp
.text$mn:00009029                 retn
.text$mn:00009029 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00009029
.text$mn:00009029 ; ---------------------------------------------------------------------------
.text$mn:0000902A                 align 4
.text$mn:0000902A _text$mn        ends
.text$mn:0000902A
.text$mn:0000902C ; ===========================================================================
.text$mn:0000902C
.text$mn:0000902C ; Segment type: Pure code
.text$mn:0000902C ; Segment permissions: Read/Execute
.text$mn:0000902C _text$mn        segment para public 'CODE' use32
.text$mn:0000902C                 assume cs:_text$mn
.text$mn:0000902C                 ;org 902Ch
.text$mn:0000902C ; COMDAT (pick any)
.text$mn:0000902C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000902C
.text$mn:0000902C ; =============== S U B R O U T I N E =======================================
.text$mn:0000902C
.text$mn:0000902C ; Attributes: bp-based frame
.text$mn:0000902C
.text$mn:0000902C ; bool __thiscall ThemeSwitcher::themeNameExists(ThemeSwitcher *this, const wchar_t *)
.text$mn:0000902C                 public ?themeNameExists@ThemeSwitcher@@QAE_NPB_W@Z
.text$mn:0000902C ?themeNameExists@ThemeSwitcher@@QAE_NPB_W@Z proc near
.text$mn:0000902C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+9D0p
.text$mn:0000902C
.text$mn:0000902C var_8           = dword ptr -8
.text$mn:0000902C var_4           = dword ptr -4
.text$mn:0000902C Str             = dword ptr  8
.text$mn:0000902C
.text$mn:0000902C                 push    ebp
.text$mn:0000902D                 mov     ebp, esp
.text$mn:0000902F                 sub     esp, 8
.text$mn:00009032                 mov     [ebp+var_8], ecx
.text$mn:00009035                 mov     [ebp+var_4], 0
.text$mn:0000903C                 jmp     short loc_9047
.text$mn:0000903E ; ---------------------------------------------------------------------------
.text$mn:0000903E
.text$mn:0000903E loc_903E:                               ; CODE XREF: ThemeSwitcher::themeNameExists(wchar_t const *):loc_9073j
.text$mn:0000903E                 mov     eax, [ebp+var_4]
.text$mn:00009041                 add     eax, 1
.text$mn:00009044                 mov     [ebp+var_4], eax
.text$mn:00009047
.text$mn:00009047 loc_9047:                               ; CODE XREF: ThemeSwitcher::themeNameExists(wchar_t const *)+10j
.text$mn:00009047                 mov     ecx, [ebp+var_8]
.text$mn:0000904A                 call    ?size@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::size(void)
.text$mn:0000904F                 cmp     [ebp+var_4], eax
.text$mn:00009052                 jnb     short loc_9075
.text$mn:00009054                 mov     ecx, [ebp+Str]
.text$mn:00009057                 push    ecx             ; Str
.text$mn:00009058                 mov     edx, [ebp+var_4]
.text$mn:0000905B                 push    edx
.text$mn:0000905C                 mov     ecx, [ebp+var_8]
.text$mn:0000905F                 call    ?getElementFromIndex@ThemeSwitcher@@QAEAAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@I@Z ; ThemeSwitcher::getElementFromIndex(uint)
.text$mn:00009064                 mov     ecx, eax
.text$mn:00009066                 call    ?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEHPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::compare(wchar_t const *)
.text$mn:0000906B                 test    eax, eax
.text$mn:0000906D                 jnz     short loc_9073
.text$mn:0000906F                 mov     al, 1
.text$mn:00009071                 jmp     short loc_9077
.text$mn:00009073 ; ---------------------------------------------------------------------------
.text$mn:00009073
.text$mn:00009073 loc_9073:                               ; CODE XREF: ThemeSwitcher::themeNameExists(wchar_t const *)+41j
.text$mn:00009073                 jmp     short loc_903E
.text$mn:00009075 ; ---------------------------------------------------------------------------
.text$mn:00009075
.text$mn:00009075 loc_9075:                               ; CODE XREF: ThemeSwitcher::themeNameExists(wchar_t const *)+26j
.text$mn:00009075                 xor     al, al
.text$mn:00009077
.text$mn:00009077 loc_9077:                               ; CODE XREF: ThemeSwitcher::themeNameExists(wchar_t const *)+45j
.text$mn:00009077                 mov     esp, ebp
.text$mn:00009079                 pop     ebp
.text$mn:0000907A                 retn    4
.text$mn:0000907A ?themeNameExists@ThemeSwitcher@@QAE_NPB_W@Z endp
.text$mn:0000907A
.text$mn:0000907A ; ---------------------------------------------------------------------------
.text$mn:0000907D                 align 10h
.text$mn:0000907D _text$mn        ends
.text$mn:0000907D
.text$mn:00009080 ; ===========================================================================
.text$mn:00009080
.text$mn:00009080 ; Segment type: Pure code
.text$mn:00009080 ; Segment permissions: Read/Execute
.text$mn:00009080 _text$mn        segment para public 'CODE' use32
.text$mn:00009080                 assume cs:_text$mn
.text$mn:00009080                 ;org 9080h
.text$mn:00009080 ; COMDAT (pick any)
.text$mn:00009080                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009080
.text$mn:00009080 ; =============== S U B R O U T I N E =======================================
.text$mn:00009080
.text$mn:00009080 ; Attributes: bp-based frame
.text$mn:00009080
.text$mn:00009080 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:00009080                 public ?value@error_code@std@@QBEHXZ
.text$mn:00009080 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:00009080
.text$mn:00009080 var_4           = dword ptr -4
.text$mn:00009080
.text$mn:00009080                 push    ebp
.text$mn:00009081                 mov     ebp, esp
.text$mn:00009083                 push    ecx
.text$mn:00009084                 mov     [ebp+var_4], ecx
.text$mn:00009087                 mov     eax, [ebp+var_4]
.text$mn:0000908A                 mov     eax, [eax]
.text$mn:0000908C                 mov     esp, ebp
.text$mn:0000908E                 pop     ebp
.text$mn:0000908F                 retn
.text$mn:0000908F ?value@error_code@std@@QBEHXZ endp
.text$mn:0000908F
.text$mn:0000908F _text$mn        ends
.text$mn:0000908F
.text$mn:00009090 ; ===========================================================================
.text$mn:00009090
.text$mn:00009090 ; Segment type: Pure code
.text$mn:00009090 ; Segment permissions: Read/Execute
.text$mn:00009090 _text$mn        segment para public 'CODE' use32
.text$mn:00009090                 assume cs:_text$mn
.text$mn:00009090                 ;org 9090h
.text$mn:00009090 ; COMDAT (pick any)
.text$mn:00009090                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009090
.text$mn:00009090 ; =============== S U B R O U T I N E =======================================
.text$mn:00009090
.text$mn:00009090 ; Attributes: bp-based frame
.text$mn:00009090
.text$mn:00009090 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:00009090                 public ?value@error_condition@std@@QBEHXZ
.text$mn:00009090 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:00009090                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:00009090                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:00009090
.text$mn:00009090 var_4           = dword ptr -4
.text$mn:00009090
.text$mn:00009090                 push    ebp
.text$mn:00009091                 mov     ebp, esp
.text$mn:00009093                 push    ecx
.text$mn:00009094                 mov     [ebp+var_4], ecx
.text$mn:00009097                 mov     eax, [ebp+var_4]
.text$mn:0000909A                 mov     eax, [eax]
.text$mn:0000909C                 mov     esp, ebp
.text$mn:0000909E                 pop     ebp
.text$mn:0000909F                 retn
.text$mn:0000909F ?value@error_condition@std@@QBEHXZ endp
.text$mn:0000909F
.text$mn:0000909F _text$mn        ends
.text$mn:0000909F
.text$mn:000090A0 ; ===========================================================================
.text$mn:000090A0
.text$mn:000090A0 ; Segment type: Pure code
.text$mn:000090A0 ; Segment permissions: Read/Execute
.text$mn:000090A0 _text$mn        segment para public 'CODE' use32
.text$mn:000090A0                 assume cs:_text$mn
.text$mn:000090A0                 ;org 90A0h
.text$mn:000090A0 ; COMDAT (pick any)
.text$mn:000090A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090A0
.text$mn:000090A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000090A0
.text$mn:000090A0 ; Attributes: bp-based frame
.text$mn:000090A0
.text$mn:000090A0                 public _hypot
.text$mn:000090A0 _hypot          proc near
.text$mn:000090A0
.text$mn:000090A0 var_10          = qword ptr -10h
.text$mn:000090A0 var_8           = qword ptr -8
.text$mn:000090A0 arg_0           = qword ptr  8
.text$mn:000090A0 arg_8           = qword ptr  10h
.text$mn:000090A0
.text$mn:000090A0                 push    ebp
.text$mn:000090A1                 mov     ebp, esp
.text$mn:000090A3                 sub     esp, 8
.text$mn:000090A6                 movsd   xmm0, [ebp+arg_8]
.text$mn:000090AB                 movsd   [esp+8+var_8], xmm0
.text$mn:000090B0                 sub     esp, 8
.text$mn:000090B3                 movsd   xmm0, [ebp+arg_0]
.text$mn:000090B8                 movsd   [esp+10h+var_10], xmm0
.text$mn:000090BD                 call    __hypot
.text$mn:000090C2                 add     esp, 10h
.text$mn:000090C5                 pop     ebp
.text$mn:000090C6                 retn
.text$mn:000090C6 _hypot          endp
.text$mn:000090C6
.text$mn:000090C6 ; ---------------------------------------------------------------------------
.text$mn:000090C7                 align 4
.text$mn:000090C7 _text$mn        ends
.text$mn:000090C7
.text$mn:000090C8 ; ===========================================================================
.text$mn:000090C8
.text$mn:000090C8 ; Segment type: Pure code
.text$mn:000090C8 ; Segment permissions: Read/Execute
.text$mn:000090C8 _text$mn        segment para public 'CODE' use32
.text$mn:000090C8                 assume cs:_text$mn
.text$mn:000090C8                 ;org 90C8h
.text$mn:000090C8 ; COMDAT (pick any)
.text$mn:000090C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090C8
.text$mn:000090C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000090C8
.text$mn:000090C8 ; Attributes: bp-based frame
.text$mn:000090C8
.text$mn:000090C8                 public _wmemcmp
.text$mn:000090C8 _wmemcmp        proc near               ; CODE XREF: std::char_traits<wchar_t>::compare(wchar_t const *,wchar_t const *,uint)+1Fp
.text$mn:000090C8
.text$mn:000090C8 var_4           = dword ptr -4
.text$mn:000090C8 arg_0           = dword ptr  8
.text$mn:000090C8 arg_4           = dword ptr  0Ch
.text$mn:000090C8 arg_8           = dword ptr  10h
.text$mn:000090C8
.text$mn:000090C8                 push    ebp
.text$mn:000090C9                 mov     ebp, esp
.text$mn:000090CB                 push    ecx
.text$mn:000090CC                 jmp     short loc_90E9
.text$mn:000090CE ; ---------------------------------------------------------------------------
.text$mn:000090CE
.text$mn:000090CE loc_90CE:                               ; CODE XREF: _wmemcmp:loc_9124j
.text$mn:000090CE                 mov     eax, [ebp+arg_0]
.text$mn:000090D1                 add     eax, 2
.text$mn:000090D4                 mov     [ebp+arg_0], eax
.text$mn:000090D7                 mov     ecx, [ebp+arg_4]
.text$mn:000090DA                 add     ecx, 2
.text$mn:000090DD                 mov     [ebp+arg_4], ecx
.text$mn:000090E0                 mov     edx, [ebp+arg_8]
.text$mn:000090E3                 sub     edx, 1
.text$mn:000090E6                 mov     [ebp+arg_8], edx
.text$mn:000090E9
.text$mn:000090E9 loc_90E9:                               ; CODE XREF: _wmemcmp+4j
.text$mn:000090E9                 cmp     [ebp+arg_8], 0
.text$mn:000090ED                 jbe     short loc_9126
.text$mn:000090EF                 mov     eax, [ebp+arg_0]
.text$mn:000090F2                 movzx   ecx, word ptr [eax]
.text$mn:000090F5                 mov     edx, [ebp+arg_4]
.text$mn:000090F8                 movzx   eax, word ptr [edx]
.text$mn:000090FB                 cmp     ecx, eax
.text$mn:000090FD                 jz      short loc_9124
.text$mn:000090FF                 mov     ecx, [ebp+arg_0]
.text$mn:00009102                 movzx   edx, word ptr [ecx]
.text$mn:00009105                 mov     eax, [ebp+arg_4]
.text$mn:00009108                 movzx   ecx, word ptr [eax]
.text$mn:0000910B                 cmp     edx, ecx
.text$mn:0000910D                 jge     short loc_9118
.text$mn:0000910F                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00009116                 jmp     short loc_911F
.text$mn:00009118 ; ---------------------------------------------------------------------------
.text$mn:00009118
.text$mn:00009118 loc_9118:                               ; CODE XREF: _wmemcmp+45j
.text$mn:00009118                 mov     [ebp+var_4], 1
.text$mn:0000911F
.text$mn:0000911F loc_911F:                               ; CODE XREF: _wmemcmp+4Ej
.text$mn:0000911F                 mov     eax, [ebp+var_4]
.text$mn:00009122                 jmp     short loc_9128
.text$mn:00009124 ; ---------------------------------------------------------------------------
.text$mn:00009124
.text$mn:00009124 loc_9124:                               ; CODE XREF: _wmemcmp+35j
.text$mn:00009124                 jmp     short loc_90CE
.text$mn:00009126 ; ---------------------------------------------------------------------------
.text$mn:00009126
.text$mn:00009126 loc_9126:                               ; CODE XREF: _wmemcmp+25j
.text$mn:00009126                 xor     eax, eax
.text$mn:00009128
.text$mn:00009128 loc_9128:                               ; CODE XREF: _wmemcmp+5Aj
.text$mn:00009128                 mov     esp, ebp
.text$mn:0000912A                 pop     ebp
.text$mn:0000912B                 retn
.text$mn:0000912B _wmemcmp        endp
.text$mn:0000912B
.text$mn:0000912B _text$mn        ends
.text$mn:0000912B
.text$mn:0000912C ; ===========================================================================
.text$mn:0000912C
.text$mn:0000912C ; Segment type: Pure code
.text$mn:0000912C ; Segment permissions: Read/Execute
.text$mn:0000912C _text$mn        segment para public 'CODE' use32
.text$mn:0000912C                 assume cs:_text$mn
.text$mn:0000912C                 ;org 912Ch
.text$mn:0000912C ; COMDAT (pick any)
.text$mn:0000912C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000912C
.text$mn:0000912C ; =============== S U B R O U T I N E =======================================
.text$mn:0000912C
.text$mn:0000912C ; Attributes: bp-based frame
.text$mn:0000912C
.text$mn:0000912C ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:0000912C                 public _wmemcpy
.text$mn:0000912C _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:0000912C
.text$mn:0000912C Dst             = dword ptr  8
.text$mn:0000912C Src             = dword ptr  0Ch
.text$mn:0000912C arg_8           = dword ptr  10h
.text$mn:0000912C
.text$mn:0000912C                 push    ebp
.text$mn:0000912D                 mov     ebp, esp
.text$mn:0000912F                 mov     eax, [ebp+arg_8]
.text$mn:00009132                 shl     eax, 1
.text$mn:00009134                 push    eax             ; Size
.text$mn:00009135                 mov     ecx, [ebp+Src]
.text$mn:00009138                 push    ecx             ; Src
.text$mn:00009139                 mov     edx, [ebp+Dst]
.text$mn:0000913C                 push    edx             ; Dst
.text$mn:0000913D                 call    _memcpy
.text$mn:00009142                 add     esp, 0Ch
.text$mn:00009145                 pop     ebp
.text$mn:00009146                 retn
.text$mn:00009146 _wmemcpy        endp
.text$mn:00009146
.text$mn:00009146 ; ---------------------------------------------------------------------------
.text$mn:00009147                 align 4
.text$mn:00009147 _text$mn        ends
.text$mn:00009147
.text$mn:00009148 ; ===========================================================================
.text$mn:00009148
.text$mn:00009148 ; Segment type: Pure code
.text$mn:00009148 ; Segment permissions: Read/Execute
.text$mn:00009148 _text$mn        segment para public 'CODE' use32
.text$mn:00009148                 assume cs:_text$mn
.text$mn:00009148                 ;org 9148h
.text$mn:00009148 ; COMDAT (pick any)
.text$mn:00009148                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009148
.text$mn:00009148 ; =============== S U B R O U T I N E =======================================
.text$mn:00009148
.text$mn:00009148 ; Attributes: bp-based frame
.text$mn:00009148
.text$mn:00009148 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:00009148                 public _wmemmove
.text$mn:00009148 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:00009148
.text$mn:00009148 Dst             = dword ptr  8
.text$mn:00009148 Src             = dword ptr  0Ch
.text$mn:00009148 arg_8           = dword ptr  10h
.text$mn:00009148
.text$mn:00009148                 push    ebp
.text$mn:00009149                 mov     ebp, esp
.text$mn:0000914B                 mov     eax, [ebp+arg_8]
.text$mn:0000914E                 shl     eax, 1
.text$mn:00009150                 push    eax             ; Size
.text$mn:00009151                 mov     ecx, [ebp+Src]
.text$mn:00009154                 push    ecx             ; Src
.text$mn:00009155                 mov     edx, [ebp+Dst]
.text$mn:00009158                 push    edx             ; Dst
.text$mn:00009159                 call    _memmove
.text$mn:0000915E                 add     esp, 0Ch
.text$mn:00009161                 pop     ebp
.text$mn:00009162                 retn
.text$mn:00009162 _wmemmove       endp
.text$mn:00009162
.text$mn:00009162 ; ---------------------------------------------------------------------------
.text$mn:00009163                 align 4
.text$mn:00009163 _text$mn        ends
.text$mn:00009163
.text$mn:00009164 ; ===========================================================================
.text$mn:00009164
.text$mn:00009164 ; Segment type: Pure code
.text$mn:00009164 ; Segment permissions: Read/Execute
.text$mn:00009164 _text$mn        segment para public 'CODE' use32
.text$mn:00009164                 assume cs:_text$mn
.text$mn:00009164                 ;org 9164h
.text$mn:00009164 ; COMDAT (pick any)
.text$mn:00009164                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009164
.text$mn:00009164 ; =============== S U B R O U T I N E =======================================
.text$mn:00009164
.text$mn:00009164 ; Attributes: bp-based frame
.text$mn:00009164
.text$mn:00009164                 public _wmemset
.text$mn:00009164 _wmemset        proc near               ; CODE XREF: std::char_traits<wchar_t>::assign(wchar_t *,uint,wchar_t)+10p
.text$mn:00009164
.text$mn:00009164 var_4           = dword ptr -4
.text$mn:00009164 arg_0           = dword ptr  8
.text$mn:00009164 arg_4           = word ptr  0Ch
.text$mn:00009164 arg_8           = dword ptr  10h
.text$mn:00009164
.text$mn:00009164                 push    ebp
.text$mn:00009165                 mov     ebp, esp
.text$mn:00009167                 push    ecx
.text$mn:00009168                 mov     eax, [ebp+arg_0]
.text$mn:0000916B                 mov     [ebp+var_4], eax
.text$mn:0000916E                 jmp     short loc_9182
.text$mn:00009170 ; ---------------------------------------------------------------------------
.text$mn:00009170
.text$mn:00009170 loc_9170:                               ; CODE XREF: _wmemset+2Ej
.text$mn:00009170                 mov     ecx, [ebp+var_4]
.text$mn:00009173                 add     ecx, 2
.text$mn:00009176                 mov     [ebp+var_4], ecx
.text$mn:00009179                 mov     edx, [ebp+arg_8]
.text$mn:0000917C                 sub     edx, 1
.text$mn:0000917F                 mov     [ebp+arg_8], edx
.text$mn:00009182
.text$mn:00009182 loc_9182:                               ; CODE XREF: _wmemset+Aj
.text$mn:00009182                 cmp     [ebp+arg_8], 0
.text$mn:00009186                 jbe     short loc_9194
.text$mn:00009188                 mov     eax, [ebp+var_4]
.text$mn:0000918B                 mov     cx, [ebp+arg_4]
.text$mn:0000918F                 mov     [eax], cx
.text$mn:00009192                 jmp     short loc_9170
.text$mn:00009194 ; ---------------------------------------------------------------------------
.text$mn:00009194
.text$mn:00009194 loc_9194:                               ; CODE XREF: _wmemset+22j
.text$mn:00009194                 mov     eax, [ebp+arg_0]
.text$mn:00009197                 mov     esp, ebp
.text$mn:00009199                 pop     ebp
.text$mn:0000919A                 retn
.text$mn:0000919A _wmemset        endp
.text$mn:0000919A
.text$mn:0000919A ; ---------------------------------------------------------------------------
.text$mn:0000919B                 align 4
.text$mn:0000919B _text$mn        ends
.text$mn:0000919B
.xdata$x:0000919C ; ===========================================================================
.xdata$x:0000919C
.xdata$x:0000919C ; Segment type: Pure data
.xdata$x:0000919C ; Segment permissions: Read
.xdata$x:0000919C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000919C                 assume cs:_xdata$x
.xdata$x:0000919C                 ;org 919Ch
.xdata$x:0000919C ; COMDAT (pick associative to section at 6684)
.xdata$x:0000919C __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:0000919C                                         ; DATA XREF: .xdata$x:000091ACo
.xdata$x:0000919D                 db 0FFh
.xdata$x:0000919E                 db 0FFh
.xdata$x:0000919F                 db 0FFh
.xdata$x:000091A0                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:000091A4 __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:000091A4                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:000091A5                 db    5
.xdata$x:000091A6                 db  93h ; ô
.xdata$x:000091A7                 db  19h
.xdata$x:000091A8                 db    1
.xdata$x:000091A9                 db    0
.xdata$x:000091AA                 db    0
.xdata$x:000091AB                 db    0
.xdata$x:000091AC                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:000091B0                 db    0
.xdata$x:000091B1                 db    0
.xdata$x:000091B2                 db    0
.xdata$x:000091B3                 db    0
.xdata$x:000091B4                 db    0
.xdata$x:000091B5                 db    0
.xdata$x:000091B6                 db    0
.xdata$x:000091B7                 db    0
.xdata$x:000091B8                 db    0
.xdata$x:000091B9                 db    0
.xdata$x:000091BA                 db    0
.xdata$x:000091BB                 db    0
.xdata$x:000091BC                 db    0
.xdata$x:000091BD                 db    0
.xdata$x:000091BE                 db    0
.xdata$x:000091BF                 db    0
.xdata$x:000091C0                 db    0
.xdata$x:000091C1                 db    0
.xdata$x:000091C2                 db    0
.xdata$x:000091C3                 db    0
.xdata$x:000091C4                 db    0
.xdata$x:000091C5                 db    0
.xdata$x:000091C6                 db    0
.xdata$x:000091C7                 db    0
.xdata$x:000091C7 _xdata$x        ends
.xdata$x:000091C7
.xdata$x:000091C8 ; ===========================================================================
.xdata$x:000091C8
.xdata$x:000091C8 ; Segment type: Pure data
.xdata$x:000091C8 ; Segment permissions: Read
.xdata$x:000091C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000091C8                 assume cs:_xdata$x
.xdata$x:000091C8                 ;org 91C8h
.xdata$x:000091C8 ; COMDAT (pick associative to section at 5008)
.xdata$x:000091C8 __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:000091C8                                         ; DATA XREF: .xdata$x:000091D8o
.xdata$x:000091C9                 db 0FFh
.xdata$x:000091CA                 db 0FFh
.xdata$x:000091CB                 db 0FFh
.xdata$x:000091CC                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:000091D0 __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:000091D0                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:000091D1                 db    5
.xdata$x:000091D2                 db  93h ; ô
.xdata$x:000091D3                 db  19h
.xdata$x:000091D4                 db    1
.xdata$x:000091D5                 db    0
.xdata$x:000091D6                 db    0
.xdata$x:000091D7                 db    0
.xdata$x:000091D8                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:000091DC                 db    0
.xdata$x:000091DD                 db    0
.xdata$x:000091DE                 db    0
.xdata$x:000091DF                 db    0
.xdata$x:000091E0                 db    0
.xdata$x:000091E1                 db    0
.xdata$x:000091E2                 db    0
.xdata$x:000091E3                 db    0
.xdata$x:000091E4                 db    0
.xdata$x:000091E5                 db    0
.xdata$x:000091E6                 db    0
.xdata$x:000091E7                 db    0
.xdata$x:000091E8                 db    0
.xdata$x:000091E9                 db    0
.xdata$x:000091EA                 db    0
.xdata$x:000091EB                 db    0
.xdata$x:000091EC                 db    0
.xdata$x:000091ED                 db    0
.xdata$x:000091EE                 db    0
.xdata$x:000091EF                 db    0
.xdata$x:000091F0                 db    0
.xdata$x:000091F1                 db    0
.xdata$x:000091F2                 db    0
.xdata$x:000091F3                 db    0
.xdata$x:000091F3 _xdata$x        ends
.xdata$x:000091F3
.xdata$x:000091F4 ; ===========================================================================
.xdata$x:000091F4
.xdata$x:000091F4 ; Segment type: Pure data
.xdata$x:000091F4 ; Segment permissions: Read
.xdata$x:000091F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000091F4                 assume cs:_xdata$x
.xdata$x:000091F4                 ;org 91F4h
.xdata$x:000091F4 ; COMDAT (pick associative to section at 4D20)
.xdata$x:000091F4 __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:000091F4                                         ; DATA XREF: .xdata$x:00009204o
.xdata$x:000091F5                 db 0FFh
.xdata$x:000091F6                 db 0FFh
.xdata$x:000091F7                 db 0FFh
.xdata$x:000091F8                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:000091FC __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:000091FC                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:000091FD                 db    5
.xdata$x:000091FE                 db  93h ; ô
.xdata$x:000091FF                 db  19h
.xdata$x:00009200                 db    1
.xdata$x:00009201                 db    0
.xdata$x:00009202                 db    0
.xdata$x:00009203                 db    0
.xdata$x:00009204                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:00009208                 align 20h
.xdata$x:00009208 _xdata$x        ends
.xdata$x:00009208
.xdata$x:00009220 ; ===========================================================================
.xdata$x:00009220
.xdata$x:00009220 ; Segment type: Pure data
.xdata$x:00009220 ; Segment permissions: Read
.xdata$x:00009220 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009220                 assume cs:_xdata$x
.xdata$x:00009220                 ;org 9220h
.xdata$x:00009220 ; COMDAT (pick associative to section at 58DC)
.xdata$x:00009220 __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:00009220                                         ; DATA XREF: .xdata$x:00009238o
.xdata$x:00009221                 db 0FFh
.xdata$x:00009222                 db 0FFh
.xdata$x:00009223                 db 0FFh
.xdata$x:00009224                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:00009228                 db 0FFh
.xdata$x:00009229                 db 0FFh
.xdata$x:0000922A                 db 0FFh
.xdata$x:0000922B                 db 0FFh
.xdata$x:0000922C                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:00009230 __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:00009230                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:00009231                 db    5
.xdata$x:00009232                 db  93h ; ô
.xdata$x:00009233                 db  19h
.xdata$x:00009234                 db    2
.xdata$x:00009235                 db    0
.xdata$x:00009236                 db    0
.xdata$x:00009237                 db    0
.xdata$x:00009238                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:0000923C                 db    0
.xdata$x:0000923D                 db    0
.xdata$x:0000923E                 db    0
.xdata$x:0000923F                 db    0
.xdata$x:00009240                 db    0
.xdata$x:00009241                 db    0
.xdata$x:00009242                 db    0
.xdata$x:00009243                 db    0
.xdata$x:00009244                 db    0
.xdata$x:00009245                 db    0
.xdata$x:00009246                 db    0
.xdata$x:00009247                 db    0
.xdata$x:00009248                 db    0
.xdata$x:00009249                 db    0
.xdata$x:0000924A                 db    0
.xdata$x:0000924B                 db    0
.xdata$x:0000924C                 db    0
.xdata$x:0000924D                 db    0
.xdata$x:0000924E                 db    0
.xdata$x:0000924F                 db    0
.xdata$x:00009250                 db    0
.xdata$x:00009251                 db    0
.xdata$x:00009252                 db    0
.xdata$x:00009253                 db    0
.xdata$x:00009253 _xdata$x        ends
.xdata$x:00009253
.xdata$x:00009254 ; ===========================================================================
.xdata$x:00009254
.xdata$x:00009254 ; Segment type: Pure data
.xdata$x:00009254 ; Segment permissions: Read
.xdata$x:00009254 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009254                 assume cs:_xdata$x
.xdata$x:00009254                 ;org 9254h
.xdata$x:00009254 ; COMDAT (pick associative to section at 3C08)
.xdata$x:00009254 __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009254                                         ; DATA XREF: .xdata$x:00009264o
.xdata$x:00009255                 db 0FFh
.xdata$x:00009256                 db 0FFh
.xdata$x:00009257                 db 0FFh
.xdata$x:00009258                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:0000925C __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000925C                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:0000925D                 db    5
.xdata$x:0000925E                 db  93h ; ô
.xdata$x:0000925F                 db  19h
.xdata$x:00009260                 db    1
.xdata$x:00009261                 db    0
.xdata$x:00009262                 db    0
.xdata$x:00009263                 db    0
.xdata$x:00009264                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00009268                 align 20h
.xdata$x:00009268 _xdata$x        ends
.xdata$x:00009268
.xdata$x:00009280 ; ===========================================================================
.xdata$x:00009280
.xdata$x:00009280 ; Segment type: Pure data
.xdata$x:00009280 ; Segment permissions: Read
.xdata$x:00009280 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009280                 assume cs:_xdata$x
.xdata$x:00009280                 ;org 9280h
.xdata$x:00009280 ; COMDAT (pick associative to section at 4868)
.xdata$x:00009280 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009280                                         ; DATA XREF: .xdata$x:00009290o
.xdata$x:00009281                 db 0FFh
.xdata$x:00009282                 db 0FFh
.xdata$x:00009283                 db 0FFh
.xdata$x:00009284                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00009288 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009288                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00009289                 db    5
.xdata$x:0000928A                 db  93h ; ô
.xdata$x:0000928B                 db  19h
.xdata$x:0000928C                 db    1
.xdata$x:0000928D                 db    0
.xdata$x:0000928E                 db    0
.xdata$x:0000928F                 db    0
.xdata$x:00009290                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00009294                 db    0
.xdata$x:00009295                 db    0
.xdata$x:00009296                 db    0
.xdata$x:00009297                 db    0
.xdata$x:00009298                 db    0
.xdata$x:00009299                 db    0
.xdata$x:0000929A                 db    0
.xdata$x:0000929B                 db    0
.xdata$x:0000929C                 db    0
.xdata$x:0000929D                 db    0
.xdata$x:0000929E                 db    0
.xdata$x:0000929F                 db    0
.xdata$x:000092A0                 db    0
.xdata$x:000092A1                 db    0
.xdata$x:000092A2                 db    0
.xdata$x:000092A3                 db    0
.xdata$x:000092A4                 db    0
.xdata$x:000092A5                 db    0
.xdata$x:000092A6                 db    0
.xdata$x:000092A7                 db    0
.xdata$x:000092A8                 db    0
.xdata$x:000092A9                 db    0
.xdata$x:000092AA                 db    0
.xdata$x:000092AB                 db    0
.xdata$x:000092AB _xdata$x        ends
.xdata$x:000092AB
.xdata$x:000092AC ; ===========================================================================
.xdata$x:000092AC
.xdata$x:000092AC ; Segment type: Pure data
.xdata$x:000092AC ; Segment permissions: Read
.xdata$x:000092AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000092AC                 assume cs:_xdata$x
.xdata$x:000092AC                 ;org 92ACh
.xdata$x:000092AC ; COMDAT (pick associative to section at 390C)
.xdata$x:000092AC __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:000092AC                                         ; DATA XREF: .xdata$x:000092BCo
.xdata$x:000092AD                 db 0FFh
.xdata$x:000092AE                 db 0FFh
.xdata$x:000092AF                 db 0FFh
.xdata$x:000092B0                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:000092B4 __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:000092B4                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:000092B5                 db    5
.xdata$x:000092B6                 db  93h ; ô
.xdata$x:000092B7                 db  19h
.xdata$x:000092B8                 db    1
.xdata$x:000092B9                 db    0
.xdata$x:000092BA                 db    0
.xdata$x:000092BB                 db    0
.xdata$x:000092BC                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:000092C0                 db    0
.xdata$x:000092C1                 db    0
.xdata$x:000092C2                 db    0
.xdata$x:000092C3                 db    0
.xdata$x:000092C4                 db    0
.xdata$x:000092C5                 db    0
.xdata$x:000092C6                 db    0
.xdata$x:000092C7                 db    0
.xdata$x:000092C8                 db    0
.xdata$x:000092C9                 db    0
.xdata$x:000092CA                 db    0
.xdata$x:000092CB                 db    0
.xdata$x:000092CC                 db    0
.xdata$x:000092CD                 db    0
.xdata$x:000092CE                 db    0
.xdata$x:000092CF                 db    0
.xdata$x:000092D0                 db    0
.xdata$x:000092D1                 db    0
.xdata$x:000092D2                 db    0
.xdata$x:000092D3                 db    0
.xdata$x:000092D4                 db    0
.xdata$x:000092D5                 db    0
.xdata$x:000092D6                 db    0
.xdata$x:000092D7                 db    0
.xdata$x:000092D7 _xdata$x        ends
.xdata$x:000092D7
.xdata$x:000092D8 ; ===========================================================================
.xdata$x:000092D8
.xdata$x:000092D8 ; Segment type: Pure data
.xdata$x:000092D8 ; Segment permissions: Read
.xdata$x:000092D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000092D8                 assume cs:_xdata$x
.xdata$x:000092D8                 ;org 92D8h
.xdata$x:000092D8 ; COMDAT (pick associative to section at 4698)
.xdata$x:000092D8 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000092D8                                         ; DATA XREF: .xdata$x:000092E8o
.xdata$x:000092D9                 db 0FFh
.xdata$x:000092DA                 db 0FFh
.xdata$x:000092DB                 db 0FFh
.xdata$x:000092DC                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000092E0 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000092E0                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000092E1                 db    5
.xdata$x:000092E2                 db  93h ; ô
.xdata$x:000092E3                 db  19h
.xdata$x:000092E4                 db    1
.xdata$x:000092E5                 db    0
.xdata$x:000092E6                 db    0
.xdata$x:000092E7                 db    0
.xdata$x:000092E8                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:000092EC                 db    0
.xdata$x:000092ED                 db    0
.xdata$x:000092EE                 db    0
.xdata$x:000092EF                 db    0
.xdata$x:000092F0                 db    0
.xdata$x:000092F1                 db    0
.xdata$x:000092F2                 db    0
.xdata$x:000092F3                 db    0
.xdata$x:000092F4                 db    0
.xdata$x:000092F5                 db    0
.xdata$x:000092F6                 db    0
.xdata$x:000092F7                 db    0
.xdata$x:000092F8                 db    0
.xdata$x:000092F9                 db    0
.xdata$x:000092FA                 db    0
.xdata$x:000092FB                 db    0
.xdata$x:000092FC                 db    0
.xdata$x:000092FD                 db    0
.xdata$x:000092FE                 db    0
.xdata$x:000092FF                 db    0
.xdata$x:00009300                 db    0
.xdata$x:00009301                 db    0
.xdata$x:00009302                 db    0
.xdata$x:00009303                 db    0
.xdata$x:00009303 _xdata$x        ends
.xdata$x:00009303
.xdata$x:00009304 ; ===========================================================================
.xdata$x:00009304
.xdata$x:00009304 ; Segment type: Pure data
.xdata$x:00009304 ; Segment permissions: Read
.xdata$x:00009304 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009304                 assume cs:_xdata$x
.xdata$x:00009304                 ;org 9304h
.xdata$x:00009304 ; COMDAT (pick associative to section at 3F28)
.xdata$x:00009304 __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:00009304                                         ; DATA XREF: .xdata$x:00009314o
.xdata$x:00009305                 db 0FFh
.xdata$x:00009306                 db 0FFh
.xdata$x:00009307                 db 0FFh
.xdata$x:00009308                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:0000930C __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:0000930C                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:0000930D                 db    5
.xdata$x:0000930E                 db  93h ; ô
.xdata$x:0000930F                 db  19h
.xdata$x:00009310                 db    1
.xdata$x:00009311                 db    0
.xdata$x:00009312                 db    0
.xdata$x:00009313                 db    0
.xdata$x:00009314                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:00009318                 db    0
.xdata$x:00009319                 db    0
.xdata$x:0000931A                 db    0
.xdata$x:0000931B                 db    0
.xdata$x:0000931C                 db    0
.xdata$x:0000931D                 db    0
.xdata$x:0000931E                 db    0
.xdata$x:0000931F                 db    0
.xdata$x:00009320                 db    0
.xdata$x:00009321                 db    0
.xdata$x:00009322                 db    0
.xdata$x:00009323                 db    0
.xdata$x:00009324                 db    0
.xdata$x:00009325                 db    0
.xdata$x:00009326                 db    0
.xdata$x:00009327                 db    0
.xdata$x:00009328                 db    0
.xdata$x:00009329                 db    0
.xdata$x:0000932A                 db    0
.xdata$x:0000932B                 db    0
.xdata$x:0000932C                 db    0
.xdata$x:0000932D                 db    0
.xdata$x:0000932E                 db    0
.xdata$x:0000932F                 db    0
.xdata$x:0000932F _xdata$x        ends
.xdata$x:0000932F
.xdata$x:00009330 ; ===========================================================================
.xdata$x:00009330
.xdata$x:00009330 ; Segment type: Pure data
.xdata$x:00009330 ; Segment permissions: Read
.xdata$x:00009330 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009330                 assume cs:_xdata$x
.xdata$x:00009330                 ;org 9330h
.xdata$x:00009330 ; COMDAT (pick associative to section at 4EA8)
.xdata$x:00009330 __unwindtable$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z db 0FFh
.xdata$x:00009330                                         ; DATA XREF: .xdata$x:00009348o
.xdata$x:00009331                 db 0FFh
.xdata$x:00009332                 db 0FFh
.xdata$x:00009333                 db 0FFh
.xdata$x:00009334                 dd offset __unwindfunclet$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z$0
.xdata$x:00009338                 db    0
.xdata$x:00009339                 db    0
.xdata$x:0000933A                 db    0
.xdata$x:0000933B                 db    0
.xdata$x:0000933C                 dd offset __unwindfunclet$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z$1
.xdata$x:00009340 __ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z db  22h ; "
.xdata$x:00009340                                         ; DATA XREF: __ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z+11o
.xdata$x:00009341                 db    5
.xdata$x:00009342                 db  93h ; ô
.xdata$x:00009343                 db  19h
.xdata$x:00009344                 db    2
.xdata$x:00009345                 db    0
.xdata$x:00009346                 db    0
.xdata$x:00009347                 db    0
.xdata$x:00009348                 dd offset __unwindtable$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
.xdata$x:0000934C                 db    0
.xdata$x:0000934D                 db    0
.xdata$x:0000934E                 db    0
.xdata$x:0000934F                 db    0
.xdata$x:00009350                 db    0
.xdata$x:00009351                 db    0
.xdata$x:00009352                 db    0
.xdata$x:00009353                 db    0
.xdata$x:00009354                 db    0
.xdata$x:00009355                 db    0
.xdata$x:00009356                 db    0
.xdata$x:00009357                 db    0
.xdata$x:00009358                 db    0
.xdata$x:00009359                 db    0
.xdata$x:0000935A                 db    0
.xdata$x:0000935B                 db    0
.xdata$x:0000935C                 db    0
.xdata$x:0000935D                 db    0
.xdata$x:0000935E                 db    0
.xdata$x:0000935F                 db    0
.xdata$x:00009360                 db    0
.xdata$x:00009361                 db    0
.xdata$x:00009362                 db    0
.xdata$x:00009363                 db    0
.xdata$x:00009363 _xdata$x        ends
.xdata$x:00009363
.xdata$x:00009364 ; ===========================================================================
.xdata$x:00009364
.xdata$x:00009364 ; Segment type: Pure data
.xdata$x:00009364 ; Segment permissions: Read
.xdata$x:00009364 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009364                 assume cs:_xdata$x
.xdata$x:00009364                 ;org 9364h
.xdata$x:00009364 ; COMDAT (pick associative to section at 4A30)
.xdata$x:00009364 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:00009364                                         ; DATA XREF: .xdata$x:00009374o
.xdata$x:00009365                 db 0FFh
.xdata$x:00009366                 db 0FFh
.xdata$x:00009367                 db 0FFh
.xdata$x:00009368                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:0000936C __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000936C                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:0000936D                 db    5
.xdata$x:0000936E                 db  93h ; ô
.xdata$x:0000936F                 db  19h
.xdata$x:00009370                 db    1
.xdata$x:00009371                 db    0
.xdata$x:00009372                 db    0
.xdata$x:00009373                 db    0
.xdata$x:00009374                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:00009378                 db    0
.xdata$x:00009379                 db    0
.xdata$x:0000937A                 db    0
.xdata$x:0000937B                 db    0
.xdata$x:0000937C                 db    0
.xdata$x:0000937D                 db    0
.xdata$x:0000937E                 db    0
.xdata$x:0000937F                 db    0
.xdata$x:00009380                 db    0
.xdata$x:00009381                 db    0
.xdata$x:00009382                 db    0
.xdata$x:00009383                 db    0
.xdata$x:00009384                 db    0
.xdata$x:00009385                 db    0
.xdata$x:00009386                 db    0
.xdata$x:00009387                 db    0
.xdata$x:00009388                 db    0
.xdata$x:00009389                 db    0
.xdata$x:0000938A                 db    0
.xdata$x:0000938B                 db    0
.xdata$x:0000938C                 db    0
.xdata$x:0000938D                 db    0
.xdata$x:0000938E                 db    0
.xdata$x:0000938F                 db    0
.xdata$x:0000938F _xdata$x        ends
.xdata$x:0000938F
.xdata$x:00009390 ; ===========================================================================
.xdata$x:00009390
.xdata$x:00009390 ; Segment type: Pure data
.xdata$x:00009390 ; Segment permissions: Read
.xdata$x:00009390 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009390                 assume cs:_xdata$x
.xdata$x:00009390                 ;org 9390h
.xdata$x:00009390 ; COMDAT (pick associative to section at 8BD0)
.xdata$x:00009390 __ehfuncinfo$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z db  22h ; "
.xdata$x:00009390                                         ; DATA XREF: __ehhandler$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z+14o
.xdata$x:00009391                 db    5
.xdata$x:00009392                 db  93h ; ô
.xdata$x:00009393                 db  19h
.xdata$x:00009394                 db  0Eh
.xdata$x:00009395                 db    0
.xdata$x:00009396                 db    0
.xdata$x:00009397                 db    0
.xdata$x:00009398                 dd offset __unwindtable$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z
.xdata$x:0000939C                 db    0
.xdata$x:0000939D                 db    0
.xdata$x:0000939E                 db    0
.xdata$x:0000939F                 db    0
.xdata$x:000093A0                 db    0
.xdata$x:000093A1                 db    0
.xdata$x:000093A2                 db    0
.xdata$x:000093A3                 db    0
.xdata$x:000093A4                 db    0
.xdata$x:000093A5                 db    0
.xdata$x:000093A6                 db    0
.xdata$x:000093A7                 db    0
.xdata$x:000093A8                 db    0
.xdata$x:000093A9                 db    0
.xdata$x:000093AA                 db    0
.xdata$x:000093AB                 db    0
.xdata$x:000093AC                 db    0
.xdata$x:000093AD                 db    0
.xdata$x:000093AE                 db    0
.xdata$x:000093AF                 db    0
.xdata$x:000093B0                 db    0
.xdata$x:000093B1                 db    0
.xdata$x:000093B2                 db    0
.xdata$x:000093B3                 db    0
.xdata$x:000093B4 __unwindtable$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z db 0FFh
.xdata$x:000093B4                                         ; DATA XREF: .xdata$x:00009398o
.xdata$x:000093B5                 db 0FFh
.xdata$x:000093B6                 db 0FFh
.xdata$x:000093B7                 db 0FFh
.xdata$x:000093B8                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$0
.xdata$x:000093BC                 align 10h
.xdata$x:000093C0                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$1
.xdata$x:000093C4                 db    1
.xdata$x:000093C5                 db    0
.xdata$x:000093C6                 db    0
.xdata$x:000093C7                 db    0
.xdata$x:000093C8                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$2
.xdata$x:000093CC                 db    2
.xdata$x:000093CD                 db    0
.xdata$x:000093CE                 db    0
.xdata$x:000093CF                 db    0
.xdata$x:000093D0                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$3
.xdata$x:000093D4                 db    3
.xdata$x:000093D5                 db    0
.xdata$x:000093D6                 db    0
.xdata$x:000093D7                 db    0
.xdata$x:000093D8                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$4
.xdata$x:000093DC                 db    4
.xdata$x:000093DD                 db    0
.xdata$x:000093DE                 db    0
.xdata$x:000093DF                 db    0
.xdata$x:000093E0                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$5
.xdata$x:000093E4                 db    3
.xdata$x:000093E5                 db    0
.xdata$x:000093E6                 db    0
.xdata$x:000093E7                 db    0
.xdata$x:000093E8                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$6
.xdata$x:000093EC                 db    6
.xdata$x:000093ED                 db    0
.xdata$x:000093EE                 db    0
.xdata$x:000093EF                 db    0
.xdata$x:000093F0                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$7
.xdata$x:000093F4                 db    7
.xdata$x:000093F5                 db    0
.xdata$x:000093F6                 db    0
.xdata$x:000093F7                 db    0
.xdata$x:000093F8                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$8
.xdata$x:000093FC                 db    3
.xdata$x:000093FD                 db    0
.xdata$x:000093FE                 db    0
.xdata$x:000093FF                 db    0
.xdata$x:00009400                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$9
.xdata$x:00009404                 db    9
.xdata$x:00009405                 db    0
.xdata$x:00009406                 db    0
.xdata$x:00009407                 db    0
.xdata$x:00009408                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$10
.xdata$x:0000940C                 db    3
.xdata$x:0000940D                 db    0
.xdata$x:0000940E                 db    0
.xdata$x:0000940F                 db    0
.xdata$x:00009410                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$11
.xdata$x:00009414                 db  0Bh
.xdata$x:00009415                 db    0
.xdata$x:00009416                 db    0
.xdata$x:00009417                 db    0
.xdata$x:00009418                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$12
.xdata$x:0000941C                 db  0Ch
.xdata$x:0000941D                 db    0
.xdata$x:0000941E                 db    0
.xdata$x:0000941F                 db    0
.xdata$x:00009420                 dd offset __unwindfunclet$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z$13
.xdata$x:00009420 _xdata$x        ends
.xdata$x:00009420
.xdata$x:00009424 ; ===========================================================================
.xdata$x:00009424
.xdata$x:00009424 ; Segment type: Pure data
.xdata$x:00009424 ; Segment permissions: Read
.xdata$x:00009424 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009424                 assume cs:_xdata$x
.xdata$x:00009424                 ;org 9424h
.xdata$x:00009424 ; COMDAT (pick associative to section at 7600)
.xdata$x:00009424 __unwindtable$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ db 0FFh
.xdata$x:00009424                                         ; DATA XREF: .xdata$x:00009434o
.xdata$x:00009425                 db 0FFh
.xdata$x:00009426                 db 0FFh
.xdata$x:00009427                 db 0FFh
.xdata$x:00009428                 dd offset __unwindfunclet$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ$0
.xdata$x:0000942C __ehfuncinfo$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000942C                                         ; DATA XREF: __ehhandler$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ+11o
.xdata$x:0000942D                 db    5
.xdata$x:0000942E                 db  93h ; ô
.xdata$x:0000942F                 db  19h
.xdata$x:00009430                 db    1
.xdata$x:00009431                 db    0
.xdata$x:00009432                 db    0
.xdata$x:00009433                 db    0
.xdata$x:00009434                 dd offset __unwindtable$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
.xdata$x:00009438                 db    0
.xdata$x:00009439                 db    0
.xdata$x:0000943A                 db    0
.xdata$x:0000943B                 db    0
.xdata$x:0000943C                 db    0
.xdata$x:0000943D                 db    0
.xdata$x:0000943E                 db    0
.xdata$x:0000943F                 db    0
.xdata$x:00009440                 db    0
.xdata$x:00009441                 db    0
.xdata$x:00009442                 db    0
.xdata$x:00009443                 db    0
.xdata$x:00009444                 db    0
.xdata$x:00009445                 db    0
.xdata$x:00009446                 db    0
.xdata$x:00009447                 db    0
.xdata$x:00009448                 db    0
.xdata$x:00009449                 db    0
.xdata$x:0000944A                 db    0
.xdata$x:0000944B                 db    0
.xdata$x:0000944C                 db    0
.xdata$x:0000944D                 db    0
.xdata$x:0000944E                 db    0
.xdata$x:0000944F                 db    0
.xdata$x:0000944F _xdata$x        ends
.xdata$x:0000944F
.xdata$x:00009450 ; ===========================================================================
.xdata$x:00009450
.xdata$x:00009450 ; Segment type: Pure data
.xdata$x:00009450 ; Segment permissions: Read
.xdata$x:00009450 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009450                 assume cs:_xdata$x
.xdata$x:00009450                 ;org 9450h
.xdata$x:00009450 ; COMDAT (pick associative to section at 7C2C)
.xdata$x:00009450 __unwindtable$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ db 0FFh
.xdata$x:00009450                                         ; DATA XREF: .xdata$x:00009460o
.xdata$x:00009451                 db 0FFh
.xdata$x:00009452                 db 0FFh
.xdata$x:00009453                 db 0FFh
.xdata$x:00009454                 dd offset __unwindfunclet$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ$0
.xdata$x:00009458 __ehfuncinfo$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ db  22h ; "
.xdata$x:00009458                                         ; DATA XREF: __ehhandler$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ+11o
.xdata$x:00009459                 db    5
.xdata$x:0000945A                 db  93h ; ô
.xdata$x:0000945B                 db  19h
.xdata$x:0000945C                 db    1
.xdata$x:0000945D                 db    0
.xdata$x:0000945E                 db    0
.xdata$x:0000945F                 db    0
.xdata$x:00009460                 dd offset __unwindtable$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
.xdata$x:00009464                 db    0
.xdata$x:00009465                 db    0
.xdata$x:00009466                 db    0
.xdata$x:00009467                 db    0
.xdata$x:00009468                 db    0
.xdata$x:00009469                 db    0
.xdata$x:0000946A                 db    0
.xdata$x:0000946B                 db    0
.xdata$x:0000946C                 db    0
.xdata$x:0000946D                 db    0
.xdata$x:0000946E                 db    0
.xdata$x:0000946F                 db    0
.xdata$x:00009470                 db    0
.xdata$x:00009471                 db    0
.xdata$x:00009472                 db    0
.xdata$x:00009473                 db    0
.xdata$x:00009474                 db    0
.xdata$x:00009475                 db    0
.xdata$x:00009476                 db    0
.xdata$x:00009477                 db    0
.xdata$x:00009478                 db    0
.xdata$x:00009479                 db    0
.xdata$x:0000947A                 db    0
.xdata$x:0000947B                 db    0
.xdata$x:0000947B _xdata$x        ends
.xdata$x:0000947B
.xdata$x:0000947C ; ===========================================================================
.xdata$x:0000947C
.xdata$x:0000947C ; Segment type: Pure data
.xdata$x:0000947C ; Segment permissions: Read
.xdata$x:0000947C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000947C                 assume cs:_xdata$x
.xdata$x:0000947C                 ;org 947Ch
.xdata$x:0000947C ; COMDAT (pick associative to section at 5CC8)
.xdata$x:0000947C __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000947C                                         ; DATA XREF: .xdata$x:00009504o
.xdata$x:0000947D                 db    0
.xdata$x:0000947E                 db    0
.xdata$x:0000947F                 db    0
.xdata$x:00009480                 db    0
.xdata$x:00009481                 db    0
.xdata$x:00009482                 db    0
.xdata$x:00009483                 db    0
.xdata$x:00009484                 db    0
.xdata$x:00009485                 db    0
.xdata$x:00009486                 db    0
.xdata$x:00009487                 db    0
.xdata$x:00009488                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:0000948C __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000948C                                         ; DATA XREF: .xdata$x:000094F0o
.xdata$x:0000948D                 db    0
.xdata$x:0000948E                 db    0
.xdata$x:0000948F                 db    0
.xdata$x:00009490                 db    0
.xdata$x:00009491                 db    0
.xdata$x:00009492                 db    0
.xdata$x:00009493                 db    0
.xdata$x:00009494                 db    0
.xdata$x:00009495                 db    0
.xdata$x:00009496                 db    0
.xdata$x:00009497                 db    0
.xdata$x:00009498                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:0000949C __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000949C                                         ; DATA XREF: .xdata$x:000094C4o
.xdata$x:0000949D                 db 0FFh
.xdata$x:0000949E                 db 0FFh
.xdata$x:0000949F                 db 0FFh
.xdata$x:000094A0                 db    0
.xdata$x:000094A1                 db    0
.xdata$x:000094A2                 db    0
.xdata$x:000094A3                 db    0
.xdata$x:000094A4                 db 0FFh
.xdata$x:000094A5                 db 0FFh
.xdata$x:000094A6                 db 0FFh
.xdata$x:000094A7                 db 0FFh
.xdata$x:000094A8                 db    0
.xdata$x:000094A9                 db    0
.xdata$x:000094AA                 db    0
.xdata$x:000094AB                 db    0
.xdata$x:000094AC                 db    1
.xdata$x:000094AD                 db    0
.xdata$x:000094AE                 db    0
.xdata$x:000094AF                 db    0
.xdata$x:000094B0                 db    0
.xdata$x:000094B1                 db    0
.xdata$x:000094B2                 db    0
.xdata$x:000094B3                 db    0
.xdata$x:000094B4                 db    1
.xdata$x:000094B5                 db    0
.xdata$x:000094B6                 db    0
.xdata$x:000094B7                 db    0
.xdata$x:000094B8                 db    0
.xdata$x:000094B9                 db    0
.xdata$x:000094BA                 db    0
.xdata$x:000094BB                 db    0
.xdata$x:000094BC __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:000094BC                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:000094BD                 db    5
.xdata$x:000094BE                 db  93h ; ô
.xdata$x:000094BF                 db  19h
.xdata$x:000094C0                 db    4
.xdata$x:000094C1                 db    0
.xdata$x:000094C2                 db    0
.xdata$x:000094C3                 db    0
.xdata$x:000094C4                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:000094C8                 db    2
.xdata$x:000094C9                 db    0
.xdata$x:000094CA                 db    0
.xdata$x:000094CB                 db    0
.xdata$x:000094CC                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:000094D0                 align 20h
.xdata$x:000094E0 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:000094E0                                         ; DATA XREF: .xdata$x:000094CCo
.xdata$x:000094E1                 db    0
.xdata$x:000094E2                 db    0
.xdata$x:000094E3                 db    0
.xdata$x:000094E4                 db    2
.xdata$x:000094E5                 db    0
.xdata$x:000094E6                 db    0
.xdata$x:000094E7                 db    0
.xdata$x:000094E8                 db    3
.xdata$x:000094E9                 db    0
.xdata$x:000094EA                 db    0
.xdata$x:000094EB                 db    0
.xdata$x:000094EC                 db    1
.xdata$x:000094ED                 db    0
.xdata$x:000094EE                 db    0
.xdata$x:000094EF                 db    0
.xdata$x:000094F0                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:000094F4                 db    0
.xdata$x:000094F5                 db    0
.xdata$x:000094F6                 db    0
.xdata$x:000094F7                 db    0
.xdata$x:000094F8                 db    0
.xdata$x:000094F9                 db    0
.xdata$x:000094FA                 db    0
.xdata$x:000094FB                 db    0
.xdata$x:000094FC                 db    3
.xdata$x:000094FD                 db    0
.xdata$x:000094FE                 db    0
.xdata$x:000094FF                 db    0
.xdata$x:00009500                 db    1
.xdata$x:00009501                 db    0
.xdata$x:00009502                 db    0
.xdata$x:00009503                 db    0
.xdata$x:00009504                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:00009504 _xdata$x        ends
.xdata$x:00009504
.xdata$x:00009508 ; ===========================================================================
.xdata$x:00009508
.xdata$x:00009508 ; Segment type: Pure data
.xdata$x:00009508 ; Segment permissions: Read
.xdata$x:00009508 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009508                 assume cs:_xdata$x
.xdata$x:00009508                 ;org 9508h
.xdata$x:00009508 ; COMDAT (pick associative to section at 6970)
.xdata$x:00009508 __unwindtable$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z db 0FFh
.xdata$x:00009508                                         ; DATA XREF: .xdata$x:00009520o
.xdata$x:00009509                 db 0FFh
.xdata$x:0000950A                 db 0FFh
.xdata$x:0000950B                 db 0FFh
.xdata$x:0000950C                 dd offset __unwindfunclet$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z$0
.xdata$x:00009510                 db    0
.xdata$x:00009511                 db    0
.xdata$x:00009512                 db    0
.xdata$x:00009513                 db    0
.xdata$x:00009514                 dd offset __unwindfunclet$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z$1
.xdata$x:00009518 __ehfuncinfo$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z db  22h ; "
.xdata$x:00009518                                         ; DATA XREF: __ehhandler$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z+11o
.xdata$x:00009519                 db    5
.xdata$x:0000951A                 db  93h ; ô
.xdata$x:0000951B                 db  19h
.xdata$x:0000951C                 db    2
.xdata$x:0000951D                 db    0
.xdata$x:0000951E                 db    0
.xdata$x:0000951F                 db    0
.xdata$x:00009520                 dd offset __unwindtable$?_Pdif@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z
.xdata$x:00009524                 db    0
.xdata$x:00009525                 db    0
.xdata$x:00009526                 db    0
.xdata$x:00009527                 db    0
.xdata$x:00009528                 db    0
.xdata$x:00009529                 db    0
.xdata$x:0000952A                 db    0
.xdata$x:0000952B                 db    0
.xdata$x:0000952C                 db    0
.xdata$x:0000952D                 db    0
.xdata$x:0000952E                 db    0
.xdata$x:0000952F                 db    0
.xdata$x:00009530                 db    0
.xdata$x:00009531                 db    0
.xdata$x:00009532                 db    0
.xdata$x:00009533                 db    0
.xdata$x:00009534                 db    0
.xdata$x:00009535                 db    0
.xdata$x:00009536                 db    0
.xdata$x:00009537                 db    0
.xdata$x:00009538                 db    0
.xdata$x:00009539                 db    0
.xdata$x:0000953A                 db    0
.xdata$x:0000953B                 db    0
.xdata$x:0000953B _xdata$x        ends
.xdata$x:0000953B
.xdata$x:0000953C ; ===========================================================================
.xdata$x:0000953C
.xdata$x:0000953C ; Segment type: Pure data
.xdata$x:0000953C ; Segment permissions: Read
.xdata$x:0000953C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000953C                 assume cs:_xdata$x
.xdata$x:0000953C                 ;org 953Ch
.xdata$x:0000953C ; COMDAT (pick associative to section at 45A4)
.xdata$x:0000953C __unwindtable$??0runtime_error@std@@QAE@PBD@Z db 0FFh
.xdata$x:0000953C                                         ; DATA XREF: .xdata$x:0000954Co
.xdata$x:0000953D                 db 0FFh
.xdata$x:0000953E                 db 0FFh
.xdata$x:0000953F                 db 0FFh
.xdata$x:00009540                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0
.xdata$x:00009544 __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00009544                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@PBD@Z+11o
.xdata$x:00009545                 db    5
.xdata$x:00009546                 db  93h ; ô
.xdata$x:00009547                 db  19h
.xdata$x:00009548                 db    1
.xdata$x:00009549                 db    0
.xdata$x:0000954A                 db    0
.xdata$x:0000954B                 db    0
.xdata$x:0000954C                 dd offset __unwindtable$??0runtime_error@std@@QAE@PBD@Z
.xdata$x:00009550                 db    0
.xdata$x:00009551                 db    0
.xdata$x:00009552                 db    0
.xdata$x:00009553                 db    0
.xdata$x:00009554                 db    0
.xdata$x:00009555                 db    0
.xdata$x:00009556                 db    0
.xdata$x:00009557                 db    0
.xdata$x:00009558                 db    0
.xdata$x:00009559                 db    0
.xdata$x:0000955A                 db    0
.xdata$x:0000955B                 db    0
.xdata$x:0000955C                 db    0
.xdata$x:0000955D                 db    0
.xdata$x:0000955E                 db    0
.xdata$x:0000955F                 db    0
.xdata$x:00009560                 db    0
.xdata$x:00009561                 db    0
.xdata$x:00009562                 db    0
.xdata$x:00009563                 db    0
.xdata$x:00009564                 db    0
.xdata$x:00009565                 db    0
.xdata$x:00009566                 db    0
.xdata$x:00009567                 db    0
.xdata$x:00009567 _xdata$x        ends
.xdata$x:00009567
.xdata$x:00009568 ; ===========================================================================
.xdata$x:00009568
.xdata$x:00009568 ; Segment type: Pure data
.xdata$x:00009568 ; Segment permissions: Read
.xdata$x:00009568 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009568                 assume cs:_xdata$x
.xdata$x:00009568                 ;org 9568h
.xdata$x:00009568 ; COMDAT (pick associative to section at 4E28)
.xdata$x:00009568 __unwindtable$??1runtime_error@std@@UAE@XZ db 0FFh
.xdata$x:00009568                                         ; DATA XREF: .xdata$x:00009578o
.xdata$x:00009569                 db 0FFh
.xdata$x:0000956A                 db 0FFh
.xdata$x:0000956B                 db 0FFh
.xdata$x:0000956C                 dd offset __unwindfunclet$??1runtime_error@std@@UAE@XZ$0
.xdata$x:00009570 __ehfuncinfo$??1runtime_error@std@@UAE@XZ db  22h ; "
.xdata$x:00009570                                         ; DATA XREF: __ehhandler$??1runtime_error@std@@UAE@XZ+11o
.xdata$x:00009571                 db    5
.xdata$x:00009572                 db  93h ; ô
.xdata$x:00009573                 db  19h
.xdata$x:00009574                 db    1
.xdata$x:00009575                 db    0
.xdata$x:00009576                 db    0
.xdata$x:00009577                 db    0
.xdata$x:00009578                 dd offset __unwindtable$??1runtime_error@std@@UAE@XZ
.xdata$x:0000957C                 db    0
.xdata$x:0000957D                 db    0
.xdata$x:0000957E                 db    0
.xdata$x:0000957F                 db    0
.xdata$x:00009580                 db    0
.xdata$x:00009581                 db    0
.xdata$x:00009582                 db    0
.xdata$x:00009583                 db    0
.xdata$x:00009584                 db    0
.xdata$x:00009585                 db    0
.xdata$x:00009586                 db    0
.xdata$x:00009587                 db    0
.xdata$x:00009588                 db    0
.xdata$x:00009589                 db    0
.xdata$x:0000958A                 db    0
.xdata$x:0000958B                 db    0
.xdata$x:0000958C                 db    0
.xdata$x:0000958D                 db    0
.xdata$x:0000958E                 db    0
.xdata$x:0000958F                 db    0
.xdata$x:00009590                 db    0
.xdata$x:00009591                 db    0
.xdata$x:00009592                 db    0
.xdata$x:00009593                 db    0
.xdata$x:00009593 _xdata$x        ends
.xdata$x:00009593
.xdata$x:00009594 ; ===========================================================================
.xdata$x:00009594
.xdata$x:00009594 ; Segment type: Pure data
.xdata$x:00009594 ; Segment permissions: Read
.xdata$x:00009594 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009594                 assume cs:_xdata$x
.xdata$x:00009594                 ;org 9594h
.xdata$x:00009594 ; COMDAT (pick associative to section at 4520)
.xdata$x:00009594 __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00009594                                         ; DATA XREF: .xdata$x:000095A4o
.xdata$x:00009595                 db 0FFh
.xdata$x:00009596                 db 0FFh
.xdata$x:00009597                 db 0FFh
.xdata$x:00009598                 dd offset __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
.xdata$x:0000959C __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000959C                                         ; DATA XREF: __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z+11o
.xdata$x:0000959D                 db    5
.xdata$x:0000959E                 db  93h ; ô
.xdata$x:0000959F                 db  19h
.xdata$x:000095A0                 db    1
.xdata$x:000095A1                 db    0
.xdata$x:000095A2                 db    0
.xdata$x:000095A3                 db    0
.xdata$x:000095A4                 dd offset __unwindtable$??0runtime_error@std@@QAE@ABV01@@Z
.xdata$x:000095A8                 align 20h
.xdata$x:000095A8 _xdata$x        ends
.xdata$x:000095A8
.xdata$x:000095C0 ; ===========================================================================
.xdata$x:000095C0
.xdata$x:000095C0 ; Segment type: Pure data
.xdata$x:000095C0 ; Segment permissions: Read
.xdata$x:000095C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000095C0                 assume cs:_xdata$x
.xdata$x:000095C0                 ;org 95C0h
.xdata$x:000095C0 ; COMDAT (pick associative to section at 42F4)
.xdata$x:000095C0 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:000095C0                                         ; DATA XREF: .xdata$x:000095D0o
.xdata$x:000095C1                 db 0FFh
.xdata$x:000095C2                 db 0FFh
.xdata$x:000095C3                 db 0FFh
.xdata$x:000095C4                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:000095C8 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:000095C8                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:000095C9                 db    5
.xdata$x:000095CA                 db  93h ; ô
.xdata$x:000095CB                 db  19h
.xdata$x:000095CC                 db    1
.xdata$x:000095CD                 db    0
.xdata$x:000095CE                 db    0
.xdata$x:000095CF                 db    0
.xdata$x:000095D0                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:000095D4                 db    0
.xdata$x:000095D5                 db    0
.xdata$x:000095D6                 db    0
.xdata$x:000095D7                 db    0
.xdata$x:000095D8                 db    0
.xdata$x:000095D9                 db    0
.xdata$x:000095DA                 db    0
.xdata$x:000095DB                 db    0
.xdata$x:000095DC                 db    0
.xdata$x:000095DD                 db    0
.xdata$x:000095DE                 db    0
.xdata$x:000095DF                 db    0
.xdata$x:000095E0                 db    0
.xdata$x:000095E1                 db    0
.xdata$x:000095E2                 db    0
.xdata$x:000095E3                 db    0
.xdata$x:000095E4                 db    0
.xdata$x:000095E5                 db    0
.xdata$x:000095E6                 db    0
.xdata$x:000095E7                 db    0
.xdata$x:000095E8                 db    0
.xdata$x:000095E9                 db    0
.xdata$x:000095EA                 db    0
.xdata$x:000095EB                 db    0
.xdata$x:000095EB _xdata$x        ends
.xdata$x:000095EB
.xdata$x:000095EC ; ===========================================================================
.xdata$x:000095EC
.xdata$x:000095EC ; Segment type: Pure data
.xdata$x:000095EC ; Segment permissions: Read
.xdata$x:000095EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000095EC                 assume cs:_xdata$x
.xdata$x:000095EC                 ;org 95ECh
.xdata$x:000095EC ; COMDAT (pick associative to section at 8294)
.xdata$x:000095EC __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:000095EC                                         ; DATA XREF: .xdata$x:000095FCo
.xdata$x:000095ED                 db 0FFh
.xdata$x:000095EE                 db 0FFh
.xdata$x:000095EF                 db 0FFh
.xdata$x:000095F0                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:000095F4 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:000095F4                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:000095F5                 db    5
.xdata$x:000095F6                 db  93h ; ô
.xdata$x:000095F7                 db  19h
.xdata$x:000095F8                 db    1
.xdata$x:000095F9                 db    0
.xdata$x:000095FA                 db    0
.xdata$x:000095FB                 db    0
.xdata$x:000095FC                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00009600                 db    0
.xdata$x:00009601                 db    0
.xdata$x:00009602                 db    0
.xdata$x:00009603                 db    0
.xdata$x:00009604                 db    0
.xdata$x:00009605                 db    0
.xdata$x:00009606                 db    0
.xdata$x:00009607                 db    0
.xdata$x:00009608                 db    0
.xdata$x:00009609                 db    0
.xdata$x:0000960A                 db    0
.xdata$x:0000960B                 db    0
.xdata$x:0000960C                 db    0
.xdata$x:0000960D                 db    0
.xdata$x:0000960E                 db    0
.xdata$x:0000960F                 db    0
.xdata$x:00009610                 db    0
.xdata$x:00009611                 db    0
.xdata$x:00009612                 db    0
.xdata$x:00009613                 db    0
.xdata$x:00009614                 db    0
.xdata$x:00009615                 db    0
.xdata$x:00009616                 db    0
.xdata$x:00009617                 db    0
.xdata$x:00009617 _xdata$x        ends
.xdata$x:00009617
.xdata$x:00009618 ; ===========================================================================
.xdata$x:00009618
.xdata$x:00009618 ; Segment type: Pure data
.xdata$x:00009618 ; Segment permissions: Read
.xdata$x:00009618 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009618                 assume cs:_xdata$x
.xdata$x:00009618                 ;org 9618h
.xdata$x:00009618 ; COMDAT (pick associative to section at 4C40)
.xdata$x:00009618 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00009618                                         ; DATA XREF: .xdata$x:00009628o
.xdata$x:00009619                 db 0FFh
.xdata$x:0000961A                 db 0FFh
.xdata$x:0000961B                 db 0FFh
.xdata$x:0000961C                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:00009620 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00009620                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:00009621                 db    5
.xdata$x:00009622                 db  93h ; ô
.xdata$x:00009623                 db  19h
.xdata$x:00009624                 db    1
.xdata$x:00009625                 db    0
.xdata$x:00009626                 db    0
.xdata$x:00009627                 db    0
.xdata$x:00009628                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:0000962C                 db    0
.xdata$x:0000962D                 db    0
.xdata$x:0000962E                 db    0
.xdata$x:0000962F                 db    0
.xdata$x:00009630                 db    0
.xdata$x:00009631                 db    0
.xdata$x:00009632                 db    0
.xdata$x:00009633                 db    0
.xdata$x:00009634                 db    0
.xdata$x:00009635                 db    0
.xdata$x:00009636                 db    0
.xdata$x:00009637                 db    0
.xdata$x:00009638                 db    0
.xdata$x:00009639                 db    0
.xdata$x:0000963A                 db    0
.xdata$x:0000963B                 db    0
.xdata$x:0000963C                 db    0
.xdata$x:0000963D                 db    0
.xdata$x:0000963E                 db    0
.xdata$x:0000963F                 db    0
.xdata$x:00009640                 db    0
.xdata$x:00009641                 db    0
.xdata$x:00009642                 db    0
.xdata$x:00009643                 db    0
.xdata$x:00009643 _xdata$x        ends
.xdata$x:00009643
.xdata$x:00009644 ; ===========================================================================
.xdata$x:00009644
.xdata$x:00009644 ; Segment type: Pure data
.xdata$x:00009644 ; Segment permissions: Read
.xdata$x:00009644 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009644                 assume cs:_xdata$x
.xdata$x:00009644                 ;org 9644h
.xdata$x:00009644 ; COMDAT (pick associative to section at 4380)
.xdata$x:00009644 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00009644                                         ; DATA XREF: .xdata$x:00009654o
.xdata$x:00009645                 db 0FFh
.xdata$x:00009646                 db 0FFh
.xdata$x:00009647                 db 0FFh
.xdata$x:00009648                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:0000964C __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:0000964C                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:0000964D                 db    5
.xdata$x:0000964E                 db  93h ; ô
.xdata$x:0000964F                 db  19h
.xdata$x:00009650                 db    1
.xdata$x:00009651                 db    0
.xdata$x:00009652                 db    0
.xdata$x:00009653                 db    0
.xdata$x:00009654                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:00009658                 db    0
.xdata$x:00009659                 db    0
.xdata$x:0000965A                 db    0
.xdata$x:0000965B                 db    0
.xdata$x:0000965C                 db    0
.xdata$x:0000965D                 db    0
.xdata$x:0000965E                 db    0
.xdata$x:0000965F                 db    0
.xdata$x:00009660                 db    0
.xdata$x:00009661                 db    0
.xdata$x:00009662                 db    0
.xdata$x:00009663                 db    0
.xdata$x:00009664                 db    0
.xdata$x:00009665                 db    0
.xdata$x:00009666                 db    0
.xdata$x:00009667                 db    0
.xdata$x:00009668                 db    0
.xdata$x:00009669                 db    0
.xdata$x:0000966A                 db    0
.xdata$x:0000966B                 db    0
.xdata$x:0000966C                 db    0
.xdata$x:0000966D                 db    0
.xdata$x:0000966E                 db    0
.xdata$x:0000966F                 db    0
.xdata$x:0000966F _xdata$x        ends
.xdata$x:0000966F
.xdata$x:00009670 ; ===========================================================================
.xdata$x:00009670
.xdata$x:00009670 ; Segment type: Pure data
.xdata$x:00009670 ; Segment permissions: Read
.xdata$x:00009670 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009670                 assume cs:_xdata$x
.xdata$x:00009670                 ;org 9670h
.xdata$x:00009670 ; COMDAT (pick associative to section at 834C)
.xdata$x:00009670 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00009670                                         ; DATA XREF: .xdata$x:00009680o
.xdata$x:00009671                 db 0FFh
.xdata$x:00009672                 db 0FFh
.xdata$x:00009673                 db 0FFh
.xdata$x:00009674                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00009678 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00009678                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00009679                 db    5
.xdata$x:0000967A                 db  93h ; ô
.xdata$x:0000967B                 db  19h
.xdata$x:0000967C                 db    1
.xdata$x:0000967D                 db    0
.xdata$x:0000967E                 db    0
.xdata$x:0000967F                 db    0
.xdata$x:00009680                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00009684                 db    0
.xdata$x:00009685                 db    0
.xdata$x:00009686                 db    0
.xdata$x:00009687                 db    0
.xdata$x:00009688                 db    0
.xdata$x:00009689                 db    0
.xdata$x:0000968A                 db    0
.xdata$x:0000968B                 db    0
.xdata$x:0000968C                 db    0
.xdata$x:0000968D                 db    0
.xdata$x:0000968E                 db    0
.xdata$x:0000968F                 db    0
.xdata$x:00009690                 db    0
.xdata$x:00009691                 db    0
.xdata$x:00009692                 db    0
.xdata$x:00009693                 db    0
.xdata$x:00009694                 db    0
.xdata$x:00009695                 db    0
.xdata$x:00009696                 db    0
.xdata$x:00009697                 db    0
.xdata$x:00009698                 db    0
.xdata$x:00009699                 db    0
.xdata$x:0000969A                 db    0
.xdata$x:0000969B                 db    0
.xdata$x:0000969B _xdata$x        ends
.xdata$x:0000969B
.xdata$x:0000969C ; ===========================================================================
.xdata$x:0000969C
.xdata$x:0000969C ; Segment type: Pure data
.xdata$x:0000969C ; Segment permissions: Read
.xdata$x:0000969C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000969C                 assume cs:_xdata$x
.xdata$x:0000969C                 ;org 969Ch
.xdata$x:0000969C ; COMDAT (pick associative to section at 4CB0)
.xdata$x:0000969C __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:0000969C                                         ; DATA XREF: .xdata$x:000096ACo
.xdata$x:0000969D                 db 0FFh
.xdata$x:0000969E                 db 0FFh
.xdata$x:0000969F                 db 0FFh
.xdata$x:000096A0                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:000096A4 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:000096A4                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:000096A5                 db    5
.xdata$x:000096A6                 db  93h ; ô
.xdata$x:000096A7                 db  19h
.xdata$x:000096A8                 db    1
.xdata$x:000096A9                 db    0
.xdata$x:000096AA                 db    0
.xdata$x:000096AB                 db    0
.xdata$x:000096AC                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:000096B0                 db    0
.xdata$x:000096B1                 db    0
.xdata$x:000096B2                 db    0
.xdata$x:000096B3                 db    0
.xdata$x:000096B4                 db    0
.xdata$x:000096B5                 db    0
.xdata$x:000096B6                 db    0
.xdata$x:000096B7                 db    0
.xdata$x:000096B8                 db    0
.xdata$x:000096B9                 db    0
.xdata$x:000096BA                 db    0
.xdata$x:000096BB                 db    0
.xdata$x:000096BC                 db    0
.xdata$x:000096BD                 db    0
.xdata$x:000096BE                 db    0
.xdata$x:000096BF                 db    0
.xdata$x:000096C0                 db    0
.xdata$x:000096C1                 db    0
.xdata$x:000096C2                 db    0
.xdata$x:000096C3                 db    0
.xdata$x:000096C4                 db    0
.xdata$x:000096C5                 db    0
.xdata$x:000096C6                 db    0
.xdata$x:000096C7                 db    0
.xdata$x:000096C7 _xdata$x        ends
.xdata$x:000096C7
.xdata$x:000096C8 ; ===========================================================================
.xdata$x:000096C8
.xdata$x:000096C8 ; Segment type: Pure data
.xdata$x:000096C8 ; Segment permissions: Read
.xdata$x:000096C8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000096C8                 assume cs:_xdata$x
.xdata$x:000096C8                 ;org 96C8h
.xdata$x:000096C8 ; COMDAT (pick associative to section at 4450)
.xdata$x:000096C8 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:000096C8                                         ; DATA XREF: .xdata$x:000096D8o
.xdata$x:000096C9                 db 0FFh
.xdata$x:000096CA                 db 0FFh
.xdata$x:000096CB                 db 0FFh
.xdata$x:000096CC                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:000096D0 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:000096D0                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:000096D1                 db    5
.xdata$x:000096D2                 db  93h ; ô
.xdata$x:000096D3                 db  19h
.xdata$x:000096D4                 db    1
.xdata$x:000096D5                 db    0
.xdata$x:000096D6                 db    0
.xdata$x:000096D7                 db    0
.xdata$x:000096D8                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:000096DC                 db    0
.xdata$x:000096DD                 db    0
.xdata$x:000096DE                 db    0
.xdata$x:000096DF                 db    0
.xdata$x:000096E0                 db    0
.xdata$x:000096E1                 db    0
.xdata$x:000096E2                 db    0
.xdata$x:000096E3                 db    0
.xdata$x:000096E4                 db    0
.xdata$x:000096E5                 db    0
.xdata$x:000096E6                 db    0
.xdata$x:000096E7                 db    0
.xdata$x:000096E8                 db    0
.xdata$x:000096E9                 db    0
.xdata$x:000096EA                 db    0
.xdata$x:000096EB                 db    0
.xdata$x:000096EC                 db    0
.xdata$x:000096ED                 db    0
.xdata$x:000096EE                 db    0
.xdata$x:000096EF                 db    0
.xdata$x:000096F0                 db    0
.xdata$x:000096F1                 db    0
.xdata$x:000096F2                 db    0
.xdata$x:000096F3                 db    0
.xdata$x:000096F3 _xdata$x        ends
.xdata$x:000096F3
.xdata$x:000096F4 ; ===========================================================================
.xdata$x:000096F4
.xdata$x:000096F4 ; Segment type: Pure data
.xdata$x:000096F4 ; Segment permissions: Read
.xdata$x:000096F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000096F4                 assume cs:_xdata$x
.xdata$x:000096F4                 ;org 96F4h
.xdata$x:000096F4 ; COMDAT (pick associative to section at 8410)
.xdata$x:000096F4 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:000096F4                                         ; DATA XREF: .xdata$x:00009704o
.xdata$x:000096F5                 db 0FFh
.xdata$x:000096F6                 db 0FFh
.xdata$x:000096F7                 db 0FFh
.xdata$x:000096F8                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:000096FC __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:000096FC                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:000096FD                 db    5
.xdata$x:000096FE                 db  93h ; ô
.xdata$x:000096FF                 db  19h
.xdata$x:00009700                 db    1
.xdata$x:00009701                 db    0
.xdata$x:00009702                 db    0
.xdata$x:00009703                 db    0
.xdata$x:00009704                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00009708                 align 20h
.xdata$x:00009708 _xdata$x        ends
.xdata$x:00009708
.xdata$x:00009720 ; ===========================================================================
.xdata$x:00009720
.xdata$x:00009720 ; Segment type: Pure data
.xdata$x:00009720 ; Segment permissions: Read
.xdata$x:00009720 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009720                 assume cs:_xdata$x
.xdata$x:00009720                 ;org 9720h
.xdata$x:00009720 ; COMDAT (pick associative to section at 4DA4)
.xdata$x:00009720 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00009720                                         ; DATA XREF: .xdata$x:00009730o
.xdata$x:00009721                 db 0FFh
.xdata$x:00009722                 db 0FFh
.xdata$x:00009723                 db 0FFh
.xdata$x:00009724                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:00009728 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00009728                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:00009729                 db    5
.xdata$x:0000972A                 db  93h ; ô
.xdata$x:0000972B                 db  19h
.xdata$x:0000972C                 db    1
.xdata$x:0000972D                 db    0
.xdata$x:0000972E                 db    0
.xdata$x:0000972F                 db    0
.xdata$x:00009730                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:00009734                 db    0
.xdata$x:00009735                 db    0
.xdata$x:00009736                 db    0
.xdata$x:00009737                 db    0
.xdata$x:00009738                 db    0
.xdata$x:00009739                 db    0
.xdata$x:0000973A                 db    0
.xdata$x:0000973B                 db    0
.xdata$x:0000973C                 db    0
.xdata$x:0000973D                 db    0
.xdata$x:0000973E                 db    0
.xdata$x:0000973F                 db    0
.xdata$x:00009740                 db    0
.xdata$x:00009741                 db    0
.xdata$x:00009742                 db    0
.xdata$x:00009743                 db    0
.xdata$x:00009744                 db    0
.xdata$x:00009745                 db    0
.xdata$x:00009746                 db    0
.xdata$x:00009747                 db    0
.xdata$x:00009748                 db    0
.xdata$x:00009749                 db    0
.xdata$x:0000974A                 db    0
.xdata$x:0000974B                 db    0
.xdata$x:0000974B _xdata$x        ends
.xdata$x:0000974B
.xdata$x:0000974C ; ===========================================================================
.xdata$x:0000974C
.xdata$x:0000974C ; Segment type: Pure data
.xdata$x:0000974C ; Segment permissions: Read
.xdata$x:0000974C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000974C                 assume cs:_xdata$x
.xdata$x:0000974C                 ;org 974Ch
.xdata$x:0000974C ; COMDAT (pick associative to section at 3C90)
.xdata$x:0000974C __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000974C                                         ; DATA XREF: .xdata$x:0000975Co
.xdata$x:0000974D                 db 0FFh
.xdata$x:0000974E                 db 0FFh
.xdata$x:0000974F                 db 0FFh
.xdata$x:00009750                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00009754 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009754                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00009755                 db    5
.xdata$x:00009756                 db  93h ; ô
.xdata$x:00009757                 db  19h
.xdata$x:00009758                 db    1
.xdata$x:00009759                 db    0
.xdata$x:0000975A                 db    0
.xdata$x:0000975B                 db    0
.xdata$x:0000975C                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00009760                 db    0
.xdata$x:00009761                 db    0
.xdata$x:00009762                 db    0
.xdata$x:00009763                 db    0
.xdata$x:00009764                 db    0
.xdata$x:00009765                 db    0
.xdata$x:00009766                 db    0
.xdata$x:00009767                 db    0
.xdata$x:00009768                 db    0
.xdata$x:00009769                 db    0
.xdata$x:0000976A                 db    0
.xdata$x:0000976B                 db    0
.xdata$x:0000976C                 db    0
.xdata$x:0000976D                 db    0
.xdata$x:0000976E                 db    0
.xdata$x:0000976F                 db    0
.xdata$x:00009770                 db    0
.xdata$x:00009771                 db    0
.xdata$x:00009772                 db    0
.xdata$x:00009773                 db    0
.xdata$x:00009774                 db    0
.xdata$x:00009775                 db    0
.xdata$x:00009776                 db    0
.xdata$x:00009777                 db    0
.xdata$x:00009777 _xdata$x        ends
.xdata$x:00009777
.xdata$x:00009778 ; ===========================================================================
.xdata$x:00009778
.xdata$x:00009778 ; Segment type: Pure data
.xdata$x:00009778 ; Segment permissions: Read
.xdata$x:00009778 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009778                 assume cs:_xdata$x
.xdata$x:00009778                 ;org 9778h
.xdata$x:00009778 ; COMDAT (pick associative to section at 48D8)
.xdata$x:00009778 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009778                                         ; DATA XREF: .xdata$x:00009788o
.xdata$x:00009779                 db 0FFh
.xdata$x:0000977A                 db 0FFh
.xdata$x:0000977B                 db 0FFh
.xdata$x:0000977C                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00009780 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009780                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00009781                 db    5
.xdata$x:00009782                 db  93h ; ô
.xdata$x:00009783                 db  19h
.xdata$x:00009784                 db    1
.xdata$x:00009785                 db    0
.xdata$x:00009786                 db    0
.xdata$x:00009787                 db    0
.xdata$x:00009788                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:0000978C                 db    0
.xdata$x:0000978D                 db    0
.xdata$x:0000978E                 db    0
.xdata$x:0000978F                 db    0
.xdata$x:00009790                 db    0
.xdata$x:00009791                 db    0
.xdata$x:00009792                 db    0
.xdata$x:00009793                 db    0
.xdata$x:00009794                 db    0
.xdata$x:00009795                 db    0
.xdata$x:00009796                 db    0
.xdata$x:00009797                 db    0
.xdata$x:00009798                 db    0
.xdata$x:00009799                 db    0
.xdata$x:0000979A                 db    0
.xdata$x:0000979B                 db    0
.xdata$x:0000979C                 db    0
.xdata$x:0000979D                 db    0
.xdata$x:0000979E                 db    0
.xdata$x:0000979F                 db    0
.xdata$x:000097A0                 db    0
.xdata$x:000097A1                 db    0
.xdata$x:000097A2                 db    0
.xdata$x:000097A3                 db    0
.xdata$x:000097A3 _xdata$x        ends
.xdata$x:000097A3
.xdata$x:000097A4 ; ===========================================================================
.xdata$x:000097A4
.xdata$x:000097A4 ; Segment type: Pure data
.xdata$x:000097A4 ; Segment permissions: Read
.xdata$x:000097A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000097A4                 assume cs:_xdata$x
.xdata$x:000097A4                 ;org 97A4h
.xdata$x:000097A4 ; COMDAT (pick associative to section at 3988)
.xdata$x:000097A4 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:000097A4                                         ; DATA XREF: .xdata$x:000097B4o
.xdata$x:000097A5                 db 0FFh
.xdata$x:000097A6                 db 0FFh
.xdata$x:000097A7                 db 0FFh
.xdata$x:000097A8                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:000097AC __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:000097AC                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:000097AD                 db    5
.xdata$x:000097AE                 db  93h ; ô
.xdata$x:000097AF                 db  19h
.xdata$x:000097B0                 db    1
.xdata$x:000097B1                 db    0
.xdata$x:000097B2                 db    0
.xdata$x:000097B3                 db    0
.xdata$x:000097B4                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:000097B8                 db    0
.xdata$x:000097B9                 db    0
.xdata$x:000097BA                 db    0
.xdata$x:000097BB                 db    0
.xdata$x:000097BC                 db    0
.xdata$x:000097BD                 db    0
.xdata$x:000097BE                 db    0
.xdata$x:000097BF                 db    0
.xdata$x:000097C0                 db    0
.xdata$x:000097C1                 db    0
.xdata$x:000097C2                 db    0
.xdata$x:000097C3                 db    0
.xdata$x:000097C4                 db    0
.xdata$x:000097C5                 db    0
.xdata$x:000097C6                 db    0
.xdata$x:000097C7                 db    0
.xdata$x:000097C8                 db    0
.xdata$x:000097C9                 db    0
.xdata$x:000097CA                 db    0
.xdata$x:000097CB                 db    0
.xdata$x:000097CC                 db    0
.xdata$x:000097CD                 db    0
.xdata$x:000097CE                 db    0
.xdata$x:000097CF                 db    0
.xdata$x:000097CF _xdata$x        ends
.xdata$x:000097CF
.xdata$x:000097D0 ; ===========================================================================
.xdata$x:000097D0
.xdata$x:000097D0 ; Segment type: Pure data
.xdata$x:000097D0 ; Segment permissions: Read
.xdata$x:000097D0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000097D0                 assume cs:_xdata$x
.xdata$x:000097D0                 ;org 97D0h
.xdata$x:000097D0 ; COMDAT (pick associative to section at 4710)
.xdata$x:000097D0 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000097D0                                         ; DATA XREF: .xdata$x:000097E0o
.xdata$x:000097D1                 db 0FFh
.xdata$x:000097D2                 db 0FFh
.xdata$x:000097D3                 db 0FFh
.xdata$x:000097D4                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:000097D8 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000097D8                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:000097D9                 db    5
.xdata$x:000097DA                 db  93h ; ô
.xdata$x:000097DB                 db  19h
.xdata$x:000097DC                 db    1
.xdata$x:000097DD                 db    0
.xdata$x:000097DE                 db    0
.xdata$x:000097DF                 db    0
.xdata$x:000097E0                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:000097E4                 db    0
.xdata$x:000097E5                 db    0
.xdata$x:000097E6                 db    0
.xdata$x:000097E7                 db    0
.xdata$x:000097E8                 db    0
.xdata$x:000097E9                 db    0
.xdata$x:000097EA                 db    0
.xdata$x:000097EB                 db    0
.xdata$x:000097EC                 db    0
.xdata$x:000097ED                 db    0
.xdata$x:000097EE                 db    0
.xdata$x:000097EF                 db    0
.xdata$x:000097F0                 db    0
.xdata$x:000097F1                 db    0
.xdata$x:000097F2                 db    0
.xdata$x:000097F3                 db    0
.xdata$x:000097F4                 db    0
.xdata$x:000097F5                 db    0
.xdata$x:000097F6                 db    0
.xdata$x:000097F7                 db    0
.xdata$x:000097F8                 db    0
.xdata$x:000097F9                 db    0
.xdata$x:000097FA                 db    0
.xdata$x:000097FB                 db    0
.xdata$x:000097FB _xdata$x        ends
.xdata$x:000097FB
.xdata$x:000097FC ; ===========================================================================
.xdata$x:000097FC
.xdata$x:000097FC ; Segment type: Pure data
.xdata$x:000097FC ; Segment permissions: Read
.xdata$x:000097FC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000097FC                 assume cs:_xdata$x
.xdata$x:000097FC                 ;org 97FCh
.xdata$x:000097FC ; COMDAT (pick associative to section at 4064)
.xdata$x:000097FC __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:000097FC                                         ; DATA XREF: .xdata$x:0000980Co
.xdata$x:000097FD                 db 0FFh
.xdata$x:000097FE                 db 0FFh
.xdata$x:000097FF                 db 0FFh
.xdata$x:00009800                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:00009804 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00009804                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:00009805                 db    5
.xdata$x:00009806                 db  93h ; ô
.xdata$x:00009807                 db  19h
.xdata$x:00009808                 db    1
.xdata$x:00009809                 db    0
.xdata$x:0000980A                 db    0
.xdata$x:0000980B                 db    0
.xdata$x:0000980C                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:00009810                 db    0
.xdata$x:00009811                 db    0
.xdata$x:00009812                 db    0
.xdata$x:00009813                 db    0
.xdata$x:00009814                 db    0
.xdata$x:00009815                 db    0
.xdata$x:00009816                 db    0
.xdata$x:00009817                 db    0
.xdata$x:00009818                 db    0
.xdata$x:00009819                 db    0
.xdata$x:0000981A                 db    0
.xdata$x:0000981B                 db    0
.xdata$x:0000981C                 db    0
.xdata$x:0000981D                 db    0
.xdata$x:0000981E                 db    0
.xdata$x:0000981F                 db    0
.xdata$x:00009820                 db    0
.xdata$x:00009821                 db    0
.xdata$x:00009822                 db    0
.xdata$x:00009823                 db    0
.xdata$x:00009824                 db    0
.xdata$x:00009825                 db    0
.xdata$x:00009826                 db    0
.xdata$x:00009827                 db    0
.xdata$x:00009827 _xdata$x        ends
.xdata$x:00009827
.xdata$x:00009828 ; ===========================================================================
.xdata$x:00009828
.xdata$x:00009828 ; Segment type: Pure data
.xdata$x:00009828 ; Segment permissions: Read
.xdata$x:00009828 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009828                 assume cs:_xdata$x
.xdata$x:00009828                 ;org 9828h
.xdata$x:00009828 ; COMDAT (pick associative to section at 41AC)
.xdata$x:00009828 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:00009828                                         ; DATA XREF: .xdata$x:00009838o
.xdata$x:00009829                 db 0FFh
.xdata$x:0000982A                 db 0FFh
.xdata$x:0000982B                 db 0FFh
.xdata$x:0000982C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:00009830 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00009830                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:00009831                 db    5
.xdata$x:00009832                 db  93h ; ô
.xdata$x:00009833                 db  19h
.xdata$x:00009834                 db    1
.xdata$x:00009835                 db    0
.xdata$x:00009836                 db    0
.xdata$x:00009837                 db    0
.xdata$x:00009838                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000983C                 db    0
.xdata$x:0000983D                 db    0
.xdata$x:0000983E                 db    0
.xdata$x:0000983F                 db    0
.xdata$x:00009840                 db    0
.xdata$x:00009841                 db    0
.xdata$x:00009842                 db    0
.xdata$x:00009843                 db    0
.xdata$x:00009844                 db    0
.xdata$x:00009845                 db    0
.xdata$x:00009846                 db    0
.xdata$x:00009847                 db    0
.xdata$x:00009848                 db    0
.xdata$x:00009849                 db    0
.xdata$x:0000984A                 db    0
.xdata$x:0000984B                 db    0
.xdata$x:0000984C                 db    0
.xdata$x:0000984D                 db    0
.xdata$x:0000984E                 db    0
.xdata$x:0000984F                 db    0
.xdata$x:00009850                 db    0
.xdata$x:00009851                 db    0
.xdata$x:00009852                 db    0
.xdata$x:00009853                 db    0
.xdata$x:00009853 _xdata$x        ends
.xdata$x:00009853
.xdata$x:00009854 ; ===========================================================================
.xdata$x:00009854
.xdata$x:00009854 ; Segment type: Pure data
.xdata$x:00009854 ; Segment permissions: Read
.xdata$x:00009854 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009854                 assume cs:_xdata$x
.xdata$x:00009854                 ;org 9854h
.xdata$x:00009854 ; COMDAT (pick associative to section at 4114)
.xdata$x:00009854 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:00009854                                         ; DATA XREF: .xdata$x:00009864o
.xdata$x:00009855                 db 0FFh
.xdata$x:00009856                 db 0FFh
.xdata$x:00009857                 db 0FFh
.xdata$x:00009858                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:0000985C __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000985C                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:0000985D                 db    5
.xdata$x:0000985E                 db  93h ; ô
.xdata$x:0000985F                 db  19h
.xdata$x:00009860                 db    1
.xdata$x:00009861                 db    0
.xdata$x:00009862                 db    0
.xdata$x:00009863                 db    0
.xdata$x:00009864                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:00009868                 align 20h
.xdata$x:00009868 _xdata$x        ends
.xdata$x:00009868
.xdata$x:00009880 ; ===========================================================================
.xdata$x:00009880
.xdata$x:00009880 ; Segment type: Pure data
.xdata$x:00009880 ; Segment permissions: Read
.xdata$x:00009880 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009880                 assume cs:_xdata$x
.xdata$x:00009880                 ;org 9880h
.xdata$x:00009880 ; COMDAT (pick associative to section at 3FC0)
.xdata$x:00009880 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db 0FFh
.xdata$x:00009880                                         ; DATA XREF: .xdata$x:00009890o
.xdata$x:00009881                 db 0FFh
.xdata$x:00009882                 db 0FFh
.xdata$x:00009883                 db 0FFh
.xdata$x:00009884                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0
.xdata$x:00009888 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z db  22h ; "
.xdata$x:00009888                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z+11o
.xdata$x:00009889                 db    5
.xdata$x:0000988A                 db  93h ; ô
.xdata$x:0000988B                 db  19h
.xdata$x:0000988C                 db    1
.xdata$x:0000988D                 db    0
.xdata$x:0000988E                 db    0
.xdata$x:0000988F                 db    0
.xdata$x:00009890                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
.xdata$x:00009894                 db    0
.xdata$x:00009895                 db    0
.xdata$x:00009896                 db    0
.xdata$x:00009897                 db    0
.xdata$x:00009898                 db    0
.xdata$x:00009899                 db    0
.xdata$x:0000989A                 db    0
.xdata$x:0000989B                 db    0
.xdata$x:0000989C                 db    0
.xdata$x:0000989D                 db    0
.xdata$x:0000989E                 db    0
.xdata$x:0000989F                 db    0
.xdata$x:000098A0                 db    0
.xdata$x:000098A1                 db    0
.xdata$x:000098A2                 db    0
.xdata$x:000098A3                 db    0
.xdata$x:000098A4                 db    0
.xdata$x:000098A5                 db    0
.xdata$x:000098A6                 db    0
.xdata$x:000098A7                 db    0
.xdata$x:000098A8                 db    0
.xdata$x:000098A9                 db    0
.xdata$x:000098AA                 db    0
.xdata$x:000098AB                 db    0
.xdata$x:000098AB _xdata$x        ends
.xdata$x:000098AB
.xdata$x:000098AC ; ===========================================================================
.xdata$x:000098AC
.xdata$x:000098AC ; Segment type: Pure data
.xdata$x:000098AC ; Segment permissions: Read
.xdata$x:000098AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000098AC                 assume cs:_xdata$x
.xdata$x:000098AC                 ;org 98ACh
.xdata$x:000098AC ; COMDAT (pick associative to section at 4AAC)
.xdata$x:000098AC __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:000098AC                                         ; DATA XREF: .xdata$x:000098BCo
.xdata$x:000098AD                 db 0FFh
.xdata$x:000098AE                 db 0FFh
.xdata$x:000098AF                 db 0FFh
.xdata$x:000098B0                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:000098B4 __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:000098B4                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:000098B5                 db    5
.xdata$x:000098B6                 db  93h ; ô
.xdata$x:000098B7                 db  19h
.xdata$x:000098B8                 db    1
.xdata$x:000098B9                 db    0
.xdata$x:000098BA                 db    0
.xdata$x:000098BB                 db    0
.xdata$x:000098BC                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:000098C0                 db    0
.xdata$x:000098C1                 db    0
.xdata$x:000098C2                 db    0
.xdata$x:000098C3                 db    0
.xdata$x:000098C4                 db    0
.xdata$x:000098C5                 db    0
.xdata$x:000098C6                 db    0
.xdata$x:000098C7                 db    0
.xdata$x:000098C8                 db    0
.xdata$x:000098C9                 db    0
.xdata$x:000098CA                 db    0
.xdata$x:000098CB                 db    0
.xdata$x:000098CC                 db    0
.xdata$x:000098CD                 db    0
.xdata$x:000098CE                 db    0
.xdata$x:000098CF                 db    0
.xdata$x:000098D0                 db    0
.xdata$x:000098D1                 db    0
.xdata$x:000098D2                 db    0
.xdata$x:000098D3                 db    0
.xdata$x:000098D4                 db    0
.xdata$x:000098D5                 db    0
.xdata$x:000098D6                 db    0
.xdata$x:000098D7                 db    0
.xdata$x:000098D7 _xdata$x        ends
.xdata$x:000098D7
.xdata$x:000098D8 ; ===========================================================================
.xdata$x:000098D8
.xdata$x:000098D8 ; Segment type: Pure data
.xdata$x:000098D8 ; Segment permissions: Read
.xdata$x:000098D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000098D8                 assume cs:_xdata$x
.xdata$x:000098D8                 ;org 98D8h
.xdata$x:000098D8 ; COMDAT (pick associative to section at 5E88)
.xdata$x:000098D8 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:000098D8                                         ; DATA XREF: .xdata$x:00009960o
.xdata$x:000098D9                 db    0
.xdata$x:000098DA                 db    0
.xdata$x:000098DB                 db    0
.xdata$x:000098DC                 db    0
.xdata$x:000098DD                 db    0
.xdata$x:000098DE                 db    0
.xdata$x:000098DF                 db    0
.xdata$x:000098E0                 db    0
.xdata$x:000098E1                 db    0
.xdata$x:000098E2                 db    0
.xdata$x:000098E3                 db    0
.xdata$x:000098E4                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:000098E8 __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:000098E8                                         ; DATA XREF: .xdata$x:0000994Co
.xdata$x:000098E9                 db    0
.xdata$x:000098EA                 db    0
.xdata$x:000098EB                 db    0
.xdata$x:000098EC                 db    0
.xdata$x:000098ED                 db    0
.xdata$x:000098EE                 db    0
.xdata$x:000098EF                 db    0
.xdata$x:000098F0                 db    0
.xdata$x:000098F1                 db    0
.xdata$x:000098F2                 db    0
.xdata$x:000098F3                 db    0
.xdata$x:000098F4                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:000098F8 __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:000098F8                                         ; DATA XREF: .xdata$x:00009920o
.xdata$x:000098F9                 db 0FFh
.xdata$x:000098FA                 db 0FFh
.xdata$x:000098FB                 db 0FFh
.xdata$x:000098FC                 db    0
.xdata$x:000098FD                 db    0
.xdata$x:000098FE                 db    0
.xdata$x:000098FF                 db    0
.xdata$x:00009900                 db 0FFh
.xdata$x:00009901                 db 0FFh
.xdata$x:00009902                 db 0FFh
.xdata$x:00009903                 db 0FFh
.xdata$x:00009904                 db    0
.xdata$x:00009905                 db    0
.xdata$x:00009906                 db    0
.xdata$x:00009907                 db    0
.xdata$x:00009908                 db    1
.xdata$x:00009909                 db    0
.xdata$x:0000990A                 db    0
.xdata$x:0000990B                 db    0
.xdata$x:0000990C                 db    0
.xdata$x:0000990D                 db    0
.xdata$x:0000990E                 db    0
.xdata$x:0000990F                 db    0
.xdata$x:00009910                 db    1
.xdata$x:00009911                 db    0
.xdata$x:00009912                 db    0
.xdata$x:00009913                 db    0
.xdata$x:00009914                 db    0
.xdata$x:00009915                 db    0
.xdata$x:00009916                 db    0
.xdata$x:00009917                 db    0
.xdata$x:00009918 __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00009918                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:00009919                 db    5
.xdata$x:0000991A                 db  93h ; ô
.xdata$x:0000991B                 db  19h
.xdata$x:0000991C                 db    4
.xdata$x:0000991D                 db    0
.xdata$x:0000991E                 db    0
.xdata$x:0000991F                 db    0
.xdata$x:00009920                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:00009924                 db    2
.xdata$x:00009925                 db    0
.xdata$x:00009926                 db    0
.xdata$x:00009927                 db    0
.xdata$x:00009928                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000992C                 db    0
.xdata$x:0000992D                 db    0
.xdata$x:0000992E                 db    0
.xdata$x:0000992F                 db    0
.xdata$x:00009930                 db    0
.xdata$x:00009931                 db    0
.xdata$x:00009932                 db    0
.xdata$x:00009933                 db    0
.xdata$x:00009934                 db    0
.xdata$x:00009935                 db    0
.xdata$x:00009936                 db    0
.xdata$x:00009937                 db    0
.xdata$x:00009938                 db    0
.xdata$x:00009939                 db    0
.xdata$x:0000993A                 db    0
.xdata$x:0000993B                 db    0
.xdata$x:0000993C __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:0000993C                                         ; DATA XREF: .xdata$x:00009928o
.xdata$x:0000993D                 db    0
.xdata$x:0000993E                 db    0
.xdata$x:0000993F                 db    0
.xdata$x:00009940                 db    2
.xdata$x:00009941                 db    0
.xdata$x:00009942                 db    0
.xdata$x:00009943                 db    0
.xdata$x:00009944                 db    3
.xdata$x:00009945                 db    0
.xdata$x:00009946                 db    0
.xdata$x:00009947                 db    0
.xdata$x:00009948                 db    1
.xdata$x:00009949                 db    0
.xdata$x:0000994A                 db    0
.xdata$x:0000994B                 db    0
.xdata$x:0000994C                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:00009950                 db    0
.xdata$x:00009951                 db    0
.xdata$x:00009952                 db    0
.xdata$x:00009953                 db    0
.xdata$x:00009954                 db    0
.xdata$x:00009955                 db    0
.xdata$x:00009956                 db    0
.xdata$x:00009957                 db    0
.xdata$x:00009958                 db    3
.xdata$x:00009959                 db    0
.xdata$x:0000995A                 db    0
.xdata$x:0000995B                 db    0
.xdata$x:0000995C                 db    1
.xdata$x:0000995D                 db    0
.xdata$x:0000995E                 db    0
.xdata$x:0000995F                 db    0
.xdata$x:00009960                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:00009960 _xdata$x        ends
.xdata$x:00009960
.xdata$x:00009964 ; ===========================================================================
.xdata$x:00009964
.xdata$x:00009964 ; Segment type: Pure data
.xdata$x:00009964 ; Segment permissions: Read
.xdata$x:00009964 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009964                 assume cs:_xdata$x
.xdata$x:00009964                 ;org 9964h
.xdata$x:00009964 ; COMDAT (pick associative to section at 3D94)
.xdata$x:00009964 __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009964                                         ; DATA XREF: .xdata$x:00009974o
.xdata$x:00009965                 db 0FFh
.xdata$x:00009966                 db 0FFh
.xdata$x:00009967                 db 0FFh
.xdata$x:00009968                 dd offset __unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000996C __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000996C                                         ; DATA XREF: __ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000996D                 db    5
.xdata$x:0000996E                 db  93h ; ô
.xdata$x:0000996F                 db  19h
.xdata$x:00009970                 db    1
.xdata$x:00009971                 db    0
.xdata$x:00009972                 db    0
.xdata$x:00009973                 db    0
.xdata$x:00009974                 dd offset __unwindtable$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:00009978                 db    0
.xdata$x:00009979                 db    0
.xdata$x:0000997A                 db    0
.xdata$x:0000997B                 db    0
.xdata$x:0000997C                 db    0
.xdata$x:0000997D                 db    0
.xdata$x:0000997E                 db    0
.xdata$x:0000997F                 db    0
.xdata$x:00009980                 db    0
.xdata$x:00009981                 db    0
.xdata$x:00009982                 db    0
.xdata$x:00009983                 db    0
.xdata$x:00009984                 db    0
.xdata$x:00009985                 db    0
.xdata$x:00009986                 db    0
.xdata$x:00009987                 db    0
.xdata$x:00009988                 db    0
.xdata$x:00009989                 db    0
.xdata$x:0000998A                 db    0
.xdata$x:0000998B                 db    0
.xdata$x:0000998C                 db    0
.xdata$x:0000998D                 db    0
.xdata$x:0000998E                 db    0
.xdata$x:0000998F                 db    0
.xdata$x:0000998F _xdata$x        ends
.xdata$x:0000998F
.xdata$x:00009990 ; ===========================================================================
.xdata$x:00009990
.xdata$x:00009990 ; Segment type: Pure data
.xdata$x:00009990 ; Segment permissions: Read
.xdata$x:00009990 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009990                 assume cs:_xdata$x
.xdata$x:00009990                 ;org 9990h
.xdata$x:00009990 ; COMDAT (pick associative to section at 49C0)
.xdata$x:00009990 __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009990                                         ; DATA XREF: .xdata$x:000099A0o
.xdata$x:00009991                 db 0FFh
.xdata$x:00009992                 db 0FFh
.xdata$x:00009993                 db 0FFh
.xdata$x:00009994                 dd offset __unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00009998 __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009998                                         ; DATA XREF: __ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00009999                 db    5
.xdata$x:0000999A                 db  93h ; ô
.xdata$x:0000999B                 db  19h
.xdata$x:0000999C                 db    1
.xdata$x:0000999D                 db    0
.xdata$x:0000999E                 db    0
.xdata$x:0000999F                 db    0
.xdata$x:000099A0                 dd offset __unwindtable$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
.xdata$x:000099A4                 db    0
.xdata$x:000099A5                 db    0
.xdata$x:000099A6                 db    0
.xdata$x:000099A7                 db    0
.xdata$x:000099A8                 db    0
.xdata$x:000099A9                 db    0
.xdata$x:000099AA                 db    0
.xdata$x:000099AB                 db    0
.xdata$x:000099AC                 db    0
.xdata$x:000099AD                 db    0
.xdata$x:000099AE                 db    0
.xdata$x:000099AF                 db    0
.xdata$x:000099B0                 db    0
.xdata$x:000099B1                 db    0
.xdata$x:000099B2                 db    0
.xdata$x:000099B3                 db    0
.xdata$x:000099B4                 db    0
.xdata$x:000099B5                 db    0
.xdata$x:000099B6                 db    0
.xdata$x:000099B7                 db    0
.xdata$x:000099B8                 db    0
.xdata$x:000099B9                 db    0
.xdata$x:000099BA                 db    0
.xdata$x:000099BB                 db    0
.xdata$x:000099BB _xdata$x        ends
.xdata$x:000099BB
.xdata$x:000099BC ; ===========================================================================
.xdata$x:000099BC
.xdata$x:000099BC ; Segment type: Pure data
.xdata$x:000099BC ; Segment permissions: Read
.xdata$x:000099BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:000099BC                 assume cs:_xdata$x
.xdata$x:000099BC                 ;org 99BCh
.xdata$x:000099BC ; COMDAT (pick associative to section at 3D18)
.xdata$x:000099BC __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db 0FFh
.xdata$x:000099BC                                         ; DATA XREF: .xdata$x:000099CCo
.xdata$x:000099BD                 db 0FFh
.xdata$x:000099BE                 db 0FFh
.xdata$x:000099BF                 db 0FFh
.xdata$x:000099C0                 dd offset __unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0
.xdata$x:000099C4 __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z db  22h ; "
.xdata$x:000099C4                                         ; DATA XREF: __ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z+11o
.xdata$x:000099C5                 db    5
.xdata$x:000099C6                 db  93h ; ô
.xdata$x:000099C7                 db  19h
.xdata$x:000099C8                 db    1
.xdata$x:000099C9                 db    0
.xdata$x:000099CA                 db    0
.xdata$x:000099CB                 db    0
.xdata$x:000099CC                 dd offset __unwindtable$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
.xdata$x:000099D0                 db    0
.xdata$x:000099D1                 db    0
.xdata$x:000099D2                 db    0
.xdata$x:000099D3                 db    0
.xdata$x:000099D4                 db    0
.xdata$x:000099D5                 db    0
.xdata$x:000099D6                 db    0
.xdata$x:000099D7                 db    0
.xdata$x:000099D8                 db    0
.xdata$x:000099D9                 db    0
.xdata$x:000099DA                 db    0
.xdata$x:000099DB                 db    0
.xdata$x:000099DC                 db    0
.xdata$x:000099DD                 db    0
.xdata$x:000099DE                 db    0
.xdata$x:000099DF                 db    0
.xdata$x:000099E0                 db    0
.xdata$x:000099E1                 db    0
.xdata$x:000099E2                 db    0
.xdata$x:000099E3                 db    0
.xdata$x:000099E4                 db    0
.xdata$x:000099E5                 db    0
.xdata$x:000099E6                 db    0
.xdata$x:000099E7                 db    0
.xdata$x:000099E7 _xdata$x        ends
.xdata$x:000099E7
.xdata$x:000099E8 ; ===========================================================================
.xdata$x:000099E8
.xdata$x:000099E8 ; Segment type: Pure data
.xdata$x:000099E8 ; Segment permissions: Read
.xdata$x:000099E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000099E8                 assume cs:_xdata$x
.xdata$x:000099E8                 ;org 99E8h
.xdata$x:000099E8 ; COMDAT (pick associative to section at 4948)
.xdata$x:000099E8 __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:000099E8                                         ; DATA XREF: .xdata$x:000099F8o
.xdata$x:000099E9                 db 0FFh
.xdata$x:000099EA                 db 0FFh
.xdata$x:000099EB                 db 0FFh
.xdata$x:000099EC                 dd offset __unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0
.xdata$x:000099F0 __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:000099F0                                         ; DATA XREF: __ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ+11o
.xdata$x:000099F1                 db    5
.xdata$x:000099F2                 db  93h ; ô
.xdata$x:000099F3                 db  19h
.xdata$x:000099F4                 db    1
.xdata$x:000099F5                 db    0
.xdata$x:000099F6                 db    0
.xdata$x:000099F7                 db    0
.xdata$x:000099F8                 dd offset __unwindtable$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
.xdata$x:000099FC                 db    0
.xdata$x:000099FD                 db    0
.xdata$x:000099FE                 db    0
.xdata$x:000099FF                 db    0
.xdata$x:00009A00                 db    0
.xdata$x:00009A01                 db    0
.xdata$x:00009A02                 db    0
.xdata$x:00009A03                 db    0
.xdata$x:00009A04                 db    0
.xdata$x:00009A05                 db    0
.xdata$x:00009A06                 db    0
.xdata$x:00009A07                 db    0
.xdata$x:00009A08                 db    0
.xdata$x:00009A09                 db    0
.xdata$x:00009A0A                 db    0
.xdata$x:00009A0B                 db    0
.xdata$x:00009A0C                 db    0
.xdata$x:00009A0D                 db    0
.xdata$x:00009A0E                 db    0
.xdata$x:00009A0F                 db    0
.xdata$x:00009A10                 db    0
.xdata$x:00009A11                 db    0
.xdata$x:00009A12                 db    0
.xdata$x:00009A13                 db    0
.xdata$x:00009A13 _xdata$x        ends
.xdata$x:00009A13
.xdata$x:00009A14 ; ===========================================================================
.xdata$x:00009A14
.xdata$x:00009A14 ; Segment type: Pure data
.xdata$x:00009A14 ; Segment permissions: Read
.xdata$x:00009A14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009A14                 assume cs:_xdata$x
.xdata$x:00009A14                 ;org 9A14h
.xdata$x:00009A14 ; COMDAT (pick associative to section at 4238)
.xdata$x:00009A14 __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:00009A14                                         ; DATA XREF: .xdata$x:00009A24o
.xdata$x:00009A15                 db 0FFh
.xdata$x:00009A16                 db 0FFh
.xdata$x:00009A17                 db 0FFh
.xdata$x:00009A18                 dd offset __unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:00009A1C __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00009A1C                                         ; DATA XREF: __ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:00009A1D                 db    5
.xdata$x:00009A1E                 db  93h ; ô
.xdata$x:00009A1F                 db  19h
.xdata$x:00009A20                 db    1
.xdata$x:00009A21                 db    0
.xdata$x:00009A22                 db    0
.xdata$x:00009A23                 db    0
.xdata$x:00009A24                 dd offset __unwindtable$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:00009A28                 align 20h
.xdata$x:00009A28 _xdata$x        ends
.xdata$x:00009A28
.xdata$x:00009A40 ; ===========================================================================
.xdata$x:00009A40
.xdata$x:00009A40 ; Segment type: Pure data
.xdata$x:00009A40 ; Segment permissions: Read
.xdata$x:00009A40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009A40                 assume cs:_xdata$x
.xdata$x:00009A40                 ;org 9A40h
.xdata$x:00009A40 ; COMDAT (pick associative to section at 4BB4)
.xdata$x:00009A40 __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db 0FFh
.xdata$x:00009A40                                         ; DATA XREF: .xdata$x:00009A50o
.xdata$x:00009A41                 db 0FFh
.xdata$x:00009A42                 db 0FFh
.xdata$x:00009A43                 db 0FFh
.xdata$x:00009A44                 dd offset __unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0
.xdata$x:00009A48 __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00009A48                                         ; DATA XREF: __ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ+11o
.xdata$x:00009A49                 db    5
.xdata$x:00009A4A                 db  93h ; ô
.xdata$x:00009A4B                 db  19h
.xdata$x:00009A4C                 db    1
.xdata$x:00009A4D                 db    0
.xdata$x:00009A4E                 db    0
.xdata$x:00009A4F                 db    0
.xdata$x:00009A50                 dd offset __unwindtable$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
.xdata$x:00009A54                 db    0
.xdata$x:00009A55                 db    0
.xdata$x:00009A56                 db    0
.xdata$x:00009A57                 db    0
.xdata$x:00009A58                 db    0
.xdata$x:00009A59                 db    0
.xdata$x:00009A5A                 db    0
.xdata$x:00009A5B                 db    0
.xdata$x:00009A5C                 db    0
.xdata$x:00009A5D                 db    0
.xdata$x:00009A5E                 db    0
.xdata$x:00009A5F                 db    0
.xdata$x:00009A60                 db    0
.xdata$x:00009A61                 db    0
.xdata$x:00009A62                 db    0
.xdata$x:00009A63                 db    0
.xdata$x:00009A64                 db    0
.xdata$x:00009A65                 db    0
.xdata$x:00009A66                 db    0
.xdata$x:00009A67                 db    0
.xdata$x:00009A68                 db    0
.xdata$x:00009A69                 db    0
.xdata$x:00009A6A                 db    0
.xdata$x:00009A6B                 db    0
.xdata$x:00009A6B _xdata$x        ends
.xdata$x:00009A6B
.xdata$x:00009A6C ; ===========================================================================
.xdata$x:00009A6C
.xdata$x:00009A6C ; Segment type: Pure data
.xdata$x:00009A6C ; Segment permissions: Read
.xdata$x:00009A6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009A6C                 assume cs:_xdata$x
.xdata$x:00009A6C                 ;org 9A6Ch
.xdata$x:00009A6C ; COMDAT (pick associative to section at 6B78)
.xdata$x:00009A6C __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2 db    0
.xdata$x:00009A6C                                         ; DATA XREF: .xdata$x:00009A9Co
.xdata$x:00009A6D                 db    0
.xdata$x:00009A6E                 db    0
.xdata$x:00009A6F                 db    0
.xdata$x:00009A70                 db    0
.xdata$x:00009A71                 db    0
.xdata$x:00009A72                 db    0
.xdata$x:00009A73                 db    0
.xdata$x:00009A74                 db    0
.xdata$x:00009A75                 db    0
.xdata$x:00009A76                 db    0
.xdata$x:00009A77                 db    0
.xdata$x:00009A78                 dd offset __catch$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$0
.xdata$x:00009A7C __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db 0FFh
.xdata$x:00009A7C                                         ; DATA XREF: .xdata$x:00009AA8o
.xdata$x:00009A7D                 db 0FFh
.xdata$x:00009A7E                 db 0FFh
.xdata$x:00009A7F                 db 0FFh
.xdata$x:00009A80                 db    0
.xdata$x:00009A81                 db    0
.xdata$x:00009A82                 db    0
.xdata$x:00009A83                 db    0
.xdata$x:00009A84                 db 0FFh
.xdata$x:00009A85                 db 0FFh
.xdata$x:00009A86                 db 0FFh
.xdata$x:00009A87                 db 0FFh
.xdata$x:00009A88                 db    0
.xdata$x:00009A89                 db    0
.xdata$x:00009A8A                 db    0
.xdata$x:00009A8B                 db    0
.xdata$x:00009A8C __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db    0
.xdata$x:00009A8C                                         ; DATA XREF: .xdata$x:00009AB0o
.xdata$x:00009A8D                 db    0
.xdata$x:00009A8E                 db    0
.xdata$x:00009A8F                 db    0
.xdata$x:00009A90                 db    0
.xdata$x:00009A91                 db    0
.xdata$x:00009A92                 db    0
.xdata$x:00009A93                 db    0
.xdata$x:00009A94                 db    1
.xdata$x:00009A95                 db    0
.xdata$x:00009A96                 db    0
.xdata$x:00009A97                 db    0
.xdata$x:00009A98                 db    1
.xdata$x:00009A99                 db    0
.xdata$x:00009A9A                 db    0
.xdata$x:00009A9B                 db    0
.xdata$x:00009A9C                 dd offset __catchsym$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$2
.xdata$x:00009AA0 __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z db  22h ; "
.xdata$x:00009AA0                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z+11o
.xdata$x:00009AA1                 db    5
.xdata$x:00009AA2                 db  93h ; ô
.xdata$x:00009AA3                 db  19h
.xdata$x:00009AA4                 db    2
.xdata$x:00009AA5                 db    0
.xdata$x:00009AA6                 db    0
.xdata$x:00009AA7                 db    0
.xdata$x:00009AA8                 dd offset __unwindtable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:00009AAC                 db    1
.xdata$x:00009AAD                 db    0
.xdata$x:00009AAE                 db    0
.xdata$x:00009AAF                 db    0
.xdata$x:00009AB0                 dd offset __tryblocktable$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
.xdata$x:00009AB4                 db    0
.xdata$x:00009AB5                 db    0
.xdata$x:00009AB6                 db    0
.xdata$x:00009AB7                 db    0
.xdata$x:00009AB8                 db    0
.xdata$x:00009AB9                 db    0
.xdata$x:00009ABA                 db    0
.xdata$x:00009ABB                 db    0
.xdata$x:00009ABC                 db    0
.xdata$x:00009ABD                 db    0
.xdata$x:00009ABE                 db    0
.xdata$x:00009ABF                 db    0
.xdata$x:00009AC0                 db    0
.xdata$x:00009AC1                 db    0
.xdata$x:00009AC2                 db    0
.xdata$x:00009AC3                 db    0
.xdata$x:00009AC3 _xdata$x        ends
.xdata$x:00009AC3
.xdata$x:00009AC4 ; ===========================================================================
.xdata$x:00009AC4
.xdata$x:00009AC4 ; Segment type: Pure data
.xdata$x:00009AC4 ; Segment permissions: Read
.xdata$x:00009AC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009AC4                 assume cs:_xdata$x
.xdata$x:00009AC4                 ;org 9AC4h
.xdata$x:00009AC4 ; COMDAT (pick associative to section at 6894)
.xdata$x:00009AC4 __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db 0FFh
.xdata$x:00009AC4                                         ; DATA XREF: .xdata$x:00009AD4o
.xdata$x:00009AC5                 db 0FFh
.xdata$x:00009AC6                 db 0FFh
.xdata$x:00009AC7                 db 0FFh
.xdata$x:00009AC8                 dd offset __unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0
.xdata$x:00009ACC __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z db  22h ; "
.xdata$x:00009ACC                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z+11o
.xdata$x:00009ACD                 db    5
.xdata$x:00009ACE                 db  93h ; ô
.xdata$x:00009ACF                 db  19h
.xdata$x:00009AD0                 db    1
.xdata$x:00009AD1                 db    0
.xdata$x:00009AD2                 db    0
.xdata$x:00009AD3                 db    0
.xdata$x:00009AD4                 dd offset __unwindtable$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
.xdata$x:00009AD8                 db    0
.xdata$x:00009AD9                 db    0
.xdata$x:00009ADA                 db    0
.xdata$x:00009ADB                 db    0
.xdata$x:00009ADC                 db    0
.xdata$x:00009ADD                 db    0
.xdata$x:00009ADE                 db    0
.xdata$x:00009ADF                 db    0
.xdata$x:00009AE0                 db    0
.xdata$x:00009AE1                 db    0
.xdata$x:00009AE2                 db    0
.xdata$x:00009AE3                 db    0
.xdata$x:00009AE4                 db    0
.xdata$x:00009AE5                 db    0
.xdata$x:00009AE6                 db    0
.xdata$x:00009AE7                 db    0
.xdata$x:00009AE8                 db    0
.xdata$x:00009AE9                 db    0
.xdata$x:00009AEA                 db    0
.xdata$x:00009AEB                 db    0
.xdata$x:00009AEC                 db    0
.xdata$x:00009AED                 db    0
.xdata$x:00009AEE                 db    0
.xdata$x:00009AEF                 db    0
.xdata$x:00009AEF _xdata$x        ends
.xdata$x:00009AEF
.xdata$x:00009AF0 ; ===========================================================================
.xdata$x:00009AF0
.xdata$x:00009AF0 ; Segment type: Pure data
.xdata$x:00009AF0 ; Segment permissions: Read
.xdata$x:00009AF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009AF0                 assume cs:_xdata$x
.xdata$x:00009AF0                 ;org 9AF0h
.xdata$x:00009AF0 ; COMDAT (pick associative to section at 6A1C)
.xdata$x:00009AF0 __catchsym$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z$2 db    0
.xdata$x:00009AF0                                         ; DATA XREF: .xdata$x:00009B20o
.xdata$x:00009AF1                 db    0
.xdata$x:00009AF2                 db    0
.xdata$x:00009AF3                 db    0
.xdata$x:00009AF4                 db    0
.xdata$x:00009AF5                 db    0
.xdata$x:00009AF6                 db    0
.xdata$x:00009AF7                 db    0
.xdata$x:00009AF8                 db    0
.xdata$x:00009AF9                 db    0
.xdata$x:00009AFA                 db    0
.xdata$x:00009AFB                 db    0
.xdata$x:00009AFC                 dd offset __catch$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z$0
.xdata$x:00009B00 __unwindtable$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z db 0FFh
.xdata$x:00009B00                                         ; DATA XREF: .xdata$x:00009B2Co
.xdata$x:00009B01                 db 0FFh
.xdata$x:00009B02                 db 0FFh
.xdata$x:00009B03                 db 0FFh
.xdata$x:00009B04                 db    0
.xdata$x:00009B05                 db    0
.xdata$x:00009B06                 db    0
.xdata$x:00009B07                 db    0
.xdata$x:00009B08                 db 0FFh
.xdata$x:00009B09                 db 0FFh
.xdata$x:00009B0A                 db 0FFh
.xdata$x:00009B0B                 db 0FFh
.xdata$x:00009B0C                 db    0
.xdata$x:00009B0D                 db    0
.xdata$x:00009B0E                 db    0
.xdata$x:00009B0F                 db    0
.xdata$x:00009B10 __tryblocktable$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z db    0
.xdata$x:00009B10                                         ; DATA XREF: .xdata$x:00009B34o
.xdata$x:00009B11                 db    0
.xdata$x:00009B12                 db    0
.xdata$x:00009B13                 db    0
.xdata$x:00009B14                 db    0
.xdata$x:00009B15                 db    0
.xdata$x:00009B16                 db    0
.xdata$x:00009B17                 db    0
.xdata$x:00009B18                 db    1
.xdata$x:00009B19                 db    0
.xdata$x:00009B1A                 db    0
.xdata$x:00009B1B                 db    0
.xdata$x:00009B1C                 db    1
.xdata$x:00009B1D                 db    0
.xdata$x:00009B1E                 db    0
.xdata$x:00009B1F                 db    0
.xdata$x:00009B20                 dd offset __catchsym$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z$2
.xdata$x:00009B24 __ehfuncinfo$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z db  22h ; "
.xdata$x:00009B24                                         ; DATA XREF: __ehhandler$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z+11o
.xdata$x:00009B25                 db    5
.xdata$x:00009B26                 db  93h ; ô
.xdata$x:00009B27                 db  19h
.xdata$x:00009B28                 db    2
.xdata$x:00009B29                 db    0
.xdata$x:00009B2A                 db    0
.xdata$x:00009B2B                 db    0
.xdata$x:00009B2C                 dd offset __unwindtable$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.xdata$x:00009B30                 db    1
.xdata$x:00009B31                 db    0
.xdata$x:00009B32                 db    0
.xdata$x:00009B33                 db    0
.xdata$x:00009B34                 dd offset __tryblocktable$?_Reallocate@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IAEXI@Z
.xdata$x:00009B38                 db    0
.xdata$x:00009B39                 db    0
.xdata$x:00009B3A                 db    0
.xdata$x:00009B3B                 db    0
.xdata$x:00009B3C                 db    0
.xdata$x:00009B3D                 db    0
.xdata$x:00009B3E                 db    0
.xdata$x:00009B3F                 db    0
.xdata$x:00009B40                 db    0
.xdata$x:00009B41                 db    0
.xdata$x:00009B42                 db    0
.xdata$x:00009B43                 db    0
.xdata$x:00009B44                 db    0
.xdata$x:00009B45                 db    0
.xdata$x:00009B46                 db    0
.xdata$x:00009B47                 db    0
.xdata$x:00009B47 _xdata$x        ends
.xdata$x:00009B47
.xdata$x:00009B48 ; ===========================================================================
.xdata$x:00009B48
.xdata$x:00009B48 ; Segment type: Pure data
.xdata$x:00009B48 ; Segment permissions: Read
.xdata$x:00009B48 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009B48                 assume cs:_xdata$x
.xdata$x:00009B48                 ;org 9B48h
.xdata$x:00009B48 ; COMDAT (pick associative to section at 67B8)
.xdata$x:00009B48 __unwindtable$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z db 0FFh
.xdata$x:00009B48                                         ; DATA XREF: .xdata$x:00009B58o
.xdata$x:00009B49                 db 0FFh
.xdata$x:00009B4A                 db 0FFh
.xdata$x:00009B4B                 db 0FFh
.xdata$x:00009B4C                 dd offset __unwindfunclet$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z$0
.xdata$x:00009B50 __ehfuncinfo$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z db  22h ; "
.xdata$x:00009B50                                         ; DATA XREF: __ehhandler$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z+11o
.xdata$x:00009B51                 db    5
.xdata$x:00009B52                 db  93h ; ô
.xdata$x:00009B53                 db  19h
.xdata$x:00009B54                 db    1
.xdata$x:00009B55                 db    0
.xdata$x:00009B56                 db    0
.xdata$x:00009B57                 db    0
.xdata$x:00009B58                 dd offset __unwindtable$?_Orphan_range@?$vector@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@@std@@IBEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@2@0@Z
.xdata$x:00009B5C                 db    0
.xdata$x:00009B5D                 db    0
.xdata$x:00009B5E                 db    0
.xdata$x:00009B5F                 db    0
.xdata$x:00009B60                 db    0
.xdata$x:00009B61                 db    0
.xdata$x:00009B62                 db    0
.xdata$x:00009B63                 db    0
.xdata$x:00009B64                 db    0
.xdata$x:00009B65                 db    0
.xdata$x:00009B66                 db    0
.xdata$x:00009B67                 db    0
.xdata$x:00009B68                 db    0
.xdata$x:00009B69                 db    0
.xdata$x:00009B6A                 db    0
.xdata$x:00009B6B                 db    0
.xdata$x:00009B6C                 db    0
.xdata$x:00009B6D                 db    0
.xdata$x:00009B6E                 db    0
.xdata$x:00009B6F                 db    0
.xdata$x:00009B70                 db    0
.xdata$x:00009B71                 db    0
.xdata$x:00009B72                 db    0
.xdata$x:00009B73                 db    0
.xdata$x:00009B73 _xdata$x        ends
.xdata$x:00009B73
.xdata$x:00009B74 ; ===========================================================================
.xdata$x:00009B74
.xdata$x:00009B74 ; Segment type: Pure data
.xdata$x:00009B74 ; Segment permissions: Read
.xdata$x:00009B74 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009B74                 assume cs:_xdata$x
.xdata$x:00009B74                 ;org 9B74h
.xdata$x:00009B74 ; COMDAT (pick associative to section at 4B28)
.xdata$x:00009B74 __unwindtable$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ db 0FFh
.xdata$x:00009B74                                         ; DATA XREF: .xdata$x:00009B8Co
.xdata$x:00009B75                 db 0FFh
.xdata$x:00009B76                 db 0FFh
.xdata$x:00009B77                 db 0FFh
.xdata$x:00009B78                 dd offset __unwindfunclet$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ$0
.xdata$x:00009B7C                 align 10h
.xdata$x:00009B80                 dd offset __unwindfunclet$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ$1
.xdata$x:00009B84 __ehfuncinfo$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ db  22h ; "
.xdata$x:00009B84                                         ; DATA XREF: __ehhandler$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ+11o
.xdata$x:00009B85                 db    5
.xdata$x:00009B86                 db  93h ; ô
.xdata$x:00009B87                 db  19h
.xdata$x:00009B88                 db    2
.xdata$x:00009B89                 db    0
.xdata$x:00009B8A                 db    0
.xdata$x:00009B8B                 db    0
.xdata$x:00009B8C                 dd offset __unwindtable$??1?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@XZ
.xdata$x:00009B90                 db    0
.xdata$x:00009B91                 db    0
.xdata$x:00009B92                 db    0
.xdata$x:00009B93                 db    0
.xdata$x:00009B94                 db    0
.xdata$x:00009B95                 db    0
.xdata$x:00009B96                 db    0
.xdata$x:00009B97                 db    0
.xdata$x:00009B98                 db    0
.xdata$x:00009B99                 db    0
.xdata$x:00009B9A                 db    0
.xdata$x:00009B9B                 db    0
.xdata$x:00009B9C                 db    0
.xdata$x:00009B9D                 db    0
.xdata$x:00009B9E                 db    0
.xdata$x:00009B9F                 db    0
.xdata$x:00009BA0                 db    0
.xdata$x:00009BA1                 db    0
.xdata$x:00009BA2                 db    0
.xdata$x:00009BA3                 db    0
.xdata$x:00009BA4                 db    0
.xdata$x:00009BA5                 db    0
.xdata$x:00009BA6                 db    0
.xdata$x:00009BA7                 db    0
.xdata$x:00009BA7 _xdata$x        ends
.xdata$x:00009BA7
.xdata$x:00009BA8 ; ===========================================================================
.xdata$x:00009BA8
.xdata$x:00009BA8 ; Segment type: Pure data
.xdata$x:00009BA8 ; Segment permissions: Read
.xdata$x:00009BA8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009BA8                 assume cs:_xdata$x
.xdata$x:00009BA8                 ;org 9BA8h
.xdata$x:00009BA8 ; COMDAT (pick associative to section at 20C8)
.xdata$x:00009BA8 __unwindtable$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z db 0FFh
.xdata$x:00009BA8                                         ; DATA XREF: .xdata$x:00009BC0o
.xdata$x:00009BA9                 db 0FFh
.xdata$x:00009BAA                 db 0FFh
.xdata$x:00009BAB                 db 0FFh
.xdata$x:00009BAC                 dd offset __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z$0
.xdata$x:00009BB0                 db    0
.xdata$x:00009BB1                 db    0
.xdata$x:00009BB2                 db    0
.xdata$x:00009BB3                 db    0
.xdata$x:00009BB4                 dd offset __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z$1
.xdata$x:00009BB8 __ehfuncinfo$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z db  22h ; "
.xdata$x:00009BB8                                         ; DATA XREF: __ehhandler$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z+11o
.xdata$x:00009BB9                 db    5
.xdata$x:00009BBA                 db  93h ; ô
.xdata$x:00009BBB                 db  19h
.xdata$x:00009BBC                 db    2
.xdata$x:00009BBD                 db    0
.xdata$x:00009BBE                 db    0
.xdata$x:00009BBF                 db    0
.xdata$x:00009BC0                 dd offset __unwindtable$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAU01@@Z
.xdata$x:00009BC4                 db    0
.xdata$x:00009BC5                 db    0
.xdata$x:00009BC6                 db    0
.xdata$x:00009BC7                 db    0
.xdata$x:00009BC8                 db    0
.xdata$x:00009BC9                 db    0
.xdata$x:00009BCA                 db    0
.xdata$x:00009BCB                 db    0
.xdata$x:00009BCC                 db    0
.xdata$x:00009BCD                 db    0
.xdata$x:00009BCE                 db    0
.xdata$x:00009BCF                 db    0
.xdata$x:00009BD0                 db    0
.xdata$x:00009BD1                 db    0
.xdata$x:00009BD2                 db    0
.xdata$x:00009BD3                 db    0
.xdata$x:00009BD4                 db    0
.xdata$x:00009BD5                 db    0
.xdata$x:00009BD6                 db    0
.xdata$x:00009BD7                 db    0
.xdata$x:00009BD8                 db    0
.xdata$x:00009BD9                 db    0
.xdata$x:00009BDA                 db    0
.xdata$x:00009BDB                 db    0
.xdata$x:00009BDB _xdata$x        ends
.xdata$x:00009BDB
.xdata$x:00009BDC ; ===========================================================================
.xdata$x:00009BDC
.xdata$x:00009BDC ; Segment type: Pure data
.xdata$x:00009BDC ; Segment permissions: Read
.xdata$x:00009BDC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009BDC                 assume cs:_xdata$x
.xdata$x:00009BDC                 ;org 9BDCh
.xdata$x:00009BDC ; COMDAT (pick associative to section at 7028)
.xdata$x:00009BDC __unwindtable$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db 0FFh
.xdata$x:00009BDC                                         ; DATA XREF: .xdata$x:00009BFCo
.xdata$x:00009BDD                 db 0FFh
.xdata$x:00009BDE                 db 0FFh
.xdata$x:00009BDF                 db 0FFh
.xdata$x:00009BE0                 dd offset __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0
.xdata$x:00009BE4                 align 8
.xdata$x:00009BE8                 dd offset __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1
.xdata$x:00009BEC                 db    1
.xdata$x:00009BED                 db    0
.xdata$x:00009BEE                 db    0
.xdata$x:00009BEF                 db    0
.xdata$x:00009BF0                 dd offset __unwindfunclet$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$2
.xdata$x:00009BF4 __ehfuncinfo$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z db  22h ; "
.xdata$x:00009BF4                                         ; DATA XREF: __ehhandler$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+1Bo
.xdata$x:00009BF5                 db    5
.xdata$x:00009BF6                 db  93h ; ô
.xdata$x:00009BF7                 db  19h
.xdata$x:00009BF8                 db    3
.xdata$x:00009BF9                 db    0
.xdata$x:00009BFA                 db    0
.xdata$x:00009BFB                 db    0
.xdata$x:00009BFC                 dd offset __unwindtable$?addThemeFromXml@ThemeSwitcher@@QAEXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
.xdata$x:00009C00                 db    0
.xdata$x:00009C01                 db    0
.xdata$x:00009C02                 db    0
.xdata$x:00009C03                 db    0
.xdata$x:00009C04                 db    0
.xdata$x:00009C05                 db    0
.xdata$x:00009C06                 db    0
.xdata$x:00009C07                 db    0
.xdata$x:00009C08                 db    0
.xdata$x:00009C09                 db    0
.xdata$x:00009C0A                 db    0
.xdata$x:00009C0B                 db    0
.xdata$x:00009C0C                 db    0
.xdata$x:00009C0D                 db    0
.xdata$x:00009C0E                 db    0
.xdata$x:00009C0F                 db    0
.xdata$x:00009C10                 db    0
.xdata$x:00009C11                 db    0
.xdata$x:00009C12                 db    0
.xdata$x:00009C13                 db    0
.xdata$x:00009C14                 db    0
.xdata$x:00009C15                 db    0
.xdata$x:00009C16                 db    0
.xdata$x:00009C17                 db    0
.xdata$x:00009C17 _xdata$x        ends
.xdata$x:00009C17
.xdata$x:00009C18 ; ===========================================================================
.xdata$x:00009C18
.xdata$x:00009C18 ; Segment type: Pure data
.xdata$x:00009C18 ; Segment permissions: Read
.xdata$x:00009C18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C18                 assume cs:_xdata$x
.xdata$x:00009C18                 ;org 9C18h
.xdata$x:00009C18 ; COMDAT (pick associative to section at 201C)
.xdata$x:00009C18 __unwindtable$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z db 0FFh
.xdata$x:00009C18                                         ; DATA XREF: .xdata$x:00009C30o
.xdata$x:00009C19                 db 0FFh
.xdata$x:00009C1A                 db 0FFh
.xdata$x:00009C1B                 db 0FFh
.xdata$x:00009C1C                 dd offset __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$0
.xdata$x:00009C20                 db    0
.xdata$x:00009C21                 db    0
.xdata$x:00009C22                 db    0
.xdata$x:00009C23                 db    0
.xdata$x:00009C24                 dd offset __unwindfunclet$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z$1
.xdata$x:00009C28 __ehfuncinfo$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z db  22h ; "
.xdata$x:00009C28                                         ; DATA XREF: __ehhandler$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z+11o
.xdata$x:00009C29                 db    5
.xdata$x:00009C2A                 db  93h ; ô
.xdata$x:00009C2B                 db  19h
.xdata$x:00009C2C                 db    2
.xdata$x:00009C2D                 db    0
.xdata$x:00009C2E                 db    0
.xdata$x:00009C2F                 db    0
.xdata$x:00009C30                 dd offset __unwindtable$??$?0V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV01@X@?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@QAE@$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@AAV21@@Z
.xdata$x:00009C34                 db    0
.xdata$x:00009C35                 db    0
.xdata$x:00009C36                 db    0
.xdata$x:00009C37                 db    0
.xdata$x:00009C38                 db    0
.xdata$x:00009C39                 db    0
.xdata$x:00009C3A                 db    0
.xdata$x:00009C3B                 db    0
.xdata$x:00009C3C                 db    0
.xdata$x:00009C3D                 db    0
.xdata$x:00009C3E                 db    0
.xdata$x:00009C3F                 db    0
.xdata$x:00009C40                 db    0
.xdata$x:00009C41                 db    0
.xdata$x:00009C42                 db    0
.xdata$x:00009C43                 db    0
.xdata$x:00009C44                 db    0
.xdata$x:00009C45                 db    0
.xdata$x:00009C46                 db    0
.xdata$x:00009C47                 db    0
.xdata$x:00009C48                 db    0
.xdata$x:00009C49                 db    0
.xdata$x:00009C4A                 db    0
.xdata$x:00009C4B                 db    0
.xdata$x:00009C4B _xdata$x        ends
.xdata$x:00009C4B
.xdata$x:00009C4C ; ===========================================================================
.xdata$x:00009C4C
.xdata$x:00009C4C ; Segment type: Pure data
.xdata$x:00009C4C ; Segment permissions: Read
.xdata$x:00009C4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C4C                 assume cs:_xdata$x
.xdata$x:00009C4C                 ;org 9C4Ch
.xdata$x:00009C4C ; COMDAT (pick associative to section at 7F38)
.xdata$x:00009C4C __unwindtable$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db 0FFh
.xdata$x:00009C4C                                         ; DATA XREF: .xdata$x:00009C5Co
.xdata$x:00009C4D                 db 0FFh
.xdata$x:00009C4E                 db 0FFh
.xdata$x:00009C4F                 db 0FFh
.xdata$x:00009C50                 dd offset __unwindfunclet$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
.xdata$x:00009C54 __ehfuncinfo$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ db  22h ; "
.xdata$x:00009C54                                         ; DATA XREF: __ehhandler$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ+11o
.xdata$x:00009C55                 db    5
.xdata$x:00009C56                 db  93h ; ô
.xdata$x:00009C57                 db  19h
.xdata$x:00009C58                 db    1
.xdata$x:00009C59                 db    0
.xdata$x:00009C5A                 db    0
.xdata$x:00009C5B                 db    0
.xdata$x:00009C5C                 dd offset __unwindtable$?getNppPath@NppParameters@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
.xdata$x:00009C60                 db    0
.xdata$x:00009C61                 db    0
.xdata$x:00009C62                 db    0
.xdata$x:00009C63                 db    0
.xdata$x:00009C64                 db    0
.xdata$x:00009C65                 db    0
.xdata$x:00009C66                 db    0
.xdata$x:00009C67                 db    0
.xdata$x:00009C68                 db    0
.xdata$x:00009C69                 db    0
.xdata$x:00009C6A                 db    0
.xdata$x:00009C6B                 db    0
.xdata$x:00009C6C                 db    0
.xdata$x:00009C6D                 db    0
.xdata$x:00009C6E                 db    0
.xdata$x:00009C6F                 db    0
.xdata$x:00009C70                 db    0
.xdata$x:00009C71                 db    0
.xdata$x:00009C72                 db    0
.xdata$x:00009C73                 db    0
.xdata$x:00009C74                 db    0
.xdata$x:00009C75                 db    0
.xdata$x:00009C76                 db    0
.xdata$x:00009C77                 db    0
.xdata$x:00009C77 _xdata$x        ends
.xdata$x:00009C77
.xdata$x:00009C78 ; ===========================================================================
.xdata$x:00009C78
.xdata$x:00009C78 ; Segment type: Pure data
.xdata$x:00009C78 ; Segment permissions: Read
.xdata$x:00009C78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C78                 assume cs:_xdata$x
.xdata$x:00009C78                 ;org 9C78h
.xdata$x:00009C78 __ehfuncinfo$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z db  22h ; "
.xdata$x:00009C78                                         ; DATA XREF: __ehhandler$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z+1Eo
.xdata$x:00009C79                 db    5
.xdata$x:00009C7A                 db  93h ; ô
.xdata$x:00009C7B                 db  19h
.xdata$x:00009C7C                 db  13h
.xdata$x:00009C7D                 db    0
.xdata$x:00009C7E                 db    0
.xdata$x:00009C7F                 db    0
.xdata$x:00009C80                 dd offset __unwindtable$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z
.xdata$x:00009C84                 db    0
.xdata$x:00009C85                 db    0
.xdata$x:00009C86                 db    0
.xdata$x:00009C87                 db    0
.xdata$x:00009C88                 db    0
.xdata$x:00009C89                 db    0
.xdata$x:00009C8A                 db    0
.xdata$x:00009C8B                 db    0
.xdata$x:00009C8C                 db    0
.xdata$x:00009C8D                 db    0
.xdata$x:00009C8E                 db    0
.xdata$x:00009C8F                 db    0
.xdata$x:00009C90                 db    0
.xdata$x:00009C91                 db    0
.xdata$x:00009C92                 db    0
.xdata$x:00009C93                 db    0
.xdata$x:00009C94                 db    0
.xdata$x:00009C95                 db    0
.xdata$x:00009C96                 db    0
.xdata$x:00009C97                 db    0
.xdata$x:00009C98                 db    0
.xdata$x:00009C99                 db    0
.xdata$x:00009C9A                 db    0
.xdata$x:00009C9B                 db    0
.xdata$x:00009C9C __unwindtable$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z db 0FFh
.xdata$x:00009C9C                                         ; DATA XREF: .xdata$x:00009C80o
.xdata$x:00009C9D                 db 0FFh
.xdata$x:00009C9E                 db 0FFh
.xdata$x:00009C9F                 db 0FFh
.xdata$x:00009CA0                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$0
.xdata$x:00009CA4                 db 0FFh
.xdata$x:00009CA5                 db 0FFh
.xdata$x:00009CA6                 db 0FFh
.xdata$x:00009CA7                 db 0FFh
.xdata$x:00009CA8                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$1
.xdata$x:00009CAC                 db    1
.xdata$x:00009CAD                 db    0
.xdata$x:00009CAE                 db    0
.xdata$x:00009CAF                 db    0
.xdata$x:00009CB0                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$2
.xdata$x:00009CB4                 db    2
.xdata$x:00009CB5                 db    0
.xdata$x:00009CB6                 db    0
.xdata$x:00009CB7                 db    0
.xdata$x:00009CB8                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$3
.xdata$x:00009CBC                 db    2
.xdata$x:00009CBD                 db    0
.xdata$x:00009CBE                 db    0
.xdata$x:00009CBF                 db    0
.xdata$x:00009CC0                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$4
.xdata$x:00009CC4                 db    4
.xdata$x:00009CC5                 db    0
.xdata$x:00009CC6                 db    0
.xdata$x:00009CC7                 db    0
.xdata$x:00009CC8                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$5
.xdata$x:00009CCC                 db    5
.xdata$x:00009CCD                 db    0
.xdata$x:00009CCE                 db    0
.xdata$x:00009CCF                 db    0
.xdata$x:00009CD0                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$6
.xdata$x:00009CD4                 db    5
.xdata$x:00009CD5                 db    0
.xdata$x:00009CD6                 db    0
.xdata$x:00009CD7                 db    0
.xdata$x:00009CD8                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$8
.xdata$x:00009CDC                 db    5
.xdata$x:00009CDD                 db    0
.xdata$x:00009CDE                 db    0
.xdata$x:00009CDF                 db    0
.xdata$x:00009CE0                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$9
.xdata$x:00009CE4                 db    8
.xdata$x:00009CE5                 db    0
.xdata$x:00009CE6                 db    0
.xdata$x:00009CE7                 db    0
.xdata$x:00009CE8                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$10
.xdata$x:00009CEC                 db    8
.xdata$x:00009CED                 db    0
.xdata$x:00009CEE                 db    0
.xdata$x:00009CEF                 db    0
.xdata$x:00009CF0                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$12
.xdata$x:00009CF4                 db    8
.xdata$x:00009CF5                 db    0
.xdata$x:00009CF6                 db    0
.xdata$x:00009CF7                 db    0
.xdata$x:00009CF8                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$13
.xdata$x:00009CFC                 db    8
.xdata$x:00009CFD                 db    0
.xdata$x:00009CFE                 db    0
.xdata$x:00009CFF                 db    0
.xdata$x:00009D00                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$15
.xdata$x:00009D04                 db  0Ch
.xdata$x:00009D05                 db    0
.xdata$x:00009D06                 db    0
.xdata$x:00009D07                 db    0
.xdata$x:00009D08                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$16
.xdata$x:00009D0C                 db    8
.xdata$x:00009D0D                 db    0
.xdata$x:00009D0E                 db    0
.xdata$x:00009D0F                 db    0
.xdata$x:00009D10                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$17
.xdata$x:00009D14                 db  0Eh
.xdata$x:00009D15                 db    0
.xdata$x:00009D16                 db    0
.xdata$x:00009D17                 db    0
.xdata$x:00009D18                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$18
.xdata$x:00009D1C                 db  0Fh
.xdata$x:00009D1D                 db    0
.xdata$x:00009D1E                 db    0
.xdata$x:00009D1F                 db    0
.xdata$x:00009D20                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$19
.xdata$x:00009D24                 db  0Eh
.xdata$x:00009D25                 db    0
.xdata$x:00009D26                 db    0
.xdata$x:00009D27                 db    0
.xdata$x:00009D28                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$20
.xdata$x:00009D2C                 db  11h
.xdata$x:00009D2D                 db    0
.xdata$x:00009D2E                 db    0
.xdata$x:00009D2F                 db    0
.xdata$x:00009D30                 dd offset __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$21
.xdata$x:00009D30 _xdata$x        ends
.xdata$x:00009D30
.xdata$x:00009D34 ; ===========================================================================
.xdata$x:00009D34
.xdata$x:00009D34 ; Segment type: Pure data
.xdata$x:00009D34 ; Segment permissions: Read
.xdata$x:00009D34 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009D34                 assume cs:_xdata$x
.xdata$x:00009D34                 ;org 9D34h
.xdata$x:00009D34 ; COMDAT (pick associative to section at 3898)
.xdata$x:00009D34 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00009D34                                         ; DATA XREF: .xdata$x:00009D44o
.xdata$x:00009D35                 db 0FFh
.xdata$x:00009D36                 db 0FFh
.xdata$x:00009D37                 db 0FFh
.xdata$x:00009D38                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00009D3C __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00009D3C                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00009D3D                 db    5
.xdata$x:00009D3E                 db  93h ; ô
.xdata$x:00009D3F                 db  19h
.xdata$x:00009D40                 db    1
.xdata$x:00009D41                 db    0
.xdata$x:00009D42                 db    0
.xdata$x:00009D43                 db    0
.xdata$x:00009D44                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00009D48                 align 20h
.xdata$x:00009D48 _xdata$x        ends
.xdata$x:00009D48
.xdata$x:00009D60 ; ===========================================================================
.xdata$x:00009D60
.xdata$x:00009D60 ; Segment type: Pure data
.xdata$x:00009D60 ; Segment permissions: Read
.xdata$x:00009D60 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009D60                 assume cs:_xdata$x
.xdata$x:00009D60                 ;org 9D60h
.xdata$x:00009D60 ; COMDAT (pick associative to section at 4628)
.xdata$x:00009D60 __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:00009D60                                         ; DATA XREF: .xdata$x:00009D70o
.xdata$x:00009D61                 db 0FFh
.xdata$x:00009D62                 db 0FFh
.xdata$x:00009D63                 db 0FFh
.xdata$x:00009D64                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:00009D68 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00009D68                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:00009D69                 db    5
.xdata$x:00009D6A                 db  93h ; ô
.xdata$x:00009D6B                 db  19h
.xdata$x:00009D6C                 db    1
.xdata$x:00009D6D                 db    0
.xdata$x:00009D6E                 db    0
.xdata$x:00009D6F                 db    0
.xdata$x:00009D70                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:00009D74                 db    0
.xdata$x:00009D75                 db    0
.xdata$x:00009D76                 db    0
.xdata$x:00009D77                 db    0
.xdata$x:00009D78                 db    0
.xdata$x:00009D79                 db    0
.xdata$x:00009D7A                 db    0
.xdata$x:00009D7B                 db    0
.xdata$x:00009D7C                 db    0
.xdata$x:00009D7D                 db    0
.xdata$x:00009D7E                 db    0
.xdata$x:00009D7F                 db    0
.xdata$x:00009D80                 db    0
.xdata$x:00009D81                 db    0
.xdata$x:00009D82                 db    0
.xdata$x:00009D83                 db    0
.xdata$x:00009D84                 db    0
.xdata$x:00009D85                 db    0
.xdata$x:00009D86                 db    0
.xdata$x:00009D87                 db    0
.xdata$x:00009D88                 db    0
.xdata$x:00009D89                 db    0
.xdata$x:00009D8A                 db    0
.xdata$x:00009D8B                 db    0
.xdata$x:00009D8B _xdata$x        ends
.xdata$x:00009D8B
.xdata$x:00009D8C ; ===========================================================================
.xdata$x:00009D8C
.xdata$x:00009D8C ; Segment type: Pure data
.xdata$x:00009D8C ; Segment permissions: Read
.xdata$x:00009D8C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009D8C                 assume cs:_xdata$x
.xdata$x:00009D8C                 ;org 9D8Ch
.xdata$x:00009D8C ; COMDAT (pick associative to section at 3820)
.xdata$x:00009D8C __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:00009D8C                                         ; DATA XREF: .xdata$x:00009D9Co
.xdata$x:00009D8D                 db 0FFh
.xdata$x:00009D8E                 db 0FFh
.xdata$x:00009D8F                 db 0FFh
.xdata$x:00009D90                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:00009D94 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:00009D94                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:00009D95                 db    5
.xdata$x:00009D96                 db  93h ; ô
.xdata$x:00009D97                 db  19h
.xdata$x:00009D98                 db    1
.xdata$x:00009D99                 db    0
.xdata$x:00009D9A                 db    0
.xdata$x:00009D9B                 db    0
.xdata$x:00009D9C                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@DHPBDABDU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:00009DA0                 db    0
.xdata$x:00009DA1                 db    0
.xdata$x:00009DA2                 db    0
.xdata$x:00009DA3                 db    0
.xdata$x:00009DA4                 db    0
.xdata$x:00009DA5                 db    0
.xdata$x:00009DA6                 db    0
.xdata$x:00009DA7                 db    0
.xdata$x:00009DA8                 db    0
.xdata$x:00009DA9                 db    0
.xdata$x:00009DAA                 db    0
.xdata$x:00009DAB                 db    0
.xdata$x:00009DAC                 db    0
.xdata$x:00009DAD                 db    0
.xdata$x:00009DAE                 db    0
.xdata$x:00009DAF                 db    0
.xdata$x:00009DB0                 db    0
.xdata$x:00009DB1                 db    0
.xdata$x:00009DB2                 db    0
.xdata$x:00009DB3                 db    0
.xdata$x:00009DB4                 db    0
.xdata$x:00009DB5                 db    0
.xdata$x:00009DB6                 db    0
.xdata$x:00009DB7                 db    0
.xdata$x:00009DB7 _xdata$x        ends
.xdata$x:00009DB7
.xdata$x:00009DB8 ; ===========================================================================
.xdata$x:00009DB8
.xdata$x:00009DB8 ; Segment type: Pure data
.xdata$x:00009DB8 ; Segment permissions: Read
.xdata$x:00009DB8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009DB8                 assume cs:_xdata$x
.xdata$x:00009DB8                 ;org 9DB8h
.xdata$x:00009DB8 ; COMDAT (pick associative to section at 3A88)
.xdata$x:00009DB8 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z db 0FFh
.xdata$x:00009DB8                                         ; DATA XREF: .xdata$x:00009DC8o
.xdata$x:00009DB9                 db 0FFh
.xdata$x:00009DBA                 db 0FFh
.xdata$x:00009DBB                 db 0FFh
.xdata$x:00009DBC                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z$0
.xdata$x:00009DC0 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00009DC0                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z+11o
.xdata$x:00009DC1                 db    5
.xdata$x:00009DC2                 db  93h ; ô
.xdata$x:00009DC3                 db  19h
.xdata$x:00009DC4                 db    1
.xdata$x:00009DC5                 db    0
.xdata$x:00009DC6                 db    0
.xdata$x:00009DC7                 db    0
.xdata$x:00009DC8                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base12@1@@Z
.xdata$x:00009DCC                 db    0
.xdata$x:00009DCD                 db    0
.xdata$x:00009DCE                 db    0
.xdata$x:00009DCF                 db    0
.xdata$x:00009DD0                 db    0
.xdata$x:00009DD1                 db    0
.xdata$x:00009DD2                 db    0
.xdata$x:00009DD3                 db    0
.xdata$x:00009DD4                 db    0
.xdata$x:00009DD5                 db    0
.xdata$x:00009DD6                 db    0
.xdata$x:00009DD7                 db    0
.xdata$x:00009DD8                 db    0
.xdata$x:00009DD9                 db    0
.xdata$x:00009DDA                 db    0
.xdata$x:00009DDB                 db    0
.xdata$x:00009DDC                 db    0
.xdata$x:00009DDD                 db    0
.xdata$x:00009DDE                 db    0
.xdata$x:00009DDF                 db    0
.xdata$x:00009DE0                 db    0
.xdata$x:00009DE1                 db    0
.xdata$x:00009DE2                 db    0
.xdata$x:00009DE3                 db    0
.xdata$x:00009DE3 _xdata$x        ends
.xdata$x:00009DE3
.xdata$x:00009DE4 ; ===========================================================================
.xdata$x:00009DE4
.xdata$x:00009DE4 ; Segment type: Pure data
.xdata$x:00009DE4 ; Segment permissions: Read
.xdata$x:00009DE4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009DE4                 assume cs:_xdata$x
.xdata$x:00009DE4                 ;org 9DE4h
.xdata$x:00009DE4 ; COMDAT (pick associative to section at 4788)
.xdata$x:00009DE4 __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009DE4                                         ; DATA XREF: .xdata$x:00009DF4o
.xdata$x:00009DE5                 db 0FFh
.xdata$x:00009DE6                 db 0FFh
.xdata$x:00009DE7                 db 0FFh
.xdata$x:00009DE8                 dd offset __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00009DEC __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009DEC                                         ; DATA XREF: __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00009DED                 db    5
.xdata$x:00009DEE                 db  93h ; ô
.xdata$x:00009DEF                 db  19h
.xdata$x:00009DF0                 db    1
.xdata$x:00009DF1                 db    0
.xdata$x:00009DF2                 db    0
.xdata$x:00009DF3                 db    0
.xdata$x:00009DF4                 dd offset __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
.xdata$x:00009DF8                 db    0
.xdata$x:00009DF9                 db    0
.xdata$x:00009DFA                 db    0
.xdata$x:00009DFB                 db    0
.xdata$x:00009DFC                 db    0
.xdata$x:00009DFD                 db    0
.xdata$x:00009DFE                 db    0
.xdata$x:00009DFF                 db    0
.xdata$x:00009E00                 db    0
.xdata$x:00009E01                 db    0
.xdata$x:00009E02                 db    0
.xdata$x:00009E03                 db    0
.xdata$x:00009E04                 db    0
.xdata$x:00009E05                 db    0
.xdata$x:00009E06                 db    0
.xdata$x:00009E07                 db    0
.xdata$x:00009E08                 db    0
.xdata$x:00009E09                 db    0
.xdata$x:00009E0A                 db    0
.xdata$x:00009E0B                 db    0
.xdata$x:00009E0C                 db    0
.xdata$x:00009E0D                 db    0
.xdata$x:00009E0E                 db    0
.xdata$x:00009E0F                 db    0
.xdata$x:00009E0F _xdata$x        ends
.xdata$x:00009E0F
.xdata$x:00009E10 ; ===========================================================================
.xdata$x:00009E10
.xdata$x:00009E10 ; Segment type: Pure data
.xdata$x:00009E10 ; Segment permissions: Read
.xdata$x:00009E10 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E10                 assume cs:_xdata$x
.xdata$x:00009E10                 ;org 9E10h
.xdata$x:00009E10 ; COMDAT (pick associative to section at 3A04)
.xdata$x:00009E10 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00009E10                                         ; DATA XREF: .xdata$x:00009E20o
.xdata$x:00009E11                 db 0FFh
.xdata$x:00009E12                 db 0FFh
.xdata$x:00009E13                 db 0FFh
.xdata$x:00009E14                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00009E18 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00009E18                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00009E19                 db    5
.xdata$x:00009E1A                 db  93h ; ô
.xdata$x:00009E1B                 db  19h
.xdata$x:00009E1C                 db    1
.xdata$x:00009E1D                 db    0
.xdata$x:00009E1E                 db    0
.xdata$x:00009E1F                 db    0
.xdata$x:00009E20                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00009E24                 db    0
.xdata$x:00009E25                 db    0
.xdata$x:00009E26                 db    0
.xdata$x:00009E27                 db    0
.xdata$x:00009E28                 db    0
.xdata$x:00009E29                 db    0
.xdata$x:00009E2A                 db    0
.xdata$x:00009E2B                 db    0
.xdata$x:00009E2C                 db    0
.xdata$x:00009E2D                 db    0
.xdata$x:00009E2E                 db    0
.xdata$x:00009E2F                 db    0
.xdata$x:00009E30                 db    0
.xdata$x:00009E31                 db    0
.xdata$x:00009E32                 db    0
.xdata$x:00009E33                 db    0
.xdata$x:00009E34                 db    0
.xdata$x:00009E35                 db    0
.xdata$x:00009E36                 db    0
.xdata$x:00009E37                 db    0
.xdata$x:00009E38                 db    0
.xdata$x:00009E39                 db    0
.xdata$x:00009E3A                 db    0
.xdata$x:00009E3B                 db    0
.xdata$x:00009E3B _xdata$x        ends
.xdata$x:00009E3B
.xdata$x:00009E3C ; ===========================================================================
.xdata$x:00009E3C
.xdata$x:00009E3C ; Segment type: Pure data
.xdata$x:00009E3C ; Segment permissions: Read
.xdata$x:00009E3C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E3C                 assume cs:_xdata$x
.xdata$x:00009E3C                 ;org 9E3Ch
.xdata$x:00009E3C ; COMDAT (pick associative to section at 3B8C)
.xdata$x:00009E3C __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z db 0FFh
.xdata$x:00009E3C                                         ; DATA XREF: .xdata$x:00009E4Co
.xdata$x:00009E3D                 db 0FFh
.xdata$x:00009E3E                 db 0FFh
.xdata$x:00009E3F                 db 0FFh
.xdata$x:00009E40                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z$0
.xdata$x:00009E44 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:00009E44                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z+11o
.xdata$x:00009E45                 db    5
.xdata$x:00009E46                 db  93h ; ô
.xdata$x:00009E47                 db  19h
.xdata$x:00009E48                 db    1
.xdata$x:00009E49                 db    0
.xdata$x:00009E4A                 db    0
.xdata$x:00009E4B                 db    0
.xdata$x:00009E4C                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base12@1@@Z
.xdata$x:00009E50                 db    0
.xdata$x:00009E51                 db    0
.xdata$x:00009E52                 db    0
.xdata$x:00009E53                 db    0
.xdata$x:00009E54                 db    0
.xdata$x:00009E55                 db    0
.xdata$x:00009E56                 db    0
.xdata$x:00009E57                 db    0
.xdata$x:00009E58                 db    0
.xdata$x:00009E59                 db    0
.xdata$x:00009E5A                 db    0
.xdata$x:00009E5B                 db    0
.xdata$x:00009E5C                 db    0
.xdata$x:00009E5D                 db    0
.xdata$x:00009E5E                 db    0
.xdata$x:00009E5F                 db    0
.xdata$x:00009E60                 db    0
.xdata$x:00009E61                 db    0
.xdata$x:00009E62                 db    0
.xdata$x:00009E63                 db    0
.xdata$x:00009E64                 db    0
.xdata$x:00009E65                 db    0
.xdata$x:00009E66                 db    0
.xdata$x:00009E67                 db    0
.xdata$x:00009E67 _xdata$x        ends
.xdata$x:00009E67
.xdata$x:00009E68 ; ===========================================================================
.xdata$x:00009E68
.xdata$x:00009E68 ; Segment type: Pure data
.xdata$x:00009E68 ; Segment permissions: Read
.xdata$x:00009E68 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E68                 assume cs:_xdata$x
.xdata$x:00009E68                 ;org 9E68h
.xdata$x:00009E68 ; COMDAT (pick associative to section at 55BC)
.xdata$x:00009E68 __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z db 0FFh
.xdata$x:00009E68                                         ; DATA XREF: .xdata$x:00009E78o
.xdata$x:00009E69                 db 0FFh
.xdata$x:00009E6A                 db 0FFh
.xdata$x:00009E6B                 db 0FFh
.xdata$x:00009E6C                 dd offset __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z$0
.xdata$x:00009E70 __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z db  22h ; "
.xdata$x:00009E70                                         ; DATA XREF: __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z+11o
.xdata$x:00009E71                 db    5
.xdata$x:00009E72                 db  93h ; ô
.xdata$x:00009E73                 db  19h
.xdata$x:00009E74                 db    1
.xdata$x:00009E75                 db    0
.xdata$x:00009E76                 db    0
.xdata$x:00009E77                 db    0
.xdata$x:00009E78                 dd offset __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z
.xdata$x:00009E7C                 db    0
.xdata$x:00009E7D                 db    0
.xdata$x:00009E7E                 db    0
.xdata$x:00009E7F                 db    0
.xdata$x:00009E80                 db    0
.xdata$x:00009E81                 db    0
.xdata$x:00009E82                 db    0
.xdata$x:00009E83                 db    0
.xdata$x:00009E84                 db    0
.xdata$x:00009E85                 db    0
.xdata$x:00009E86                 db    0
.xdata$x:00009E87                 db    0
.xdata$x:00009E88                 db    0
.xdata$x:00009E89                 db    0
.xdata$x:00009E8A                 db    0
.xdata$x:00009E8B                 db    0
.xdata$x:00009E8C                 db    0
.xdata$x:00009E8D                 db    0
.xdata$x:00009E8E                 db    0
.xdata$x:00009E8F                 db    0
.xdata$x:00009E90                 db    0
.xdata$x:00009E91                 db    0
.xdata$x:00009E92                 db    0
.xdata$x:00009E93                 db    0
.xdata$x:00009E93 _xdata$x        ends
.xdata$x:00009E93
.xdata$x:00009E94 ; ===========================================================================
.xdata$x:00009E94
.xdata$x:00009E94 ; Segment type: Pure data
.xdata$x:00009E94 ; Segment permissions: Read
.xdata$x:00009E94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E94                 assume cs:_xdata$x
.xdata$x:00009E94                 ;org 9E94h
.xdata$x:00009E94 ; COMDAT (pick associative to section at 47F8)
.xdata$x:00009E94 __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009E94                                         ; DATA XREF: .xdata$x:00009EA4o
.xdata$x:00009E95                 db 0FFh
.xdata$x:00009E96                 db 0FFh
.xdata$x:00009E97                 db 0FFh
.xdata$x:00009E98                 dd offset __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00009E9C __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009E9C                                         ; DATA XREF: __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00009E9D                 db    5
.xdata$x:00009E9E                 db  93h ; ô
.xdata$x:00009E9F                 db  19h
.xdata$x:00009EA0                 db    1
.xdata$x:00009EA1                 db    0
.xdata$x:00009EA2                 db    0
.xdata$x:00009EA3                 db    0
.xdata$x:00009EA4                 dd offset __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@XZ
.xdata$x:00009EA8                 align 20h
.xdata$x:00009EA8 _xdata$x        ends
.xdata$x:00009EA8
.xdata$x:00009EC0 ; ===========================================================================
.xdata$x:00009EC0
.xdata$x:00009EC0 ; Segment type: Pure data
.xdata$x:00009EC0 ; Segment permissions: Read
.xdata$x:00009EC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009EC0                 assume cs:_xdata$x
.xdata$x:00009EC0                 ;org 9EC0h
.xdata$x:00009EC0 ; COMDAT (pick associative to section at 3B14)
.xdata$x:00009EC0 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:00009EC0                                         ; DATA XREF: .xdata$x:00009ED0o
.xdata$x:00009EC1                 db 0FFh
.xdata$x:00009EC2                 db 0FFh
.xdata$x:00009EC3                 db 0FFh
.xdata$x:00009EC4                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:00009EC8 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:00009EC8                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:00009EC9                 db    5
.xdata$x:00009ECA                 db  93h ; ô
.xdata$x:00009ECB                 db  19h
.xdata$x:00009ECC                 db    1
.xdata$x:00009ECD                 db    0
.xdata$x:00009ECE                 db    0
.xdata$x:00009ECF                 db    0
.xdata$x:00009ED0                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:00009ED4                 db    0
.xdata$x:00009ED5                 db    0
.xdata$x:00009ED6                 db    0
.xdata$x:00009ED7                 db    0
.xdata$x:00009ED8                 db    0
.xdata$x:00009ED9                 db    0
.xdata$x:00009EDA                 db    0
.xdata$x:00009EDB                 db    0
.xdata$x:00009EDC                 db    0
.xdata$x:00009EDD                 db    0
.xdata$x:00009EDE                 db    0
.xdata$x:00009EDF                 db    0
.xdata$x:00009EE0                 db    0
.xdata$x:00009EE1                 db    0
.xdata$x:00009EE2                 db    0
.xdata$x:00009EE3                 db    0
.xdata$x:00009EE4                 db    0
.xdata$x:00009EE5                 db    0
.xdata$x:00009EE6                 db    0
.xdata$x:00009EE7                 db    0
.xdata$x:00009EE8                 db    0
.xdata$x:00009EE9                 db    0
.xdata$x:00009EEA                 db    0
.xdata$x:00009EEB                 db    0
.xdata$x:00009EEB _xdata$x        ends
.xdata$x:00009EEB
.xdata$x:00009EEC ; ===========================================================================
.xdata$x:00009EEC
.xdata$x:00009EEC ; Segment type: Pure data
.xdata$x:00009EEC ; Segment permissions: Read
.xdata$x:00009EEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009EEC                 assume cs:_xdata$x
.xdata$x:00009EEC                 ;org 9EECh
.xdata$x:00009EEC ; COMDAT (pick associative to section at 1EF4)
.xdata$x:00009EEC __ehfuncinfo$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:00009EEC                                         ; DATA XREF: __ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z+11o
.xdata$x:00009EED                 db    5
.xdata$x:00009EEE                 db  93h ; ô
.xdata$x:00009EEF                 db  19h
.xdata$x:00009EF0                 db    5
.xdata$x:00009EF1                 db    0
.xdata$x:00009EF2                 db    0
.xdata$x:00009EF3                 db    0
.xdata$x:00009EF4                 dd offset __unwindtable$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
.xdata$x:00009EF8                 db    0
.xdata$x:00009EF9                 db    0
.xdata$x:00009EFA                 db    0
.xdata$x:00009EFB                 db    0
.xdata$x:00009EFC                 db    0
.xdata$x:00009EFD                 db    0
.xdata$x:00009EFE                 db    0
.xdata$x:00009EFF                 db    0
.xdata$x:00009F00                 db    0
.xdata$x:00009F01                 db    0
.xdata$x:00009F02                 db    0
.xdata$x:00009F03                 db    0
.xdata$x:00009F04                 db    0
.xdata$x:00009F05                 db    0
.xdata$x:00009F06                 db    0
.xdata$x:00009F07                 db    0
.xdata$x:00009F08                 db    0
.xdata$x:00009F09                 db    0
.xdata$x:00009F0A                 db    0
.xdata$x:00009F0B                 db    0
.xdata$x:00009F0C                 db    0
.xdata$x:00009F0D                 db    0
.xdata$x:00009F0E                 db    0
.xdata$x:00009F0F                 db    0
.xdata$x:00009F10 __unwindtable$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z db 0FFh
.xdata$x:00009F10                                         ; DATA XREF: .xdata$x:00009EF4o
.xdata$x:00009F11                 db 0FFh
.xdata$x:00009F12                 db 0FFh
.xdata$x:00009F13                 db 0FFh
.xdata$x:00009F14                 dd offset __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$0
.xdata$x:00009F18                 db    0
.xdata$x:00009F19                 db    0
.xdata$x:00009F1A                 db    0
.xdata$x:00009F1B                 db    0
.xdata$x:00009F1C                 dd offset __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$1
.xdata$x:00009F20                 db    1
.xdata$x:00009F21                 db    0
.xdata$x:00009F22                 db    0
.xdata$x:00009F23                 db    0
.xdata$x:00009F24                 dd offset __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$2
.xdata$x:00009F28                 db    2
.xdata$x:00009F29                 db    0
.xdata$x:00009F2A                 db    0
.xdata$x:00009F2B                 db    0
.xdata$x:00009F2C                 dd offset __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$3
.xdata$x:00009F30                 db    3
.xdata$x:00009F31                 db    0
.xdata$x:00009F32                 db    0
.xdata$x:00009F33                 db    0
.xdata$x:00009F34                 dd offset __unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$4
.xdata$x:00009F34 _xdata$x        ends
.xdata$x:00009F34
.xdata$x:00009F38 ; ===========================================================================
.xdata$x:00009F38
.xdata$x:00009F38 ; Segment type: Pure data
.xdata$x:00009F38 ; Segment permissions: Read
.xdata$x:00009F38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F38                 assume cs:_xdata$x
.xdata$x:00009F38                 ;org 9F38h
.xdata$x:00009F38 ; COMDAT (pick associative to section at 2FEC)
.xdata$x:00009F38 __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:00009F38                                         ; DATA XREF: __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z+11o
.xdata$x:00009F39                 db    5
.xdata$x:00009F3A                 db  93h ; ô
.xdata$x:00009F3B                 db  19h
.xdata$x:00009F3C                 db  0Ah
.xdata$x:00009F3D                 db    0
.xdata$x:00009F3E                 db    0
.xdata$x:00009F3F                 db    0
.xdata$x:00009F40                 dd offset __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
.xdata$x:00009F44                 db    0
.xdata$x:00009F45                 db    0
.xdata$x:00009F46                 db    0
.xdata$x:00009F47                 db    0
.xdata$x:00009F48                 db    0
.xdata$x:00009F49                 db    0
.xdata$x:00009F4A                 db    0
.xdata$x:00009F4B                 db    0
.xdata$x:00009F4C                 db    0
.xdata$x:00009F4D                 db    0
.xdata$x:00009F4E                 db    0
.xdata$x:00009F4F                 db    0
.xdata$x:00009F50                 db    0
.xdata$x:00009F51                 db    0
.xdata$x:00009F52                 db    0
.xdata$x:00009F53                 db    0
.xdata$x:00009F54                 db    0
.xdata$x:00009F55                 db    0
.xdata$x:00009F56                 db    0
.xdata$x:00009F57                 db    0
.xdata$x:00009F58                 db    0
.xdata$x:00009F59                 db    0
.xdata$x:00009F5A                 db    0
.xdata$x:00009F5B                 db    0
.xdata$x:00009F5C __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z db 0FFh
.xdata$x:00009F5C                                         ; DATA XREF: .xdata$x:00009F40o
.xdata$x:00009F5D                 db 0FFh
.xdata$x:00009F5E                 db 0FFh
.xdata$x:00009F5F                 db 0FFh
.xdata$x:00009F60                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$0
.xdata$x:00009F64                 align 8
.xdata$x:00009F68                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$1
.xdata$x:00009F6C                 db    1
.xdata$x:00009F6D                 db    0
.xdata$x:00009F6E                 db    0
.xdata$x:00009F6F                 db    0
.xdata$x:00009F70                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$2
.xdata$x:00009F74                 db    2
.xdata$x:00009F75                 db    0
.xdata$x:00009F76                 db    0
.xdata$x:00009F77                 db    0
.xdata$x:00009F78                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$3
.xdata$x:00009F7C                 db    3
.xdata$x:00009F7D                 db    0
.xdata$x:00009F7E                 db    0
.xdata$x:00009F7F                 db    0
.xdata$x:00009F80                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$4
.xdata$x:00009F84                 db    4
.xdata$x:00009F85                 db    0
.xdata$x:00009F86                 db    0
.xdata$x:00009F87                 db    0
.xdata$x:00009F88                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$5
.xdata$x:00009F8C                 db    5
.xdata$x:00009F8D                 db    0
.xdata$x:00009F8E                 db    0
.xdata$x:00009F8F                 db    0
.xdata$x:00009F90                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$6
.xdata$x:00009F94                 db    6
.xdata$x:00009F95                 db    0
.xdata$x:00009F96                 db    0
.xdata$x:00009F97                 db    0
.xdata$x:00009F98                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$7
.xdata$x:00009F9C                 db    1
.xdata$x:00009F9D                 db    0
.xdata$x:00009F9E                 db    0
.xdata$x:00009F9F                 db    0
.xdata$x:00009FA0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$4
.xdata$x:00009FA4                 db    8
.xdata$x:00009FA5                 db    0
.xdata$x:00009FA6                 db    0
.xdata$x:00009FA7                 db    0
.xdata$x:00009FA8                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z$6
.xdata$x:00009FA8 _xdata$x        ends
.xdata$x:00009FA8
.xdata$x:00009FAC ; ===========================================================================
.xdata$x:00009FAC
.xdata$x:00009FAC ; Segment type: Pure data
.xdata$x:00009FAC ; Segment permissions: Read
.xdata$x:00009FAC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009FAC                 assume cs:_xdata$x
.xdata$x:00009FAC                 ;org 9FACh
.xdata$x:00009FAC ; COMDAT (pick associative to section at 34AC)
.xdata$x:00009FAC __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:00009FAC                                         ; DATA XREF: .xdata$x:00009FBCo
.xdata$x:00009FAD                 db 0FFh
.xdata$x:00009FAE                 db 0FFh
.xdata$x:00009FAF                 db 0FFh
.xdata$x:00009FB0                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:00009FB4 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:00009FB4                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:00009FB5                 db    5
.xdata$x:00009FB6                 db  93h ; ô
.xdata$x:00009FB7                 db  19h
.xdata$x:00009FB8                 db    1
.xdata$x:00009FB9                 db    0
.xdata$x:00009FBA                 db    0
.xdata$x:00009FBB                 db    0
.xdata$x:00009FBC                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:00009FC0                 db    0
.xdata$x:00009FC1                 db    0
.xdata$x:00009FC2                 db    0
.xdata$x:00009FC3                 db    0
.xdata$x:00009FC4                 db    0
.xdata$x:00009FC5                 db    0
.xdata$x:00009FC6                 db    0
.xdata$x:00009FC7                 db    0
.xdata$x:00009FC8                 db    0
.xdata$x:00009FC9                 db    0
.xdata$x:00009FCA                 db    0
.xdata$x:00009FCB                 db    0
.xdata$x:00009FCC                 db    0
.xdata$x:00009FCD                 db    0
.xdata$x:00009FCE                 db    0
.xdata$x:00009FCF                 db    0
.xdata$x:00009FD0                 db    0
.xdata$x:00009FD1                 db    0
.xdata$x:00009FD2                 db    0
.xdata$x:00009FD3                 db    0
.xdata$x:00009FD4                 db    0
.xdata$x:00009FD5                 db    0
.xdata$x:00009FD6                 db    0
.xdata$x:00009FD7                 db    0
.xdata$x:00009FD7 _xdata$x        ends
.xdata$x:00009FD7
.xdata$x:00009FD8 ; ===========================================================================
.xdata$x:00009FD8
.xdata$x:00009FD8 ; Segment type: Pure data
.xdata$x:00009FD8 ; Segment permissions: Read
.xdata$x:00009FD8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009FD8                 assume cs:_xdata$x
.xdata$x:00009FD8                 ;org 9FD8h
.xdata$x:00009FD8 ; COMDAT (pick associative to section at 23D8)
.xdata$x:00009FD8 __catchsym$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$8 db    0
.xdata$x:00009FD8                                         ; DATA XREF: .xdata$x:00009FF8o
.xdata$x:00009FD9                 db    0
.xdata$x:00009FDA                 db    0
.xdata$x:00009FDB                 db    0
.xdata$x:00009FDC                 db    0
.xdata$x:00009FDD                 db    0
.xdata$x:00009FDE                 db    0
.xdata$x:00009FDF                 db    0
.xdata$x:00009FE0                 db    0
.xdata$x:00009FE1                 db    0
.xdata$x:00009FE2                 db    0
.xdata$x:00009FE3                 db    0
.xdata$x:00009FE4                 dd offset __catch$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$0
.xdata$x:00009FE8 __tryblocktable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z db    6
.xdata$x:00009FE8                                         ; DATA XREF: .xdata$x:0000A00Co
.xdata$x:00009FE9                 db    0
.xdata$x:00009FEA                 db    0
.xdata$x:00009FEB                 db    0
.xdata$x:00009FEC                 db    6
.xdata$x:00009FED                 db    0
.xdata$x:00009FEE                 db    0
.xdata$x:00009FEF                 db    0
.xdata$x:00009FF0                 db    7
.xdata$x:00009FF1                 db    0
.xdata$x:00009FF2                 db    0
.xdata$x:00009FF3                 db    0
.xdata$x:00009FF4                 db    1
.xdata$x:00009FF5                 db    0
.xdata$x:00009FF6                 db    0
.xdata$x:00009FF7                 db    0
.xdata$x:00009FF8                 dd offset __catchsym$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$8
.xdata$x:00009FFC __ehfuncinfo$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z db  22h ; "
.xdata$x:00009FFC                                         ; DATA XREF: __ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z+11o
.xdata$x:00009FFD                 db    5
.xdata$x:00009FFE                 db  93h ; ô
.xdata$x:00009FFF                 db  19h
.xdata$x:0000A000                 db    8
.xdata$x:0000A001                 db    0
.xdata$x:0000A002                 db    0
.xdata$x:0000A003                 db    0
.xdata$x:0000A004                 dd offset __unwindtable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.xdata$x:0000A008                 db    1
.xdata$x:0000A009                 db    0
.xdata$x:0000A00A                 db    0
.xdata$x:0000A00B                 db    0
.xdata$x:0000A00C                 dd offset __tryblocktable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z
.xdata$x:0000A010                 align 20h
.xdata$x:0000A020 __unwindtable$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z db 0FFh
.xdata$x:0000A020                                         ; DATA XREF: .xdata$x:0000A004o
.xdata$x:0000A021                 db 0FFh
.xdata$x:0000A022                 db 0FFh
.xdata$x:0000A023                 db 0FFh
.xdata$x:0000A024                 dd offset __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$2
.xdata$x:0000A028                 db    0
.xdata$x:0000A029                 db    0
.xdata$x:0000A02A                 db    0
.xdata$x:0000A02B                 db    0
.xdata$x:0000A02C                 dd offset __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$3
.xdata$x:0000A030                 db    1
.xdata$x:0000A031                 db    0
.xdata$x:0000A032                 db    0
.xdata$x:0000A033                 db    0
.xdata$x:0000A034                 dd offset __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$4
.xdata$x:0000A038                 db    2
.xdata$x:0000A039                 db    0
.xdata$x:0000A03A                 db    0
.xdata$x:0000A03B                 db    0
.xdata$x:0000A03C                 dd offset __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$5
.xdata$x:0000A040                 db    1
.xdata$x:0000A041                 db    0
.xdata$x:0000A042                 db    0
.xdata$x:0000A043                 db    0
.xdata$x:0000A044                 dd offset __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$6
.xdata$x:0000A048                 db    4
.xdata$x:0000A049                 db    0
.xdata$x:0000A04A                 db    0
.xdata$x:0000A04B                 db    0
.xdata$x:0000A04C                 dd offset __unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$7
.xdata$x:0000A050                 db    1
.xdata$x:0000A051                 db    0
.xdata$x:0000A052                 db    0
.xdata$x:0000A053                 db    0
.xdata$x:0000A054                 db    0
.xdata$x:0000A055                 db    0
.xdata$x:0000A056                 db    0
.xdata$x:0000A057                 db    0
.xdata$x:0000A058                 db    1
.xdata$x:0000A059                 db    0
.xdata$x:0000A05A                 db    0
.xdata$x:0000A05B                 db    0
.xdata$x:0000A05C                 db    0
.xdata$x:0000A05D                 db    0
.xdata$x:0000A05E                 db    0
.xdata$x:0000A05F                 db    0
.xdata$x:0000A05F _xdata$x        ends
.xdata$x:0000A05F
.xdata$x:0000A060 ; ===========================================================================
.xdata$x:0000A060
.xdata$x:0000A060 ; Segment type: Pure data
.xdata$x:0000A060 ; Segment permissions: Read
.xdata$x:0000A060 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A060                 assume cs:_xdata$x
.xdata$x:0000A060                 ;org 0A060h
.xdata$x:0000A060 ; COMDAT (pick associative to section at 2828)
.xdata$x:0000A060 __unwindtable$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z db 0FFh
.xdata$x:0000A060                                         ; DATA XREF: .xdata$x:0000A088o
.xdata$x:0000A061                 db 0FFh
.xdata$x:0000A062                 db 0FFh
.xdata$x:0000A063                 db 0FFh
.xdata$x:0000A064                 dd offset __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$0
.xdata$x:0000A068                 db    0
.xdata$x:0000A069                 db    0
.xdata$x:0000A06A                 db    0
.xdata$x:0000A06B                 db    0
.xdata$x:0000A06C                 dd offset __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$1
.xdata$x:0000A070                 db    1
.xdata$x:0000A071                 db    0
.xdata$x:0000A072                 db    0
.xdata$x:0000A073                 db    0
.xdata$x:0000A074                 dd offset __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$2
.xdata$x:0000A078                 db    2
.xdata$x:0000A079                 db    0
.xdata$x:0000A07A                 db    0
.xdata$x:0000A07B                 db    0
.xdata$x:0000A07C                 dd offset __unwindfunclet$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z$3
.xdata$x:0000A080 __ehfuncinfo$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z db  22h ; "
.xdata$x:0000A080                                         ; DATA XREF: __ehhandler$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z+11o
.xdata$x:0000A081                 db    5
.xdata$x:0000A082                 db  93h ; ô
.xdata$x:0000A083                 db  19h
.xdata$x:0000A084                 db    4
.xdata$x:0000A085                 db    0
.xdata$x:0000A086                 db    0
.xdata$x:0000A087                 db    0
.xdata$x:0000A088                 dd offset __unwindtable$??$_Debug_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WI@Z
.xdata$x:0000A08C                 db    0
.xdata$x:0000A08D                 db    0
.xdata$x:0000A08E                 db    0
.xdata$x:0000A08F                 db    0
.xdata$x:0000A090                 db    0
.xdata$x:0000A091                 db    0
.xdata$x:0000A092                 db    0
.xdata$x:0000A093                 db    0
.xdata$x:0000A094                 db    0
.xdata$x:0000A095                 db    0
.xdata$x:0000A096                 db    0
.xdata$x:0000A097                 db    0
.xdata$x:0000A098                 db    0
.xdata$x:0000A099                 db    0
.xdata$x:0000A09A                 db    0
.xdata$x:0000A09B                 db    0
.xdata$x:0000A09C                 db    0
.xdata$x:0000A09D                 db    0
.xdata$x:0000A09E                 db    0
.xdata$x:0000A09F                 db    0
.xdata$x:0000A0A0                 db    0
.xdata$x:0000A0A1                 db    0
.xdata$x:0000A0A2                 db    0
.xdata$x:0000A0A3                 db    0
.xdata$x:0000A0A3 _xdata$x        ends
.xdata$x:0000A0A3
.xdata$x:0000A0A4 ; ===========================================================================
.xdata$x:0000A0A4
.xdata$x:0000A0A4 ; Segment type: Pure data
.xdata$x:0000A0A4 ; Segment permissions: Read
.xdata$x:0000A0A4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A0A4                 assume cs:_xdata$x
.xdata$x:0000A0A4                 ;org 0A0A4h
.xdata$x:0000A0A4 ; COMDAT (pick associative to section at 2AAC)
.xdata$x:0000A0A4 __unwindtable$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z db 0FFh
.xdata$x:0000A0A4                                         ; DATA XREF: .xdata$x:0000A0CCo
.xdata$x:0000A0A5                 db 0FFh
.xdata$x:0000A0A6                 db 0FFh
.xdata$x:0000A0A7                 db 0FFh
.xdata$x:0000A0A8                 dd offset __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$0
.xdata$x:0000A0AC                 align 10h
.xdata$x:0000A0B0                 dd offset __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$1
.xdata$x:0000A0B4                 db    1
.xdata$x:0000A0B5                 db    0
.xdata$x:0000A0B6                 db    0
.xdata$x:0000A0B7                 db    0
.xdata$x:0000A0B8                 dd offset __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$2
.xdata$x:0000A0BC                 db    2
.xdata$x:0000A0BD                 db    0
.xdata$x:0000A0BE                 db    0
.xdata$x:0000A0BF                 db    0
.xdata$x:0000A0C0                 dd offset __unwindfunclet$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z$3
.xdata$x:0000A0C4 __ehfuncinfo$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z db  22h ; "
.xdata$x:0000A0C4                                         ; DATA XREF: __ehhandler$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z+11o
.xdata$x:0000A0C5                 db    5
.xdata$x:0000A0C6                 db  93h ; ô
.xdata$x:0000A0C7                 db  19h
.xdata$x:0000A0C8                 db    4
.xdata$x:0000A0C9                 db    0
.xdata$x:0000A0CA                 db    0
.xdata$x:0000A0CB                 db    0
.xdata$x:0000A0CC                 dd offset __unwindtable$??$_Distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAI@Z
.xdata$x:0000A0D0                 db    0
.xdata$x:0000A0D1                 db    0
.xdata$x:0000A0D2                 db    0
.xdata$x:0000A0D3                 db    0
.xdata$x:0000A0D4                 db    0
.xdata$x:0000A0D5                 db    0
.xdata$x:0000A0D6                 db    0
.xdata$x:0000A0D7                 db    0
.xdata$x:0000A0D8                 db    0
.xdata$x:0000A0D9                 db    0
.xdata$x:0000A0DA                 db    0
.xdata$x:0000A0DB                 db    0
.xdata$x:0000A0DC                 db    0
.xdata$x:0000A0DD                 db    0
.xdata$x:0000A0DE                 db    0
.xdata$x:0000A0DF                 db    0
.xdata$x:0000A0E0                 db    0
.xdata$x:0000A0E1                 db    0
.xdata$x:0000A0E2                 db    0
.xdata$x:0000A0E3                 db    0
.xdata$x:0000A0E4                 db    0
.xdata$x:0000A0E5                 db    0
.xdata$x:0000A0E6                 db    0
.xdata$x:0000A0E7                 db    0
.xdata$x:0000A0E7 _xdata$x        ends
.xdata$x:0000A0E7
.xdata$x:0000A0E8 ; ===========================================================================
.xdata$x:0000A0E8
.xdata$x:0000A0E8 ; Segment type: Pure data
.xdata$x:0000A0E8 ; Segment permissions: Read
.xdata$x:0000A0E8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A0E8                 assume cs:_xdata$x
.xdata$x:0000A0E8                 ;org 0A0E8h
.xdata$x:0000A0E8 ; COMDAT (pick associative to section at 35B0)
.xdata$x:0000A0E8 __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db 0FFh
.xdata$x:0000A0E8                                         ; DATA XREF: .xdata$x:0000A0F8o
.xdata$x:0000A0E9                 db 0FFh
.xdata$x:0000A0EA                 db 0FFh
.xdata$x:0000A0EB                 db 0FFh
.xdata$x:0000A0EC                 dd offset __unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0
.xdata$x:0000A0F0 __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z db  22h ; "
.xdata$x:0000A0F0                                         ; DATA XREF: __ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z+11o
.xdata$x:0000A0F1                 db    5
.xdata$x:0000A0F2                 db  93h ; ô
.xdata$x:0000A0F3                 db  19h
.xdata$x:0000A0F4                 db    1
.xdata$x:0000A0F5                 db    0
.xdata$x:0000A0F6                 db    0
.xdata$x:0000A0F7                 db    0
.xdata$x:0000A0F8                 dd offset __unwindtable$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
.xdata$x:0000A0FC                 db    0
.xdata$x:0000A0FD                 db    0
.xdata$x:0000A0FE                 db    0
.xdata$x:0000A0FF                 db    0
.xdata$x:0000A100                 db    0
.xdata$x:0000A101                 db    0
.xdata$x:0000A102                 db    0
.xdata$x:0000A103                 db    0
.xdata$x:0000A104                 db    0
.xdata$x:0000A105                 db    0
.xdata$x:0000A106                 db    0
.xdata$x:0000A107                 db    0
.xdata$x:0000A108                 db    0
.xdata$x:0000A109                 db    0
.xdata$x:0000A10A                 db    0
.xdata$x:0000A10B                 db    0
.xdata$x:0000A10C                 db    0
.xdata$x:0000A10D                 db    0
.xdata$x:0000A10E                 db    0
.xdata$x:0000A10F                 db    0
.xdata$x:0000A110                 db    0
.xdata$x:0000A111                 db    0
.xdata$x:0000A112                 db    0
.xdata$x:0000A113                 db    0
.xdata$x:0000A113 _xdata$x        ends
.xdata$x:0000A113
.xdata$x:0000A114 ; ===========================================================================
.xdata$x:0000A114
.xdata$x:0000A114 ; Segment type: Pure data
.xdata$x:0000A114 ; Segment permissions: Read
.xdata$x:0000A114 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A114                 assume cs:_xdata$x
.xdata$x:0000A114                 ;org 0A114h
.xdata$x:0000A114 ; COMDAT (pick associative to section at 33AC)
.xdata$x:0000A114 __unwindtable$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z db 0FFh
.xdata$x:0000A114                                         ; DATA XREF: .xdata$x:0000A124o
.xdata$x:0000A115                 db 0FFh
.xdata$x:0000A116                 db 0FFh
.xdata$x:0000A117                 db 0FFh
.xdata$x:0000A118                 dd offset __unwindfunclet$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z$0
.xdata$x:0000A11C __ehfuncinfo$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z db  22h ; "
.xdata$x:0000A11C                                         ; DATA XREF: __ehhandler$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z+11o
.xdata$x:0000A11D                 db    5
.xdata$x:0000A11E                 db  93h ; ô
.xdata$x:0000A11F                 db  19h
.xdata$x:0000A120                 db    1
.xdata$x:0000A121                 db    0
.xdata$x:0000A122                 db    0
.xdata$x:0000A123                 db    0
.xdata$x:0000A124                 dd offset __unwindtable$??$construct@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@U12@@?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@QAEXPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@1@$$QAU21@@Z
.xdata$x:0000A128                 align 20h
.xdata$x:0000A128 _xdata$x        ends
.xdata$x:0000A128
.xdata$x:0000A140 ; ===========================================================================
.xdata$x:0000A140
.xdata$x:0000A140 ; Segment type: Pure data
.xdata$x:0000A140 ; Segment permissions: Read
.xdata$x:0000A140 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A140                 assume cs:_xdata$x
.xdata$x:0000A140                 ;org 0A140h
.xdata$x:0000A140 ; COMDAT (pick associative to section at 31AC)
.xdata$x:0000A140 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:0000A140                                         ; DATA XREF: .xdata$x:0000A150o
.xdata$x:0000A141                 db 0FFh
.xdata$x:0000A142                 db 0FFh
.xdata$x:0000A143                 db 0FFh
.xdata$x:0000A144                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:0000A148 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:0000A148                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:0000A149                 db    5
.xdata$x:0000A14A                 db  93h ; ô
.xdata$x:0000A14B                 db  19h
.xdata$x:0000A14C                 db    1
.xdata$x:0000A14D                 db    0
.xdata$x:0000A14E                 db    0
.xdata$x:0000A14F                 db    0
.xdata$x:0000A150                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:0000A154                 db    0
.xdata$x:0000A155                 db    0
.xdata$x:0000A156                 db    0
.xdata$x:0000A157                 db    0
.xdata$x:0000A158                 db    0
.xdata$x:0000A159                 db    0
.xdata$x:0000A15A                 db    0
.xdata$x:0000A15B                 db    0
.xdata$x:0000A15C                 db    0
.xdata$x:0000A15D                 db    0
.xdata$x:0000A15E                 db    0
.xdata$x:0000A15F                 db    0
.xdata$x:0000A160                 db    0
.xdata$x:0000A161                 db    0
.xdata$x:0000A162                 db    0
.xdata$x:0000A163                 db    0
.xdata$x:0000A164                 db    0
.xdata$x:0000A165                 db    0
.xdata$x:0000A166                 db    0
.xdata$x:0000A167                 db    0
.xdata$x:0000A168                 db    0
.xdata$x:0000A169                 db    0
.xdata$x:0000A16A                 db    0
.xdata$x:0000A16B                 db    0
.xdata$x:0000A16B _xdata$x        ends
.xdata$x:0000A16B
.xdata$x:0000A16C ; ===========================================================================
.xdata$x:0000A16C
.xdata$x:0000A16C ; Segment type: Pure data
.xdata$x:0000A16C ; Segment permissions: Read
.xdata$x:0000A16C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A16C                 assume cs:_xdata$x
.xdata$x:0000A16C                 ;org 0A16Ch
.xdata$x:0000A16C ; COMDAT (pick associative to section at 32AC)
.xdata$x:0000A16C __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:0000A16C                                         ; DATA XREF: .xdata$x:0000A17Co
.xdata$x:0000A16D                 db 0FFh
.xdata$x:0000A16E                 db 0FFh
.xdata$x:0000A16F                 db 0FFh
.xdata$x:0000A170                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:0000A174 __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:0000A174                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:0000A175                 db    5
.xdata$x:0000A176                 db  93h ; ô
.xdata$x:0000A177                 db  19h
.xdata$x:0000A178                 db    1
.xdata$x:0000A179                 db    0
.xdata$x:0000A17A                 db    0
.xdata$x:0000A17B                 db    0
.xdata$x:0000A17C                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:0000A180                 db    0
.xdata$x:0000A181                 db    0
.xdata$x:0000A182                 db    0
.xdata$x:0000A183                 db    0
.xdata$x:0000A184                 db    0
.xdata$x:0000A185                 db    0
.xdata$x:0000A186                 db    0
.xdata$x:0000A187                 db    0
.xdata$x:0000A188                 db    0
.xdata$x:0000A189                 db    0
.xdata$x:0000A18A                 db    0
.xdata$x:0000A18B                 db    0
.xdata$x:0000A18C                 db    0
.xdata$x:0000A18D                 db    0
.xdata$x:0000A18E                 db    0
.xdata$x:0000A18F                 db    0
.xdata$x:0000A190                 db    0
.xdata$x:0000A191                 db    0
.xdata$x:0000A192                 db    0
.xdata$x:0000A193                 db    0
.xdata$x:0000A194                 db    0
.xdata$x:0000A195                 db    0
.xdata$x:0000A196                 db    0
.xdata$x:0000A197                 db    0
.xdata$x:0000A197 _xdata$x        ends
.xdata$x:0000A197
.xdata$x:0000A198 ; ===========================================================================
.xdata$x:0000A198
.xdata$x:0000A198 ; Segment type: Pure data
.xdata$x:0000A198 ; Segment permissions: Read
.xdata$x:0000A198 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A198                 assume cs:_xdata$x
.xdata$x:0000A198                 ;org 0A198h
.xdata$x:0000A198 ; COMDAT (pick associative to section at 26D4)
.xdata$x:0000A198 __unwindtable$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z db 0FFh
.xdata$x:0000A198                                         ; DATA XREF: .xdata$x:0000A1B0o
.xdata$x:0000A199                 db 0FFh
.xdata$x:0000A19A                 db 0FFh
.xdata$x:0000A19B                 db 0FFh
.xdata$x:0000A19C                 dd offset __unwindfunclet$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0
.xdata$x:0000A1A0                 db    0
.xdata$x:0000A1A1                 db    0
.xdata$x:0000A1A2                 db    0
.xdata$x:0000A1A3                 db    0
.xdata$x:0000A1A4                 dd offset __unwindfunclet$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1
.xdata$x:0000A1A8 __ehfuncinfo$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000A1A8                                         ; DATA XREF: __ehhandler$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z+11o
.xdata$x:0000A1A9                 db    5
.xdata$x:0000A1AA                 db  93h ; ô
.xdata$x:0000A1AB                 db  19h
.xdata$x:0000A1AC                 db    2
.xdata$x:0000A1AD                 db    0
.xdata$x:0000A1AE                 db    0
.xdata$x:0000A1AF                 db    0
.xdata$x:0000A1B0                 dd offset __unwindtable$??$_Debug_range2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
.xdata$x:0000A1B4                 db    0
.xdata$x:0000A1B5                 db    0
.xdata$x:0000A1B6                 db    0
.xdata$x:0000A1B7                 db    0
.xdata$x:0000A1B8                 db    0
.xdata$x:0000A1B9                 db    0
.xdata$x:0000A1BA                 db    0
.xdata$x:0000A1BB                 db    0
.xdata$x:0000A1BC                 db    0
.xdata$x:0000A1BD                 db    0
.xdata$x:0000A1BE                 db    0
.xdata$x:0000A1BF                 db    0
.xdata$x:0000A1C0                 db    0
.xdata$x:0000A1C1                 db    0
.xdata$x:0000A1C2                 db    0
.xdata$x:0000A1C3                 db    0
.xdata$x:0000A1C4                 db    0
.xdata$x:0000A1C5                 db    0
.xdata$x:0000A1C6                 db    0
.xdata$x:0000A1C7                 db    0
.xdata$x:0000A1C8                 db    0
.xdata$x:0000A1C9                 db    0
.xdata$x:0000A1CA                 db    0
.xdata$x:0000A1CB                 db    0
.xdata$x:0000A1CB _xdata$x        ends
.xdata$x:0000A1CB
.xdata$x:0000A1CC ; ===========================================================================
.xdata$x:0000A1CC
.xdata$x:0000A1CC ; Segment type: Pure data
.xdata$x:0000A1CC ; Segment permissions: Read
.xdata$x:0000A1CC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A1CC                 assume cs:_xdata$x
.xdata$x:0000A1CC                 ;org 0A1CCh
.xdata$x:0000A1CC ; COMDAT (pick associative to section at 29D8)
.xdata$x:0000A1CC __unwindtable$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z db 0FFh
.xdata$x:0000A1CC                                         ; DATA XREF: .xdata$x:0000A1E4o
.xdata$x:0000A1CD                 db 0FFh
.xdata$x:0000A1CE                 db 0FFh
.xdata$x:0000A1CF                 db 0FFh
.xdata$x:0000A1D0                 dd offset __unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$0
.xdata$x:0000A1D4                 align 8
.xdata$x:0000A1D8                 dd offset __unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$1
.xdata$x:0000A1DC __ehfuncinfo$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000A1DC                                         ; DATA XREF: __ehhandler$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z+11o
.xdata$x:0000A1DD                 db    5
.xdata$x:0000A1DE                 db  93h ; ô
.xdata$x:0000A1DF                 db  19h
.xdata$x:0000A1E0                 db    2
.xdata$x:0000A1E1                 db    0
.xdata$x:0000A1E2                 db    0
.xdata$x:0000A1E3                 db    0
.xdata$x:0000A1E4                 dd offset __unwindtable$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@I@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
.xdata$x:0000A1E8                 align 20h
.xdata$x:0000A1E8 _xdata$x        ends
.xdata$x:0000A1E8
.xdata$x:0000A200 ; ===========================================================================
.xdata$x:0000A200
.xdata$x:0000A200 ; Segment type: Pure data
.xdata$x:0000A200 ; Segment permissions: Read
.xdata$x:0000A200 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A200                 assume cs:_xdata$x
.xdata$x:0000A200                 ;org 0A200h
.xdata$x:0000A200 ; COMDAT (pick associative to section at 2E24)
.xdata$x:0000A200 __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:0000A200                                         ; DATA XREF: .xdata$x:0000A230o
.xdata$x:0000A201                 db    0
.xdata$x:0000A202                 db    0
.xdata$x:0000A203                 db    0
.xdata$x:0000A204                 db    0
.xdata$x:0000A205                 db    0
.xdata$x:0000A206                 db    0
.xdata$x:0000A207                 db    0
.xdata$x:0000A208                 db    0
.xdata$x:0000A209                 db    0
.xdata$x:0000A20A                 db    0
.xdata$x:0000A20B                 db    0
.xdata$x:0000A20C                 dd offset __catch$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:0000A210 __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:0000A210                                         ; DATA XREF: .xdata$x:0000A23Co
.xdata$x:0000A211                 db 0FFh
.xdata$x:0000A212                 db 0FFh
.xdata$x:0000A213                 db 0FFh
.xdata$x:0000A214                 db    0
.xdata$x:0000A215                 db    0
.xdata$x:0000A216                 db    0
.xdata$x:0000A217                 db    0
.xdata$x:0000A218                 db 0FFh
.xdata$x:0000A219                 db 0FFh
.xdata$x:0000A21A                 db 0FFh
.xdata$x:0000A21B                 db 0FFh
.xdata$x:0000A21C                 db    0
.xdata$x:0000A21D                 db    0
.xdata$x:0000A21E                 db    0
.xdata$x:0000A21F                 db    0
.xdata$x:0000A220 __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:0000A220                                         ; DATA XREF: .xdata$x:0000A244o
.xdata$x:0000A221                 db    0
.xdata$x:0000A222                 db    0
.xdata$x:0000A223                 db    0
.xdata$x:0000A224                 db    0
.xdata$x:0000A225                 db    0
.xdata$x:0000A226                 db    0
.xdata$x:0000A227                 db    0
.xdata$x:0000A228                 db    1
.xdata$x:0000A229                 db    0
.xdata$x:0000A22A                 db    0
.xdata$x:0000A22B                 db    0
.xdata$x:0000A22C                 db    1
.xdata$x:0000A22D                 db    0
.xdata$x:0000A22E                 db    0
.xdata$x:0000A22F                 db    0
.xdata$x:0000A230                 dd offset __catchsym$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:0000A234 __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000A234                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:0000A235                 db    5
.xdata$x:0000A236                 db  93h ; ô
.xdata$x:0000A237                 db  19h
.xdata$x:0000A238                 db    2
.xdata$x:0000A239                 db    0
.xdata$x:0000A23A                 db    0
.xdata$x:0000A23B                 db    0
.xdata$x:0000A23C                 dd offset __unwindtable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000A240                 db    1
.xdata$x:0000A241                 db    0
.xdata$x:0000A242                 db    0
.xdata$x:0000A243                 db    0
.xdata$x:0000A244                 dd offset __tryblocktable$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000A248                 db    0
.xdata$x:0000A249                 db    0
.xdata$x:0000A24A                 db    0
.xdata$x:0000A24B                 db    0
.xdata$x:0000A24C                 db    0
.xdata$x:0000A24D                 db    0
.xdata$x:0000A24E                 db    0
.xdata$x:0000A24F                 db    0
.xdata$x:0000A250                 db    0
.xdata$x:0000A251                 db    0
.xdata$x:0000A252                 db    0
.xdata$x:0000A253                 db    0
.xdata$x:0000A254                 db    0
.xdata$x:0000A255                 db    0
.xdata$x:0000A256                 db    0
.xdata$x:0000A257                 db    0
.xdata$x:0000A257 _xdata$x        ends
.xdata$x:0000A257
.xdata$x:0000A258 ; ===========================================================================
.xdata$x:0000A258
.xdata$x:0000A258 ; Segment type: Pure data
.xdata$x:0000A258 ; Segment permissions: Read
.xdata$x:0000A258 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A258                 assume cs:_xdata$x
.xdata$x:0000A258                 ;org 0A258h
.xdata$x:0000A258 ; COMDAT (pick associative to section at 2CD4)
.xdata$x:0000A258 __catchsym$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 db    0
.xdata$x:0000A258                                         ; DATA XREF: .xdata$x:0000A288o
.xdata$x:0000A259                 db    0
.xdata$x:0000A25A                 db    0
.xdata$x:0000A25B                 db    0
.xdata$x:0000A25C                 db    0
.xdata$x:0000A25D                 db    0
.xdata$x:0000A25E                 db    0
.xdata$x:0000A25F                 db    0
.xdata$x:0000A260                 db    0
.xdata$x:0000A261                 db    0
.xdata$x:0000A262                 db    0
.xdata$x:0000A263                 db    0
.xdata$x:0000A264                 dd offset __catch$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
.xdata$x:0000A268 __unwindtable$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db 0FFh
.xdata$x:0000A268                                         ; DATA XREF: .xdata$x:0000A294o
.xdata$x:0000A269                 db 0FFh
.xdata$x:0000A26A                 db 0FFh
.xdata$x:0000A26B                 db 0FFh
.xdata$x:0000A26C                 db    0
.xdata$x:0000A26D                 db    0
.xdata$x:0000A26E                 db    0
.xdata$x:0000A26F                 db    0
.xdata$x:0000A270                 db 0FFh
.xdata$x:0000A271                 db 0FFh
.xdata$x:0000A272                 db 0FFh
.xdata$x:0000A273                 db 0FFh
.xdata$x:0000A274                 db    0
.xdata$x:0000A275                 db    0
.xdata$x:0000A276                 db    0
.xdata$x:0000A277                 db    0
.xdata$x:0000A278 __tryblocktable$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db    0
.xdata$x:0000A278                                         ; DATA XREF: .xdata$x:0000A29Co
.xdata$x:0000A279                 db    0
.xdata$x:0000A27A                 db    0
.xdata$x:0000A27B                 db    0
.xdata$x:0000A27C                 db    0
.xdata$x:0000A27D                 db    0
.xdata$x:0000A27E                 db    0
.xdata$x:0000A27F                 db    0
.xdata$x:0000A280                 db    1
.xdata$x:0000A281                 db    0
.xdata$x:0000A282                 db    0
.xdata$x:0000A283                 db    0
.xdata$x:0000A284                 db    1
.xdata$x:0000A285                 db    0
.xdata$x:0000A286                 db    0
.xdata$x:0000A287                 db    0
.xdata$x:0000A288                 dd offset __catchsym$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
.xdata$x:0000A28C __ehfuncinfo$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z db  22h ; "
.xdata$x:0000A28C                                         ; DATA XREF: __ehhandler$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z+11o
.xdata$x:0000A28D                 db    5
.xdata$x:0000A28E                 db  93h ; ô
.xdata$x:0000A28F                 db  19h
.xdata$x:0000A290                 db    2
.xdata$x:0000A291                 db    0
.xdata$x:0000A292                 db    0
.xdata$x:0000A293                 db    0
.xdata$x:0000A294                 dd offset __unwindtable$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000A298                 db    1
.xdata$x:0000A299                 db    0
.xdata$x:0000A29A                 db    0
.xdata$x:0000A29B                 db    0
.xdata$x:0000A29C                 dd offset __tryblocktable$??$_Uninit_move@PAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@PAU12@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@2@U12@@std@@YAPAU?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@0@PAU10@00AAU?$_Wrap_alloc@V?$allocator@U?$pair@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
.xdata$x:0000A2A0                 db    0
.xdata$x:0000A2A1                 db    0
.xdata$x:0000A2A2                 db    0
.xdata$x:0000A2A3                 db    0
.xdata$x:0000A2A4                 db    0
.xdata$x:0000A2A5                 db    0
.xdata$x:0000A2A6                 db    0
.xdata$x:0000A2A7                 db    0
.xdata$x:0000A2A8                 db    0
.xdata$x:0000A2A9                 db    0
.xdata$x:0000A2AA                 db    0
.xdata$x:0000A2AB                 db    0
.xdata$x:0000A2AC                 db    0
.xdata$x:0000A2AD                 db    0
.xdata$x:0000A2AE                 db    0
.xdata$x:0000A2AF                 db    0
.xdata$x:0000A2AF _xdata$x        ends
.xdata$x:0000A2AF
.rdata:0000A2B0 ; ===========================================================================
.rdata:0000A2B0
.rdata:0000A2B0 ; Segment type: Pure data
.rdata:0000A2B0 ; Segment permissions: Read
.rdata:0000A2B0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A2B0 _rdata          segment para public 'DATA' use32
.rdata:0000A2B0                 assume cs:_rdata
.rdata:0000A2B0                 ;org 0A2B0h
.rdata:0000A2B0 ; COMDAT (pick any)
.rdata:0000A2B0                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000A2B0 ; wchar_t `string'
.rdata:0000A2B0 ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000A2B0                                         ; DATA XREF: std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &,std::random_access_iterator_tag)+41o
.rdata:0000A2B0                                         ; std::_Distance2<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,uint &,std::random_access_iterator_tag)+57o ...
.rdata:0000A2B0                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000A2B0                 unicode 0, <clude\xutility>,0
.rdata:0000A2B0 _rdata          ends
.rdata:0000A2B0
.rdata:0000A340 ; ===========================================================================
.rdata:0000A340
.rdata:0000A340 ; Segment type: Pure data
.rdata:0000A340 ; Segment permissions: Read
.rdata:0000A340 _rdata          segment dword public 'DATA' use32
.rdata:0000A340                 assume cs:_rdata
.rdata:0000A340                 ;org 0A340h
.rdata:0000A340 ; COMDAT (pick any)
.rdata:0000A340                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:0000A340 ; wchar_t `string'
.rdata:0000A340 ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:0000A340                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:0000A340                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:0000A372                 align 4
.rdata:0000A372 _rdata          ends
.rdata:0000A372
.rdata:0000A374 ; ===========================================================================
.rdata:0000A374
.rdata:0000A374 ; Segment type: Pure data
.rdata:0000A374 ; Segment permissions: Read
.rdata:0000A374 _rdata          segment dword public 'DATA' use32
.rdata:0000A374                 assume cs:_rdata
.rdata:0000A374                 ;org 0A374h
.rdata:0000A374 ; COMDAT (pick largest)
.rdata:0000A374                 dd offset ??_R4runtime_error@std@@6B@ ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata:0000A378                 public ??_7runtime_error@std@@6B@
.rdata:0000A378 ; const std::runtime_error::`vftable'
.rdata:0000A378 ??_7runtime_error@std@@6B@ dd offset ??_Eruntime_error@std@@UAEPAXI@Z
.rdata:0000A378                                         ; DATA XREF: std::runtime_error::runtime_error(std::runtime_error const &)+3Co
.rdata:0000A378                                         ; std::runtime_error::runtime_error(char const *)+3Co
.rdata:0000A378                                         ; std::runtime_error::`vector deleting destructor'(uint)
.rdata:0000A37C                 dd offset ?what@exception@std@@UBEPBDXZ ; std::exception::what(void)
.rdata:0000A37C _rdata          ends
.rdata:0000A37C
.xdata$x:0000A380 ; ===========================================================================
.xdata$x:0000A380
.xdata$x:0000A380 ; Segment type: Pure data
.xdata$x:0000A380 ; Segment permissions: Read
.xdata$x:0000A380 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A380                 assume cs:_xdata$x
.xdata$x:0000A380                 ;org 0A380h
.xdata$x:0000A380 ; COMDAT (pick any)
.xdata$x:0000A380                 public __TI2?AVruntime_error@std@@
.xdata$x:0000A380 __TI2?AVruntime_error@std@@ db    0     ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+12Co
.xdata$x:0000A380                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+20Bo
.xdata$x:0000A381                 db    0
.xdata$x:0000A382                 db    0
.xdata$x:0000A383                 db    0
.xdata$x:0000A384                 dd offset ??1runtime_error@std@@UAE@XZ ; std::runtime_error::~runtime_error(void)
.xdata$x:0000A388                 db    0
.xdata$x:0000A389                 db    0
.xdata$x:0000A38A                 db    0
.xdata$x:0000A38B                 db    0
.xdata$x:0000A38C                 dd offset __CTA2?AVruntime_error@std@@
.xdata$x:0000A38C _xdata$x        ends
.xdata$x:0000A38C
.xdata$x:0000A390 ; ===========================================================================
.xdata$x:0000A390
.xdata$x:0000A390 ; Segment type: Pure data
.xdata$x:0000A390 ; Segment permissions: Read
.xdata$x:0000A390 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A390                 assume cs:_xdata$x
.xdata$x:0000A390                 ;org 0A390h
.xdata$x:0000A390 ; COMDAT (pick any)
.xdata$x:0000A390                 public __CTA2?AVruntime_error@std@@
.xdata$x:0000A390 __CTA2?AVruntime_error@std@@ db    2    ; DATA XREF: .xdata$x:0000A38Co
.xdata$x:0000A391                 db    0
.xdata$x:0000A392                 db    0
.xdata$x:0000A393                 db    0
.xdata$x:0000A394                 dd offset __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000A398                 dd offset __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000A398 _xdata$x        ends
.xdata$x:0000A398
.data$r:0000A39C ; ===========================================================================
.data$r:0000A39C
.data$r:0000A39C ; Segment type: Pure data
.data$r:0000A39C ; Segment permissions: Read/Write
.data$r:0000A39C _data$r         segment dword public 'DATA' use32
.data$r:0000A39C                 assume cs:_data$r
.data$r:0000A39C                 ;org 0A39Ch
.data$r:0000A39C ; COMDAT (pick any)
.data$r:0000A39C                 public ??_R0?AVruntime_error@std@@@8
.data$r:0000A39C ; class std::runtime_error `RTTI Type Descriptor'
.data$r:0000A39C ??_R0?AVruntime_error@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A39C                                         ; DATA XREF: .xdata$x:0000A3C0o
.data$r:0000A39C                                         ; .rdata$r:0000B2C8o ...
.data$r:0000A39C                                         ; const type_info::`vftable'
.data$r:0000A3A0                 db    0
.data$r:0000A3A1                 db    0
.data$r:0000A3A2                 db    0
.data$r:0000A3A3                 db    0
.data$r:0000A3A4                 db  2Eh ; .
.data$r:0000A3A5                 db  3Fh ; ?
.data$r:0000A3A6                 db  41h ; A
.data$r:0000A3A7                 db  56h ; V
.data$r:0000A3A8                 db  72h ; r
.data$r:0000A3A9                 db  75h ; u
.data$r:0000A3AA                 db  6Eh ; n
.data$r:0000A3AB                 db  74h ; t
.data$r:0000A3AC                 db  69h ; i
.data$r:0000A3AD                 db  6Dh ; m
.data$r:0000A3AE                 db  65h ; e
.data$r:0000A3AF                 db  5Fh ; _
.data$r:0000A3B0                 db  65h ; e
.data$r:0000A3B1                 db  72h ; r
.data$r:0000A3B2                 db  72h ; r
.data$r:0000A3B3                 db  6Fh ; o
.data$r:0000A3B4                 db  72h ; r
.data$r:0000A3B5                 db  40h ; @
.data$r:0000A3B6                 db  73h ; s
.data$r:0000A3B7                 db  74h ; t
.data$r:0000A3B8                 db  64h ; d
.data$r:0000A3B9                 db  40h ; @
.data$r:0000A3BA                 db  40h ; @
.data$r:0000A3BB                 db    0
.data$r:0000A3BB _data$r         ends
.data$r:0000A3BB
.xdata$x:0000A3BC ; ===========================================================================
.xdata$x:0000A3BC
.xdata$x:0000A3BC ; Segment type: Pure data
.xdata$x:0000A3BC ; Segment permissions: Read
.xdata$x:0000A3BC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A3BC                 assume cs:_xdata$x
.xdata$x:0000A3BC                 ;org 0A3BCh
.xdata$x:0000A3BC ; COMDAT (pick any)
.xdata$x:0000A3BC                 public __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
.xdata$x:0000A3BC __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000A3BC                                         ; DATA XREF: .xdata$x:0000A394o
.xdata$x:0000A3BD                 db    0
.xdata$x:0000A3BE                 db    0
.xdata$x:0000A3BF                 db    0
.xdata$x:0000A3C0                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.xdata$x:0000A3C4                 align 8
.xdata$x:0000A3C8                 db 0FFh
.xdata$x:0000A3C9                 db 0FFh
.xdata$x:0000A3CA                 db 0FFh
.xdata$x:0000A3CB                 db 0FFh
.xdata$x:0000A3CC                 db    0
.xdata$x:0000A3CD                 db    0
.xdata$x:0000A3CE                 db    0
.xdata$x:0000A3CF                 db    0
.xdata$x:0000A3D0                 db  0Ch
.xdata$x:0000A3D1                 db    0
.xdata$x:0000A3D2                 db    0
.xdata$x:0000A3D3                 db    0
.xdata$x:0000A3D4                 dd offset ??0runtime_error@std@@QAE@ABV01@@Z ; std::runtime_error::runtime_error(std::runtime_error const &)
.xdata$x:0000A3D4 _xdata$x        ends
.xdata$x:0000A3D4
.data$r:0000A3D8 ; ===========================================================================
.data$r:0000A3D8
.data$r:0000A3D8 ; Segment type: Pure data
.data$r:0000A3D8 ; Segment permissions: Read/Write
.data$r:0000A3D8 _data$r         segment dword public 'DATA' use32
.data$r:0000A3D8                 assume cs:_data$r
.data$r:0000A3D8                 ;org 0A3D8h
.data$r:0000A3D8 ; COMDAT (pick any)
.data$r:0000A3D8                 public ??_R0?AVexception@std@@@8
.data$r:0000A3D8 ; class std::exception `RTTI Type Descriptor'
.data$r:0000A3D8 ??_R0?AVexception@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000A3D8                                         ; DATA XREF: .xdata$x:0000A3F8o
.data$r:0000A3D8                                         ; .rdata$r:std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000A3D8                                         ; const type_info::`vftable'
.data$r:0000A3DC                 align 10h
.data$r:0000A3E0 a_?avexception@ db '.?AVexception@std@@',0
.data$r:0000A3E0 _data$r         ends
.data$r:0000A3E0
.xdata$x:0000A3F4 ; ===========================================================================
.xdata$x:0000A3F4
.xdata$x:0000A3F4 ; Segment type: Pure data
.xdata$x:0000A3F4 ; Segment permissions: Read
.xdata$x:0000A3F4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A3F4                 assume cs:_xdata$x
.xdata$x:0000A3F4                 ;org 0A3F4h
.xdata$x:0000A3F4 ; COMDAT (pick any)
.xdata$x:0000A3F4                 public __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
.xdata$x:0000A3F4 __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 db    0
.xdata$x:0000A3F4                                         ; DATA XREF: .xdata$x:0000A398o
.xdata$x:0000A3F5                 db    0
.xdata$x:0000A3F6                 db    0
.xdata$x:0000A3F7                 db    0
.xdata$x:0000A3F8                 dd offset ??_R0?AVexception@std@@@8 ; std::exception `RTTI Type Descriptor'
.xdata$x:0000A3FC                 align 10h
.xdata$x:0000A400                 db 0FFh
.xdata$x:0000A401                 db 0FFh
.xdata$x:0000A402                 db 0FFh
.xdata$x:0000A403                 db 0FFh
.xdata$x:0000A404                 db    0
.xdata$x:0000A405                 db    0
.xdata$x:0000A406                 db    0
.xdata$x:0000A407                 db    0
.xdata$x:0000A408                 db  0Ch
.xdata$x:0000A409                 db    0
.xdata$x:0000A40A                 db    0
.xdata$x:0000A40B                 db    0
.xdata$x:0000A40C                 dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.xdata$x:0000A40C _xdata$x        ends
.xdata$x:0000A40C
.rdata:0000A410 ; ===========================================================================
.rdata:0000A410
.rdata:0000A410 ; Segment type: Pure data
.rdata:0000A410 ; Segment permissions: Read
.rdata:0000A410 _rdata          segment dword public 'DATA' use32
.rdata:0000A410                 assume cs:_rdata
.rdata:0000A410                 ;org 0A410h
.rdata:0000A410 ; COMDAT (pick largest)
.rdata:0000A410                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000A414                 public ??_7error_category@std@@6B@
.rdata:0000A414 ; const std::error_category::`vftable'
.rdata:0000A414 ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000A414                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000A414                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000A414                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:0000A418                 dd offset __purecall
.rdata:0000A41C                 dd offset __purecall
.rdata:0000A420                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A424                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A428                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A428 _rdata          ends
.rdata:0000A428
.rdata:0000A42C ; ===========================================================================
.rdata:0000A42C
.rdata:0000A42C ; Segment type: Pure data
.rdata:0000A42C ; Segment permissions: Read
.rdata:0000A42C _rdata          segment dword public 'DATA' use32
.rdata:0000A42C                 assume cs:_rdata
.rdata:0000A42C                 ;org 0A42Ch
.rdata:0000A42C ; COMDAT (pick largest)
.rdata:0000A42C                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000A430                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000A430 ; const std::_Generic_error_category::`vftable'
.rdata:0000A430 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000A430                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000A430                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0000A434                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:0000A438                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000A43C                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A440                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A444                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A444 _rdata          ends
.rdata:0000A444
.rdata:0000A448 ; ===========================================================================
.rdata:0000A448
.rdata:0000A448 ; Segment type: Pure data
.rdata:0000A448 ; Segment permissions: Read
.rdata:0000A448 _rdata          segment dword public 'DATA' use32
.rdata:0000A448                 assume cs:_rdata
.rdata:0000A448                 ;org 0A448h
.rdata:0000A448 ; COMDAT (pick any)
.rdata:0000A448                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:0000A448 ; `string'
.rdata:0000A448 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:0000A448                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:0000A448 _rdata          ends
.rdata:0000A448
.rdata:0000A450 ; ===========================================================================
.rdata:0000A450
.rdata:0000A450 ; Segment type: Pure data
.rdata:0000A450 ; Segment permissions: Read
.rdata:0000A450 _rdata          segment dword public 'DATA' use32
.rdata:0000A450                 assume cs:_rdata
.rdata:0000A450                 ;org 0A450h
.rdata:0000A450 ; COMDAT (pick any)
.rdata:0000A450                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000A450 ; `string'
.rdata:0000A450 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000A450                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_82E0o
.rdata:0000A450                                         ; std::_System_error_category::message(int):loc_845Co
.rdata:0000A45E                 align 10h
.rdata:0000A45E _rdata          ends
.rdata:0000A45E
.rdata:0000A460 ; ===========================================================================
.rdata:0000A460
.rdata:0000A460 ; Segment type: Pure data
.rdata:0000A460 ; Segment permissions: Read
.rdata:0000A460 _rdata          segment dword public 'DATA' use32
.rdata:0000A460                 assume cs:_rdata
.rdata:0000A460                 ;org 0A460h
.rdata:0000A460 ; COMDAT (pick largest)
.rdata:0000A460                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0000A464                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0000A464 ; const std::_Iostream_error_category::`vftable'
.rdata:0000A464 ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0000A464                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0000A464                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:0000A468                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000A46C                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000A470                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A474                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A478                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A478 _rdata          ends
.rdata:0000A478
.rdata:0000A47C ; ===========================================================================
.rdata:0000A47C
.rdata:0000A47C ; Segment type: Pure data
.rdata:0000A47C ; Segment permissions: Read
.rdata:0000A47C _rdata          segment dword public 'DATA' use32
.rdata:0000A47C                 assume cs:_rdata
.rdata:0000A47C                 ;org 0A47Ch
.rdata:0000A47C ; COMDAT (pick any)
.rdata:0000A47C                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000A47C ; `string'
.rdata:0000A47C ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000A47C                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000A485                 align 4
.rdata:0000A485 _rdata          ends
.rdata:0000A485
.rdata:0000A488 ; ===========================================================================
.rdata:0000A488
.rdata:0000A488 ; Segment type: Pure data
.rdata:0000A488 ; Segment permissions: Read
.rdata:0000A488 _rdata          segment dword public 'DATA' use32
.rdata:0000A488                 assume cs:_rdata
.rdata:0000A488                 ;org 0A488h
.rdata:0000A488 ; COMDAT (pick any)
.rdata:0000A488                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:0000A488 ; char `string'[]
.rdata:0000A488 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:0000A488                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000A49E                 align 10h
.rdata:0000A49E _rdata          ends
.rdata:0000A49E
.rdata:0000A4A0 ; ===========================================================================
.rdata:0000A4A0
.rdata:0000A4A0 ; Segment type: Pure data
.rdata:0000A4A0 ; Segment permissions: Read
.rdata:0000A4A0 _rdata          segment dword public 'DATA' use32
.rdata:0000A4A0                 assume cs:_rdata
.rdata:0000A4A0                 ;org 0A4A0h
.rdata:0000A4A0 ; COMDAT (pick largest)
.rdata:0000A4A0                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000A4A4                 public ??_7_System_error_category@std@@6B@
.rdata:0000A4A4 ; const std::_System_error_category::`vftable'
.rdata:0000A4A4 ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000A4A4                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000A4A4                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:0000A4A8                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000A4AC                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000A4B0                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000A4B4                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A4B8                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A4B8 _rdata          ends
.rdata:0000A4B8
.rdata:0000A4BC ; ===========================================================================
.rdata:0000A4BC
.rdata:0000A4BC ; Segment type: Pure data
.rdata:0000A4BC ; Segment permissions: Read
.rdata:0000A4BC _rdata          segment dword public 'DATA' use32
.rdata:0000A4BC                 assume cs:_rdata
.rdata:0000A4BC                 ;org 0A4BCh
.rdata:0000A4BC ; COMDAT (pick any)
.rdata:0000A4BC                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000A4BC ; `string'
.rdata:0000A4BC ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000A4BC                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000A4C3                 align 4
.rdata:0000A4C3 _rdata          ends
.rdata:0000A4C3
.bss:0000A4C4 ; ===========================================================================
.bss:0000A4C4
.bss:0000A4C4 ; Segment type: Uninitialized
.bss:0000A4C4 ; Segment permissions: Read/Write
.bss:0000A4C4 _bss            segment dword public 'BSS' use32
.bss:0000A4C4                 assume cs:_bss
.bss:0000A4C4                 ;org 0A4C4h
.bss:0000A4C4 ; COMDAT (pick any)
.bss:0000A4C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A4C4                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000A4C4 ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000A4C4 ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000A4C4                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000A4C4                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000A4C5                 db    ? ;
.bss:0000A4C6                 db    ? ;
.bss:0000A4C7                 db    ? ;
.bss:0000A4C7 _bss            ends
.bss:0000A4C7
.bss:0000A4C8 ; ===========================================================================
.bss:0000A4C8
.bss:0000A4C8 ; Segment type: Uninitialized
.bss:0000A4C8 ; Segment permissions: Read/Write
.bss:0000A4C8 _bss            segment dword public 'BSS' use32
.bss:0000A4C8                 assume cs:_bss
.bss:0000A4C8                 ;org 0A4C8h
.bss:0000A4C8 ; COMDAT (pick any)
.bss:0000A4C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A4C8                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:0000A4C8 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:0000A4C8 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:0000A4C8                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000A4C8                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000A4C9                 db    ? ;
.bss:0000A4CA                 db    ? ;
.bss:0000A4CB                 db    ? ;
.bss:0000A4CB _bss            ends
.bss:0000A4CB
.bss:0000A4CC ; ===========================================================================
.bss:0000A4CC
.bss:0000A4CC ; Segment type: Uninitialized
.bss:0000A4CC ; Segment permissions: Read/Write
.bss:0000A4CC _bss            segment dword public 'BSS' use32
.bss:0000A4CC                 assume cs:_bss
.bss:0000A4CC                 ;org 0A4CCh
.bss:0000A4CC ; COMDAT (pick any)
.bss:0000A4CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A4CC                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:0000A4CC ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:0000A4CC ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:0000A4CC                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:0000A4CC                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:0000A4CD                 db    ? ;
.bss:0000A4CE                 db    ? ;
.bss:0000A4CF                 db    ? ;
.bss:0000A4CF _bss            ends
.bss:0000A4CF
.rdata:0000A4D0 ; ===========================================================================
.rdata:0000A4D0
.rdata:0000A4D0 ; Segment type: Pure data
.rdata:0000A4D0 ; Segment permissions: Read
.rdata:0000A4D0 _rdata          segment dword public 'DATA' use32
.rdata:0000A4D0                 assume cs:_rdata
.rdata:0000A4D0                 ;org 0A4D0h
.rdata:0000A4D0 ; COMDAT (pick any)
.rdata:0000A4D0                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:0000A4D0 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:0000A4D0 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000A4D0                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Br
.rdata:0000A4D0 _rdata          ends
.rdata:0000A4D0
.bss:0000A4D4 ; ===========================================================================
.bss:0000A4D4
.bss:0000A4D4 ; Segment type: Uninitialized
.bss:0000A4D4 ; Segment permissions: Read/Write
.bss:0000A4D4 _bss            segment dword public 'BSS' use32
.bss:0000A4D4                 assume cs:_bss
.bss:0000A4D4                 ;org 0A4D4h
.bss:0000A4D4 ; COMDAT (pick any)
.bss:0000A4D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A4D4                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000A4D4 ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000A4D4 ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000A4D4                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000A4D5                 db    ? ;
.bss:0000A4D6                 db    ? ;
.bss:0000A4D7                 db    ? ;
.bss:0000A4D7 _bss            ends
.bss:0000A4D7
.bss:0000A4D8 ; ===========================================================================
.bss:0000A4D8
.bss:0000A4D8 ; Segment type: Uninitialized
.bss:0000A4D8 ; Segment permissions: Read/Write
.bss:0000A4D8 _bss            segment dword public 'BSS' use32
.bss:0000A4D8                 assume cs:_bss
.bss:0000A4D8                 ;org 0A4D8h
.bss:0000A4D8 ; COMDAT (pick any)
.bss:0000A4D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A4D8                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000A4D8 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:0000A4D8 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000A4D8                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:0000A4D9                 db    ? ;
.bss:0000A4DA                 db    ? ;
.bss:0000A4DB                 db    ? ;
.bss:0000A4DB _bss            ends
.bss:0000A4DB
.rdata:0000A4DC ; ===========================================================================
.rdata:0000A4DC
.rdata:0000A4DC ; Segment type: Pure data
.rdata:0000A4DC ; Segment permissions: Read
.rdata:0000A4DC ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A4DC _rdata          segment para public 'DATA' use32
.rdata:0000A4DC                 assume cs:_rdata
.rdata:0000A4DC                 ;org 0A4DCh
.rdata:0000A4DC ; COMDAT (pick any)
.rdata:0000A4DC                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000A4DC ; wchar_t `string'
.rdata:0000A4DC ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000A4DC                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Construct<std::_String_iterator<std::_String_val<std::_Simple_types<char>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::forward_iterator_tag)+3Bo
.rdata:0000A4DC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+5Ao ...
.rdata:0000A4DC                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000A4DC                 unicode 0, <clude\xstring>,0
.rdata:0000A56A                 align 4
.rdata:0000A56A _rdata          ends
.rdata:0000A56A
.bss:0000A56C ; ===========================================================================
.bss:0000A56C
.bss:0000A56C ; Segment type: Uninitialized
.bss:0000A56C ; Segment permissions: Read/Write
.bss:0000A56C _bss            segment dword public 'BSS' use32
.bss:0000A56C                 assume cs:_bss
.bss:0000A56C                 ;org 0A56Ch
.bss:0000A56C ; COMDAT (pick any)
.bss:0000A56C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A56C                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000A56C ; std::locale::id std::numpunct<char>::id
.bss:0000A56C ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000A56C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000A56D                 db    ? ;
.bss:0000A56E                 db    ? ;
.bss:0000A56F                 db    ? ;
.bss:0000A56F _bss            ends
.bss:0000A56F
.bss:0000A570 ; ===========================================================================
.bss:0000A570
.bss:0000A570 ; Segment type: Uninitialized
.bss:0000A570 ; Segment permissions: Read/Write
.bss:0000A570 _bss            segment dword public 'BSS' use32
.bss:0000A570                 assume cs:_bss
.bss:0000A570                 ;org 0A570h
.bss:0000A570 ; COMDAT (pick any)
.bss:0000A570                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A570                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:0000A570 ; std::locale::id std::numpunct<wchar_t>::id
.bss:0000A570 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:0000A570                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:0000A571                 db    ? ;
.bss:0000A572                 db    ? ;
.bss:0000A573                 db    ? ;
.bss:0000A573 _bss            ends
.bss:0000A573
.rdata:0000A574 ; ===========================================================================
.rdata:0000A574
.rdata:0000A574 ; Segment type: Pure data
.rdata:0000A574 ; Segment permissions: Read
.rdata:0000A574 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A574 _rdata          segment para public 'DATA' use32
.rdata:0000A574                 assume cs:_rdata
.rdata:0000A574                 ;org 0A574h
.rdata:0000A574 ; COMDAT (pick any)
.rdata:0000A574                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000A574 ; wchar_t `string'
.rdata:0000A574 ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000A574                                         ; DATA XREF: std::vector<int,std::allocator<int>>::operator[](uint)+19o
.rdata:0000A574                                         ; std::vector<int,std::allocator<int>>::operator[](uint)+49o ...
.rdata:0000A574                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000A574                 unicode 0, <clude\vector>,0
.rdata:0000A574 _rdata          ends
.rdata:0000A574
.rdata:0000A600 ; ===========================================================================
.rdata:0000A600
.rdata:0000A600 ; Segment type: Pure data
.rdata:0000A600 ; Segment permissions: Read
.rdata:0000A600 _rdata          segment dword public 'DATA' use32
.rdata:0000A600                 assume cs:_rdata
.rdata:0000A600                 ;org 0A600h
.rdata:0000A600 ; COMDAT (pick any)
.rdata:0000A600                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000A600 ; wchar_t `string'
.rdata:0000A600 ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000A600                                         ; DATA XREF: std::vector<int,std::allocator<int>>::operator[](uint)+1Eo
.rdata:0000A600                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+1Eo ...
.rdata:0000A600                 unicode 0, <vector subscript out of range>,0
.rdata:0000A600 _rdata          ends
.rdata:0000A600
.rdata:0000A63C ; ===========================================================================
.rdata:0000A63C
.rdata:0000A63C ; Segment type: Pure data
.rdata:0000A63C ; Segment permissions: Read
.rdata:0000A63C _rdata          segment dword public 'DATA' use32
.rdata:0000A63C                 assume cs:_rdata
.rdata:0000A63C                 ;org 0A63Ch
.rdata:0000A63C ; COMDAT (pick any)
.rdata:0000A63C                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:0000A63C ; `string'
.rdata:0000A63C ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:0000A63C                                         ; DATA XREF: std::vector<int,std::allocator<int>>::operator[](uint)+2Bo
.rdata:0000A63C                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+2Bo ...
.rdata:0000A63C _rdata          ends
.rdata:0000A63C
.rdata:0000A660 ; ===========================================================================
.rdata:0000A660
.rdata:0000A660 ; Segment type: Pure data
.rdata:0000A660 ; Segment permissions: Read
.rdata:0000A660 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A660 _rdata          segment para public 'DATA' use32
.rdata:0000A660                 assume cs:_rdata
.rdata:0000A660                 ;org 0A660h
.rdata:0000A660 ; COMDAT (pick any)
.rdata:0000A660                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:0000A660 ; `string'
.rdata:0000A660 ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:0000A660                                         ; DATA XREF: std::vector<int,std::allocator<int>>::operator[](uint):loc_51ECo
.rdata:0000A660                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint):loc_527Co ...
.rdata:0000A660                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:0000A6B6                 align 4
.rdata:0000A6B6 _rdata          ends
.rdata:0000A6B6
.rdata:0000A6B8 ; ===========================================================================
.rdata:0000A6B8
.rdata:0000A6B8 ; Segment type: Pure data
.rdata:0000A6B8 ; Segment permissions: Read
.rdata:0000A6B8 _rdata          segment dword public 'DATA' use32
.rdata:0000A6B8                 assume cs:_rdata
.rdata:0000A6B8                 ;org 0A6B8h
.rdata:0000A6B8 ; COMDAT (pick any)
.rdata:0000A6B8                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:0000A6B8 ; `string'
.rdata:0000A6B8 ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:0000A6B8                                         ; DATA XREF: std::vector<int,std::allocator<int>>::operator[](uint)+3Do
.rdata:0000A6B8                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+3Do ...
.rdata:0000A6B8                 unicode 0, <%s>,0
.rdata:0000A6BE                 align 10h
.rdata:0000A6BE _rdata          ends
.rdata:0000A6BE
.rdata:0000A6C0 ; ===========================================================================
.rdata:0000A6C0
.rdata:0000A6C0 ; Segment type: Pure data
.rdata:0000A6C0 ; Segment permissions: Read
.rdata:0000A6C0 _rdata          segment dword public 'DATA' use32
.rdata:0000A6C0                 assume cs:_rdata
.rdata:0000A6C0                 ;org 0A6C0h
.rdata:0000A6C0 ; COMDAT (pick any)
.rdata:0000A6C0                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:0000A6C0 ; `string'
.rdata:0000A6C0 ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:0000A6C0                                         ; DATA XREF: std::vector<int,std::allocator<int>>::operator[](uint)+6Fo
.rdata:0000A6C0                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+6Fo ...
.rdata:0000A6C0                 unicode 0, <"out of range">,0
.rdata:0000A6DE                 align 10h
.rdata:0000A6DE _rdata          ends
.rdata:0000A6DE
.rdata:0000A6E0 ; ===========================================================================
.rdata:0000A6E0
.rdata:0000A6E0 ; Segment type: Pure data
.rdata:0000A6E0 ; Segment permissions: Read
.rdata:0000A6E0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A6E0 _rdata          segment para public 'DATA' use32
.rdata:0000A6E0                 assume cs:_rdata
.rdata:0000A6E0                 ;org 0A6E0h
.rdata:0000A6E0 ; COMDAT (pick any)
.rdata:0000A6E0                 public ??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@
.rdata:0000A6E0 ; `string'
.rdata:0000A6E0 ??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@:
.rdata:0000A6E0                                         ; DATA XREF: std::vector<int,std::allocator<int>>::operator[](uint)+6Ao
.rdata:0000A6E0                 unicode 0, <std::vector>
.rdata:0000A6E0                 dw 3Ch
.rdata:0000A6E0                 unicode 0, <int,class std::allocator>
.rdata:0000A6E0                 dw 3Ch
.rdata:0000A6E0                 unicode 0, <int>
.rdata:0000A6E0                 dw 3Eh
.rdata:0000A6E0                 unicode 0, < >
.rdata:0000A6E0                 dw 3Eh
.rdata:0000A6E0                 unicode 0, <::operator []>,0
.rdata:0000A752                 align 4
.rdata:0000A752 _rdata          ends
.rdata:0000A752
.rdata:0000A754 ; ===========================================================================
.rdata:0000A754
.rdata:0000A754 ; Segment type: Pure data
.rdata:0000A754 ; Segment permissions: Read
.rdata:0000A754 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A754 _rdata          segment para public 'DATA' use32
.rdata:0000A754                 assume cs:_rdata
.rdata:0000A754                 ;org 0A754h
.rdata:0000A754 ; COMDAT (pick any)
.rdata:0000A754                 public ??_C@_1KC@CCKJJADN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAH?$AAW?$AAN?$AAD?$AA_?$AA_?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs@
.rdata:0000A754 ; `string'
.rdata:0000A754 ??_C@_1KC@CCKJJADN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAH?$AAW?$AAN?$AAD?$AA_?$AA_?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000A754                                         ; DATA XREF: std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+6Ao
.rdata:0000A754                 unicode 0, <std::vector>
.rdata:0000A754                 dw 3Ch
.rdata:0000A754                 unicode 0, <struct HWND__ *,class std::allocator>
.rdata:0000A754                 dw 3Ch
.rdata:0000A754                 unicode 0, <struct HWND__ *>
.rdata:0000A754                 dw 3Eh
.rdata:0000A754                 unicode 0, < >
.rdata:0000A754                 dw 3Eh
.rdata:0000A754                 unicode 0, <::operator []>,0
.rdata:0000A7F6                 align 4
.rdata:0000A7F6 _rdata          ends
.rdata:0000A7F6
.rdata:0000A7F8 ; ===========================================================================
.rdata:0000A7F8
.rdata:0000A7F8 ; Segment type: Pure data
.rdata:0000A7F8 ; Segment permissions: Read
.rdata:0000A7F8 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A7F8 _rdata          segment para public 'DATA' use32
.rdata:0000A7F8                 assume cs:_rdata
.rdata:0000A7F8                 ;org 0A7F8h
.rdata:0000A7F8 ; COMDAT (pick any)
.rdata:0000A7F8                 public ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@
.rdata:0000A7F8 ; `string'
.rdata:0000A7F8 ??_C@_1BOI@OCMBMPPD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr@:
.rdata:0000A7F8                                         ; DATA XREF: std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::operator[](uint)+6Ao
.rdata:0000A7F8                 unicode 0, <std::vector>
.rdata:0000A7F8                 dw 3Ch
.rdata:0000A7F8                 unicode 0, <class std::basic_string>
.rdata:0000A7F8                 dw 3Ch
.rdata:0000A7F8                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000A7F8                 dw 3Ch
.rdata:0000A7F8                 unicode 0, <wchar_t>
.rdata:0000A7F8                 dw 3Eh
.rdata:0000A7F8                 unicode 0, <,class std::allocator>
.rdata:0000A7F8                 dw 3Ch
.rdata:0000A7F8                 unicode 0, <wchar_t>
.rdata:0000A7F8                 dw 3Eh
.rdata:0000A7F8                 unicode 0, < >
.rdata:0000A7F8                 dw 3Eh
.rdata:0000A7F8                 unicode 0, <,class std::allocator>
.rdata:0000A7F8                 dw 3Ch
.rdata:0000A7F8                 unicode 0, <class std::basic_string>
.rdata:0000A7F8                 dw 3Ch
.rdata:0000A7F8                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000A7F8                 dw 3Ch
.rdata:0000A7F8                 unicode 0, <wchar_t>
.rdata:0000A7F8                 dw 3Eh
.rdata:0000A7F8                 unicode 0, <,class std::allocator>
.rdata:0000A7F8                 dw 3Ch
.rdata:0000A7F8                 unicode 0, <wchar_t>
.rdata:0000A7F8                 dw 3Eh
.rdata:0000A7F8                 unicode 0, < >
.rdata:0000A7F8                 dw 3Eh
.rdata:0000A7F8                 unicode 0, < >
.rdata:0000A7F8                 dw 3Eh
.rdata:0000A7F8                 unicode 0, < >
.rdata:0000A7F8                 dw 3Eh
.rdata:0000A7F8                 unicode 0, <::operator []>,0
.rdata:0000A7F8 _rdata          ends
.rdata:0000A7F8
.rdata:0000A9E0 ; ===========================================================================
.rdata:0000A9E0
.rdata:0000A9E0 ; Segment type: Pure data
.rdata:0000A9E0 ; Segment permissions: Read
.rdata:0000A9E0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A9E0 _rdata          segment para public 'DATA' use32
.rdata:0000A9E0                 assume cs:_rdata
.rdata:0000A9E0                 ;org 0A9E0h
.rdata:0000A9E0 ; COMDAT (pick any)
.rdata:0000A9E0                 public ??_C@_1DLI@PMFFPGKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
.rdata:0000A9E0 ; `string'
.rdata:0000A9E0 ??_C@_1DLI@PMFFPGKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAp?$AAa?$AAi?$AAr?$AA?$DM?$AAc?$AAl?$AAa@:
.rdata:0000A9E0                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::operator[](uint)+6Ao
.rdata:0000A9E0                 unicode 0, <std::vector>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <struct std::pair>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <class std::basic_string>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t>
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, <,class std::allocator>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t>
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, < >
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, <,class std::basic_string>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t>
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, <,class std::allocator>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t>
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, < >
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, < >
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, <,class std::allocator>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <struct std::pair>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <class std::basic_string>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t>
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, <,class std::allocator>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t>
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, < >
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, <,class std::basic_string>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t,struct std::char_traits>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t>
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, <,class std::allocator>
.rdata:0000A9E0                 dw 3Ch
.rdata:0000A9E0                 unicode 0, <wchar_t>
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, < >
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, < >
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, < >
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, < >
.rdata:0000A9E0                 dw 3Eh
.rdata:0000A9E0                 unicode 0, <::operator []>,0
.rdata:0000A9E0 _rdata          ends
.rdata:0000A9E0
.rdata:0000AD98 ; ===========================================================================
.rdata:0000AD98
.rdata:0000AD98 ; Segment type: Pure data
.rdata:0000AD98 ; Segment permissions: Read
.rdata:0000AD98 _rdata          segment dword public 'DATA' use32
.rdata:0000AD98                 assume cs:_rdata
.rdata:0000AD98                 ;org 0AD98h
.rdata:0000AD98 ; COMDAT (pick any)
.rdata:0000AD98                 public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
.rdata:0000AD98 ; `string'
.rdata:0000AD98 ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
.rdata:0000AD98                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+41o
.rdata:0000AD98 _rdata          ends
.rdata:0000AD98
.rdata:0000ADC0 ; ===========================================================================
.rdata:0000ADC0
.rdata:0000ADC0 ; Segment type: Pure data
.rdata:0000ADC0 ; Segment permissions: Read
.rdata:0000ADC0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000ADC0 _rdata          segment para public 'DATA' use32
.rdata:0000ADC0                 assume cs:_rdata
.rdata:0000ADC0                 ;org 0ADC0h
.rdata:0000ADC0 ; COMDAT (pick any)
.rdata:0000ADC0                 public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
.rdata:0000ADC0 ; `string'
.rdata:0000ADC0 ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
.rdata:0000ADC0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &):loc_5C7Ao
.rdata:0000ADC0                 unicode 0, <"Standard C++ Libraries Invalid Argument" && 0>,0
.rdata:0000AE1E                 align 10h
.rdata:0000AE1E _rdata          ends
.rdata:0000AE1E
.rdata:0000AE20 ; ===========================================================================
.rdata:0000AE20
.rdata:0000AE20 ; Segment type: Pure data
.rdata:0000AE20 ; Segment permissions: Read
.rdata:0000AE20 _rdata          segment dword public 'DATA' use32
.rdata:0000AE20                 assume cs:_rdata
.rdata:0000AE20                 ;org 0AE20h
.rdata:0000AE20 ; COMDAT (pick any)
.rdata:0000AE20                 public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
.rdata:0000AE20 ; `string'
.rdata:0000AE20 ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
.rdata:0000AE20                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+85o
.rdata:0000AE20                 unicode 0, <"invalid argument">,0
.rdata:0000AE46                 align 4
.rdata:0000AE46 _rdata          ends
.rdata:0000AE46
.rdata:0000AE48 ; ===========================================================================
.rdata:0000AE48
.rdata:0000AE48 ; Segment type: Pure data
.rdata:0000AE48 ; Segment permissions: Read
.rdata:0000AE48 _rdata          segment dword public 'DATA' use32
.rdata:0000AE48                 assume cs:_rdata
.rdata:0000AE48                 ;org 0AE48h
.rdata:0000AE48 ; COMDAT (pick any)
.rdata:0000AE48                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:0000AE48 ; char `string'[]
.rdata:0000AE48 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:0000AE48                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:0000AE48                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:0000AE48 _rdata          ends
.rdata:0000AE48
.rdata:0000AE58 ; ===========================================================================
.rdata:0000AE58
.rdata:0000AE58 ; Segment type: Pure data
.rdata:0000AE58 ; Segment permissions: Read
.rdata:0000AE58 _rdata          segment dword public 'DATA' use32
.rdata:0000AE58                 assume cs:_rdata
.rdata:0000AE58                 ;org 0AE58h
.rdata:0000AE58 ; COMDAT (pick any)
.rdata:0000AE58                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:0000AE58 ; char `string'[]
.rdata:0000AE58 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:0000AE58                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:0000AE58                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:0000AE58 _rdata          ends
.rdata:0000AE58
.rdata:0000AE70 ; ===========================================================================
.rdata:0000AE70
.rdata:0000AE70 ; Segment type: Pure data
.rdata:0000AE70 ; Segment permissions: Read
.rdata:0000AE70 _rdata          segment dword public 'DATA' use32
.rdata:0000AE70                 assume cs:_rdata
.rdata:0000AE70                 ;org 0AE70h
.rdata:0000AE70 ; COMDAT (pick any)
.rdata:0000AE70                 public ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
.rdata:0000AE70 ; char `string'[]
.rdata:0000AE70 ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ db 'vector<T> too long',0
.rdata:0000AE70                                         ; DATA XREF: std::vector<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>>::_Xlen(void)+7o
.rdata:0000AE70                                         ; std::vector<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::_Xlen(void)+7o
.rdata:0000AE83                 align 4
.rdata:0000AE83 _rdata          ends
.rdata:0000AE83
.rdata:0000AE84 ; ===========================================================================
.rdata:0000AE84
.rdata:0000AE84 ; Segment type: Pure data
.rdata:0000AE84 ; Segment permissions: Read
.rdata:0000AE84 _rdata          segment dword public 'DATA' use32
.rdata:0000AE84                 assume cs:_rdata
.rdata:0000AE84                 ;org 0AE84h
.rdata:0000AE84 ; COMDAT (pick any)
.rdata:0000AE84                 public ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:0000AE84 ; wchar_t `string'
.rdata:0000AE84 ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:0000AE84                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+34o
.rdata:0000AE84                 unicode 0, <string iterators incompatible>,0
.rdata:0000AE84 _rdata          ends
.rdata:0000AE84
.rdata:0000AEC0 ; ===========================================================================
.rdata:0000AEC0
.rdata:0000AEC0 ; Segment type: Pure data
.rdata:0000AEC0 ; Segment permissions: Read
.rdata:0000AEC0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AEC0 _rdata          segment para public 'DATA' use32
.rdata:0000AEC0                 assume cs:_rdata
.rdata:0000AEC0                 ;org 0AEC0h
.rdata:0000AEC0 ; COMDAT (pick any)
.rdata:0000AEC0                 public ??_C@_1MA@BDELDFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000AEC0 ; `string'
.rdata:0000AEC0 ??_C@_1MA@BDELDFHB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000AEC0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>> const &)+80o
.rdata:0000AEC0                 unicode 0, <std::_String_const_iterator>
.rdata:0000AEC0                 dw 3Ch
.rdata:0000AEC0                 unicode 0, <class std::_String_val>
.rdata:0000AEC0                 dw 3Ch
.rdata:0000AEC0                 unicode 0, <struct std::_Simple_types>
.rdata:0000AEC0                 dw 3Ch
.rdata:0000AEC0                 unicode 0, <char>
.rdata:0000AEC0                 dw 3Eh
.rdata:0000AEC0                 unicode 0, < >
.rdata:0000AEC0                 dw 3Eh
.rdata:0000AEC0                 unicode 0, < >
.rdata:0000AEC0                 dw 3Eh
.rdata:0000AEC0                 unicode 0, <::_Compat>,0
.rdata:0000AEC0 _rdata          ends
.rdata:0000AEC0
.rdata:0000AF80 ; ===========================================================================
.rdata:0000AF80
.rdata:0000AF80 ; Segment type: Pure data
.rdata:0000AF80 ; Segment permissions: Read
.rdata:0000AF80 _rdata          segment dword public 'DATA' use32
.rdata:0000AF80                 assume cs:_rdata
.rdata:0000AF80                 ;org 0AF80h
.rdata:0000AF80 ; COMDAT (pick any)
.rdata:0000AF80                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:0000AF80 ; wchar_t `string'
.rdata:0000AF80 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:0000AF80                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:0000AF80                                         ; std::_Debug_pointer<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)+11o ...
.rdata:0000AF80                 unicode 0, <invalid null pointer>,0
.rdata:0000AFAA                 align 4
.rdata:0000AFAA _rdata          ends
.rdata:0000AFAA
.rdata:0000AFAC ; ===========================================================================
.rdata:0000AFAC
.rdata:0000AFAC ; Segment type: Pure data
.rdata:0000AFAC ; Segment permissions: Read
.rdata:0000AFAC ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AFAC _rdata          segment para public 'DATA' use32
.rdata:0000AFAC                 assume cs:_rdata
.rdata:0000AFAC                 ;org 0AFACh
.rdata:0000AFAC ; COMDAT (pick any)
.rdata:0000AFAC                 public ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
.rdata:0000AFAC ; wchar_t `string'
.rdata:0000AFAC ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@:
.rdata:0000AFAC                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+5Fo
.rdata:0000AFAC                 unicode 0, <string iterator not dereferencable>,0
.rdata:0000AFF2                 align 4
.rdata:0000AFF2 _rdata          ends
.rdata:0000AFF2
.rdata:0000AFF4 ; ===========================================================================
.rdata:0000AFF4
.rdata:0000AFF4 ; Segment type: Pure data
.rdata:0000AFF4 ; Segment permissions: Read
.rdata:0000AFF4 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AFF4 _rdata          segment para public 'DATA' use32
.rdata:0000AFF4                 assume cs:_rdata
.rdata:0000AFF4                 ;org 0AFF4h
.rdata:0000AFF4 ; COMDAT (pick any)
.rdata:0000AFF4                 public ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000AFF4 ; `string'
.rdata:0000AFF4 ??_C@_1MG@GDGHDIKC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000AFF4                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator*(void)+A5o
.rdata:0000AFF4                 unicode 0, <std::_String_const_iterator>
.rdata:0000AFF4                 dw 3Ch
.rdata:0000AFF4                 unicode 0, <class std::_String_val>
.rdata:0000AFF4                 dw 3Ch
.rdata:0000AFF4                 unicode 0, <struct std::_Simple_types>
.rdata:0000AFF4                 dw 3Ch
.rdata:0000AFF4                 unicode 0, <char>
.rdata:0000AFF4                 dw 3Eh
.rdata:0000AFF4                 unicode 0, < >
.rdata:0000AFF4                 dw 3Eh
.rdata:0000AFF4                 unicode 0, < >
.rdata:0000AFF4                 dw 3Eh
.rdata:0000AFF4                 unicode 0, <::operator *>,0
.rdata:0000B0BA                 align 4
.rdata:0000B0BA _rdata          ends
.rdata:0000B0BA
.rdata:0000B0BC ; ===========================================================================
.rdata:0000B0BC
.rdata:0000B0BC ; Segment type: Pure data
.rdata:0000B0BC ; Segment permissions: Read
.rdata:0000B0BC _rdata          segment dword public 'DATA' use32
.rdata:0000B0BC                 assume cs:_rdata
.rdata:0000B0BC                 ;org 0B0BCh
.rdata:0000B0BC ; COMDAT (pick any)
.rdata:0000B0BC                 public ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000B0BC ; wchar_t `string'
.rdata:0000B0BC ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000B0BC                                         ; DATA XREF: std::_Debug_range2<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint,std::random_access_iterator_tag)+43o
.rdata:0000B0BC                                         ; std::_Debug_range2<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> *,wchar_t const *,uint,std::random_access_iterator_tag)+43o ...
.rdata:0000B0BC                 unicode 0, <invalid iterator range>,0
.rdata:0000B0EA                 align 4
.rdata:0000B0EA _rdata          ends
.rdata:0000B0EA
.rdata:0000B0EC ; ===========================================================================
.rdata:0000B0EC
.rdata:0000B0EC ; Segment type: Pure data
.rdata:0000B0EC ; Segment permissions: Read
.rdata:0000B0EC ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000B0EC _rdata          segment para public 'DATA' use32
.rdata:0000B0EC                 assume cs:_rdata
.rdata:0000B0EC                 ;org 0B0ECh
.rdata:0000B0EC ; COMDAT (pick any)
.rdata:0000B0EC                 public ??_C@_1EE@HAKOGNPH@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
.rdata:0000B0EC ; wchar_t `string'
.rdata:0000B0EC ??_C@_1EE@HAKOGNPH@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@:
.rdata:0000B0EC                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+48o
.rdata:0000B0EC                 unicode 0, <string iterator not incrementable>,0
.rdata:0000B0EC _rdata          ends
.rdata:0000B0EC
.rdata:0000B130 ; ===========================================================================
.rdata:0000B130
.rdata:0000B130 ; Segment type: Pure data
.rdata:0000B130 ; Segment permissions: Read
.rdata:0000B130 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000B130 _rdata          segment para public 'DATA' use32
.rdata:0000B130                 assume cs:_rdata
.rdata:0000B130                 ;org 0B130h
.rdata:0000B130 ; COMDAT (pick any)
.rdata:0000B130                 public ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000B130 ; `string'
.rdata:0000B130 ??_C@_1MI@IFMPOAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000B130                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<char>>>::operator++(void)+8Eo
.rdata:0000B130                 unicode 0, <std::_String_const_iterator>
.rdata:0000B130                 dw 3Ch
.rdata:0000B130                 unicode 0, <class std::_String_val>
.rdata:0000B130                 dw 3Ch
.rdata:0000B130                 unicode 0, <struct std::_Simple_types>
.rdata:0000B130                 dw 3Ch
.rdata:0000B130                 unicode 0, <char>
.rdata:0000B130                 dw 3Eh
.rdata:0000B130                 unicode 0, < >
.rdata:0000B130                 dw 3Eh
.rdata:0000B130                 unicode 0, < >
.rdata:0000B130                 dw 3Eh
.rdata:0000B130                 unicode 0, <::operator ++>,0
.rdata:0000B130 _rdata          ends
.rdata:0000B130
.rdata:0000B1F8 ; ===========================================================================
.rdata:0000B1F8
.rdata:0000B1F8 ; Segment type: Pure data
.rdata:0000B1F8 ; Segment permissions: Read
.rdata:0000B1F8 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000B1F8 _rdata          segment para public 'DATA' use32
.rdata:0000B1F8                 assume cs:_rdata
.rdata:0000B1F8                 ;org 0B1F8h
.rdata:0000B1F8 ; COMDAT (pick any)
.rdata:0000B1F8                 public ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000B1F8 ; wchar_t `string'
.rdata:0000B1F8 ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000B1F8                                         ; DATA XREF: std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar
.rdata:0000B1F8                                         ; std::_Uninit_move<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::al ...
.rdata:0000B1F8                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000B1F8                 unicode 0, <clude\xmemory>,0
.rdata:0000B286                 align 4
.rdata:0000B286 _rdata          ends
.rdata:0000B286
.rdata$r:0000B288 ; ===========================================================================
.rdata$r:0000B288
.rdata$r:0000B288 ; Segment type: Pure data
.rdata$r:0000B288 ; Segment permissions: Read
.rdata$r:0000B288 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B288                 assume cs:_rdata$r
.rdata$r:0000B288                 ;org 0B288h
.rdata$r:0000B288 ; COMDAT (pick any)
.rdata$r:0000B288                 public ??_R1A@?0A@EA@exception@std@@8
.rdata$r:0000B288 ; std::exception::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B288 ??_R1A@?0A@EA@exception@std@@8 dd offset ??_R0?AVexception@std@@@8
.rdata$r:0000B288                                         ; DATA XREF: .rdata$r:std::exception::`RTTI Base Class Array'o
.rdata$r:0000B288                                         ; .rdata$r:0000B2E4o
.rdata$r:0000B288                                         ; std::exception `RTTI Type Descriptor'
.rdata$r:0000B28C                 db    0
.rdata$r:0000B28D                 db    0
.rdata$r:0000B28E                 db    0
.rdata$r:0000B28F                 db    0
.rdata$r:0000B290                 db    0
.rdata$r:0000B291                 db    0
.rdata$r:0000B292                 db    0
.rdata$r:0000B293                 db    0
.rdata$r:0000B294                 db 0FFh
.rdata$r:0000B295                 db 0FFh
.rdata$r:0000B296                 db 0FFh
.rdata$r:0000B297                 db 0FFh
.rdata$r:0000B298                 db    0
.rdata$r:0000B299                 db    0
.rdata$r:0000B29A                 db    0
.rdata$r:0000B29B                 db    0
.rdata$r:0000B29C                 db  40h ; @
.rdata$r:0000B29D                 db    0
.rdata$r:0000B29E                 db    0
.rdata$r:0000B29F                 db    0
.rdata$r:0000B2A0                 dd offset ??_R3exception@std@@8 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B2A0 _rdata$r        ends
.rdata$r:0000B2A0
.rdata$r:0000B2A4 ; ===========================================================================
.rdata$r:0000B2A4
.rdata$r:0000B2A4 ; Segment type: Pure data
.rdata$r:0000B2A4 ; Segment permissions: Read
.rdata$r:0000B2A4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B2A4                 assume cs:_rdata$r
.rdata$r:0000B2A4                 ;org 0B2A4h
.rdata$r:0000B2A4 ; COMDAT (pick any)
.rdata$r:0000B2A4                 public ??_R3exception@std@@8
.rdata$r:0000B2A4 ; std::exception::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B2A4 ??_R3exception@std@@8 db    0           ; DATA XREF: .rdata$r:0000B2A0o
.rdata$r:0000B2A5                 db    0
.rdata$r:0000B2A6                 db    0
.rdata$r:0000B2A7                 db    0
.rdata$r:0000B2A8                 db    0
.rdata$r:0000B2A9                 db    0
.rdata$r:0000B2AA                 db    0
.rdata$r:0000B2AB                 db    0
.rdata$r:0000B2AC                 db    1
.rdata$r:0000B2AD                 db    0
.rdata$r:0000B2AE                 db    0
.rdata$r:0000B2AF                 db    0
.rdata$r:0000B2B0                 dd offset ??_R2exception@std@@8 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000B2B0 _rdata$r        ends
.rdata$r:0000B2B0
.rdata$r:0000B2B4 ; ===========================================================================
.rdata$r:0000B2B4
.rdata$r:0000B2B4 ; Segment type: Pure data
.rdata$r:0000B2B4 ; Segment permissions: Read
.rdata$r:0000B2B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B2B4                 assume cs:_rdata$r
.rdata$r:0000B2B4                 ;org 0B2B4h
.rdata$r:0000B2B4 ; COMDAT (pick any)
.rdata$r:0000B2B4                 public ??_R2exception@std@@8
.rdata$r:0000B2B4 ; std::exception::`RTTI Base Class Array'
.rdata$r:0000B2B4 ??_R2exception@std@@8 dd offset ??_R1A@?0A@EA@exception@std@@8
.rdata$r:0000B2B4                                         ; DATA XREF: .rdata$r:0000B2B0o
.rdata$r:0000B2B4                                         ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B2B8                 db    0
.rdata$r:0000B2B9                 align 4
.rdata$r:0000B2B9 _rdata$r        ends
.rdata$r:0000B2B9
.rdata$r:0000B2BC ; ===========================================================================
.rdata$r:0000B2BC
.rdata$r:0000B2BC ; Segment type: Pure data
.rdata$r:0000B2BC ; Segment permissions: Read
.rdata$r:0000B2BC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B2BC                 assume cs:_rdata$r
.rdata$r:0000B2BC                 ;org 0B2BCh
.rdata$r:0000B2BC ; COMDAT (pick any)
.rdata$r:0000B2BC                 public ??_R4runtime_error@std@@6B@
.rdata$r:0000B2BC ; const std::runtime_error::`RTTI Complete Object Locator'
.rdata$r:0000B2BC ??_R4runtime_error@std@@6B@ db    0     ; DATA XREF: .rdata:0000A374o
.rdata$r:0000B2BD                 db    0
.rdata$r:0000B2BE                 db    0
.rdata$r:0000B2BF                 db    0
.rdata$r:0000B2C0                 db    0
.rdata$r:0000B2C1                 db    0
.rdata$r:0000B2C2                 db    0
.rdata$r:0000B2C3                 db    0
.rdata$r:0000B2C4                 db    0
.rdata$r:0000B2C5                 db    0
.rdata$r:0000B2C6                 db    0
.rdata$r:0000B2C7                 db    0
.rdata$r:0000B2C8                 dd offset ??_R0?AVruntime_error@std@@@8 ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000B2CC                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B2CC _rdata$r        ends
.rdata$r:0000B2CC
.rdata$r:0000B2D0 ; ===========================================================================
.rdata$r:0000B2D0
.rdata$r:0000B2D0 ; Segment type: Pure data
.rdata$r:0000B2D0 ; Segment permissions: Read
.rdata$r:0000B2D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B2D0                 assume cs:_rdata$r
.rdata$r:0000B2D0                 ;org 0B2D0h
.rdata$r:0000B2D0 ; COMDAT (pick any)
.rdata$r:0000B2D0                 public ??_R3runtime_error@std@@8
.rdata$r:0000B2D0 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B2D0 ??_R3runtime_error@std@@8 db    0       ; DATA XREF: .rdata$r:0000B2CCo
.rdata$r:0000B2D0                                         ; .rdata$r:0000B304o
.rdata$r:0000B2D1                 db    0
.rdata$r:0000B2D2                 db    0
.rdata$r:0000B2D3                 db    0
.rdata$r:0000B2D4                 db    0
.rdata$r:0000B2D5                 db    0
.rdata$r:0000B2D6                 db    0
.rdata$r:0000B2D7                 db    0
.rdata$r:0000B2D8                 db    2
.rdata$r:0000B2D9                 db    0
.rdata$r:0000B2DA                 db    0
.rdata$r:0000B2DB                 db    0
.rdata$r:0000B2DC                 dd offset ??_R2runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000B2DC _rdata$r        ends
.rdata$r:0000B2DC
.rdata$r:0000B2E0 ; ===========================================================================
.rdata$r:0000B2E0
.rdata$r:0000B2E0 ; Segment type: Pure data
.rdata$r:0000B2E0 ; Segment permissions: Read
.rdata$r:0000B2E0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B2E0                 assume cs:_rdata$r
.rdata$r:0000B2E0                 ;org 0B2E0h
.rdata$r:0000B2E0 ; COMDAT (pick any)
.rdata$r:0000B2E0                 public ??_R2runtime_error@std@@8
.rdata$r:0000B2E0 ; std::runtime_error::`RTTI Base Class Array'
.rdata$r:0000B2E0 ??_R2runtime_error@std@@8 dd offset ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000B2E0                                         ; DATA XREF: .rdata$r:0000B2DCo
.rdata$r:0000B2E0                                         ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B2E4                 dd offset ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B2E8                 db    0
.rdata$r:0000B2E9                 align 4
.rdata$r:0000B2E9 _rdata$r        ends
.rdata$r:0000B2E9
.rdata$r:0000B2EC ; ===========================================================================
.rdata$r:0000B2EC
.rdata$r:0000B2EC ; Segment type: Pure data
.rdata$r:0000B2EC ; Segment permissions: Read
.rdata$r:0000B2EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B2EC                 assume cs:_rdata$r
.rdata$r:0000B2EC                 ;org 0B2ECh
.rdata$r:0000B2EC ; COMDAT (pick any)
.rdata$r:0000B2EC                 public ??_R1A@?0A@EA@runtime_error@std@@8
.rdata$r:0000B2EC ; std::runtime_error::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B2EC ??_R1A@?0A@EA@runtime_error@std@@8 dd offset ??_R0?AVruntime_error@std@@@8
.rdata$r:0000B2EC                                         ; DATA XREF: .rdata$r:std::runtime_error::`RTTI Base Class Array'o
.rdata$r:0000B2EC                                         ; std::runtime_error `RTTI Type Descriptor'
.rdata$r:0000B2F0                 db    1
.rdata$r:0000B2F1                 db    0
.rdata$r:0000B2F2                 db    0
.rdata$r:0000B2F3                 db    0
.rdata$r:0000B2F4                 db    0
.rdata$r:0000B2F5                 db    0
.rdata$r:0000B2F6                 db    0
.rdata$r:0000B2F7                 db    0
.rdata$r:0000B2F8                 db 0FFh
.rdata$r:0000B2F9                 db 0FFh
.rdata$r:0000B2FA                 db 0FFh
.rdata$r:0000B2FB                 db 0FFh
.rdata$r:0000B2FC                 db    0
.rdata$r:0000B2FD                 db    0
.rdata$r:0000B2FE                 db    0
.rdata$r:0000B2FF                 db    0
.rdata$r:0000B300                 db  40h ; @
.rdata$r:0000B301                 db    0
.rdata$r:0000B302                 db    0
.rdata$r:0000B303                 db    0
.rdata$r:0000B304                 dd offset ??_R3runtime_error@std@@8 ; std::runtime_error::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B304 _rdata$r        ends
.rdata$r:0000B304
.rdata$r:0000B308 ; ===========================================================================
.rdata$r:0000B308
.rdata$r:0000B308 ; Segment type: Pure data
.rdata$r:0000B308 ; Segment permissions: Read
.rdata$r:0000B308 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B308                 assume cs:_rdata$r
.rdata$r:0000B308                 ;org 0B308h
.rdata$r:0000B308 ; COMDAT (pick any)
.rdata$r:0000B308                 public ??_R4error_category@std@@6B@
.rdata$r:0000B308 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:0000B308 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:0000A410o
.rdata$r:0000B309                 db    0
.rdata$r:0000B30A                 db    0
.rdata$r:0000B30B                 db    0
.rdata$r:0000B30C                 db    0
.rdata$r:0000B30D                 db    0
.rdata$r:0000B30E                 db    0
.rdata$r:0000B30F                 db    0
.rdata$r:0000B310                 db    0
.rdata$r:0000B311                 db    0
.rdata$r:0000B312                 db    0
.rdata$r:0000B313                 db    0
.rdata$r:0000B314                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000B318                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B318 _rdata$r        ends
.rdata$r:0000B318
.data$r:0000B31C ; ===========================================================================
.data$r:0000B31C
.data$r:0000B31C ; Segment type: Pure data
.data$r:0000B31C ; Segment permissions: Read/Write
.data$r:0000B31C _data$r         segment dword public 'DATA' use32
.data$r:0000B31C                 assume cs:_data$r
.data$r:0000B31C                 ;org 0B31Ch
.data$r:0000B31C ; COMDAT (pick any)
.data$r:0000B31C                 public ??_R0?AVerror_category@std@@@8
.data$r:0000B31C ; class std::error_category `RTTI Type Descriptor'
.data$r:0000B31C ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000B31C                                         ; DATA XREF: .rdata$r:0000B314o
.data$r:0000B31C                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000B31C                                         ; const type_info::`vftable'
.data$r:0000B320                 db    0
.data$r:0000B321                 db    0
.data$r:0000B322                 db    0
.data$r:0000B323                 db    0
.data$r:0000B324                 db  2Eh ; .
.data$r:0000B325                 db  3Fh ; ?
.data$r:0000B326                 db  41h ; A
.data$r:0000B327                 db  56h ; V
.data$r:0000B328                 db  65h ; e
.data$r:0000B329                 db  72h ; r
.data$r:0000B32A                 db  72h ; r
.data$r:0000B32B                 db  6Fh ; o
.data$r:0000B32C                 db  72h ; r
.data$r:0000B32D                 db  5Fh ; _
.data$r:0000B32E                 db  63h ; c
.data$r:0000B32F                 db  61h ; a
.data$r:0000B330                 db  74h ; t
.data$r:0000B331                 db  65h ; e
.data$r:0000B332                 db  67h ; g
.data$r:0000B333                 db  6Fh ; o
.data$r:0000B334                 db  72h ; r
.data$r:0000B335                 db  79h ; y
.data$r:0000B336                 db  40h ; @
.data$r:0000B337                 db  73h ; s
.data$r:0000B338                 db  74h ; t
.data$r:0000B339                 db  64h ; d
.data$r:0000B33A                 db  40h ; @
.data$r:0000B33B                 db  40h ; @
.data$r:0000B33C                 db    0
.data$r:0000B33D                 align 10h
.data$r:0000B33D _data$r         ends
.data$r:0000B33D
.rdata$r:0000B340 ; ===========================================================================
.rdata$r:0000B340
.rdata$r:0000B340 ; Segment type: Pure data
.rdata$r:0000B340 ; Segment permissions: Read
.rdata$r:0000B340 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B340                 assume cs:_rdata$r
.rdata$r:0000B340                 ;org 0B340h
.rdata$r:0000B340 ; COMDAT (pick any)
.rdata$r:0000B340                 public ??_R3error_category@std@@8
.rdata$r:0000B340 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B340 ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:0000B318o
.rdata$r:0000B340                                         ; .rdata$r:0000B370o
.rdata$r:0000B341                 db    0
.rdata$r:0000B342                 db    0
.rdata$r:0000B343                 db    0
.rdata$r:0000B344                 db    0
.rdata$r:0000B345                 db    0
.rdata$r:0000B346                 db    0
.rdata$r:0000B347                 db    0
.rdata$r:0000B348                 db    1
.rdata$r:0000B349                 db    0
.rdata$r:0000B34A                 db    0
.rdata$r:0000B34B                 db    0
.rdata$r:0000B34C                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000B34C _rdata$r        ends
.rdata$r:0000B34C
.rdata$r:0000B350 ; ===========================================================================
.rdata$r:0000B350
.rdata$r:0000B350 ; Segment type: Pure data
.rdata$r:0000B350 ; Segment permissions: Read
.rdata$r:0000B350 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B350                 assume cs:_rdata$r
.rdata$r:0000B350                 ;org 0B350h
.rdata$r:0000B350 ; COMDAT (pick any)
.rdata$r:0000B350                 public ??_R2error_category@std@@8
.rdata$r:0000B350 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000B350 ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000B350                                         ; DATA XREF: .rdata$r:0000B34Co
.rdata$r:0000B350                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B354                 db    0
.rdata$r:0000B355                 align 4
.rdata$r:0000B355 _rdata$r        ends
.rdata$r:0000B355
.rdata$r:0000B358 ; ===========================================================================
.rdata$r:0000B358
.rdata$r:0000B358 ; Segment type: Pure data
.rdata$r:0000B358 ; Segment permissions: Read
.rdata$r:0000B358 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B358                 assume cs:_rdata$r
.rdata$r:0000B358                 ;org 0B358h
.rdata$r:0000B358 ; COMDAT (pick any)
.rdata$r:0000B358                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000B358 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B358 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:0000B358                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:0000B358                                         ; .rdata$r:0000B3C8o ...
.rdata$r:0000B358                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000B35C                 db    0
.rdata$r:0000B35D                 db    0
.rdata$r:0000B35E                 db    0
.rdata$r:0000B35F                 db    0
.rdata$r:0000B360                 db    0
.rdata$r:0000B361                 db    0
.rdata$r:0000B362                 db    0
.rdata$r:0000B363                 db    0
.rdata$r:0000B364                 db 0FFh
.rdata$r:0000B365                 db 0FFh
.rdata$r:0000B366                 db 0FFh
.rdata$r:0000B367                 db 0FFh
.rdata$r:0000B368                 db    0
.rdata$r:0000B369                 db    0
.rdata$r:0000B36A                 db    0
.rdata$r:0000B36B                 db    0
.rdata$r:0000B36C                 db  40h ; @
.rdata$r:0000B36D                 db    0
.rdata$r:0000B36E                 db    0
.rdata$r:0000B36F                 db    0
.rdata$r:0000B370                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B370 _rdata$r        ends
.rdata$r:0000B370
.rdata$r:0000B374 ; ===========================================================================
.rdata$r:0000B374
.rdata$r:0000B374 ; Segment type: Pure data
.rdata$r:0000B374 ; Segment permissions: Read
.rdata$r:0000B374 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B374                 assume cs:_rdata$r
.rdata$r:0000B374                 ;org 0B374h
.rdata$r:0000B374 ; COMDAT (pick any)
.rdata$r:0000B374                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0000B374 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0000B374 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0000B374                                         ; DATA XREF: .rdata:0000A42Co
.rdata$r:0000B375                 db    0
.rdata$r:0000B376                 db    0
.rdata$r:0000B377                 db    0
.rdata$r:0000B378                 db    0
.rdata$r:0000B379                 db    0
.rdata$r:0000B37A                 db    0
.rdata$r:0000B37B                 db    0
.rdata$r:0000B37C                 db    0
.rdata$r:0000B37D                 db    0
.rdata$r:0000B37E                 db    0
.rdata$r:0000B37F                 db    0
.rdata$r:0000B380                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000B384                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B384 _rdata$r        ends
.rdata$r:0000B384
.data$r:0000B388 ; ===========================================================================
.data$r:0000B388
.data$r:0000B388 ; Segment type: Pure data
.data$r:0000B388 ; Segment permissions: Read/Write
.data$r:0000B388 _data$r         segment dword public 'DATA' use32
.data$r:0000B388                 assume cs:_data$r
.data$r:0000B388                 ;org 0B388h
.data$r:0000B388 ; COMDAT (pick any)
.data$r:0000B388                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:0000B388 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:0000B388 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000B388                                         ; DATA XREF: .rdata$r:0000B380o
.data$r:0000B388                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000B388                                         ; const type_info::`vftable'
.data$r:0000B38C                 align 10h
.data$r:0000B390 a_?av_generic_e db '.?AV_Generic_error_category@std@@',0
.data$r:0000B3B2                 align 4
.data$r:0000B3B2 _data$r         ends
.data$r:0000B3B2
.rdata$r:0000B3B4 ; ===========================================================================
.rdata$r:0000B3B4
.rdata$r:0000B3B4 ; Segment type: Pure data
.rdata$r:0000B3B4 ; Segment permissions: Read
.rdata$r:0000B3B4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B3B4                 assume cs:_rdata$r
.rdata$r:0000B3B4                 ;org 0B3B4h
.rdata$r:0000B3B4 ; COMDAT (pick any)
.rdata$r:0000B3B4                 public ??_R3_Generic_error_category@std@@8
.rdata$r:0000B3B4 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B3B4 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:0000B3B4                                         ; DATA XREF: .rdata$r:0000B384o
.rdata$r:0000B3B4                                         ; .rdata$r:0000B3E8o
.rdata$r:0000B3B5                 db    0
.rdata$r:0000B3B6                 db    0
.rdata$r:0000B3B7                 db    0
.rdata$r:0000B3B8                 db    0
.rdata$r:0000B3B9                 db    0
.rdata$r:0000B3BA                 db    0
.rdata$r:0000B3BB                 db    0
.rdata$r:0000B3BC                 db    2
.rdata$r:0000B3BD                 db    0
.rdata$r:0000B3BE                 db    0
.rdata$r:0000B3BF                 db    0
.rdata$r:0000B3C0                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000B3C0 _rdata$r        ends
.rdata$r:0000B3C0
.rdata$r:0000B3C4 ; ===========================================================================
.rdata$r:0000B3C4
.rdata$r:0000B3C4 ; Segment type: Pure data
.rdata$r:0000B3C4 ; Segment permissions: Read
.rdata$r:0000B3C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B3C4                 assume cs:_rdata$r
.rdata$r:0000B3C4                 ;org 0B3C4h
.rdata$r:0000B3C4 ; COMDAT (pick any)
.rdata$r:0000B3C4                 public ??_R2_Generic_error_category@std@@8
.rdata$r:0000B3C4 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000B3C4 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000B3C4                                         ; DATA XREF: .rdata$r:0000B3C0o
.rdata$r:0000B3C4                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B3C8                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B3CC                 db    0
.rdata$r:0000B3CD                 align 10h
.rdata$r:0000B3CD _rdata$r        ends
.rdata$r:0000B3CD
.rdata$r:0000B3D0 ; ===========================================================================
.rdata$r:0000B3D0
.rdata$r:0000B3D0 ; Segment type: Pure data
.rdata$r:0000B3D0 ; Segment permissions: Read
.rdata$r:0000B3D0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B3D0                 assume cs:_rdata$r
.rdata$r:0000B3D0                 ;org 0B3D0h
.rdata$r:0000B3D0 ; COMDAT (pick any)
.rdata$r:0000B3D0                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000B3D0 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B3D0 ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:0000B3D0                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:0000B3D0                                         ; .rdata$r:0000B440o ...
.rdata$r:0000B3D0                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000B3D4                 db    1
.rdata$r:0000B3D5                 db    0
.rdata$r:0000B3D6                 db    0
.rdata$r:0000B3D7                 db    0
.rdata$r:0000B3D8                 db    0
.rdata$r:0000B3D9                 db    0
.rdata$r:0000B3DA                 db    0
.rdata$r:0000B3DB                 db    0
.rdata$r:0000B3DC                 db 0FFh
.rdata$r:0000B3DD                 db 0FFh
.rdata$r:0000B3DE                 db 0FFh
.rdata$r:0000B3DF                 db 0FFh
.rdata$r:0000B3E0                 db    0
.rdata$r:0000B3E1                 db    0
.rdata$r:0000B3E2                 db    0
.rdata$r:0000B3E3                 db    0
.rdata$r:0000B3E4                 db  40h ; @
.rdata$r:0000B3E5                 db    0
.rdata$r:0000B3E6                 db    0
.rdata$r:0000B3E7                 db    0
.rdata$r:0000B3E8                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B3E8 _rdata$r        ends
.rdata$r:0000B3E8
.rdata$r:0000B3EC ; ===========================================================================
.rdata$r:0000B3EC
.rdata$r:0000B3EC ; Segment type: Pure data
.rdata$r:0000B3EC ; Segment permissions: Read
.rdata$r:0000B3EC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B3EC                 assume cs:_rdata$r
.rdata$r:0000B3EC                 ;org 0B3ECh
.rdata$r:0000B3EC ; COMDAT (pick any)
.rdata$r:0000B3EC                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:0000B3EC ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:0000B3EC ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:0000B3EC                                         ; DATA XREF: .rdata:0000A460o
.rdata$r:0000B3ED                 db    0
.rdata$r:0000B3EE                 db    0
.rdata$r:0000B3EF                 db    0
.rdata$r:0000B3F0                 db    0
.rdata$r:0000B3F1                 db    0
.rdata$r:0000B3F2                 db    0
.rdata$r:0000B3F3                 db    0
.rdata$r:0000B3F4                 db    0
.rdata$r:0000B3F5                 db    0
.rdata$r:0000B3F6                 db    0
.rdata$r:0000B3F7                 db    0
.rdata$r:0000B3F8                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000B3FC                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B3FC _rdata$r        ends
.rdata$r:0000B3FC
.data$r:0000B400 ; ===========================================================================
.data$r:0000B400
.data$r:0000B400 ; Segment type: Pure data
.data$r:0000B400 ; Segment permissions: Read/Write
.data$r:0000B400 _data$r         segment dword public 'DATA' use32
.data$r:0000B400                 assume cs:_data$r
.data$r:0000B400                 ;org 0B400h
.data$r:0000B400 ; COMDAT (pick any)
.data$r:0000B400                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:0000B400 ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:0000B400 ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000B400                                         ; DATA XREF: .rdata$r:0000B3F8o
.data$r:0000B400                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000B400                                         ; const type_info::`vftable'
.data$r:0000B404                 align 8
.data$r:0000B408 a_?av_iostream_ db '.?AV_Iostream_error_category@std@@',0
.data$r:0000B42B                 align 4
.data$r:0000B42B _data$r         ends
.data$r:0000B42B
.rdata$r:0000B42C ; ===========================================================================
.rdata$r:0000B42C
.rdata$r:0000B42C ; Segment type: Pure data
.rdata$r:0000B42C ; Segment permissions: Read
.rdata$r:0000B42C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B42C                 assume cs:_rdata$r
.rdata$r:0000B42C                 ;org 0B42Ch
.rdata$r:0000B42C ; COMDAT (pick any)
.rdata$r:0000B42C                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000B42C ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B42C ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000B42C                                         ; DATA XREF: .rdata$r:0000B3FCo
.rdata$r:0000B42C                                         ; .rdata$r:0000B464o
.rdata$r:0000B42D                 db    0
.rdata$r:0000B42E                 db    0
.rdata$r:0000B42F                 db    0
.rdata$r:0000B430                 db    0
.rdata$r:0000B431                 db    0
.rdata$r:0000B432                 db    0
.rdata$r:0000B433                 db    0
.rdata$r:0000B434                 db    3
.rdata$r:0000B435                 db    0
.rdata$r:0000B436                 db    0
.rdata$r:0000B437                 db    0
.rdata$r:0000B438                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000B438 _rdata$r        ends
.rdata$r:0000B438
.rdata$r:0000B43C ; ===========================================================================
.rdata$r:0000B43C
.rdata$r:0000B43C ; Segment type: Pure data
.rdata$r:0000B43C ; Segment permissions: Read
.rdata$r:0000B43C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B43C                 assume cs:_rdata$r
.rdata$r:0000B43C                 ;org 0B43Ch
.rdata$r:0000B43C ; COMDAT (pick any)
.rdata$r:0000B43C                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000B43C ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000B43C ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000B43C                                         ; DATA XREF: .rdata$r:0000B438o
.rdata$r:0000B43C                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B440                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B444                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B448                 db    0
.rdata$r:0000B449                 align 4
.rdata$r:0000B449 _rdata$r        ends
.rdata$r:0000B449
.rdata$r:0000B44C ; ===========================================================================
.rdata$r:0000B44C
.rdata$r:0000B44C ; Segment type: Pure data
.rdata$r:0000B44C ; Segment permissions: Read
.rdata$r:0000B44C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B44C                 assume cs:_rdata$r
.rdata$r:0000B44C                 ;org 0B44Ch
.rdata$r:0000B44C ; COMDAT (pick any)
.rdata$r:0000B44C                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000B44C ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B44C ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000B44C                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000B44C                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000B450                 db    2
.rdata$r:0000B451                 db    0
.rdata$r:0000B452                 db    0
.rdata$r:0000B453                 db    0
.rdata$r:0000B454                 db    0
.rdata$r:0000B455                 db    0
.rdata$r:0000B456                 db    0
.rdata$r:0000B457                 db    0
.rdata$r:0000B458                 db 0FFh
.rdata$r:0000B459                 db 0FFh
.rdata$r:0000B45A                 db 0FFh
.rdata$r:0000B45B                 db 0FFh
.rdata$r:0000B45C                 db    0
.rdata$r:0000B45D                 db    0
.rdata$r:0000B45E                 db    0
.rdata$r:0000B45F                 db    0
.rdata$r:0000B460                 db  40h ; @
.rdata$r:0000B461                 db    0
.rdata$r:0000B462                 db    0
.rdata$r:0000B463                 db    0
.rdata$r:0000B464                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B464 _rdata$r        ends
.rdata$r:0000B464
.rdata$r:0000B468 ; ===========================================================================
.rdata$r:0000B468
.rdata$r:0000B468 ; Segment type: Pure data
.rdata$r:0000B468 ; Segment permissions: Read
.rdata$r:0000B468 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B468                 assume cs:_rdata$r
.rdata$r:0000B468                 ;org 0B468h
.rdata$r:0000B468 ; COMDAT (pick any)
.rdata$r:0000B468                 public ??_R4_System_error_category@std@@6B@
.rdata$r:0000B468 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:0000B468 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000A4A0o
.rdata$r:0000B469                 db    0
.rdata$r:0000B46A                 db    0
.rdata$r:0000B46B                 db    0
.rdata$r:0000B46C                 db    0
.rdata$r:0000B46D                 db    0
.rdata$r:0000B46E                 db    0
.rdata$r:0000B46F                 db    0
.rdata$r:0000B470                 db    0
.rdata$r:0000B471                 db    0
.rdata$r:0000B472                 db    0
.rdata$r:0000B473                 db    0
.rdata$r:0000B474                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000B478                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B478 _rdata$r        ends
.rdata$r:0000B478
.data$r:0000B47C ; ===========================================================================
.data$r:0000B47C
.data$r:0000B47C ; Segment type: Pure data
.data$r:0000B47C ; Segment permissions: Read/Write
.data$r:0000B47C _data$r         segment dword public 'DATA' use32
.data$r:0000B47C                 assume cs:_data$r
.data$r:0000B47C                 ;org 0B47Ch
.data$r:0000B47C ; COMDAT (pick any)
.data$r:0000B47C                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000B47C ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000B47C ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000B47C                                         ; DATA XREF: .rdata$r:0000B474o
.data$r:0000B47C                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000B47C                                         ; const type_info::`vftable'
.data$r:0000B480                 db    0
.data$r:0000B481                 db    0
.data$r:0000B482                 db    0
.data$r:0000B483                 db    0
.data$r:0000B484                 db  2Eh ; .
.data$r:0000B485                 db  3Fh ; ?
.data$r:0000B486                 db  41h ; A
.data$r:0000B487                 db  56h ; V
.data$r:0000B488                 db  5Fh ; _
.data$r:0000B489                 db  53h ; S
.data$r:0000B48A                 db  79h ; y
.data$r:0000B48B                 db  73h ; s
.data$r:0000B48C                 db  74h ; t
.data$r:0000B48D                 db  65h ; e
.data$r:0000B48E                 db  6Dh ; m
.data$r:0000B48F                 db  5Fh ; _
.data$r:0000B490                 db  65h ; e
.data$r:0000B491                 db  72h ; r
.data$r:0000B492                 db  72h ; r
.data$r:0000B493                 db  6Fh ; o
.data$r:0000B494                 db  72h ; r
.data$r:0000B495                 db  5Fh ; _
.data$r:0000B496                 db  63h ; c
.data$r:0000B497                 db  61h ; a
.data$r:0000B498                 db  74h ; t
.data$r:0000B499                 db  65h ; e
.data$r:0000B49A                 db  67h ; g
.data$r:0000B49B                 db  6Fh ; o
.data$r:0000B49C                 db  72h ; r
.data$r:0000B49D                 db  79h ; y
.data$r:0000B49E                 db  40h ; @
.data$r:0000B49F                 db  73h ; s
.data$r:0000B4A0                 db  74h ; t
.data$r:0000B4A1                 db  64h ; d
.data$r:0000B4A2                 db  40h ; @
.data$r:0000B4A3                 db  40h ; @
.data$r:0000B4A4                 db    0
.data$r:0000B4A5                 align 4
.data$r:0000B4A5 _data$r         ends
.data$r:0000B4A5
.rdata$r:0000B4A8 ; ===========================================================================
.rdata$r:0000B4A8
.rdata$r:0000B4A8 ; Segment type: Pure data
.rdata$r:0000B4A8 ; Segment permissions: Read
.rdata$r:0000B4A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B4A8                 assume cs:_rdata$r
.rdata$r:0000B4A8                 ;org 0B4A8h
.rdata$r:0000B4A8 ; COMDAT (pick any)
.rdata$r:0000B4A8                 public ??_R3_System_error_category@std@@8
.rdata$r:0000B4A8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B4A8 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:0000B478o
.rdata$r:0000B4A8                                         ; .rdata$r:0000B4E0o
.rdata$r:0000B4A9                 db    0
.rdata$r:0000B4AA                 db    0
.rdata$r:0000B4AB                 db    0
.rdata$r:0000B4AC                 db    0
.rdata$r:0000B4AD                 db    0
.rdata$r:0000B4AE                 db    0
.rdata$r:0000B4AF                 db    0
.rdata$r:0000B4B0                 db    3
.rdata$r:0000B4B1                 db    0
.rdata$r:0000B4B2                 db    0
.rdata$r:0000B4B3                 db    0
.rdata$r:0000B4B4                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000B4B4 _rdata$r        ends
.rdata$r:0000B4B4
.rdata$r:0000B4B8 ; ===========================================================================
.rdata$r:0000B4B8
.rdata$r:0000B4B8 ; Segment type: Pure data
.rdata$r:0000B4B8 ; Segment permissions: Read
.rdata$r:0000B4B8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B4B8                 assume cs:_rdata$r
.rdata$r:0000B4B8                 ;org 0B4B8h
.rdata$r:0000B4B8 ; COMDAT (pick any)
.rdata$r:0000B4B8                 public ??_R2_System_error_category@std@@8
.rdata$r:0000B4B8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000B4B8 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000B4B8                                         ; DATA XREF: .rdata$r:0000B4B4o
.rdata$r:0000B4B8                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B4BC                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B4C0                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B4C4                 db    0
.rdata$r:0000B4C5                 align 4
.rdata$r:0000B4C5 _rdata$r        ends
.rdata$r:0000B4C5
.rdata$r:0000B4C8 ; ===========================================================================
.rdata$r:0000B4C8
.rdata$r:0000B4C8 ; Segment type: Pure data
.rdata$r:0000B4C8 ; Segment permissions: Read
.rdata$r:0000B4C8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B4C8                 assume cs:_rdata$r
.rdata$r:0000B4C8                 ;org 0B4C8h
.rdata$r:0000B4C8 ; COMDAT (pick any)
.rdata$r:0000B4C8                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000B4C8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B4C8 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:0000B4C8                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:0000B4C8                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000B4CC                 db    2
.rdata$r:0000B4CD                 db    0
.rdata$r:0000B4CE                 db    0
.rdata$r:0000B4CF                 db    0
.rdata$r:0000B4D0                 db    0
.rdata$r:0000B4D1                 db    0
.rdata$r:0000B4D2                 db    0
.rdata$r:0000B4D3                 db    0
.rdata$r:0000B4D4                 db 0FFh
.rdata$r:0000B4D5                 db 0FFh
.rdata$r:0000B4D6                 db 0FFh
.rdata$r:0000B4D7                 db 0FFh
.rdata$r:0000B4D8                 db    0
.rdata$r:0000B4D9                 db    0
.rdata$r:0000B4DA                 db    0
.rdata$r:0000B4DB                 db    0
.rdata$r:0000B4DC                 db  40h ; @
.rdata$r:0000B4DD                 db    0
.rdata$r:0000B4DE                 db    0
.rdata$r:0000B4DF                 db    0
.rdata$r:0000B4E0                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B4E0 _rdata$r        ends
.rdata$r:0000B4E0
.CRT$XCU:0000B4E4 ; ===========================================================================
.CRT$XCU:0000B4E4
.CRT$XCU:0000B4E4 ; Segment type: Pure data
.CRT$XCU:0000B4E4 ; Segment permissions: Read
.CRT$XCU:0000B4E4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B4E4                 assume cs:_CRT$XCU
.CRT$XCU:0000B4E4                 ;org 0B4E4h
.CRT$XCU:0000B4E4 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:0000B4E8 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:0000B4EC _ignore$initializer$ dd offset ??__Eignore@std@@YAXXZ ; std::`dynamic initializer for 'ignore''(void)
.CRT$XCU:0000B4F0 __Tuple_alloc$initializer$ dd offset ??__E_Tuple_alloc@std@@YAXXZ ; std::`dynamic initializer for '_Tuple_alloc''(void)
.CRT$XCU:0000B4F0 _CRT$XCU        ends
.CRT$XCU:0000B4F0
.CRT$XCU:0000B4F4 ; ===========================================================================
.CRT$XCU:0000B4F4
.CRT$XCU:0000B4F4 ; Segment type: Pure data
.CRT$XCU:0000B4F4 ; Segment permissions: Read
.CRT$XCU:0000B4F4 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B4F4                 assume cs:_CRT$XCU
.CRT$XCU:0000B4F4                 ;org 0B4F4h
.CRT$XCU:0000B4F4 ; COMDAT (pick associative to section at A4C4)
.CRT$XCU:0000B4F4 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0000B4F4 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0000B4F4 _CRT$XCU        ends
.CRT$XCU:0000B4F4
.CRT$XCU:0000B4F8 ; ===========================================================================
.CRT$XCU:0000B4F8
.CRT$XCU:0000B4F8 ; Segment type: Pure data
.CRT$XCU:0000B4F8 ; Segment permissions: Read
.CRT$XCU:0000B4F8 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B4F8                 assume cs:_CRT$XCU
.CRT$XCU:0000B4F8                 ;org 0B4F8h
.CRT$XCU:0000B4F8 ; COMDAT (pick associative to section at A4C8)
.CRT$XCU:0000B4F8 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:0000B4F8 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:0000B4F8 _CRT$XCU        ends
.CRT$XCU:0000B4F8
.CRT$XCU:0000B4FC ; ===========================================================================
.CRT$XCU:0000B4FC
.CRT$XCU:0000B4FC ; Segment type: Pure data
.CRT$XCU:0000B4FC ; Segment permissions: Read
.CRT$XCU:0000B4FC _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B4FC                 assume cs:_CRT$XCU
.CRT$XCU:0000B4FC                 ;org 0B4FCh
.CRT$XCU:0000B4FC ; COMDAT (pick associative to section at A4CC)
.CRT$XCU:0000B4FC ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:0000B4FC ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:0000B4FC _CRT$XCU        ends
.CRT$XCU:0000B4FC
.CRT$XCU:0000B500 ; ===========================================================================
.CRT$XCU:0000B500
.CRT$XCU:0000B500 ; Segment type: Pure data
.CRT$XCU:0000B500 ; Segment permissions: Read
.CRT$XCU:0000B500 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B500                 assume cs:_CRT$XCU
.CRT$XCU:0000B500                 ;org 0B500h
.CRT$XCU:0000B500 ; COMDAT (pick associative to section at A4D4)
.CRT$XCU:0000B500 ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:0000B500 ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:0000B500 _CRT$XCU        ends
.CRT$XCU:0000B500
.CRT$XCU:0000B504 ; ===========================================================================
.CRT$XCU:0000B504
.CRT$XCU:0000B504 ; Segment type: Pure data
.CRT$XCU:0000B504 ; Segment permissions: Read
.CRT$XCU:0000B504 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B504                 assume cs:_CRT$XCU
.CRT$XCU:0000B504                 ;org 0B504h
.CRT$XCU:0000B504 ; COMDAT (pick associative to section at A4D8)
.CRT$XCU:0000B504 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0000B504 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0000B504 _CRT$XCU        ends
.CRT$XCU:0000B504
.CRT$XCU:0000B508 ; ===========================================================================
.CRT$XCU:0000B508
.CRT$XCU:0000B508 ; Segment type: Pure data
.CRT$XCU:0000B508 ; Segment permissions: Read
.CRT$XCU:0000B508 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B508                 assume cs:_CRT$XCU
.CRT$XCU:0000B508                 ;org 0B508h
.CRT$XCU:0000B508 ; COMDAT (pick associative to section at A56C)
.CRT$XCU:0000B508 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:0000B508 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:0000B508 _CRT$XCU        ends
.CRT$XCU:0000B508
.CRT$XCU:0000B50C ; ===========================================================================
.CRT$XCU:0000B50C
.CRT$XCU:0000B50C ; Segment type: Pure data
.CRT$XCU:0000B50C ; Segment permissions: Read
.CRT$XCU:0000B50C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B50C                 assume cs:_CRT$XCU
.CRT$XCU:0000B50C                 ;org 0B50Ch
.CRT$XCU:0000B50C ; COMDAT (pick associative to section at A570)
.CRT$XCU:0000B50C ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000B50C ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000B50C _CRT$XCU        ends
.CRT$XCU:0000B50C
UNDEF:0000B510 ; ===========================================================================
UNDEF:0000B510
UNDEF:0000B510 ; Segment type: Externs
UNDEF:0000B510 ; UNDEF
UNDEF:0000B510                 extrn __purecall:near   ; DATA XREF: .rdata:0000A418o
UNDEF:0000B510                                         ; .rdata:0000A41Co
UNDEF:0000B514 ; void *__cdecl operator new(unsigned int)
UNDEF:0000B514                 extrn ??2@YAPAXI@Z:near ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+4E9p
UNDEF:0000B514                                         ; std::_Allocate<char>(uint,char *)+1Dp ...
UNDEF:0000B518 ; void __cdecl operator delete(void *)
UNDEF:0000B518                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z$0+7p
UNDEF:0000B518                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:0000B51C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000B51C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000B51C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:0000B520                 extrn __invalid_parameter:near
UNDEF:0000B520                                         ; CODE XREF: std::vector<int,std::allocator<int>>::operator[](uint)+74p
UNDEF:0000B520                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+74p ...
UNDEF:0000B524 ; double __cdecl _difftime64(__time64_t Time1, __time64_t Time2)
UNDEF:0000B524                 extrn __difftime64:near ; CODE XREF: _difftime+13p
UNDEF:0000B528 ; __time64_t __cdecl _time64(__time64_t *Time)
UNDEF:0000B528                 extrn __time64:near     ; CODE XREF: _time+7p
UNDEF:0000B52C ; int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size)
UNDEF:0000B52C                 extrn _memcmp:near      ; CODE XREF: std::char_traits<char>::compare(char const *,char const *,uint)+1Fp
UNDEF:0000B530 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000B530                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:0000B530                                         ; _wmemcpy+11p
UNDEF:0000B534 ; size_t __cdecl strlen(const char *Str)
UNDEF:0000B534                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:0000B538 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000B538                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:0000B538                                         ; _wmemmove+11p
UNDEF:0000B53C ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:0000B53C                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:0000B540 ; HBRUSH __stdcall CreateSolidBrush(COLORREF color)
UNDEF:0000B540                 extrn __imp__CreateSolidBrush@4:near
UNDEF:0000B540                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D6p
UNDEF:0000B540                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D6r
UNDEF:0000B544 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:0000B544                 extrn __imp__SendMessageW@16:near
UNDEF:0000B544                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+395p
UNDEF:0000B544                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+3F9p ...
UNDEF:0000B548 ; ATOM __stdcall RegisterClassW(const WNDCLASSW *lpWndClass)
UNDEF:0000B548                 extrn __imp__RegisterClassW@4:near
UNDEF:0000B548                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+10Fp
UNDEF:0000B548                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+10Fr
UNDEF:0000B54C ; HWND __stdcall CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
UNDEF:0000B54C                 extrn __imp__CreateWindowExW@48:near
UNDEF:0000B54C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+1E0p
UNDEF:0000B54C                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+1E0r
UNDEF:0000B550 ; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
UNDEF:0000B550                 extrn __imp__ShowWindow@8:near
UNDEF:0000B550                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+49Cp
UNDEF:0000B550                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+4D9p
UNDEF:0000B550                                         ; DATA XREF: ...
UNDEF:0000B554 ; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
UNDEF:0000B554                 extrn __imp__MoveWindow@24:near
UNDEF:0000B554                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+276p
UNDEF:0000B554                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+276r
UNDEF:0000B558 ; BOOL __stdcall SetWindowPlacement(HWND hWnd, const WINDOWPLACEMENT *lpwndpl)
UNDEF:0000B558                 extrn __imp__SetWindowPlacement@8:near
UNDEF:0000B558                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+369p
UNDEF:0000B558                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+369r
UNDEF:0000B55C ; BOOL __stdcall SetMenu(HWND hWnd, HMENU hMenu)
UNDEF:0000B55C                 extrn __imp__SetMenu@8:near
UNDEF:0000B55C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+3B5p
UNDEF:0000B55C                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+3B5r
UNDEF:0000B560 ; int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)
UNDEF:0000B560                 extrn __imp__MessageBoxA@16:near
UNDEF:0000B560                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+DB6p
UNDEF:0000B560                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+DB6r
UNDEF:0000B564 ; DWORD __stdcall GetSysColor(int nIndex)
UNDEF:0000B564                 extrn __imp__GetSysColor@4:near
UNDEF:0000B564                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+CFp
UNDEF:0000B564                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+CFr
UNDEF:0000B568 ; HCURSOR __stdcall LoadCursorW(HINSTANCE hInstance, LPCWSTR lpCursorName)
UNDEF:0000B568                 extrn __imp__LoadCursorW@8:near
UNDEF:0000B568                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+C1p
UNDEF:0000B568                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+C1r
UNDEF:0000B56C ; HICON __stdcall LoadIconW(HINSTANCE hInstance, LPCWSTR lpIconName)
UNDEF:0000B56C                 extrn __imp__LoadIconW@8:near
UNDEF:0000B56C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+AEp
UNDEF:0000B56C                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+518p
UNDEF:0000B56C                                         ; DATA XREF: ...
UNDEF:0000B570 ; BOOL __stdcall IsDialogMessageW(HWND hDlg, LPMSG lpMsg)
UNDEF:0000B570                 extrn __imp__IsDialogMessageW@8:near
UNDEF:0000B570                                         ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+64p
UNDEF:0000B570                                         ; DATA XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+64r
UNDEF:0000B574 ; size_t __cdecl wcstombs(char *Dest, const wchar_t *Source, size_t MaxCount)
UNDEF:0000B574                 extrn _wcstombs:near    ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B25p
UNDEF:0000B578 ; BOOL __stdcall PathFileExistsW(LPCWSTR pszPath)
UNDEF:0000B578                 extrn __imp__PathFileExistsW@4:near
UNDEF:0000B578                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+C6Bp
UNDEF:0000B578                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+C6Br
UNDEF:0000B57C ; int sprintf(char *Dest, const char *Format, ...)
UNDEF:0000B57C                 extrn _sprintf:near     ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D9Ep
UNDEF:0000B580 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000B580                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000B580                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+2Dp
UNDEF:0000B580                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+55p ...
UNDEF:0000B584 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000B584                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000B584                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+4Bp
UNDEF:0000B584                                         ; __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0+3j ...
UNDEF:0000B588                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:0000B58C ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const char *const *)
UNDEF:0000B58C                 extrn ??0exception@std@@QAE@ABQBD@Z:near
UNDEF:0000B58C                                         ; CODE XREF: std::runtime_error::runtime_error(char const *)+2Dp
UNDEF:0000B590 ; _DWORD __thiscall std::exception::exception(std::exception *__hidden this, const struct std::exception *)
UNDEF:0000B590                 extrn ??0exception@std@@QAE@ABV01@@Z:near
UNDEF:0000B590                                         ; CODE XREF: std::runtime_error::runtime_error(std::runtime_error const &)+2Dp
UNDEF:0000B590                                         ; DATA XREF: .xdata$x:0000A40Co
UNDEF:0000B594 ; _DWORD __thiscall std::exception::~exception(std::exception *__hidden this)
UNDEF:0000B594                 extrn ??1exception@std@@UAE@XZ:near
UNDEF:0000B594                                         ; CODE XREF: __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0+3j
UNDEF:0000B594                                         ; __unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0+3j ...
UNDEF:0000B598 ; public: virtual char const * __thiscall std::exception::what(void)const
UNDEF:0000B598                 extrn ?what@exception@std@@UBEPBDXZ:near
UNDEF:0000B598                                         ; DATA XREF: .rdata:0000A37Co
UNDEF:0000B59C                 extrn __CrtDbgReportW:near
UNDEF:0000B59C                                         ; CODE XREF: std::vector<int,std::allocator<int>>::operator[](uint)+50p
UNDEF:0000B59C                                         ; std::vector<HWND__ *,std::allocator<HWND__ *>>::operator[](uint)+50p ...
UNDEF:0000B5A0 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000B5A0                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000B5A0                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:0000B5A0                                         ; std::_Debug_pointer<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *,wchar_t const *,uint)+16p ...
UNDEF:0000B5A4 ; void __cdecl std::_Xbad_alloc()
UNDEF:0000B5A4                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:0000B5A4                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_22CAp
UNDEF:0000B5A4                                         ; std::_Allocate<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>(uint,std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>> *):loc_230Ap ...
UNDEF:0000B5A8 ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000B5A8                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000B5A8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000B5A8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp ...
UNDEF:0000B5AC ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0000B5AC                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0000B5AC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0000B5AC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:0000B5B0 ; public: virtual void * __thiscall std::runtime_error::`vector deleting destructor'(unsigned int)
UNDEF:0000B5B0                 extrn ??_Eruntime_error@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B5B0                                         ; DATA XREF: .rdata:const std::runtime_error::`vftable'o
UNDEF:0000B5B4 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000B5B4                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B5B4                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:0000B5B8 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:0000B5B8                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:0000B5B8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:0000B5B8                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000B5BC ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000B5BC                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000B5BC                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:0000B5C0 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000B5C0                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B5C0                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000B5C4 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000B5C4                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B5C4                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:0000B5C8 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000B5C8                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B5C8                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000B5CC ; class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __cdecl getFileContent(wchar_t const *)
UNDEF:0000B5CC                 extrn ?getFileContent@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PB_W@Z:near
UNDEF:0000B5CC                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+C8Cp
UNDEF:0000B5D0 ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl PathAppendW(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
UNDEF:0000B5D0                 extrn ?PathAppendW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAV12@ABV12@@Z:near
UNDEF:0000B5D0                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+65Dp
UNDEF:0000B5D0                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+7D3p ...
UNDEF:0000B5D4 ; public: bool __thiscall LocalizationSwitcher::addLanguageFromXml(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>)
UNDEF:0000B5D4                 extrn ?addLanguageFromXml@LocalizationSwitcher@@QAE_NV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z:near
UNDEF:0000B5D4                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+72Fp
UNDEF:0000B5D8 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall ThemeSwitcher::getThemeFromXmlFileName(wchar_t const *)const
UNDEF:0000B5D8                 extrn ?getThemeFromXmlFileName@ThemeSwitcher@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z:near
UNDEF:0000B5D8                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+9B5p
UNDEF:0000B5D8                                         ; ThemeSwitcher::addThemeFromXml(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>)+46p
UNDEF:0000B5DC ; _DWORD __thiscall trayIconControler::trayIconControler(trayIconControler *__hidden this, HWND, unsigned int, unsigned int, HICON, wchar_t *)
UNDEF:0000B5DC                 extrn ??0trayIconControler@@QAE@PAUHWND__@@IIPAUHICON__@@PA_W@Z:near
UNDEF:0000B5DC                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+536p
UNDEF:0000B5E0 ; int __thiscall trayIconControler::doTrayIcon(trayIconControler *__hidden this, unsigned __int32)
UNDEF:0000B5E0                 extrn ?doTrayIcon@trayIconControler@@QAEHK@Z:near
UNDEF:0000B5E0                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+580p
UNDEF:0000B5E4 ; void __thiscall PluginsManager::notify(PluginsManager *__hidden this, const struct SCNotification *)
UNDEF:0000B5E4                 extrn ?notify@PluginsManager@@QAEXPBUSCNotification@@@Z:near
UNDEF:0000B5E4                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+AE9p
UNDEF:0000B5E8 ; void __thiscall Notepad_plus::loadLastSession(Notepad_plus *__hidden this)
UNDEF:0000B5E8                 extrn ?loadLastSession@Notepad_plus@@QAEXXZ:near
UNDEF:0000B5E8                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+471p
UNDEF:0000B5EC ; void __thiscall Notepad_plus::launchDocumentBackupTask(Notepad_plus *__hidden this)
UNDEF:0000B5EC                 extrn ?launchDocumentBackupTask@Notepad_plus@@QAEXXZ:near
UNDEF:0000B5EC                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+DEFp
UNDEF:0000B5F0 ; int __thiscall Notepad_plus::getQuoteIndexFrom(Notepad_plus *__hidden this, const char *)
UNDEF:0000B5F0                 extrn ?getQuoteIndexFrom@Notepad_plus@@QBEHPBD@Z:near
UNDEF:0000B5F0                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B48p
UNDEF:0000B5F4 ; void __thiscall Notepad_plus::showQuoteFromIndex(Notepad_plus *__hidden this, int)
UNDEF:0000B5F4                 extrn ?showQuoteFromIndex@Notepad_plus@@QBEXH@Z:near
UNDEF:0000B5F4                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+B6Cp
UNDEF:0000B5F8 ; void __thiscall Notepad_plus::showQuote(Notepad_plus *__hidden this, const char *, const char *, bool)
UNDEF:0000B5F8                 extrn ?showQuote@Notepad_plus@@QBEXPBD0_N@Z:near
UNDEF:0000B5F8                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+BBCp
UNDEF:0000B5F8                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+D14p
UNDEF:0000B5FC ; void __thiscall Notepad_plus::checkModifiedDocument(Notepad_plus *__hidden this)
UNDEF:0000B5FC                 extrn ?checkModifiedDocument@Notepad_plus@@AAEXXZ:near
UNDEF:0000B5FC                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+DE1p
UNDEF:0000B600 ; void __thiscall Notepad_plus::staticCheckMenuAndTB(Notepad_plus *__hidden this)
UNDEF:0000B600                 extrn ?staticCheckMenuAndTB@Notepad_plus@@ABEXXZ:near
UNDEF:0000B600                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+225p
UNDEF:0000B604 ; int __thiscall Notepad_plus::processIncrFindAccel(Notepad_plus *__hidden this, struct tagMSG *)
UNDEF:0000B604                 extrn ?processIncrFindAccel@Notepad_plus@@ABEHPAUtagMSG@@@Z:near
UNDEF:0000B604                                         ; CODE XREF: Notepad_plus_Window::isDlgsMsg(tagMSG *)+3Ep
UNDEF:0000B608 ; private: void __thiscall Notepad_plus::getMatchedFileNames(wchar_t const *, class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> const &, class std::vector<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::allocator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>> &, bool, bool)
UNDEF:0000B608                 extrn ?getMatchedFileNames@Notepad_plus@@AAEXPB_WABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@AAV23@_N3@Z:near
UNDEF:0000B608                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+6A6p
UNDEF:0000B608                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+81Cp ...
UNDEF:0000B60C ; void __thiscall Notepad_plus::loadCommandlineParams(Notepad_plus *__hidden this, const wchar_t *, struct CmdLineParams *)
UNDEF:0000B60C                 extrn ?loadCommandlineParams@Notepad_plus@@AAEXPB_WPAUCmdLineParams@@@Z:near
UNDEF:0000B60C                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+59Cp
UNDEF:0000B610 ; private: static long __stdcall Notepad_plus_Window::Notepad_plus_Proc(struct HWND__ *, unsigned int, unsigned int, long)
UNDEF:0000B610                 extrn ?Notepad_plus_Proc@Notepad_plus_Window@@CGJPAUHWND__@@IIJ@Z:near
UNDEF:0000B610                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+7Bo
UNDEF:0000B614 ; __fastcall __security_check_cookie(x)
UNDEF:0000B614                 extrn @__security_check_cookie@4:near
UNDEF:0000B614                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+E52p
UNDEF:0000B614                                         ; __ehhandler$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z+Fp ...
UNDEF:0000B618 ; __stdcall _CxxThrowException(x, x)
UNDEF:0000B618                 extrn __CxxThrowException@8:near
UNDEF:0000B618                                         ; CODE XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+138p
UNDEF:0000B618                                         ; Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+217p ...
UNDEF:0000B61C                 extrn ___CxxFrameHandler3:near
UNDEF:0000B61C                                         ; CODE XREF: __ehhandler$?init@Notepad_plus_Window@@QAEXPAUHINSTANCE__@@PAUHWND__@@PB_WPAUCmdLineParams@@@Z+23j
UNDEF:0000B61C                                         ; __ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@X@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z+16j ...
UNDEF:0000B620 ; const type_info::`vftable'
UNDEF:0000B620                 extrn ??_7type_info@@6B@:near
UNDEF:0000B620                                         ; DATA XREF: .data$r:std::runtime_error `RTTI Type Descriptor'o
UNDEF:0000B620                                         ; .data$r:std::exception `RTTI Type Descriptor'o ...
UNDEF:0000B624 ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:0000B624                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:0000B624                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:0000B628                 extrn ___security_cookie:near
UNDEF:0000B628                                         ; DATA XREF: Notepad_plus_Window::init(HINSTANCE__ *,HWND__ *,wchar_t const *,CmdLineParams *)+17r
UNDEF:0000B628                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::_String_iterator<std::_String_val<std::_Simple_types<char>>>,std::_String_iterator<std::_String_val<std::_Simple_types<char>>>)+14r ...
UNDEF:0000B62C                 extrn __fltused:near
UNDEF:0000B62C
UNDEF:0000B62C
UNDEF:0000B62C                 end