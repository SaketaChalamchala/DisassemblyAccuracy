.data:00000000 ;
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.data:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.data:00000000 ; |                      License info: 48-3677-7074-51                      |
.data:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.data:00000000 ; +-------------------------------------------------------------------------+
.data:00000000 ;
.data:00000000 ; Input MD5   : 3AD4A78B0B9C7EA6510BE5E314DCEDC2
.data:00000000 ; Input CRC32 : B07A55C6
.data:00000000
.data:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\EncodingMapper.obj
.data:00000000 ; Format      : COFF (X386MAGIC)
.data:00000000 ; includelib "LIBCMTD"
.data:00000000 ; includelib "OLDNAMES"
.data:00000000
.data:00000000                 .686p
.data:00000000                 .mmx
.data:00000000                 .model flat
.data:00000000
.data:00000000 ; ===========================================================================
.data:00000000
.data:00000000 ; Segment type: Pure data
.data:00000000 ; Segment permissions: Read/Write
.data:00000000 ; Segment alignment 'qword' can not be represented in assembly
.data:00000000 _data           segment para public 'DATA' use32
.data:00000000                 assume cs:_data
.data:00000000                 public ?encodings@@3PAUEncodingUnit@@A
.data:00000000 ; struct EncodingUnit * encodings
.data:00000000 ?encodings@@3PAUEncodingUnit@@A dd offset aPage437
.data:00000000                                         ; DATA XREF: EncodingMapper::getEncodingFromIndex(int)+26r
.data:00000000                                         ; EncodingMapper::getIndexFromEncoding(int)+31r ...
.data:00000000                                         ; "Page437"
.data:00000004 ; char *Str
.data:00000004 Str             dd offset $SG3526       ; DATA XREF: EncodingMapper::getEncodingFromString(char const *)+53r
.data:00000004                                         ; "windows-1250"
.data:00000008                 dd offset aPage437+1    ; "age437"
.data:0000000C                 dd offset $SG3527       ; "windows-1251"
.data:00000010                 dd offset aPage437+2    ; "ge437"
.data:00000014                 dd offset $SG3528       ; "windows-1252"
.data:00000018                 dd offset aPage437+3    ; "e437"
.data:0000001C                 dd offset $SG3529       ; "windows-1253"
.data:00000020                 dd offset aPage437+4    ; "437"
.data:00000024                 dd offset $SG3530       ; "windows-1254"
.data:00000028                 dd offset aPage437+5    ; "37"
.data:0000002C                 dd offset $SG3531       ; "windows-1255"
.data:00000030                 dd offset aPage437+6    ; "7"
.data:00000034                 dd offset $SG3532       ; "windows-1256"
.data:00000038                 dd offset aPage437+7    ; ""
.data:0000003C                 dd offset $SG3533       ; "windows-1257"
.data:00000040                 dd offset unk_4EA
.data:00000044                 dd offset $SG3534       ; "windows-1258"
.data:00000048                 db 0AFh ; »
.data:00000049                 db  6Fh ; o
.data:0000004A                 db    0
.data:0000004B                 db    0
.data:0000004C                 dd offset $SG3535       ; "latin1 ISO_8859-1 ISO-8859-1 CP819 IBM8"...
.data:00000050                 db 0B0h ; ¦
.data:00000051                 db  6Fh ; o
.data:00000052                 db    0
.data:00000053                 db    0
.data:00000054                 dd offset $SG3536       ; "latin2 ISO_8859-2 ISO-8859-2 csISOLatin"...
.data:00000058                 db 0B1h ; ¦
.data:00000059                 db  6Fh ; o
.data:0000005A                 db    0
.data:0000005B                 db    0
.data:0000005C                 dd offset $SG3537       ; "latin3 ISO_8859-3 ISO-8859-3 csISOLatin"...
.data:00000060                 db 0B2h ; ¦
.data:00000061                 db  6Fh ; o
.data:00000062                 db    0
.data:00000063                 db    0
.data:00000064                 dd offset $SG3538       ; "latin4 ISO_8859-4 ISO-8859-4 csISOLatin"...
.data:00000068                 db 0B3h ; ¦
.data:00000069                 db  6Fh ; o
.data:0000006A                 db    0
.data:0000006B                 db    0
.data:0000006C                 dd offset $SG3539       ; "cyrillic ISO_8859-5 ISO-8859-5 csISOLat"...
.data:00000070                 db 0B4h ; ¦
.data:00000071                 db  6Fh ; o
.data:00000072                 db    0
.data:00000073                 db    0
.data:00000074                 dd offset $SG3540       ; "arabic ISO_8859-6 ISO-8859-6 csISOLatin"...
.data:00000078                 db 0B5h ; ¦
.data:00000079                 db  6Fh ; o
.data:0000007A                 db    0
.data:0000007B                 db    0
.data:0000007C                 dd offset $SG3541       ; "greek ISO_8859-7 ISO-8859-7 csISOLatinG"...
.data:00000080                 db 0B6h ; ¦
.data:00000081                 db  6Fh ; o
.data:00000082                 db    0
.data:00000083                 db    0
.data:00000084                 dd offset $SG3542       ; "hebrew ISO_8859-8 ISO-8859-8 csISOLatin"...
.data:00000088                 db 0B7h ; +
.data:00000089                 db  6Fh ; o
.data:0000008A                 db    0
.data:0000008B                 db    0
.data:0000008C                 dd offset $SG3543       ; "latin5 ISO_8859-9 ISO-8859-9 csISOLatin"...
.data:00000090                 db 0B8h ; +
.data:00000091                 db  6Fh ; o
.data:00000092                 db    0
.data:00000093                 db    0
.data:00000094                 dd offset $SG3544
.data:00000098                 db 0B9h ; ¦
.data:00000099                 db  6Fh ; o
.data:0000009A                 db    0
.data:0000009B                 db    0
.data:0000009C                 dd offset $SG3545
.data:000000A0                 db 0BBh ; +
.data:000000A1                 db  6Fh ; o
.data:000000A2                 db    0
.data:000000A3                 db    0
.data:000000A4                 dd offset $SG3546       ; "ISO_8859-13 ISO-8859-13"
.data:000000A8                 db 0BCh ; +
.data:000000A9                 db  6Fh ; o
.data:000000AA                 db    0
.data:000000AB                 db    0
.data:000000AC                 dd offset $SG3547       ; "iso-celtic latin8 ISO_8859-14 ISO-8859-"...
.data:000000B0                 db 0BDh ; +
.data:000000B1                 db  6Fh ; o
.data:000000B2                 db    0
.data:000000B3                 db    0
.data:000000B4                 dd offset $SG3548       ; "Latin-9 ISO_8859-15 ISO-8859-15"
.data:000000B8                 db 0BEh ; +
.data:000000B9                 db  6Fh ; o
.data:000000BA                 db    0
.data:000000BB                 db    0
.data:000000BC                 dd offset $SG3549
.data:000000C0                 dd offset unk_1B5
.data:000000C4                 dd offset $SG3550
.data:000000C8                 dd offset $SG3538+4     ; "n4 ISO_8859-4 ISO-8859-4 csISOLatin4 is"...
.data:000000CC                 dd offset $SG3551       ; "IBM720 cp720 oem720 720"
.data:000000D0                 dd offset $SG3538+15h   ; "-8859-4 csISOLatin4 iso-ir-110 l4"
.data:000000D4                 dd offset $SG3552       ; "IBM737 cp737 oem737 737"
.data:000000D8                 dd offset $SG3539+3     ; "illic ISO_8859-5 ISO-8859-5 csISOLatinC"...
.data:000000DC                 dd offset $SG3553       ; "IBM775 cp775 oem775 775"
.data:000000E0                 dd offset $SG3542+0Eh   ; "9-8 ISO-8859-8 csISOLatinHebrew iso-ir-"...
.data:000000E4                 dd offset $SG3554       ; "IBM850 cp850 oem850 850"
.data:000000E8                 dd offset $SG3542+10h   ; "8 ISO-8859-8 csISOLatinHebrew iso-ir-13"...
.data:000000EC                 dd offset $SG3555       ; "IBM852 cp852 oem852 852"
.data:000000F0                 dd offset $SG3542+13h   ; "SO-8859-8 csISOLatinHebrew iso-ir-138"
.data:000000F4                 dd offset $SG3556       ; "IBM855 cp855 oem855 855 csIBM855"
.data:000000F8                 dd offset $SG3542+15h   ; "-8859-8 csISOLatinHebrew iso-ir-138"
.data:000000FC                 dd offset $SG3557       ; "IBM857 cp857 oem857 857"
.data:00000100                 dd offset $SG3542+16h   ; "8859-8 csISOLatinHebrew iso-ir-138"
.data:00000104                 dd offset $SG3558       ; "IBM858 cp858 oem858 858"
.data:00000108                 dd offset $SG3542+18h   ; "59-8 csISOLatinHebrew iso-ir-138"
.data:0000010C                 dd offset $SG3559       ; "IBM860 cp860 oem860 860"
.data:00000110                 dd offset $SG3542+19h   ; "9-8 csISOLatinHebrew iso-ir-138"
.data:00000114                 dd offset $SG3560       ; "IBM861 cp861 oem861 861"
.data:00000118                 dd offset $SG3542+1Ah   ; "-8 csISOLatinHebrew iso-ir-138"
.data:0000011C                 dd offset $SG3561       ; "IBM862 cp862 oem862 862"
.data:00000120                 dd offset $SG3542+1Bh   ; "8 csISOLatinHebrew iso-ir-138"
.data:00000124                 dd offset $SG3562       ; "IBM863 cp863 oem863 863"
.data:00000128                 dd offset $SG3542+1Dh   ; "csISOLatinHebrew iso-ir-138"
.data:0000012C                 dd offset $SG3563       ; "IBM865 cp865 oem865 865"
.data:00000130                 dd offset $SG3542+1Eh   ; "sISOLatinHebrew iso-ir-138"
.data:00000134                 dd offset $SG3564       ; "IBM866 cp866 oem866 866"
.data:00000138                 dd offset $SG3542+21h   ; "OLatinHebrew iso-ir-138"
.data:0000013C                 dd offset $SG3565       ; "IBM869 cp869 oem869 869"
.data:00000140                 dd offset $SG3540+36h   ; "27 ASMO-708 ECMA-114"
.data:00000144                 dd offset $SG3566       ; "big5 csBig5"
.data:00000148                 dd offset $SG3540+28h   ; "rabic iso-ir-127 ASMO-708 ECMA-114"
.data:0000014C                 dd offset $SG3567       ; "gb2312 gbk csGB2312 gb18030"
.data:00000150                 dd offset $SG3540+24h   ; "tinArabic iso-ir-127 ASMO-708 ECMA-114"
.data:00000154                 dd offset $SG3568       ; "Shift_JIS MS_Kanji csShiftJIS csWindows"...
.data:00000158                 dd offset $SG3540+35h   ; "127 ASMO-708 ECMA-114"
.data:0000015C                 dd offset $SG3569       ; "windows-949 korean"
.data:00000160                 db 0EDh ; f
.data:00000161                 db 0CAh ; -
.data:00000162                 db    0
.data:00000163                 db    0
.data:00000164                 dd offset $SG3570       ; "euc-kr csEUCKR"
.data:00000168                 dd offset $SG3542+26h   ; "nHebrew iso-ir-138"
.data:0000016C                 dd offset $SG3571       ; "tis-620"
.data:00000170                 db  17h
.data:00000171                 db  27h ; '
.data:00000172                 db    0
.data:00000173                 db    0
.data:00000174                 dd offset $SG3572       ; "x-mac-cyrillic xmaccyrillic"
.data:00000178                 db  6Ah ; j
.data:00000179                 db  55h ; U
.data:0000017A                 db    0
.data:0000017B                 db    0
.data:0000017C                 dd offset $SG3573       ; "koi8_u"
.data:00000180                 db  82h ; é
.data:00000181                 db  51h ; Q
.data:00000182                 db    0
.data:00000183                 db    0
.data:00000184                 dd offset $SG3574       ; "koi8_r csKOI8R"
.data:00000184 _data           ends
.data:00000184
.rdata:00000188 ; ===========================================================================
.rdata:00000188
.rdata:00000188 ; Segment type: Pure data
.rdata:00000188 ; Segment permissions: Read
.rdata:00000188 ; Segment alignment 'qword' can not be represented in assembly
.rdata:00000188 _rdata          segment para public 'DATA' use32
.rdata:00000188                 assume cs:_rdata
.rdata:00000188                 ;org 188h
.rdata:00000188 $SG3526         db 'windows-1250',0     ; DATA XREF: .data:Stro
.rdata:00000195 $SG3544         db    0                 ; DATA XREF: .data:00000094o
.rdata:00000196 $SG3545         db    0                 ; DATA XREF: .data:0000009Co
.rdata:00000197 $SG3549         db    0                 ; DATA XREF: .data:000000BCo
.rdata:00000198 $SG3527         db 'windows-1251',0     ; DATA XREF: .data:0000000Co
.rdata:000001A5                 align 4
.rdata:000001A8 $SG3528         db 'windows-1252',0     ; DATA XREF: .data:00000014o
.rdata:000001B5 unk_1B5         db    0                 ; DATA XREF: .data:000000C0o
.rdata:000001B6                 db    0
.rdata:000001B7                 db    0
.rdata:000001B8 $SG3529         db 'windows-1253',0     ; DATA XREF: .data:0000001Co
.rdata:000001C5                 align 4
.rdata:000001C8 $SG3530         db 'windows-1254',0     ; DATA XREF: .data:00000024o
.rdata:000001D5                 align 4
.rdata:000001D8 $SG3531         db 'windows-1255',0     ; DATA XREF: .data:0000002Co
.rdata:000001E5                 align 4
.rdata:000001E8 $SG3532         db 'windows-1256',0     ; DATA XREF: .data:00000034o
.rdata:000001F5                 align 4
.rdata:000001F8 $SG3533         db 'windows-1257',0     ; DATA XREF: .data:0000003Co
.rdata:00000205                 align 4
.rdata:00000208 $SG3534         db 'windows-1258',0     ; DATA XREF: .data:00000044o
.rdata:00000215                 align 4
.rdata:00000218 $SG3535         db 'latin1 ISO_8859-1 ISO-8859-1 CP819 IBM819 csISOLatin1 iso-ir-100 '
.rdata:00000218                                         ; DATA XREF: .data:0000004Co
.rdata:00000218                 db 'l1',0
.rdata:0000025C $SG3536         db 'latin2 ISO_8859-2 ISO-8859-2 csISOLatin2 iso-ir-101 l2',0
.rdata:0000025C                                         ; DATA XREF: .data:00000054o
.rdata:00000293                 align 4
.rdata:00000294 $SG3537         db 'latin3 ISO_8859-3 ISO-8859-3 csISOLatin3 iso-ir-109 l3',0
.rdata:00000294                                         ; DATA XREF: .data:0000005Co
.rdata:000002CB                 align 4
.rdata:000002CC $SG3538         db 'latin4 ISO_8859-4 ISO-8859-4 csISOLatin4 iso-ir-110 l4',0
.rdata:000002CC                                         ; DATA XREF: .data:00000064o
.rdata:000002CC                                         ; .data:000000C8o
.rdata:00000303                 align 4
.rdata:00000304 $SG3539         db 'cyrillic ISO_8859-5 ISO-8859-5 csISOLatinCyrillic iso-ir-144',0
.rdata:00000304                                         ; DATA XREF: .data:0000006Co
.rdata:00000304                                         ; .data:000000D8o
.rdata:00000341                 align 4
.rdata:00000344 $SG3542         db 'hebrew ISO_8859-8 ISO-8859-8 csISOLatinHebrew iso-ir-138',0
.rdata:00000344                                         ; DATA XREF: .data:00000084o
.rdata:00000344                                         ; .data:000000E0o
.rdata:0000037D                 align 10h
.rdata:00000380 $SG3540         db 'arabic ISO_8859-6 ISO-8859-6 csISOLatinArabic iso-ir-127 ASMO-708'
.rdata:00000380                                         ; DATA XREF: .data:00000074o
.rdata:00000380                 db ' ECMA-114',0
.rdata:000003CB                 align 10h
.rdata:000003D0 $SG3541         db 'greek ISO_8859-7 ISO-8859-7 csISOLatinGreek greek8 iso-ir-126 ELO'
.rdata:000003D0                                         ; DATA XREF: .data:0000007Co
.rdata:000003D0                 db 'T_928 ECMA-118',0
.rdata:00000420 $SG3543         db 'latin5 ISO_8859-9 ISO-8859-9 csISOLatin5 iso-ir-148 l5',0
.rdata:00000420                                         ; DATA XREF: .data:0000008Co
.rdata:00000457                 align 4
.rdata:00000458 $SG3546         db 'ISO_8859-13 ISO-8859-13',0 ; DATA XREF: .data:000000A4o
.rdata:00000470 $SG3547         db 'iso-celtic latin8 ISO_8859-14 ISO-8859-14 18 iso-ir-199',0
.rdata:00000470                                         ; DATA XREF: .data:000000ACo
.rdata:000004A8 $SG3548         db 'Latin-9 ISO_8859-15 ISO-8859-15',0
.rdata:000004A8                                         ; DATA XREF: .data:000000B4o
.rdata:000004C8 $SG3550         db  49h ; I             ; DATA XREF: .data:000000C4o
.rdata:000004C9                 db  42h ; B
.rdata:000004CA                 db  4Dh ; M
.rdata:000004CB                 db  34h ; 4
.rdata:000004CC                 db  33h ; 3
.rdata:000004CD                 db  37h ; 7
.rdata:000004CE                 db  20h
.rdata:000004CF                 db  63h ; c
.rdata:000004D0                 db  70h ; p
.rdata:000004D1                 db  34h ; 4
.rdata:000004D2                 db  33h ; 3
.rdata:000004D3                 db  37h ; 7
.rdata:000004D4                 db  20h
.rdata:000004D5                 db  34h ; 4
.rdata:000004D6                 db  33h ; 3
.rdata:000004D7                 db  37h ; 7
.rdata:000004D8                 db  20h
.rdata:000004D9                 db  63h ; c
.rdata:000004DA                 db  73h ; s
.rdata:000004DB                 db  50h ; P
.rdata:000004DC                 db  43h ; C
.rdata:000004DD                 db  38h ; 8
.rdata:000004DE                 db  43h ; C
.rdata:000004DF                 db  6Fh ; o
.rdata:000004E0                 db  64h ; d
.rdata:000004E1                 db  65h ; e
.rdata:000004E2 aPage437        db 'Page437',0          ; DATA XREF: .data:EncodingUnit * encodingso
.rdata:000004E2                                         ; .data:00000008o ...
.rdata:000004EA unk_4EA         db    0                 ; DATA XREF: .data:00000040o
.rdata:000004EB                 db    0
.rdata:000004EC $SG3551         db 'IBM720 cp720 oem720 720',0 ; DATA XREF: .data:000000CCo
.rdata:00000504 $SG3552         db 'IBM737 cp737 oem737 737',0 ; DATA XREF: .data:000000D4o
.rdata:0000051C $SG3553         db 'IBM775 cp775 oem775 775',0 ; DATA XREF: .data:000000DCo
.rdata:00000534 $SG3554         db 'IBM850 cp850 oem850 850',0 ; DATA XREF: .data:000000E4o
.rdata:0000054C $SG3555         db 'IBM852 cp852 oem852 852',0 ; DATA XREF: .data:000000ECo
.rdata:00000564 $SG3556         db 'IBM855 cp855 oem855 855 csIBM855',0
.rdata:00000564                                         ; DATA XREF: .data:000000F4o
.rdata:00000585                 align 4
.rdata:00000588 $SG3557         db 'IBM857 cp857 oem857 857',0 ; DATA XREF: .data:000000FCo
.rdata:000005A0 $SG3558         db 'IBM858 cp858 oem858 858',0 ; DATA XREF: .data:00000104o
.rdata:000005B8 $SG3559         db 'IBM860 cp860 oem860 860',0 ; DATA XREF: .data:0000010Co
.rdata:000005D0 $SG3560         db 'IBM861 cp861 oem861 861',0 ; DATA XREF: .data:00000114o
.rdata:000005E8 $SG3561         db 'IBM862 cp862 oem862 862',0 ; DATA XREF: .data:0000011Co
.rdata:00000600 $SG3562         db 'IBM863 cp863 oem863 863',0 ; DATA XREF: .data:00000124o
.rdata:00000618 $SG3563         db 'IBM865 cp865 oem865 865',0 ; DATA XREF: .data:0000012Co
.rdata:00000630 $SG3564         db 'IBM866 cp866 oem866 866',0 ; DATA XREF: .data:00000134o
.rdata:00000648 $SG3565         db 'IBM869 cp869 oem869 869',0 ; DATA XREF: .data:0000013Co
.rdata:00000660 $SG3566         db 'big5 csBig5',0      ; DATA XREF: .data:00000144o
.rdata:0000066C $SG3567         db 'gb2312 gbk csGB2312 gb18030',0
.rdata:0000066C                                         ; DATA XREF: .data:0000014Co
.rdata:00000688 $SG3568         db 'Shift_JIS MS_Kanji csShiftJIS csWindows31J',0
.rdata:00000688                                         ; DATA XREF: .data:00000154o
.rdata:000006B3                 align 4
.rdata:000006B4 $SG3569         db 'windows-949 korean',0 ; DATA XREF: .data:0000015Co
.rdata:000006C7                 align 4
.rdata:000006C8 $SG3570         db 'euc-kr csEUCKR',0   ; DATA XREF: .data:00000164o
.rdata:000006D7                 align 4
.rdata:000006D8 $SG3571         db 'tis-620',0          ; DATA XREF: .data:0000016Co
.rdata:000006E0 $SG3572         db 'x-mac-cyrillic xmaccyrillic',0
.rdata:000006E0                                         ; DATA XREF: .data:00000174o
.rdata:000006FC $SG3573         db 'koi8_u',0           ; DATA XREF: .data:0000017Co
.rdata:00000703                 align 4
.rdata:00000704 $SG3574         db 'koi8_r csKOI8R',0   ; DATA XREF: .data:00000184o
.rdata:00000713                 align 4
.rdata:00000714 ; char _SG3651[]
.rdata:00000714 $SG3651         db 'utf-8 utf8',0       ; DATA XREF: EncodingMapper::getEncodingFromString(char const *)+9o
.rdata:0000071F                 align 10h
.rdata:0000071F _rdata          ends
.rdata:0000071F
.text$mn:00000720 ; ===========================================================================
.text$mn:00000720
.text$mn:00000720 ; Segment type: Pure code
.text$mn:00000720 ; Segment permissions: Read/Execute
.text$mn:00000720 _text$mn        segment para public 'CODE' use32
.text$mn:00000720                 assume cs:_text$mn
.text$mn:00000720                 ;org 720h
.text$mn:00000720                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00000720
.text$mn:00000720 ; =============== S U B R O U T I N E =======================================
.text$mn:00000720
.text$mn:00000720 ; Attributes: bp-based frame
.text$mn:00000720
.text$mn:00000720 ; int __thiscall EncodingMapper::getEncodingFromIndex(EncodingMapper *this, int)
.text$mn:00000720                 public ?getEncodingFromIndex@EncodingMapper@@QBEHH@Z
.text$mn:00000720 ?getEncodingFromIndex@EncodingMapper@@QBEHH@Z proc near
.text$mn:00000720
.text$mn:00000720 var_8           = dword ptr -8
.text$mn:00000720 var_4           = dword ptr -4
.text$mn:00000720 arg_0           = dword ptr  8
.text$mn:00000720
.text$mn:00000720                 push    ebp
.text$mn:00000721                 mov     ebp, esp
.text$mn:00000723                 sub     esp, 8
.text$mn:00000726                 mov     [ebp+var_8], ecx
.text$mn:00000729                 mov     [ebp+var_4], 31h ; '1'
.text$mn:00000730                 cmp     [ebp+arg_0], 0
.text$mn:00000734                 jl      short loc_73E
.text$mn:00000736                 mov     eax, [ebp+arg_0]
.text$mn:00000739                 cmp     eax, [ebp+var_4]
.text$mn:0000073C                 jb      short loc_743
.text$mn:0000073E
.text$mn:0000073E loc_73E:                                ; CODE XREF: EncodingMapper::getEncodingFromIndex(int)+14j
.text$mn:0000073E                 or      eax, 0FFFFFFFFh
.text$mn:00000741                 jmp     short loc_74D
.text$mn:00000743 ; ---------------------------------------------------------------------------
.text$mn:00000743
.text$mn:00000743 loc_743:                                ; CODE XREF: EncodingMapper::getEncodingFromIndex(int)+1Cj
.text$mn:00000743                 mov     ecx, [ebp+arg_0]
.text$mn:00000746                 mov     eax, ?encodings@@3PAUEncodingUnit@@A[ecx*8] ; EncodingUnit * encodings
.text$mn:0000074D
.text$mn:0000074D loc_74D:                                ; CODE XREF: EncodingMapper::getEncodingFromIndex(int)+21j
.text$mn:0000074D                 mov     esp, ebp
.text$mn:0000074F                 pop     ebp
.text$mn:00000750                 retn    4
.text$mn:00000750 ?getEncodingFromIndex@EncodingMapper@@QBEHH@Z endp
.text$mn:00000750
.text$mn:00000750 ; ---------------------------------------------------------------------------
.text$mn:00000753                 align 10h
.text$mn:00000760
.text$mn:00000760 ; =============== S U B R O U T I N E =======================================
.text$mn:00000760
.text$mn:00000760 ; Attributes: bp-based frame
.text$mn:00000760
.text$mn:00000760 ; int __thiscall EncodingMapper::getIndexFromEncoding(EncodingMapper *this, int)
.text$mn:00000760                 public ?getIndexFromEncoding@EncodingMapper@@QBEHH@Z
.text$mn:00000760 ?getIndexFromEncoding@EncodingMapper@@QBEHH@Z proc near
.text$mn:00000760
.text$mn:00000760 var_14          = dword ptr -14h
.text$mn:00000760 var_10          = dword ptr -10h
.text$mn:00000760 var_C           = dword ptr -0Ch
.text$mn:00000760 var_8           = dword ptr -8
.text$mn:00000760 var_1           = byte ptr -1
.text$mn:00000760 arg_0           = dword ptr  8
.text$mn:00000760
.text$mn:00000760                 push    ebp
.text$mn:00000761                 mov     ebp, esp
.text$mn:00000763                 sub     esp, 14h
.text$mn:00000766                 mov     [ebp+var_14], ecx
.text$mn:00000769                 mov     [ebp+var_1], 0
.text$mn:0000076D                 mov     [ebp+var_10], 31h ; '1'
.text$mn:00000774                 mov     [ebp+var_8], 0
.text$mn:0000077B                 jmp     short loc_786
.text$mn:0000077D ; ---------------------------------------------------------------------------
.text$mn:0000077D
.text$mn:0000077D loc_77D:                                ; CODE XREF: EncodingMapper::getIndexFromEncoding(int):loc_7A3j
.text$mn:0000077D                 mov     eax, [ebp+var_8]
.text$mn:00000780                 add     eax, 1
.text$mn:00000783                 mov     [ebp+var_8], eax
.text$mn:00000786
.text$mn:00000786 loc_786:                                ; CODE XREF: EncodingMapper::getIndexFromEncoding(int)+1Bj
.text$mn:00000786                 mov     ecx, [ebp+var_8]
.text$mn:00000789                 cmp     ecx, [ebp+var_10]
.text$mn:0000078C                 jnb     short loc_7A5
.text$mn:0000078E                 mov     edx, [ebp+var_8]
.text$mn:00000791                 mov     eax, ?encodings@@3PAUEncodingUnit@@A[edx*8] ; EncodingUnit * encodings
.text$mn:00000798                 cmp     eax, [ebp+arg_0]
.text$mn:0000079B                 jnz     short loc_7A3
.text$mn:0000079D                 mov     [ebp+var_1], 1
.text$mn:000007A1                 jmp     short loc_7A5
.text$mn:000007A3 ; ---------------------------------------------------------------------------
.text$mn:000007A3
.text$mn:000007A3 loc_7A3:                                ; CODE XREF: EncodingMapper::getIndexFromEncoding(int)+3Bj
.text$mn:000007A3                 jmp     short loc_77D
.text$mn:000007A5 ; ---------------------------------------------------------------------------
.text$mn:000007A5
.text$mn:000007A5 loc_7A5:                                ; CODE XREF: EncodingMapper::getIndexFromEncoding(int)+2Cj
.text$mn:000007A5                                         ; EncodingMapper::getIndexFromEncoding(int)+41j
.text$mn:000007A5                 movzx   ecx, [ebp+var_1]
.text$mn:000007A9                 test    ecx, ecx
.text$mn:000007AB                 jz      short loc_7B5
.text$mn:000007AD                 mov     edx, [ebp+var_8]
.text$mn:000007B0                 mov     [ebp+var_C], edx
.text$mn:000007B3                 jmp     short loc_7BC
.text$mn:000007B5 ; ---------------------------------------------------------------------------
.text$mn:000007B5
.text$mn:000007B5 loc_7B5:                                ; CODE XREF: EncodingMapper::getIndexFromEncoding(int)+4Bj
.text$mn:000007B5                 mov     [ebp+var_C], 0FFFFFFFFh
.text$mn:000007BC
.text$mn:000007BC loc_7BC:                                ; CODE XREF: EncodingMapper::getIndexFromEncoding(int)+53j
.text$mn:000007BC                 mov     eax, [ebp+var_C]
.text$mn:000007BF                 mov     esp, ebp
.text$mn:000007C1                 pop     ebp
.text$mn:000007C2                 retn    4
.text$mn:000007C2 ?getIndexFromEncoding@EncodingMapper@@QBEHH@Z endp
.text$mn:000007C2
.text$mn:000007C2 ; ---------------------------------------------------------------------------
.text$mn:000007C5                 align 10h
.text$mn:000007D0
.text$mn:000007D0 ; =============== S U B R O U T I N E =======================================
.text$mn:000007D0
.text$mn:000007D0 ; Attributes: bp-based frame
.text$mn:000007D0
.text$mn:000007D0 ; int __thiscall EncodingMapper::getEncodingFromString(EncodingMapper *this, const char *)
.text$mn:000007D0                 public ?getEncodingFromString@EncodingMapper@@QBEHPBD@Z
.text$mn:000007D0 ?getEncodingFromString@EncodingMapper@@QBEHPBD@Z proc near
.text$mn:000007D0
.text$mn:000007D0 var_10          = dword ptr -10h
.text$mn:000007D0 var_C           = dword ptr -0Ch
.text$mn:000007D0 var_8           = dword ptr -8
.text$mn:000007D0 var_4           = dword ptr -4
.text$mn:000007D0 Str1            = dword ptr  8
.text$mn:000007D0
.text$mn:000007D0                 push    ebp
.text$mn:000007D1                 mov     ebp, esp
.text$mn:000007D3                 sub     esp, 10h
.text$mn:000007D6                 mov     [ebp+var_10], ecx
.text$mn:000007D9                 push    offset $SG3651  ; "utf-8 utf8"
.text$mn:000007DE                 mov     eax, [ebp+Str1]
.text$mn:000007E1                 push    eax             ; Str1
.text$mn:000007E2                 call    ?isInListA@@YA_NPBD0@Z ; isInListA(char const *,char const *)
.text$mn:000007E7                 add     esp, 8
.text$mn:000007EA                 movzx   ecx, al
.text$mn:000007ED                 test    ecx, ecx
.text$mn:000007EF                 jz      short loc_7F8
.text$mn:000007F1                 mov     eax, 0FDE9h
.text$mn:000007F6                 jmp     short loc_852
.text$mn:000007F8 ; ---------------------------------------------------------------------------
.text$mn:000007F8
.text$mn:000007F8 loc_7F8:                                ; CODE XREF: EncodingMapper::getEncodingFromString(char const *)+1Fj
.text$mn:000007F8                 mov     [ebp+var_C], 31h ; '1'
.text$mn:000007FF                 mov     [ebp+var_8], 0FFFFFFFFh
.text$mn:00000806                 mov     [ebp+var_4], 0
.text$mn:0000080D                 jmp     short loc_818
.text$mn:0000080F ; ---------------------------------------------------------------------------
.text$mn:0000080F
.text$mn:0000080F loc_80F:                                ; CODE XREF: EncodingMapper::getEncodingFromString(char const *):loc_84Dj
.text$mn:0000080F                 mov     edx, [ebp+var_4]
.text$mn:00000812                 add     edx, 1
.text$mn:00000815                 mov     [ebp+var_4], edx
.text$mn:00000818
.text$mn:00000818 loc_818:                                ; CODE XREF: EncodingMapper::getEncodingFromString(char const *)+3Dj
.text$mn:00000818                 mov     eax, [ebp+var_4]
.text$mn:0000081B                 cmp     eax, [ebp+var_C]
.text$mn:0000081E                 jnb     short loc_84F
.text$mn:00000820                 mov     ecx, [ebp+var_4]
.text$mn:00000823                 mov     edx, Str[ecx*8]
.text$mn:0000082A                 push    edx             ; Str
.text$mn:0000082B                 mov     eax, [ebp+Str1]
.text$mn:0000082E                 push    eax             ; Str1
.text$mn:0000082F                 call    ?isInListA@@YA_NPBD0@Z ; isInListA(char const *,char const *)
.text$mn:00000834                 add     esp, 8
.text$mn:00000837                 movzx   ecx, al
.text$mn:0000083A                 test    ecx, ecx
.text$mn:0000083C                 jz      short loc_84D
.text$mn:0000083E                 mov     edx, [ebp+var_4]
.text$mn:00000841                 mov     eax, ?encodings@@3PAUEncodingUnit@@A[edx*8] ; EncodingUnit * encodings
.text$mn:00000848                 mov     [ebp+var_8], eax
.text$mn:0000084B                 jmp     short loc_84F
.text$mn:0000084D ; ---------------------------------------------------------------------------
.text$mn:0000084D
.text$mn:0000084D loc_84D:                                ; CODE XREF: EncodingMapper::getEncodingFromString(char const *)+6Cj
.text$mn:0000084D                 jmp     short loc_80F
.text$mn:0000084F ; ---------------------------------------------------------------------------
.text$mn:0000084F
.text$mn:0000084F loc_84F:                                ; CODE XREF: EncodingMapper::getEncodingFromString(char const *)+4Ej
.text$mn:0000084F                                         ; EncodingMapper::getEncodingFromString(char const *)+7Bj
.text$mn:0000084F                 mov     eax, [ebp+var_8]
.text$mn:00000852
.text$mn:00000852 loc_852:                                ; CODE XREF: EncodingMapper::getEncodingFromString(char const *)+26j
.text$mn:00000852                 mov     esp, ebp
.text$mn:00000854                 pop     ebp
.text$mn:00000855                 retn    4
.text$mn:00000855 ?getEncodingFromString@EncodingMapper@@QBEHPBD@Z endp
.text$mn:00000855
.text$mn:00000855 ; ---------------------------------------------------------------------------
.text$mn:00000858                 align 10h
.text$mn:00000860
.text$mn:00000860 ; =============== S U B R O U T I N E =======================================
.text$mn:00000860
.text$mn:00000860 ; Attributes: bp-based frame
.text$mn:00000860
.text$mn:00000860 ; bool __cdecl isInListA(const char *Str1, const char *Str)
.text$mn:00000860                 public ?isInListA@@YA_NPBD0@Z
.text$mn:00000860 ?isInListA@@YA_NPBD0@Z proc near        ; CODE XREF: EncodingMapper::getEncodingFromString(char const *)+12p
.text$mn:00000860                                         ; EncodingMapper::getEncodingFromString(char const *)+5Fp
.text$mn:00000860
.text$mn:00000860 var_54          = dword ptr -54h
.text$mn:00000860 var_50          = dword ptr -50h
.text$mn:00000860 var_4C          = dword ptr -4Ch
.text$mn:00000860 var_48          = dword ptr -48h
.text$mn:00000860 Str2            = byte ptr -44h
.text$mn:00000860 var_4           = dword ptr -4
.text$mn:00000860 Str1            = dword ptr  8
.text$mn:00000860 Str             = dword ptr  0Ch
.text$mn:00000860
.text$mn:00000860                 push    ebp
.text$mn:00000861                 mov     ebp, esp
.text$mn:00000863                 sub     esp, 54h
.text$mn:00000866                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000086B                 xor     eax, ebp
.text$mn:0000086D                 mov     [ebp+var_4], eax
.text$mn:00000870                 cmp     [ebp+Str1], 0
.text$mn:00000874                 jz      short loc_87C
.text$mn:00000876                 cmp     [ebp+Str], 0
.text$mn:0000087A                 jnz     short loc_883
.text$mn:0000087C
.text$mn:0000087C loc_87C:                                ; CODE XREF: isInListA(char const *,char const *)+14j
.text$mn:0000087C                 xor     al, al
.text$mn:0000087E                 jmp     loc_92F
.text$mn:00000883 ; ---------------------------------------------------------------------------
.text$mn:00000883
.text$mn:00000883 loc_883:                                ; CODE XREF: isInListA(char const *,char const *)+1Aj
.text$mn:00000883                 mov     [ebp+var_4C], 0
.text$mn:0000088A                 mov     [ebp+var_48], 0
.text$mn:00000891                 mov     eax, [ebp+Str]
.text$mn:00000894                 push    eax             ; Str
.text$mn:00000895                 call    _strlen
.text$mn:0000089A                 add     esp, 4
.text$mn:0000089D                 mov     [ebp+var_54], eax
.text$mn:000008A0                 jmp     short loc_8AB
.text$mn:000008A2 ; ---------------------------------------------------------------------------
.text$mn:000008A2
.text$mn:000008A2 loc_8A2:                                ; CODE XREF: isInListA(char const *,char const *):loc_928j
.text$mn:000008A2                 mov     ecx, [ebp+var_4C]
.text$mn:000008A5                 add     ecx, 1
.text$mn:000008A8                 mov     [ebp+var_4C], ecx
.text$mn:000008AB
.text$mn:000008AB loc_8AB:                                ; CODE XREF: isInListA(char const *,char const *)+40j
.text$mn:000008AB                 mov     edx, [ebp+var_4C]
.text$mn:000008AE                 cmp     edx, [ebp+var_54]
.text$mn:000008B1                 ja      short loc_92D
.text$mn:000008B3                 mov     eax, [ebp+Str]
.text$mn:000008B6                 add     eax, [ebp+var_4C]
.text$mn:000008B9                 movsx   ecx, byte ptr [eax]
.text$mn:000008BC                 cmp     ecx, 20h ; ' '
.text$mn:000008BF                 jz      short loc_8CE
.text$mn:000008C1                 mov     edx, [ebp+Str]
.text$mn:000008C4                 add     edx, [ebp+var_4C]
.text$mn:000008C7                 movsx   eax, byte ptr [edx]
.text$mn:000008CA                 test    eax, eax
.text$mn:000008CC                 jnz     short loc_910
.text$mn:000008CE
.text$mn:000008CE loc_8CE:                                ; CODE XREF: isInListA(char const *,char const *)+5Fj
.text$mn:000008CE                 cmp     [ebp+var_48], 0
.text$mn:000008D2                 jz      short loc_90E
.text$mn:000008D4                 mov     ecx, [ebp+var_48]
.text$mn:000008D7                 mov     [ebp+var_50], ecx
.text$mn:000008DA                 cmp     [ebp+var_50], 40h ; '@'
.text$mn:000008DE                 jnb     short loc_8E2
.text$mn:000008E0                 jmp     short loc_8E7
.text$mn:000008E2 ; ---------------------------------------------------------------------------
.text$mn:000008E2
.text$mn:000008E2 loc_8E2:                                ; CODE XREF: isInListA(char const *,char const *)+7Ej
.text$mn:000008E2                 call    ___report_rangecheckfailure
.text$mn:000008E7
.text$mn:000008E7 loc_8E7:                                ; CODE XREF: isInListA(char const *,char const *)+80j
.text$mn:000008E7                 mov     edx, [ebp+var_50]
.text$mn:000008EA                 mov     [ebp+edx+Str2], 0
.text$mn:000008EF                 mov     [ebp+var_48], 0
.text$mn:000008F6                 lea     eax, [ebp+Str2]
.text$mn:000008F9                 push    eax             ; Str2
.text$mn:000008FA                 mov     ecx, [ebp+Str1]
.text$mn:000008FD                 push    ecx             ; Str1
.text$mn:000008FE                 call    _stricmp
.text$mn:00000903                 add     esp, 8
.text$mn:00000906                 test    eax, eax
.text$mn:00000908                 jnz     short loc_90E
.text$mn:0000090A                 mov     al, 1
.text$mn:0000090C                 jmp     short loc_92F
.text$mn:0000090E ; ---------------------------------------------------------------------------
.text$mn:0000090E
.text$mn:0000090E loc_90E:                                ; CODE XREF: isInListA(char const *,char const *)+72j
.text$mn:0000090E                                         ; isInListA(char const *,char const *)+A8j
.text$mn:0000090E                 jmp     short loc_928
.text$mn:00000910 ; ---------------------------------------------------------------------------
.text$mn:00000910
.text$mn:00000910 loc_910:                                ; CODE XREF: isInListA(char const *,char const *)+6Cj
.text$mn:00000910                 mov     edx, [ebp+Str]
.text$mn:00000913                 add     edx, [ebp+var_4C]
.text$mn:00000916                 mov     eax, [ebp+var_48]
.text$mn:00000919                 mov     cl, [edx]
.text$mn:0000091B                 mov     [ebp+eax+Str2], cl
.text$mn:0000091F                 mov     edx, [ebp+var_48]
.text$mn:00000922                 add     edx, 1
.text$mn:00000925                 mov     [ebp+var_48], edx
.text$mn:00000928
.text$mn:00000928 loc_928:                                ; CODE XREF: isInListA(char const *,char const *):loc_90Ej
.text$mn:00000928                 jmp     loc_8A2
.text$mn:0000092D ; ---------------------------------------------------------------------------
.text$mn:0000092D
.text$mn:0000092D loc_92D:                                ; CODE XREF: isInListA(char const *,char const *)+51j
.text$mn:0000092D                 xor     al, al
.text$mn:0000092F
.text$mn:0000092F loc_92F:                                ; CODE XREF: isInListA(char const *,char const *)+1Ej
.text$mn:0000092F                                         ; isInListA(char const *,char const *)+ACj
.text$mn:0000092F                 mov     ecx, [ebp+var_4]
.text$mn:00000932                 xor     ecx, ebp
.text$mn:00000934                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00000939                 mov     esp, ebp
.text$mn:0000093B                 pop     ebp
.text$mn:0000093C                 retn
.text$mn:0000093C ?isInListA@@YA_NPBD0@Z endp
.text$mn:0000093C
.text$mn:0000093C ; ---------------------------------------------------------------------------
.text$mn:0000093D                 align 10h
.text$mn:0000093D _text$mn        ends
.text$mn:0000093D
.text$mn:00000940 ; ===========================================================================
.text$mn:00000940
.text$mn:00000940 ; Segment type: Pure code
.text$mn:00000940 ; Segment permissions: Read/Execute
.text$mn:00000940 _text$mn        segment para public 'CODE' use32
.text$mn:00000940                 assume cs:_text$mn
.text$mn:00000940                 ;org 940h
.text$mn:00000940 ; COMDAT (pick any)
.text$mn:00000940                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$mn:00000940
.text$mn:00000940 ; =============== S U B R O U T I N E =======================================
.text$mn:00000940
.text$mn:00000940 ; Attributes: bp-based frame
.text$mn:00000940
.text$mn:00000940 ; private: __thiscall EncodingMapper::EncodingMapper(void)
.text$mn:00000940                 public ??0EncodingMapper@@AAE@XZ
.text$mn:00000940 ??0EncodingMapper@@AAE@XZ proc near     ; CODE XREF: `dynamic initializer for 'EncodingMapper * EncodingMapper::_pSelf''(void)+42p
.text$mn:00000940
.text$mn:00000940 var_4           = dword ptr -4
.text$mn:00000940
.text$mn:00000940                 push    ebp
.text$mn:00000941                 mov     ebp, esp
.text$mn:00000943                 push    ecx
.text$mn:00000944                 mov     [ebp+var_4], ecx
.text$mn:00000947                 mov     eax, [ebp+var_4]
.text$mn:0000094A                 mov     esp, ebp
.text$mn:0000094C                 pop     ebp
.text$mn:0000094D                 retn
.text$mn:0000094D ??0EncodingMapper@@AAE@XZ endp
.text$mn:0000094D
.text$mn:0000094D ; ---------------------------------------------------------------------------
.text$mn:0000094E                 align 10h
.text$mn:0000094E _text$mn        ends
.text$mn:0000094E
.text$di:00000950 ; ===========================================================================
.text$di:00000950
.text$di:00000950 ; Segment type: Pure code
.text$di:00000950 ; Segment permissions: Read/Execute
.text$di:00000950 _text$di        segment para public 'CODE' use32
.text$di:00000950                 assume cs:_text$di
.text$di:00000950                 ;org 950h
.text$di:00000950 ; COMDAT (pick any)
.text$di:00000950                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$di:00000950
.text$di:00000950 ; =============== S U B R O U T I N E =======================================
.text$di:00000950
.text$di:00000950 ; Attributes: bp-based frame
.text$di:00000950
.text$di:00000950 ; void __cdecl `dynamic initializer for 'private: static class EncodingMapper * EncodingMapper::_pSelf''(void)
.text$di:00000950 ??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ proc near
.text$di:00000950                                         ; DATA XREF: .CRT$XCU:void (*EncodingMapper::_pSelf$initializer$)(void)o
.text$di:00000950
.text$di:00000950 var_18          = dword ptr -18h
.text$di:00000950 var_14          = dword ptr -14h
.text$di:00000950 var_10          = dword ptr -10h
.text$di:00000950 var_C           = dword ptr -0Ch
.text$di:00000950 var_4           = dword ptr -4
.text$di:00000950
.text$di:00000950                 push    ebp
.text$di:00000951                 mov     ebp, esp
.text$di:00000953                 push    0FFFFFFFFh
.text$di:00000955                 push    offset __ehhandler$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ
.text$di:0000095A                 mov     eax, large fs:0
.text$di:00000960                 push    eax
.text$di:00000961                 sub     esp, 0Ch
.text$di:00000964                 mov     eax, dword ptr ds:___security_cookie
.text$di:00000969                 xor     eax, ebp
.text$di:0000096B                 push    eax
.text$di:0000096C                 lea     eax, [ebp+var_C]
.text$di:0000096F                 mov     large fs:0, eax
.text$di:00000975                 push    4               ; unsigned int
.text$di:00000977                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$di:0000097C                 add     esp, 4
.text$di:0000097F                 mov     [ebp+var_10], eax
.text$di:00000982                 mov     [ebp+var_4], 0
.text$di:00000989                 cmp     [ebp+var_10], 0
.text$di:0000098D                 jz      short loc_99C
.text$di:0000098F                 mov     ecx, [ebp+var_10]
.text$di:00000992                 call    ??0EncodingMapper@@AAE@XZ ; EncodingMapper::EncodingMapper(void)
.text$di:00000997                 mov     [ebp+var_14], eax
.text$di:0000099A                 jmp     short loc_9A3
.text$di:0000099C ; ---------------------------------------------------------------------------
.text$di:0000099C
.text$di:0000099C loc_99C:                                ; CODE XREF: `dynamic initializer for 'EncodingMapper * EncodingMapper::_pSelf''(void)+3Dj
.text$di:0000099C                 mov     [ebp+var_14], 0
.text$di:000009A3
.text$di:000009A3 loc_9A3:                                ; CODE XREF: `dynamic initializer for 'EncodingMapper * EncodingMapper::_pSelf''(void)+4Aj
.text$di:000009A3                 mov     eax, [ebp+var_14]
.text$di:000009A6                 mov     [ebp+var_18], eax
.text$di:000009A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$di:000009B0                 mov     ecx, [ebp+var_18]
.text$di:000009B3                 mov     ds:?_pSelf@EncodingMapper@@0PAV1@A, ecx ; EncodingMapper * EncodingMapper::_pSelf
.text$di:000009B9                 mov     ecx, [ebp+var_C]
.text$di:000009BC                 mov     large fs:0, ecx
.text$di:000009C3                 pop     ecx
.text$di:000009C4                 mov     esp, ebp
.text$di:000009C6                 pop     ebp
.text$di:000009C7                 retn
.text$di:000009C7 ??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ endp
.text$di:000009C7
.text$di:000009C7 _text$di        ends
.text$di:000009C7
.text$x:000009C8 ; ===========================================================================
.text$x:000009C8
.text$x:000009C8 ; Segment type: Pure code
.text$x:000009C8 ; Segment permissions: Read/Execute
.text$x:000009C8 _text$x         segment para public 'CODE' use32
.text$x:000009C8                 assume cs:_text$x
.text$x:000009C8                 ;org 9C8h
.text$x:000009C8 ; COMDAT (pick associative to section at 950)
.text$x:000009C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text$x:000009C8
.text$x:000009C8 ; =============== S U B R O U T I N E =======================================
.text$x:000009C8
.text$x:000009C8
.text$x:000009C8 __unwindfunclet$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ$0 proc near
.text$x:000009C8                                         ; DATA XREF: .xdata$x:000009F4o
.text$x:000009C8                 mov     eax, [ebp-10h]
.text$x:000009CB                 push    eax             ; void *
.text$x:000009CC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$x:000009D1                 pop     ecx
.text$x:000009D2                 retn
.text$x:000009D2 __unwindfunclet$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ$0 endp
.text$x:000009D2
.text$x:000009D3
.text$x:000009D3 ; =============== S U B R O U T I N E =======================================
.text$x:000009D3
.text$x:000009D3
.text$x:000009D3 __ehhandler$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ proc near
.text$x:000009D3                                         ; DATA XREF: `dynamic initializer for 'EncodingMapper * EncodingMapper::_pSelf''(void)+5o
.text$x:000009D3
.text$x:000009D3 arg_4           = dword ptr  8
.text$x:000009D3
.text$x:000009D3                 mov     edx, [esp+arg_4]
.text$x:000009D7                 lea     eax, [edx+0Ch]
.text$x:000009DA                 mov     ecx, [edx-10h]
.text$x:000009DD                 xor     ecx, eax
.text$x:000009DF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000009E4                 mov     eax, offset __ehfuncinfo$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ
.text$x:000009E9                 jmp     ___CxxFrameHandler3
.text$x:000009E9 __ehhandler$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ endp
.text$x:000009E9
.text$x:000009E9 ; ---------------------------------------------------------------------------
.text$x:000009EE                 align 10h
.text$x:000009EE _text$x         ends
.text$x:000009EE
.xdata$x:000009F0 ; ===========================================================================
.xdata$x:000009F0
.xdata$x:000009F0 ; Segment type: Pure data
.xdata$x:000009F0 ; Segment permissions: Read
.xdata$x:000009F0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:000009F0                 assume cs:_xdata$x
.xdata$x:000009F0                 ;org 9F0h
.xdata$x:000009F0 ; COMDAT (pick associative to section at 950)
.xdata$x:000009F0 __unwindtable$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ db 0FFh
.xdata$x:000009F0                                         ; DATA XREF: .xdata$x:00000A00o
.xdata$x:000009F1                 db 0FFh
.xdata$x:000009F2                 db 0FFh
.xdata$x:000009F3                 db 0FFh
.xdata$x:000009F4                 dd offset __unwindfunclet$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ$0
.xdata$x:000009F8 __ehfuncinfo$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ db  22h ; "
.xdata$x:000009F8                                         ; DATA XREF: __ehhandler$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ+11o
.xdata$x:000009F9                 db    5
.xdata$x:000009FA                 db  93h ; ô
.xdata$x:000009FB                 db  19h
.xdata$x:000009FC                 db    1
.xdata$x:000009FD                 db    0
.xdata$x:000009FE                 db    0
.xdata$x:000009FF                 db    0
.xdata$x:00000A00                 dd offset __unwindtable$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ
.xdata$x:00000A04                 db    0
.xdata$x:00000A05                 db    0
.xdata$x:00000A06                 db    0
.xdata$x:00000A07                 db    0
.xdata$x:00000A08                 db    0
.xdata$x:00000A09                 db    0
.xdata$x:00000A0A                 db    0
.xdata$x:00000A0B                 db    0
.xdata$x:00000A0C                 db    0
.xdata$x:00000A0D                 db    0
.xdata$x:00000A0E                 db    0
.xdata$x:00000A0F                 db    0
.xdata$x:00000A10                 db    0
.xdata$x:00000A11                 db    0
.xdata$x:00000A12                 db    0
.xdata$x:00000A13                 db    0
.xdata$x:00000A14                 db    0
.xdata$x:00000A15                 db    0
.xdata$x:00000A16                 db    0
.xdata$x:00000A17                 db    0
.xdata$x:00000A18                 db    0
.xdata$x:00000A19                 db    0
.xdata$x:00000A1A                 db    0
.xdata$x:00000A1B                 db    0
.xdata$x:00000A1B _xdata$x        ends
.xdata$x:00000A1B
.bss:00000A1C ; ===========================================================================
.bss:00000A1C
.bss:00000A1C ; Segment type: Uninitialized
.bss:00000A1C ; Segment permissions: Read/Write
.bss:00000A1C _bss            segment dword public 'BSS' use32
.bss:00000A1C                 assume cs:_bss
.bss:00000A1C                 ;org 0A1Ch
.bss:00000A1C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000A1C                 public ?_pSelf@EncodingMapper@@0PAV1@A
.bss:00000A1C ; private: static class EncodingMapper * EncodingMapper::_pSelf
.bss:00000A1C ?_pSelf@EncodingMapper@@0PAV1@A dd ?    ; DATA XREF: `dynamic initializer for 'EncodingMapper * EncodingMapper::_pSelf''(void)+63w
.bss:00000A1C _bss            ends
.bss:00000A1C
.CRT$XCU:00000A20 ; ===========================================================================
.CRT$XCU:00000A20
.CRT$XCU:00000A20 ; Segment type: Pure data
.CRT$XCU:00000A20 ; Segment permissions: Read
.CRT$XCU:00000A20 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:00000A20                 assume cs:_CRT$XCU
.CRT$XCU:00000A20                 ;org 0A20h
.CRT$XCU:00000A20 ; private: static void (__cdecl *EncodingMapper::_pSelf$initializer$)(void)
.CRT$XCU:00000A20 ?_pSelf$initializer$@EncodingMapper@@0P6AXXZA dd offset ??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ ; `dynamic initializer for 'EncodingMapper * EncodingMapper::_pSelf''(void)
.CRT$XCU:00000A20 _CRT$XCU        ends
.CRT$XCU:00000A20
UNDEF:00000A30 ; ===========================================================================
UNDEF:00000A30
UNDEF:00000A30 ; Segment type: Externs
UNDEF:00000A30 ; UNDEF
UNDEF:00000A30 ; void *__cdecl operator new(unsigned int)
UNDEF:00000A30                 extrn ??2@YAPAXI@Z:near ; CODE XREF: `dynamic initializer for 'EncodingMapper * EncodingMapper::_pSelf''(void)+27p
UNDEF:00000A34 ; void __cdecl operator delete(void *)
UNDEF:00000A34                 extrn ??3@YAXPAX@Z:near ; CODE XREF: __unwindfunclet$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ$0+4p
UNDEF:00000A38                 extrn ___report_rangecheckfailure:near
UNDEF:00000A38                                         ; CODE XREF: isInListA(char const *,char const *):loc_8E2p
UNDEF:00000A3C ; size_t __cdecl strlen(const char *Str)
UNDEF:00000A3C                 extrn _strlen:near      ; CODE XREF: isInListA(char const *,char const *)+35p
UNDEF:00000A40 ; int __cdecl stricmp(const char *Str1, const char *Str2)
UNDEF:00000A40                 extrn _stricmp:near     ; CODE XREF: isInListA(char const *,char const *)+9Ep
UNDEF:00000A44 ; __fastcall __security_check_cookie(x)
UNDEF:00000A44                 extrn @__security_check_cookie@4:near
UNDEF:00000A44                                         ; CODE XREF: isInListA(char const *,char const *)+D4p
UNDEF:00000A44                                         ; __ehhandler$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ+Cp
UNDEF:00000A48                 extrn ___CxxFrameHandler3:near
UNDEF:00000A48                                         ; CODE XREF: __ehhandler$??__E?_pSelf@EncodingMapper@@0PAV1@A@@YAXXZ+16j
UNDEF:00000A4C                 extrn ___security_cookie:near
UNDEF:00000A4C                                         ; DATA XREF: isInListA(char const *,char const *)+6r
UNDEF:00000A4C                                         ; `dynamic initializer for 'EncodingMapper * EncodingMapper::_pSelf''(void)+14r
UNDEF:00000A4C
UNDEF:00000A4C
UNDEF:00000A4C                 end